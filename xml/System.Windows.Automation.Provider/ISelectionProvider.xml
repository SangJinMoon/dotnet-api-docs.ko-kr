<Type Name="ISelectionProvider" FullName="System.Windows.Automation.Provider.ISelectionProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ca7fd236360c976546e126a4b2d8b0f9cd8e711e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30615227" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ISelectionProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISelectionProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.ISelectionProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISelectionProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISelectionProvider" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("fb8b03af-3bdf-48d4-bd36-1a65793be168")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1f71d-101">선택 가능한 개별 자식 항목의 컬렉션에 대한 컨테이너 역할을 하는 컨트롤에 대한 UI 자동화 클라이언트 액세스를 지원하도록 메서드 및 속성을 공개합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1f71d-101">Exposes methods and properties to support UI Automation client access to controls that act as containers for a collection of individual, selectable child items.</span>
      </span>
      <span data-ttu-id="1f71d-102">이 컨트롤의 자식 항목은 <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" />를 구현해야 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1f71d-102">The children of this control must implement <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f71d-103">지원 해야 하는 UI 자동화 공급자에서 구현 되는 <xref:System.Windows.Automation.SelectionPattern> 컨트롤 패턴.</span><span class="sxs-lookup"><span data-stu-id="1f71d-103">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.SelectionPattern> control pattern.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.SelectionPattern" />
  </Docs>
  <Members>
    <Member MemberName="CanSelectMultiple">
      <MemberSignature Language="C#" Value="public bool CanSelectMultiple { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSelectMultiple" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanSelectMultiple As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanSelectMultiple { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1f71d-104">UI 자동화 공급자에서 둘 이상의 자식 요소가 동시에 선택되도록 하는지 여부를 지정하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f71d-104">Gets a value that specifies whether the UI Automation provider allows more than one child element to be selected concurrently.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1f71d-105">다중 선택이 허용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f71d-105">
              <see langword="true" /> if multiple selection is allowed; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f71d-106">이 속성은 동적 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1f71d-106">This property may be dynamic.</span></span> <span data-ttu-id="1f71d-107">예를 들어 드문 경우에서 컨트롤에는 여러 항목을 초기화에서 선택할 수 있지만 이후에 만들어지는 하나의 선택 항목만 허용 통합할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1f71d-107">For example, in rare cases a control might allow multiple items to be selected on initialization but subsequently allow only single selections to be made.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1f71d-108">다음 예제에서는 한 번에 둘 이상의 항목을 선택할 수 없는 목록에 대 한이 메서드의 구현을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1f71d-108">The following example shows an implementation of this method for a list that does not allow selection of more than one item at a time.</span></span>  
  
 [!code-csharp[UIAISelectionProvider_ISelectionItemProvider_snip#CanSelectMultiple](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAISelectionProvider_ISelectionItemProvider_snip/CSharp/ListFragment.cs#canselectmultiple)]
 [!code-vb[UIAISelectionProvider_ISelectionItemProvider_snip#CanSelectMultiple](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAISelectionProvider_ISelectionItemProvider_snip/visualbasic/listfragment.vb#canselectmultiple)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSelection">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderSimple[] GetSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderSimple[] GetSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ISelectionProvider.GetSelection" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSelection () As IRawElementProviderSimple()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::Provider::IRawElementProviderSimple ^&gt; ^ GetSelection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1f71d-109">선택한 각 자식 요소에 대해 UI 자동화 공급자를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f71d-109">Retrieves a UI Automation provider for each child element that is selected.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1f71d-110">UI 자동화 공급자 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f71d-110">A collection of UI Automation providers.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f71d-111">공급자는 값을 제공 하지 않는 경우 UIAutoCore.dll 하 여 기본 빈 배열이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1f71d-111">A default empty array is returned by UIAutoCore.dll when the provider doesn't supply a value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1f71d-112">다음 예제에서는 항목을 하나만 선택할 수 있는 목록 상자에 대 한이 메서드의 가능한 한 구현을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1f71d-112">The following example shows one possible implementation of this method for a list box that supports only single selection.</span></span>  
  
 [!code-csharp[UIAISelectionProvider_ISelectionItemProvider_snip#GetSelection](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAISelectionProvider_ISelectionItemProvider_snip/CSharp/ListFragment.cs#getselection)]
 [!code-vb[UIAISelectionProvider_ISelectionItemProvider_snip#GetSelection](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAISelectionProvider_ISelectionItemProvider_snip/visualbasic/listfragment.vb#getselection)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSelectionRequired">
      <MemberSignature Language="C#" Value="public bool IsSelectionRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSelectionRequired" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSelectionRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSelectionRequired { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1f71d-113">UI 자동화 공급자에서 하나 이상의 자식 요소를 선택해야 하는지 여부를 지정하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f71d-113">Gets a value that specifies whether the UI Automation provider requires at least one child element to be selected.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1f71d-114">선택해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f71d-114">
              <see langword="true" /> if selection is required; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f71d-115">이 속성은 동적일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1f71d-115">This property can be dynamic.</span></span> <span data-ttu-id="1f71d-116">예를 들어, 컨트롤의 초기 상태 되지 않았을 수 있음을 의미 기본적으로 선택 된 항목이 <xref:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired%2A> 은 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="1f71d-116">For example, the initial state of a control might not have any items selected by default, meaning that <xref:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired%2A> is `false`.</span></span> <span data-ttu-id="1f71d-117">그러나 항목이 선택된 후에는 컨트롤에 하나 이상의 항목이 항상 선택되어 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="1f71d-117">However, after an item is selected, the control must always have at least one item selected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1f71d-118">다음 예제는 항목을 항상 선택 해야 하는 목록에 대 한이 메서드의 구현을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1f71d-118">The following example shows an implementation of this method for a list that requires an item to be selected at all times.</span></span>  
  
 [!code-csharp[UIAISelectionProvider_ISelectionItemProvider_snip#IsSelectionRequired](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAISelectionProvider_ISelectionItemProvider_snip/CSharp/ListFragment.cs#isselectionrequired)]
 [!code-vb[UIAISelectionProvider_ISelectionItemProvider_snip#IsSelectionRequired](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAISelectionProvider_ISelectionItemProvider_snip/visualbasic/listfragment.vb#isselectionrequired)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>