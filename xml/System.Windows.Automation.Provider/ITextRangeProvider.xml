<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ITextRangeProvider.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e05b5b2-d481-4262-b7b7-7de7ac2afe07536feacce0da7079d68f4841565d23f772ba8f86.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">536feacce0da7079d68f4841565d23f772ba8f86</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df6cf590aa3087f6c7c202712eee781c6a3c8f96</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/07/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Automation.Provider.ITextRangeProvider">
          <source>Exposes methods and properties to support UI Automation client access to a span of continuous text in a text container that implements <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Provider.ITextProvider" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Automation.Provider.ITextProvider" /&gt;</ph>를 구현하는 텍스트 컨테이너에 있는 연속 텍스트의 범위에 대한 UI 자동화 클라이언트 액세스를 지원하는 메서드 및 속성을 노출합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Automation.Provider.ITextRangeProvider">
          <source>Implemented on a UI Automation provider that must support the <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> control pattern.</source>
          <target state="translated">지원 해야 하는 UI 자동화 공급자에서 구현 되는 <ph id="ph1">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> 컨트롤 패턴.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Automation.Provider.ITextRangeProvider">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph> can represent an insertion point, a subset, or all of the text in a <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> container.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRange&gt;</ph> 삽입 지점 하위 집합 또는에 텍스트를 모두 나타낼 수 있습니다는 <ph id="ph2">&lt;xref:System.Windows.Automation.TextPattern&gt;</ph> 컨테이너입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection">
          <source>Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</source>
          <target state="translated">서로 분리된 여러 선택 영역을 지원하는 텍스트 컨테이너의 강조 표시된 텍스트 컬렉션에 추가합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection">
          <source>The text insertion point moves to the area of the new selection.</source>
          <target state="translated">새 선택의 영역에 텍스트 삽입 지점 이동합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection">
          <source>Providing a degenerate text range moves the insertion point.</source>
          <target state="translated">삽입 지점이 이동 디 제너 레이트 텍스트 범위를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection">
          <source>If text provider does not support multiple, disjoint selections (that is, <ph id="ph1">&lt;see cref="P:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection" /&gt;</ph> must have a value of <ph id="ph2">&lt;see langword="Multiple" /&gt;</ph>).</source>
          <target state="translated">텍스트 공급자에서 서로 분리된 여러 선택 영역을 지원하지 않는 경우. 즉, <ph id="ph1">&lt;see cref="P:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection" /&gt;</ph>의 값이 <ph id="ph2">&lt;see langword="Multiple" /&gt;</ph>이어야 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Clone">
          <source>Returns a new <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /&gt;</ph> identical to the original <ph id="ph2">&lt;see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /&gt;</ph> and inheriting all properties of the original.</source>
          <target state="translated">원래 <ph id="ph2">&lt;see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /&gt;</ph>와 동일하고 원본의 모든 속성을 상속하는 새 <ph id="ph1">&lt;see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Clone">
          <source>The new text range.</source>
          <target state="translated">새 텍스트 범위입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Clone">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) is never returned.</source>
          <target state="translated">null 참조(Visual Basic의 경우 <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>)는 반환되지 않습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Clone">
          <source>The new range can be manipulated independently from the original.</source>
          <target state="translated">새 범위를에서 독립적으로 조작할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)">
          <source>A text range to compare</source>
          <target state="translated">비교할 텍스트 범위입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)">
          <source>Returns a value that indicates whether the span (the <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> endpoint to the <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoint) of a text range is the same as another text range.</source>
          <target state="translated">텍스트의 범위(<ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> 끝점에서 <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> 끝점까지)가 다른 텍스트 범위와 동일한지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the span of both text ranges is identical; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">두 텍스트 범위가 서로 같으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)">
          <source>If the range being compared does not come from the same text provider.</source>
          <target state="translated">비교하는 범위를 같은 텍스트 공급자에서 가져오지 않은 경우</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>The <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoint of the caller.</source>
          <target state="translated">호출자의 <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> 끝점입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>The target range for comparison.</source>
          <target state="translated">비교할 대상 범위입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>The <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoint of the target.</source>
          <target state="translated">대상의 <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> 끝점입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Returns a value that specifies whether two text ranges have identical endpoints.</source>
          <target state="translated">두 텍스트 범위의 끝점이 동일한지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.</source>
          <target state="translated">텍스트에서 호출자의 끝점이 대상 끝점보다 먼저 나타나면 음수 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Returns zero if the caller's endpoint is at the same location as the target endpoint.</source>
          <target state="translated">호출자의 끝점이 대상 끝점과 같은 위치에 있으면 0을 반환합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.</source>
          <target state="translated">텍스트에서 호출자의 끝점이 대상 끝점보다 나중에 나타나면 양수 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>If <ph id="ph1">&lt;paramref name="targetRange" /&gt;</ph> is from a different text provider.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="targetRange" /&gt;</ph>를 다른 텍스트 공급자에서 가져온 경우</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The textual unit.</source>
          <target state="translated">텍스트 단위입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>Expands the text range to the specified text unit.</source>
          <target state="translated">텍스트 범위를 지정된 텍스트 단위로 확장합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>If the range is already an exact quantity of the specified units then it remains unchanged.</source>
          <target state="translated">범위 지정된 단위는 정확한 수량 이미 있으면 다음 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>There is a series of steps are involved behind the scenes in order for the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> method to execute successfully.</source>
          <target state="translated">백그라운드에서 순서에 대 한 관련 된 일련의 단계는는 <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> 메서드를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint, which makes the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint superfluous.</source>
          <target state="translated">텍스트 범위가 정규화됩니다. 다시 말해서, 텍스트 범위가 <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> 끝점에서 중복 제거 범위로 축소되어 <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> 끝점이 불필요해집니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt><ph id="ph2">https://www.microsoft.com/</ph><ept id="p1">](https://www.microsoft.com/)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">이 단계는 텍스트 범위에 걸쳐 있는 경우 모호성을 제거 하는 데 필요한 <ph id="ph1">`unit`</ph> 경계; 예를 들어 "{The U} RL <bpt id="p1">[</bpt> <ph id="ph2">https://www.microsoft.com/</ph> <ept id="p1">](https://www.microsoft.com/)</ept> 텍스트에 포함 된" 위치 "{" 및 "}"는 텍스트 범위 끝점입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The resulting range is moved backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> to the beginning of the requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">결과 범위가 <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> 내에서 뒤쪽으로 옮겨져 요청된 <ph id="ph2">`unit`</ph> 경계의 시작 부분으로 이동하게 됩니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The range is moved forward or backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> by the requested number of <ph id="ph2">`unit`</ph> boundaries.</source>
          <target state="translated">범위가 요청된 <ph id="ph2">`unit`</ph> 경계 수만큼 <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> 내에서 앞이나 뒤로 이동합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The range is then expanded from a degenerate range state by moving the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint by one requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">그런 다음, 요청된 <ph id="ph2">`unit`</ph> 경계 하나만큼 <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> 끝점을 이동하여 중복 제거 범위 상태이던 범위가 확장됩니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Move &amp; ExpandToEnclosingUnit으로 범위 조정<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Move &amp; ExpandToEnclosingUnit으로 범위 조정<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</source>
          <target state="translated">Move() 및 ExpandToEnclosingUnit()에 따라 텍스트 범위가 조정되는 방법의 예</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.</source>
          <target state="translated">전체 단어, 문장 또는 삽입 지점 또는 가상 커서 위치에서 전체 단락 읽으므로 화면 판독기에 대 한 일반적 이러한 단계는 필요 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A&gt;</ph> respects both hidden and visible text.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A&gt;</ph> 숨겨진 / 표시 텍스트는 존중입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A&gt;</ph> defers to the next largest <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supported if the given <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> is not supported by the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A&gt;</ph> 단위는 다음 가장 큰 <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> 지원 되는 경우에는 주어진 <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> 컨트롤에서 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">최소 단위에서 가장 큰, 순서, 아래에 나열 됩니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
          <source>The attribute to search for.</source>
          <target state="translated">검색할 특성입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
          <source>The attribute value to search for.</source>
          <target state="translated">검색할 특성 값입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
          <source>This value must match the type specified for the attribute.</source>
          <target state="translated">이 값은 특성에 지정된 형식과 일치해야 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the last occurring text range should be returned instead of the first; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">마지막으로 나타나는 텍스트 범위를 반환해야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 처음으로 나타나는 텍스트 범위를 반환해야 하면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
          <source>Returns a text range subset that has the specified attribute value.</source>
          <target state="translated">지정된 특성 값을 갖는 텍스트 범위 하위 집합을 반환합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
          <source>A text range having a matching attribute and attribute value; otherwise null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</source>
          <target state="translated">특성 및 특성 값이 일치하는 텍스트 범위이거나, 이러한 범위가 없으면 null(Visual Basic의 경우 <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">숨겨진 / 표시 텍스트 구분 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)">
          <source>The text string to search for.</source>
          <target state="translated">검색할 텍스트 문자열입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the last occurring text range should be returned instead of the first; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">마지막으로 나타나는 텍스트 범위를 반환해야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 처음으로 나타나는 텍스트 범위를 반환해야 하면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if case should be ignored; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">대/소문자를 구분하지 않으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)">
          <source>Returns a text range subset that contains the specified text.</source>
          <target state="translated">지정된 텍스트를 포함하는 텍스트 범위 하위 집합을 반환합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)">
          <source>A text range matching the specified text; otherwise null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</source>
          <target state="translated">지정된 텍스트와 일치하는 텍스트 범위이거나, 이러한 범위가 없으면 null(Visual Basic의 경우 <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">숨겨진 / 표시 텍스트 구분 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
          <source>The text attribute.</source>
          <target state="translated">텍스트 특성입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
          <source>Retrieves the value of the specified attribute across the text range.</source>
          <target state="translated">텍스트 범위에서 지정된 특성 값을 검색합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
          <source>Retrieves an object representing the value of the specified attribute.</source>
          <target state="translated">지정된 특성의 값을 나타내는 개체를 검색합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
          <source>For example, <bpt id="p1">&lt;c&gt;</bpt>GetAttributeValue(TextPattern.FontNameAttribute)<ept id="p1">&lt;/c&gt;</ept> would return a string that represents the font name of the text range while <bpt id="p2">&lt;c&gt;</bpt>GetAttributeValue(TextPattern.IsItalicAttribute)<ept id="p2">&lt;/c&gt;</ept> would return a value of type <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>.</source>
          <target state="translated">예를 들어 <bpt id="p1">&lt;c&gt;</bpt>GetAttributeValue(TextPattern.FontNameAttribute)<ept id="p1">&lt;/c&gt;</ept>는 텍스트 범위에 글꼴이 하나만 사용되는 경우 해당 글꼴 이름을 나타내는 문자열을 반환하는 반면 <bpt id="p2">&lt;c&gt;</bpt>GetAttributeValue(TextPattern.IsItalicAttribute)<ept id="p2">&lt;/c&gt;</ept>는 <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> 형식의 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
          <source>Returns <ph id="ph1">&lt;see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /&gt;</ph> if the value of the specified attribute varies over the text range.</source>
          <target state="translated">지정된 특성의 값이 텍스트 범위에서 일정하지 않게 변화하면 <ph id="ph1">&lt;see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
          <source>Returns <ph id="ph1">&lt;see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /&gt;</ph> if the specified attribute is not supported by the provider or the control.</source>
          <target state="translated">지정된 특성을 공급자 또는 컨트롤에서 지원하지 않으면 <ph id="ph1">&lt;see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
          <source>There is no differentiation between hidden and visible text.</source>
          <target state="translated">숨겨진 / 표시 텍스트 구분 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
          <source>If the specified attribute is not valid.</source>
          <target state="translated">지정된 특성이 유효하지 않은 경우</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles">
          <source>Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</source>
          <target state="translated">텍스트 범위에서 완전히 표시되거나 부분적으로 표시되는 각 텍스트 줄의 경계 사각형 컬렉션을 검색합니다. </target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles">
          <source>An array of bounding rectangles for each full or partial line of text in a text range.</source>
          <target state="translated">텍스트 범위에서 완전히 표시되거나 부분적으로 표시되는 각 텍스트 줄의 경계 사각형 배열입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles">
          <source>An empty array for a degenerate range.</source>
          <target state="translated">디제너레이트 범위의 경우 빈 배열이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles">
          <source>An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</source>
          <target state="translated">텍스트 범위의 화면 좌표가 화면에서 완전히 벗어나거나, 스크롤되어 표시되지 않거나, 겹치는 창으로 가려진 경우 빈 배열이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren">
          <source>Retrieves a collection of all embedded objects that fall within the text range.</source>
          <target state="translated">텍스트 범위 안에 있는 모든 포함된 개체의 컬렉션을 검색합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren">
          <source>A collection of child objects that fall within the range.</source>
          <target state="translated">범위에 속하는 자식 개체의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren">
          <source>Children that overlap with the text range but are not entirely enclosed by it will also be included in the collection.</source>
          <target state="translated">텍스트 범위와 겹치지만 완전히 포함되지 않는 자식 개체도 컬렉션에 포함됩니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren">
          <source>Returns an empty collection if there are no child objects.</source>
          <target state="translated">자식 개체가 없으면 빈 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement">
          <source>Returns the innermost control that encloses the text range.</source>
          <target state="translated">텍스트 범위를 포함하는 가장 안쪽의 컨트롤을 반환합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement">
          <source>The enclosing control, typically the text provider that supplies the text range.</source>
          <target state="translated">포함하는 컨트롤이며, 일반적으로 텍스트 범위를 제공하는 텍스트 공급자입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement">
          <source>However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.</source>
          <target state="translated">그러나 텍스트 공급자에서 테이블 또는 하이퍼링크와 같은 자식 요소를 지원하는 경우 포함하는 요소가 텍스트 공급자의 하위 항목일 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
          <source>The maximum length of the string to return.</source>
          <target state="translated">반환할 문자열의 최대 길이입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
          <source>Use <bpt id="p1">&lt;c&gt;</bpt>-1<ept id="p1">&lt;/c&gt;</ept> if no limit is required.</source>
          <target state="translated">제한할 필요가 없으면 <bpt id="p1">&lt;c&gt;</bpt>-1<ept id="p1">&lt;/c&gt;</ept>을 사용합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
          <source>Retrieves the plain text of the range.</source>
          <target state="translated">범위의 일반 텍스트를 검색합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
          <source>The plain text of the text range, possibly truncated at the specified <ph id="ph1">&lt;paramref name="maxLength" /&gt;</ph>.</source>
          <target state="translated">텍스트 범위의 일반 문자열이며, 지정된 <ph id="ph1">&lt;paramref name="maxLength" /&gt;</ph>로 잘릴 수 있습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A&gt;</ph> respects both hidden and visible text.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A&gt;</ph> 숨겨진 / 표시 텍스트는 존중입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
          <source>If <ph id="ph1">`maxLength`</ph> is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.</source>
          <target state="translated">경우 <ph id="ph1">`maxLength`</ph> 길이 보다 크면 호출자의 텍스트 범위를 반환 하는 문자열 텍스트 범위의 일반 텍스트 됩니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A&gt;</ph> will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A&gt;</ph> 텍스트 방향;에서 끝점 순서에 의해 적용 되지 않습니다. 논리적 텍스트 흐름 순서로 텍스트 범위의 시작 및 끝 끝점 사이의 텍스트 항상 반환 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
          <source>If <ph id="ph1">&lt;paramref name="maxLength" /&gt;</ph> is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="maxLength" /&gt;</ph>가 -1보다 작은 경우</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The text unit boundary.</source>
          <target state="translated">텍스트 단위 경계입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The number of text units to move.</source>
          <target state="translated">이동할 텍스트 단위 수입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</source>
          <target state="translated">양수 값을 사용하면 텍스트 범위가 앞으로 이동하고, 음수 값을 사용하면 텍스트 범위가 뒤로 이동하며, 0은 효과가 없습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Moves the text range the specified number of text units.</source>
          <target state="translated">지정된 텍스트 단위 수만큼 텍스트 범위를 이동합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The number of units actually moved.</source>
          <target state="translated">실제로 이동한 단위 수입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>This can be less than the number requested if either of the new text range endpoints is greater than or less than the <ph id="ph1">&lt;see cref="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange" /&gt;</ph> endpoints.</source>
          <target state="translated">이 수는 새 텍스트 범위의 끝점 중 하나가 <ph id="ph1">&lt;see cref="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange" /&gt;</ph> 끝점보다 크거나 작으면 요청된 수보다 작을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> method to execute successfully.</source>
          <target state="translated">텍스트 범위의 내용을 이동해야 하는 경우 <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> 메서드가 성공적으로 실행되려면 백그라운드에서 일련의 단계를 거쳐야 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint, which makes the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint superfluous.</source>
          <target state="translated">텍스트 범위가 정규화됩니다. 다시 말해서, 텍스트 범위가 <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> 끝점에서 중복 제거 범위로 축소되어 <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> 끝점이 불필요해집니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt><ph id="ph2">https://www.microsoft.com/</ph><ept id="p1">](https://www.microsoft.com/)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">이 단계는 텍스트 범위에 걸쳐 있는 경우 모호성을 제거 하는 데 필요한 <ph id="ph1">`unit`</ph> 경계; 예를 들어 "{The U} RL <bpt id="p1">[</bpt> <ph id="ph2">https://www.microsoft.com/</ph> <ept id="p1">](https://www.microsoft.com/)</ept> 텍스트에 포함 된" 위치 "{" 및 "}"는 텍스트 범위 끝점입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The resulting range is moved backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> to the beginning of the requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">결과 범위가 <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> 내에서 뒤쪽으로 옮겨져 요청된 <ph id="ph2">`unit`</ph> 경계의 시작 부분으로 이동하게 됩니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The range is moved forward or backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> by the requested number of <ph id="ph2">`unit`</ph> boundaries.</source>
          <target state="translated">범위가 요청된 <ph id="ph2">`unit`</ph> 경계 수만큼 <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> 내에서 앞이나 뒤로 이동합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The range is then expanded from a degenerate range state by moving the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint by one requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">그런 다음, 요청된 <ph id="ph2">`unit`</ph> 경계 하나만큼 <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> 끝점을 이동하여 중복 제거 범위 상태이던 범위가 확장됩니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Move &amp; ExpandToEnclosingUnit으로 범위 조정<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Move &amp; ExpandToEnclosingUnit으로 범위 조정<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</source>
          <target state="translated">Move() 및 ExpandToEnclosingUnit()에 따라 텍스트 범위가 조정되는 방법의 예</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> tree; object boundaries are ignored.</source>
          <target state="translated">텍스트 컨테이너 및 포함된 개체(예: 하이퍼링크 또는 테이블 셀)의 텍스트 내용(또는 내부 텍스트)은 <ph id="ph1">[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]</ph> 트리의 컨트롤 뷰와 콘텐츠 뷰에서 지속적인 단일 텍스트 스트림으로 노출됩니다. 개체 경계는 무시됩니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><bpt id="p1">![</bpt>Text ranges spanned by embedded objects.<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>Text ranges spanned by embedded objects.<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>포함 된 개체에 포함 되는 텍스트 범위입니다. <ept id="p1">]</ept> <bpt id="p2">(~/add/media/uia-textpattern-embeddedobjecttextranges.png "</bpt>포함 된 개체에 포함 되는 텍스트 범위입니다.<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Example of a text stream with embedded objects and their range spans</source>
          <target state="translated">포함된 개체가 있는 텍스트 스트림과 해당 범위의 예</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> respects both hidden and visible text.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> 숨겨진 / 표시 텍스트는 존중입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> defers to the next largest <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supported if the given <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> is not supported by the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> 단위는 다음 가장 큰 <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> 지원 되는 경우에는 주어진 <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> 컨트롤에서 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">최소 단위에서 가장 큰, 순서, 아래에 나열 됩니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The text is not altered in any way, the text range just spans a different part of the text.</source>
          <target state="translated">텍스트는 어떤 방식으로든에서 수정 되지, 텍스트 범위는 텍스트의 다른 부분에만 걸쳐 합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>The endpoint to move.</source>
          <target state="translated">이동할 끝점입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Another range from the same text provider.</source>
          <target state="translated">같은 텍스트 공급자의 다른 범위입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>An endpoint on the other range.</source>
          <target state="translated">다른 범위의 끝점입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>Moves one endpoint of a text range to the specified endpoint of a second text range.</source>
          <target state="translated">텍스트 범위의 한 끝점을 두 번째 텍스트 범위의 지정된 끝점으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
          <source>If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> is always less than or equal to <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph>).</source>
          <target state="translated">이동 하는 끝점이 동일한 텍스트 범위에 다른 끝점을 교차 경우 다른 끝점도 이동 하는 중복 제거 범위에서 확장 하 고 끝점의 순서가 올바르게 (즉, <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> 는 항상 보다작거나같은<ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The endpoint to move.</source>
          <target state="translated">이동할 끝점입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The textual unit for moving.</source>
          <target state="translated">이동할 텍스트 단위입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The number of units to move.</source>
          <target state="translated">이동할 단위 수입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>A positive value moves the endpoint forward.</source>
          <target state="translated">양수 값을 사용하면 끝점이 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>A negative value moves backward.</source>
          <target state="translated">음수 값을 사용하면 뒤로 이동합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>A value of 0 has no effect.</source>
          <target state="translated">0은 효과가 없습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Moves one endpoint of the text range the specified number of text units within the document range.</source>
          <target state="translated">텍스트 범위의 한 끝점을 문서 범위 내에서 지정된 텍스트 단위 수만큼 이동합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</source>
          <target state="translated">실제로 이동한 단위 수이며, 끝점을 이동하면서 문서의 시작이나 끝과 만나게 되면 요청된 수보다 작을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> method to execute successfully.</source>
          <target state="translated">텍스트 범위의 내용을 이동해야 하는 경우 <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A&gt;</ph> 메서드가 성공적으로 실행되려면 백그라운드에서 일련의 단계를 거쳐야 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The text range is normalized; that is, the text range is collapsed to a degenerate range at the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint, which makes the <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint superfluous.</source>
          <target state="translated">텍스트 범위가 정규화됩니다. 다시 말해서, 텍스트 범위가 <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> 끝점에서 중복 제거 범위로 축소되어 <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> 끝점이 불필요해집니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>This step is necessary to remove ambiguity in situations where a text range spans <ph id="ph1">`unit`</ph> boundaries; for example, "{The U}RL <bpt id="p1">[</bpt><ph id="ph2">https://www.microsoft.com/</ph><ept id="p1">](https://www.microsoft.com/)</ept> is embedded in text" where "{" and "}" are the text range endpoints.</source>
          <target state="translated">이 단계는 텍스트 범위에 걸쳐 있는 경우 모호성을 제거 하는 데 필요한 <ph id="ph1">`unit`</ph> 경계; 예를 들어 "{The U} RL <bpt id="p1">[</bpt> <ph id="ph2">https://www.microsoft.com/</ph> <ept id="p1">](https://www.microsoft.com/)</ept> 텍스트에 포함 된" 위치 "{" 및 "}"는 텍스트 범위 끝점입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The resulting range is moved backward in the <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> to the beginning of the requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">결과 범위가 <ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A&gt;</ph> 내에서 뒤쪽으로 옮겨져 요청된 <ph id="ph2">`unit`</ph> 경계의 시작 부분으로 이동하게 됩니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The range is then expanded from a degenerate range state by moving the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> endpoint by one requested <ph id="ph2">`unit`</ph> boundary.</source>
          <target state="translated">그런 다음, 요청된 <ph id="ph2">`unit`</ph> 경계 하나만큼 <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End&gt;</ph> 끝점을 이동하여 중복 제거 범위 상태이던 범위가 확장됩니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><bpt id="p1">![</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Range adjustments by Move &amp; ExpandToEnclosingUnit<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>Move &amp; ExpandToEnclosingUnit으로 범위 조정<ept id="p1">]</ept><bpt id="p2">(~/add/media/uia-textpattern-moveandexpand-examples.png "</bpt>Move &amp; ExpandToEnclosingUnit으로 범위 조정<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</source>
          <target state="translated">Move() 및 ExpandToEnclosingUnit()에 따라 텍스트 범위가 조정되는 방법의 예</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit%2A&gt;</ph> defers to the next largest <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> supported if the given <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> is not supported by the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit%2A&gt;</ph> 단위는 다음 가장 큰 <ph id="ph2">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> 지원 되는 경우에는 주어진 <ph id="ph3">&lt;xref:System.Windows.Automation.Text.TextUnit&gt;</ph> 컨트롤에서 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
          <source>The order, from smallest unit to largest, is listed below.</source>
          <target state="translated">최소 단위에서 가장 큰, 순서, 아래에 나열 됩니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection">
          <source>Removes a highlighted section of text, corresponding to the caller's <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> and <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoints, from the collection of highlighted text in a text container that supports multiple, disjoint selections.</source>
          <target state="translated">서로 분리된 여러 선택 영역을 지원하는 텍스트 컨테이너의 강조 표시된 텍스트가 들어 있는 기존 컬렉션에서 호출자의 <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> 끝점에 해당하는 강조 표시된 텍스트 섹션을 제거합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection">
          <source>The text insertion point will move to the area of the removed highlight.</source>
          <target state="translated">텍스트 삽입 지점 제거 강조 표시 영역으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection">
          <source>Providing a degenerate text range will move the insertion point.</source>
          <target state="translated">디 제너 레이트 텍스트 범위를 제공 하는 삽입 지점을 이동 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection">
          <source>If text provider does not support multiple, disjoint selections (for example, <ph id="ph1">&lt;see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /&gt;</ph> must have a value of <ph id="ph2">&lt;see langword="Multiple" /&gt;</ph>).</source>
          <target state="translated">텍스트 공급자에서 서로 분리된 여러 선택 영역을 지원하지 않는 경우. 예를 들어 <ph id="ph1">&lt;see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /&gt;</ph>의 값이 <ph id="ph2">&lt;see langword="Multiple" /&gt;</ph>이어야 합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the text control should be scrolled so the text range is flush with the top of the viewport; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it should be flush with the bottom of the viewport.</source>
          <target state="translated">텍스트 범위를 스크롤하여 뷰포트 맨 위에 맞추려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 뷰포트 맨 아래에 맞추려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)">
          <source>Causes the text control to scroll vertically until the text range is visible in the viewport.</source>
          <target state="translated">뷰포트에 텍스트 범위가 보일 때까지 텍스트 컨트롤을 세로로 스크롤합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView%2A&gt;</ph> respects both hidden and visible text.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView%2A&gt;</ph> 숨겨진 / 표시 텍스트는 존중입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)">
          <source>If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.</source>
          <target state="translated">텍스트 범위를 숨길 경우에 텍스트 컨트롤은 숨겨진된 텍스트 뷰포트에 앵커를 포함 하는 경우에 스크롤됩니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Select">
          <source>Highlights text in the text control corresponding to the text range <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> and <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> endpoints.</source>
          <target state="translated">텍스트 컨트롤에서 텍스트 범위의 <ph id="ph1">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /&gt;</ph> 끝점에 해당하는 텍스트를 강조 표시합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Select">
          <source>If a degenerate text range is provided, the text insertion point will move to the <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> endpoint of the text range.</source>
          <target state="translated">디 제너 레이트 텍스트 범위를 제공 하는 경우에 텍스트 삽입 지점에서 이동 하 여 <ph id="ph1">&lt;xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start&gt;</ph> 텍스트 범위의 끝점입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.ITextRangeProvider.Select">
          <source>Occurs when text selection is not supported by the text control.</source>
          <target state="translated">텍스트 선택을 텍스트 컨트롤에서 지원하지 않을 때 발생합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>