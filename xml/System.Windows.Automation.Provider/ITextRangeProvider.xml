<Type Name="ITextRangeProvider" FullName="System.Windows.Automation.Provider.ITextRangeProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5200d9e8e480597cbec54c5ce6eaa4ae458f388c" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37526997" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ITextRangeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITextRangeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.ITextRangeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITextRangeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITextRangeProvider" />
  <TypeSignature Language="F#" Value="type ITextRangeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("5347ad7b-c355-46f8-aff5-909033582f63")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d4e99-101">
        <see cref="T:System.Windows.Automation.Provider.ITextProvider" />를 구현하는 텍스트 컨테이너에 있는 연속 텍스트의 범위에 대한 UI 자동화 클라이언트 액세스를 지원하는 메서드 및 속성을 노출합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d4e99-101">Exposes methods and properties to support UI Automation client access to a span of continuous text in a text container that implements <see cref="T:System.Windows.Automation.Provider.ITextProvider" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4e99-102">지원 해야 하는 UI 자동화 공급자에서 구현 된 <xref:System.Windows.Automation.TextPattern> 컨트롤 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.TextPattern> control pattern.</span></span>  
  
 <span data-ttu-id="d4e99-103">A <xref:System.Windows.Automation.Text.TextPatternRange> 삽입 지점 하위 집합 또는에서 텍스트를 모두 나타낼 수는 <xref:System.Windows.Automation.TextPattern> 컨테이너입니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-103">A <xref:System.Windows.Automation.Text.TextPatternRange> can represent an insertion point, a subset, or all of the text in a <xref:System.Windows.Automation.TextPattern> container.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Text.TextPatternRange" />
  </Docs>
  <Members>
    <Member MemberName="AddToSelection">
      <MemberSignature Language="C#" Value="public void AddToSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToSelection();" />
      <MemberSignature Language="F#" Value="abstract member AddToSelection : unit -&gt; unit" Usage="iTextRangeProvider.AddToSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d4e99-104">서로 분리된 여러 선택 영역을 지원하는 텍스트 컨테이너의 강조 표시된 텍스트 컬렉션에 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-104">Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4e99-105">새 선택 영역에 텍스트 삽입 지점을 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-105">The text insertion point moves to the area of the new selection.</span></span>  
  
 <span data-ttu-id="d4e99-106">삽입 지점을 이동 중복 제거 텍스트 범위를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-106">Providing a degenerate text range moves the insertion point.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d4e99-107">텍스트 공급자에서 서로 분리된 여러 선택 영역을 지원하지 않는 경우. 즉, <see cref="P:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection" />의 값이 <see langword="Multiple" />이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-107">If text provider does not support multiple, disjoint selections (that is, <see cref="P:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection" /> must have a value of <see langword="Multiple" />).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.ITextRangeProvider Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As ITextRangeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::ITextRangeProvider ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Windows.Automation.Provider.ITextRangeProvider" Usage="iTextRangeProvider.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d4e99-108">원래 <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />와 동일하고 원본의 모든 속성을 상속하는 새 <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-108">Returns a new <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /> identical to the original <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /> and inheriting all properties of the original.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4e99-109">새 텍스트 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-109">The new text range.</span>
          </span>
          <span data-ttu-id="d4e99-110">null 참조(Visual Basic의 경우 <see langword="Nothing" />)는 반환되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-110">A null reference (<see langword="Nothing" /> in Visual Basic) is never returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4e99-111">새 범위를 원본에서 독립적으로 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-111">The new range can be manipulated independently from the original.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public bool Compare (System.Windows.Automation.Provider.ITextRangeProvider range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Compare(class System.Windows.Automation.Provider.ITextRangeProvider range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (range As ITextRangeProvider) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Compare(System::Windows::Automation::Provider::ITextRangeProvider ^ range);" />
      <MemberSignature Language="F#" Value="abstract member Compare : System.Windows.Automation.Provider.ITextRangeProvider -&gt; bool" Usage="iTextRangeProvider.Compare range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Windows.Automation.Provider.ITextRangeProvider" />
      </Parameters>
      <Docs>
        <param name="range">
          <span data-ttu-id="d4e99-112">비교할 텍스트 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-112">A text range to compare</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4e99-113">텍스트의 범위(<see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> 끝점에서 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> 끝점까지)가 다른 텍스트 범위와 동일한지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-113">Returns a value that indicates whether the span (the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> endpoint to the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint) of a text range is the same as another text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4e99-114">두 텍스트 범위가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-114">
              <see langword="true" /> if the span of both text ranges is identical; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d4e99-115">비교하는 범위를 같은 텍스트 공급자에서 가져오지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-115">If the range being compared does not come from the same text provider.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CompareEndpoints">
      <MemberSignature Language="C#" Value="public int CompareEndpoints (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Provider.ITextRangeProvider targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareEndpoints(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Provider.ITextRangeProvider targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareEndpoints (endpoint As TextPatternRangeEndpoint, targetRange As ITextRangeProvider, targetEndpoint As TextPatternRangeEndpoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareEndpoints(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Provider::ITextRangeProvider ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="F#" Value="abstract member CompareEndpoints : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Provider.ITextRangeProvider * System.Windows.Automation.Text.TextPatternRangeEndpoint -&gt; int" Usage="iTextRangeProvider.CompareEndpoints (endpoint, targetRange, targetEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Provider.ITextRangeProvider" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">
          <span data-ttu-id="d4e99-116">호출자의 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> 또는 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> 끝점입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-116">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the caller.</span>
          </span>
        </param>
        <param name="targetRange">
          <span data-ttu-id="d4e99-117">비교할 대상 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-117">The target range for comparison.</span>
          </span>
        </param>
        <param name="targetEndpoint">
          <span data-ttu-id="d4e99-118">대상의 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> 또는 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> 끝점입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-118">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4e99-119">두 텍스트 범위의 끝점이 동일한지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-119">Returns a value that specifies whether two text ranges have identical endpoints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4e99-120">텍스트에서 호출자의 끝점이 대상 끝점보다 먼저 나타나면 음수 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-120">Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint.</span>
          </span>
          <span data-ttu-id="d4e99-121">호출자의 끝점이 대상 끝점과 같은 위치에 있으면 0을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-121">Returns zero if the caller's endpoint is at the same location as the target endpoint.</span>
          </span>
          <span data-ttu-id="d4e99-122">텍스트에서 호출자의 끝점이 대상 끝점보다 나중에 나타나면 양수 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-122">Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d4e99-123">
            <paramref name="targetRange" />를 다른 텍스트 공급자에서 가져온 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-123">If <paramref name="targetRange" /> is from a different text provider.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExpandToEnclosingUnit">
      <MemberSignature Language="C#" Value="public void ExpandToEnclosingUnit (System.Windows.Automation.Text.TextUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExpandToEnclosingUnit(valuetype System.Windows.Automation.Text.TextUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExpandToEnclosingUnit (unit As TextUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExpandToEnclosingUnit(System::Windows::Automation::Text::TextUnit unit);" />
      <MemberSignature Language="F#" Value="abstract member ExpandToEnclosingUnit : System.Windows.Automation.Text.TextUnit -&gt; unit" Usage="iTextRangeProvider.ExpandToEnclosingUnit unit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
      </Parameters>
      <Docs>
        <param name="unit">
          <span data-ttu-id="d4e99-124">텍스트 단위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-124">The textual unit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4e99-125">텍스트 범위를 지정된 텍스트 단위로 확장합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-125">Expands the text range to the specified text unit.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4e99-126">범위 지정 단위 정확한 수량을 이미 있으면 그대로 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-126">If the range is already an exact quantity of the specified units then it remains unchanged.</span></span>  
  
 <span data-ttu-id="d4e99-127">일련의 단계를 위해에서 백그라운드에서 관련 된는 <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> 메서드를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-127">There is a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="d4e99-128">텍스트 범위가 정규화됩니다. 다시 말해서, 텍스트 범위가 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> 끝점에서 중복 제거 범위로 축소되어 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 끝점이 불필요해집니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-128">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="d4e99-129">이 단계는 텍스트 범위에 걸쳐 있는 경우 모호성을 제거 하는 데 필요한 `unit` 경계; 예를 들어 "{The U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) 텍스트에 포함 된" 위치 "{0}" 및 "}"는 텍스트 범위 끝점입니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-129">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="d4e99-130">결과 범위가 <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> 내에서 뒤쪽으로 옮겨져 요청된 `unit` 경계의 시작 부분으로 이동하게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-130">The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="d4e99-131">범위가 요청된 `unit` 경계 수만큼 <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> 내에서 앞이나 뒤로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-131">The range is moved forward or backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> by the requested number of `unit` boundaries.</span></span>  
  
4.  <span data-ttu-id="d4e99-132">그런 다음, 요청된 `unit` 경계 하나만큼 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 끝점을 이동하여 중복 제거 범위 상태이던 범위가 확장됩니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-132">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="d4e99-133">![Move & ExpandToEnclosingUnit으로 범위 조정](~/add/media/uia-textpattern-moveandexpand-examples.png "Move & ExpandToEnclosingUnit으로 범위 조정")</span><span class="sxs-lookup"><span data-stu-id="d4e99-133">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="d4e99-134">Move() 및 ExpandToEnclosingUnit()에 따라 텍스트 범위가 조정되는 방법의 예</span><span class="sxs-lookup"><span data-stu-id="d4e99-134">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d4e99-135">이러한 단계는 일반적으로 화면 판독기는 전체 단어, 문장 또는 전체 단락 삽입 지점 또는 가상 커서 위치에서 읽을 수 있기 때문에 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-135">These steps are necessary since it is common for a screen reader to read out a full word, sentence, or entire paragraph at the insertion point or any virtual cursor position.</span></span>  
  
 <span data-ttu-id="d4e99-136"><xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A> 숨겨진 / 표시 텍스트를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-136"><xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A> respects both hidden and visible text.</span></span>  
  
 <span data-ttu-id="d4e99-137"><xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A> 단위는 다음 가장 큰 <xref:System.Windows.Automation.Text.TextUnit> 지원 되는 경우에는 지정 된 <xref:System.Windows.Automation.Text.TextUnit> 컨트롤에서 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-137"><xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="d4e99-138">가장 크고 가장 작은 단위는 순서는 아래 나열 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-138">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAttribute">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider FindAttribute (int attribute, object value, bool backward);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.ITextRangeProvider FindAttribute(int32 attribute, object value, bool backward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAttribute (attribute As Integer, value As Object, backward As Boolean) As ITextRangeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::ITextRangeProvider ^ FindAttribute(int attribute, System::Object ^ value, bool backward);" />
      <MemberSignature Language="F#" Value="abstract member FindAttribute : int * obj * bool -&gt; System.Windows.Automation.Provider.ITextRangeProvider" Usage="iTextRangeProvider.FindAttribute (attribute, value, backward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="backward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="d4e99-139">검색할 특성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-139">The attribute to search for.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="d4e99-140">검색할 특성 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-140">The attribute value to search for.</span>
          </span>
          <span data-ttu-id="d4e99-141">이 값은 특성에 지정된 형식과 일치해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-141">This value must match the type specified for the attribute.</span>
          </span>
        </param>
        <param name="backward">
          <span data-ttu-id="d4e99-142">마지막으로 나타나는 텍스트 범위를 반환해야 하면 <see langword="true" />이고, 처음으로 나타나는 텍스트 범위를 반환해야 하면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-142">
              <see langword="true" /> if the last occurring text range should be returned instead of the first; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4e99-143">지정된 특성 값을 갖는 텍스트 범위 하위 집합을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-143">Returns a text range subset that has the specified attribute value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4e99-144">특성 및 특성 값이 일치하는 텍스트 범위이거나, 이러한 범위가 없으면 null(Visual Basic의 경우 <see langword="Nothing" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-144">A text range having a matching attribute and attribute value; otherwise null (<see langword="Nothing" /> in Visual Basic).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4e99-145">숨겨진 / 표시 텍스트에 차이가 없습니다 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-145">There is no differentiation between hidden and visible text.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindText">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider FindText (string text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.ITextRangeProvider FindText(string text, bool backward, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindText (text As String, backward As Boolean, ignoreCase As Boolean) As ITextRangeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::ITextRangeProvider ^ FindText(System::String ^ text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member FindText : string * bool * bool -&gt; System.Windows.Automation.Provider.ITextRangeProvider" Usage="iTextRangeProvider.FindText (text, backward, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="backward" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="d4e99-146">검색할 텍스트 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-146">The text string to search for.</span>
          </span>
        </param>
        <param name="backward">
          <span data-ttu-id="d4e99-147">마지막으로 나타나는 텍스트 범위를 반환해야 하면 <see langword="true" />이고, 처음으로 나타나는 텍스트 범위를 반환해야 하면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-147">
              <see langword="true" /> if the last occurring text range should be returned instead of the first; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="d4e99-148">대/소문자를 구분하지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-148">
              <see langword="true" /> if case should be ignored; otherwise <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4e99-149">지정된 텍스트를 포함하는 텍스트 범위 하위 집합을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-149">Returns a text range subset that contains the specified text.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4e99-150">지정된 텍스트와 일치하는 텍스트 범위이거나, 이러한 범위가 없으면 null(Visual Basic의 경우 <see langword="Nothing" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-150">A text range matching the specified text; otherwise null (<see langword="Nothing" /> in Visual Basic).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4e99-151">숨겨진 / 표시 텍스트에 차이가 없습니다 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-151">There is no differentiation between hidden and visible text.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeValue">
      <MemberSignature Language="C#" Value="public object GetAttributeValue (int attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAttributeValue(int32 attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttributeValue (attribute As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetAttributeValue(int attribute);" />
      <MemberSignature Language="F#" Value="abstract member GetAttributeValue : int -&gt; obj" Usage="iTextRangeProvider.GetAttributeValue attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="attribute">
          <span data-ttu-id="d4e99-152">텍스트 특성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-152">The text attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4e99-153">텍스트 범위에서 지정된 특성 값을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-153">Retrieves the value of the specified attribute across the text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4e99-154">지정된 특성의 값을 나타내는 개체를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-154">Retrieves an object representing the value of the specified attribute.</span>
          </span>
          <span data-ttu-id="d4e99-155">예를 들어 <c>GetAttributeValue(TextPattern.FontNameAttribute)</c>는 텍스트 범위에 글꼴이 하나만 사용되는 경우 해당 글꼴 이름을 나타내는 문자열을 반환하는 반면 <c>GetAttributeValue(TextPattern.IsItalicAttribute)</c>는 <see cref="T:System.Boolean" /> 형식의 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-155">For example, <c>GetAttributeValue(TextPattern.FontNameAttribute)</c> would return a string that represents the font name of the text range while <c>GetAttributeValue(TextPattern.IsItalicAttribute)</c> would return a value of type <see cref="T:System.Boolean" />.</span>
          </span>
          <span data-ttu-id="d4e99-156">지정된 특성의 값이 텍스트 범위에서 일정하지 않게 변화하면 <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-156">Returns <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> if the value of the specified attribute varies over the text range.</span>
          </span>
          <span data-ttu-id="d4e99-157">지정된 특성을 공급자 또는 컨트롤에서 지원하지 않으면 <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-157">Returns <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> if the specified attribute is not supported by the provider or the control.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4e99-158">숨겨진 / 표시 텍스트에 차이가 없습니다 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-158">There is no differentiation between hidden and visible text.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d4e99-159">지정된 특성이 유효하지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-159">If the specified attribute is not valid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetBoundingRectangles">
      <MemberSignature Language="C#" Value="public double[] GetBoundingRectangles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64[] GetBoundingRectangles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoundingRectangles () As Double()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;double&gt; ^ GetBoundingRectangles();" />
      <MemberSignature Language="F#" Value="abstract member GetBoundingRectangles : unit -&gt; double[]" Usage="iTextRangeProvider.GetBoundingRectangles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d4e99-160">텍스트 범위에서 완전히 표시되거나 부분적으로 표시되는 각 텍스트 줄의 경계 사각형 컬렉션을 검색합니다. </span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-160">Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4e99-161">텍스트 범위에서 완전히 표시되거나 부분적으로 표시되는 각 텍스트 줄의 경계 사각형 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-161">An array of bounding rectangles for each full or partial line of text in a text range.</span>
          </span>
          <span data-ttu-id="d4e99-162">디제너레이트 범위의 경우 빈 배열이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-162">An empty array for a degenerate range.</span>
          </span>
          <span data-ttu-id="d4e99-163">텍스트 범위의 화면 좌표가 화면에서 완전히 벗어나거나, 스크롤되어 표시되지 않거나, 겹치는 창으로 가려진 경우 빈 배열이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-163">An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderSimple[] GetChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderSimple[] GetChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildren () As IRawElementProviderSimple()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::Provider::IRawElementProviderSimple ^&gt; ^ GetChildren();" />
      <MemberSignature Language="F#" Value="abstract member GetChildren : unit -&gt; System.Windows.Automation.Provider.IRawElementProviderSimple[]" Usage="iTextRangeProvider.GetChildren " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d4e99-164">텍스트 범위 안에 있는 모든 포함된 개체의 컬렉션을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-164">Retrieves a collection of all embedded objects that fall within the text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4e99-165">범위에 속하는 자식 개체의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-165">A collection of child objects that fall within the range.</span>
          </span>
          <span data-ttu-id="d4e99-166">텍스트 범위와 겹치지만 완전히 포함되지 않는 자식 개체도 컬렉션에 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-166">Children that overlap with the text range but are not entirely enclosed by it will also be included in the collection.</span>
          </span>
          <span data-ttu-id="d4e99-167">자식 개체가 없으면 빈 컬렉션을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-167">Returns an empty collection if there are no child objects.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnclosingElement">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderSimple GetEnclosingElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderSimple GetEnclosingElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnclosingElement () As IRawElementProviderSimple" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::IRawElementProviderSimple ^ GetEnclosingElement();" />
      <MemberSignature Language="F#" Value="abstract member GetEnclosingElement : unit -&gt; System.Windows.Automation.Provider.IRawElementProviderSimple" Usage="iTextRangeProvider.GetEnclosingElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d4e99-168">텍스트 범위를 포함하는 가장 안쪽의 컨트롤을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-168">Returns the innermost control that encloses the text range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4e99-169">포함하는 컨트롤이며, 일반적으로 텍스트 범위를 제공하는 텍스트 공급자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-169">The enclosing control, typically the text provider that supplies the text range.</span>
          </span>
          <span data-ttu-id="d4e99-170">그러나 텍스트 공급자에서 테이블 또는 하이퍼링크와 같은 자식 요소를 지원하는 경우 포함하는 요소가 텍스트 공급자의 하위 항목일 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-170">However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetText">
      <MemberSignature Language="C#" Value="public string GetText (int maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetText(int32 maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetText (maxLength As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetText(int maxLength);" />
      <MemberSignature Language="F#" Value="abstract member GetText : int -&gt; string" Usage="iTextRangeProvider.GetText maxLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxLength">
          <span data-ttu-id="d4e99-171">반환할 문자열의 최대 길이입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-171">The maximum length of the string to return.</span>
          </span>
          <span data-ttu-id="d4e99-172">제한할 필요가 없으면 <c>-1</c>을 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-172">Use <c>-1</c> if no limit is required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4e99-173">범위의 일반 텍스트를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-173">Retrieves the plain text of the range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4e99-174">텍스트 범위의 일반 문자열이며, 지정된 <paramref name="maxLength" />로 잘릴 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-174">The plain text of the text range, possibly truncated at the specified <paramref name="maxLength" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4e99-175"><xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A> 숨겨진 / 표시 텍스트를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-175"><xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A> respects both hidden and visible text.</span></span>  
  
 <span data-ttu-id="d4e99-176">경우 `maxLength` 길이 보다 크면 호출자의 텍스트 범위를 반환 하는 문자열 텍스트 범위의 일반 텍스트 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-176">If `maxLength` is greater than the length of the text span of the caller, the string returned will be the plain text of the text range.</span></span>  
  
 <span data-ttu-id="d4e99-177"><xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A> 끝점 텍스트 흐름; 순서로 적용 되지 않습니다. 항상 논리 텍스트 흐름 순서로 텍스트 범위의 시작 및 종료 끝점 사이의 텍스트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-177"><xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A> will not be affected by the order of endpoints in the text flow; it will always return the text between the Start and End endpoints of the text range in the logical text flow order.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="d4e99-178">
            <paramref name="maxLength" />가 -1보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-178">If <paramref name="maxLength" /> is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public int Move (System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Move(valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Move (unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Move(System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberSignature Language="F#" Value="abstract member Move : System.Windows.Automation.Text.TextUnit * int -&gt; int" Usage="iTextRangeProvider.Move (unit, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unit">
          <span data-ttu-id="d4e99-179">텍스트 단위 경계입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-179">The text unit boundary.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="d4e99-180">이동할 텍스트 단위 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-180">The number of text units to move.</span>
          </span>
          <span data-ttu-id="d4e99-181">양수 값을 사용하면 텍스트 범위가 앞으로 이동하고, 음수 값을 사용하면 텍스트 범위가 뒤로 이동하며, 0은 효과가 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-181">A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4e99-182">지정된 텍스트 단위 수만큼 텍스트 범위를 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-182">Moves the text range the specified number of text units.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4e99-183">실제로 이동한 단위 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-183">The number of units actually moved.</span>
          </span>
          <span data-ttu-id="d4e99-184">이 수는 새 텍스트 범위의 끝점 중 하나가 <see cref="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange" /> 끝점보다 크거나 작으면 요청된 수보다 작을 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-184">This can be less than the number requested if either of the new text range endpoints is greater than or less than the <see cref="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange" /> endpoints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4e99-185">텍스트 범위의 내용을 이동해야 하는 경우 <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> 메서드가 성공적으로 실행되려면 백그라운드에서 일련의 단계를 거쳐야 합니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-185">When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="d4e99-186">텍스트 범위가 정규화됩니다. 다시 말해서, 텍스트 범위가 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> 끝점에서 중복 제거 범위로 축소되어 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 끝점이 불필요해집니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-186">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="d4e99-187">이 단계는 텍스트 범위에 걸쳐 있는 경우 모호성을 제거 하는 데 필요한 `unit` 경계; 예를 들어 "{The U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) 텍스트에 포함 된" 위치 "{0}" 및 "}"는 텍스트 범위 끝점입니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-187">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="d4e99-188">결과 범위가 <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> 내에서 뒤쪽으로 옮겨져 요청된 `unit` 경계의 시작 부분으로 이동하게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-188">The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="d4e99-189">범위가 요청된 `unit` 경계 수만큼 <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> 내에서 앞이나 뒤로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-189">The range is moved forward or backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> by the requested number of `unit` boundaries.</span></span>  
  
4.  <span data-ttu-id="d4e99-190">그런 다음, 요청된 `unit` 경계 하나만큼 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 끝점을 이동하여 중복 제거 범위 상태이던 범위가 확장됩니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-190">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="d4e99-191">![Move & ExpandToEnclosingUnit으로 범위 조정](~/add/media/uia-textpattern-moveandexpand-examples.png "Move & ExpandToEnclosingUnit으로 범위 조정")</span><span class="sxs-lookup"><span data-stu-id="d4e99-191">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="d4e99-192">Move() 및 ExpandToEnclosingUnit()에 따라 텍스트 범위가 조정되는 방법의 예</span><span class="sxs-lookup"><span data-stu-id="d4e99-192">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
 <span data-ttu-id="d4e99-193">텍스트 컨테이너 및 포함된 개체(예: 하이퍼링크 또는 테이블 셀)의 텍스트 내용(또는 내부 텍스트)은 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 트리의 컨트롤 뷰와 콘텐츠 뷰에서 지속적인 단일 텍스트 스트림으로 노출됩니다. 개체 경계는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-193">The textual content (or inner text) of a text container and an embedded object, such as a hyperlink or table cell, is exposed as a single, continuous text stream in both the control view and the content view of the [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] tree; object boundaries are ignored.</span></span>  
  
 <span data-ttu-id="d4e99-194">![포함 된 개체에 의해 확장 되는 텍스트 범위입니다. ] (~/add/media/uia-textpattern-embeddedobjecttextranges.png "포함 된 개체에 의해 확장 되는 텍스트 범위입니다.")</span><span class="sxs-lookup"><span data-stu-id="d4e99-194">![Text ranges spanned by embedded objects.](~/add/media/uia-textpattern-embeddedobjecttextranges.png "Text ranges spanned by embedded objects.")</span></span>  
<span data-ttu-id="d4e99-195">포함된 개체가 있는 텍스트 스트림과 해당 범위의 예</span><span class="sxs-lookup"><span data-stu-id="d4e99-195">Example of a text stream with embedded objects and their range spans</span></span>  
  
 <span data-ttu-id="d4e99-196"><xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> 숨겨진 / 표시 텍스트를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-196"><xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> respects both hidden and visible text.</span></span>  
  
 <span data-ttu-id="d4e99-197"><xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> 단위는 다음 가장 큰 <xref:System.Windows.Automation.Text.TextUnit> 지원 되는 경우에는 지정 된 <xref:System.Windows.Automation.Text.TextUnit> 컨트롤에서 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-197"><xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="d4e99-198">가장 크고 가장 작은 단위는 순서는 아래 나열 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-198">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
 <span data-ttu-id="d4e99-199">텍스트를 전혀 변경 되지 않으면, 텍스트 범위가 텍스트의 다른 부분에만 걸쳐 합니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-199">The text is not altered in any way, the text range just spans a different part of the text.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByRange">
      <MemberSignature Language="C#" Value="public void MoveEndpointByRange (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Provider.ITextRangeProvider targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveEndpointByRange(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Provider.ITextRangeProvider targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveEndpointByRange (endpoint As TextPatternRangeEndpoint, targetRange As ITextRangeProvider, targetEndpoint As TextPatternRangeEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveEndpointByRange(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Provider::ITextRangeProvider ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="F#" Value="abstract member MoveEndpointByRange : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Provider.ITextRangeProvider * System.Windows.Automation.Text.TextPatternRangeEndpoint -&gt; unit" Usage="iTextRangeProvider.MoveEndpointByRange (endpoint, targetRange, targetEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Provider.ITextRangeProvider" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">
          <span data-ttu-id="d4e99-200">이동할 끝점입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-200">The endpoint to move.</span>
          </span>
        </param>
        <param name="targetRange">
          <span data-ttu-id="d4e99-201">같은 텍스트 공급자의 다른 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-201">Another range from the same text provider.</span>
          </span>
        </param>
        <param name="targetEndpoint">
          <span data-ttu-id="d4e99-202">다른 범위의 끝점입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-202">An endpoint on the other range.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4e99-203">텍스트 범위의 한 끝점을 두 번째 텍스트 범위의 지정된 끝점으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-203">Moves one endpoint of a text range to the specified endpoint of a second text range.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4e99-204">이동 하는 끝점이 다른 끝점을 동일한 텍스트 범위를 벗어날 경우 다른 끝점도 이동 하는 중복 제거 범위 않으며 끝점의 순서가 올바르게 (즉, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> 작거나는항상<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).</span><span class="sxs-lookup"><span data-stu-id="d4e99-204">If the endpoint being moved crosses the other endpoint of the same text range then that other endpoint is moved also, resulting in a degenerate range and ensuring the correct ordering of the endpoints (that is, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> is always less than or equal to <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByUnit">
      <MemberSignature Language="C#" Value="public int MoveEndpointByUnit (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 MoveEndpointByUnit(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveEndpointByUnit (endpoint As TextPatternRangeEndpoint, unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int MoveEndpointByUnit(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberSignature Language="F#" Value="abstract member MoveEndpointByUnit : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextUnit * int -&gt; int" Usage="iTextRangeProvider.MoveEndpointByUnit (endpoint, unit, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="endpoint">
          <span data-ttu-id="d4e99-205">이동할 끝점입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-205">The endpoint to move.</span>
          </span>
        </param>
        <param name="unit">
          <span data-ttu-id="d4e99-206">이동할 텍스트 단위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-206">The textual unit for moving.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="d4e99-207">이동할 단위 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-207">The number of units to move.</span>
          </span>
          <span data-ttu-id="d4e99-208">양수 값을 사용하면 끝점이 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-208">A positive value moves the endpoint forward.</span>
          </span>
          <span data-ttu-id="d4e99-209">음수 값을 사용하면 뒤로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-209">A negative value moves backward.</span>
          </span>
          <span data-ttu-id="d4e99-210">0은 효과가 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-210">A value of 0 has no effect.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4e99-211">텍스트 범위의 한 끝점을 문서 범위 내에서 지정된 텍스트 단위 수만큼 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-211">Moves one endpoint of the text range the specified number of text units within the document range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d4e99-212">실제로 이동한 단위 수이며, 끝점을 이동하면서 문서의 시작이나 끝과 만나게 되면 요청된 수보다 작을 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-212">The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4e99-213">텍스트 범위의 내용을 이동해야 하는 경우 <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> 메서드가 성공적으로 실행되려면 백그라운드에서 일련의 단계를 거쳐야 합니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-213">When it is necessary to traverse the content of a text range, a series of steps are involved behind the scenes in order for the <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> method to execute successfully.</span></span>  
  
1.  <span data-ttu-id="d4e99-214">텍스트 범위가 정규화됩니다. 다시 말해서, 텍스트 범위가 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> 끝점에서 중복 제거 범위로 축소되어 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 끝점이 불필요해집니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-214">The text range is normalized; that is, the text range is collapsed to a degenerate range at the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint, which makes the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint superfluous.</span></span> <span data-ttu-id="d4e99-215">이 단계는 텍스트 범위에 걸쳐 있는 경우 모호성을 제거 하는 데 필요한 `unit` 경계; 예를 들어 "{The U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) 텍스트에 포함 된" 위치 "{0}" 및 "}"는 텍스트 범위 끝점입니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-215">This step is necessary to remove ambiguity in situations where a text range spans `unit` boundaries; for example, "{The U}RL [https://www.microsoft.com/](https://www.microsoft.com/) is embedded in text" where "{" and "}" are the text range endpoints.</span></span>  
  
2.  <span data-ttu-id="d4e99-216">결과 범위가 <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> 내에서 뒤쪽으로 옮겨져 요청된 `unit` 경계의 시작 부분으로 이동하게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-216">The resulting range is moved backward in the <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> to the beginning of the requested `unit` boundary.</span></span>  
  
3.  <span data-ttu-id="d4e99-217">그런 다음, 요청된 `unit` 경계 하나만큼 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 끝점을 이동하여 중복 제거 범위 상태이던 범위가 확장됩니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-217">The range is then expanded from a degenerate range state by moving the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> endpoint by one requested `unit` boundary.</span></span>  
  
 <span data-ttu-id="d4e99-218">![Move & ExpandToEnclosingUnit으로 범위 조정](~/add/media/uia-textpattern-moveandexpand-examples.png "Move & ExpandToEnclosingUnit으로 범위 조정")</span><span class="sxs-lookup"><span data-stu-id="d4e99-218">![Range adjustments by Move & ExpandToEnclosingUnit](~/add/media/uia-textpattern-moveandexpand-examples.png "Range adjustments by Move & ExpandToEnclosingUnit")</span></span>  
<span data-ttu-id="d4e99-219">Move() 및 ExpandToEnclosingUnit()에 따라 텍스트 범위가 조정되는 방법의 예</span><span class="sxs-lookup"><span data-stu-id="d4e99-219">Examples of how a text range is adjusted for Move() and ExpandToEnclosingUnit()</span></span>  
  
 <span data-ttu-id="d4e99-220"><xref:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit%2A> 단위는 다음 가장 큰 <xref:System.Windows.Automation.Text.TextUnit> 지원 되는 경우에는 지정 된 <xref:System.Windows.Automation.Text.TextUnit> 컨트롤에서 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-220"><xref:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit%2A> defers to the next largest <xref:System.Windows.Automation.Text.TextUnit> supported if the given <xref:System.Windows.Automation.Text.TextUnit> is not supported by the control.</span></span>  
  
 <span data-ttu-id="d4e99-221">가장 크고 가장 작은 단위는 순서는 아래 나열 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-221">The order, from smallest unit to largest, is listed below.</span></span>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromSelection">
      <MemberSignature Language="C#" Value="public void RemoveFromSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveFromSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFromSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFromSelection();" />
      <MemberSignature Language="F#" Value="abstract member RemoveFromSelection : unit -&gt; unit" Usage="iTextRangeProvider.RemoveFromSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d4e99-222">서로 분리된 여러 선택 영역을 지원하는 텍스트 컨테이너의 강조 표시된 텍스트가 들어 있는 기존 컬렉션에서 호출자의 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> 및 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> 끝점에 해당하는 강조 표시된 텍스트 섹션을 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-222">Removes a highlighted section of text, corresponding to the caller's <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints, from the collection of highlighted text in a text container that supports multiple, disjoint selections.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4e99-223">제거 된 강조 표시의 영역에 텍스트 삽입 지점을 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-223">The text insertion point will move to the area of the removed highlight.</span></span>  
  
 <span data-ttu-id="d4e99-224">중복 제거 텍스트 범위를 제공 하면 삽입 지점을 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-224">Providing a degenerate text range will move the insertion point.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d4e99-225">텍스트 공급자에서 서로 분리된 여러 선택 영역을 지원하지 않는 경우. 예를 들어 <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" />의 값이 <see langword="Multiple" />이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-225">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of <see langword="Multiple" />).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (bool alignToTop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScrollIntoView(bool alignToTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollIntoView (alignToTop As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollIntoView(bool alignToTop);" />
      <MemberSignature Language="F#" Value="abstract member ScrollIntoView : bool -&gt; unit" Usage="iTextRangeProvider.ScrollIntoView alignToTop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignToTop" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="alignToTop">
          <span data-ttu-id="d4e99-226">텍스트 범위를 스크롤하여 뷰포트 맨 위에 맞추려면 <see langword="true" />이고, 뷰포트 맨 아래에 맞추려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-226">
              <see langword="true" /> if the text control should be scrolled so the text range is flush with the top of the viewport; <see langword="false" /> if it should be flush with the bottom of the viewport.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4e99-227">뷰포트에 텍스트 범위가 보일 때까지 텍스트 컨트롤을 세로로 스크롤합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-227">Causes the text control to scroll vertically until the text range is visible in the viewport.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4e99-228"><xref:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView%2A> 숨겨진 / 표시 텍스트를 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-228"><xref:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView%2A> respects both hidden and visible text.</span></span>  
  
 <span data-ttu-id="d4e99-229">텍스트 범위, 숨겨진 경우에 텍스트 컨트롤은 숨겨진된 텍스트 뷰포트에 앵커를 포함 하는 경우에 스크롤됩니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-229">If the text range is hidden, the text control will scroll only if the hidden text has an anchor in the viewport.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberSignature Language="F#" Value="abstract member Select : unit -&gt; unit" Usage="iTextRangeProvider.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d4e99-230">텍스트 컨트롤에서 텍스트 범위의 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> 및 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> 끝점에 해당하는 텍스트를 강조 표시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-230">Highlights text in the text control corresponding to the text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4e99-231">텍스트 삽입 지점을 이동은 중복 제거 텍스트 범위를 제공 하는 경우는 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> 텍스트 범위 끝점입니다.</span><span class="sxs-lookup"><span data-stu-id="d4e99-231">If a degenerate text range is provided, the text insertion point will move to the <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> endpoint of the text range.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d4e99-232">텍스트 선택을 텍스트 컨트롤에서 지원하지 않을 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4e99-232">Occurs when text selection is not supported by the text control.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>