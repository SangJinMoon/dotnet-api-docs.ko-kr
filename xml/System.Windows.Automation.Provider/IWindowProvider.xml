<Type Name="IWindowProvider" FullName="System.Windows.Automation.Provider.IWindowProvider">
  <TypeSignature Language="C#" Value="public interface IWindowProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWindowProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IWindowProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWindowProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWindowProvider" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("987df77b-db06-4d77-8f8a-86a9c3bb90b9")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="28abd-101">메서드 및 속성을 노출하여 기존 GUI(그래픽 사용자 인터페이스) 내에서 기본적인 창 기반 기능을 제공하는 컨트롤에 대한 UI Automation 클라이언트 액세스를 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-101">Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28abd-102">지원 해야 하는 UI 자동화 공급자에서 구현 되는 <xref:System.Windows.Automation.WindowPattern> 컨트롤 패턴.</span><span class="sxs-lookup"><span data-stu-id="28abd-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.WindowPattern> control pattern.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.WindowPattern" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="28abd-103">창을 닫으려고 시도합니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-103">Attempts to close the window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28abd-104"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> 해야는 차단 하지 않고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-104"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> must return immediately without blocking.</span></span>  
  
 <span data-ttu-id="28abd-105"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A>는 <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-105"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event.</span></span> <span data-ttu-id="28abd-106">가능 하면 컨트롤이 연결된 된 작업을 완료 된 후의 이벤트를 발생 시켜야 합니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-106">If possible, the event should be raised after the control has completed its associated action.</span></span>  
  
 <span data-ttu-id="28abd-107">분할 창 컨트롤에서 호출 되 면이 메서드 창을 닫으려면 하 고 연결된 된 분할을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-107">When called on a split pane control, this method will close the pane and remove the associated split.</span></span> <span data-ttu-id="28abd-108">이 메서드는 구현에 따라 다른 모든 창의 닫을 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-108">This method might also close all other panes, depending on implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="28abd-109">컨트롤이 요청한 작업을 수행할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="28abd-109">When the control is unable to perform the requested action.</span></span></exception>
        <exception cref="T:System.Windows.Automation.ElementNotAvailableException"><span data-ttu-id="28abd-110">대상 요소가 더 이상 사용 가능하지 않은 경우(예: 창이 닫힘)</span><span class="sxs-lookup"><span data-stu-id="28abd-110">When the target element is no longer available (for example, the window has closed).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InteractionState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.WindowInteractionState InteractionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.WindowInteractionState InteractionState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.InteractionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InteractionState As WindowInteractionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::WindowInteractionState InteractionState { System::Windows::Automation::WindowInteractionState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.WindowInteractionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="28abd-111">창의 상호 작용 상태를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-111">Gets the interaction state of the window.</span></span></summary>
        <value><span data-ttu-id="28abd-112">컨트롤의 <see cref="T:System.Windows.Automation.WindowInteractionState" />입니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-112">The <see cref="T:System.Windows.Automation.WindowInteractionState" /> of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsModal">
      <MemberSignature Language="C#" Value="public bool IsModal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsModal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.IsModal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsModal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsModal { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="28abd-113">창이 모달인지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-113">Gets a value that specifies whether the window is modal.</span></span></summary>
        <value>
          <span data-ttu-id="28abd-114">창이 모달이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-114"><see langword="true" /> if the window is modal; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTopmost">
      <MemberSignature Language="C#" Value="public bool IsTopmost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTopmost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTopmost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTopmost { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="28abd-115">창이 z-순서에서 맨 위에 있는 요소인지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-115">Gets a value that specifies whether the window is the topmost element in the z-order.</span></span></summary>
        <value>
          <span data-ttu-id="28abd-116">창이 가장 위쪽에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-116"><see langword="true" /> if the window is topmost; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Maximizable">
      <MemberSignature Language="C#" Value="public bool Maximizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Maximizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.Maximizable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Maximizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Maximizable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="28abd-117">창을 최대화할 수 있는지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-117">Gets a value that specifies whether the window can be maximized.</span></span></summary>
        <value>
          <span data-ttu-id="28abd-118">창을 최대화할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-118"><see langword="true" /> if the window can be maximized; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Minimizable">
      <MemberSignature Language="C#" Value="public bool Minimizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Minimizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.Minimizable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minimizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Minimizable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="28abd-119">창을 최소화할 수 있는지 여부를 지정하는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-119">Gets a value that specifies whether the window can be minimized.</span></span></summary>
        <value>
          <span data-ttu-id="28abd-120">창을 최소화할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-120"><see langword="true" /> if the window can be minimized; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVisualState">
      <MemberSignature Language="C#" Value="public void SetVisualState (System.Windows.Automation.WindowVisualState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisualState(valuetype System.Windows.Automation.WindowVisualState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetVisualState (state As WindowVisualState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetVisualState(System::Windows::Automation::WindowVisualState state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Windows.Automation.WindowVisualState" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="28abd-121">창의 요청된 표시 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-121">The requested visual state of the window.</span></span></param>
        <summary><span data-ttu-id="28abd-122">창의 표시 상태를 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-122">Changes the visual state of the window.</span></span> <span data-ttu-id="28abd-123">예를 들어 최소화하거나 최대화합니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-123">For example, minimizes or maximizes it.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="28abd-124">컨트롤이 요청된 동작을 지원하지 않는 경우.</span><span class="sxs-lookup"><span data-stu-id="28abd-124">When the control does not support the requested behavior.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VisualState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.WindowVisualState VisualState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.WindowVisualState VisualState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.VisualState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisualState As WindowVisualState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::WindowVisualState VisualState { System::Windows::Automation::WindowVisualState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.WindowVisualState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="28abd-125">창의 표시 상태를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-125">Gets the visual state of the window.</span></span></summary>
        <value><span data-ttu-id="28abd-126">창의 표시 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-126">The visual state of the window.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForInputIdle">
      <MemberSignature Language="C#" Value="public bool WaitForInputIdle (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForInputIdle(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForInputIdle (milliseconds As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForInputIdle(int milliseconds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds"><span data-ttu-id="28abd-127">연결된 프로세스가 유휴 상태가 될 때까지 대기하는 시간(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-127">The amount of time, in milliseconds, to wait for the associated process to become idle.</span></span> <span data-ttu-id="28abd-128">최대값은 <see cref="F:System.Int32.MaxValue" />입니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-128">The maximum is <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="28abd-129">지정된 시간 동안 또는 연결된 프로세스가 유휴 상태가 될 때까지 중 먼저 완료되는 시간 동안 코드 호출을 차단합니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-129">Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.</span></span></summary>
        <returns>
          <span data-ttu-id="28abd-130">유휴 상태가 되었으면 <see langword="true" />이고, 제한 시간이 초과되었으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-130"><see langword="true" /> if the window has entered the idle state; <see langword="false" /> if the timeout occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28abd-131">이 메서드는 일반적으로의 처리와 함께 사용 된 <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>합니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-131">This method is typically used in conjunction with the handling of a <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.</span></span>  
  
 <span data-ttu-id="28abd-132">구현에서는 기본 응용 프로그램 프레임 워크;에 따라 달라 집니다. 따라서이 메서드는 일정 시간 후 창이 되어 사용자 입력에 대 한 준비를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-132">The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input.</span></span> <span data-ttu-id="28abd-133">이 메서드는 창이 유휴 상태가 된 시점을 정확히 확인할를 호출 하는 코드 되지는지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="28abd-133">The calling code should not rely on this method to ascertain exactly when the window has become idle.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="28abd-134">전달된 매개 변수가 유효한 숫자가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="28abd-134">When the parameter passed in is not a valid number.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>