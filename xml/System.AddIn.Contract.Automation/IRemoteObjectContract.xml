<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IRemoteObjectContract.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b6589556a020e15a686acb1a793444ff0fe196df.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b6589556a020e15a686acb1a793444ff0fe196df</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.AddIn.Contract.Automation.IRemoteObjectContract">
          <source>Defines a contract that components can use to access an object across application domain and process boundaries.</source>
          <target state="translated">구성 요소에서 응용 프로그램 도메인 및 프로세스 경계를 넘어 개체에 액세스하는 데 사용할 수 있는 계약을 정의합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Contract.Automation.IRemoteObjectContract">
          <source>When you implement <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract&gt;</ph> on a type, components can use the contract to access type information for objects of the type.</source>
          <target state="translated">구현 하는 경우 <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract&gt;</ph> 유형의 구성 요소 수를 사용 하 여 계약 형식의 개체에 대 한 형식 정보에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Contract.Automation.IRemoteObjectContract">
          <source>Components access type information by calling the <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType%2A&gt;</ph> method to obtain an <ph id="ph2">&lt;xref:System.AddIn.Contract.Automation.IRemoteTypeContract&gt;</ph>.</source>
          <target state="translated">구성 요소를 호출 하 여 형식 정보에 액세스는 <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType%2A&gt;</ph> 메서드는 <ph id="ph2">&lt;xref:System.AddIn.Contract.Automation.IRemoteTypeContract&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Contract.Automation.IRemoteObjectContract">
          <source>The <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteTypeContract&gt;</ph> interface defines a contract that components can use to access specific type and member information, and to invoke members.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteTypeContract&gt;</ph> 인터페이스 구성 요소는 특정 형식 및 멤버 정보를 액세스 하 고 멤버를 호출 하는 데 사용할 수 있는 계약을 정의 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> that specifies the type of the current <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>의 형식을 지정하는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> that specifies the type of the current <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>의 형식을 지정하는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType">
          <source>Use the <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType%2A&gt;</ph> method to access the members of the remote object that the current <ph id="ph2">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract&gt;</ph> identifies.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType%2A&gt;</ph> 메서드는 원격 멤버에 액세스 하려면 개체를 현재 <ph id="ph2">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract&gt;</ph> 식별 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(System.String)">
          <source>The canonical name of the type to cast the object to.</source>
          <target state="translated">개체를 캐스팅할 형식의 정식 이름입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(System.String)">
          <source>Casts the object identified by the current <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /&gt;</ph> to a specified type.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /&gt;</ph>가 식별하는 개체를 지정된 형식으로 캐스팅합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.RemoteArgument" /&gt;</ph> that represents the result of the cast operation.</source>
          <target state="translated">캐스트 작업의 결과를 나타내는 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.RemoteArgument" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(System.String)">
          <source>A canonical name is a globally unique name, such as a GUID.</source>
          <target state="translated">정식 이름은 GUID와 같은 전역적으로 고유한 이름이입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(System.String)">
          <source>Strings in the format <ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>assembly name<ept id="p1">*</ept>&gt;, <ph id="ph2">\&lt;</ph><bpt id="p2">*</bpt>fully qualified type name<ept id="p2">*</ept>&gt; are recommended.</source>
          <target state="translated">형식에서 문자열 <ph id="ph1">\&lt;</ph> <bpt id="p1">*</bpt>어셈블리 이름<ept id="p1">*</ept>&gt;, <ph id="ph2">\&lt;</ph> <bpt id="p2">*</bpt>정규화 된 형식 이름<ept id="p2">*</ept>&gt;는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(System.String)">
          <source>An example of the recommended format of a canonical name is "ShapeApp, Microsoft.VisualStudio.Tools.Applications.Samples.ShapeApp.Application".</source>
          <target state="translated">권장 되는 형식은 정식 이름의 예로 "ShapeApp Microsoft.VisualStudio.Tools.Applications.Samples.ShapeApp.Application"입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(System.String)">
          <source>The canonical name for a type cannot change after a type is published in a component.</source>
          <target state="translated">형식이 구성 요소에서 게시 된 후에 형식에 대 한 정식 이름을 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(System.String)">
          <source>Changing the canonical name of a type in a future version of a component breaks compatibility between the component and clients that are already using the type.</source>
          <target state="translated">형식에 해당 구성 요소와 이미 유형을 사용 하는 클라이언트 간의 구성 요소 나누기 호환성의 이후 버전의 정식 이름을 변경 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(System.String)">
          <source>It is recommended that <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast%2A&gt;</ph> implementations throw an <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph> if the cast operation fails.</source>
          <target state="translated">것이 좋습니다 <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast%2A&gt;</ph> 구현 throw는 <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph> 캐스트 작업이 실패 한 경우.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>