<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IRemoteTypeContract.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e828623e05f0027402df3db956a017bc005a571e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e828623e05f0027402df3db956a017bc005a571e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.AddIn.Contract.Automation.IRemoteTypeContract">
          <source>Defines a contract that components can use to access type information and invoke members across application domain and process boundaries.</source>
          <target state="translated">구성 요소에서 응용 프로그램 도메인 및 프로세스 경계를 넘어 형식 정보에 액세스하고 멤버를 호출하는 데 사용할 수 있는 계약을 정의합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Contract.Automation.IRemoteTypeContract">
          <source>To get an <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteTypeContract&gt;</ph>, components can call the <ph id="ph2">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType%2A&gt;</ph> method of an object that implements the <ph id="ph3">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract&gt;</ph> interface.</source>
          <target state="translated">가져오려는 <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteTypeContract&gt;</ph>, 구성 요소를 호출할 수는 <ph id="ph2">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType%2A&gt;</ph> 구현 하는 개체의 메서드는 <ph id="ph3">&lt;xref:System.AddIn.Contract.Automation.IRemoteObjectContract&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Contract.Automation.IRemoteTypeContract">
          <source>To get information about the type of an object, components call the <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteTypeContract.GetTypeData%2A&gt;</ph> method.</source>
          <target state="translated">에 개체의 형식에 대 한 정보를 가져올 구성 요소 호출의 <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteTypeContract.GetTypeData%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Contract.Automation.IRemoteTypeContract">
          <source>To get information about the members of an object, components call one of the methods that returns information about a particular kind of member.</source>
          <target state="translated">개체의 멤버에 대 한 정보를 얻으려면 구성 요소는 특정 유형의 멤버에 대 한 정보를 반환 하는 방법 중 하나를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Contract.Automation.IRemoteTypeContract">
          <source>For example, to get information about the events of an object, components can use the <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteTypeContract.GetEvent%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.AddIn.Contract.Automation.IRemoteTypeContract.GetEvents%2A&gt;</ph> method.</source>
          <target state="translated">예를 들어 개체의 이벤트에 대 한 정보를 얻으려면 구성 요소가 사용할 수는 <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteTypeContract.GetEvent%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.AddIn.Contract.Automation.IRemoteTypeContract.GetEvents%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AddIn.Contract.Automation.IRemoteTypeContract">
          <source>To invoke a member of an object, components use the <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteTypeContract.InvokeMember%2A&gt;</ph> method.</source>
          <target state="translated">개체의 멤버를 호출 하려면 구성 요소는 다음과 같이 사용 됩니다.는 <ph id="ph1">&lt;xref:System.AddIn.Contract.Automation.IRemoteTypeContract.InvokeMember%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetCanonicalName">
          <source>Returns the canonical name of the current <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>의 정식 이름을 반환합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetCanonicalName">
          <source>The canonical name of the current <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>의 정식 이름입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetCanonicalName">
          <source>The canonical name is a globally unique name, such as a fully qualified type name.</source>
          <target state="translated">정식 이름은 정규화 된 형식 이름 등의 전역 고유 이름을입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetCanonicalName">
          <source>Strings in the format <ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>assembly name<ept id="p1">*</ept>&gt;, <ph id="ph2">\&lt;</ph><bpt id="p2">*</bpt>fully qualified type name<ept id="p2">*</ept>&gt; are recommended for managed types.</source>
          <target state="translated">형식에서 문자열 <ph id="ph1">\&lt;</ph> <bpt id="p1">*</bpt>어셈블리 이름<ept id="p1">*</ept>&gt;, <ph id="ph2">\&lt;</ph> <bpt id="p2">*</bpt>정규화 된 형식 이름<ept id="p2">*</ept>&gt;는 관리 되는 형식에 대 한 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetCanonicalName">
          <source>Strings in the format <ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>type library name<ept id="p1">*</ept>&gt;, <ph id="ph2">\&lt;</ph><bpt id="p2">*</bpt>type name<ept id="p2">*</ept>&gt; are recommended for COM types.</source>
          <target state="translated">형식에서 문자열 <ph id="ph1">\&lt;</ph> <bpt id="p1">*</bpt>형식 라이브러리 이름<ept id="p1">*</ept>&gt;, <ph id="ph2">\&lt;</ph> <bpt id="p2">*</bpt>유형 이름<ept id="p2">*</ept>&gt;는 COM 형식에 대 한 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetCanonicalName">
          <source>Do not change the canonical name for a type after the type is published.</source>
          <target state="translated">형식에 대 한 정식 이름 형식이 게시 된 후에 변경 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetCanonicalName">
          <source>Changing the canonical name for a type in a future version of a component breaks compatibility between the component and clients that are already using the type.</source>
          <target state="translated">이후 버전의 구성 요소와 이미 유형을 사용 하는 클라이언트 간의 나누기 호환성 구성 요소에서 형식에 대 한 정식 이름을 변경 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>The name of an event of the current <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>의 이벤트 이름입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values that specifies how to search for the event.</source>
          <target state="translated">이벤트 검색 방법을 지정하는 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /&gt;</ph> that provides access to a specified event of the current <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /&gt;</ph>의 지정된 이벤트에 액세스할 수 있게 하는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /&gt;</ph> that provides access to the specified event, if found; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">지정된 이벤트에 액세스할 수 있게 하는 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /&gt;</ph>이거나, 해당 이벤트가 없으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetEvents(System.Reflection.BindingFlags)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values that specifies how to search for the events.</source>
          <target state="translated">이벤트 검색 방법을 지정하는 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetEvents(System.Reflection.BindingFlags)">
          <source>Returns a collection of <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /&gt;</ph> objects that provides access to the specified events of the current <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /&gt;</ph>의 지정된 이벤트에 액세스할 수 있게 하는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> 개체의 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetEvents(System.Reflection.BindingFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /&gt;</ph> objects that provides access to the events that match the specified binding constraints; otherwise, an empty <ph id="ph3">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph>.</source>
          <target state="translated">지정된 바인딩 제약 조건에 맞는 이벤트에 액세스할 수 있게 하는 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph> 개체의 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteEventInfoContract" /&gt;</ph>이거나 빈 <ph id="ph3">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetField(System.String,System.Reflection.BindingFlags)">
          <source>The name of a field of the current <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>의 필드 이름입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetField(System.String,System.Reflection.BindingFlags)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values that specifies how to search for the field.</source>
          <target state="translated">필드 검색 방법을 지정하는 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /&gt;</ph> that provides access to a specified field of the current <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /&gt;</ph>의 지정된 필드에 액세스할 수 있게 하는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetField(System.String,System.Reflection.BindingFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /&gt;</ph> that provides access to the specified field, if found; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">지정된 필드에 액세스할 수 있게 하는 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /&gt;</ph>이거나, 해당 필드가 없으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetFields(System.Reflection.BindingFlags)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values that specifies how to search for the fields.</source>
          <target state="translated">필드 검색 방법을 지정하는 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetFields(System.Reflection.BindingFlags)">
          <source>Returns a collection of <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /&gt;</ph> objects that provides access to the specified fields of the current <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /&gt;</ph>의 지정된 필드에 액세스할 수 있게 하는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> 개체의 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetFields(System.Reflection.BindingFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /&gt;</ph> objects that provides access to the fields that match the specified binding constraints; otherwise, an empty <ph id="ph3">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph>.</source>
          <target state="translated">지정된 바인딩 제약 조건에 맞는 필드에 액세스할 수 있게 하는 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph> 개체의 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteFieldInfoContract" /&gt;</ph>이거나 빈 <ph id="ph3">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetInterface(System.String)">
          <source>The canonical name of an interface that is implemented by the current <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>에서 구현하는 인터페이스의 정식 이름입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetInterface(System.String)">
          <source>Returns an interface that is implemented by the current <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>에서 구현하는 인터페이스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetInterface(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> that represents the interface with the specified canonical name that this <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> implements.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>가 구현하는 지정된 정식 이름의 인터페이스를 나타내는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetInterface(System.String)">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> does not implement an interface with the specified canonical name.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>가 지정된 정식 이름의 인터페이스를 구현하지 않는 경우에는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetInterface(System.String)">
          <source>A canonical name is a globally unique name, such as a GUID.</source>
          <target state="translated">정식 이름은 GUID와 같은 전역적으로 고유한 이름이입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetInterface(System.String)">
          <source>Strings in the format <ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>assembly name<ept id="p1">*</ept>&gt;, <ph id="ph2">\&lt;</ph><bpt id="p2">*</bpt>fully qualified type name<ept id="p2">*</ept>&gt; are recommended for managed types.</source>
          <target state="translated">형식에서 문자열 <ph id="ph1">\&lt;</ph> <bpt id="p1">*</bpt>어셈블리 이름<ept id="p1">*</ept>&gt;, <ph id="ph2">\&lt;</ph> <bpt id="p2">*</bpt>정규화 된 형식 이름<ept id="p2">*</ept>&gt;는 관리 되는 형식에 대 한 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetInterface(System.String)">
          <source>Strings in the format <ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>type library name<ept id="p1">*</ept>&gt;, <ph id="ph2">\&lt;</ph><bpt id="p2">*</bpt>type name<ept id="p2">*</ept>&gt; are recommended for COM types.</source>
          <target state="translated">형식에서 문자열 <ph id="ph1">\&lt;</ph> <bpt id="p1">*</bpt>형식 라이브러리 이름<ept id="p1">*</ept>&gt;, <ph id="ph2">\&lt;</ph> <bpt id="p2">*</bpt>유형 이름<ept id="p2">*</ept>&gt;는 COM 형식에 대 한 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetInterface(System.String)">
          <source>Do not change the canonical name for a type after the type is published.</source>
          <target state="translated">형식에 대 한 정식 이름 형식이 게시 된 후에 변경 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetInterface(System.String)">
          <source>Changing the canonical name for a type in a future version of a component breaks compatibility between the component and clients that are already using the type.</source>
          <target state="translated">이후 버전의 구성 요소와 이미 유형을 사용 하는 클라이언트 간의 나누기 호환성 구성 요소에서 형식에 대 한 정식 이름을 변경 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetInterfaces">
          <source>Returns the interfaces that are implemented by the current <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>에서 구현하는 인터페이스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetInterfaces">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> objects that represent all the interfaces that are implemented by the current <ph id="ph3">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph>에서 구현하는 모든 인터페이스를 나타내는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> 개체의 <ph id="ph3">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>The name of a member of the current <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>의 멤버 이름입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>The name can represent multiple members that have the same name.</source>
          <target state="translated">이 이름은 이름이 같은 여러 멤버를 나타낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> values that specifies the members to search for.</source>
          <target state="translated">검색할 멤버를 지정하는 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values that specifies how to search for the members.</source>
          <target state="translated">멤버 검색 방법을 지정하는 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Returns a collection of <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.IContract" /&gt;</ph> objects that provides access to all the specified members of the specified member type in the current <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>, using the specified binding constraints.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.IContract" /&gt;</ph>에서 지정된 멤버 형식의 모든 지정된 멤버에 액세스할 수 있게 하는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> 개체의 컬렉션을 반환하며, 지정된 바인딩 제약 조건을 사용합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.IContract" /&gt;</ph> objects that represent the members of the current <ph id="ph3">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> that have the specified name and that meet the criteria specified by the <ph id="ph4">&lt;paramref name="memberTypes" /&gt;</ph> and <ph id="ph5">&lt;paramref name="bindingFlags" /&gt;</ph> parameters.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph>에서 <ph id="ph4">&lt;paramref name="memberTypes" /&gt;</ph> 및 <ph id="ph5">&lt;paramref name="bindingFlags" /&gt;</ph> 매개 변수에 지정된 조건에 맞고 지정된 이름을 갖는 멤버를 나타내는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.IContract" /&gt;</ph> 개체의 <ph id="ph3">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>This method can be used to get a single member, or to get multiple members that have the same name, such as constructor or method overloads.</source>
          <target state="translated">단일 멤버를 확인 하거나 생성자 또는 메서드의 오버 로드와 같은 동일한 이름을 가진 여러 멤버를 가져올이 메서드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMembers(System.Reflection.BindingFlags)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values that specifies how to search for the members.</source>
          <target state="translated">멤버 검색 방법을 지정하는 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMembers(System.Reflection.BindingFlags)">
          <source>Returns a collection of <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.IContract" /&gt;</ph> objects that provides access to all the members in the current <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> that match the specified binding constraints.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.IContract" /&gt;</ph>에서 지정된 바인딩 제약 조건에 맞는 모든 멤버에 액세스할 수 있게 하는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> 개체의 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMembers(System.Reflection.BindingFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.IContract" /&gt;</ph> objects that provides access to the members of the current <ph id="ph3">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> that meet the specified binding constraints.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph>에서 지정된 바인딩 제약 조건에 맞는 멤버에 액세스할 수 있게 하는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.IContract" /&gt;</ph> 개체의 <ph id="ph3">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMethod(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Collections.IArrayContract{System.AddIn.Contract.Automation.IRemoteTypeContract})">
          <source>The name of a method of the current <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>의 메서드 이름입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMethod(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Collections.IArrayContract{System.AddIn.Contract.Automation.IRemoteTypeContract})">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values that specifies how to search for the method.</source>
          <target state="translated">메서드 검색 방법을 지정하는 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMethod(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Collections.IArrayContract{System.AddIn.Contract.Automation.IRemoteTypeContract})">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> objects that represent the number, order, and type of the parameters for the method to get.</source>
          <target state="translated">가져올 메서드의 매개 변수 개수, 순서 및 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph> 개체의 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMethod(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Collections.IArrayContract{System.AddIn.Contract.Automation.IRemoteTypeContract})">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /&gt;</ph> that provides access to a specified method of the current <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /&gt;</ph>의 지정된 메서드에 액세스할 수 있게 하는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMethod(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Collections.IArrayContract{System.AddIn.Contract.Automation.IRemoteTypeContract})">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /&gt;</ph> that provides access to the specified method, if found; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">지정된 메서드에 액세스할 수 있게 하는 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /&gt;</ph>이거나, 해당 메서드가 없으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMethods(System.Reflection.BindingFlags)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values that specifies how to search for the methods.</source>
          <target state="translated">메서드 검색 방법을 지정하는 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMethods(System.Reflection.BindingFlags)">
          <source>Returns a collection of <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /&gt;</ph> objects that provides access to the specified methods of the current <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /&gt;</ph>의 지정된 메서드에 액세스할 수 있게 하는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> 개체의 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetMethods(System.Reflection.BindingFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /&gt;</ph> objects that provides access to the methods that match the specified binding constraints.</source>
          <target state="translated">지정된 바인딩 제약 조건에 맞는 메서드에 액세스할 수 있게 하는 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph> 개체의 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteMethodInfoContract" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetProperties(System.Reflection.BindingFlags)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values that specifies how to search for the properties.</source>
          <target state="translated">속성 검색 방법을 지정하는 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetProperties(System.Reflection.BindingFlags)">
          <source>Returns a collection of <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /&gt;</ph> objects that provides access to the specified properties of the current <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /&gt;</ph>의 지정된 속성에 액세스할 수 있게 하는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> 개체의 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetProperties(System.Reflection.BindingFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /&gt;</ph> objects that provides access to the properties that match the specified binding constraints.</source>
          <target state="translated">지정된 바인딩 제약 조건에 맞는 속성에 액세스할 수 있게 하는 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph> 개체의 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetProperty(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteTypeContract,System.AddIn.Contract.Collections.IArrayContract{System.AddIn.Contract.Automation.IRemoteTypeContract})">
          <source>The name of a property of the current <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>의 속성 이름입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetProperty(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteTypeContract,System.AddIn.Contract.Collections.IArrayContract{System.AddIn.Contract.Automation.IRemoteTypeContract})">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values that specifies how to search for the method.</source>
          <target state="translated">메서드 검색 방법을 지정하는 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetProperty(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteTypeContract,System.AddIn.Contract.Collections.IArrayContract{System.AddIn.Contract.Automation.IRemoteTypeContract})">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> that specifies the return type of the property.</source>
          <target state="translated">속성의 반환 형식을 지정하는 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetProperty(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteTypeContract,System.AddIn.Contract.Collections.IArrayContract{System.AddIn.Contract.Automation.IRemoteTypeContract})">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> objects that represent the parameters for the specified property.</source>
          <target state="translated">지정된 속성의 매개 변수를 나타내는 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IArrayContract`1" /&gt;</ph> 개체의 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetProperty(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteTypeContract,System.AddIn.Contract.Collections.IArrayContract{System.AddIn.Contract.Automation.IRemoteTypeContract})">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /&gt;</ph> that provides access to a specified property of the current <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /&gt;</ph>의 지정된 속성에 액세스할 수 있게 하는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetProperty(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteTypeContract,System.AddIn.Contract.Collections.IArrayContract{System.AddIn.Contract.Automation.IRemoteTypeContract})">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /&gt;</ph> that provides access to the specified property, if found; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">지정된 속성에 액세스할 수 있게 하는 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemotePropertyInfoContract" /&gt;</ph>이거나, 해당 속성이 없으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetTypeData">
          <source>Returns type information about the object that the current <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> identifies.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>가 식별하는 개체에 대한 형식 정보를 반환합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.GetTypeData">
          <source>A <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /&gt;</ph> that contains information about the object that the current <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph> identifies.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.RemoteTypeData" /&gt;</ph>가 식별하는 개체에 대한 정보가 들어 있는 <ph id="ph2">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.InvokeMember(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Boolean[],System.Int32)">
          <source>The name of the member to invoke.</source>
          <target state="translated">호출할 멤버의 이름입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.InvokeMember(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Boolean[],System.Int32)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values that specifies how to search for the member.</source>
          <target state="translated">멤버 검색 방법을 지정하는 <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.InvokeMember(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Boolean[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /&gt;</ph> on which to invoke the specified member.</source>
          <target state="translated">지정된 멤버를 호출할 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteObjectContract" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.InvokeMember(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Boolean[],System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract" /&gt;</ph> that contains the arguments to pass to the member to invoke.</source>
          <target state="translated">호출 대상 멤버에 전달할 인수가 들어 있는 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Collections.IRemoteArgumentArrayContract" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.InvokeMember(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Boolean[],System.Int32)">
          <source>An array of Boolean values that indicate whether each of the <bpt id="p1">&lt;c&gt;</bpt>remoteArgs<ept id="p1">&lt;/c&gt;</ept> values is passed by reference.</source>
          <target state="translated">각 <bpt id="p1">&lt;c&gt;</bpt>remoteArgs<ept id="p1">&lt;/c&gt;</ept> 값을 참조로 전달할지 여부를 나타내는 부울 값 배열입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.InvokeMember(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Boolean[],System.Int32)">
          <source>A locale ID to use for locale-specific conversions that might be performed by the member being invoked.</source>
          <target state="translated">호출되는 멤버에서 수행될 수 있는 로캘별 변환에 사용할 로캘 ID입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.InvokeMember(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Boolean[],System.Int32)">
          <source>Invokes the specified member of the current <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.Automation.IRemoteTypeContract" /&gt;</ph>의 지정된 멤버를 호출합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.InvokeMember(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Boolean[],System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.RemoteArgument" /&gt;</ph> that represents the return value of the invoked member.</source>
          <target state="translated">호출된 멤버의 반환 값을 나타내는 <ph id="ph1">&lt;see cref="T:System.AddIn.Contract.RemoteArgument" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.InvokeMember(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Boolean[],System.Int32)">
          <source>The <ph id="ph1">`remoteArgModifiers`</ph> parameter is used only for components that are written using COM.</source>
          <target state="translated"><ph id="ph1">`remoteArgModifiers`</ph> COM.를 사용 하 여 작성 된 구성에 대 한 매개 변수는 사용</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.InvokeMember(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Boolean[],System.Int32)">
          <source>Each value in the <ph id="ph1">`remoteArgModifiers`</ph> parameter indicates whether the corresponding value in the <ph id="ph2">`remoteArgs`</ph> parameter is passed by reference.</source>
          <target state="translated">각 값에는 <ph id="ph1">`remoteArgModifiers`</ph> 매개 변수를 나타냅니다 여부의 해당 값의 <ph id="ph2">`remoteArgs`</ph> 매개 변수는 참조로 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.InvokeMember(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Boolean[],System.Int32)">
          <source>The length of <ph id="ph1">`remoteArgModifiers`</ph> should be the same as the length of <ph id="ph2">`remoteArgs`</ph>.</source>
          <target state="translated">길이가 <ph id="ph1">`remoteArgModifiers`</ph> 의 길이와 동일 해야 <ph id="ph2">`remoteArgs`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AddIn.Contract.Automation.IRemoteTypeContract.InvokeMember(System.String,System.Reflection.BindingFlags,System.AddIn.Contract.Automation.IRemoteObjectContract,System.AddIn.Contract.Collections.IRemoteArgumentArrayContract,System.Boolean[],System.Int32)">
          <source>If you pass <ph id="ph1">`null`</ph> for <ph id="ph2">`remoteArgModifiers`</ph>, this method uses default logic to determine whether an argument is passed by reference.</source>
          <target state="translated">전달 하는 경우 <ph id="ph1">`null`</ph> 에 대 한 <ph id="ph2">`remoteArgModifiers`</ph>,이 메서드는 참조로 인수 전달 되는지 여부를 확인 하려면 기본 논리를 사용 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>