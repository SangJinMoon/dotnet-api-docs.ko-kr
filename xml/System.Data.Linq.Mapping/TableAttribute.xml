<Type Name="TableAttribute" FullName="System.Data.Linq.Mapping.TableAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bac18b077e2a113bda817def056a591fab7a1e3c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30385377" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TableAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TableAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Mapping.TableAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TableAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class TableAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>클래스를 데이터베이스 테이블과 연결된 엔터티 클래스로 지정합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클래스를 데이터베이스 테이블 또는 데이터베이스 뷰와 연결된 엔터티 클래스로 지정하려면 이 특성을 사용합니다. [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 클래스에서는 처리는 <xref:System.Data.Linq.Mapping.TableAttribute> 영구 클래스로 특성입니다.  
  
 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 단일 테이블 매핑만 지원합니다. 즉, 정확히 하나의 데이터베이스 테이블에 엔터티 클래스 매핑되어야 하 고 동시에 여러 클래스를 데이터베이스 테이블을 매핑할 수 없습니다.  
  
 사용할 수 있습니다는 <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> 의 속성은 <xref:System.Data.Linq.Mapping.TableAttribute> 테이블에 대 한 이름을 지정 하는 특성 및 테이블 이름을 정규화 할 스키마 이름을 선택적으로 사용할 수 있습니다. 사용 하 여 이름을 지정 하지 않는 경우는 <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> 속성을 테이블 이름은 클래스 이름과 동일 하 게 간주 됩니다.  
  
## <a name="schema-qualified-names"></a>이름 스키마 한정  
 필요에 따라 테이블 이름을 정규화 할 스키마 이름을 사용할 수 있습니다. 기본적으로 첫 번째 기간의 왼쪽에 토큰의 <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> 문자열은 스키마 이름이 될 것으로 간주 됩니다. 이름의 나머지 부분에서는 테이블 이름이 될 것으로 간주 됩니다. 공급자는 적절 하 게 테이블 이름을 따옴표로합니다. 예를 들어는 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] SQL Server 용 공급자 대괄호가 사용 이상 필요할 경우에 있게 합니다.  
  
> [!NOTE]
>  경우에 따라 SQL Server 공급자 없습니다 자동 견적 때문에 특성을 명시적으로 인용 해야 있습니다. 다음 표에서 몇 가지 예를 보여 줍니다.  
  
|Case|예: 식별자 이름|예: 특성에 필요한 문자열|그렇지 않은 경우...|  
|----------|------------------------------|--------------------------------------------|----------------|  
|스키마 이름에 마침표가|스키마: "A.B"<br /><br /> Table: "C"|"[A.B].C"|첫 번째 기간 테이블 이름을 스키마 이름 구분으로 간주 됩니다.|  
|스키마/테이블 이름으로 시작 `@`|"@SomeName"|"[@SomeName]"|매개 변수 이름으로 간주 됩니다.|  
|스키마로 시작 `[` 종료 `]`|"[Schema.Table]"|"[[Schema].[Table]]]"|따옴표가 없는 식별자에 따옴표 붙은 식별자와 유사합니다.|  
|표도 시작 `[` 종료 `]`|"[Table]"|"[[Table]]]"|따옴표가 없는 식별자에 따옴표 붙은 식별자와 유사합니다.|  
  
   
  
## Examples  
 [!code-csharp[DLinqCustomize#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqCustomize/cs/Program.cs#1)]
 [!code-vb[DLinqCustomize#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqCustomize/vb/Module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TableAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Mapping.TableAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TableAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.Linq.Mapping.TableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.TableAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>테이블 또는 뷰의 이름을 가져오거나 설정합니다.</summary>
        <value>기본적으로 이 값은 클래스 이름과 동일합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 이름을 지정 하지 않는 경우 <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>, 테이블 이름은 클래스 이름과 동일 하 게 간주 됩니다.  
  
> [!NOTE]
>  필요에 따라 (예: Schema3.Table5) 테이블 이름을 정규화 하는 스키마 이름을 사용할 수 있습니다. 기본적으로 첫 번째 기간의 왼쪽에 토큰의 <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> 스키마 이름과 테이블 이름에 나머지 문자열 간주 됩니다.  
  
 다음 예제에서는 기본 테이블 이름에에서 `Customer`를로 변경 `Customers`합니다.  
  
   
  
## Examples  
 [!code-csharp[DLinqCustomize#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqCustomize/cs/Program.cs#1)]
 [!code-vb[DLinqCustomize#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqCustomize/vb/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>