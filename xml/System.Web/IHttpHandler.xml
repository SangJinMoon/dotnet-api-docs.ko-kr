<Type Name="IHttpHandler" FullName="System.Web.IHttpHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="98b2f8e81292b161daf8dee4c4562f466a977207" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30607367" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="fb32b-101">ASP.NET 구현에서 사용자 지정 HTTP 처리기를 사용하여 동시에 HTTP 웹 요청을 처리하는 규약을 정의합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fb32b-101">Defines the contract that ASP.NET implements to synchronously process HTTP Web requests using custom HTTP handlers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb32b-102">특정, 미리 정의 된 유형의 모든 공용 언어 사양 (CLS) 호환 언어에서 HTTP 요청을 처리 하는 사용자 지정 HTTP 처리기를 작성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="fb32b-102">You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any Common Language Specification (CLS) compliant language.</span></span> <span data-ttu-id="fb32b-103">에 정의 된 실행 코드는 `HttpHandler` 이러한 특정 요청에 응답을 기본 ASP 또는 ASP.NET 웹 페이지 보다는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="fb32b-103">Executable code defined in the `HttpHandler` classes, rather than conventional ASP or ASP.NET Web pages, responds to these specific requests.</span></span> <span data-ttu-id="fb32b-104">HTTP 처리기 저수준 요청 및 응답 서비스는 IIS 웹 서버와 상호 작용 하는 방법을 제공 하 고 간단한 프로그래밍 모델을 사용 하면서 ISAPI 확장 비슷한는 많은 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="fb32b-104">HTTP handlers give you a means of interacting with the low-level request and response services of the IIS Web server and provide functionality much like ISAPI extensions but with a simpler programming model.</span></span>  
  
 <span data-ttu-id="fb32b-105">처리기에 세션 상태 값을 액세스 하는 경우 구현 해야 합니다는 <xref:System.Web.SessionState.IRequiresSessionState> 인터페이스 (메서드가 없는 표식 인터페이스).</span><span class="sxs-lookup"><span data-stu-id="fb32b-105">If your handler will access session state values, it must implement the <xref:System.Web.SessionState.IRequiresSessionState> interface (a marker interface with no methods).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.IHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReusable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fb32b-106">다른 요청에서 <see cref="T:System.Web.IHttpHandler" /> 인스턴스를 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb32b-106">Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fb32b-107">
            <see cref="T:System.Web.IHttpHandler" /> 인스턴스를 다시 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb32b-107">
              <see langword="true" /> if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb32b-108">명시적으로 설정 된 <xref:System.Web.IHttpHandler.IsReusable%2A> 속성을 `true` 또는 `false` 코드로 제공한를 재정의 하는 <xref:System.Web.IHttpHandler.IsReusable%2A> 속성 접근자 (getter).</span><span class="sxs-lookup"><span data-stu-id="fb32b-108">You explicitly set the <xref:System.Web.IHttpHandler.IsReusable%2A> property to `true` or `false` by code you provide that overrides the <xref:System.Web.IHttpHandler.IsReusable%2A> property accessor (getter).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb32b-109">다음 코드 예제는 4 개 줄의 텍스트 handler.aspx 라는 페이지에 대 한 클라이언트 요청에 대 한 응답으로 HTTP 출력 스트림에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="fb32b-109">The following code example writes four lines of text to the HTTP output stream in response to a client request for a page named handler.aspx.</span></span> <span data-ttu-id="fb32b-110">Handler.aspx에 대 한 모든 요청에서 처리는 `MyHttpHandler` 네임 스페이스의 클래스 `HandlerExample` HandlerTest.dll 어셈블리에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="fb32b-110">All requests for handler.aspx are serviced by the `MyHttpHandler` class in the namespace `HandlerExample` contained in the assembly HandlerTest.dll.</span></span>  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="fb32b-111">
            <see langword="Request" />, <see langword="Response" />, <see langword="Session" />, <see langword="Server" /> 등과 같이 HTTP 요청을 처리하는 데 사용되는 내장 서버 개체에 대한 참조를 제공하는 <see cref="T:System.Web.HttpContext" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb32b-111">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, <see langword="Request" />, <see langword="Response" />, <see langword="Session" />, and <see langword="Server" />) used to service HTTP requests.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fb32b-112">
            <see cref="T:System.Web.IHttpHandler" /> 인터페이스를 구현하는 사용자 지정 <see langword="HttpHandler" />를 사용하여 HTTP 웹 요청을 처리할 수 있도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fb32b-112">Enables processing of HTTP Web requests by a custom <see langword="HttpHandler" /> that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fb32b-113">사용자 지정 배치 `HttpHandler` 의 코드는 <xref:System.Web.IHttpHandler.ProcessRequest%2A> 가상 메서드를 다음 예제에서와 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="fb32b-113">Place your custom `HttpHandler` code in the <xref:System.Web.IHttpHandler.ProcessRequest%2A> virtual method, as shown in the following example.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fb32b-114">다음 코드 예제는 4 개 줄의 텍스트 handler.aspx 라는 페이지에 대 한 클라이언트 요청에 대 한 응답으로 HTTP 출력 스트림에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="fb32b-114">The following code example writes four lines of text to the HTTP output stream in response to a client request for a page named handler.aspx.</span></span> <span data-ttu-id="fb32b-115">Handler.aspx에 대 한 모든 요청에서 처리는 `MyHttpHandler` 네임 스페이스의 클래스 `HandlerExample` HandlerTest.dll 어셈블리에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="fb32b-115">All requests for handler.aspx are serviced by the `MyHttpHandler` class in the namespace `HandlerExample` contained in the assembly HandlerTest.dll.</span></span>  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>