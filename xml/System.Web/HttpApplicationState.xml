<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HttpApplicationState.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac516f2143bf2be7e6b84dc7a430caca84732d94bfd.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16f2143bf2be7e6b84dc7a430caca84732d94bfd</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Web.HttpApplicationState">
          <source>Enables sharing of global information across multiple sessions and requests within an ASP.NET application.</source>
          <target state="translated">ASP.NET 응용 프로그램 내의 여러 세션 및 요청에서 전역 정보를 공유할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>An ASP.NET application is the sum of all files, pages, handlers, modules, and code within the scope of a virtual directory and its subdirectories on a single Web server.</source>
          <target state="translated">ASP.NET 응용 프로그램에 모든 파일, 페이지, 처리기, 모듈 및 가상 디렉터리와 단일 웹 서버에 하위 디렉터리의 범위 내에서 코드의 합계입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>A single instance of an <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> class is created the first time a client requests any URL resource from within a particular ASP.NET application virtual directory.</source>
          <target state="translated">단일 인스턴스는 <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> 클래스에는 클라이언트가 요청 하는 URL 리소스에서 특정 ASP.NET 응용 프로그램 가상 디렉터리 내에서 처음으로 만들어집니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>A separate single instance is created for each ASP.NET application on a Web server.</source>
          <target state="translated">웹 서버에서 각 ASP.NET 응용 프로그램에 대 한 별도 단일 인스턴스가 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>A reference to each instance is then exposed via the intrinsic <ph id="ph1">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> object.</source>
          <target state="translated">그런 다음 각 인스턴스에 대 한 참조는 내장 함수를 통해 노출 <ph id="ph1">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>Application state is not shared across either a Web farm (in which an application is hosted across multiple servers) or a Web garden (in which an application is hosted across multiple processes on the same computer).</source>
          <target state="translated">응용 프로그램 상태 (응용 프로그램은 호스팅되는 여러 서버에 걸쳐) 웹 팜 또는 웹 가든 (응용 프로그램은 호스팅되는 동일한 컴퓨터에서 여러 프로세스에서)를 통해 공유 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.HttpApplicationState">
          <source>This type is thread safe.</source>
          <target state="translated">이 형식은 스레드로부터 안전합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Add(System.String,System.Object)">
          <source>The name of the object to be added to the collection.</source>
          <target state="translated">컬렉션에 추가되는 개체의 이름입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Add(System.String,System.Object)">
          <source>The value of the object.</source>
          <target state="translated">개체 값입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Add(System.String,System.Object)">
          <source>Adds a new object to the <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated">새 개체를 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 컬렉션에 추가합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Add(System.String,System.Object)">
          <source>The following example adds two application variables named MyAppVar1 and MyAppVar2 to the Application collection.</source>
          <target state="translated">다음 예제에서는 응용 프로그램 컬렉션에 MyAppVar1 및 MyAppVar2 라는 두 개의 응용 프로그램 변수를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.AllKeys">
          <source>Gets the access keys in the <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 컬렉션의 선택키를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.AllKeys">
          <source>A string array of <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object names.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 개체 이름의 문자열 배열입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.AllKeys">
          <source>The following example fills a string array with all the object names in the application state collection.</source>
          <target state="translated">다음 예제에서는 응용 프로그램 상태 컬렉션의 모든 개체 이름은 문자열 배열을 채웁니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Clear">
          <source>Removes all objects from an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 컬렉션에서 개체를 모두 제거합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Clear">
          <source>The following example removes all <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> variables from the collection.</source>
          <target state="translated">다음 예제에서는 모두 제거 <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> 변수 컬렉션에서 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Contents">
          <source>Gets a reference to the <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 개체에 대한 참조를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Contents">
          <source>A reference to the <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 개체에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Contents">
          <source>This property provides compatibility with earlier versions of ASP.</source>
          <target state="translated">이 속성은 이전 버전 ASP와의 호환성을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Contents">
          <source>The following example creates a new <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> object that is used to access the object names in the application state collection.</source>
          <target state="translated">다음 예제에서는 새 <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> 응용 프로그램 상태 컬렉션의 개체 이름에 액세스 하려면 사용 되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Count">
          <source>Gets the number of objects in the <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 컬렉션의 개체 수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Count">
          <source>The number of item objects in the collection.</source>
          <target state="translated">컬렉션의 항목 개체 수입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Count">
          <source>The default is 0.</source>
          <target state="translated">기본값은 0입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Count">
          <source>The following example executes only if the number of objects in the collection exceeds five.</source>
          <target state="translated">다음 예제에서는 컬렉션의 개체 수가 5 개를 초과 하는 경우에 실행 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="T:System.Web.HttpApplicationState">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object by name or index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 개체를 이름 또는 인덱스로 가져옵니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.Int32)">
          <source>The index of the application state object.</source>
          <target state="translated">응용 프로그램 상태 개체의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.Int32)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object by numerical index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 개체를 숫자 인덱스로 가져옵니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.Int32)">
          <source>The object referenced by <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>으로 참조된 개체입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Get(System.Int32)">
          <source>The following example returns the first object (index = 0) from the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> collection of the intrinsic <ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> object and copies it to a new object variable.</source>
          <target state="translated">다음 예에서는 첫 번째 개체를 반환 (인덱스 = 0)에서 <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> 내장 컬렉션 <ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> 개체 하 고 새 개체 변수에 복사 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.String)">
          <source>The name of the object.</source>
          <target state="translated">개체의 이름입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.String)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object by name.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 개체를 이름으로 가져옵니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Get(System.String)">
          <source>The object referenced by <ph id="ph1">&lt;paramref name="name" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph>으로 참조된 개체입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Get(System.String)">
          <source>The following example returns an object named MyAppVar1 from the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> collection of the intrinsic <ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> object and copies it to a new object variable.</source>
          <target state="translated">MyAppVar1 라는 개체를 반환 하는 다음 예제는 <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> 내장 컬렉션 <ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> 개체 하 고 새 개체 변수에 복사 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.GetKey(System.Int32)">
          <source>The index of the application state object.</source>
          <target state="translated">응용 프로그램 상태 개체의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.GetKey(System.Int32)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object name by index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 개체 이름을 인덱스로 가져옵니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.GetKey(System.Int32)">
          <source>The name under which the application state object was saved.</source>
          <target state="translated">응용 프로그램 상태 개체를 저장할 때 사용되는 이름입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.GetKey(System.Int32)">
          <source>The following example returns the names of all the objects in the application state collection and stores the names in a string array.</source>
          <target state="translated">다음 예제에서는 응용 프로그램 상태 컬렉션에 있는 모든 개체의 이름을 반환 하 고 이름이 문자열 배열에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="T:System.Web.HttpApplicationState">
          <source>Gets access to an object in an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 컬렉션의 개체에 대한 액세스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="T:System.Web.HttpApplicationState">
          <source>This property is overloaded to allow access to an object by name or numerical index.</source>
          <target state="translated">이 속성은 이름 또는 숫자 인덱스로 개체에 액세스할 수 있도록 오버로드됩니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Item(System.Int32)">
          <source>The numerical index of the object in the collection.</source>
          <target state="translated">컬렉션에 있는 개체의 숫자 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Item(System.Int32)">
          <source>Gets a single <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object by index.</source>
          <target state="translated">단일 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 개체를 인덱스로 가져옵니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Item(System.Int32)">
          <source>The object referenced by <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>으로 참조된 개체입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Item(System.Int32)">
          <source>The following example returns the first object (index = 0) from the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> collection of the intrinsic <ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> object and copies it to a new object variable.</source>
          <target state="translated">다음 예에서는 첫 번째 개체를 반환 (인덱스 = 0)에서 <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> 내장 컬렉션 <ph id="ph2">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> 개체 하 고 새 개체 변수에 복사 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Item(System.String)">
          <source>The name of the object in the collection.</source>
          <target state="translated">컬렉션에 있는 개체의 이름입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.Item(System.String)">
          <source>Gets the value of a single <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object by name.</source>
          <target state="translated">단일 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 개체의 값을 이름으로 가져옵니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Item(System.String)">
          <source>The object referenced by <ph id="ph1">&lt;paramref name="name" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph>으로 참조된 개체입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.Item(System.String)">
          <source>The following example returns an object named <ph id="ph1">`MyAppVar1`</ph> from the <ph id="ph2">&lt;xref:System.Web.HttpApplicationState&gt;</ph> collection of the intrinsic <ph id="ph3">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> object and copies it to a new object variable.</source>
          <target state="translated">다음 예에서는 이라는 개체를 반환 합니다. <ph id="ph1">`MyAppVar1`</ph> 에서 <ph id="ph2">&lt;xref:System.Web.HttpApplicationState&gt;</ph> 내장 컬렉션 <ph id="ph3">&lt;xref:System.Web.HttpContext.Application%2A&gt;</ph> 개체 하 고 새 개체 변수에 복사 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Lock">
          <source>Locks access to an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> variable to facilitate access synchronization.</source>
          <target state="translated">액세스 동기화를 용이하게 하기 위해 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 변수에 대한 액세스를 잠급니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Lock">
          <source>The <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> class performs automatic locking and unlocking with the <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.AllKeys%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Web.HttpApplicationState.Count%2A&gt;</ph> properties and the <ph id="ph4">&lt;xref:System.Web.HttpApplicationState.Add%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Web.HttpApplicationState.Get%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Web.HttpApplicationState.GetKey%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Web.HttpApplicationState.Remove%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph> and <ph id="ph10">&lt;xref:System.Web.HttpApplicationState.Set%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> 자동 잠금 및와 잠금 해제를 수행 하는 클래스는 <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.AllKeys%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Web.HttpApplicationState.Count%2A&gt;</ph> 속성 및 <ph id="ph4">&lt;xref:System.Web.HttpApplicationState.Add%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Web.HttpApplicationState.Get%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Web.HttpApplicationState.GetKey%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Web.HttpApplicationState.Remove%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph> 및 <ph id="ph10">&lt;xref:System.Web.HttpApplicationState.Set%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Lock">
          <source>However, explicitly using the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph> methods when you have a series of operations may be more efficient.</source>
          <target state="translated">그러나 명시적으로 사용 하는 <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph> 메서드는 일련의 작업을 사용 하는 경우 더 효율적일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Lock">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph> method to prevent other sessions from changing the value of two application variables until after the local session has changed them.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph> 메서드 다른 세션 로컬 세션에 변경 된 후까지 두 응용 프로그램 변수의 값을 변경 하지 못하도록 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Remove(System.String)">
          <source>The name of the object to be removed from the collection.</source>
          <target state="translated">컬렉션에서 제거되는 개체의 이름입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Remove(System.String)">
          <source>Removes the named object from an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 컬렉션에서 명명된 개체를 제거합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Remove(System.String)">
          <source>The following example removes one application state variable from the collection.</source>
          <target state="translated">다음 예제에서는 컬렉션에서 하나의 응용 프로그램 상태 변수를 제거합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.RemoveAll">
          <source>Removes all objects from an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 컬렉션에서 개체를 모두 제거합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.RemoveAll">
          <source><ph id="ph1">&lt;xref:System.Web.HttpApplicationState.RemoveAll%2A&gt;</ph> is an internal call to <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.HttpApplicationState.RemoveAll%2A&gt;</ph> 에 대 한 내부 호출 <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.RemoveAll">
          <source>The following example removes all <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> variables from the collection.</source>
          <target state="translated">다음 예제에서는 모두 제거 <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> 변수 컬렉션에서 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.RemoveAt(System.Int32)">
          <source>The position in the collection of the item to remove.</source>
          <target state="translated">제거할 항목의 컬렉션 내 위치입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.RemoveAt(System.Int32)">
          <source>Removes an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> object from a collection by index.</source>
          <target state="translated">컬렉션에서 인덱스별로 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 개체를 제거합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.RemoveAt(System.Int32)">
          <source>The following code example demonstrates how to insert two application variables into the collection, and then use the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph> method to remove the first variable in a custom <ph id="ph2">&lt;xref:System.Web.HttpApplicationState&gt;</ph> object.</source>
          <target state="translated">다음 코드 예제에서는 두 개의 응용 프로그램 변수를 컬렉션에 삽입을 사용 하 여는 <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph> 메서드는 사용자 지정에서 첫 번째 변수를 제거 하려면 <ph id="ph2">&lt;xref:System.Web.HttpApplicationState&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Set(System.String,System.Object)">
          <source>The name of the object to be updated.</source>
          <target state="translated">업데이트할 개체의 이름입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Set(System.String,System.Object)">
          <source>The updated value of the object.</source>
          <target state="translated">개체의 업데이트된 값입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.Set(System.String,System.Object)">
          <source>Updates the value of an object in an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 컬렉션에 있는 개체의 값을 업데이트합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.Set(System.String,System.Object)">
          <source>The following example updates the value of an existing application state variable.</source>
          <target state="translated">다음 예에서는 기존 응용 프로그램 상태 변수 값을 업데이트합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.Web.HttpApplicationState.StaticObjects">
          <source>Gets all objects declared by an <ph id="ph1">&lt;see langword="&amp;lt;object&amp;gt;" /&gt;</ph> tag where the scope is set to "Application" within the ASP.NET application.</source>
          <target state="translated">범위가 ASP.NET 응용 프로그램 내의 "응용 프로그램"으로 설정된 <ph id="ph1">&lt;see langword="&amp;lt;object&amp;gt;" /&gt;</ph> 태그에 의해 선언된 개체를 모두 가져옵니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.StaticObjects">
          <source>A collection of objects on the page.</source>
          <target state="translated">해당 페이지에 있는 개체의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.StaticObjects">
          <source>Application objects are defined in the Global.asax file inside the <ph id="ph1">`&lt;object runat="server" scope="Application"&gt; &lt;/object&gt;`</ph> tags.</source>
          <target state="translated">응용 프로그램 개체 내 Global.asax 파일에 정의 되는 <ph id="ph1">`&lt;object runat="server" scope="Application"&gt; &lt;/object&gt;`</ph> 태그입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.HttpApplicationState.StaticObjects">
          <source>The following example gets all application objects into a <ph id="ph1">&lt;xref:System.Web.HttpStaticObjectsCollection&gt;</ph> variable and executes a routine only if the number of objects is greater than 0.</source>
          <target state="translated">다음 예제에서는 모든 응용 프로그램 개체를 가져옵니다는 <ph id="ph1">&lt;xref:System.Web.HttpStaticObjectsCollection&gt;</ph> 변수 및 개체 수가 0 보다 큰 경우에 루틴을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Web.HttpApplicationState.UnLock">
          <source>Unlocks access to an <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> variable to facilitate access synchronization.</source>
          <target state="translated">액세스 동기화를 용이하게 하기 위해 <ph id="ph1">&lt;see cref="T:System.Web.HttpApplicationState" /&gt;</ph> 변수에 대한 액세스의 잠금을 해제합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.UnLock">
          <source>The <ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> class performs automatic locking and unlocking with the <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.AllKeys%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Web.HttpApplicationState.Count%2A&gt;</ph> properties and the <ph id="ph4">&lt;xref:System.Web.HttpApplicationState.Add%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Web.HttpApplicationState.Get%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Web.HttpApplicationState.GetKey%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Web.HttpApplicationState.Remove%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph> and <ph id="ph10">&lt;xref:System.Web.HttpApplicationState.Set%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.HttpApplicationState&gt;</ph> 자동 잠금 및와 잠금 해제를 수행 하는 클래스는 <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.AllKeys%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Web.HttpApplicationState.Count%2A&gt;</ph> 속성 및 <ph id="ph4">&lt;xref:System.Web.HttpApplicationState.Add%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Web.HttpApplicationState.Clear%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Web.HttpApplicationState.Get%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Web.HttpApplicationState.GetKey%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Web.HttpApplicationState.Remove%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Web.HttpApplicationState.RemoveAt%2A&gt;</ph> 및 <ph id="ph10">&lt;xref:System.Web.HttpApplicationState.Set%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.UnLock">
          <source>However, explicitly using the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph> methods when you have a series of operations may be more efficient.</source>
          <target state="translated">그러나 명시적으로 사용 하는 <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph> 메서드는 일련의 작업을 사용 하는 경우 더 효율적일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.HttpApplicationState.UnLock">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph> method and <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph> method to prevent other sessions from changing the value of two application variables until after the local session has changed them.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Web.HttpApplicationState.Lock%2A&gt;</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Web.HttpApplicationState.UnLock%2A&gt;</ph> 메서드 다른 세션 로컬 세션에 변경 된 후까지 두 응용 프로그램 변수의 값을 변경 하지 못하도록 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>