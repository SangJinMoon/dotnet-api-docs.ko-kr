<Type Name="IHttpHandlerFactory" FullName="System.Web.IHttpHandlerFactory">
  <TypeSignature Language="C#" Value="public interface IHttpHandlerFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandlerFactory" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandlerFactory" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpHandlerFactory" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpHandlerFactory" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="7b86a-101">새 <see cref="T:System.Web.IHttpHandler" /> 개체를 만들기 위해 클래스 팩터리에서 구현해야 하는 규약을 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-101">Defines the contract that class factories must implement to create new <see cref="T:System.Web.IHttpHandler" /> objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7b86a-102">구현 하는 클래스는 <xref:System.Web.IHttpHandlerFactory> 인터페이스를 구현 하는 클래스의 새 인스턴스를 제조 동적으로 제외 하 고 동작이 없는 <xref:System.Web.IHttpHandler> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-102">A class that implements the <xref:System.Web.IHttpHandlerFactory> interface has no behavior except to dynamically manufacture new instances of classes that implement the <xref:System.Web.IHttpHandler> interface.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetHandler">
      <MemberSignature Language="C#" Value="public System.Web.IHttpHandler GetHandler (System.Web.HttpContext context, string requestType, string url, string pathTranslated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.IHttpHandler GetHandler(class System.Web.HttpContext context, string requestType, string url, string pathTranslated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandlerFactory.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHandler (context As HttpContext, requestType As String, url As String, pathTranslated As String) As IHttpHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::IHttpHandler ^ GetHandler(System::Web::HttpContext ^ context, System::String ^ requestType, System::String ^ url, System::String ^ pathTranslated);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.IHttpHandler</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="requestType" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="pathTranslated" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="7b86a-103">내장 서버 개체(예: <see langword="Request" />, <see langword="Response" />, <see langword="Session" /> 및 <see langword="Server" />)에 대한 참조를 제공하는 <see cref="T:System.Web.HttpContext" /> 클래스의 인스턴스는 HTTP 요청을 지원하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-103">An instance of the <see cref="T:System.Web.HttpContext" /> class that provides references to intrinsic server objects (for example, <see langword="Request" />, <see langword="Response" />, <see langword="Session" />, and <see langword="Server" />) used to service HTTP requests.</span></span></param>
        <param name="requestType"><span data-ttu-id="7b86a-104">클라이언트에서 사용하는 HTTP 데이터 전송 메서드(<see langword="GET" /> 또는 <see langword="POST" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-104">The HTTP data transfer method (<see langword="GET" /> or <see langword="POST" />) that the client uses.</span></span></param>
        <param name="url"><span data-ttu-id="7b86a-105">요청된 리소스의 <see cref="P:System.Web.HttpRequest.RawUrl" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-105">The <see cref="P:System.Web.HttpRequest.RawUrl" /> of the requested resource.</span></span></param>
        <param name="pathTranslated"><span data-ttu-id="7b86a-106">요청된 리소스에 대한 <see cref="P:System.Web.HttpRequest.PhysicalApplicationPath" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-106">The <see cref="P:System.Web.HttpRequest.PhysicalApplicationPath" /> to the requested resource.</span></span></param>
        <summary><span data-ttu-id="7b86a-107"><see cref="T:System.Web.IHttpHandler" /> 인터페이스를 구현하는 클래스의 인스턴스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-107">Returns an instance of a class that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</span></span></summary>
        <returns><span data-ttu-id="7b86a-108">요청을 처리하는 새 <see cref="T:System.Web.IHttpHandler" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-108">A new <see cref="T:System.Web.IHttpHandler" /> object that processes the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7b86a-109">다음 코드 예제에는 클라이언트 요청에 대 한 응답으로 사용자 지정 처리기 개체를 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-109">The following code example demonstrates how to create custom handler objects in response to a client request.</span></span> <span data-ttu-id="7b86a-110">이 예제는 두 부분으로 구성 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-110">The example has two parts:</span></span>  
  
-   <span data-ttu-id="7b86a-111">처리기 팩터리 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-111">A handler factory class.</span></span>  
  
-   <span data-ttu-id="7b86a-112">Web.config 파일 발췌 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-112">A Web.config file excerpt.</span></span>  
  
 <span data-ttu-id="7b86a-113">예의 첫 번째 부분에서는 이름이 abc.aspx 또는 xyz.aspx 인 명명 된 페이지에 대 한 클라이언트 요청에 대 한 응답으로 사용자 지정 처리기 개체를 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-113">The first part of the example shows how to create custom handler objects in response to a client request for a page named either abc.aspx or xyz.aspx.</span></span> <span data-ttu-id="7b86a-114">라는 처리기 팩터리 클래스 `hwf` 요청 된 페이지에 따라 적절 한 처리기 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-114">The handler factory class named `hwf` creates the appropriate handler object depending on the page requested.</span></span>  
  
 [!code-csharp[Classic IHttpHandlerFactory.GetHandler Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandlerFactory.GetHandler Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandlerFactory.GetHandler Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandlerFactory.GetHandler Example/VB/source.vb#1)]  
  
 <span data-ttu-id="7b86a-115">예의 두 번째 부분에서는 Web.config 파일 발췌 한 구문을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-115">The second part of the example shows a Web.config file excerpt.</span></span> <span data-ttu-id="7b86a-116">위의 처리기 팩터리를 사용 하려면 Web.config 파일에 다음 줄을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-116">To use the above handler factory, add the following lines to the Web.config file.</span></span>  
  
```  
<configuration>   
  <system.web>   
    <httpHandlers>   
      <add verb="*" path="abc.aspx" type="test.MyFactory,HandlerFactoryTest" />   
      <add verb="*" path="xyz.aspx" type="test.MyFactory,HandlerFactoryTest" />   
    </httpHandlers>   
  </system.web>  
</configuration>   
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandler">
      <MemberSignature Language="C#" Value="public void ReleaseHandler (System.Web.IHttpHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandler(class System.Web.IHttpHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandlerFactory.ReleaseHandler(System.Web.IHttpHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHandler (handler As IHttpHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHandler(System::Web::IHttpHandler ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Web.IHttpHandler" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="7b86a-117">다시 사용할 <see cref="T:System.Web.IHttpHandler" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-117">The <see cref="T:System.Web.IHttpHandler" /> object to reuse.</span></span></param>
        <summary><span data-ttu-id="7b86a-118">팩터리에서 기존 처리기 인스턴스를 다시 사용할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="7b86a-118">Enables a factory to reuse an existing handler instance.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>