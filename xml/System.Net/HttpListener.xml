<Type Name="HttpListener" FullName="System.Net.HttpListener">
  <TypeSignature Language="C#" Value="public sealed class HttpListener : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpListener extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpListener" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListener&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListener sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.HttpListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="8afe2-101">프로그래밍 방식으로 제어되는 간단한 HTTP 프로토콜 수신기를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-101">Provides a simple, programmatically controlled HTTP protocol listener.</span></span> <span data-ttu-id="8afe2-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-103">사용 하 여 <xref:System.Net.HttpListener> 클래스, HTTP 요청에 응답 하는 간단한 HTTP 프로토콜 수신기를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-103">Using the <xref:System.Net.HttpListener> class, you can create a simple HTTP protocol listener that responds to HTTP requests.</span></span> <span data-ttu-id="8afe2-104">수신기의 수명 동안 활성화 되어는 <xref:System.Net.HttpListener> 개체와 해당 사용 권한으로 응용 프로그램 내에서 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-104">The listener is active for the lifetime of the <xref:System.Net.HttpListener> object and runs within your application with its permissions.</span></span>
   
 <span data-ttu-id="8afe2-105">사용 하도록 <xref:System.Net.HttpListener>를 사용 하 여 클래스의 새 인스턴스를 만들고는 <xref:System.Net.HttpListener> 생성자를 사용 하 여는 <xref:System.Net.HttpListener.Prefixes%2A> 어떤 식별자 URI (Uniform Resource)을 지정 하는 문자열을 보유 하는 컬렉션에 액세스 하는 속성 접두사는 <xref:System.Net.HttpListener>처리 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-105">To use <xref:System.Net.HttpListener>, create a new instance of the class using the <xref:System.Net.HttpListener> constructor and use the <xref:System.Net.HttpListener.Prefixes%2A> property to gain access to the collection that holds the strings that specify which Uniform Resource Identifier (URI) prefixes the <xref:System.Net.HttpListener> should process.</span></span>
  
 <span data-ttu-id="8afe2-106">체계 (http 또는 https), 호스트, 선택적인 포트와 선택적 경로 URI 라는 접두사 문자열로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-106">A URI prefix string is composed of a scheme (http or https), a host, an optional port, and an optional path.</span></span> <span data-ttu-id="8afe2-107">완전 한 접두사 문자열의 예로 * http://www.contoso.com:8080/customerData/ *합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-107">An example of a complete prefix string is *http://www.contoso.com:8080/customerData/*.</span></span> <span data-ttu-id="8afe2-108">접두사는 슬래시 ("/") 종료 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-108">Prefixes must end in a forward slash ("/").</span></span> <span data-ttu-id="8afe2-109"><xref:System.Net.HttpListener> 가장 일치 하는 요청된 된 URI 접두사가 포함 된 개체는 요청에 응답 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-109">The <xref:System.Net.HttpListener> object with the prefix that most closely matches a requested URI responds to the request.</span></span> <span data-ttu-id="8afe2-110">여러 <xref:System.Net.HttpListener> 개체 같은 접두사를 추가할 수 없습니다; <xref:System.ComponentModel.Win32Exception> 이면 예외가 발생 한 <xref:System.Net.HttpListener> 접두사를 이미 사용 하 여 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-110">Multiple <xref:System.Net.HttpListener> objects cannot add the same prefix; a <xref:System.ComponentModel.Win32Exception> exception is thrown if a <xref:System.Net.HttpListener> adds a prefix that is already in use.</span></span>
  
 <span data-ttu-id="8afe2-111">호스트 요소로 바꿀 수 있습니다는 포트를 지정 하는 경우 "\*" 임을 나타내는 <xref:System.Net.HttpListener> 요청된 된 URI는 다른 접두사와 일치 하지 않으면 포트에 전송 된 요청을 수락 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-111">When a port is specified, the host element can be replaced with "\*" to indicate that the <xref:System.Net.HttpListener> accepts requests sent to the port if the requested URI does not match any other prefix.</span></span> <span data-ttu-id="8afe2-112">예를 들어 모든 요청을 수신할 포트 8080 요청된 URI 모두에서 처리 되지 않은 경우에 보낸 <xref:System.Net.HttpListener>, 접두사는 *http://\*: 8080 /* 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-112">For example, to receive all requests sent to port 8080 when the requested URI is not handled by any <xref:System.Net.HttpListener>, the prefix is *http://\*:8080/*.</span></span> <span data-ttu-id="8afe2-113">마찬가지로, 되도록 지정 하려면는 <xref:System.Net.HttpListener> 포트로 보낸 모든 요청에서 "+" 문자가 호스트 요소를 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-113">Similarly, to specify that the <xref:System.Net.HttpListener> accepts all requests sent to a port, replace the host element with the "+" character.</span></span> <span data-ttu-id="8afe2-114">For example, *https://+:8080*.</span><span class="sxs-lookup"><span data-stu-id="8afe2-114">For example, *https://+:8080*.</span></span> <span data-ttu-id="8afe2-115">"\*" 및 "+" 문자는 한 경로가 포함 된 접두사에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-115">The "\*" and "+" characters can be present in prefixes that include paths.</span></span>
  
 <span data-ttu-id="8afe2-116">.NET Core 2.0 또는 Windows 10에서.NET Framework 4.6 부터는 와일드 카드 하위 도메인에서 관리 되는 URI 접두사에 지원 됩니다는 <xref:System.Net.HttpListener> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-116">Starting with .NET Core 2.0 or .NET Framework 4.6 on Windows 10, wildcard subdomains are supported in URI prefixes that are managed by an <xref:System.Net.HttpListener> object.</span></span> <span data-ttu-id="8afe2-117">와일드 카드 하위 도메인을 지정 하려면 사용 된 "\*"는 URI 접두사 호스트의 일부로 문자.</span><span class="sxs-lookup"><span data-stu-id="8afe2-117">To specify a wildcard subdomain, use the "\*" character as part of the hostname in a URI prefix.</span></span> <span data-ttu-id="8afe2-118">예를 들어 *http://\*.foo.com/* 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-118">For example, *http://\*.foo.com/*.</span></span> <span data-ttu-id="8afe2-119">이에 대 한 인수로 전달 된 <xref:System.Net.HttpListenerPrefixCollection.Add%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8afe2-119">Pass this as the argument to the <xref:System.Net.HttpListenerPrefixCollection.Add%2A> method.</span></span> <span data-ttu-id="8afe2-120">.NET Core 2.0 또는 Windows 10;에서.NET Framework 4.6을 기준으로이 작업은 이전 버전에서는 이렇게 생성 된 <xref:System.Net.HttpListenerException>합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-120">This works as of .NET Core 2.0 or .NET Framework 4.6 on Windows 10; in earlier versions, this generates an <xref:System.Net.HttpListenerException>.</span></span>

 > [!WARNING]
 > <span data-ttu-id="8afe2-121">최상위 와일드 카드 바인딩 (*http://\*: 8080 /* 및 \* http://+:8080 \*) 해야 **하지** 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-121">Top-level wildcard bindings (*http://\*:8080/* and *http://+:8080*) should **not** be used.</span></span> <span data-ttu-id="8afe2-122">최상위 와일드카드 바인딩은 보안 취약점에 앱을 노출시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-122">Top-level wildcard bindings can open up your app to security vulnerabilities.</span></span> <span data-ttu-id="8afe2-123">강력한 와일드카드와 약한 와일드카드 모두에 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-123">This applies to both strong and weak wildcards.</span></span> <span data-ttu-id="8afe2-124">와일드카드보다는 명시적 호스트 이름을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-124">Use explicit host names rather than wildcards.</span></span> <span data-ttu-id="8afe2-125">전체 부모 도메인을 제어하는 경우 하위 도메인 와일드카드 바인딩(예: `*.mysub.com`)에는 이러한 보안 위험이 없습니다(취약한 `*.com`과 반대임).</span><span class="sxs-lookup"><span data-stu-id="8afe2-125">Subdomain wildcard binding (for example, `*.mysub.com`) doesn't have this security risk if you control the entire parent domain (as opposed to `*.com`, which is vulnerable).</span></span> <span data-ttu-id="8afe2-126">자세한 내용은 [rfc7230 섹션-5.4](https://tools.ietf.org/html/rfc7230#section-5.4)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="8afe2-126">See [rfc7230 section-5.4](https://tools.ietf.org/html/rfc7230#section-5.4) for more information.</span></span>
  
 <span data-ttu-id="8afe2-127">클라이언트의에서 요청을 수신 대기를 시작 하려면 URI 접두사는 추가 수집 하 고 호출 하는 <xref:System.Net.HttpListener.Start%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8afe2-127">To begin listening for requests from clients, add the URI prefixes to the collection and call the <xref:System.Net.HttpListener.Start%2A> method.</span></span> <span data-ttu-id="8afe2-128"><xref:System.Net.HttpListener> 클라이언트 요청을 처리 하기 위한 동기 및 비동기 모델을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-128"><xref:System.Net.HttpListener> offers both synchronous and asynchronous models for processing client requests.</span></span> <span data-ttu-id="8afe2-129">요청 및 응답을 사용 하 여 액세스 되는 <xref:System.Net.HttpListenerContext> 에서 반환 된 개체는 <xref:System.Net.HttpListener.GetContext%2A> 메서드 또는 해당 비동기 메서드인은 <xref:System.Net.HttpListener.BeginGetContext%2A> 및 <xref:System.Net.HttpListener.EndGetContext%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8afe2-129">Requests and their associated responses are accessed using the <xref:System.Net.HttpListenerContext> object returned by the <xref:System.Net.HttpListener.GetContext%2A> method or its asynchronous counterparts, the <xref:System.Net.HttpListener.BeginGetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods.</span></span>
  
 <span data-ttu-id="8afe2-130">동기 모델은 클라이언트 요청에 대 한 대기 하는 동안 응용 프로그램을 차단 하 고 한 번에 하나의 요청을 처리 하려는 경우에 적합 한입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-130">The synchronous model is appropriate if your application should block while waiting for a client request and if you want to process only one request at a time.</span></span> <span data-ttu-id="8afe2-131">동기 모델을 사용 하 여 호출의 <xref:System.Net.HttpListener.GetContext%2A> 메서드는 클라이언트 요청을 보낼 때까지 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-131">Using the synchronous model, call the <xref:System.Net.HttpListener.GetContext%2A> method, which waits for a client to send a request.</span></span> <span data-ttu-id="8afe2-132">메서드는 <xref:System.Net.HttpListenerContext> 발생 한 경우 처리에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-132">The method returns an <xref:System.Net.HttpListenerContext> object to you for processing when one occurs.</span></span>
  
 <span data-ttu-id="8afe2-133">더 복잡 한 비동기 모델에서 응용 프로그램 자체의 실행 스레드에서 처리 되는 요청 및 각 요청을 기다리는 동안 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-133">In the more complex asynchronous model, your application does not block while waiting for requests and each request is processed in its own execution thread.</span></span> <span data-ttu-id="8afe2-134">사용 하 여는 <xref:System.Net.HttpListener.BeginGetContext%2A> 메서드를 들어오는 각 요청에 대해 호출 되는 응용 프로그램 정의 방법을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-134">Use the <xref:System.Net.HttpListener.BeginGetContext%2A> method to specify an application-defined method to be called for each incoming request.</span></span> <span data-ttu-id="8afe2-135">이 메서드 내에서 호출 된 <xref:System.Net.HttpListener.EndGetContext%2A> 메서드를 가져오는 요청 처리 하 고 응답 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-135">Within that method, call the <xref:System.Net.HttpListener.EndGetContext%2A> method to obtain the request, process it, and respond.</span></span>
  
 <span data-ttu-id="8afe2-136">두 모델에서 들어오는 요청을 사용 하 여 액세스 됩니다는 <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=nameWithType> 속성 및가 나타내는 <xref:System.Net.HttpListenerRequest> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-136">In either model, incoming requests are accessed using the <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=nameWithType> property and are represented by <xref:System.Net.HttpListenerRequest> objects.</span></span> <span data-ttu-id="8afe2-137">마찬가지로, 응답을 통해 액세스는 <xref:System.Net.HttpListenerContext.Response%2A?displayProperty=nameWithType> 속성 및가 나타내는 <xref:System.Net.HttpListenerResponse> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-137">Similarly, responses are accessed using the <xref:System.Net.HttpListenerContext.Response%2A?displayProperty=nameWithType> property and are represented by <xref:System.Net.HttpListenerResponse> objects.</span></span> <span data-ttu-id="8afe2-138">이러한 개체는 일부 기능을 공유는 <xref:System.Net.HttpWebRequest> 및 <xref:System.Net.HttpWebResponse> 개체가 아니라 두 번째 개체와 함께에서 사용할 수 없습니다 <xref:System.Net.HttpListener> 클라이언트, 하지 서버, 동작을 구현 하므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-138">These objects share some functionality with the <xref:System.Net.HttpWebRequest> and <xref:System.Net.HttpWebResponse> objects, but the latter objects cannot be used in conjunction with <xref:System.Net.HttpListener> because they implement client, not server, behaviors.</span></span>
  
 <span data-ttu-id="8afe2-139"><xref:System.Net.HttpListener> 클라이언트 인증을 요구할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-139">An <xref:System.Net.HttpListener> can require client authentication.</span></span> <span data-ttu-id="8afe2-140">인증을 위해 사용 하 여 특정 스키마를 지정 하거나 또는 사용할 체계를 결정 하는 대리자를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-140">You can either specify a particular scheme to use for authentication, or you can specify a delegate that determines the scheme to use.</span></span> <span data-ttu-id="8afe2-141">특정 형식의 인증 클라이언트의 id에 대 한 정보를 요구 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-141">You must require some form of authentication to obtain information about the client's identity.</span></span> <span data-ttu-id="8afe2-142">자세한 내용은 참조는 <xref:System.Net.HttpListenerContext.User%2A>, <xref:System.Net.HttpListener.AuthenticationSchemes%2A>, 및 <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-142">For additional information, see the <xref:System.Net.HttpListenerContext.User%2A>, <xref:System.Net.HttpListener.AuthenticationSchemes%2A>, and <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> properties.</span></span>
  
> [!NOTE]
> <span data-ttu-id="8afe2-143">만드는 경우는 <xref:System.Net.HttpListener> https를 사용 하 여 선택 해야 서버 인증서를 해당 수신기에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-143">If you create an <xref:System.Net.HttpListener> using https, you must select a Server Certificate for that listener.</span></span> <span data-ttu-id="8afe2-144">그렇지 않은 경우는 <xref:System.Net.HttpWebRequest> 이 쿼리 <xref:System.Net.HttpListener> 연결의 예기치 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-144">Otherwise, an <xref:System.Net.HttpWebRequest> query of this <xref:System.Net.HttpListener> will fail with an unexpected close of the connection.</span></span>
  
> [!NOTE]
> <span data-ttu-id="8afe2-145">네트워크 셸 (netsh.exe)를 사용 하 여 서버 인증서 및 다른 수신기 옵션을 구성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-145">You can configure Server Certificates and other listener options by using Network Shell (netsh.exe).</span></span> <span data-ttu-id="8afe2-146">참조 [네트워크 셸 (Netsh)](/windows-server/networking/technologies/netsh/netsh) 내용을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-146">See [Network Shell (Netsh)](/windows-server/networking/technologies/netsh/netsh) for more details.</span></span> <span data-ttu-id="8afe2-147">실행 파일에는 Windows Server 2008 및 Windows Vista 전달 시작 했습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-147">The executable began shipping with Windows Server 2008 and Windows Vista.</span></span>
  
> [!NOTE]
> <span data-ttu-id="8afe2-148">에 대 한 여러 인증 체계를 지정 하는 경우는 <xref:System.Net.HttpListener>, 수신기에서 다음과 같은 순서로 클라이언트 즐길 수: `Negotiate`, `NTLM`, `Digest`, 차례로 `Basic`합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-148">If you specify multiple authentication schemes for the <xref:System.Net.HttpListener>, the listener will challenge clients in the following order: `Negotiate`, `NTLM`, `Digest`, and then `Basic`.</span></span>
  
   
  
## Examples
 <span data-ttu-id="8afe2-149">다음 코드 예제는 <xref:System.Net.HttpListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-149">The following code example demonstrates using a <xref:System.Net.HttpListener>.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8afe2-150"><see cref="T:System.Net.HttpListener" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-150">Initializes a new instance of the <see cref="T:System.Net.HttpListener" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-151">이 생성자에 의해 반환 되는 인스턴스를 사용 하기 전에 호출 해야 해당 <xref:System.Net.HttpListener.Start%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8afe2-151">Before using the instance returned by this constructor, you must invoke its <xref:System.Net.HttpListener.Start%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8afe2-152">다음 코드 예제는 <xref:System.Net.HttpListener> 새로 만들려면 생성자 <xref:System.Net.HttpListener> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-152">The following code example demonstrates using the <xref:System.Net.HttpListener> constructor to create a new <xref:System.Net.HttpListener> object.</span></span> <span data-ttu-id="8afe2-153">전체 예제를 참조 하십시오.는 <xref:System.Net.HttpListener> 클래스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-153">For the complete example, see the <xref:System.Net.HttpListener> class topic.</span></span>  
  
 [!code-csharp[Net_listener_Basic#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8afe2-154">현재 운영 체제에서 이 클래스를 사용할 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="8afe2-154">This class cannot be used on the current operating system.</span></span> <span data-ttu-id="8afe2-155">이 클래스의 인스턴스를 사용하려면 Windows Server 2003 또는 Windows XP SP2가 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-155">Windows Server 2003 or Windows XP SP2 is required to use instances of this class.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="8afe2-156">참고:이 멤버 응용 프로그램에 네트워크 추적을 사용 하도록 설정 하면 추적 정보를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-156">Note: This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8afe2-157">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-157">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8afe2-158"><see cref="T:System.Net.HttpListener" /> 개체를 즉시 종료하고 현재 큐에 대기 중인 모든 요청을 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-158">Shuts down the <see cref="T:System.Net.HttpListener" /> object immediately, discarding all currently queued requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-159">이 메서드가이 수신기에서 사용 하는 리소스를 모두 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-159">This method disposes of all resources held by this listener.</span></span> <span data-ttu-id="8afe2-160">모든 보류 중인 요청은 완료할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-160">Any pending requests are unable to complete.</span></span>  
  
 <span data-ttu-id="8afe2-161">이 메서드를 호출한 후 나타납니다는 <xref:System.ObjectDisposedException> 이 사용 하려고 하면 <xref:System.Net.HttpListener>합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-161">After calling this method, you will receive an <xref:System.ObjectDisposedException> if you attempt to use this <xref:System.Net.HttpListener>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8afe2-162">다음 코드 예제에서는이 메서드를 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-162">The following code example demonstrates calling this method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="8afe2-163">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-163">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8afe2-164">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-164">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationSchemes">
      <MemberSignature Language="C#" Value="public System.Net.AuthenticationSchemes AuthenticationSchemes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.AuthenticationSchemes AuthenticationSchemes" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.AuthenticationSchemes" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationSchemes As AuthenticationSchemes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::AuthenticationSchemes AuthenticationSchemes { System::Net::AuthenticationSchemes get(); void set(System::Net::AuthenticationSchemes value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.AuthenticationSchemes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8afe2-165">클라이언트 인증에 사용되는 인증 체계를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-165">Gets or sets the scheme used to authenticate clients.</span></span></summary>
        <value><span data-ttu-id="8afe2-166">클라이언트 인증 방법을 나타내는 <see cref="T:System.Net.AuthenticationSchemes" /> 열거형 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-166">A bitwise combination of <see cref="T:System.Net.AuthenticationSchemes" /> enumeration values that indicates how clients are to be authenticated.</span></span> <span data-ttu-id="8afe2-167">기본값은 <see cref="F:System.Net.AuthenticationSchemes.Anonymous" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-167">The default value is <see cref="F:System.Net.AuthenticationSchemes.Anonymous" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-168"><xref:System.Net.HttpListener> 지정된 체계를 사용 하 여 들어오는 모든 요청을 인증 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-168">The <xref:System.Net.HttpListener> uses the specified scheme to authenticate all incoming requests.</span></span> <span data-ttu-id="8afe2-169"><xref:System.Net.HttpListener.GetContext%2A> 및 <xref:System.Net.HttpListener.EndGetContext%2A> 경우에 들어오는 클라이언트 요청이 반환 하는 메서드는 <xref:System.Net.HttpListener> 성공적으로 요청을 인증 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-169">The <xref:System.Net.HttpListener.GetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods return an incoming client request only if the <xref:System.Net.HttpListener> successfully authenticates the request.</span></span>  
  
 <span data-ttu-id="8afe2-170">사용 하 여 성공적으로 인증된 된 클라이언트의 id를 검색할 수는 <xref:System.Net.HttpListenerContext.User%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-170">You can interrogate the identity of a successfully authenticated client by using the <xref:System.Net.HttpListenerContext.User%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="8afe2-171">원하는 경우는 <xref:System.Net.HttpListener> 수신 요청의 특징에 따라 서로 다른 인증 메커니즘을 사용 하도록 개체 (예: 요청 <xref:System.Net.HttpListenerRequest.Url%2A> 또는 <xref:System.Net.HttpListenerRequest.UserHostName%2A> 속성)을 선택 하는 메서드를 구현 해야 합니다는 인증 체계입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-171">If you want an <xref:System.Net.HttpListener> object to use different authentication mechanisms based on characteristics of the requests it receives (for example, the request's <xref:System.Net.HttpListenerRequest.Url%2A> or <xref:System.Net.HttpListenerRequest.UserHostName%2A> property), you must implement a method that chooses the authentication scheme.</span></span> <span data-ttu-id="8afe2-172">이 작업을 수행 하는 방법에 대 한 지침은 참조는 <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> 속성 설명서입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-172">For instructions about how to do this, see the <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> property documentation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8afe2-173">다이제스트를 사용 하도록 설정 하려면이 속성을 설정 하려면 NTLM 또는 협상 필요는 <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-173">To set this property to enable Digest, NTLM, or Negotiate requires the <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8afe2-174">다음 코드 예제는 <xref:System.Net.HttpListener.AuthenticationSchemes%2A> 속성을 통해 인증 체계를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-174">The following code example demonstrates using the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> property to specify an authentication scheme.</span></span>  
  
 [!code-csharp[Net_listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8afe2-175">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-175">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationSchemeSelectorDelegate">
      <MemberSignature Language="C#" Value="public System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationSchemeSelectorDelegate As AuthenticationSchemeSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::AuthenticationSchemeSelector ^ AuthenticationSchemeSelectorDelegate { System::Net::AuthenticationSchemeSelector ^ get(); void set(System::Net::AuthenticationSchemeSelector ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.AuthenticationSchemeSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8afe2-176">클라이언트 인증에 사용되는 프로토콜을 확인하기 위해 호출되는 대리자를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-176">Gets or sets the delegate called to determine the protocol used to authenticate clients.</span></span></summary>
        <value><span data-ttu-id="8afe2-177">인증 프로토콜을 선택하는 데 사용되는 메서드를 호출하는 <see cref="T:System.Net.AuthenticationSchemeSelector" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-177">An <see cref="T:System.Net.AuthenticationSchemeSelector" /> delegate that invokes the method used to select an authentication protocol.</span></span> <span data-ttu-id="8afe2-178">기본값은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-178">The default value is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="8afe2-179">특정 인스턴스에 의해 처리 되는 모든 요청에 사용할 동일한 인증 프로토콜 <xref:System.Net.HttpListener>,이 속성을 설정할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-179">If you want the same authentication protocol to be used for all requests handled by a particular instance of <xref:System.Net.HttpListener>, you do not need to set this property.</span></span> <span data-ttu-id="8afe2-180">모든 클라이언트 요청에 사용할 프로토콜을 지정 하려면 사용 된 <xref:System.Net.HttpListener.AuthenticationSchemes%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-180">To specify a protocol to be used for all client requests, use the <xref:System.Net.HttpListener.AuthenticationSchemes%2A> property.</span></span>  
  
 <span data-ttu-id="8afe2-181">헤더에는 클라이언트가 인증 정보를 지정 하지 않은 경우는 <xref:System.Net.HttpListener> 프로토콜을 결정, 있는 경우 클라이언트를 인증 하는 데 들어오는 각 인증 되지 않은 요청에 대 한 지정 된 대리자를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-181">If the client has not specified authentication information in its headers, the <xref:System.Net.HttpListener> calls the specified delegate for each unauthenticated incoming request to determine which, if any, protocol to use to authenticate the client.</span></span> <span data-ttu-id="8afe2-182"><xref:System.Net.HttpListener.GetContext%2A> 및 <xref:System.Net.HttpListener.EndGetContext%2A> 메서드는 들어오는 요청 경우에만 반환 된 <xref:System.Net.HttpListener> 성공적으로 요청을 인증 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-182">The <xref:System.Net.HttpListener.GetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods return an incoming request only if the <xref:System.Net.HttpListener> successfully authenticated the request.</span></span> <span data-ttu-id="8afe2-183">요청을 인증할 수 없는 경우는 <xref:System.Net.HttpListener> 자동으로 다시 401 응답을 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-183">If a request cannot be authenticated, the <xref:System.Net.HttpListener> automatically sends back a 401 response.</span></span> <span data-ttu-id="8afe2-184">사용 하 여 성공적으로 인증된 된 클라이언트의 id를 가져올 수는 <xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-184">You can get the identity of a successfully authenticated client using the <xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="8afe2-185">인스턴스를 원하는 경우 응용 프로그램 관련 메서드는 인증 프로토콜 선택에 위임 하는 기능은 유용 <xref:System.Net.HttpListener> (수신 요청의 특징에 따라 서로 다른 인증 프로토콜을 사용 하도록 예를 들어 요청의 <xref:System.Net.HttpListenerRequest.Url%2A> 또는 <xref:System.Net.HttpListenerRequest.UserHostAddress%2A> 속성).</span><span class="sxs-lookup"><span data-stu-id="8afe2-185">The ability to delegate the choice of authentication protocol to an application-specific method is useful if you want an instance of <xref:System.Net.HttpListener> to use different authentication protocols depending on the characteristics of the requests it receives (for example, the request's <xref:System.Net.HttpListenerRequest.Url%2A> or <xref:System.Net.HttpListenerRequest.UserHostAddress%2A> property).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8afe2-186">다이제스트를 사용 하도록 설정 하려면이 속성을 설정 하려면 NTLM 또는 협상 필요는 <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-186">To set this property to enable Digest, NTLM, or Negotiate requires the <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8afe2-187">다음 코드 예제에서는이 속성의 값을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-187">The following code example sets the value of this property.</span></span>  
  
 [!code-csharp[NclListener#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#2)]
 [!code-vb[NclListener#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#2)]  
  
 <span data-ttu-id="8afe2-188">다음 코드 예제에서 호출 되는 메서드의 구현을 제공는 <xref:System.Net.AuthenticationSchemeSelector> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-188">The following code example provides an implementation of a method invoked by an <xref:System.Net.AuthenticationSchemeSelector> delegate.</span></span>  
  
 [!code-csharp[NclListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#1)]
 [!code-vb[NclListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8afe2-189">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-189">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginGetContext">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginGetContext (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginGetContext(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginGetContext (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginGetContext(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="8afe2-190">클라이언트 요청을 사용할 수 있을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-190">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when a client request is available.</span></span></param>
        <param name="state"><span data-ttu-id="8afe2-191">작업에 대한 정보가 들어 있는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-191">A user-defined object that contains information about the operation.</span></span> <span data-ttu-id="8afe2-192">이 개체는 작업이 완료되면 <c>콜백</c> 대리자에 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-192">This object is passed to the <c>callback</c> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="8afe2-193">들어오는 요청의 비동기 검색을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-193">Begins asynchronously retrieving an incoming request.</span></span></summary>
        <returns><span data-ttu-id="8afe2-194">비동기 작업의 상태를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-194">An <see cref="T:System.IAsyncResult" /> object that indicates the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-195"><xref:System.Net.HttpListener.BeginGetContext%2A> 메서드는 들어오는 클라이언트 요청을 수신 하는 비동기 (비블로킹) 호출을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-195">The <xref:System.Net.HttpListener.BeginGetContext%2A> method begins an asynchronous (non-blocking) call to receive incoming client requests.</span></span> <span data-ttu-id="8afe2-196">이 메서드를 호출 하기 전에 호출 해야 합니다는 <xref:System.Net.HttpListener.Start%2A> 메서드 수신 하기 위해 URI 문자열을 추가 하 여 하나 이상의 식별자 URI (Uniform Resource) 접두사를 추가 하 고는 <xref:System.Net.HttpListenerPrefixCollection> 에서 반환 되는 <xref:System.Net.HttpListener.Prefixes%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-196">Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one Uniform Resource Identifier (URI) prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property.</span></span>  
  
 <span data-ttu-id="8afe2-197">호출 하 여 비동기 작업을 완료 해야는 <xref:System.Net.HttpListener.EndGetContext%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8afe2-197">The asynchronous operation must be completed by calling the <xref:System.Net.HttpListener.EndGetContext%2A> method.</span></span> <span data-ttu-id="8afe2-198">메서드는 일반적으로 `callback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-198">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="8afe2-199">작업이 완료 될 때이 메서드를 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-199">This method does not block while the operation completes.</span></span> <span data-ttu-id="8afe2-200">작업이 완료 될 때까지 들어오는 요청과 블록을 가져오려면 호출에서 <xref:System.Net.HttpListener.GetContext%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8afe2-200">To get an incoming request and block until the operation completes, call the <xref:System.Net.HttpListener.GetContext%2A> method.</span></span>  
  
 <span data-ttu-id="8afe2-201">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="8afe2-201">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8afe2-202">다음 코드 예제는 <xref:System.Net.HttpListener.BeginGetContext%2A> 들어오는 클라이언트 요청을 처리 하는 콜백 메서드를 지정 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="8afe2-202">The following code example demonstrates using the <xref:System.Net.HttpListener.BeginGetContext%2A> method to specify a callback method that will handle incoming client requests.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
  
 <span data-ttu-id="8afe2-203">다음 코드 예제에서는 콜백 메서드를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-203">The following code example implements a callback method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException"><span data-ttu-id="8afe2-204">Win32 함수 호출이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="8afe2-204">A Win32 function call failed.</span></span> <span data-ttu-id="8afe2-205">예외의 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 속성을 검토하여 예외의 원인을 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-205">Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8afe2-206">이 개체가 시작되지 않았거나 현재 중지된 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-206">This object has not been started or is currently stopped.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8afe2-207">이 개체가 닫혀 있는 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-207">This object is closed.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="8afe2-208">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-208">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8afe2-209">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-209">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8afe2-210"><see cref="T:System.Net.HttpListener" />를 종료합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-210">Shuts down the <see cref="T:System.Net.HttpListener" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-211">이 메서드를 호출한 후 더 이상 사용할 수는 <xref:System.Net.HttpListener> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-211">After calling this method, you can no longer use the <xref:System.Net.HttpListener> object.</span></span> <span data-ttu-id="8afe2-212">일시적으로 일시 중지 하는 <xref:System.Net.HttpListener> 개체를 가져오려면는 <xref:System.Net.HttpListener.Stop%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8afe2-212">To temporarily pause an <xref:System.Net.HttpListener> object, use the <xref:System.Net.HttpListener.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="8afe2-213">이 메서드 종료 다운은 <xref:System.Net.HttpListener> 대기 중인된 요청을 처리 하지 않고 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-213">This method shut downs the <xref:System.Net.HttpListener> object without processing queued requests.</span></span> <span data-ttu-id="8afe2-214">모든 보류 중인 요청은 완료할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-214">Any pending requests are unable to complete.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8afe2-215">다음 코드 예제에서는이 메서드를 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-215">The following code example demonstrates calling this method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="8afe2-216">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-216">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8afe2-217">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-217">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DefaultServiceNames">
      <MemberSignature Language="C#" Value="public System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.DefaultServiceNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultServiceNames As ServiceNameCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Authentication::ExtendedProtection::ServiceNameCollection ^ DefaultServiceNames { System::Security::Authentication::ExtendedProtection::ServiceNameCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExtendedProtection.ServiceNameCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8afe2-218">등록된 접두사로 확인되는 SPN(서비스 공급자 이름) 기본 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-218">Gets a default list of Service Provider Names (SPNs) as determined by registered prefixes.</span></span></summary>
        <value><span data-ttu-id="8afe2-219">SPN 목록이 들어 있는 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-219">A <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> that contains a list of SPNs.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-220"><xref:System.Net.HttpListener.DefaultServiceNames%2A> 속성은 확장 된 보호를 제공 하려면 Windows 통합된 인증 함께 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-220">The <xref:System.Net.HttpListener.DefaultServiceNames%2A> property is used with integrated Windows authentication to provide extended protection.</span></span> <span data-ttu-id="8afe2-221">Spn 목록에서 초기화 되는 <xref:System.Net.HttpListener.Prefixes%2A> 속성에 액세스 하 고 새로운 접두사에 추가 될 때의 선택을 취소는 <xref:System.Net.HttpListener.Prefixes%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-221">The list of SPNs is initialized from the <xref:System.Net.HttpListener.Prefixes%2A> property when accessed and cleared when new prefixes are added to the <xref:System.Net.HttpListener.Prefixes%2A> property.</span></span>  
  
 <span data-ttu-id="8afe2-222"><xref:System.Net.HttpListener.DefaultServiceNames%2A> 속성은 응용 프로그램 설정 하지 않는 경우 사용 된 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames%2A> 해당 확장 된 보호 정책에 대 한 속성.</span><span class="sxs-lookup"><span data-stu-id="8afe2-222">The <xref:System.Net.HttpListener.DefaultServiceNames%2A> property is used if an application doesn't set the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames%2A> property on its extended protection policy.</span></span>  
  
 <span data-ttu-id="8afe2-223"><xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection> 으로 검색 되는 <xref:System.Net.HttpListener.DefaultServiceNames%2A> 속성에서 작성 되는 <xref:System.Net.HttpListener.Prefixes%2A> 다음 규칙에 따라 속성:</span><span class="sxs-lookup"><span data-stu-id="8afe2-223">The <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection> that is retrieved with the <xref:System.Net.HttpListener.DefaultServiceNames%2A> property is built from the <xref:System.Net.HttpListener.Prefixes%2A> property according to the following rules:</span></span>  
  
1.  <span data-ttu-id="8afe2-224">호스트 이름이 경우 "+", "*", 또는 IPv4 또는 IPv6 리터럴 (같음 "\*" 하지만 특정 로컬 인터페이스에 제한 된), 다음 SPN이 추가:</span><span class="sxs-lookup"><span data-stu-id="8afe2-224">If the hostname is "+", "*", or an IPv4 or IPv6 literal (equivalent to "\*" but restricted to a specific local interface), the following SPN is added:</span></span>  
  
 <span data-ttu-id="8afe2-225">`"HTTP/"` 또한 컴퓨터의 정규화 된 도메인 이름.</span><span class="sxs-lookup"><span data-stu-id="8afe2-225">`"HTTP/"` plus the fully qualified domain name of the computer.</span></span>  
  
1.  <span data-ttu-id="8afe2-226">호스트 이름 (도메인 또는 하위 도메인) 점 없음 들어 있는 경우는 하려고 DNS를 사용 하 여 정규화 된 도메인 이름 확인 (동일한 동작에서 사용 하는 <xref:System.Net.HttpWebRequest>).</span><span class="sxs-lookup"><span data-stu-id="8afe2-226">If the hostname contains no dots (no domains or subdomains), an attempt is made to resolve the fully-qualified domain name using DNS (the same behavior used by <xref:System.Net.HttpWebRequest>).</span></span> <span data-ttu-id="8afe2-227">정규화 된 도메인 이름을 확인할 수, Spn은 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-227">If the fully-qualified domain name can be resolved, the following SPNs are added:</span></span>  
  
 <span data-ttu-id="8afe2-228">`"HTTP/"` 또한 호스트 이름 (약식 이름)입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-228">`"HTTP/"` plus the hostname (the short name).</span></span>  
  
 <span data-ttu-id="8afe2-229">`"HTTP/"` 또한 호스트 이름에 대 한 정규화 된 도메인 이름.</span><span class="sxs-lookup"><span data-stu-id="8afe2-229">`"HTTP/"` plus the fully qualified domain name for the hostname.</span></span>  
  
1.  <span data-ttu-id="8afe2-230">호스트 이름을 점이 포함 되지 않으며 (도메인 또는 하위 도메인) 정규화 된 도메인 이름을 확인할 수 없으면 다음 SPN 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-230">If the hostname contains not dots (no domains or subdomains) and a fully-qualified domain name can't be resolved, the following SPN is added:</span></span>  
  
 <span data-ttu-id="8afe2-231">`"HTTP/"` 또한 호스트 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-231">`"HTTP/"` plus the hostname.</span></span>  
  
1.  <span data-ttu-id="8afe2-232">호스트 이름에 점 (도메인 또는 하위 도메인)를 포함 하는 경우 다음 SPN이 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-232">If the hostname contains dots (domains or subdomains), the following SPN is added:</span></span>  
  
 <span data-ttu-id="8afe2-233">`"HTTP/"` 또한 호스트 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-233">`"HTTP/"` plus the hostname.</span></span>  
  
 <span data-ttu-id="8afe2-234"><xref:System.Net.HttpListener.DefaultServiceNames%2A> 속성을 사용자 지정 목록이 없는 제공 하는 경우 인증에 사용 되는 기본 spn 목록을 검토 하려면 응용 프로그램에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-234">The <xref:System.Net.HttpListener.DefaultServiceNames%2A> property can be used by an application to review the list of default SPNs which will be used for authentication if no custom list is supplied.</span></span> <span data-ttu-id="8afe2-235">응용 프로그램 중 하나를 사용 하 여 추가할 수 있습니다 다른 Spn이 필요 하지만 여 <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8afe2-235">If other SPNs are needed, an application can add them using one of the <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge%2A> methods.</span></span>  
  
 <span data-ttu-id="8afe2-236">확장 된 보호를 사용 하 여 스푸핑될 수 있으므로 요청된 된 URL에 따라 정책 결정을 내릴 때 안전 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-236">It is not safe when using extended protection to make policy decisions based on the requested URL, since this can be spoofed.</span></span> <span data-ttu-id="8afe2-237">응용 프로그램에 사용 해야 합니다는 <xref:System.Net.HttpListenerRequest.LocalEndPoint%2A> 또는 <xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A> 속성 이러한 정책 결정을 내릴 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-237">Rather, applications should rely on the <xref:System.Net.HttpListenerRequest.LocalEndPoint%2A> or <xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A> properties to make such policy decisions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="EndGetContext">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerContext EndGetContext (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.HttpListenerContext EndGetContext(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndGetContext (asyncResult As IAsyncResult) As HttpListenerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::HttpListenerContext ^ EndGetContext(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="8afe2-238">비동기 작업을 시작할 때 가져온 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-238">An <see cref="T:System.IAsyncResult" /> object that was obtained when the asynchronous operation was started.</span></span></param>
        <summary><span data-ttu-id="8afe2-239">들어오는 클라이언트 요청을 검색하는 비동기 작업을 완료합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-239">Completes an asynchronous operation to retrieve an incoming client request.</span></span></summary>
        <returns><span data-ttu-id="8afe2-240">클라이언트 요청을 나타내는 <see cref="T:System.Net.HttpListenerContext" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-240">An <see cref="T:System.Net.HttpListenerContext" /> object that represents the client request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-241"><xref:System.Net.HttpListener.EndGetContext%2A> 메서드는, 일반적으로 가져오려면 대리자를 호출 하는 응용 프로그램에서 정의 된 콜백 메서드 내에서 <xref:System.Net.HttpListenerContext> 들어오는 클라이언트 요청 및 해당 응답이 포함 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-241">The <xref:System.Net.HttpListener.EndGetContext%2A> method is called, usually within an application-defined callback method invoked by a delegate, to obtain the <xref:System.Net.HttpListenerContext> object that contains an incoming client request and its associated response.</span></span> <span data-ttu-id="8afe2-242">이 메서드를 호출 하 여 이전에 시작 하는 작업을 완료 된 <xref:System.Net.HttpListener.BeginGetContext%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8afe2-242">This method completes an operation previously started by calling the <xref:System.Net.HttpListener.BeginGetContext%2A> method.</span></span> <span data-ttu-id="8afe2-243">작업이 완료 되지 않은 경우이 메서드는 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-243">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="8afe2-244">호출 하기 때문에 <xref:System.Net.HttpListener.EndGetContext%2A> 메서드를 사용 하려면는 <xref:System.Net.HttpListener> 개체를이 개체는 일반적으로 전달 하 여 콜백 메서드로 전달 된 상태 개체를 사용 하는 <xref:System.Net.HttpListener.BeginGetContext%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8afe2-244">Because calling the <xref:System.Net.HttpListener.EndGetContext%2A> method requires the <xref:System.Net.HttpListener> object, this object is typically passed into a callback method by using the state object passed into the <xref:System.Net.HttpListener.BeginGetContext%2A> method.</span></span> <span data-ttu-id="8afe2-245">사용 하 여이 상태 개체를 가져올 수 있습니다는 <xref:System.IAsyncResult.AsyncState%2A> 의 속성은 `asyncResult` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-245">You can obtain this state object by using the <xref:System.IAsyncResult.AsyncState%2A> property of the `asyncResult` object.</span></span>  
  
 <span data-ttu-id="8afe2-246">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="8afe2-246">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8afe2-247">다음 코드 예제에서는 호출 하는 콜백 메서드의 구현을 보여 줍니다.는 <xref:System.Net.HttpListener.EndGetContext%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8afe2-247">The following code example shows the implementation of a callback method that calls the <xref:System.Net.HttpListener.EndGetContext%2A> method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8afe2-248"><see cref="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> 메서드를 호출하여 <paramref name="asyncResult" />를 가져오지 못한 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-248"><paramref name="asyncResult" /> was not obtained by calling the <see cref="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="8afe2-249"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-249"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8afe2-250"><see cref="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" /> 메서드가 지정된 <paramref name="asyncResult" /> 개체에 대해 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-250">The <see cref="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" /> method was already called for the specified <paramref name="asyncResult" /> object.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8afe2-251">이 개체가 닫혀 있는 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-251">This object is closed.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="8afe2-252">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-252">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8afe2-253">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-253">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProtectionPolicy">
      <MemberSignature Language="C#" Value="public System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtendedProtectionPolicy As ExtendedProtectionPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ ExtendedProtectionPolicy { System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ get(); void set(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("not used anywhere in the implementation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8afe2-254">세션에 대한 확장 보호에 사용할 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-254">Get or set the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> to use for extended protection for a session.</span></span></summary>
        <value><span data-ttu-id="8afe2-255">확장 보호에 사용할 정책을 지정하는 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-255">A <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that specifies the policy to use for extended protection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-256"><xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> 속성은 확장 된 보호를 제공 하려면 Windows 통합된 인증 함께 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-256">The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property is used with integrated Windows authentication to provide extended protection.</span></span> <span data-ttu-id="8afe2-257"><xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> 속성의 전체에 대 한 확장된 보호 정책 구성할 수 있습니다. <xref:System.Net.HttpListener> 세션입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-257">The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property allows the configuration of the extended protection policy for the whole <xref:System.Net.HttpListener> session.</span></span> <span data-ttu-id="8afe2-258"><xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> 속성을 사용 하면 각 개별 요청에 대 한 확장된 보호 정책 구성 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-258">The <xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> property allows the configuration of the extended protection policy for each individual request.</span></span>  
  
 <span data-ttu-id="8afe2-259"><xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> 속성은 `null`여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-259">The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> property must be `null`.</span></span> <span data-ttu-id="8afe2-260"><xref:System.Net.HttpListener> 인스턴스 하나 있는 경우 자체 TLS 세션에서 직접는 토큰 CBT (채널 바인딩)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-260">The <xref:System.Net.HttpListener> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8afe2-261"><see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> 속성을 설정하려고 했지만 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 속성이 <see langword="null" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-261">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> property, but the <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> property was not <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8afe2-262"><see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> 속성을 <see langword="null" />로 설정하려고 한 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-262">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> property to <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8afe2-263"><see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> 메서드가 이미 호출된 후 <see cref="M:System.Net.HttpListener.Start" /> 속성을 설정하려고 한 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-263">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> property after the <see cref="M:System.Net.HttpListener.Start" /> method was already called.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8afe2-264">이 개체가 닫혀 있는 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-264">This object is closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8afe2-265"><see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement" /> 속성은 확장된 보호를 지원하지 않는 플랫폼에서 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" />로 설정되었습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-265">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement" /> property was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="P:System.Net.HttpListener.DefaultServiceNames" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="ExtendedProtectionSelectorDelegate">
      <MemberSignature Language="C#" Value="public System.Net.HttpListener.ExtendedProtectionSelector ExtendedProtectionSelectorDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListener/ExtendedProtectionSelector ExtendedProtectionSelectorDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtendedProtectionSelectorDelegate As HttpListener.ExtendedProtectionSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListener::ExtendedProtectionSelector ^ ExtendedProtectionSelectorDelegate { System::Net::HttpListener::ExtendedProtectionSelector ^ get(); void set(System::Net::HttpListener::ExtendedProtectionSelector ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListener+ExtendedProtectionSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8afe2-266">각 요청에 사용할 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />를 확인하기 위해 호출되는 대리자를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-266">Get or set the delegate called to determine the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> to use for each request.</span></span></summary>
        <value><span data-ttu-id="8afe2-267">확장 보호에 사용할 정책을 지정하는 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-267">A <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that specifies the policy to use for extended protection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-268"><xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> 속성은 확장 된 보호를 제공 하려면 Windows 통합된 인증 함께 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-268">The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property is used with integrated Windows authentication to provide extended protection.</span></span> <span data-ttu-id="8afe2-269"><xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> 속성의 전체에 대 한 확장된 보호 정책 구성할 수 있습니다. <xref:System.Net.HttpListener> 세션입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-269">The <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> property allows the configuration of the extended protection policy for the whole <xref:System.Net.HttpListener> session.</span></span> <span data-ttu-id="8afe2-270"><xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> 속성이 개별 요청에 따라 확장 된 보호 정책의 구성을 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-270">The <xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A> property allows the configuration of the extended protection policy per individual request.</span></span>  
  
 <span data-ttu-id="8afe2-271"><xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> 속성은 `null`여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-271">The <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> property must be `null`.</span></span> <span data-ttu-id="8afe2-272"><xref:System.Net.HttpListener> 인스턴스 하나 있는 경우 자체 TLS 세션에서 직접는 토큰 CBT (채널 바인딩)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-272">The <xref:System.Net.HttpListener> instance gets the Channel Binding Token (CBT) directly from its own TLS session if there is one.</span></span>  
  
 <span data-ttu-id="8afe2-273">각 요청에 대 한 대리자 설정을 선택할 수 있는 <xref:System.Net.HttpListener> 인스턴스에서 확장 된 보호 기능을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-273">For each request, the delegate can choose the settings that the <xref:System.Net.HttpListener> instance will use to provide extended protection.</span></span>  
  
 <span data-ttu-id="8afe2-274">대리자를 반환 하는 경우 `null` 이 속성에 대 한이 나타냅니다는 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy> 있는 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 속성이로 설정 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-274">If a delegate returns `null` for this property, this represents a <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy> which the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> property set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8afe2-275"><see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 속성을 설정하려고 했지만 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 속성이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-275">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property, but the <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> property must be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8afe2-276"><see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 속성을 <see langword="null" />로 설정하려고 한 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-276">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property to <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8afe2-277"><see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 메서드가 이미 호출된 후 <see cref="M:System.Net.HttpListener.Start" /> 속성을 설정하려고 한 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-277">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property after the <see cref="M:System.Net.HttpListener.Start" /> method was already called.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8afe2-278">이 개체가 닫혀 있는 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-278">This object is closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8afe2-279">확장 보호를 지원하지 않는 플랫폼에 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 속성을 설정하려고 했습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-279">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="P:System.Net.HttpListener.DefaultServiceNames" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerContext GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.HttpListenerContext GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.GetContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContext () As HttpListenerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::HttpListenerContext ^ GetContext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8afe2-280">들어오는 요청을 기다리고 요청을 받으면 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-280">Waits for an incoming request and returns when one is received.</span></span></summary>
        <returns><span data-ttu-id="8afe2-281">클라이언트 요청을 나타내는 <see cref="T:System.Net.HttpListenerContext" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-281">An <see cref="T:System.Net.HttpListenerContext" /> object that represents a client request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-282">이 메서드를 호출 하기 전에 호출 해야 합니다는 <xref:System.Net.HttpListener.Start%2A> 메서드를 URI 문자열을 추가 하 여 수신할 URI 접두사를 하나 이상 추가 하 고는 <xref:System.Net.HttpListenerPrefixCollection> 에서 반환 되는 <xref:System.Net.HttpListener.Prefixes%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-282">Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one URI prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property.</span></span> <span data-ttu-id="8afe2-283">에 대 한 자세한 설명은 접두사, 참조는 <xref:System.Net.HttpListener> 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-283">For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.</span></span>  
  
 <span data-ttu-id="8afe2-284">이 메서드는 들어오는 요청을 기다리는 동안 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-284">This method blocks while waiting for an incoming request.</span></span> <span data-ttu-id="8afe2-285">들어오는 요청을 응용 프로그램을 차단 하지 않도록 (별도 스레드에서 비동기적) 처리 하려면 사용 된 <xref:System.Net.HttpListener.BeginGetContext%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8afe2-285">If you want incoming requests to be processed asynchronously (on separate threads) so that your application does not block, use the <xref:System.Net.HttpListener.BeginGetContext%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8afe2-286">다음 코드 예제에서는이 메서드를 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-286">The following code example demonstrates calling this method.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException"><span data-ttu-id="8afe2-287">Win32 함수 호출이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="8afe2-287">A Win32 function call failed.</span></span> <span data-ttu-id="8afe2-288">예외의 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 속성을 검토하여 예외의 원인을 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-288">Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8afe2-289">이 개체가 시작되지 않았거나 현재 중지된 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-289">This object has not been started or is currently stopped.</span></span>  
  
 <span data-ttu-id="8afe2-290">또는</span><span class="sxs-lookup"><span data-stu-id="8afe2-290">-or-</span></span>  
  
 <span data-ttu-id="8afe2-291"><see cref="T:System.Net.HttpListener" />에 응답을 보낼 대상 URI(Uniform Resource Identifier) 접두사가 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="8afe2-291">The <see cref="T:System.Net.HttpListener" /> does not have any Uniform Resource Identifier (URI) prefixes to respond to.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8afe2-292">이 개체가 닫혀 있는 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-292">This object is closed.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="8afe2-293">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-293">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8afe2-294">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-294">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetContextAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt; GetContextAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.HttpListenerContext&gt; GetContextAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.GetContextAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextAsync () As Task(Of HttpListenerContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::HttpListenerContext ^&gt; ^ GetContextAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8afe2-295">들어오는 요청을 비동기 작업으로 대기합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-295">Waits for an incoming request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="8afe2-296"><see cref="T:System.Threading.Tasks.Task`1" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-296">Returns <see cref="T:System.Threading.Tasks.Task`1" />.</span></span>  
  
 <span data-ttu-id="8afe2-297">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-297">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="8afe2-298">작업 개체의 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성은 클라이언트 요청을 나타내는 <see cref="T:System.Net.HttpListenerContext" /> 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-298">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns an <see cref="T:System.Net.HttpListenerContext" /> object that represents a client request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-299">이 작업을 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-299">This operation will not block.</span></span> <span data-ttu-id="8afe2-300">반환 된 <xref:System.Threading.Tasks.Task%601> 개체는 들어오는 요청을 받을 때 완료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-300">The returned <xref:System.Threading.Tasks.Task%601> object will complete when the incoming request has been received.</span></span>  
  
 <span data-ttu-id="8afe2-301">이 메서드를 호출 하기 전에 호출 해야 합니다는 <xref:System.Net.HttpListener.Start%2A> 메서드를 URI 문자열을 추가 하 여 수신할 URI 접두사를 하나 이상 추가 하 고는 <xref:System.Net.HttpListenerPrefixCollection> 에서 반환 되는 <xref:System.Net.HttpListener.Prefixes%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-301">Before calling this method, you must call the <xref:System.Net.HttpListener.Start%2A> method and add at least one URI prefix to listen for by adding the URI strings to the <xref:System.Net.HttpListenerPrefixCollection> returned by the <xref:System.Net.HttpListener.Prefixes%2A> property.</span></span> <span data-ttu-id="8afe2-302">에 대 한 자세한 설명은 접두사, 참조는 <xref:System.Net.HttpListener> 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-302">For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListenerContext" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreWriteExceptions">
      <MemberSignature Language="C#" Value="public bool IgnoreWriteExceptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWriteExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IgnoreWriteExceptions" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreWriteExceptions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreWriteExceptions { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8afe2-303"><see cref="T:System.Boolean" />에서 클라이언트에 응답을 보낼 때 발생하는 예외를 응용 프로그램에서 받을지 여부를 지정하는 <see cref="T:System.Net.HttpListener" /> 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-303">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether your application receives exceptions that occur when an <see cref="T:System.Net.HttpListener" /> sends the response to the client.</span></span></summary>
        <value>
          <span data-ttu-id="8afe2-304">이 <see cref="T:System.Net.HttpListener" />에서 클라이언트에 응답을 보낼 때 발생하는 예외를 반환하지 않아야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-304"><see langword="true" /> if this <see cref="T:System.Net.HttpListener" /> should not return exceptions that occur when sending the response to the client; otherwise <see langword="false" />.</span></span> <span data-ttu-id="8afe2-305">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-305">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-306">이 속성을 설정 `true` 응용 프로그램 경우 각 클라이언트에 성공적으로 응답을 보냈음이 필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-306">Set this property to `true` if your application does not require that a response is successfully sent to each client.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8afe2-307">다음 코드 예제에서는이 속성을 설정 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-307">The following code example demonstrates setting this property.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8afe2-308">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-308">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsListening">
      <MemberSignature Language="C#" Value="public bool IsListening { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsListening" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IsListening" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsListening As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsListening { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8afe2-309"><see cref="T:System.Net.HttpListener" />가 시작되었는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-309">Gets a value that indicates whether <see cref="T:System.Net.HttpListener" /> has been started.</span></span></summary>
        <value>
          <span data-ttu-id="8afe2-310"><see cref="T:System.Net.HttpListener" />가 시작되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-310"><see langword="true" /> if the <see cref="T:System.Net.HttpListener" /> was started; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-311">시작 하는 <xref:System.Net.HttpListener>, 호출 된 <xref:System.Net.HttpListener.Start%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8afe2-311">To start an <xref:System.Net.HttpListener>, call the <xref:System.Net.HttpListener.Start%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8afe2-312">다음 코드 예제에서는 인스턴스 수신 상태를 확인 하려면이 속성을 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-312">The following code example demonstrates using this property to determine the listening state of an instance.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupported">
      <MemberSignature Language="C#" Value="public static bool IsSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsSupported" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IsSupported" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsSupported As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsSupported { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8afe2-313">현재 운영 체제에서 <see cref="T:System.Net.HttpListener" />를 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-313">Gets a value that indicates whether <see cref="T:System.Net.HttpListener" /> can be used with the current operating system.</span></span></summary>
        <value>
          <span data-ttu-id="8afe2-314"><see cref="T:System.Net.HttpListener" />가 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-314"><see langword="true" /> if <see cref="T:System.Net.HttpListener" /> is supported; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-315">이 클래스는 Windows XP SP2 또는 Windows Server 2003 운영 체제를 실행 하는 컴퓨터에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-315">This class is available only on computers running the Windows XP SP2 or Windows Server 2003 operating systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8afe2-316">다음 코드 예제에서는 <xref:System.Net.HttpListener.IsSupported%2A> 속성 검색을 여부는 <xref:System.Net.HttpListener> 개체를 현재 운영 체제와 함께 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-316">The following code example demonstrates the use of the <xref:System.Net.HttpListener.IsSupported%2A> property to detect whether an <xref:System.Net.HttpListener> object can be used with the current operating system.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixes">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerPrefixCollection Prefixes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerPrefixCollection Prefixes" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.Prefixes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Prefixes As HttpListenerPrefixCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerPrefixCollection ^ Prefixes { System::Net::HttpListenerPrefixCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerPrefixCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8afe2-317">이 <see cref="T:System.Net.HttpListener" /> 개체에서 처리하는 URI(Uniform Resource Identifier) 접두사를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-317">Gets the Uniform Resource Identifier (URI) prefixes handled by this <see cref="T:System.Net.HttpListener" /> object.</span></span></summary>
        <value><span data-ttu-id="8afe2-318">이 <see cref="T:System.Net.HttpListener" /> 개체에서 처리하도록 구성된 URI 접두사가 들어 있는 <see cref="T:System.Net.HttpListenerPrefixCollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-318">An <see cref="T:System.Net.HttpListenerPrefixCollection" /> that contains the URI prefixes that this <see cref="T:System.Net.HttpListener" /> object is configured to handle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-319">접두사는 정규 형식.</span><span class="sxs-lookup"><span data-stu-id="8afe2-319">The prefixes are in canonical form.</span></span> <span data-ttu-id="8afe2-320">에 대 한 자세한 설명은 접두사, 참조는 <xref:System.Net.HttpListener> 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-320">For a detailed description of prefixes, see the <xref:System.Net.HttpListener> class overview.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8afe2-321">다음 코드 예제는 <xref:System.Net.HttpListener.Prefixes%2A> 속성을 가져오고 처리 하는 URI 접두사를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-321">The following code example demonstrates using the <xref:System.Net.HttpListener.Prefixes%2A> property to obtain and print the URI prefixes that are handled.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8afe2-322">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-322">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Realm">
      <MemberSignature Language="C#" Value="public string Realm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Realm" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.Realm" />
      <MemberSignature Language="VB.NET" Value="Public Property Realm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Realm { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8afe2-323">이 <see cref="T:System.Net.HttpListener" /> 개체와 연결된 영역 또는 리소스 파티션을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-323">Gets or sets the realm, or resource partition, associated with this <see cref="T:System.Net.HttpListener" /> object.</span></span></summary>
        <value><span data-ttu-id="8afe2-324"><see cref="T:System.String" /> 개체와 연결된 영역의 이름이 들어 있는 <see cref="T:System.Net.HttpListener" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-324">A <see cref="T:System.String" /> value that contains the name of the realm associated with the <see cref="T:System.Net.HttpListener" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-325">보호 된 리소스; 분할할 때 영역을 사용 하는 서버 각 파티션에 자체 인증 체계 및/또는 권한 부여 데이터베이스가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-325">Servers use realms to partition protected resources; each partition can have its own authentication scheme and/or authorization database.</span></span> <span data-ttu-id="8afe2-326">영역은 기본 및 다이제스트 인증에만 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-326">Realms are used only for basic and digest authentication.</span></span> <span data-ttu-id="8afe2-327">클라이언트가 성공적으로 인증되면 이 인증은 지정된 영역의 모든 리소스에 대해 유효합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-327">After a client successfully authenticates, the authentication is valid for all resources in a given realm.</span></span> <span data-ttu-id="8afe2-328">영역에 대 한 자세한 설명을에서 RFC 2617을 참조 하세요. [ https://www.ietf.org/ ](https://www.ietf.org/)합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-328">For a detailed description of realms, see RFC 2617 at [https://www.ietf.org/](https://www.ietf.org/).</span></span>  
  
 <span data-ttu-id="8afe2-329">인스턴스 <xref:System.Net.HttpListener> 하나의 연결 된 영역에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-329">An instance of <xref:System.Net.HttpListener> has only one associated realm.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8afe2-330">다음 코드 예제에서는 설정 된 <xref:System.Net.HttpListener.Realm%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-330">The following code example demonstrates setting the <xref:System.Net.HttpListener.Realm%2A> property.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8afe2-331">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-331">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8afe2-332">이 인스턴스가 들어오는 요청을 받을 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-332">Allows this instance to receive incoming requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-333">이 메서드를 호출 하기 전에 호출 해야는 <xref:System.Net.HttpListener.GetContext%2A> 또는 <xref:System.Net.HttpListener.BeginGetContext%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="8afe2-333">This method must be called before you call the <xref:System.Net.HttpListener.GetContext%2A> or <xref:System.Net.HttpListener.BeginGetContext%2A> method.</span></span>  
  
 <span data-ttu-id="8afe2-334">시작 된 후 한 <xref:System.Net.HttpListener> 개체를 사용할 수 있습니다는 <xref:System.Net.HttpListener.Stop%2A> 메서드를 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-334">After you have started an <xref:System.Net.HttpListener> object, you can use the <xref:System.Net.HttpListener.Stop%2A> method to stop it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8afe2-335">이 수신기 인스턴스 https를 사용 하는 경우 설치 하 고 서버 인증서를 선택 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-335">If this listener instance uses https, you must install and select a Server Certificate.</span></span> <span data-ttu-id="8afe2-336">그렇지 않은 경우는 <xref:System.Net.HttpWebRequest> 이 쿼리 <xref:System.Net.HttpListener> 연결의 예기치 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-336">Otherwise, an <xref:System.Net.HttpWebRequest> query of this <xref:System.Net.HttpListener> will fail with an unexpected close of the connection.</span></span> <span data-ttu-id="8afe2-337">HttpCfg.exe를 사용 하 여 서버 인증서 및 다른 수신기 옵션을 구성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-337">You can configure Server Certificates and other listener options by using HttpCfg.exe.</span></span> <span data-ttu-id="8afe2-338">참조 [ http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp ](http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp) 내용을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-338">See [http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp](http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp) for more details.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8afe2-339">다음 코드 예제는 <xref:System.Net.HttpListener.Start%2A> 들어오는 요청을 처리를 시작 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="8afe2-339">The following code example demonstrates using the <xref:System.Net.HttpListener.Start%2A> method to begin processing incoming requests.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException"><span data-ttu-id="8afe2-340">Win32 함수 호출이 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="8afe2-340">A Win32 function call failed.</span></span> <span data-ttu-id="8afe2-341">예외의 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 속성을 검토하여 예외의 원인을 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-341">Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8afe2-342">이 개체가 닫혀 있는 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-342">This object is closed.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="8afe2-343">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-343">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8afe2-344">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-344">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8afe2-345">이 인스턴스가 들어오는 요청 받기를 중지하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-345">Causes this instance to stop receiving incoming requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-346">이 인스턴스는 이미 중지 되는 경우이 메서드를 호출 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-346">If this instance is already stopped, calling this method has no effect.</span></span>  
  
 <span data-ttu-id="8afe2-347">중지 한 후 프로그램 <xref:System.Net.HttpListener> 개체를 사용할 수 있습니다는 <xref:System.Net.HttpListener.Start%2A> 메서드를 다시 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-347">After you have stopped an <xref:System.Net.HttpListener> object, you can use the <xref:System.Net.HttpListener.Start%2A> method to restart it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8afe2-348">다음 코드 예제는 <xref:System.Net.HttpListener.Stop%2A> 메서드 들어오는 요청 처리를 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-348">The following code example demonstrates using the <xref:System.Net.HttpListener.Stop%2A> method to stop processing incoming requests.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8afe2-349">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-349">This object has been closed.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="8afe2-350">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-350">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8afe2-351">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-351">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8afe2-352">이 <see cref="T:System.Net.HttpListener" /> 개체에서 보유한 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-352">Releases the resources held by this <see cref="T:System.Net.HttpListener" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-353">응용 프로그램을 사용할지는 <xref:System.Net.HttpListener.Close%2A> 메서드 대신이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-353">Applications should use the <xref:System.Net.HttpListener.Close%2A> method instead of calling this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutManager">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerTimeoutManager TimeoutManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerTimeoutManager TimeoutManager" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.TimeoutManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeoutManager As HttpListenerTimeoutManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerTimeoutManager ^ TimeoutManager { System::Net::HttpListenerTimeoutManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerTimeoutManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8afe2-354">이 <see cref="T:System.Net.HttpListener" /> 인스턴스의 시간 초과 관리자입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-354">The timeout manager for this <see cref="T:System.Net.HttpListener" /> instance.</span></span></summary>
        <value><span data-ttu-id="8afe2-355"><see cref="T:System.Net.HttpListenerTimeoutManager" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-355">Returns <see cref="T:System.Net.HttpListenerTimeoutManager" />.</span></span>  
  
 <span data-ttu-id="8afe2-356">이 <see cref="T:System.Net.HttpListener" /> 인스턴스의 시간 초과 관리자입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-356">The timeout manager for this <see cref="T:System.Net.HttpListener" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-357">시간 초과 관리자는이 대 한 연결 제한 시간 제한을 정의 <xref:System.Net.HttpListener> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="8afe2-357">The timeout manager defines the connection timeout limits for this <xref:System.Net.HttpListener> instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsafeConnectionNtlmAuthentication">
      <MemberSignature Language="C#" Value="public bool UnsafeConnectionNtlmAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnsafeConnectionNtlmAuthentication" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.UnsafeConnectionNtlmAuthentication" />
      <MemberSignature Language="VB.NET" Value="Public Property UnsafeConnectionNtlmAuthentication As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnsafeConnectionNtlmAuthentication { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Support for NTLM needs some loving.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8afe2-358">NTLM이 사용될 때 동일한 TCP(Transmission Control Protocol) 연결을 사용하는 추가 요청을 인증해야 하는지 여부를 제어하는 <see cref="T:System.Boolean" /> 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-358">Gets or sets a <see cref="T:System.Boolean" /> value that controls whether, when NTLM is used, additional requests using the same Transmission Control Protocol (TCP) connection are required to authenticate.</span></span></summary>
        <value>
          <span data-ttu-id="8afe2-359">첫 번째 요청의 <see cref="T:System.Security.Principal.IIdentity" />가 동일한 연결의 후속 요청에 사용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-359"><see langword="true" /> if the <see cref="T:System.Security.Principal.IIdentity" /> of the first request will be used for subsequent requests on the same connection; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8afe2-360">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-360">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8afe2-361">이 속성이로 설정 된 경우 `true` 및 NTLM을 사용 하 여 특정 TCP 연결을 통해 첫 번째 요청은 인증, 인증 정보를 사용 하 여 동일한 TCP 연결을 통한 후속 요청 처리 됩니다 (<xref:System.Security.Principal.IIdentity>)는 초기 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-361">When this property is set to `true` and the first request over a particular TCP connection is authenticated using NTLM, subsequent requests over the same TCP connection are processed using the authentication information (<xref:System.Security.Principal.IIdentity>) of the initial request.</span></span>  
  
 <span data-ttu-id="8afe2-362">인증 프로토콜이 NTLM이 아닌 경우에는 이 속성이 적용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-362">This property has no effect when NTLM is not the authentication protocol.</span></span> <span data-ttu-id="8afe2-363">Negotiate는 인증 프로토콜로 지정 하는 경우이 속성은 NTLM 인증에 사용 되는 실제 프로토콜은 경우에 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-363">When Negotiate is specified as the authentication protocol, this property has an effect only if NTLM is the actual protocol used for authentication.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8afe2-364">이 속성을 설정 하는 동안 `true` 않으므로 성능이 향상 되지만 <xref:System.Net.HttpListener> 하지 송신 추가 NTLM 인증 요구, 필요로 하지 않는 인증 정보를 제공 하는 모든 요청에 보안 위험이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-364">While setting this property to `true` increases performance because the <xref:System.Net.HttpListener> does not send additional NTLM authentication challenges, there is a security risk in not requiring all requests to provide authentication information.</span></span> <span data-ttu-id="8afe2-365">따라서 성능 향상과 보안 위험 간의 관계를 신중히 고려해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-365">You must determine whether the increase in performance is worth this risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8afe2-366">다음 코드 예제에서는이 속성을 설정 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="8afe2-366">The following code example demonstrates setting this property.</span></span>  
  
 [!code-csharp[Net_Listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8afe2-367">이 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="8afe2-367">This object has been closed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>