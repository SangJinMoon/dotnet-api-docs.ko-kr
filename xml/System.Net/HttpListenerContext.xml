<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HttpListenerContext.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5efb0b67d2b48b7fb574b175daf2a6cd4826f78c4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">efb0b67d2b48b7fb574b175daf2a6cd4826f78c4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.HttpListenerContext">
          <source>Provides access to the request and response objects used by the <ph id="ph1">&lt;see cref="T:System.Net.HttpListener" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.HttpListener" /&gt;</ph> 클래스에서 사용되는 요청 및 응답 개체에 액세스할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Net.HttpListenerContext">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.HttpListenerContext">
          <source>This class provides the information related to a client's Hypertext Transfer Protocol (HTTP) request being processed by an <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> object.</source>
          <target state="translated">에 의해 처리 되는 클라이언트의 하이퍼텍스트 전송 프로토콜 (HTTP) 요청에 관련 된 정보를 제공 하는이 클래스는 <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.HttpListenerContext">
          <source>This class also has methods that allow an <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> object to accept a WebSocket connection.</source>
          <target state="translated">이 클래스에 사용할 수 있는 메서드는 <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> WebSocket 연결을 허용 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.HttpListenerContext">
          <source>The <ph id="ph1">&lt;xref:System.Net.HttpListener.GetContext%2A&gt;</ph> method returns instances of the <ph id="ph2">&lt;xref:System.Net.HttpListenerContext&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.HttpListener.GetContext%2A&gt;</ph> 의 인스턴스를 반환 하는 메서드는 <ph id="ph2">&lt;xref:System.Net.HttpListenerContext&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.HttpListenerContext">
          <source>To get the object that represents the client request, use the <ph id="ph1">&lt;xref:System.Net.HttpListenerContext.Request%2A&gt;</ph> property.</source>
          <target state="translated">클라이언트 요청을 나타내는 개체를 가져오려면는 <ph id="ph1">&lt;xref:System.Net.HttpListenerContext.Request%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.HttpListenerContext">
          <source>To get the object that represents the response that will be sent to the client by the <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.HttpListenerContext.Response%2A&gt;</ph> property.</source>
          <target state="translated">클라이언트로 전송 될 응답을 나타내는 개체를 가져오려면는 <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph>를 사용 하 여는 <ph id="ph2">&lt;xref:System.Net.HttpListenerContext.Response%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.HttpListenerContext">
          <source>To get user information about the client sending the request, such as its login name and whether it has been authenticated, you can query the properties in the <ph id="ph1">&lt;xref:System.Security.Principal.IPrincipal&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Net.HttpListenerContext.User%2A&gt;</ph> property.</source>
          <target state="translated">로그인 이름 및 그의 인증 여부, 예: 요청을 보내는 클라이언트에 대 한 사용자 정보에 속성을 쿼리할 수는 <ph id="ph1">&lt;xref:System.Security.Principal.IPrincipal&gt;</ph> 에서 반환 된 개체는 <ph id="ph2">&lt;xref:System.Net.HttpListenerContext.User%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.HttpListenerContext">
          <source>Closing an <ph id="ph1">&lt;xref:System.Net.HttpListenerContext&gt;</ph> object sends the response to the client and frees any resources used by the <ph id="ph2">&lt;xref:System.Net.HttpListenerContext&gt;</ph>.</source>
          <target state="translated">닫기는 <ph id="ph1">&lt;xref:System.Net.HttpListenerContext&gt;</ph> 개체 클라이언트에 대 한 응답을 보내고에서 사용 하는 모든 리소스를 해제는 <ph id="ph2">&lt;xref:System.Net.HttpListenerContext&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.HttpListenerContext">
          <source>Aborting an <ph id="ph1">&lt;xref:System.Net.HttpListenerContext&gt;</ph> object discards the response to the client if it has not already been sent, and frees any resources used by the <ph id="ph2">&lt;xref:System.Net.HttpListenerContext&gt;</ph>.</source>
          <target state="translated">중단 된 <ph id="ph1">&lt;xref:System.Net.HttpListenerContext&gt;</ph> 개체에서 사용 하는 모든 리소스를 해제 하 고 전송 되지 않은 이미, 클라이언트에 대 한 응답을 삭제는 <ph id="ph2">&lt;xref:System.Net.HttpListenerContext&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.HttpListenerContext">
          <source>After closing or aborting an <ph id="ph1">&lt;xref:System.Net.HttpListenerContext&gt;</ph> object, you cannot reference its methods or properties.</source>
          <target state="translated">닫거나 중단 후는 <ph id="ph1">&lt;xref:System.Net.HttpListenerContext&gt;</ph> 개체의 메서드 또는 속성을 참조할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.HttpListenerContext">
          <source>If you do so, you will receive an <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph> exception.</source>
          <target state="translated">이렇게 하면 표시 됩니다는 <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.HttpListenerContext">
          <source>The following code example displays the user information for a client request.</source>
          <target state="translated">다음 코드 예제에서는 클라이언트 요청에 대 한 사용자 정보를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.Net.HttpListenerContext">
          <source>Accept a WebSocket connection as an asynchronous operation.</source>
          <target state="translated">WebSocket 연결을 비동기 작업으로 허용합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)">
          <source>The supported WebSocket sub-protocol.</source>
          <target state="translated">지원되는 WebSocket 하위 프로토콜입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)">
          <source>Accept a WebSocket connection as an asynchronous operation.</source>
          <target state="translated">WebSocket 연결을 비동기 작업으로 허용합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property on the task object returns an <ph id="ph2">&lt;see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /&gt;</ph> object.</source>
          <target state="translated">작업 개체의 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> 속성은 <ph id="ph2">&lt;see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)">
          <source>This operation will not block.</source>
          <target state="translated">이 작업을 차단 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the WebSocket connection has been accepted.</source>
          <target state="translated">반환 된 <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> WebSocket 연결 수락 개체가 완성 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)">
          <source>The size of the receive buffer is 16,385 bytes.</source>
          <target state="translated">수신 버퍼의 크기가 16,385 바이트입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)">
          <source>The WebSocket keep-alive interval is set to the default value of 30,000 (30 seconds).</source>
          <target state="translated">WebSocket 연결 유지 간격 기본값인 30000 (30 초)으로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)">
          <source><ph id="ph1">&lt;paramref name="subProtocol" /&gt;</ph> is an empty string</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="subProtocol" /&gt;</ph>이 빈 문자열인 경우</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)">
          <source><ph id="ph1">&lt;paramref name="subProtocol" /&gt;</ph> contains illegal characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="subProtocol" /&gt;</ph>에 잘못된 문자가 들어 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)">
          <source>An error occurred when sending the response to complete the WebSocket handshake.</source>
          <target state="translated">WebSocket 핸드셰이크를 완료하기 위해 응답을 전송하는 동안 오류가 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
          <source>The supported WebSocket sub-protocol.</source>
          <target state="translated">지원되는 WebSocket 하위 프로토콜입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
          <source>The WebSocket protocol keep-alive interval in milliseconds.</source>
          <target state="translated">WebSocket 프로토콜 연결 유지 간격(밀리초)입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
          <source>Accept a WebSocket connection specifying the supported WebSocket sub-protocol  and WebSocket keep-alive interval as an asynchronous operation.</source>
          <target state="translated">지원되는 WebSocket 하위 프로토콜 및 WebSocket Keep-Alive 간격을 비동기 작업으로 지정하는 WebSocket 연결을 허용합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property on the task object returns an <ph id="ph2">&lt;see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /&gt;</ph> object.</source>
          <target state="translated">작업 개체의 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> 속성은 <ph id="ph2">&lt;see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
          <source>This operation will not block.</source>
          <target state="translated">이 작업을 차단 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the WebSocket connection has been accepted.</source>
          <target state="translated">반환 된 <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> WebSocket 연결 수락 개체가 완성 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
          <source>The size of the receive buffer is 16,385 bytes.</source>
          <target state="translated">수신 버퍼의 크기가 16,385 바이트입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="subProtocol" /&gt;</ph> is an empty string</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="subProtocol" /&gt;</ph>이 빈 문자열인 경우</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="subProtocol" /&gt;</ph> contains illegal characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="subProtocol" /&gt;</ph>에 잘못된 문자가 들어 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="keepAliveInterval" /&gt;</ph> is too small.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keepAliveInterval" /&gt;</ph>가 너무 작습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
          <source>An error occurred when sending the response to complete the WebSocket handshake.</source>
          <target state="translated">WebSocket 핸드셰이크를 완료하기 위해 응답을 전송하는 동안 오류가 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source>The supported WebSocket sub-protocol.</source>
          <target state="translated">지원되는 WebSocket 하위 프로토콜입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source>The receive buffer size in bytes.</source>
          <target state="translated">수신 버퍼의 크기(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source>The WebSocket protocol keep-alive interval in milliseconds.</source>
          <target state="translated">WebSocket 프로토콜 연결 유지 간격(밀리초)입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source>Accept a WebSocket connection specifying the supported WebSocket sub-protocol, receive buffer size, and WebSocket keep-alive interval as an asynchronous operation.</source>
          <target state="translated">지원되는 WebSocket 하위 프로토콜, 수신 버퍼 크기 및 WebSocket 연결 유지 간격을 비동기 작업으로 지정하는 WebSocket 연결을 허용합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property on the task object returns an <ph id="ph2">&lt;see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /&gt;</ph> object.</source>
          <target state="translated">작업 개체의 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> 속성은 <ph id="ph2">&lt;see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source>This operation will not block.</source>
          <target state="translated">이 작업을 차단 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> &gt; object will complete after the WebSocket connection has been accepted.</source>
          <target state="translated">반환 된 <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> &gt; WebSocket 연결 수락 개체 완성 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="subProtocol" /&gt;</ph> is an empty string</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="subProtocol" /&gt;</ph>이 빈 문자열인 경우</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="subProtocol" /&gt;</ph> contains illegal characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="subProtocol" /&gt;</ph>에 잘못된 문자가 들어 있습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="keepAliveInterval" /&gt;</ph> is too small.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keepAliveInterval" /&gt;</ph>가 너무 작습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="receiveBufferSize" /&gt;</ph> is less than 16 bytes</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="receiveBufferSize" /&gt;</ph>가 16바이트보다 작은 경우</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source><ph id="ph1">&lt;paramref name="receiveBufferSize" /&gt;</ph> is greater than 64K bytes.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="receiveBufferSize" /&gt;</ph>가 64K 바이트보다 큰 경우</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
          <source>An error occurred when sending the response to complete the WebSocket handshake.</source>
          <target state="translated">WebSocket 핸드셰이크를 완료하기 위해 응답을 전송하는 동안 오류가 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source>The supported WebSocket sub-protocol.</source>
          <target state="translated">지원되는 WebSocket 하위 프로토콜입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source>The receive buffer size in bytes.</source>
          <target state="translated">수신 버퍼의 크기(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source>The WebSocket protocol keep-alive interval in milliseconds.</source>
          <target state="translated">WebSocket 프로토콜 연결 유지 간격(밀리초)입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source>An internal buffer to use for this operation.</source>
          <target state="translated">이 작업에 사용할 내부 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source>Accept a WebSocket connection specifying the supported WebSocket sub-protocol, receive buffer size, WebSocket keep-alive interval, and the internal buffer as an asynchronous operation.</source>
          <target state="translated">지원되는 WebSocket 하위 프로토콜, 수신 버퍼 크기, WebSocket 연결 유지 간격 및 내부 버퍼를 비동기 작업으로 지정하는 WebSocket 연결을 허용합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property on the task object returns an <ph id="ph2">&lt;see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /&gt;</ph> object.</source>
          <target state="translated">작업 개체의 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> 속성은 <ph id="ph2">&lt;see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source>This operation will not block.</source>
          <target state="translated">이 작업을 차단 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the WebSocket connection has been accepted.</source>
          <target state="translated">반환 된 <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> WebSocket 연결 수락 개체가 완성 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source><ph id="ph1">&lt;paramref name="subProtocol" /&gt;</ph> is an empty string</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="subProtocol" /&gt;</ph>이 빈 문자열인 경우</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source><ph id="ph1">&lt;paramref name="subProtocol" /&gt;</ph> contains illegal characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="subProtocol" /&gt;</ph>에 잘못된 문자가 들어 있습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source><ph id="ph1">&lt;paramref name="keepAliveInterval" /&gt;</ph> is too small.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keepAliveInterval" /&gt;</ph>가 너무 작습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source><ph id="ph1">&lt;paramref name="receiveBufferSize" /&gt;</ph> is less than 16 bytes</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="receiveBufferSize" /&gt;</ph>가 16바이트보다 작은 경우</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source><ph id="ph1">&lt;paramref name="receiveBufferSize" /&gt;</ph> is greater than 64K bytes.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="receiveBufferSize" /&gt;</ph>가 64K 바이트보다 큰 경우</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
          <source>An error occurred when sending the response to complete the WebSocket handshake.</source>
          <target state="translated">WebSocket 핸드셰이크를 완료하기 위해 응답을 전송하는 동안 오류가 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="P:System.Net.HttpListenerContext.Request">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Net.HttpListenerRequest" /&gt;</ph> that represents a client's request for a resource.</source>
          <target state="translated">클라이언트의 리소스 요청을 나타내는 <ph id="ph1">&lt;see cref="T:System.Net.HttpListenerRequest" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.HttpListenerContext.Request">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.HttpListenerRequest" /&gt;</ph> object that represents the client request.</source>
          <target state="translated">클라이언트 요청을 나타내는 <ph id="ph1">&lt;see cref="T:System.Net.HttpListenerRequest" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.HttpListenerContext.Request">
          <source>If you close this <ph id="ph1">&lt;xref:System.Net.HttpListenerContext&gt;</ph>, it will send the response to the client, close the <ph id="ph2">&lt;xref:System.Net.HttpListenerResponse&gt;</ph> that contains the response, and close the <ph id="ph3">&lt;xref:System.Net.HttpListenerRequest&gt;</ph> object returned by this property.</source>
          <target state="translated">이 닫으면 <ph id="ph1">&lt;xref:System.Net.HttpListenerContext&gt;</ph>, 닫기는 클라이언트에 대 한 응답을 전송 합니다는 <ph id="ph2">&lt;xref:System.Net.HttpListenerResponse&gt;</ph> 닫은 응답을 포함 하는 <ph id="ph3">&lt;xref:System.Net.HttpListenerRequest&gt;</ph> 이 속성에서 반환 된 개체입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.HttpListenerContext.Request">
          <source>The following code example demonstrates calling this method.</source>
          <target state="translated">다음 코드 예제에서는이 메서드를 호출 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.HttpListenerContext.Request">
          <source>The <ph id="ph1">`listener`</ph> variable holds an <ph id="ph2">&lt;xref:System.Net.HttpListener&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`listener`</ph> 변수에 <ph id="ph2">&lt;xref:System.Net.HttpListener&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.Net.HttpListenerContext.Response">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Net.HttpListenerResponse" /&gt;</ph> object that will be sent to the client in response to the client's request.</source>
          <target state="translated">클라이언트의 요청에 대한 응답으로 클라이언트에 보낼 <ph id="ph1">&lt;see cref="T:System.Net.HttpListenerResponse" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.HttpListenerContext.Response">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.HttpListenerResponse" /&gt;</ph> object used to send a response back to the client.</source>
          <target state="translated">클라이언트에 응답을 보내는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.Net.HttpListenerResponse" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.HttpListenerContext.Response">
          <source>Your application configures the response by setting properties in the <ph id="ph1">&lt;xref:System.Net.HttpListenerResponse&gt;</ph> object returned by this property.</source>
          <target state="translated">속성을 설정 하 여 응답을 구성 하는 응용 프로그램의 <ph id="ph1">&lt;xref:System.Net.HttpListenerResponse&gt;</ph> 이 속성에서 반환 된 개체입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.HttpListenerContext.Response">
          <source>After configuring the response, you send it to the client by closing the response, or by closing this <ph id="ph1">&lt;xref:System.Net.HttpListenerContext&gt;</ph> object.</source>
          <target state="translated">응답을 구성한 후에 게 보내기 클라이언트는 응답을 닫아 하거나 닫으면이 <ph id="ph1">&lt;xref:System.Net.HttpListenerContext&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.HttpListenerContext.Response">
          <source>The following code example demonstrates getting the response to a client's request and adding the response body.</source>
          <target state="translated">다음 코드 예제에서는 클라이언트의 요청에 대 한 응답을 가져오고 응답 본문을 추가 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.HttpListenerContext.Response">
          <source>Note: This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">참고:이 멤버 응용 프로그램에 네트워크 추적을 사용 하도록 설정 하면 추적 정보를 출력 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.HttpListenerContext.Response">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>.NET Framework의 네트워크 추적<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.Net.HttpListenerContext.User">
          <source>Gets an object used to obtain identity, authentication information, and security roles for the client whose request is represented by this <ph id="ph1">&lt;see cref="T:System.Net.HttpListenerContext" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Net.HttpListenerContext" /&gt;</ph> 개체가 나타내는 요청을 보낸 클라이언트의 ID, 인증 정보 및 보안 규칙을 얻는 데 사용되는 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.HttpListenerContext.User">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.Principal.IPrincipal" /&gt;</ph> object that describes the client, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the <ph id="ph3">&lt;see cref="T:System.Net.HttpListener" /&gt;</ph> that supplied this <ph id="ph4">&lt;see cref="T:System.Net.HttpListenerContext" /&gt;</ph> does not require authentication.</source>
          <target state="translated">클라이언트를 설명하는 <ph id="ph1">&lt;see cref="T:System.Security.Principal.IPrincipal" /&gt;</ph> 개체이거나, 이 <ph id="ph3">&lt;see cref="T:System.Net.HttpListener" /&gt;</ph>를 제공한 <ph id="ph4">&lt;see cref="T:System.Net.HttpListenerContext" /&gt;</ph>에서 인증을 필요로 하지 않는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.HttpListenerContext.User">
          <source>An <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> indicates that it requires authentication using the <ph id="ph2">&lt;xref:System.Net.HttpListener.AuthenticationSchemes%2A&gt;</ph> property or by specifying an <ph id="ph3">&lt;xref:System.Net.AuthenticationSchemeSelector&gt;</ph> delegate using the <ph id="ph4">&lt;xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> 사용 하 여 인증 해야 함을 의미는 <ph id="ph2">&lt;xref:System.Net.HttpListener.AuthenticationSchemes%2A&gt;</ph> 속성을 지정 하 여는 <ph id="ph3">&lt;xref:System.Net.AuthenticationSchemeSelector&gt;</ph> 를 사용 하 여 대리자는 <ph id="ph4">&lt;xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.HttpListenerContext.User">
          <source>To determine the client's login name and authentication information, check the <ph id="ph1">&lt;xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=nameWithType&gt;</ph> property in the object returned by this property.</source>
          <target state="translated">클라이언트의 로그인 이름 및 인증 정보를 확인 하려면는 <ph id="ph1">&lt;xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=nameWithType&gt;</ph> 이 속성에서 반환 된 개체의 속성입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.HttpListenerContext.User">
          <source>The following code example demonstrates accessing identity and authentication information about the client, and returning it to the client in the response.</source>
          <target state="translated">다음 코드 예제에서는 클라이언트 및 응답에 클라이언트에 반환 하는 방법에 대 한 id 및 인증 정보에 액세스 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.HttpListenerContext.User">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /&gt;</ph><ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /&gt;</ph><ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>