<Type Name="HttpListenerContext" FullName="System.Net.HttpListenerContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="705ad856aec4503b86e089c3909db4129f7e4177" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36472447" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpListenerContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpListenerContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpListenerContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListenerContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListenerContext sealed" />
  <TypeSignature Language="F#" Value="type HttpListenerContext = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.HttpListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides access to the request and response objects used by the <see cref="T:System.Net.HttpListener" /> class. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 의해 처리 되는 클라이언트의 하이퍼텍스트 전송 프로토콜 (HTTP) 요청에 관련 된 정보를 제공 하는이 클래스는 <xref:System.Net.HttpListener> 개체입니다. 이 클래스에 사용할 수 있는 메서드는 <xref:System.Net.HttpListener> WebSocket 연결을 허용 하는 개체입니다.  
  
 <xref:System.Net.HttpListener.GetContext%2A> 의 인스턴스를 반환 하는 메서드는 <xref:System.Net.HttpListenerContext> 클래스입니다. 클라이언트 요청을 나타내는 개체를 가져오려면는 <xref:System.Net.HttpListenerContext.Request%2A> 속성입니다. 클라이언트로 전송 될 응답을 나타내는 개체를 가져오려면는 <xref:System.Net.HttpListener>를 사용 하 여는 <xref:System.Net.HttpListenerContext.Response%2A> 속성입니다. 로그인 이름 및 그의 인증 여부, 예: 요청을 보내는 클라이언트에 대 한 사용자 정보에 속성을 쿼리할 수는 <xref:System.Security.Principal.IPrincipal> 에서 반환 된 개체는 <xref:System.Net.HttpListenerContext.User%2A> 속성입니다.  
  
 닫기는 <xref:System.Net.HttpListenerContext> 개체 클라이언트에 대 한 응답을 보내고에서 사용 하는 모든 리소스를 해제는 <xref:System.Net.HttpListenerContext>합니다. 중단 된 <xref:System.Net.HttpListenerContext> 개체에서 사용 하는 모든 리소스를 해제 하 고 전송 되지 않은 이미, 클라이언트에 대 한 응답을 삭제는 <xref:System.Net.HttpListenerContext>합니다. 닫거나 중단 후는 <xref:System.Net.HttpListenerContext> 개체의 메서드 또는 속성을 참조할 수 없습니다. 이렇게 하면 표시 됩니다는 <xref:System.ObjectDisposedException> 예외입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 클라이언트 요청에 대 한 사용자 정보를 표시 합니다.  
  
 [!code-csharp[Net_Listener_Basic#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#8)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="T:System.Net.HttpListenerRequest" />
    <altmember cref="T:System.Net.HttpListenerResponse" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AcceptWebSocketAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Accept a WebSocket connection as an asynchronous operation.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcceptWebSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync (string subProtocol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync(string subProtocol) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptWebSocketAsync (subProtocol As String) As Task(Of HttpListenerWebSocketContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::WebSockets::HttpListenerWebSocketContext ^&gt; ^ AcceptWebSocketAsync(System::String ^ subProtocol);" />
      <MemberSignature Language="F#" Value="member this.AcceptWebSocketAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;" Usage="httpListenerContext.AcceptWebSocketAsync subProtocol" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subProtocol" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subProtocol">The supported WebSocket sub-protocol.</param>
        <summary>Accept a WebSocket connection as an asynchronous operation.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns an <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task%601> WebSocket 연결 수락 개체가 완성 합니다.  
  
 수신 버퍼의 크기가 16,385 바이트입니다. WebSocket 연결 유지 간격 기본값인 30000 (30 초)으로 설정 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="subProtocol" /> is an empty string  -or-  <paramref name="subProtocol" /> contains illegal characters.</exception>
        <exception cref="T:System.Net.WebSockets.WebSocketException">An error occurred when sending the response to complete the WebSocket handshake.</exception>
        <altmember cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />
      </Docs>
    </Member>
    <Member MemberName="AcceptWebSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync (string subProtocol, TimeSpan keepAliveInterval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync(string subProtocol, valuetype System.TimeSpan keepAliveInterval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptWebSocketAsync (subProtocol As String, keepAliveInterval As TimeSpan) As Task(Of HttpListenerWebSocketContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::WebSockets::HttpListenerWebSocketContext ^&gt; ^ AcceptWebSocketAsync(System::String ^ subProtocol, TimeSpan keepAliveInterval);" />
      <MemberSignature Language="F#" Value="member this.AcceptWebSocketAsync : string * TimeSpan -&gt; System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;" Usage="httpListenerContext.AcceptWebSocketAsync (subProtocol, keepAliveInterval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subProtocol" Type="System.String" />
        <Parameter Name="keepAliveInterval" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="subProtocol">The supported WebSocket sub-protocol.</param>
        <param name="keepAliveInterval">The WebSocket protocol keep-alive interval in milliseconds.</param>
        <summary>Accept a WebSocket connection specifying the supported WebSocket sub-protocol  and WebSocket keep-alive interval as an asynchronous operation.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns an <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task%601> WebSocket 연결 수락 개체가 완성 합니다.  
  
 수신 버퍼의 크기가 16,385 바이트입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="subProtocol" /> is an empty string  -or-  <paramref name="subProtocol" /> contains illegal characters.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="keepAliveInterval" /> is too small.</exception>
        <exception cref="T:System.Net.WebSockets.WebSocketException">An error occurred when sending the response to complete the WebSocket handshake.</exception>
        <altmember cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />
      </Docs>
    </Member>
    <Member MemberName="AcceptWebSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync(string subProtocol, int32 receiveBufferSize, valuetype System.TimeSpan keepAliveInterval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptWebSocketAsync (subProtocol As String, receiveBufferSize As Integer, keepAliveInterval As TimeSpan) As Task(Of HttpListenerWebSocketContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::WebSockets::HttpListenerWebSocketContext ^&gt; ^ AcceptWebSocketAsync(System::String ^ subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);" />
      <MemberSignature Language="F#" Value="member this.AcceptWebSocketAsync : string * int * TimeSpan -&gt; System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;" Usage="httpListenerContext.AcceptWebSocketAsync (subProtocol, receiveBufferSize, keepAliveInterval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subProtocol" Type="System.String" />
        <Parameter Name="receiveBufferSize" Type="System.Int32" />
        <Parameter Name="keepAliveInterval" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="subProtocol">The supported WebSocket sub-protocol.</param>
        <param name="receiveBufferSize">The receive buffer size in bytes.</param>
        <param name="keepAliveInterval">The WebSocket protocol keep-alive interval in milliseconds.</param>
        <summary>Accept a WebSocket connection specifying the supported WebSocket sub-protocol, receive buffer size, and WebSocket keep-alive interval as an asynchronous operation.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns an <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task%601> > WebSocket 연결 수락 개체 완성 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="subProtocol" /> is an empty string  -or-  <paramref name="subProtocol" /> contains illegal characters.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="keepAliveInterval" /> is too small.  -or-  <paramref name="receiveBufferSize" /> is less than 16 bytes  -or-  <paramref name="receiveBufferSize" /> is greater than 64K bytes.</exception>
        <exception cref="T:System.Net.WebSockets.WebSocketException">An error occurred when sending the response to complete the WebSocket handshake.</exception>
        <altmember cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />
      </Docs>
    </Member>
    <Member MemberName="AcceptWebSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment&lt;byte&gt; internalBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.HttpListenerWebSocketContext&gt; AcceptWebSocketAsync(string subProtocol, int32 receiveBufferSize, valuetype System.TimeSpan keepAliveInterval, valuetype System.ArraySegment`1&lt;unsigned int8&gt; internalBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptWebSocketAsync (subProtocol As String, receiveBufferSize As Integer, keepAliveInterval As TimeSpan, internalBuffer As ArraySegment(Of Byte)) As Task(Of HttpListenerWebSocketContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::WebSockets::HttpListenerWebSocketContext ^&gt; ^ AcceptWebSocketAsync(System::String ^ subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment&lt;System::Byte&gt; internalBuffer);" />
      <MemberSignature Language="F#" Value="member this.AcceptWebSocketAsync : string * int * TimeSpan * ArraySegment&lt;byte&gt; -&gt; System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;" Usage="httpListenerContext.AcceptWebSocketAsync (subProtocol, receiveBufferSize, keepAliveInterval, internalBuffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.HttpListenerWebSocketContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subProtocol" Type="System.String" />
        <Parameter Name="receiveBufferSize" Type="System.Int32" />
        <Parameter Name="keepAliveInterval" Type="System.TimeSpan" />
        <Parameter Name="internalBuffer" Type="System.ArraySegment&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="subProtocol">The supported WebSocket sub-protocol.</param>
        <param name="receiveBufferSize">The receive buffer size in bytes.</param>
        <param name="keepAliveInterval">The WebSocket protocol keep-alive interval in milliseconds.</param>
        <param name="internalBuffer">An internal buffer to use for this operation.</param>
        <summary>Accept a WebSocket connection specifying the supported WebSocket sub-protocol, receive buffer size, WebSocket keep-alive interval, and the internal buffer as an asynchronous operation.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns an <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task%601> WebSocket 연결 수락 개체가 완성 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="subProtocol" /> is an empty string  -or-  <paramref name="subProtocol" /> contains illegal characters.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="keepAliveInterval" /> is too small.  -or-  <paramref name="receiveBufferSize" /> is less than 16 bytes  -or-  <paramref name="receiveBufferSize" /> is greater than 64K bytes.</exception>
        <exception cref="T:System.Net.WebSockets.WebSocketException">An error occurred when sending the response to complete the WebSocket handshake.</exception>
        <altmember cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" />
      </Docs>
    </Member>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerRequest Request { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerRequest Request" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerContext.Request" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Request As HttpListenerRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerRequest ^ Request { System::Net::HttpListenerRequest ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Request : System.Net.HttpListenerRequest" Usage="System.Net.HttpListenerContext.Request" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Net.HttpListenerRequest" /> that represents a client's request for a resource.</summary>
        <value>클라이언트 요청을 나타내는 <see cref="T:System.Net.HttpListenerRequest" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 닫으면 <xref:System.Net.HttpListenerContext>, 닫기는 클라이언트에 대 한 응답을 전송 합니다는 <xref:System.Net.HttpListenerResponse> 닫은 응답을 포함 하는 <xref:System.Net.HttpListenerRequest> 이 속성에서 반환 된 개체입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 메서드를 호출 하는 방법을 보여 줍니다. `listener` 변수에 <xref:System.Net.HttpListener> 개체입니다.  
  
 [!code-csharp[Net_Listener_Basic#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Response">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerResponse Response { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerResponse Response" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerContext.Response" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Response As HttpListenerResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerResponse ^ Response { System::Net::HttpListenerResponse ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Response : System.Net.HttpListenerResponse" Usage="System.Net.HttpListenerContext.Response" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerResponse</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Net.HttpListenerResponse" /> object that will be sent to the client in response to the client's request.</summary>
        <value>
          <see cref="T:System.Net.HttpListenerResponse" /> 개체를 다시 클라이언트에 대 한 응답을 보내는 데 사용 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 속성을 설정 하 여 응답을 구성 하는 응용 프로그램의 <xref:System.Net.HttpListenerResponse> 이 속성에서 반환 된 개체입니다. 응답을 구성한 후에 게 보내기 클라이언트는 응답을 닫아 하거나 닫으면이 <xref:System.Net.HttpListenerContext> 개체입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 클라이언트의 요청에 대 한 응답을 가져오고 응답 본문을 추가 하는 방법을 보여 줍니다.  
  
 [!code-csharp[Net_Listener_Basic#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>참고:이 멤버 응용 프로그램에 네트워크 추적을 사용 하도록 설정 하면 추적 정보를 출력 합니다. 자세한 내용은 참조 [.NET Framework](~/docs/framework/network-programming/network-tracing.md)에 네트워크 추적 중입니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="User">
      <MemberSignature Language="C#" Value="public System.Security.Principal.IPrincipal User { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IPrincipal User" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerContext.User" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property User As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::IPrincipal ^ User { System::Security::Principal::IPrincipal ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.User : System.Security.Principal.IPrincipal" Usage="System.Net.HttpListenerContext.User" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object used to obtain identity, authentication information, and security roles for the client whose request is represented by this <see cref="T:System.Net.HttpListenerContext" /> object.</summary>
        <value>
          <see cref="T:System.Security.Principal.IPrincipal" /> 클라이언트를 설명 하는 개체 또는 <see langword="null" /> 경우는 <see cref="T:System.Net.HttpListener" /> 이 제공 하는 <see cref="T:System.Net.HttpListenerContext" /> 인증이 불필요 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpListener> 사용 하 여 인증 해야 함을 의미는 <xref:System.Net.HttpListener.AuthenticationSchemes%2A> 속성을 지정 하 여는 <xref:System.Net.AuthenticationSchemeSelector> 를 사용 하 여 대리자는 <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> 속성입니다.  
  
 클라이언트의 로그인 이름 및 인증 정보를 확인 하려면는 <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=nameWithType> 이 속성에서 반환 된 개체의 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 클라이언트 및 응답에 클라이언트에 반환 하는 방법에 대 한 id 및 인증 정보에 액세스 하는 방법을 보여 줍니다.  
  
 [!code-csharp[Net_Listener_Basic#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#8)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /><see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>