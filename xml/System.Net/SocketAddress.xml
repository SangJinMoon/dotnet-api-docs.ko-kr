<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SocketAddress.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59450cb79ab5f58542387491b72545105e08e82b0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9450cb79ab5f58542387491b72545105e08e82b0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.SocketAddress">
          <source>Stores serialized information from <ph id="ph1">&lt;see cref="T:System.Net.EndPoint" /&gt;</ph> derived classes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.EndPoint" /&gt;</ph> 파생 클래스의 serialize된 정보를 저장합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.SocketAddress">
          <source>The first 2 bytes of the underlying buffer are reserved for the <ph id="ph1">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph> enumerated value.</source>
          <target state="translated">기본 버퍼의 처음 2 바이트에 대 한 예약어는 <ph id="ph1">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph> 열거형 값입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.SocketAddress">
          <source>When the <ph id="ph1">&lt;xref:System.Net.SocketAddress&gt;</ph> is used to store a serialized <ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph>, the third and fourth bytes are used to store port number information.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Net.SocketAddress&gt;</ph> 는 저장 하는 데는 serialize 된 <ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph>, 세 번째와 네 번째 바이트는 포트 번호 정보를 저장 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.SocketAddress">
          <source>The next bytes are used to store the IP address.</source>
          <target state="translated">다음 바이트 IP 주소를 저장 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.SocketAddress">
          <source>You can access any information within this underlying byte buffer by referring to its index position; the byte buffer uses zero-based indexing.</source>
          <target state="translated">해당 하는 인덱스 위치;를 참조 하 여이 기본 바이트 버퍼 내에서 모든 정보에 액세스할 수 있습니다. 바이트 버퍼가 0부터 시작 하는 인덱스가 사용합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.SocketAddress">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Net.SocketAddress.Family%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.SocketAddress.Size%2A&gt;</ph> properties to get the <ph id="ph3">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph> value and the buffer size, respectively.</source>
          <target state="translated">사용할 수도 있습니다는 <ph id="ph1">&lt;xref:System.Net.SocketAddress.Family%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Net.SocketAddress.Size%2A&gt;</ph> 가져올 속성의 <ph id="ph3">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph> 값과 버퍼 크기를 각각.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.SocketAddress">
          <source>To view any of this information as a string, use the <ph id="ph1">&lt;xref:System.Net.SocketAddress.ToString%2A&gt;</ph> method.</source>
          <target state="translated">문자열로 서이 정보를 보려면 사용 하 여는 <ph id="ph1">&lt;xref:System.Net.SocketAddress.ToString%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.SocketAddress">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Net.SocketAddress&gt;</ph> to serialize an instance of the <ph id="ph2">&lt;xref:System.Net.EndPoint&gt;</ph> class.</source>
          <target state="translated">다음 예제에서는 사용 하는 방법을 <ph id="ph1">&lt;xref:System.Net.SocketAddress&gt;</ph> 의 인스턴스를 serialize 하는 <ph id="ph2">&lt;xref:System.Net.EndPoint&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.SocketAddress">
          <source>After serialization, the underlying byte buffer of the <ph id="ph1">&lt;xref:System.Net.SocketAddress&gt;</ph> contains all of the <ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph> state information.</source>
          <target state="translated">Serialization의 기본 바이트 버퍼 이후에 <ph id="ph1">&lt;xref:System.Net.SocketAddress&gt;</ph> 모든 포함는 <ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph> 상태 정보입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="T:System.Net.SocketAddress">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.SocketAddress" /&gt;</ph> class.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Net.SocketAddress" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.Sockets.AddressFamily" /&gt;</ph> enumerated value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.AddressFamily" /&gt;</ph> 열거형 값입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.SocketAddress" /&gt;</ph> class for the given address family.</source>
          <target state="translated">지정된 주소 패밀리에 대한 <ph id="ph1">&lt;see cref="T:System.Net.SocketAddress" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)">
          <source>This overload sets the underlying buffer size to 32 bytes.</source>
          <target state="translated">이 오버 로드는 32 바이트를 내부 버퍼 크기를 설정합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.Sockets.AddressFamily" /&gt;</ph> enumerated value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.AddressFamily" /&gt;</ph> 열거형 값입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)">
          <source>The number of bytes to allocate for the underlying buffer.</source>
          <target state="translated">내부 버퍼에 할당할 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.SocketAddress" /&gt;</ph> class using the specified address family and buffer size.</source>
          <target state="translated">지정된 주소 패밀리와 버퍼 크기를 사용하여 <ph id="ph1">&lt;see cref="T:System.Net.SocketAddress" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)">
          <source>Use this overload to create a new instance of the <ph id="ph1">&lt;xref:System.Net.SocketAddress&gt;</ph> class with a particular underlying buffer size.</source>
          <target state="translated">이 오버 로드를 사용 하 여의 새 인스턴스를 만드는 <ph id="ph1">&lt;xref:System.Net.SocketAddress&gt;</ph> 특정 기본 버퍼 크기를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="size" /&gt;</ph> is less than 2.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph>가 2보다 작습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)">
          <source>These 2 bytes are needed to store <ph id="ph1">&lt;paramref name="family" /&gt;</ph>.</source>
          <target state="translated">이러한 2바이트는 <ph id="ph1">&lt;paramref name="family" /&gt;</ph>를 저장하는 데 필요합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Net.SocketAddress.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to compare with the current <ph id="ph2">&lt;see langword="Object" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>과 비교할 <ph id="ph2">&lt;see langword="Object" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Net.SocketAddress.Equals(System.Object)">
          <source>Determines whether the specified <ph id="ph1">&lt;see langword="Object" /&gt;</ph> is equal to the current <ph id="ph2">&lt;see langword="Object" /&gt;</ph>.</source>
          <target state="translated">지정한 <ph id="ph1">&lt;see langword="Object" /&gt;</ph>가 현재 <ph id="ph2">&lt;see langword="Object" /&gt;</ph>와 같은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Net.SocketAddress.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified <ph id="ph2">&lt;see langword="Object" /&gt;</ph> is equal to the current <ph id="ph3">&lt;see langword="Object" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see langword="true" /&gt;</ph>가 현재<ph id="ph2">&lt;see langword="Object" /&gt;</ph>와 같으면 <ph id="ph3">&lt;see langword="Object" /&gt;</ph> 이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.Net.SocketAddress.Family">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.AddressFamily" /&gt;</ph> enumerated value of the current <ph id="ph2">&lt;see cref="T:System.Net.SocketAddress" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Net.Sockets.AddressFamily" /&gt;</ph>의 <ph id="ph2">&lt;see cref="T:System.Net.SocketAddress" /&gt;</ph> 열거형 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.SocketAddress.Family">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.AddressFamily" /&gt;</ph> enumerated values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.AddressFamily" /&gt;</ph> 열거형 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.SocketAddress.Family">
          <source>This method gets the <ph id="ph1">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph> enumerated value that represents the addressing scheme of the current <ph id="ph2">&lt;xref:System.Net.SocketAddress&gt;</ph>.</source>
          <target state="translated">이 메서드를 가져옵니다는 <ph id="ph1">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph> 현재의 주소 지정 체계를 나타내는 값을 열거 <ph id="ph2">&lt;xref:System.Net.SocketAddress&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.SocketAddress.Family">
          <source>If you want to view the corresponding string representation of <ph id="ph1">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.SocketAddress.ToString%2A&gt;</ph> method.</source>
          <target state="translated">해당 문자열 표시를 보려는 경우 <ph id="ph1">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph>를 사용 하 여는 <ph id="ph2">&lt;xref:System.Net.SocketAddress.ToString%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Net.SocketAddress.GetHashCode">
          <source>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</source>
          <target state="translated">특정 형식에 대한 해시 함수로 사용되며, 해시 알고리즘 및 해시 테이블과 같은 데이터 구조에 사용하기 적합합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Net.SocketAddress.GetHashCode">
          <source>A hash code for the current <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>의 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="P:System.Net.SocketAddress.Item(System.Int32)">
          <source>The array index element of the desired information.</source>
          <target state="translated">필요한 정보의 배열 인덱스 요소입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Net.SocketAddress.Item(System.Int32)">
          <source>Gets or sets the specified index element in the underlying buffer.</source>
          <target state="translated">내부 버퍼의 지정된 인덱스 요소를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.SocketAddress.Item(System.Int32)">
          <source>The value of the specified index element in the underlying buffer.</source>
          <target state="translated">내부 버퍼의 지정된 인덱스 요소 값입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.SocketAddress.Item(System.Int32)">
          <source>This property gets or sets the specified byte position in the underlying buffer.</source>
          <target state="translated">이 속성에는 내부 버퍼에서 지정 된 바이트 위치를 설정 하거나 가져옵니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.SocketAddress.Item(System.Int32)">
          <source>Be sure to call <ph id="ph1">&lt;xref:System.Net.SocketAddress.Size%2A&gt;</ph> before referring to elements in the underlying buffer.</source>
          <target state="translated">호출 해야 <ph id="ph1">&lt;xref:System.Net.SocketAddress.Size%2A&gt;</ph> 내부 버퍼에서 요소를 참조 하기 전에.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.SocketAddress.Item(System.Int32)">
          <source>Referring to an index that does not exist will cause the <ph id="ph1">&lt;xref:System.Net.SocketAddress&gt;</ph> to throw an <ph id="ph2">&lt;xref:System.IndexOutOfRangeException&gt;</ph>.</source>
          <target state="translated">존재 하지 않는 인덱스를 참조 하면는 <ph id="ph1">&lt;xref:System.Net.SocketAddress&gt;</ph> throw 하는 <ph id="ph2">&lt;xref:System.IndexOutOfRangeException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.Net.SocketAddress.Item(System.Int32)">
          <source>The specified index does not exist in the buffer.</source>
          <target state="translated">지정된 인덱스가 버퍼에 없는 경우</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Net.SocketAddress.Size">
          <source>Gets the underlying buffer size of the <ph id="ph1">&lt;see cref="T:System.Net.SocketAddress" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.SocketAddress" /&gt;</ph>의 내부 버퍼 크기를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.SocketAddress.Size">
          <source>The underlying buffer size of the <ph id="ph1">&lt;see cref="T:System.Net.SocketAddress" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.SocketAddress" /&gt;</ph>의 내부 버퍼 크기입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.SocketAddress.Size">
          <source>This property gets the underlying buffer size of the <ph id="ph1">&lt;xref:System.Net.SocketAddress&gt;</ph> in bytes.</source>
          <target state="translated">이 속성의 내부 버퍼 크기를 가져옵니다는 <ph id="ph1">&lt;xref:System.Net.SocketAddress&gt;</ph> (바이트)에서입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Net.SocketAddress.ToString">
          <source>Returns information about the socket address.</source>
          <target state="translated">소켓 주소에 대한 정보를 반환합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Net.SocketAddress.ToString">
          <source>A string that contains information about the <ph id="ph1">&lt;see cref="T:System.Net.SocketAddress" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.SocketAddress" /&gt;</ph>에 대한 정보가 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.SocketAddress.ToString">
          <source>The <ph id="ph1">&lt;xref:System.Net.SocketAddress.ToString%2A&gt;</ph> method returns a string that contains the <ph id="ph2">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph> enumerated value, the size of the underlying buffer of the <ph id="ph3">&lt;xref:System.Net.SocketAddress&gt;</ph> structure, and the remaining contents of the buffer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.SocketAddress.ToString%2A&gt;</ph> 포함 하는 문자열을 반환 하는 메서드는 <ph id="ph2">&lt;xref:System.Net.Sockets.AddressFamily&gt;</ph> 열거 값, 기본 버퍼 크기는 <ph id="ph3">&lt;xref:System.Net.SocketAddress&gt;</ph> 구조 및 버퍼의 나머지 내용을 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>