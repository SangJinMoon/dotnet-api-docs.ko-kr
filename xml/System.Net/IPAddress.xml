<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IPAddress.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b382b2e424f3335e396090615b29820d1cd62c1d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b382b2e424f3335e396090615b29820d1cd62c1d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.IPAddress">
          <source>Provides an Internet Protocol (IP) address.</source>
          <target state="translated">IP(인터넷 프로토콜) 주소를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.IPAddress">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> class contains the address of a computer on an IP network.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> IP 네트워크에 있는 컴퓨터의 주소를 포함 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.IPAddress">
          <source>The following code example shows how to query a server to obtain the family addresses and the IP addresses it supports.</source>
          <target state="translated">다음 코드 예제에서는 패밀리 주소를 가져올 서버를 쿼리 하는 방법을 보여주며, IP 주소를 지원 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Net.IPAddress">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source>The byte array value of the IP address.</source>
          <target state="translated">IP 주소의 바이트 배열 값입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> class with the address specified as a <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> 배열로 지정된 주소를 사용하여 <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> is created with the <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> property set to <ph id="ph3">`address`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> 사용 하 여 만든는 <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> 속성이로 설정 <ph id="ph3">`address`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source>If the length of <ph id="ph1">`address`</ph> is 4, <ph id="ph2">&lt;xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29&gt;</ph> constructs an IPv4 address; otherwise, an IPv6 address with a scope of 0 is constructed.</source>
          <target state="translated">경우 길이의 <ph id="ph1">`address`</ph> 는 4, <ph id="ph2">&lt;xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29&gt;</ph> IPv4 주소; 생성 0의 범위와 IPv6 주소 생성 되 고, 그러지 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Byte&gt;</ph> array is assumed to be in network byte order with the most significant byte first in index position 0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Byte&gt;</ph> 배열 가장 중요 한 바이트가 인덱스 위치 0에 있는 네트워크 바이트 순서에 있는 것으로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="address" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="address" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="address" /&gt;</ph> contains a bad IP address.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="address" /&gt;</ph>에 잘못된 IP 주소가 포함되었습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source>The long value of the IP address.</source>
          <target state="translated">IP 주소의 long 값입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source>For example, the value 0x2414188f in big-endian format would be the IP address "143.24.20.36".</source>
          <target state="translated">예를 들어, big-endian 형식의 0x2414188f 값은 IP 주소가 "143.24.20.36"입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> class with the address specified as an <ph id="ph2">&lt;see cref="T:System.Int64" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>로 지정된 주소를 사용하여 <ph id="ph2">&lt;see cref="T:System.Int64" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> instance is created with the <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> property set to <ph id="ph3">`newAddress`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> 사용 인스턴스를 만듭니다는 <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> 속성이로 설정 <ph id="ph3">`newAddress`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Int64&gt;</ph> value is assumed to be in network byte order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Int64&gt;</ph> 값 네트워크 바이트 순서에 있는 것으로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="newAddress" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0 or</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newAddress" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0 또는</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="newAddress" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> 0x00000000FFFFFFFF</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newAddress" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> 0x00000000FFFFFFFF</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>The byte array value of the IP address.</source>
          <target state="translated">IP 주소의 바이트 배열 값입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>The long value of the scope identifier.</source>
          <target state="translated">범위 식별자의 long 값입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> class with the address specified as a <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> array and the specified scope identifier.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> 배열로 지정된 주소와 지정된 범위 식별자를 사용하여 <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>This constructor instantiates an IPv6 address.</source>
          <target state="translated">이 생성자는 IPv6 주소를 인스턴스화합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>The <ph id="ph1">`scopeid`</ph> identifies a network interface in the case of a link-local address.</source>
          <target state="translated"><ph id="ph1">`scopeid`</ph> 링크-로컬 주소 경우 네트워크 인터페이스를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>The scope is valid only for link-local and site-local addresses.</source>
          <target state="translated">범위 링크-로컬 및 사이트-로컬 주소에 대해서만 유효합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Byte&gt;</ph> array is assumed to be in network byte order with the most significant byte first in index position 0.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Byte&gt;</ph> 배열 가장 중요 한 바이트가 인덱스 위치 0에 있는 네트워크 바이트 순서에 있는 것으로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source><ph id="ph1">&lt;paramref name="address" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="address" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source><ph id="ph1">&lt;paramref name="address" /&gt;</ph> contains a bad IP address.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="address" /&gt;</ph>에 잘못된 IP 주소가 포함되었습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source><ph id="ph1">&lt;paramref name="scopeid" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0 or</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="scopeid" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0 또는</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
          <source><ph id="ph1">&lt;paramref name="scopeid" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> 0x00000000FFFFFFFF</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="scopeid" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> 0x00000000FFFFFFFF</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.Address">
          <source>An Internet Protocol (IP) address.</source>
          <target state="translated">IP(인터넷 프로토콜) 주소입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.Address">
          <source>The long value of the IP address.</source>
          <target state="translated">IP 주소의 long 값입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.Address">
          <source>This property is obsolete.</source>
          <target state="translated">이 속성은 사용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.Address">
          <source>Use <ph id="ph1">&lt;xref:System.Net.IPAddress.GetAddressBytes%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.GetAddressBytes%2A&gt;</ph>을 사용하십시오.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.Address">
          <source>To convert <ph id="ph1">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> to dotted-quad notation, use the <ph id="ph2">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> method.</source>
          <target state="translated">변환할 <ph id="ph1">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> 점 표기법을 사용 하 여는 <ph id="ph2">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.Address">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> parameter to retrieve the IP address of the <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> instance.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> IP 주소를 검색 매개 변수는 <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.Address">
          <source>The address family is <ph id="ph1">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /&gt;</ph>.</source>
          <target state="translated">주소 패밀리는 <ph id="ph1">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.AddressFamily">
          <source>Gets the address family of the IP address.</source>
          <target state="translated">IP 주소의 주소 패밀리를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.AddressFamily">
          <source>Returns <ph id="ph1">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /&gt;</ph> for IPv4 or <ph id="ph2">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /&gt;</ph> for IPv6.</source>
          <target state="translated">IPv4에 대한 <ph id="ph1">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /&gt;</ph> 또는 IPv6에 대한 <ph id="ph2">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.AddressFamily">
          <source>Refer to the example in the <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> class topic.</source>
          <target state="translated">예제를 참조는 <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> 클래스 항목입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Any">
          <source>Provides an IP address that indicates that the server must listen for client activity on all network interfaces.</source>
          <target state="translated">서버에서 모든 네트워크 인터페이스의 클라이언트 동작을 수신 대기해야 함을 나타내는 IP 주소를 제공합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Any">
          <source>This field is read-only.</source>
          <target state="translated">이 필드는 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Any">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Net.IPAddress.Any&gt;</ph> field to indicate that a <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> instance must listen for client activity on all network interfaces.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> 메서드는 <ph id="ph2">&lt;xref:System.Net.IPAddress.Any&gt;</ph> 임을 나타내는 필드는 <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 모든 네트워크 인터페이스에서 클라이언트 활동 인스턴스가 수신 대기 해야 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Any">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.Any&gt;</ph> field is equivalent to 0.0.0.0 in dotted-quad notation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.Any&gt;</ph> 필드는 0.0.0.0 점 표기법에 해당 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Broadcast">
          <source>Provides the IP broadcast address.</source>
          <target state="translated">IP 브로드캐스트 주소를 제공합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Broadcast">
          <source>This field is read-only.</source>
          <target state="translated">이 필드는 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Broadcast">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.Broadcast&gt;</ph> field is equivalent to 255.255.255.255 in dotted-quad notation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.Broadcast&gt;</ph> 필드는 255.255.255.255 점 표기법에 해당 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Broadcast">
          <source>The following example prints the <ph id="ph1">&lt;xref:System.Net.IPAddress.Broadcast&gt;</ph> address to the console.</source>
          <target state="translated">다음 예제에서는 인쇄는 <ph id="ph1">&lt;xref:System.Net.IPAddress.Broadcast&gt;</ph> 콘솔에는 주소입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Equals(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> instance to compare to the current instance.</source>
          <target state="translated">현재 인스턴스와 비교할 <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Equals(System.Object)">
          <source>Compares two IP addresses.</source>
          <target state="translated">두 개의 IP 주소를 비교합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two addresses are equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">두 개의 주소가 동일하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.Equals%2A&gt;</ph> method compares the current <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> instance with the <ph id="ph3">`comparand`</ph> parameter and returns <ph id="ph4">`true`</ph> if the two instances contain the same IP address.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.Equals%2A&gt;</ph> 메서드 비교 현재 <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> 인스턴스는 <ph id="ph3">`comparand`</ph> 매개 변수 및 반환 <ph id="ph4">`true`</ph> 두 인스턴스가 동일한 IP 주소를 포함 하는 경우.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.GetAddressBytes">
          <source>Provides a copy of the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> as an array of bytes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>의 복사본을 바이트 배열로 제공합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.GetAddressBytes">
          <source>A <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> 배열입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.GetAddressBytes">
          <source>The following code example shows how to get a server IP address in byte format.</source>
          <target state="translated">다음 코드 예제에서는 바이트 형식에서으로 서버 IP 주소를 가져오기 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.GetHashCode">
          <source>Returns a hash value for an IP address.</source>
          <target state="translated">IP 주소에 대한 해시 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.GetHashCode">
          <source>An integer hash value.</source>
          <target state="translated">정수 해시 값입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.GetHashCode">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.GetHashCode%2A&gt;</ph> method returns a hash code of the IP address.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.GetHashCode%2A&gt;</ph> 메서드 IP 주소의 해시 코드를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.GetHashCode">
          <source>This value can be used as a key in hash tables.</source>
          <target state="translated">이 값은 해시 테이블에서 키로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="T:System.Net.IPAddress">
          <source>Converts a value from host byte order to network byte order.</source>
          <target state="translated">호스트 바이트 순서에서 네트워크 바이트 순서로 값을 변환합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>The number to convert, expressed in host byte order.</source>
          <target state="translated">호스트 바이트 순서로 변환할 숫자입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>Converts a short value from host byte order to network byte order.</source>
          <target state="translated">short 값을 호스트 바이트 순서에서 네트워크 바이트 순서로 변환합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>A short value, expressed in network byte order.</source>
          <target state="translated">네트워크 바이트 순서로 표현된 short 값입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">서로 다른 컴퓨터는 멀티 바이트 정수 값 내에서 바이트 순서 지정에 다른 규칙을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">일부 컴퓨터에 가장 덜 중요 한 바이트가 먼저 배치 (이 big endian 순서 라고 함) 및 다른 최하위 바이트 먼저 배치 (일명 little endian 순서).</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">네트워크를 통해 전송 되는 모든 정수 값은 서로 다른 바이트 순서를 사용 하는 컴퓨터를 사용 하려면 먼저 가장 중요 한 바이트 있는 네트워크 바이트 순서 전송 됩니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> 메서드는 네트워크에서 사용 하는 바이트 순서로 호스트에서 사용 하는 바이트 순서에서 호스트 시스템에 저장 된 멀티 바이트 정수 값을 변환 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>The number to convert, expressed in host byte order.</source>
          <target state="translated">호스트 바이트 순서로 변환할 숫자입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>Converts an integer value from host byte order to network byte order.</source>
          <target state="translated">정수 값을 호스트 바이트 순서에서 네트워크 바이트 순서로 변환합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>An integer value, expressed in network byte order.</source>
          <target state="translated">네트워크 바이트 순서로 표현된 정수 값입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">서로 다른 컴퓨터는 멀티 바이트 정수 값 내에서 바이트 순서 지정에 다른 규칙을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">일부 컴퓨터에 가장 덜 중요 한 바이트가 먼저 배치 (이 big endian 순서 라고 함) 및 다른 최하위 바이트 먼저 배치 (일명 little endian 순서).</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">네트워크를 통해 전송 되는 모든 정수 값은 서로 다른 바이트 순서를 사용 하는 컴퓨터를 사용 하려면 먼저 가장 중요 한 바이트 있는 네트워크 바이트 순서 전송 됩니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> 메서드는 네트워크에서 사용 하는 바이트 순서로 호스트에서 사용 하는 바이트 순서에서 호스트 시스템에 저장 된 멀티 바이트 정수 값을 변환 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>The number to convert, expressed in host byte order.</source>
          <target state="translated">호스트 바이트 순서로 변환할 숫자입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>Converts a long value from host byte order to network byte order.</source>
          <target state="translated">호스트 바이트 순서에서 네트워크 바이트 순서로 long 값을 변환합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>A long value, expressed in network byte order.</source>
          <target state="translated">네트워크 바이트 순서로 표현된 long 값입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">서로 다른 컴퓨터는 멀티 바이트 정수 값 내에서 바이트 순서 지정에 다른 규칙을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">일부 컴퓨터에 가장 덜 중요 한 바이트가 먼저 배치 (이 big endian 순서 라고 함) 및 다른 최하위 바이트 먼저 배치 (일명 little endian 순서).</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">네트워크를 통해 전송 되는 모든 정수 값은 서로 다른 바이트 순서를 사용 하는 컴퓨터를 사용 하려면 먼저 가장 중요 한 바이트 있는 네트워크 바이트 순서 전송 됩니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A&gt;</ph> 메서드는 네트워크에서 사용 하는 바이트 순서로 호스트에서 사용 하는 바이트 순서에서 호스트 시스템에 저장 된 멀티 바이트 정수 값을 변환 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.IPv6Any">
          <source>The <ph id="ph1">&lt;see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /&gt;</ph> method uses the <ph id="ph2">&lt;see cref="F:System.Net.IPAddress.IPv6Any" /&gt;</ph> field to indicate that a <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> must listen for client activity on all network interfaces.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /&gt;</ph> 메서드는 <ph id="ph2">&lt;see cref="F:System.Net.IPAddress.IPv6Any" /&gt;</ph> 필드를 사용하여 <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>이 모든 네트워크 인터페이스에서 클라이언트 동작을 수신 대기해야 함을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6Any">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6Any&gt;</ph> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to :: in compact notation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6Any&gt;</ph> 해당 또는 콜론 16 진수 표기법으로 나타낸 하는 필드:: 간단한 표기법에서 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6Any">
          <source>The following code example displays the value of the current host's Any address in standard compressed format.</source>
          <target state="translated">다음 코드 예제에서는 현재 값 모든 주소에 호스트의 표준 압축된 형식으로 표시합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.IPv6Loopback">
          <source>Provides the IP loopback address.</source>
          <target state="translated">IP 루프백 주소를 제공합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.IPv6Loopback">
          <source>This property is read-only.</source>
          <target state="translated">이 속성은 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6Loopback">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6Loopback&gt;</ph> field is equivalent to 0:0:0:0:0:0:0:1 in colon-hexadecimal notation, or to ::1 in compact notation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6Loopback&gt;</ph> 해당 0:0:0:0:0:0:0:1 또는 콜론 16 진수 표기법으로 하는 필드:: 간단한 표기법에서 1입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6Loopback">
          <source>The following code example displays the value of the current host's loopback address in standard compressed format.</source>
          <target state="translated">다음 코드 예제에서는 표준 압축 된 형식에서 현재 호스트의 루프백 주소 값을 표시합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.IPv6None">
          <source>Provides an IP address that indicates that no network interface should be used.</source>
          <target state="translated">네트워크 인터페이스를 사용하지 않아야 함을 나타내는 IP 주소를 제공합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.IPv6None">
          <source>This property is read-only.</source>
          <target state="translated">이 속성은 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6None">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Net.IPAddress.IPv6None&gt;</ph> field to indicate that a <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> must not listen for client activity.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> 메서드는 <ph id="ph2">&lt;xref:System.Net.IPAddress.IPv6None&gt;</ph> 임을 나타내는 필드는 <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 클라이언트 활동에 대 한 수신 대기 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6None">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6None&gt;</ph> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.IPv6None&gt;</ph> 해당 또는 콜론 16 진수 표기법으로 나타낸 하는 필드:: 간단한 표기법에서 0입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.IPv6None">
          <source>The following code example displays the value of the current host's None address in standard compressed format.</source>
          <target state="translated">다음 코드 예제에서는 표준 압축 된 형식에서 현재 호스트의 None 주소 값을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>Gets whether the IP address is an IPv4-mapped IPv6 address.</source>
          <target state="translated">IP 주소가 IPv4-매핑된 IPv6 주소인지 여부를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the IP address is an IPv4-mapped IPv6 address; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">IP 주소가 IPv4 매핑된 IPv6 주소이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>Dual-stack sockets always require IPv6 addresses.</source>
          <target state="translated">이중 스택 소켓을 IPv6 주소를 항상 필요 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</source>
          <target state="translated">IPv4 주소와 상호 작용 하는 IPv4 매핑 IPv6 주소 형식 사용 하면 필요 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</source>
          <target state="translated">모든 IPv4 주소는 IPv4 노드가와 통신할 수는 IPv6 전용 응용 프로그램 수 있도록 하는 IPv4 매핑 IPv6 주소 형식으로 표현 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</source>
          <target state="translated">IPv4 매핑 IPv6 주소 형식에는 IPv4 주소를 IPv6 주소로 나타낼 수 있는 IPv4 노드의 수 있습니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</source>
          <target state="translated">IPv6 주소의 하위 32 비트에 IPv4 주소 인코딩되고 상위 96 비트 고정된 접두사 0:0:0:0:0:FFFF 보유 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>The IPv4-mapped IPv6 address format is specified in RFC 4291.</source>
          <target state="translated">IPv4 매핑 IPv6 주소 형식은 RFC 4291에 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
          <source>For more information, see <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.IsIPv6LinkLocal">
          <source>Gets whether the address is an IPv6 link local address.</source>
          <target state="translated">주소가 IPv6 링크 로컬 주소인지 여부를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6LinkLocal">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the IP address is an IPv6 link local address; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">IP 주소가 IPv6 링크 로컬 주소이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.IsIPv6Multicast">
          <source>Gets whether the address is an IPv6 multicast global address.</source>
          <target state="translated">주소가 IPv6 멀티캐스트 전역 주소인지 여부를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6Multicast">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the IP address is an IPv6 multicast global address; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">IP 주소가 IPv6 멀티캐스트 전역 주소이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.IsIPv6SiteLocal">
          <source>Gets whether the address is an IPv6 site local address.</source>
          <target state="translated">주소가 IPv6 사이트 로컬 주소인지 여부를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6SiteLocal">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the IP address is an IPv6 site local address; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">IP 주소가 IPv6 사이트 로컬 주소이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.IsIPv6Teredo">
          <source>Gets whether the address is an IPv6 Teredo address.</source>
          <target state="translated">주소가 IPv6 Teredo 주소인지 여부를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6Teredo">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the IP address is an IPv6 Teredo address; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">IP 주소가 IPv6 Teredo 주소이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6Teredo">
          <source>A Teredo address is an IPv6 address with the prefix of 2001::/32.</source>
          <target state="translated">Teredo 주소는 IPv6 주소 2001 접두사로:: / 32입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.IsIPv6Teredo">
          <source>Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</source>
          <target state="translated">Teredo 주소는 일반 DNS 이름 확인을 통해 반환 또는 로컬 인터페이스에 할당 된 IPv6 주소로 열거 수 있습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source>An IP address.</source>
          <target state="translated">IP 주소입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source>Indicates whether the specified IP address is the loopback address.</source>
          <target state="translated">지정된 IP 주소가 루프백 주소인지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="address" /&gt;</ph> is the loopback address; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="address" /&gt;</ph>가 루프백 주소이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> method compares <ph id="ph2">`address`</ph> to <ph id="ph3">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> and returns <ph id="ph4">`true`</ph> if the two IP addresses are the same.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> 메서드 비교 <ph id="ph2">`address`</ph> 를 <ph id="ph3">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> 반환 <ph id="ph4">`true`</ph> 두 개의 IP 주소는 동일 합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source>In the case of IPv4, that the <ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> for any IP address of the form 127.X.Y.Z (where X, Y, and Z are in the range 0-255), not just <ph id="ph3">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> (127.0.0.1).</source>
          <target state="translated">4의 경우는 <ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> 메서드 반환 <ph id="ph2">`true`</ph> 폼의 모든 IP 주소에 대 한 127.X.Y.Z (여기서 X, Y 및 Z는 0-255 범위에), 뿐만 아니라 <ph id="ph3">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> (127.0.0.1).</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> method to determine whether the specified address is a loopback address.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Net.IPAddress.IsLoopback%2A&gt;</ph> 메서드를 지정된 된 주소는 루프백 주소 인지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Loopback">
          <source>Provides the IP loopback address.</source>
          <target state="translated">IP 루프백 주소를 제공합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.Loopback">
          <source>This field is read-only.</source>
          <target state="translated">이 필드는 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Loopback">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> field is equivalent to 127.0.0.1 in dotted-quad notation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> 필드는 127.0.0.1 점 표기법에 해당 합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.Loopback">
          <source>The following example prints the <ph id="ph1">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> address to the console.</source>
          <target state="translated">다음 예제에서는 인쇄는 <ph id="ph1">&lt;xref:System.Net.IPAddress.Loopback&gt;</ph> 콘솔에는 주소입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>Maps the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> object to an IPv4 address.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> 개체를 IPv4 주소로 매핑합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>An IPv4 address.</source>
          <target state="translated">IPv4 주소입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>Dual-stack sockets always require IPv6 addresses.</source>
          <target state="translated">이중 스택 소켓을 IPv6 주소를 항상 필요 합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</source>
          <target state="translated">IPv4 주소와 상호 작용 하는 IPv4 매핑 IPv6 주소 형식 사용 하면 필요 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</source>
          <target state="translated">모든 IPv4 주소는 IPv4 노드가와 통신할 수는 IPv6 전용 응용 프로그램 수 있도록 하는 IPv4 매핑 IPv6 주소 형식으로 표현 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</source>
          <target state="translated">IPv4 매핑 IPv6 주소 형식에는 IPv4 주소를 IPv6 주소로 나타낼 수 있는 IPv4 노드의 수 있습니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</source>
          <target state="translated">IPv6 주소의 하위 32 비트에 IPv4 주소 인코딩되고 상위 96 비트 고정된 접두사 0:0:0:0:0:FFFF 보유 합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>The IPv4-mapped IPv6 address format is specified in RFC 4291.</source>
          <target state="translated">IPv4 매핑 IPv6 주소 형식은 RFC 4291에 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>For more information, see <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>If you want to use <ph id="ph1">&lt;xref:System.Net.IPAddress.MapToIPv4%2A&gt;</ph> to convert an IPv4 address from IPv6 format to IPv4 format, you must first ensure that you've got an IPv4 address.</source>
          <target state="translated">사용 하려는 경우 <ph id="ph1">&lt;xref:System.Net.IPAddress.MapToIPv4%2A&gt;</ph> IPv4 주소는 IPv6 형식이에서 IPv4 형식으로 변환 하려면 먼저 확인 해야 인지는 IPv4 주소입니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>Call <ph id="ph1">&lt;xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A&gt;</ph>, which will return <ph id="ph2">`true`</ph> if the IP address is originally IPv4 written as IPv6, or <ph id="ph3">`false`</ph> otherwise.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A&gt;</ph>를 반환 합니다 <ph id="ph2">`true`</ph> IP 주소는 원래 IPv4, IPv6로 작성 하는 경우 또는 <ph id="ph3">`false`</ph> 그렇지 않은 경우.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv4">
          <source>If <ph id="ph1">&lt;xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, use <ph id="ph3">&lt;xref:System.Net.IPAddress.MapToIPv4%2A&gt;</ph> to make the conversion.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A&gt;</ph> 반환 <ph id="ph2">`true`</ph>를 사용 하 여 <ph id="ph3">&lt;xref:System.Net.IPAddress.MapToIPv4%2A&gt;</ph> 를 변환 합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>Maps the <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> object to an IPv6 address.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> 개체를 IPv6 주소로 매핑합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>An IPv6 address.</source>
          <target state="translated">IPv6 주소입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>Dual-stack sockets always require IPv6 addresses.</source>
          <target state="translated">이중 스택 소켓을 IPv6 주소를 항상 필요 합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</source>
          <target state="translated">IPv4 주소와 상호 작용 하는 IPv4 매핑 IPv6 주소 형식 사용 하면 필요 합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</source>
          <target state="translated">모든 IPv4 주소는 IPv4 노드가와 통신할 수는 IPv6 전용 응용 프로그램 수 있도록 하는 IPv4 매핑 IPv6 주소 형식으로 표현 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</source>
          <target state="translated">IPv4 매핑 IPv6 주소 형식에는 IPv4 주소를 IPv6 주소로 나타낼 수 있는 IPv4 노드의 수 있습니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</source>
          <target state="translated">IPv6 주소의 하위 32 비트에 IPv4 주소 인코딩되고 상위 96 비트 고정된 접두사 0:0:0:0:0:FFFF 보유 합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>The IPv4-mapped IPv6 address format is specified in RFC 4291.</source>
          <target state="translated">IPv4 매핑 IPv6 주소 형식은 RFC 4291에 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.MapToIPv6">
          <source>For more information, see <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>www.ietf.org/rfc/rfc4291.txt<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=92231)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="T:System.Net.IPAddress">
          <source>Converts a number from network byte order to host byte order.</source>
          <target state="translated">네트워크 바이트 순서에서 호스트 바이트 순서로 숫자를 변환합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>The number to convert, expressed in network byte order.</source>
          <target state="translated">네트워크 바이트 순서로 변환할 숫자입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>Converts a short value from network byte order to host byte order.</source>
          <target state="translated">short 값을 네트워크 바이트 순서에서 호스트 바이트 순서로 변환합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>A short value, expressed in host byte order.</source>
          <target state="translated">호스트 바이트 순서로 표현된 short 값입니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">서로 다른 컴퓨터는 멀티 바이트 정수 값 내에서 바이트 순서 지정에 다른 규칙을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">일부 컴퓨터에 가장 덜 중요 한 바이트가 먼저 배치 (이 big endian 순서 라고 함) 및 다른 최하위 바이트 먼저 배치 (일명 little endian 순서).</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">네트워크를 통해 전송 되는 모든 정수 값은 서로 다른 바이트 순서를 사용 하는 컴퓨터를 사용 하려면 먼저 가장 중요 한 바이트 있는 네트워크 바이트 순서 전송 됩니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> 메서드 호스트에서 사용 하 여 바이트 순서를 네트워크에서 사용 하는 바이트 순서에서 호스트 시스템에 저장 된 멀티 바이트 정수 값을 변환 합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method to convert a short value from network byte order to host byte order.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> 호스트 바이트 순서로 네트워크 바이트 순서에서 짧은 값을 변환 하는 메서드입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>The number to convert, expressed in network byte order.</source>
          <target state="translated">네트워크 바이트 순서로 변환할 숫자입니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>Converts an integer value from network byte order to host byte order.</source>
          <target state="translated">정수 값을 네트워크 바이트 순서에서 호스트 바이트 순서로 변환합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>An integer value, expressed in host byte order.</source>
          <target state="translated">호스트 바이트 순서로 표현된 정수 값입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">서로 다른 컴퓨터는 멀티 바이트 정수 값 내에서 바이트 순서 지정에 다른 규칙을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">일부 컴퓨터에 가장 덜 중요 한 바이트가 먼저 배치 (이 big endian 순서 라고 함) 및 다른 최하위 바이트 먼저 배치 (일명 little endian 순서).</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">네트워크를 통해 전송 되는 모든 정수 값은 서로 다른 바이트 순서를 사용 하는 컴퓨터를 사용 하려면 먼저 가장 중요 한 바이트 있는 네트워크 바이트 순서 전송 됩니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> 메서드 호스트에서 사용 하 여 바이트 순서를 네트워크에서 사용 하는 바이트 순서에서 호스트 시스템에 저장 된 멀티 바이트 정수 값을 변환 합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method to convert an integer value from network byte order to host byte order.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> 호스트 바이트 순서로 네트워크 바이트 순서에서 정수 값을 변환 하는 메서드입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>The number to convert, expressed in network byte order.</source>
          <target state="translated">네트워크 바이트 순서로 변환할 숫자입니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>Converts a long value from network byte order to host byte order.</source>
          <target state="translated">long 값을 네트워크 바이트 순서에서 호스트 바이트 순서로 변환합니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>A long value, expressed in host byte order.</source>
          <target state="translated">호스트 바이트 순서로 표현된 long 값입니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>Different computers use different conventions for ordering the bytes within multibyte integer values.</source>
          <target state="translated">서로 다른 컴퓨터는 멀티 바이트 정수 값 내에서 바이트 순서 지정에 다른 규칙을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</source>
          <target state="translated">일부 컴퓨터에 가장 덜 중요 한 바이트가 먼저 배치 (이 big endian 순서 라고 함) 및 다른 최하위 바이트 먼저 배치 (일명 little endian 순서).</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</source>
          <target state="translated">네트워크를 통해 전송 되는 모든 정수 값은 서로 다른 바이트 순서를 사용 하는 컴퓨터를 사용 하려면 먼저 가장 중요 한 바이트 있는 네트워크 바이트 순서 전송 됩니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> 메서드 호스트에서 사용 하 여 바이트 순서를 네트워크에서 사용 하는 바이트 순서에서 호스트 시스템에 저장 된 멀티 바이트 정수 값을 변환 합니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> method to convert a long value from network byte order to host byte order.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A&gt;</ph> 호스트 바이트 순서로 네트워크 바이트 순서에서 long 값을 변환 하는 메서드입니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.None">
          <source>Provides an IP address that indicates that no network interface should be used.</source>
          <target state="translated">네트워크 인터페이스를 사용하지 않아야 함을 나타내는 IP 주소를 제공합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="F:System.Net.IPAddress.None">
          <source>This field is read-only.</source>
          <target state="translated">이 필드는 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.None">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Net.IPAddress.None&gt;</ph> field to indicate that a <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> must not listen for client activity.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType&gt;</ph> 메서드는 <ph id="ph2">&lt;xref:System.Net.IPAddress.None&gt;</ph> 임을 나타내는 필드는 <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> 클라이언트 활동에 대 한 수신 대기 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.None">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.None&gt;</ph> field is equivalent to 255.255.255.255 in dotted-quad notation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.None&gt;</ph> 필드는 255.255.255.255 점 표기법에 해당 합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.IPAddress.None">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Net.IPAddress.None&gt;</ph> property to indicate that no network interface should be used.</source>
          <target state="translated">사용 하 여 다음 예제는 <ph id="ph1">&lt;xref:System.Net.IPAddress.None&gt;</ph> 네트워크 인터페이스가 없는 사용 해야 함을 나타내는 속성입니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</source>
          <target state="translated">IPv4의 경우 점 구분 네 자리 표기법으로 표현된 IP 주소를 포함하는 문자열이고, IPv6의 경우 콜론과 16진수 표기법으로 표현된 IP 주소를 포함하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>Converts an IP address string to an <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> instance.</source>
          <target state="translated">IP 주소 문자열을 <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> 인스턴스로 변환합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>The static <ph id="ph1">&lt;xref:System.Net.IPAddress.Parse%2A&gt;</ph> method creates an <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> instance from an IP address expressed in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</source>
          <target state="translated">정적 <ph id="ph1">&lt;xref:System.Net.IPAddress.Parse%2A&gt;</ph> 메서드 만듭니다는 <ph id="ph2">&lt;xref:System.Net.IPAddress&gt;</ph> 점 표기법 i p v 4와 i p v 6에 대 한 콜론 16 진수 표기법을 표현 하는 IP 주소에서 인스턴스.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>The number of parts (each part is separated by a period) in <ph id="ph1">`ipString`</ph> determines how the IP address is constructed.</source>
          <target state="translated">(각 부분에 마침표 구분 됨)의 파트 수가 <ph id="ph1">`ipString`</ph> IP 주소가 생성 되는 방식을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>A one part address is stored directly in the network address.</source>
          <target state="translated">한 부분으로 된 주소는 네트워크 주소에 직접 저장 됩니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>A two part address, convenient for specifying a class A address, puts the leading part in the first byte and the trailing part in the right-most three bytes of the network address.</source>
          <target state="translated">두 부분으로 구성 주소 클래스 주소를 지정 하는 데 유용 하며, 첫 번째 바이트 및 후행 가장 오른쪽 3 바이트에서 부분의 네트워크 주소 부분은 넣습니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>A three part address, convenient for specifying a class B address, puts the first part in the first byte, the second part in the second byte, and the final part in the right-most two bytes of the network address.</source>
          <target state="translated">세 부분 주소, 클래스 B 주소를 지정 하는 데 유용 하며, 첫 번째 바이트, 두 번째 바이트의 두 번째 부분 및 네트워크 주소의 가장 오른쪽 2 바이트에 마지막 부분에서 첫 번째 부분을 넣습니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>Number of parts and example <ph id="ph1">`ipString`</ph></source>
          <target state="translated">파트 수와 예제 <ph id="ph1">`ipString`</ph></target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>IPv4 address for IPAddress</source>
          <target state="translated">Ip 주소에 대 한 IPv4 주소</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>1 -- "65535"</source>
          <target state="translated">1 -- "65535"</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>0.0.255.255</source>
          <target state="translated">0.0.255.255</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>2 -- "20.2"</source>
          <target state="translated">2 -- "20.2"</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>20.0.0.2</source>
          <target state="translated">20.0.0.2</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>2 -- "20.65535"</source>
          <target state="translated">2 -- "20.65535"</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>20.0.255.255</source>
          <target state="translated">20.0.255.255</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>3 -- "128.1.2"</source>
          <target state="translated">3 -- "128.1.2"</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>128.1.0.2</source>
          <target state="translated">128.1.0.2</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>The following code converts a string that contains an IP address, in dotted-quad notation for IPv4 or in colon-hexadecimal notation for IPv6, into an instance of the <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> class.</source>
          <target state="translated">다음 코드는 IP 주소, i p v 4에 대 한 점 표기법의 또는의 인스턴스로 i p v 6을 콜론 16 진수 표기법을 포함 하는 문자열을 변환의 <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source>Then it uses the overloaded <ph id="ph1">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> method to display the address in standard notation.</source>
          <target state="translated">그런 다음 오버 로드 된 <ph id="ph1">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> 표준 표기법에서 주소를 표시 하는 메서드.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source><ph id="ph1">&lt;paramref name="ipString" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="ipString" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.Parse(System.String)">
          <source><ph id="ph1">&lt;paramref name="ipString" /&gt;</ph> is not a valid IP address.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="ipString" /&gt;</ph>이 유효한 IP 주소가 아닌 경우</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.ScopeId">
          <source>Gets or sets the IPv6 address scope identifier.</source>
          <target state="translated">IPv6 주소 범위 식별자를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>A long integer that specifies the scope of the address.</source>
          <target state="translated">주소의 범위를 지정하는 정수(Long)입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>The meaning of <ph id="ph1">&lt;xref:System.Net.IPAddress.ScopeId%2A&gt;</ph> changes depending on the context in which it is used.</source>
          <target state="translated">의미 <ph id="ph1">&lt;xref:System.Net.IPAddress.ScopeId%2A&gt;</ph> 사용 되는 컨텍스트에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>Link-local address.</source>
          <target state="translated">링크-로컬 주소입니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>On a host with multiple interfaces connected to separate links, the same link-local address can be assigned to multiple interfaces.</source>
          <target state="translated">개별 링크에 연결 하는 여러 인터페이스를 가진 호스트에서 여러 인터페이스에 동일한 링크-로컬 주소를 할당할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>To eliminate this ambiguity, a scope identifier is used to specify the interface over which messages are exchanged.</source>
          <target state="translated">이 모호성을 피하려면 매길 메시지가 교환 되는 인터페이스를 지정 하려면 범위 식별자 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>Link-local addresses, identified by the Format Prefix (FP) FE80, are used by nodes when communicating with neighboring nodes on the same link.</source>
          <target state="translated">형식 접두사 (FP) FE80로 식별 되는 링크-로컬 주소를 동일한 링크에 인접 한 노드와 통신할 때 노드에 의해 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>Site-local addresses.</source>
          <target state="translated">사이트-로컬 주소입니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>A host can be connected to multiple sites.</source>
          <target state="translated">호스트는 여러 사이트에 연결할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>In this case, a scope identifier is used to indicate a specific site to communicate with.</source>
          <target state="translated">이 경우 범위 식별자는 특정 사이트와 통신할 수를 나타내는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>Site-local addresses, identified by the Format Prefix (FP) FEC0, are used by nodes when communicating on private intranets.</source>
          <target state="translated">형식 접두사 (FP) 되어 있으며 FEC0로 식별 되는 사이트-로컬 주소를 개인 인트라넷에서 통신 하는 경우 노드에서 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>The notation that is used to specify the <ph id="ph1">`ScopeId`</ph> with an address is <ph id="ph2">`Address%ScopeId`</ph>.</source>
          <target state="translated">지정 하는 데 사용 되는 표기법의 <ph id="ph1">`ScopeId`</ph> 주소와는 <ph id="ph2">`Address%ScopeId`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.IPAddress.ScopeId">
          <source>For example, <ph id="ph1">`FE80::5EFE:192.168.41.30%2.`</ph></source>
          <target state="translated">예를 들면 <ph id="ph1">`FE80::5EFE:192.168.41.30%2.`</ph>과 같습니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.ScopeId">
          <source><ph id="ph1">&lt;see langword="AddressFamily" /&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">&lt;see langword="InterNetwork" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="AddressFamily" /&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">&lt;see langword="InterNetwork" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.ScopeId">
          <source><ph id="ph1">&lt;paramref name="scopeId" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="scopeId" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.ScopeId">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="P:System.Net.IPAddress.ScopeId">
          <source><ph id="ph1">&lt;paramref name="scopeId" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> 0x00000000FFFFFFFF</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="scopeId" /&gt;</ph> <ph id="ph2">&amp;gt;</ph> 0x00000000FFFFFFFF</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.ToString">
          <source>Converts an Internet address to its standard notation.</source>
          <target state="translated">인터넷 주소를 표준 표기법으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.ToString">
          <source>A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.</source>
          <target state="translated">IPv4의 경우 점 구분 네 자리 표기법으로 표현된 IP 주소를 포함하는 문자열이고, IPv6의 경우 콜론과 16진수 표기법으로 표현된 IP 주소를 포함하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.ToString">
          <source>The <ph id="ph1">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> method converts the IP address that is stored in the <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> property to either IPv4 dotted-quad or IPv6 colon-hexadecimal notation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.IPAddress.ToString%2A&gt;</ph> 메서드 변환에 저장 되어 있는 IP 주소는 <ph id="ph2">&lt;xref:System.Net.IPAddress.Address%2A&gt;</ph> 속성 쿼드-점으로 구분 된 IPv4 또는 IPv6 콜론 16 진수 표기법을 합니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.ToString">
          <source>The address family is <ph id="ph1">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /&gt;</ph> and the address is bad.</source>
          <target state="translated">주소 패밀리는 <ph id="ph1">&lt;see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /&gt;</ph>이며 주소가 잘못되었습니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>The string to validate.</source>
          <target state="translated">유효성을 검사할 문자열입니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> version of the string.</source>
          <target state="translated">문자열의 <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> 버전입니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>Determines whether a string is a valid IP address.</source>
          <target state="translated">문자열이 유효한 IP 주소인지 확인합니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="ipString" /&gt;</ph> was able to be parsed as an IP address; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="ipString" /&gt;</ph>이 IP 주소로 구문 분석되는 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그러지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>Note that this method accepts as valid an ipString value that can be parsed as an <ph id="ph1">&lt;xref:System.Int64&gt;</ph>, and then treats that Int64 as the long value of an IP address in network byte order, similar to the way that the <ph id="ph2">&lt;xref:System.Net.IPAddress.%23ctor%2A&gt;</ph> constructor does.</source>
          <target state="translated">이 메서드가로 구문 분석할 수 하는 유효한 것으로 ipString 값을 허용 하도록 주의 <ph id="ph1">&lt;xref:System.Int64&gt;</ph>, 다음 해당 Int64 하는 방식과 비슷하게 네트워크 바이트 순서에서 IP 주소의 long 값으로 처리 하는 <ph id="ph2">&lt;xref:System.Net.IPAddress.%23ctor%2A&gt;</ph> 생성자가 합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>This means that this method returns true if the Int64 is parsed successfully, even if it represents an address that's not a valid IP address.</source>
          <target state="translated">이 주소는 올바른 IP 주소를 나타내는 경우에이 메서드는 Int64 성공적으로 구문 분석 되 면 true 반환을 의미 합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>For example, if ipString is "1", this method returns true even though "1" (or 0.0.0.1) is not a valid IP address and you might expect this method to return false.</source>
          <target state="translated">예를 들어 ipString "1" 인 경우이 메서드가 true를 반환 false를 반환 하도록이 메서드를 예상 하 고 "1" (또는 0.0.0.1)은 올바른 IP 주소가 아닙니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>Fixing this bug would break existing apps, so the current behavior will not be changed.</source>
          <target state="translated">이 버그 수정 기존 앱 작동 하지 않으므로 하므로 현재 동작이 변경 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
          <source>Your code can avoid this behavior by ensuring that it only uses this method to parse IP addresses in dotted-decimal format.</source>
          <target state="translated">코드를 소수점 형식에서 IP 주소를 구문 분석만이 방법을 사용 하 여 있는지 확인 하 여이 문제를 방지할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>