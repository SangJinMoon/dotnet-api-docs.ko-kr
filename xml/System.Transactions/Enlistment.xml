<Type Name="Enlistment" FullName="System.Transactions.Enlistment">
  <TypeSignature Language="C#" Value="public class Enlistment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Enlistment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.Enlistment" />
  <TypeSignature Language="VB.NET" Value="Public Class Enlistment" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enlistment" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="68540-101">트랜잭션의 마지막 단계에서 참여한 트랜잭션 참가 요소와 트랜잭션 관리자 간의 통신을 용이하게 합니다.</span><span class="sxs-lookup"><span data-stu-id="68540-101">Facilitates communication between an enlisted transaction participant and the transaction manager during the final phase of the transaction.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68540-102">경우는 <xref:System.Transactions.Transaction.EnlistVolatile%2A> 및 <xref:System.Transactions.Transaction.EnlistDurable%2A> 의 메서드는 <xref:System.Transactions.Transaction> 개체 트랜잭션에서 참가자를 등록 하기 위해 호출 되는 인 리스트 먼 트를 설명 하는이 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="68540-102">When the <xref:System.Transactions.Transaction.EnlistVolatile%2A> and <xref:System.Transactions.Transaction.EnlistDurable%2A> methods of the <xref:System.Transactions.Transaction> object are invoked to enlist a participant in a transaction, they return this object describing the enlistment.</span></span>  
  
 <span data-ttu-id="68540-103">트랜잭션 커밋의 마지막 단계는 트랜잭션 관리자를 구현 하는 리소스 관리자에 게이 개체를 전달 된 <xref:System.Transactions.IEnlistmentNotification> 가 트랜잭션에 참여 하는 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="68540-103">During the final phase of the transaction commit, the transaction manager passes this object to a resource manager implementing the <xref:System.Transactions.IEnlistmentNotification> interface that has enlisted in a transaction.</span></span> <span data-ttu-id="68540-104">특히, 트랜잭션 관리자 호출 중 하나는 <xref:System.Transactions.IEnlistmentNotification.Commit%2A> 또는 <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> 여부 후자에서 하기로 트랜잭션을 커밋하거나에 따라 참가자의 메서드.</span><span class="sxs-lookup"><span data-stu-id="68540-104">Specifically, the transaction manager calls either the <xref:System.Transactions.IEnlistmentNotification.Commit%2A> or the <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> method of the participant, depending on whether the latter has decided to commit or roll back the transaction.</span></span> <span data-ttu-id="68540-105">참가자를 호출 해야 합니다는 <xref:System.Transactions.Enlistment.Done%2A> 트랜잭션 관리자는 작업이 완료 되었음을 알 수 있도록이 개체의 메서드.</span><span class="sxs-lookup"><span data-stu-id="68540-105">The participant should call the <xref:System.Transactions.Enlistment.Done%2A> method of this object to let the transaction manager know that it has completed its work.</span></span>  
  
 <span data-ttu-id="68540-106">인 리스트 먼 트를 호출할 수는 <xref:System.Transactions.Enlistment.Done%2A> 메서드 전에 언제 든 지 라 부릅니다 <xref:System.Transactions.PreparingEnlistment.Prepared%2A> 준비 단계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68540-106">An enlistment can call the <xref:System.Transactions.Enlistment.Done%2A> method at anytime before it has called <xref:System.Transactions.PreparingEnlistment.Prepared%2A> in the prepare phase.</span></span>  <span data-ttu-id="68540-107">이렇게 하면 해당 인 리스트 먼 트랜잭션에서 커밋 응답 하지만 최종 결과 수신 하지 않아도 의미 읽기 전용 투표를 캐스팅은 했습니다.</span><span class="sxs-lookup"><span data-stu-id="68540-107">By doing so, the enlistment is casting a read only vote, meaning that it votes commit on the transaction but does not need to receive the final outcome.</span></span> <span data-ttu-id="68540-108">유의 후의 <xref:System.Transactions.Enlistment.Done%2A> 메서드가 호출 되 면 등록 된 참가자는 트랜잭션 관리자에서 더 이상 알림을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="68540-108">Note that, after the <xref:System.Transactions.Enlistment.Done%2A> method is called, the enlisted participant receives no further notifications from the transaction manager.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="68540-109">다음 예제에서는의 구현을 보여 줍니다.는 <xref:System.Transactions.IEnlistmentNotification> 인터페이스 및 시기는 <xref:System.Transactions.Enlistment.Done%2A> 메서드를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="68540-109">The following example shows an implementation of the <xref:System.Transactions.IEnlistmentNotification> interface, and when the <xref:System.Transactions.Enlistment.Done%2A> method should be called.</span></span>  
  
 [!code-csharp[Tx_Enlist#2](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#2)]
 [!code-vb[Tx_Enlist#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="68540-110">이 형식은 스레드로부터 안전합니다.</span><span class="sxs-lookup"><span data-stu-id="68540-110">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Transactions.PreparingEnlistment" />
    <altmember cref="T:System.Transactions.IEnlistmentNotification" />
  </Docs>
  <Members>
    <Member MemberName="Done">
      <MemberSignature Language="C#" Value="public void Done ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Done() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Enlistment.Done" />
      <MemberSignature Language="VB.NET" Value="Public Sub Done ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Done();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="68540-111">트랜잭션 참가 요소가 작업을 완료했음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="68540-111">Indicates that the transaction participant has completed its work.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="68540-112">트랜잭션 커밋의 마지막 단계는 트랜잭션 관리자 호출는 <xref:System.Transactions.IEnlistmentNotification.Commit%2A>, <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> 또는 <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> 트랜잭션이 커밋 또는 롤백 인지에 따라 참가자의 메서드.</span><span class="sxs-lookup"><span data-stu-id="68540-112">During the final phase of the transaction commit, the transaction manager calls either the <xref:System.Transactions.IEnlistmentNotification.Commit%2A>, <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> or <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> method of the participant, depending on whether the transaction is to be committed or rolled back.</span></span> <span data-ttu-id="68540-113">트랜잭션을 완료 하 고 다음 트랜잭션 관리자를 호출 하 여 완료 했음을 알립니다 하는 데 필요한 작업을 수행한 리소스 관리자는 <xref:System.Transactions.Enlistment.Done%2A> 에서 메서드는 `enlistment` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="68540-113">The resource manager should perform any work necessary to finish the transaction and then inform the transaction manager that it has finished by calling the <xref:System.Transactions.Enlistment.Done%2A> method on the `enlistment` parameter.</span></span>  
  
 <span data-ttu-id="68540-114">리소스 관리자가, 영속적 참여 하지만 호출 하 여 응답 하지 않는 경우 <xref:System.Transactions.Enlistment.Done%2A> 메서드, 트랜잭션 관리자는 리소스 관리자는 해당 알림 호출을 받았는지 있는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="68540-114">If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the respective notification call.</span></span> <span data-ttu-id="68540-115">따라서 트랜잭션 관리자에 대 한 응답 대기 및 관련 정보가이 거래를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="68540-115">As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.</span></span>  <span data-ttu-id="68540-116">경우 <xref:System.Transactions.Enlistment.Done%2A> 가 호출 되지 정보의이 부분을 무기한 보관 됩니다 메모리 또는 시스템 수준 리소스입니다.</span><span class="sxs-lookup"><span data-stu-id="68540-116">If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource.</span></span> <span data-ttu-id="68540-117">따라서 리소스를 회수할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="68540-117">This results in resources not being able to be reclaimed.</span></span> <span data-ttu-id="68540-118">분산 트랜잭션에서이 수는 MSDTC 로그가 가득 MSDTC 프로세스를 중단 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="68540-118">In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process.</span></span> <span data-ttu-id="68540-119">관리 하는 트랜잭션의 경우 <xref:System.Transactions>,이 인해 리소스 관리자의 프로세스의 메모리 소비량에 점진적으로 지속적으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="68540-119">In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process.</span></span> <span data-ttu-id="68540-120">따라서 것이 호출 하는 데 중요는 <xref:System.Transactions.Enlistment.Done%2A> 메서드 리소스 관리자 작업을 완료 한 후 프로그램 작업을 준비 합니다.</span><span class="sxs-lookup"><span data-stu-id="68540-120">Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.</span></span>  
  
 <span data-ttu-id="68540-121">인 리스트 먼 트를 호출할 수는 <xref:System.Transactions.Enlistment.Done%2A> 메서드 전에 언제 든 지 라 부릅니다 <xref:System.Transactions.PreparingEnlistment.Prepared%2A> 준비 단계에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="68540-121">An enlistment can call the <xref:System.Transactions.Enlistment.Done%2A> method at anytime before it has called <xref:System.Transactions.PreparingEnlistment.Prepared%2A> in the prepare phase.</span></span> <span data-ttu-id="68540-122">이렇게 하면 해당 인 리스트 먼 트랜잭션에서 커밋 응답 하지만 최종 결과 수신 하지 않아도 의미 읽기 전용 투표를 캐스팅은 했습니다.</span><span class="sxs-lookup"><span data-stu-id="68540-122">By doing so, the enlistment is casting a read only vote, meaning that it votes commit on the transaction but does not need to receive the final outcome.</span></span> <span data-ttu-id="68540-123">즉,이 메서드가 호출 되 면 등록 된 참가자 없습니다 더 이상 알림을 받지 트랜잭션 관리자에서 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="68540-123">Note that, after this method is called, the enlisted participant receives no further notifications from the transaction manager.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Transactions.PreparingEnlistment" />
        <altmember cref="T:System.Transactions.IEnlistmentNotification" />
      </Docs>
    </Member>
  </Members>
</Type>