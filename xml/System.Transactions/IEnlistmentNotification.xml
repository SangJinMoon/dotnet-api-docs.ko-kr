<Type Name="IEnlistmentNotification" FullName="System.Transactions.IEnlistmentNotification">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ce7c186bfa7974506e6f23870b923c6bfab1a333" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36406449" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEnlistmentNotification" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnlistmentNotification" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.IEnlistmentNotification" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnlistmentNotification" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEnlistmentNotification" />
  <TypeSignature Language="F#" Value="type IEnlistmentNotification = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="fd359-101">리소스 관리자가 참여를 위해 등록할 때 트랜잭션 관리자에 대한 2단계 커밋 알림 콜백을 제공하기 위해 구현해야 하는 인터페이스에 대해 설명합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fd359-101">Describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd359-102">리소스 관리자가 트랜잭션에 참여할 수 순서로 트랜잭션 관리자를 통해 트랜잭션에 참여 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-102">In order for a resource manager to participate in a transaction, it must enlist in the transaction through the transaction manager.</span></span> <span data-ttu-id="fd359-103"><xref:System.Transactions.Transaction> 클래스는 이 기능을 제공하며 이름이 `Enlist`로 시작되는 메서드 집합을 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-103">The <xref:System.Transactions.Transaction> class defines a set of methods whose names begin with `Enlist` that provide this functionality.</span></span> <span data-ttu-id="fd359-104">서로 다른 `Enlist` 메서드는 리소스 관리자가 있을 수 있는 인 리스트 먼 트의 다른 형식에 해당 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-104">The different `Enlist` methods correspond to the different types of enlistment that a resource maanger may have.</span></span>  
  
 <span data-ttu-id="fd359-105">이 클래스는 참여할 때 트랜잭션 관리자에 대 한 2 단계 커밋 알림 콜백을 제공 하는 리소스 관리자를 구현 해야 하는 인터페이스를 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-105">This class describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.</span></span> <span data-ttu-id="fd359-106">각 리소스 관리자 구현에 대 한는 <xref:System.Transactions.IEnlistmentNotification> 인터페이스를 참여 시켜야를 사용 하는 <xref:System.Transactions.Transaction.EnlistVolatile%2A> 메서드 또는 <xref:System.Transactions.Transaction.EnlistDurable%2A> 의 메서드는 <xref:System.Transactions.Transaction> 일시적 또는 지 속성에 리소스 인지에 따라 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-106">For each resource manager's implementation of the <xref:System.Transactions.IEnlistmentNotification> interface, you should enlist it using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method or the <xref:System.Transactions.Transaction.EnlistDurable%2A> method of the <xref:System.Transactions.Transaction> class, depending on whether your resource is volatile or durable.</span></span> <span data-ttu-id="fd359-107">인 리스트 먼 트 및 2PC에 대 한 자세한 내용은 참조 하십시오. [트랜잭션에서 참가자 인 리스트 먼 트 리소스](~/docs/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction.md) 및 [단일 단계 및 다중 단계에서 트랜잭션 커밋](~/docs/framework/data/transactions/committing-a-transaction-in-single-phase-and-multi-phase.md) 각각.</span><span class="sxs-lookup"><span data-stu-id="fd359-107">For more information on enlistment and 2PC, see [Enlisting Resources as Participants in a Transaction](~/docs/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction.md) and [Committing a Transaction in Single-Phase and Multi-Phase](~/docs/framework/data/transactions/committing-a-transaction-in-single-phase-and-multi-phase.md) respectively.</span></span>  
  
 <span data-ttu-id="fd359-108">트랜잭션 관리자 2 단계 커밋 프로토콜의 각 단계에서 다음과 같은 방법으로 참여 한 개체를에 알립니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-108">The transaction manager notifies the enlisted object at different phases of the Two Phase Commit Protocol by the following methods.</span></span>  
  
|<span data-ttu-id="fd359-109">메서드</span><span class="sxs-lookup"><span data-stu-id="fd359-109">Method</span></span>|<span data-ttu-id="fd359-110">설명</span><span class="sxs-lookup"><span data-stu-id="fd359-110">Description</span></span>|  
|------------|-----------------|  
|<xref:System.Transactions.IEnlistmentNotification.Prepare%2A>|<span data-ttu-id="fd359-111">트랜잭션 관리자가 트랜잭션을 커밋할 수 있는 여부 참가 하는 경우는 트랜잭션의 첫 번째 단계는 트랜잭션 관리자 참여 한 개체의이 메서드는 콜백으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-111">This method of an enlisted object is used as a callback by the Transaction Manager during the first phase of a transaction, when the transaction manager asks participants whether they can commit the transaction.</span></span>|  
|<xref:System.Transactions.IEnlistmentNotification.Commit%2A>|<span data-ttu-id="fd359-112">트랜잭션이 커밋되지 않으면 트랜잭션의 두 번째 단계 트랜잭션 관리자가 참여 한 개체의이 메서드는 콜백으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-112">This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is commited.</span></span>|  
|<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>|<span data-ttu-id="fd359-113">(즉, 롤백됩니다) 트랜잭션이 중단 되는 경우 트랜잭션의 두 번째 단계에서 트랜잭션 관리자 참여 한 개체의이 메서드는 콜백으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-113">This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is aborted (that is, rolled back).</span></span>|  
|<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>|<span data-ttu-id="fd359-114">트랜잭션이 확실 하지 않은 경우 트랜잭션의 두 번째 단계는 트랜잭션 관리자 참여 한 개체의이 메서드는 콜백으로 사용.</span><span class="sxs-lookup"><span data-stu-id="fd359-114">This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is in doubt.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="fd359-115">순차적으로 또는 특정 한 순서로 알림이 전송 되지 않습니다 수 알고 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-115">You should be aware that notifications might not be sent sequentially, or in a particular order.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fd359-116">다음 예제에서는 개체의 사용 하 여 트랜잭션 참가자로 등록 뿐만 아니라이 인터페이스의 구현을 보여 줍니다.는 <xref:System.Transactions.Transaction.EnlistVolatile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="fd359-116">The following example shows an implementation of this interface, as well as enlisting the object as a participant in a transaction using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method.</span></span>  
  
 [!code-csharp[Tx_Enlist#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#1)]
 [!code-vb[Tx_Enlist#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Transactions.ISinglePhaseNotification" />
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member Commit : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.Commit enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment">
          <span data-ttu-id="fd359-117">트랜잭션 관리자에게 응답을 보내는 데 사용되는 <see cref="T:System.Transactions.Enlistment" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fd359-117">An <see cref="T:System.Transactions.Enlistment" /> object used to send a response to the transaction manager.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fd359-118">참여한 개체에게 트랜잭션이 커밋 중임을 알립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fd359-118">Notifies an enlisted object that a transaction is being committed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd359-119">트랜잭션 관리자는 모든 참가자가 트랜잭션을 커밋하는 지시할 때 커밋의 두 번째 단계는 참여 한 개체의이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-119">The transaction manager calls this method of an enlisted object during the second phase of a commitment, when it instructs all participants to commit the transaction.</span></span>  
  
 <span data-ttu-id="fd359-120">트랜잭션을 완료 하 고 다음 TM 호출 하 여 완료 되었음을 알립니다 하는 데 필요한 작업을 수행한 리소스 관리자는 <xref:System.Transactions.Enlistment.Done%2A> 에서 메서드는 `enlistment` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-120">The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <xref:System.Transactions.Enlistment.Done%2A> method on the `enlistment` parameter.</span></span>  
  
 <span data-ttu-id="fd359-121">리소스 관리자가, 영속적 참여 하지만 호출 하 여 응답 하지 않는 경우 <xref:System.Transactions.Enlistment.Done%2A> 메서드, 트랜잭션 관리자는 리소스 관리자 받았는지 확인 해야는 <xref:System.Transactions.IEnlistmentNotification.Commit%2A> 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-121">If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.Commit%2A> call.</span></span> <span data-ttu-id="fd359-122">따라서 트랜잭션 관리자에 대 한 응답 대기 및 관련 정보가이 거래를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-122">As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.</span></span>  <span data-ttu-id="fd359-123">경우 <xref:System.Transactions.Enlistment.Done%2A> 가 호출 되지 정보의이 부분을 무기한 보관 됩니다 메모리 또는 시스템 수준 리소스입니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-123">If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource.</span></span> <span data-ttu-id="fd359-124">따라서 리소스를 회수할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-124">This results in resources not being able to be reclaimed.</span></span> <span data-ttu-id="fd359-125">분산 트랜잭션에서이 수는 MSDTC 로그가 가득 MSDTC 프로세스를 중단 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-125">In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process.</span></span> <span data-ttu-id="fd359-126">관리 하는 트랜잭션의 경우 <xref:System.Transactions>,이 인해 리소스 관리자의 프로세스의 메모리 소비량에 점진적으로 지속적으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-126">In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process.</span></span> <span data-ttu-id="fd359-127">따라서 것이 호출 하는 데 중요는 <xref:System.Transactions.Enlistment.Done%2A> 메서드 리소스 관리자 작업을 완료 한 후 프로그램 작업을 준비 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-127">Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InDoubt">
      <MemberSignature Language="C#" Value="public void InDoubt (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InDoubt(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InDoubt(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member InDoubt : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.InDoubt enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment">
          <span data-ttu-id="fd359-128">트랜잭션 관리자에게 응답을 보내는 데 사용되는 <see cref="T:System.Transactions.Enlistment" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fd359-128">An <see cref="T:System.Transactions.Enlistment" /> object used to send a response to the transaction manager.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fd359-129">트랜잭션이 의심스러운 상태임을 참여한 개체에게 알립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fd359-129">Notifies an enlisted object that the status of a transaction is in doubt.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd359-130">이 메서드는 트랜잭션 관리자가 단일 지속형 리소스를 단일 단계 커밋 작업을 호출 하 고 지속적인 리소스 연결을 트랜잭션 결과 가져오기 전에 손실 된 후 일시적 리소스에 대해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-130">This method is called for volatile resources when the transaction manager has invoked a single phase commit operation to a single durable resource, and then connection to the durable resource was lost prior to getting the transaction result.</span></span> <span data-ttu-id="fd359-131">해당 시점에 트랜잭션 결과 안전 하 게 확인할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-131">At that point, the transaction outcome cannot be safely determined.</span></span>  
  
 <span data-ttu-id="fd359-132">으로 <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> 는 트랜잭션에 대 한 최종 상태로 간주를 호출 하지 않아야 <xref:System.Transactions.IEnlistmentNotification.Commit%2A> 또는 <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> 호출한 후 <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-132">As <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> is considered to be a final state for a transaction, you should not call <xref:System.Transactions.IEnlistmentNotification.Commit%2A> or <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> after calling <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="fd359-133">일시적 리소스에 대 한이 메서드의 구현 영향을 받는 데이터에 대해 인식함 어떤 복구 또는 제약 작업을 수행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-133">Your implementation of this method for the volatile resource should perform whatever recovery or containment operation it understands on the affected data.</span></span>  <span data-ttu-id="fd359-134">도 호출 해야는 <xref:System.Transactions.Enlistment.Done%2A> 에서 메서드는에 `enlistment` 의 작업 완료 될 때 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-134">It must also call the <xref:System.Transactions.Enlistment.Done%2A> method on the on the `enlistment` parameter when it has finished its work.</span></span>  
  
 <span data-ttu-id="fd359-135">리소스 관리자가, 영속적 참여 하지만 호출 하 여 응답 하지 않는 경우 <xref:System.Transactions.Enlistment.Done%2A> 메서드, 트랜잭션 관리자는 리소스 관리자 받았는지 확인 해야는 <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-135">If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> call.</span></span> <span data-ttu-id="fd359-136">따라서 트랜잭션 관리자에 대 한 응답 대기 및 관련 정보가이 거래를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-136">As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.</span></span>  <span data-ttu-id="fd359-137">경우 <xref:System.Transactions.Enlistment.Done%2A> 가 호출 되지 정보의이 부분을 무기한 보관 됩니다 메모리 또는 시스템 수준 리소스입니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-137">If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource.</span></span> <span data-ttu-id="fd359-138">따라서 리소스를 회수할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-138">This results in resources not being able to be reclaimed.</span></span> <span data-ttu-id="fd359-139">분산 트랜잭션에서이 수는 MSDTC 로그가 가득 MSDTC 프로세스를 중단 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-139">In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process.</span></span> <span data-ttu-id="fd359-140">관리 하는 트랜잭션의 경우 <xref:System.Transactions>,이 인해 리소스 관리자의 프로세스의 메모리 소비량에 점진적으로 지속적으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-140">In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process.</span></span> <span data-ttu-id="fd359-141">따라서 것이 호출 하는 데 중요는 <xref:System.Transactions.Enlistment.Done%2A> 메서드 리소스 관리자 작업을 완료 한 후 프로그램 작업을 준비 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-141">Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public void Prepare (System.Transactions.PreparingEnlistment preparingEnlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Prepare(class System.Transactions.PreparingEnlistment preparingEnlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Prepare(System::Transactions::PreparingEnlistment ^ preparingEnlistment);" />
      <MemberSignature Language="F#" Value="abstract member Prepare : System.Transactions.PreparingEnlistment -&gt; unit" Usage="iEnlistmentNotification.Prepare preparingEnlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preparingEnlistment" Type="System.Transactions.PreparingEnlistment" />
      </Parameters>
      <Docs>
        <param name="preparingEnlistment">
          <span data-ttu-id="fd359-142">트랜잭션 관리자에게 응답을 보내는 데 사용되는 <see cref="T:System.Transactions.PreparingEnlistment" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fd359-142">A <see cref="T:System.Transactions.PreparingEnlistment" /> object used to send a response to the transaction manager.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fd359-143">트랜잭션이 커밋 준비 중임을 참여한 개체에게 알립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fd359-143">Notifies an enlisted object that a transaction is being prepared for commitment.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd359-144">트랜잭션 관리자는이 메서드를 호출 참여 한 리소스의 관리자 커밋의 1 단계 묻는 메시지가 나타나면 참가자가 트랜잭션을 커밋할 수 있는 여부.</span><span class="sxs-lookup"><span data-stu-id="fd359-144">The transaction manager calls this method of an enlisted resource manager during the phase 1 of a commitment, when it asks participants whether they can commit the transaction.</span></span>  
  
 <span data-ttu-id="fd359-145">로깅해야 영구 리소스 관리자를 구현 하는 경우에이 단계 동안 레코드를 준비 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-145">When you are implementing a durable resource manager, you should log your prepare record during this phase.</span></span> <span data-ttu-id="fd359-146">레코드 복구를 수행 하는 데 필요한 모든 정보를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-146">The record should contain all the necessary information to perform recovery.</span></span> <span data-ttu-id="fd359-147">여기에는 <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> 속성에서 트랜잭션 관리자에 전달 되는 <xref:System.Transactions.TransactionManager.Reenlist%2A> 복구 하는 동안 메서드.</span><span class="sxs-lookup"><span data-stu-id="fd359-147">This includes the <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> property, which is passed to the transaction manager in the <xref:System.Transactions.TransactionManager.Reenlist%2A> method during recovery.</span></span> <span data-ttu-id="fd359-148">복구에 대 한 자세한 내용은 참조 하십시오. [복구 수행](http://msdn.microsoft.com/library/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-148">For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/library/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).</span></span>  
  
 <span data-ttu-id="fd359-149">리소스 관리자 호출 하기 전에 완료 해야 하는 모든 작업을 완료는 <xref:System.Transactions.PreparingEnlistment.Prepared%2A> 의 메서드는 `preparingEnlistment` 커밋 결정을 나타내기 위해 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-149">Your resource manager should complete all work that must be finished before calling the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method of the `preparingEnlistment` parameter to indicate its vote for commitment.</span></span> <span data-ttu-id="fd359-150">이 프로세스를 완료 커밋, 롤백 또는 의심 스러운에서 모든 2 단계 알림을 받기 전에 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-150">You should make sure that this is accomplished before receiving any phase 2 notification such as commit, rollback or in doubt.</span></span> <span data-ttu-id="fd359-151">2 단계 알림을 인라인 호출 하는 동일한 스레드에서 발생할 수 있으므로이는 <xref:System.Transactions.PreparingEnlistment.Prepared%2A> 1 단계에서 메서드.</span><span class="sxs-lookup"><span data-stu-id="fd359-151">This is because phase 2 notifications can happen inline on the same thread that called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method in phase 1.</span></span> <span data-ttu-id="fd359-152">따라서 <xref:System.Transactions.PreparingEnlistment.Prepared%2A> 호출 후에는 잠금 해제를 비롯하여 2단계 알림을 받기 전에 끝내야 하는 어떤 작업도 수행하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-152">As such, you should not do any work after the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> call (for example, releasing locks) that you would expect to have completed before receiving the phase 2 notifications.</span></span>  
  
 <span data-ttu-id="fd359-153">메서드를 호출할 수도 있습니다는 `preparingEnlistment` 롤백에 대 한 투표를 나타내기 위해 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-153">You can also call the method of the `preparingEnlistment` parameter to indicate a vote for rollback.</span></span>  
  
 <span data-ttu-id="fd359-154">호출 해야이 메서드의 구현이에 참여 하지 않고 원하는 개체를 단순히 관찰 하 고 트랜잭션이 진행 상황에 반응 하는 경우는 <xref:System.Transactions.Enlistment.Done%2A> 의 메서드는 `preparingEnlistment` 의 작업 완료 될 때 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-154">If you want the object to merely observe and react to the progress of the transaction, without participating in it, your implementation of this method should call the <xref:System.Transactions.Enlistment.Done%2A> method of the `preparingEnlistment` parameter when it has finished its work.</span></span> <span data-ttu-id="fd359-155">이렇게 하면 리소스 관리자 게 2 단계 알림을 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-155">By doing so, your resource manager would not receive any phase 2 notification.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Rollback(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rollback(System::Transactions::Enlistment ^ enlistment);" />
      <MemberSignature Language="F#" Value="abstract member Rollback : System.Transactions.Enlistment -&gt; unit" Usage="iEnlistmentNotification.Rollback enlistment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment">
          <span data-ttu-id="fd359-156">트랜잭션 관리자에게 응답을 보내는 데 사용되는 <see cref="T:System.Transactions.Enlistment" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fd359-156">A <see cref="T:System.Transactions.Enlistment" /> object used to send a response to the transaction manager.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fd359-157">트랜잭션이 롤백(중단) 중임을 참여한 개체에게 알립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fd359-157">Notifies an enlisted object that a transaction is being rolled back (aborted).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fd359-158">트랜잭션 관리자 트랜잭션이 롤백되고 ()으로 인해 중단 된 하나 이상의 트랜잭션 참가자가 트랜잭션을 커밋할 수 없을 때 참여 한 개체의이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-158">The transaction manager calls this method of an enlisted object when the transaction is being rolled back (aborted) due to the inability of one or more transaction participants to commit the transaction.</span></span>  
  
 <span data-ttu-id="fd359-159">트랜잭션을 완료 하 고 다음 TM 호출 하 여 완료 되었음을 알립니다 하는 데 필요한 작업을 수행한 리소스 관리자는 <xref:System.Transactions.Enlistment.Done%2A> 에서 메서드는 `enlistment` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-159">The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <xref:System.Transactions.Enlistment.Done%2A> method on the `enlistment` parameter.</span></span>  
  
 <span data-ttu-id="fd359-160">리소스 관리자가, 영속적 참여 하지만 호출 하 여 응답 하지 않는 경우 <xref:System.Transactions.Enlistment.Done%2A> 메서드, 트랜잭션 관리자는 리소스 관리자 받았는지 확인 해야는 <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-160">If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> call.</span></span> <span data-ttu-id="fd359-161">따라서 트랜잭션 관리자에 대 한 응답 대기 및 관련 정보가이 거래를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-161">As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.</span></span>  <span data-ttu-id="fd359-162">경우 <xref:System.Transactions.Enlistment.Done%2A> 가 호출 되지 정보의이 부분을 무기한 보관 됩니다 메모리 또는 시스템 수준 리소스입니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-162">If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource.</span></span> <span data-ttu-id="fd359-163">따라서 리소스를 회수할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-163">This results in resources not being able to be reclaimed.</span></span> <span data-ttu-id="fd359-164">분산 트랜잭션에서이 수는 MSDTC 로그가 가득 MSDTC 프로세스를 중단 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-164">In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process.</span></span> <span data-ttu-id="fd359-165">관리 하는 트랜잭션의 경우 <xref:System.Transactions>,이 인해 리소스 관리자의 프로세스의 메모리 소비량에 점진적으로 지속적으로 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-165">In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process.</span></span> <span data-ttu-id="fd359-166">따라서 것이 호출 하는 데 중요는 <xref:System.Transactions.Enlistment.Done%2A> 메서드 리소스 관리자 작업을 완료 한 후 프로그램 작업을 준비 합니다.</span><span class="sxs-lookup"><span data-stu-id="fd359-166">Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>