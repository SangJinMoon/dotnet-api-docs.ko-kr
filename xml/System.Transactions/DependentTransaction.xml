<Type Name="DependentTransaction" FullName="System.Transactions.DependentTransaction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="14e78653203d9978eb1016724756f6e0d100a474" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36605359" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependentTransaction : System.Transactions.Transaction, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DependentTransaction extends System.Transactions.Transaction implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.DependentTransaction" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependentTransaction&#xA;Inherits Transaction&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependentTransaction sealed : System::Transactions::Transaction, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DependentTransaction = class&#xA;    inherit Transaction&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Transactions.Transaction</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="0a816-101">Describes a clone of a transaction providing guarantee that the transaction cannot be committed until the application comes to rest regarding work on the transaction.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0a816-101">Describes a clone of a transaction providing guarantee that the transaction cannot be committed until the application comes to rest regarding work on the transaction.</span>
      </span>
      <span data-ttu-id="0a816-102">This class cannot be inherited.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0a816-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a816-103"><xref:System.Transactions.DependentTransaction> 복제는 <xref:System.Transactions.Transaction> 사용 하 여 만든 개체는 <xref:System.Transactions.Transaction.DependentClone%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="0a816-103">The <xref:System.Transactions.DependentTransaction> is a clone of a <xref:System.Transactions.Transaction> object created using the <xref:System.Transactions.Transaction.DependentClone%2A> method.</span></span>  <span data-ttu-id="0a816-104">응용 프로그램 작업 (예를 들어 작업자 스레드)에 트랜잭션 작업이 수행 되는 동안 트랜잭션을 커밋할 수 없습니다 않도록 보장 하기 중지를 허용 하는 해당 목적으로 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="0a816-104">Its sole purpose is to allow the application to come to rest and guarantee that the transaction cannot commit while work is still being performed on the transaction (for example, on a worker thread).</span></span>  
  
 <span data-ttu-id="0a816-105">사용 하 여 트랜잭션의 작성자를 알릴 수 있는 복제 된 트랜잭션 내에서 수행 되는 작업 완전 하 고 커밋할 준비가 마지막 이면는 <xref:System.Transactions.DependentTransaction.Complete%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="0a816-105">When the work done within the cloned transaction is finally complete and ready to be committed, it can inform the creator of the transaction using the <xref:System.Transactions.DependentTransaction.Complete%2A> method.</span></span> <span data-ttu-id="0a816-106">따라서 일관성과 데이터의 정확성을 유지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0a816-106">Thus you can preserve the consistency and correctness of data.</span></span>  
  
 <span data-ttu-id="0a816-107"><xref:System.Transactions.DependentCloneOption> 열거형 커밋 시 동작을 결정 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0a816-107">The <xref:System.Transactions.DependentCloneOption> enumeration is used to determine the behavior on commit.</span></span>  <span data-ttu-id="0a816-108">이 동작은 컨트롤을 사용 하면 응용 프로그램이 rest 동시성 지원을 제공 하는 것은 물론에 중지 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="0a816-108">This behavior control allows an application to come to rest, as well as provides concurrency support.</span></span> <span data-ttu-id="0a816-109">이 열거형을 사용 하는 방법에 대 한 자세한 내용은 참조 하십시오. [DependentTransaction 사용 하 여 동시성 관리](http://msdn.microsoft.com/library/bdad8468-2a90-4b81-8375-278067120cab)합니다.</span><span class="sxs-lookup"><span data-stu-id="0a816-109">For more information on how this enumeration is used, see [Managing Concurrency with DependentTransaction](http://msdn.microsoft.com/library/bdad8468-2a90-4b81-8375-278067120cab).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a816-110">다음 예제에서는 종속 트랜잭션을 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="0a816-110">The following example shows you how to create a dependent transaction.</span></span>  
  
 [!code-csharp[Tx_DependentTx#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_dependenttx/cs/dependenttx.cs#1)]
 [!code-vb[Tx_DependentTx#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_dependenttx/vb/dependenttx.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="0a816-111">이 형식은 스레드로부터 안전합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0a816-111">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.DependentTransaction.Complete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Complete();" />
      <MemberSignature Language="F#" Value="override this.Complete : unit -&gt; unit" Usage="dependentTransaction.Complete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0a816-112">Attempts to complete the dependent transaction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0a816-112">Attempts to complete the dependent transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a816-113">종속 복제본 트랜잭션 작성자 게 해당 작업을 마친 경우 부모 이미 준비 되어 트랜잭션이 커밋할 수 있습니다이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="0a816-113">Call this method when the dependent clone wants to inform the creator of the transaction that it has finished its work, and the transaction can be committed if the parent is also ready.</span></span>  
  
 <span data-ttu-id="0a816-114">이 메서드를 호출한 후에 트랜잭션에 대 한 추가 작업을 시도 하지 않아야 또는 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0a816-114">After this call is invoked, you should not attempt any additional work on the transaction, or an exception is thrown.</span></span>  
  
 <span data-ttu-id="0a816-115">응용 프로그램 도메인이 다운 되는 경우이 메서드가 호출 되 고 트랜잭션이 완료 되기 전에 트랜잭션이 중단 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0a816-115">If the application domain goes down after this method is called, and before the transaction is completed, the transaction might abort.</span></span>  
  
 <span data-ttu-id="0a816-116">**참고** 종속 트랜잭션이 작동 하는 동안이 메서드를 한 번만 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="0a816-116">**Note** This method should be called only once during the dependent transaction's lifetime.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Transactions.TransactionException">
          <span data-ttu-id="0a816-117">Any attempt for additional work on the transaction after this method is called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0a816-117">Any attempt for additional work on the transaction after this method is called.</span>
          </span>
          <span data-ttu-id="0a816-118">These include invoking methods such as <see cref="Overload:System.Transactions.Transaction.EnlistVolatile" />, <see cref="Overload:System.Transactions.Transaction.EnlistDurable" />, <see cref="M:System.Transactions.Transaction.Clone" />, <see cref="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)" /> , or any serialization operations on the transaction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0a816-118">These include invoking methods such as <see cref="Overload:System.Transactions.Transaction.EnlistVolatile" />, <see cref="Overload:System.Transactions.Transaction.EnlistDurable" />, <see cref="M:System.Transactions.Transaction.Clone" />, <see cref="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)" /> , or any serialization operations on the transaction.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.DependentTransaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>