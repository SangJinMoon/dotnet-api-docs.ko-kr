<Type Name="IContractBehaviorAttribute" FullName="System.ServiceModel.Description.IContractBehaviorAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fb25c9bff84e2b2782cf8b483630323908c462b2" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37456654" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IContractBehaviorAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContractBehaviorAttribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IContractBehaviorAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContractBehaviorAttribute" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContractBehaviorAttribute" />
  <TypeSignature Language="F#" Value="type IContractBehaviorAttribute = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="f8230-101">
        <see cref="T:System.ServiceModel.Description.IContractBehavior" /> 인터페이스를 구현하는 특성이 활성화되는 계약을 지정합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f8230-101">Specifies the contract for which an attribute that implements the <see cref="T:System.ServiceModel.Description.IContractBehavior" /> interface is active.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8230-102">서비스 유형에 대한 계약 동작 특성을 사용하려 하지만 <xref:System.ServiceModel.Description.IContractBehaviorAttribute> 속성에 지정된 계약으로 적용을 제한하려면 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> 개체이기도 한 특성에서 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> 인터페이스를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="f8230-102">Implement the <xref:System.ServiceModel.Description.IContractBehaviorAttribute> interface on an attribute that is also an <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> object to enable the use of that contract behavior attribute on a service type but restrict its application to the contract specified in the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> property.</span></span>  
  
 <span data-ttu-id="f8230-103">사용자 지정 계약 동작 특성에 대한 <xref:System.ServiceModel.Description.IContractBehaviorAttribute> 구현 요구 사항은 없으며, 특성을 계약 인터페이스 또는 이중 콜백 클래스에 적용할 경우 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> 속성 값은 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8230-103">There is no requirement to implement <xref:System.ServiceModel.Description.IContractBehaviorAttribute> on custom contract behavior attributes, and if the attribute is applied either to a contract interface or to a duplex callback class the value of the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> property is ignored.</span></span>  
  
 <span data-ttu-id="f8230-104">자세한 내용은 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f8230-104">For more information, see <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8230-105">다음 코드 예제에서는 사용자 지정 <xref:System.ServiceModel.Dispatcher.IInstanceProvider?displayProperty=nameWithType> 구현이 항상 동일한 서비스 인스턴스를 반환하고 이 인스턴스를 재사용하지 않는 "단일" 동작을 제공하는 `ObjectProviderBehavior`를 호출했다고 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="f8230-105">The following code example assumes a custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider?displayProperty=nameWithType> implementation called `ObjectProviderBehavior` that provides a "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 <span data-ttu-id="f8230-106">인스턴스 공급자 사용자 지정을 삽입하기 위해 이 예제에서는 `SingletonBehaviorAttribute`를 구현하여 사용자 지정 서비스 인스턴스 공급자를 삽입하는 사용자 지정 특성(<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>)을 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="f8230-106">To insert the instance provider customization, the example shows how to implement a custom attribute (`SingletonBehaviorAttribute`) that implements <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> to insert the custom service instance provider.</span></span> <span data-ttu-id="f8230-107">또한 <xref:System.ServiceModel.Description.IContractBehaviorAttribute> 계약에 응용 프로그램을 바인딩하는 `ISampleService`를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="f8230-107">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its application to the `ISampleService` contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="TargetContract">
      <MemberSignature Language="C#" Value="public Type TargetContract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetContract" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetContract As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetContract { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetContract : Type" Usage="System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f8230-108">계약 동작을 적용할 수 있는 계약 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8230-108">Gets the type of the contract to which the contract behavior is applicable.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f8230-109">계약 동작을 적용할 수 있는 계약 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8230-109">The contract to which the contract behavior is applicable.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8230-110">구현하는 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> 특성이 서비스 클래스에 적용될 때 계약 동작이 적용되는 계약을 지정하려면 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> 속성을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="f8230-110">Implement the <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A> property to specify the contract to which the contract behavior is applied when the implementing <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> attribute is applied to a service class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8230-111">다음 코드 예제에서는 사용자 지정 <xref:System.ServiceModel.Dispatcher.IInstanceProvider?displayProperty=nameWithType> 구현이 항상 동일한 서비스 인스턴스를 반환하고 이 인스턴스를 재사용하지 않는 "단일" 동작을 제공하는 `ObjectProviderBehavior`를 호출했다고 가정합니다.</span><span class="sxs-lookup"><span data-stu-id="f8230-111">The following code example assumes a custom <xref:System.ServiceModel.Dispatcher.IInstanceProvider?displayProperty=nameWithType> implementation called `ObjectProviderBehavior` that provides a "singleton" behavior; it always returns the same service instance and does not recycle it.</span></span>  
  
 <span data-ttu-id="f8230-112">인스턴스 공급자 사용자 지정을 삽입하기 위해 이 예제에서는 `SingletonBehaviorAttribute`를 구현하여 사용자 지정 서비스 인스턴스 공급자를 삽입하는 사용자 지정 특성(<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>)을 구현하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="f8230-112">To insert the instance provider customization, the example shows how to implement a custom attribute (`SingletonBehaviorAttribute`) that implements <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> to insert the custom service instance provider.</span></span> <span data-ttu-id="f8230-113">또한 <xref:System.ServiceModel.Description.IContractBehaviorAttribute> 계약에 응용 프로그램을 바인딩하는 `ISampleService`를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="f8230-113">It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its application to the `ISampleService` contract.</span></span>  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>