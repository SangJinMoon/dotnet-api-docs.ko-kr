<Type Name="SoapElementAttribute" FullName="System.Xml.Serialization.SoapElementAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f7d9fe344735b9a426e32e3785f85105b3265078" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720457" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SoapElementAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SoapElementAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.SoapElementAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class SoapElementAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapElementAttribute : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.ReturnValue)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.Xml.Serialization.XmlSerializer" />에 의해 공용 멤버 값이 인코딩된 SOAP XML 요소로 serialize되도록 지정합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.SoapElementAttribute> 클래스 제어 되는 특성의 집합에 속합니다 방법을 <xref:System.Xml.Serialization.XmlSerializer> 를 직렬화 또는 인코딩된 SOAP XML로 개체를 역직렬화 합니다. 결과 XML은 World Wide Web 컨소시엄 (www.w3.org) 문서의 "Simple Object Access Protocol (SOAP) 1.1" 섹션 5 준수합니다. 비슷한 특성의 전체 목록은 참조 하십시오. [특성을 제어 인코딩된 SOAP Serialization](~/docs/standard/serialization/attributes-that-control-encoded-soap-serialization.md)합니다.  
  
 개체는 인코딩된 SOAP 메시지로 serialize 하려면 먼저 생성 해야는 <xref:System.Xml.Serialization.XmlSerializer> 를 사용 하는 <xref:System.Xml.Serialization.XmlTypeMapping> 사용 하 여 만든는 <xref:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping%2A> 의 메서드는 <xref:System.Xml.Serialization.SoapReflectionImporter> 클래스입니다.  
  
 적용는 <xref:System.Xml.Serialization.SoapElementAttribute> 지시 하려면 공용 필드는 <xref:System.Xml.Serialization.XmlSerializer> 는 인코딩된 SOAP XML 요소 필드를 직렬화 하는 데 있습니다.  
  
 특성을 사용 하는 방법에 대 한 자세한 내용은 참조 [특성](~/docs/standard/attributes/index.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 클래스의 인스턴스를 serialize `Transportation` 라는 필드가 포함 된 `Vehicle`합니다. A <xref:System.Xml.Serialization.SoapElementAttribute> 필드에 적용 합니다. 필드를 serialize 할 때 XML 요소 이름은 "Vehicle" 대신 "바퀴"입니다. `SerializeOverride` 메서드를 만듭니다는 <xref:System.Xml.Serialization.SoapElementAttribute> 설정는 <xref:System.Xml.Serialization.SoapAttributes.SoapElement%2A> 속성은 <xref:System.Xml.Serialization.SoapAttributes> 에 <xref:System.Xml.Serialization.SoapElementAttribute>합니다. <xref:System.Xml.Serialization.SoapAttributes> 에 추가 되는 <xref:System.Xml.Serialization.SoapAttributeOverrides> 만드는 데 사용 되는 프로그램 <xref:System.Xml.Serialization.XmlTypeMapping>합니다. <xref:System.Xml.Serialization.XmlSerializer> 로 구성 되며는 <xref:System.Xml.Serialization.XmlTypeMapping>와의 인스턴스는 `Transportation` 클래스가 다시 serialize 되는 합니다. 때문에 <xref:System.Xml.Serialization.SoapElementAttribute> 은 직렬화를 재정의 하는 데, 생성 된 XML 요소 이름은 이제 "바퀴" 대신 "Truck"입니다.  
  
 [!code-cpp[SoapElementOverrides#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapElementOverrides/CPP/soapelementoverrides.cpp#1)]
 [!code-csharp[SoapElementOverrides#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapElementOverrides/CS/soapelementoverrides.cs#1)]
 [!code-vb[SoapElementOverrides#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapElementOverrides/VB/soapelementoverrides.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapElementAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.SoapElementAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapElementAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 클래스의 인스턴스를 serialize `Transportation` 라는 필드가 포함 된 `Vehicle`합니다. A <xref:System.Xml.Serialization.SoapElementAttribute> 필드에 적용 합니다. 필드를 serialize 할 때 XML 요소 이름은 "Vehicle" 대신 "바퀴"입니다. `SerializeOverride` 메서드를 만듭니다는 <xref:System.Xml.Serialization.SoapElementAttribute> 설정는 <xref:System.Xml.Serialization.SoapAttributes.SoapElement%2A> 속성은 <xref:System.Xml.Serialization.SoapAttributes> 에 <xref:System.Xml.Serialization.SoapElementAttribute>합니다. <xref:System.Xml.Serialization.SoapAttributes> 에 추가 되는 <xref:System.Xml.Serialization.SoapAttributeOverrides> 만드는 데 사용 되는 프로그램 <xref:System.Xml.Serialization.XmlTypeMapping>합니다. <xref:System.Xml.Serialization.XmlSerializer> 로 구성 되며는 <xref:System.Xml.Serialization.XmlTypeMapping>와의 인스턴스는 `Transportation` 클래스가 다시 serialize 되는 합니다. 때문에 <xref:System.Xml.Serialization.SoapElementAttribute> 은 직렬화를 재정의 하는 데, 생성 된 XML 요소 이름은 이제 "바퀴" 대신 "Truck"입니다.  
  
 [!code-cpp[SoapElementOverrides#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapElementOverrides/CPP/soapelementoverrides.cpp#1)]
 [!code-csharp[SoapElementOverrides#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapElementOverrides/CS/soapelementoverrides.cs#1)]
 [!code-vb[SoapElementOverrides#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapElementOverrides/VB/soapelementoverrides.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapElementAttribute (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.SoapElementAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elementName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapElementAttribute(System::String ^ elementName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">serialize된 멤버의 XML 요소 이름입니다.</param>
        <summary>
          <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> 클래스의 새 인스턴스를 초기화하고 XML 요소의 이름을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 클래스의 인스턴스를 serialize `Transportation` 라는 필드가 포함 된 `Vehicle`합니다. A <xref:System.Xml.Serialization.SoapElementAttribute> 필드에 적용 합니다. 필드를 serialize 할 때 XML 요소 이름은 "Vehicle" 대신 "바퀴"입니다. `SerializeOverride` 메서드를 만듭니다는 <xref:System.Xml.Serialization.SoapElementAttribute> 설정는 <xref:System.Xml.Serialization.SoapAttributes.SoapElement%2A> 속성은 <xref:System.Xml.Serialization.SoapAttributes> 에 <xref:System.Xml.Serialization.SoapElementAttribute>합니다. <xref:System.Xml.Serialization.SoapAttributes> 에 추가 되는 <xref:System.Xml.Serialization.SoapAttributeOverrides> 만드는 데 사용 되는 프로그램 <xref:System.Xml.Serialization.XmlTypeMapping>합니다. <xref:System.Xml.Serialization.XmlSerializer> 로 구성 되며는 <xref:System.Xml.Serialization.XmlTypeMapping>와의 인스턴스는 `Transportation` 클래스가 다시 serialize 되는 합니다. 때문에 <xref:System.Xml.Serialization.SoapElementAttribute> 은 직렬화를 재정의 하는 데, 생성 된 XML 요소 이름은 이제 "바퀴" 대신 "Truck"입니다.  
  
 [!code-cpp[SoapElementOverrides#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapElementOverrides/CPP/soapelementoverrides.cpp#1)]
 [!code-csharp[SoapElementOverrides#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapElementOverrides/CS/soapelementoverrides.cs#1)]
 [!code-vb[SoapElementOverrides#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapElementOverrides/VB/soapelementoverrides.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.SoapElementAttribute.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>생성된 XML 요소의 XSD(XML Schema Definition language) 데이터 형식을 가져오거나 설정합니다.</summary>
        <value>XML 스키마 데이터 형식 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서.NET 및 그에 해당 하는 XML 스키마 단순 데이터 형식을 나열합니다.  
  
 XML 스키마에 대 한 `base64Binary` 및 `hexBinary` 데이터 형식을 사용 하 여 배열을 <xref:System.Byte> , 구조 및 적용 한 <xref:System.Xml.Serialization.SoapElementAttribute> 와 <xref:System.Xml.Serialization.SoapAttributeAttribute.DataType%2A> "base64Binary" 또는 "hexBinary" 적절 하 게 설정 합니다. XML 스키마에 대 한 `time` 및 `date` 데이터 형식을 사용 하 여는 <xref:System.DateTime> 입력 하 고 적용 된 <xref:System.Xml.Serialization.SoapElementAttribute> 와 <xref:System.Xml.Serialization.SoapElementAttribute.DataType%2A> "date" 또는 "시간"로 설정 합니다.  
  
 문자열에 매핑되는 모든 XML 스키마 데이터 형식에 대 한 적용 된 <xref:System.Xml.Serialization.SoapElementAttribute> 와 해당 <xref:System.Xml.Serialization.SoapElementAttribute.DataType%2A> 속성이 XML 스키마 형식으로 설정 합니다. Serialization 형식으로 된 멤버에 대 한 스키마만 바뀌지 않으면이 note 합니다.  
  
> [!NOTE]
>  속성이 대/소문자 구분, 이므로 XML 스키마 데이터 형식 중 하나를 정확 하 게 설정 해야 합니다.  
  
> [!NOTE]
>  요소를 XML 형식으로 이진 데이터를 전달 합니다. XML 특성으로 전달할 때 보다 더 효율적입니다.  
  
 XML 데이터 형식에 대 한 자세한 내용은 World Wide Web 컨소시엄 (www.w3.org) 문서의 "XML 스키마 파트 2:: 데이터 형식"을 참조 하세요.  
  
|XSD 데이터 형식|.NET 데이터 형식|  
|-------------------|--------------------|  
|anyURI|<xref:System.String>|  
|base64Binary|배열 <xref:System.Byte> 개체|  
|boolean|<xref:System.Boolean>|  
|byte|<xref:System.SByte>|  
|date|<xref:System.DateTime>|  
|dateTime|<xref:System.DateTime>|  
|decimal|<xref:System.Decimal>|  
|double|<xref:System.Double>|  
|ENTITY|<xref:System.String>|  
|엔터티|<xref:System.String>|  
|float|<xref:System.Single>|  
|gDay|<xref:System.String>|  
|gMonth|<xref:System.String>|  
|gMonthDay|<xref:System.String>|  
|gYear|<xref:System.String>|  
|gYearMonth|<xref:System.String>|  
|hexBinary|배열 <xref:System.Byte> 개체|  
|ID|<xref:System.String>|  
|IDREF|<xref:System.String>|  
|IDREFS|<xref:System.String>|  
|int|<xref:System.Int32>|  
|정수|<xref:System.String>|  
|language|<xref:System.String>|  
|long|<xref:System.Int64>|  
|name|<xref:System.String>|  
|NCName|<xref:System.String>|  
|negativeInteger|<xref:System.String>|  
|NMTOKEN|<xref:System.String>|  
|NMTOKENS|<xref:System.String>|  
|normalizedString|<xref:System.String>|  
|nonNegativeInteger|<xref:System.String>|  
|nonPositiveInteger|<xref:System.String>|  
|NOTATION|<xref:System.String>|  
|positiveInteger|<xref:System.String>|  
|QName|<xref:System.Xml.XmlQualifiedName>|  
|duration|<xref:System.String>|  
|string|<xref:System.String>|  
|short|<xref:System.Int16>|  
|시간|<xref:System.DateTime>|  
|token|<xref:System.String>|  
|unsignedByte|<xref:System.Byte>|  
|unsignedInt|<xref:System.UInt32>|  
|unsignedLong|<xref:System.UInt64>|  
|unsignedShort|<xref:System.UInt16>|  
  
   
  
## Examples  
 다음 예제에서는 클래스의 인스턴스를 serialize `Transportation` 라는 필드가 포함 된 `Vehicle`합니다. A <xref:System.Xml.Serialization.SoapElementAttribute> 필드에 적용 합니다. 필드를 serialize 할 때 XML 요소 이름은 "Vehicle" 대신 "바퀴"입니다. `SerializeOverride` 메서드를 만듭니다는 <xref:System.Xml.Serialization.SoapElementAttribute> 설정는 <xref:System.Xml.Serialization.SoapAttributes.SoapElement%2A> 속성은 <xref:System.Xml.Serialization.SoapAttributes> 에 <xref:System.Xml.Serialization.SoapElementAttribute>합니다. <xref:System.Xml.Serialization.SoapAttributes> 에 추가 되는 <xref:System.Xml.Serialization.SoapAttributeOverrides> 만드는 데 사용 되는 프로그램 <xref:System.Xml.Serialization.XmlTypeMapping>합니다. <xref:System.Xml.Serialization.XmlSerializer> 로 구성 되며는 <xref:System.Xml.Serialization.XmlTypeMapping>와의 인스턴스는 `Transportation` 클래스가 다시 serialize 되는 합니다. 때문에 <xref:System.Xml.Serialization.SoapElementAttribute> 은 직렬화를 재정의 하는 데, 생성 된 XML 요소 이름은 이제 "바퀴" 대신 "Truck"입니다.  
  
 [!code-cpp[SoapElementOverrides#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapElementOverrides/CPP/soapelementoverrides.cpp#1)]
 [!code-csharp[SoapElementOverrides#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapElementOverrides/CS/soapelementoverrides.cs#1)]
 [!code-vb[SoapElementOverrides#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapElementOverrides/VB/soapelementoverrides.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.SoapElementAttribute.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>생성된 XML 요소의 이름을 가져오거나 설정합니다.</summary>
        <value>생성된 XML 요소의 이름입니다. 기본값은 멤버 식별자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 클래스의 인스턴스를 serialize `Transportation` 라는 필드가 포함 된 `Vehicle`합니다. A <xref:System.Xml.Serialization.SoapElementAttribute> 필드에 적용 합니다. 필드를 serialize 할 때 XML 요소 이름은 "Vehicle" 대신 "바퀴"입니다. `SerializeOverride` 메서드를 만듭니다는 <xref:System.Xml.Serialization.SoapElementAttribute> 설정는 <xref:System.Xml.Serialization.SoapAttributes.SoapElement%2A> 속성은 <xref:System.Xml.Serialization.SoapAttributes> 에 <xref:System.Xml.Serialization.SoapElementAttribute>합니다. <xref:System.Xml.Serialization.SoapAttributes> 에 추가 되는 <xref:System.Xml.Serialization.SoapAttributeOverrides> 만드는 데 사용 되는 프로그램 <xref:System.Xml.Serialization.XmlTypeMapping>합니다. <xref:System.Xml.Serialization.XmlSerializer> 로 구성 되며는 <xref:System.Xml.Serialization.XmlTypeMapping>와의 인스턴스는 `Transportation` 클래스가 다시 serialize 되는 합니다. 때문에 <xref:System.Xml.Serialization.SoapElementAttribute> 은 직렬화를 재정의 하는 데, 생성 된 XML 요소 이름은 이제 "바퀴" 대신 "Truck"입니다.  
  
 [!code-cpp[SoapElementOverrides#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapElementOverrides/CPP/soapelementoverrides.cpp#1)]
 [!code-csharp[SoapElementOverrides#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapElementOverrides/CS/soapelementoverrides.cs#1)]
 [!code-vb[SoapElementOverrides#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapElementOverrides/VB/soapelementoverrides.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.SoapElementAttribute.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Xml.Serialization.XmlSerializer" />가 <see langword="xsi:null" /> 특성이 "1"로 설정된 멤버를 serialize해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Xml.Serialization.XmlSerializer" />가 <see langword="true" /> 특성을 생성하면 <see langword="xsi:null" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 구조에 대 한 XML 스키마 사양에는 XML 문서를 요소 콘텐츠가 누락 된 신호를 명시적으로 있습니다. 이러한 요소는 특성이 포함 되어 `xsi:null` "1"로 설정 합니다. 자세한 내용은 "XML 스키마 파트 1:: 구조" 라는 World Wide Web 컨소시엄 (www.w3.org) 사양을 참조 합니다.  
  
 경우는 <xref:System.Xml.Serialization.SoapElementAttribute.IsNullable%2A> 속성이로 설정 되어 `true`, `xsi:null` 로 설정 된 클래스 멤버에 대 한 특성은 생성 `null`합니다. 예를 들어, 라는 필드를 설정 하는 경우 `MyStringArray` 를 `null`, <xref:System.Xml.Serialization.XmlSerializer> 다음 XML 코드를 생성 합니다.  
  
```  
<MyStringArray xsi:null = "1" />  
```  
  
 경우는 <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> 속성은 `false`, XML 요소가 생성 됩니다.  
  
> [!NOTE]
>  적용할 수 없습니다는 <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> 값 형식을 포함할 수 없기 때문 멤버에 대 한 속성을 값 형식으로 입력 `null`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>