<Type Name="XmlTextAttribute" FullName="System.Xml.Serialization.XmlTextAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cd1d340d704f2f3871d98c0ff007f941da7ed18b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720767" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlTextAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlTextAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlTextAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlTextAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlTextAttribute : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.ReturnValue)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>멤버가 포함된 클래스가 serialize되거나 deserialize될 때 멤버를 XML 텍스트로 처리하도록 <see cref="T:System.Xml.Serialization.XmlSerializer" />에 지정합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlTextAttribute> 제어 하는 특성의 제품군에 속하는 방법을 <xref:System.Xml.Serialization.XmlSerializer> 직렬화 및 역직렬화 개체 (을 통해 해당 <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> 및 <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> 메서드). 비슷한 특성의 전체 목록은 참조 하십시오. [특성을 제어 XML 직렬화](~/docs/standard/serialization/attributes-that-control-xml-serialization.md)합니다.  
  
 인스턴스가 하나만 <xref:System.Xml.Serialization.XmlTextAttribute> 클래스에서 클래스를 적용할 수 있습니다.  
  
 적용할 수는 <xref:System.Xml.Serialization.XmlTextAttribute> 공용 필드 및 기본 형식 및 열거형을 반환 하는 공용 읽기/쓰기 속성입니다.  
  
 적용할 수는 <xref:System.Xml.Serialization.XmlTextAttribute> 필드 또는 문자열의 배열을 반환 하는 속성입니다. 형식의 배열에 특성을 적용할 수도 있습니다 <xref:System.Object> 설정 해야 하지만 <xref:System.Xml.Serialization.XmlTextAttribute.Type%2A> 속성을 문자열입니다. 이 경우 배열에 삽입 하는 모든 문자열은 XML 텍스트로 serialize 됩니다.  
  
 <xref:System.Xml.Serialization.XmlTextAttribute> 반환 하는 필드에도 적용 될 수는 <xref:System.Xml.XmlNode> 또는 배열을 <xref:System.Xml.XmlNode> 개체입니다.  
  
 기본적으로는 <xref:System.Xml.Serialization.XmlSerializer> XML 요소로 클래스 멤버를 serialize 합니다. 그러나 적용 하는 경우는 <xref:System.Xml.Serialization.XmlTextAttribute> 멤버에 게는 <xref:System.Xml.Serialization.XmlSerializer> 를 XML 텍스트로 해당 값을 변환 합니다. 즉, XML 요소의 내용에는 값은 인코딩됩니다.  
  
 [XML 스키마 정의 도구 (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md) 경우에 따라 생성 된 <xref:System.Xml.Serialization.XmlTextAttribute> XML 스키마 정의 (XSD) 파일에서 클래스를 만들 때. 스키마에 포함 된 경우 발생 하는이 `complexType` ; 혼합된 내용이 포함 된 경우에 해당 하는 클래스 멤버를 포함 하는 문자열 배열을 반환 하는 <xref:System.Xml.Serialization.XmlTextAttribute> 적용 됩니다. 예를 들어는 `Xml Schema Definition` 이 스키마를 처리 하는 도구:  
  
```  
<xs:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace=""   
xmlns:xs="http://www.w3.org/2001/XMLSchema">  
  <xs:element name="LinkList" type="LinkList" />  
  <xs:complexType name="LinkList" mixed="true">  
    <xs:sequence>  
      <xs:element minOccurs="1" maxOccurs="1" name="id" type="xs:int" />  
      <xs:element minOccurs="0" maxOccurs="1" name="name" type="xs:string" />  
      <xs:element minOccurs="0" maxOccurs="1" name="next" type="LinkList" />  
    </xs:sequence>  
  </xs:complexType>  
</xs:schema>  
```  
  
 다음과 같은 클래스가 생성 됩니다 (공백 및 설명이 제거 됨):  
  
 [!code-csharp[XmlTextAttribute#0](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlTextAttribute/cs/source.cs#0)]
 [!code-vb[XmlTextAttribute#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlTextAttribute/vb/source.vb#0)]  
  
 특성을 사용 하는 방법에 대 한 자세한 내용은 참조 [특성](~/docs/standard/attributes/index.md)합니다.  
  
> [!NOTE]
>  word를 사용 하 여 `XmlText` 대신에 간결 코드에서 <xref:System.Xml.Serialization.XmlTextAttribute>합니다.  
  
   
  
## Examples  
 [!code-cpp[Classic XmlTextAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlTextAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlTextAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlTextAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlTextAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlTextAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlText" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlTextAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 방식을 재정의할 수 있습니다 하는 <xref:System.Xml.Serialization.XmlSerializer> 만들어 공용 필드 또는 공용 읽기/쓰기 속성을 직렬화는 <xref:System.Xml.Serialization.XmlAttributes>, 설정과 해당 <xref:System.Xml.Serialization.XmlAttributes.XmlText%2A> 속성을는 <xref:System.Xml.Serialization.XmlTextAttribute>합니다. 자세한 내용은 <xref:System.Xml.Serialization.XmlAttributeOverrides> 클래스를 참조하십시오.  
  
   
  
## Examples  
 다음 예제에서는 라는 public 필드를 포함 하는 클래스를 serialize `Comment`합니다. 이 예제에서는 적용 되는 <xref:System.Xml.Serialization.XmlTextAttribute> 을 필드에, 여는 XML 요소에서 serialization 재정의 하 고 대신 XML 텍스트로 직렬화 합니다.  
  
 [!code-cpp[Classic XmlTextAttribute.XmlTextAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlTextAttribute.XmlTextAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlTextAttribute.XmlTextAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlTextAttribute.XmlTextAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlTextAttribute.XmlTextAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlTextAttribute.XmlTextAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextAttribute(Type ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">serialize할 개체의 <see cref="T:System.Type" />입니다.</param>
        <summary>
          <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 방식을 재정의할 수 있습니다 하는 <xref:System.Xml.Serialization.XmlSerializer> 만들어 공용 필드 또는 공용 읽기/쓰기 속성을 직렬화는 <xref:System.Xml.Serialization.XmlAttributes>, 설정과 해당 <xref:System.Xml.Serialization.XmlAttributes.XmlText%2A> 속성을는 <xref:System.Xml.Serialization.XmlTextAttribute>합니다. 자세한 내용은 <xref:System.Xml.Serialization.XmlAttributeOverrides> 클래스를 참조하십시오.  
  
   
  
## Examples  
 [!code-cpp[Classic XmlTextAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlTextAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlTextAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlTextAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlTextAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlTextAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlTextAttribute.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Xml.Serialization.XmlSerializer" />에 의해 생성된 텍스트의 XSD(XML 스키마 정의) 데이터 형식을 가져오거나 설정합니다.</summary>
        <value>World Wide Web 컨소시엄(www.w3.org) 문서의 "XML Schema Part 2: Datatypes"에 정의된 XSD(XML 스키마 정의) 데이터 형식입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정의 <xref:System.Xml.Serialization.XmlTextAttribute.DataType%2A> 속성을 XML 스키마 단순 데이터 형식에는 생성 된 XML의 형식을 영향을 줍니다. 예를 들어 "date" 속성을 설정 하면 일반 날짜 스타일의 서식을 지정할 생성 된 텍스트: 2001-08-31입니다. 반면,이 속성을 설정 "dateTime" 결과 표준화 8601, "표현을의 날짜 및 시간", 문서에 대 한 국제 조직에 정의 된 대로 특정 인스턴트에 예: 2001-08-15T06:59:11.0508456-07시입니다.  
  
 설정의 효과 <xref:System.Xml.Serialization.XmlTextAttribute.DataType%2A> 사용 하는 경우 속성을 확인할 수도 있습니다는 [XML 스키마 정의 도구 (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md) 컴파일된 파일에 대 한 XML 스키마를 생성 합니다. 이 도구를 사용 하 여에 대 한 자세한 내용은 참조 하십시오. [The XML 스키마 정의 도구 및 XML Serialization](~/docs/standard/serialization/the-xml-schema-definition-tool-and-xml-serialization.md)합니다.  
  
 다음 표에서.NET 및 그에 해당 하는 XML 스키마 단순 데이터 형식을 나열합니다.  
  
 XML 스키마에 대 한 `base64Binary` 및 `hexBinary` 데이터 형식을 사용 하 여 배열을 <xref:System.Byte> , 구조 및 적용 한 <xref:System.Xml.Serialization.XmlTextAttribute> 와 <xref:System.Xml.Serialization.XmlTextAttribute.DataType%2A> "base64Binary" 또는 "hexBinary" 적절 하 게 설정 합니다. XML 스키마에 대 한 `time` 및 `date` 데이터 형식을 사용 하 여는 <xref:System.DateTime> 입력 하 고 적용 된 <xref:System.Xml.Serialization.XmlTextAttribute> 와 <xref:System.Xml.Serialization.XmlTextAttribute.DataType%2A> "date" 또는 "시간"로 설정 합니다.  
  
 문자열에 매핑되는 모든 XML 스키마 데이터 형식에 대 한 적용 된 <xref:System.Xml.Serialization.XmlTextAttribute> 와 해당 <xref:System.Xml.Serialization.XmlTextAttribute.DataType%2A> 속성이 XML 스키마 데이터 형식으로 설정 합니다. Serialization 형식으로 된 멤버에 대 한 스키마만 바뀌지 않으면이 note 합니다.  
  
> [!NOTE]
>  속성이 대/소문자 구분, 이므로 XML 스키마 데이터 형식 중 하나를 정확 하 게 설정 해야 합니다.  
  
> [!NOTE]
>  요소를 XML 형식으로 이진 데이터를 전달 합니다. XML 특성으로 전달할 때 보다 더 효율적입니다.  
  
 XML 스키마 데이터 형식에 대 한 자세한 내용은 "XML 스키마 파트 2:: 데이터 형식" 이라는 World Wide Web 컨소시엄 (www.w3.org) 문서를 참조 하십시오.  
  
|XSD 데이터 형식|.NET 데이터 형식|  
|-------------------|--------------------|  
|anyURI|<xref:System.String>|  
|base64Binary|배열 <xref:System.Byte> 개체|  
|boolean|<xref:System.Boolean>|  
|byte|<xref:System.SByte>|  
|date|<xref:System.DateTime>|  
|dateTime|<xref:System.DateTime>|  
|decimal|<xref:System.Decimal>|  
|double|<xref:System.Double>|  
|ENTITY|<xref:System.String>|  
|엔터티|<xref:System.String>|  
|float|<xref:System.Single>|  
|gDay|<xref:System.String>|  
|gMonth|<xref:System.String>|  
|gMonthDay|<xref:System.String>|  
|gYear|<xref:System.String>|  
|gYearMonth|<xref:System.String>|  
|hexBinary|배열 <xref:System.Byte> 개체|  
|ID|<xref:System.String>|  
|IDREF|<xref:System.String>|  
|IDREFS|<xref:System.String>|  
|int|<xref:System.Int32>|  
|정수|<xref:System.String>|  
|language|<xref:System.String>|  
|long|<xref:System.Int64>|  
|name|<xref:System.String>|  
|NCName|<xref:System.String>|  
|negativeInteger|<xref:System.String>|  
|NMTOKEN|<xref:System.String>|  
|NMTOKENS|<xref:System.String>|  
|normalizedString|<xref:System.String>|  
|nonNegativeInteger|<xref:System.String>|  
|nonPositiveInteger|<xref:System.String>|  
|NOTATION|<xref:System.String>|  
|positiveInteger|<xref:System.String>|  
|QName|<xref:System.Xml.XmlQualifiedName>|  
|duration|<xref:System.String>|  
|string|<xref:System.String>|  
|short|<xref:System.Int16>|  
|시간|<xref:System.DateTime>|  
|token|<xref:System.String>|  
|unsignedByte|<xref:System.Byte>|  
|unsignedInt|<xref:System.UInt32>|  
|unsignedLong|<xref:System.UInt64>|  
|unsignedShort|<xref:System.UInt16>|  
  
   
  
## Examples  
 [!code-cpp[Classic XmlTextAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlTextAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlTextAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlTextAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlTextAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlTextAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">지정한 XML 스키마 데이터 형식을 .NET 데이터 형식에 매핑할 수 없는 경우</exception>
        <exception cref="T:System.InvalidOperationException">지정한 XML 스키마 데이터 형식은 속성에 맞지 않으므로 멤버 형식으로 변환할 수 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlTextAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>멤버의 형식을 가져오거나 설정합니다.</summary>
        <value>멤버의 <see cref="T:System.Type" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Type> 속성 기본 형식 및 열거형을 설정할 수 있습니다.  
  
 <xref:System.Xml.Serialization.XmlTextAttribute> 반환 하는 필드에도 적용 될 수는 <xref:System.Xml.XmlNode> 또는 배열을 <xref:System.Xml.XmlNode> 개체입니다.  
  
 적용할 수는 <xref:System.Xml.Serialization.XmlTextAttribute> 필드 또는 문자열의 배열을 반환 하는 속성입니다. 형식의 배열에 특성을 적용할 수도 있습니다 <xref:System.Object> 설정 해야 하지만 <xref:System.Xml.Serialization.XmlTextAttribute.Type%2A> 속성을 문자열입니다. 이 경우 배열에 삽입 하는 모든 문자열은 XML 텍스트로 serialize 됩니다.  
  
   
  
## Examples  
 [!code-cpp[Classic XmlTextAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlTextAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlTextAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlTextAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlTextAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlTextAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>