<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XmlAttributes.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5edc9671be617b74dce18228bd8abdf746446c9c8.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">edc9671be617b74dce18228bd8abdf746446c9c8</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Serialization.XmlAttributes">
          <source>Represents a collection of attribute objects that control how the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> serializes and deserializes an object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph>가 개체를 serialize 및 deserialize하는 방식을 제어하는 특성 개체의 컬렉션을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlAttributes">
          <source>Creating the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> is part of a process that overrides the default way the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> serializes class instances.</source>
          <target state="translated">만들기는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 기본값을 재정의 하는 프로세스의 일부인 방식으로 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 클래스 인스턴스를 직렬화 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlAttributes">
          <source>For example, suppose you want to serialize an object that is created from a DLL which has an inaccessible source.</source>
          <target state="translated">예를 들어 DLL에 액세스할 수 없는 원본에서 생성 되는 개체를 직렬화 한다고 가정 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlAttributes">
          <source>By using the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph>, you can augment or otherwise control how the object is serialized.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph>를 보강 하거나 개체가 serialize 되는 방식을 제어할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlAttributes">
          <source>The members of the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> class correspond directly to a family of attribute classes that control serialization.</source>
          <target state="translated">멤버는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 클래스의 serialization을 제어 하는 특성 클래스를 패밀리 직접적으로 부합 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlAttributes">
          <source>For example, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlText%2A&gt;</ph> property must be set to an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlTextAttribute&gt;</ph>, which allows you to override serialization of a field or property by instructing the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> to serialize the property value as XML text.</source>
          <target state="translated">예를 들어는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlText%2A&gt;</ph> 속성으로 설정 되어 있어야는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlTextAttribute&gt;</ph>, 지시 하 여 필드 또는 속성의 serialization을 재정의할 수 있습니다는 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 를 XML 텍스트로 속성 값을 직렬화 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlAttributes">
          <source>For a complete list of attributes that control serialization, see the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
          <target state="translated">Serialization을 제어 하는 특성 목록은 전체 참조는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlAttributes">
          <source>For more details on using the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> with the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> class, see <bpt id="p1">[</bpt>How to: Specify an Alternate Element Name for an XML Stream<ept id="p1">](~/docs/standard/serialization/how-to-specify-an-alternate-element-name-for-an-xml-stream.md)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 사용 하는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 클래스를 참조 하십시오. <bpt id="p1">[</bpt>하는 방법: XML 스트림에 대 한 대체 요소 이름을 지정<ept id="p1">](~/docs/standard/serialization/how-to-specify-an-alternate-element-name-for-an-xml-stream.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlAttributes">
          <source>The following example serializes an instance of a class named <ph id="ph1">`Orchestra`</ph>, which contains a single field named <ph id="ph2">`Instruments`</ph> that returns an array of <ph id="ph3">`Instrument`</ph> objects.</source>
          <target state="translated">다음 예제에서는 클래스의 인스턴스를 serialize <ph id="ph1">`Orchestra`</ph>, 라는 단일 필드를 포함 하 <ph id="ph2">`Instruments`</ph> 의 배열을 반환 하는 <ph id="ph3">`Instrument`</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlAttributes">
          <source>A second class named <ph id="ph1">`Brass`</ph> inherits from the <ph id="ph2">`Instrument`</ph> class.</source>
          <target state="translated">라는 두 번째 클래스 <ph id="ph1">`Brass`</ph> 에서 상속 되는 <ph id="ph2">`Instrument`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlAttributes">
          <source>The example creates an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object to override the <ph id="ph2">`Instrument`</ph> field--allowing the field to accept <ph id="ph3">`Brass`</ph> objects--and adds the <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object to an instance of the <ph id="ph5">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> class.</source>
          <target state="translated">이 예에서는 만듭니다는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 재정의 하는 개체는 <ph id="ph2">`Instrument`</ph> 필드를 필드에 적용할 수 있도록 <ph id="ph3">`Brass`</ph> -개체를 추가 하는 <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체의 인스턴스를는 <ph id="ph5">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 클래스.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Xml.Serialization.XmlAttributes">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAttributes" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAttributes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlAttributes.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAttributes" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAttributes" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlAttributes.#ctor">
          <source>The following example serializes an instance of a class named <ph id="ph1">`Orchestra`</ph>, which contains a single field named <ph id="ph2">`Instruments`</ph> that returns an array of <ph id="ph3">`Instrument`</ph> objects.</source>
          <target state="translated">다음 예제에서는 클래스의 인스턴스를 serialize <ph id="ph1">`Orchestra`</ph>, 라는 단일 필드를 포함 하 <ph id="ph2">`Instruments`</ph> 의 배열을 반환 하는 <ph id="ph3">`Instrument`</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlAttributes.#ctor">
          <source>A second class named <ph id="ph1">`Brass`</ph> inherits from the <ph id="ph2">`Instrument`</ph> class.</source>
          <target state="translated">라는 두 번째 클래스 <ph id="ph1">`Brass`</ph> 에서 상속 되는 <ph id="ph2">`Instrument`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlAttributes.#ctor">
          <source>The example creates an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object to override the <ph id="ph2">`Instrument`</ph> field--allowing the field to accept <ph id="ph3">`Brass`</ph> objects--and adds the <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object to an instance of the <ph id="ph5">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> class.</source>
          <target state="translated">이 예에서는 만듭니다는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 재정의 하는 개체는 <ph id="ph2">`Instrument`</ph> 필드를 필드에 적용할 수 있도록 <ph id="ph3">`Brass`</ph> -개체를 추가 하는 <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체의 인스턴스를는 <ph id="ph5">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 클래스.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlAttributes.#ctor(System.Reflection.ICustomAttributeProvider)">
          <source>A class that can provide alternative implementations of attributes that control XML serialization.</source>
          <target state="translated">XML serialization을 제어하는 특성의 대체 구현을 제공할 수 있는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlAttributes.#ctor(System.Reflection.ICustomAttributeProvider)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAttributes" /&gt;</ph> class and customizes how the <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> serializes and deserializes an object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAttributes" /&gt;</ph> 클래스의 새 인스턴스를 초기화하고 <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph>가 개체를 serialize 및 deserialize하는 방법을 사용자 지정합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlAttributes.#ctor(System.Reflection.ICustomAttributeProvider)">
          <source>Use the default constructor for the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> class, rather than using this constructor.</source>
          <target state="translated">기본 생성자를 사용 하 여 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 이 생성자를 사용 하는 것이 아니라 클래스를 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /&gt;</ph> to override.</source>
          <target state="translated">재정의할 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /&gt;</ph>를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /&gt;</ph> to override.</source>
          <target state="translated">재정의할 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAnyAttributeAttribute&gt;</ph> can be applied to a member that returns an array of <ph id="ph2">&lt;xref:System.Xml.XmlAttribute&gt;</ph> objects on deserialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAnyAttributeAttribute&gt;</ph> 의 배열을 반환 하는 멤버에 적용할 수 <ph id="ph2">&lt;xref:System.Xml.XmlAttribute&gt;</ph> deserialization 중에 개체입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute">
          <source>This allows the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> to deserialize any attributes that do not have a corresponding member in the object being deserialized--thus those elements are "unknown" to the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
          <target state="translated">이 통해는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> deserialize 되는 개체에 해당 멤버가 없는 모든 특성을 역직렬화 할-따라서 이러한 요소 "에 알려지지 않은"는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute">
          <source>This is useful when the XML stream has been altered by an XML Web service, or when it is known that random data is always included with the XML stream.</source>
          <target state="translated">XML 웹 서비스에 의해 변경 되었음을 XML 스트림 또는 임의의 데이터를 포함 하 여 XML 스트림을 항상 알려져 있는 경우에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute%2A&gt;</ph> property allows you to override the serialization of a member to which the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAnyAttributeAttribute&gt;</ph> has been applied.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute%2A&gt;</ph> 속성을 사용 하면 한 멤버의 serialization을 재정의 하는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAnyAttributeAttribute&gt;</ph> 적용 되었습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
          <source>Gets the collection of <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /&gt;</ph> objects to override.</source>
          <target state="translated">재정의할 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /&gt;</ph> 개체의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAnyElementAttributes" /&gt;</ph> object that represents the collection of <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAnyElementAttributes" /&gt;</ph> 개체의 컬렉션을 나타내는 <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAnyElementAttribute&gt;</ph> can be applied to a member that returns an array of <ph id="ph2">&lt;xref:System.Xml.XmlElement&gt;</ph> objects on deserialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAnyElementAttribute&gt;</ph> 의 배열을 반환 하는 멤버에 적용할 수 <ph id="ph2">&lt;xref:System.Xml.XmlElement&gt;</ph> deserialization 중에 개체입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
          <source>This allows the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> to deserialize any elements that do not have a corresponding member in the object being deserialized--thus those elements are "unknown" to the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
          <target state="translated">이 통해는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 되는 개체에 해당 멤버를 포함 하지 않는 모든 요소를 deserialize 하기 위해 역직렬화-따라서 이러한 요소 "에 알려지지 않은"는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
          <source>This is useful when the XML stream has been altered by an XML Web service, or when it is known that random data is always included with the XML stream.</source>
          <target state="translated">XML 웹 서비스에 의해 변경 되었음을 XML 스트림 또는 임의의 데이터를 포함 하 여 XML 스트림을 항상 알려져 있는 경우에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlAnyElements%2A&gt;</ph> property allows you to override the serialization of a member to function as a member to which the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAnyElementAttribute&gt;</ph> has been applied.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlAnyElements%2A&gt;</ph> 속성을 사용 하면를 구성원으로 작동 하려면 멤버의 직렬화를 재정의 하는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAnyElementAttribute&gt;</ph> 적용 되었습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
          <source>The following example creates a new <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAnyElementAttribute&gt;</ph> object and adds it to the collection of objects accessed through the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlAnyElements%2A&gt;</ph> property.</source>
          <target state="translated">다음 예제에서는 새 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAnyElementAttribute&gt;</ph> 개체를 통해 액세스 된 개체의 컬렉션에 추가 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlAnyElements%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object is then added to a <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object which is used to create an <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체에 추가 됩니다 한 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 를 만드는 데 사용 되는 개체는 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> is used to serialize or deserialize an object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> serialize 하거나 개체를 역직렬화 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
          <source>To see the effect of using the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAnyElementAttributes&gt;</ph> property, create an XML document named "UnknownElements.xml" by running the <ph id="ph2">`SerializeObject`</ph> method in the <ph id="ph3">`Main`</ph> method.</source>
          <target state="translated">사용의 영향을 확인할 수는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAnyElementAttributes&gt;</ph> 속성을 실행 하 여 "UnknownElements.xml" 라는 XML 문서를 만듭니다.는 <ph id="ph2">`SerializeObject`</ph> 에서 메서드는 <ph id="ph3">`Main`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
          <source>Edit the resulting document to include other (unknown) elements.</source>
          <target state="translated">다른 (알 수 없음된) 요소를 포함 하도록 결과 문서를 편집 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
          <source>Comment out the <ph id="ph1">`SerializeObject`</ph> call in the <ph id="ph2">`Main`</ph> method, and uncomment the call to the <ph id="ph3">`DeserializeObject`</ph> method, which prints out the name and value of any unknown XML element.</source>
          <target state="translated">주석으로 처리는 <ph id="ph1">`SerializeObject`</ph> 에서 호출는 <ph id="ph2">`Main`</ph> 메서드를 호출을 주석 처리를 제거 하 고는 <ph id="ph3">`DeserializeObject`</ph> 이름 및 값의 알 수 없는 XML 요소에 출력 하는 메서드.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.Xml.Serialization.XmlAttributes.XmlArray">
          <source>Gets or sets an object that specifies how the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> serializes a public field or read/write property that returns an array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph>가 배열을 반환하는 공용 필드 또는 읽기/쓰기 속성을 serialize하는 방식을 지정하는 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArray">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlArrayAttribute" /&gt;</ph> that specifies how the <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> serializes a public field or read/write property that returns an array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlArrayAttribute" /&gt;</ph>가 배열을 반환하는 공용 필드 또는 읽기/쓰기 속성을 serialize하는 방식을 지정하는 <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArray">
          <source>There are two ways in which a public field or public read/write property that returns an array is serialized by the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>: the default serialization, and the controlled serialization.</source>
          <target state="translated">두 가지 방법으로는 공용 필드 또는 배열을 반환 하는 공용 읽기/쓰기 속성에서 직렬화 할는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>: 기본 직렬화 및 제어 된 직렬화 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArray">
          <source>In the default serialization, no attribute is applied to the member.</source>
          <target state="translated">기본 serialization 특성이 없는 멤버에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArray">
          <source>When serialized, the array is serialized as a nested sequence of XML elements with the XML element name of the nested sequence taken from the member name.</source>
          <target state="translated">Serialize 된 배열의 멤버 이름에서 가져온 중첩된 된 시퀀스의 XML 요소 이름으로 XML 요소의 중첩된 시퀀스도 serialize 됩니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArray">
          <source>To control the serialization more precisely, apply an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayAttribute&gt;</ph> to the field or property.</source>
          <target state="translated">직렬화를 보다 정확 하 게 제어 하려면 적용 한 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayAttribute&gt;</ph> 필드 또는 속성에 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArray">
          <source>For example, you can change the generated XML element name from the default to a different name by setting the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A&gt;</ph> property to a new value.</source>
          <target state="translated">예를 들어 이름을 변경할 수 있습니다는 생성 된 XML 요소는 기본값과에서 다른 이름으로 설정 하 여는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A&gt;</ph> 속성을 새 값입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArray">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlArray%2A&gt;</ph> property allows you to override the default serialization, as well as the serialization controlled by applying an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlArrayAttribute&gt;</ph> to the member.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlArray%2A&gt;</ph> 속성을 사용 하면 제어를 적용 하 여 serialization 뿐만 아니라 기본 직렬화를 재정의 하는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlArrayAttribute&gt;</ph> 멤버에 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArray">
          <source>For example, you can change the XML element name generated from the default (the member identifier) to a new value.</source>
          <target state="translated">예를 들어 새 값을 기본값 (멤버 식별자)에서 생성 된 XML 요소 이름을 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArray">
          <source>In addition, if you apply an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayAttribute&gt;</ph> to a member, it is overridden by any <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlArrayAttribute&gt;</ph> that is assigned to the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlArray%2A&gt;</ph> property.</source>
          <target state="translated">또한 적용 하는 경우는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayAttribute&gt;</ph> 멤버에 게 것은 우선 순위가 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlArrayAttribute&gt;</ph> 에 할당 되는 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlArray%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArray">
          <source>The following example serializes a class that contains a field named <ph id="ph1">`Members`</ph> that returns an array of objects.</source>
          <target state="translated">다음 예제에서는 필드를 포함 하는 클래스를 serialize <ph id="ph1">`Members`</ph> 개체의 배열을 반환 하는 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArray">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayAttribute&gt;</ph> is used to override the serialization of the field, and rename the element name to <ph id="ph2">`Staff`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayAttribute&gt;</ph> 를 사용 하는 필드의 직렬화를 재정의 하 고 요소 이름에 <ph id="ph2">`Staff`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems">
          <source>Gets or sets a collection of objects that specify how the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> serializes items inserted into an array returned by a public field or read/write property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph>가 공용 필드 또는 읽기/쓰기 속성에 의해 반환된 배열 내에 삽입된 항목을 serialize하는 방식을 지정하는 개체 컬렉션을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlArrayItemAttributes" /&gt;</ph> object that contains a collection of <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlArrayItemAttributes" /&gt;</ph> 개체의 컬렉션을 포함하는 <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlArrayItems%2A&gt;</ph> property allows you to specify the derived types that can be inserted into an array returned by a public field or public read/write property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlArrayItems%2A&gt;</ph> 속성을 사용 하면 공용 필드 또는 공용 읽기/쓰기 속성에 의해 반환 된 배열에 삽입할 수 있는 파생된 된 형식을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems">
          <source>For each new type you want the field or property to accept, create an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> object and <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlArrayItemAttributes.Add%2A&gt;</ph> it to the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlArrayItemAttributes&gt;</ph>) returned by the <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlArrayItems%2A&gt;</ph> property.</source>
          <target state="translated">필드 또는 속성에 원하는 각 새 유형에 대해 만듭니다는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> 개체 및 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlArrayItemAttributes.Add%2A&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlArrayItemAttributes&gt;</ph>)에서 반환 되는 <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlArrayItems%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems">
          <source>(The new type must be derived from the type already accepted by the field or property.) <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides.Add%2A&gt;</ph> the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object to an <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object and specify the type of the object that contains the field or property, and the name of the field or property.</source>
          <target state="translated">(새 형식의 필드 또는 속성에 이미 적용 된 형식에서 파생 되어야 합니다.) <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides.Add%2A&gt;</ph> 는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체는 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 개체를 필드 또는 속성의 이름과 필드 또는 속성을 포함 하는 개체의 유형을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems">
          <source>Construct an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> with the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object before calling <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph> method.</source>
          <target state="translated">생성 된 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 호출 하기 전에 개체 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems">
          <source>The following example serializes a class that contains a field named <ph id="ph1">`Members`</ph> that returns an array of objects.</source>
          <target state="translated">다음 예제에서는 필드를 포함 하는 클래스를 serialize <ph id="ph1">`Members`</ph> 개체의 배열을 반환 하는 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems">
          <source>Two <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> objects are created to allow the field to accept objects that derive from the base class named <ph id="ph2">`Member`</ph>.</source>
          <target state="translated">두 개의 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlArrayItemAttribute&gt;</ph> 개체 필드에 라는 기본 클래스에서 파생 된 개체를 적용할 수 있도록 생성 <ph id="ph2">`Member`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems">
          <source>Each object is added to the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> through the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlArrayItems%2A&gt;</ph> property.</source>
          <target state="translated">각 개체에 추가 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 통해는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlArrayItems%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
          <source>Gets or sets an object that specifies how the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> serializes a public field or public read/write property as an XML attribute.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph>가 공용 필드 또는 공용 읽기/쓰기 속성을 XML 특성으로 serialize하는 방식을 지정하는 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /&gt;</ph> that controls the serialization of a public field or read/write property as an XML attribute.</source>
          <target state="translated">공용 필드 또는 읽기/쓰기 속성을 XML 특성으로 serialize하는 것을 제어하는 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
          <source>By default, if no attribute is applied to a public field or public read/write property, it is serialized as an XML element.</source>
          <target state="translated">기본적으로 공용 필드 또는 공용 읽기/쓰기 속성에 특성이 적용 된 경우 XML 요소로 serialize 됩니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
          <source>You can also instruct the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> to generate an XML attribute by applying an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute&gt;</ph> to the field or property.</source>
          <target state="translated">지시할 수 있습니다는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> XML 특성을 적용 하 여 생성 하는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute&gt;</ph> 필드 또는 속성에 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlAttribute%2A&gt;</ph> property allows you to override the default serialization, as well as the serialization controlled by applying an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute&gt;</ph> to the member.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlAttribute%2A&gt;</ph> 속성을 사용 하면 제어를 적용 하 여 serialization 뿐만 아니라 기본 직렬화를 재정의 하는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute&gt;</ph> 멤버에 있습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
          <source>To do this, create an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute&gt;</ph> and set its properties (such as <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute.AttributeName%2A&gt;</ph>).</source>
          <target state="translated">이 작업을 수행 하려면 만듭니다는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute&gt;</ph> 해당 속성을 설정 하 고 (같은 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute.AttributeName%2A&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
          <source>Assign the new object to the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlAttribute%2A&gt;</ph> property of an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object.</source>
          <target state="translated">새 개체에 할당 된 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlAttribute%2A&gt;</ph> 속성의는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
          <source>Add the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object and specify the type of the object that contains the field or property, and the name of the field or property.</source>
          <target state="translated">추가 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 개체를 필드 또는 속성의 이름과 필드 또는 속성을 포함 하는 개체의 유형을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
          <source>Lastly, create an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> using the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object and call the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph> method.</source>
          <target state="translated">마지막으로, 만들기는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 를 사용 하 여는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 개체와 호출 된 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
          <source>The following example serializes a class named <ph id="ph1">`Group`</ph> that contains a property named <ph id="ph2">`GroupName`</ph>; the <ph id="ph3">`GroupName`</ph> property is serialized as an XML attribute.</source>
          <target state="translated">다음 예에서는 라는 클래스를 직렬화 <ph id="ph1">`Group`</ph> 라는 속성이 포함 된 <ph id="ph2">`GroupName`</ph>; <ph id="ph3">`GroupName`</ph> 속성이 XML 특성으로 serialize 되는 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
          <source>The example creates an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> and an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object to override the default serialization of the field.</source>
          <target state="translated">이 예에서는 만듭니다는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 필드의 기본 직렬화를 재정의 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
          <source>The example then creates an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute&gt;</ph> to specifically override the property, and the object is set to the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlAttribute%2A&gt;</ph> property The <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object is added to the <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object with the name of the overridden member specified.</source>
          <target state="translated">만듭니다는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute&gt;</ph> 명확 하 게 재정의 속성 및 개체로 설정 되어는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlAttribute%2A&gt;</ph> 속성은 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체에 추가 <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 지정 된 재정의 된 멤버의 이름 가진 개체입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
          <source>Finally, an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> is constructed and returned using the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object.</source>
          <target state="translated">마지막으로 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 구현 되 고 사용 하 여 반환 된 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier">
          <source>Gets or sets an object that allows you to distinguish between a set of choices.</source>
          <target state="translated">일련의 선택을 명확하게 구별하는 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /&gt;</ph> that can be applied to a class member that is serialized as an <ph id="ph2">&lt;see langword="xsi:choice" /&gt;</ph> element.</source>
          <target state="translated"><ph id="ph2">&lt;see langword="xsi:choice" /&gt;</ph> 요소로 serialize되는 클래스 멤버에 적용할 수 있는 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>Gets or sets the default value of an XML element or attribute.</source>
          <target state="translated">XML 요소 또는 특성의 기본값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the default value of an XML element or attribute.</source>
          <target state="translated">XML 요소 또는 특성의 기본값을 나타내는 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>You can specify the default value of an XML element or XML attribute by applying a <ph id="ph1">&lt;xref:System.ComponentModel.DefaultValueAttribute&gt;</ph> to a member.</source>
          <target state="translated">적용 하 여 XML 요소 또는 XML 특성의 기본값을 지정할 수 있습니다는 <ph id="ph1">&lt;xref:System.ComponentModel.DefaultValueAttribute&gt;</ph> 멤버에 있습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>To examine the result of applying the value, compile the application into a DLL or executable, and pass the resulting file as an argument to the XML Schema Definition tool (XSD.exe).</source>
          <target state="translated">값에 적용 한 결과 검사 하려면 응용 프로그램 DLL 또는 실행 파일을 컴파일하고 결과 파일을 XML 스키마 정의 도구 (XSD.exe)를 인수로 전달 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>In the XML schema document, a default value is assigned to the <ph id="ph1">`default`</ph> attribute.</source>
          <target state="translated">기본 값 할당은 XML 스키마 문서에는 <ph id="ph1">`default`</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>In the following example, the default for the <ph id="ph1">\&lt;</ph>Animal&gt; element is "Dogs."</source>
          <target state="translated">다음 예제에 대 한 기본값은 <ph id="ph1">\&lt;</ph>동물 &gt; 요소는 "Dogs"입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>To override the default value, create an <ph id="ph1">&lt;xref:System.Object&gt;</ph> and assign it to the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlDefaultValue%2A&gt;</ph>.</source>
          <target state="translated">기본값을 재정의 하려면 만듭니다는 <ph id="ph1">&lt;xref:System.Object&gt;</ph> 에 할당 하는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlDefaultValue%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>If the value assigned to a field or property is equal to the default value for that field or property, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> does not serialize the value to the XML-instance.</source>
          <target state="translated">필드 또는 속성에 할당 된 값이 해당 필드 또는 속성에 대 한 기본 값과 같은 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 는 XML 인스턴스에 값을 serialize 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>This is because the assigned value can be recovered from the XML schema.</source>
          <target state="translated">즉, XML 스키마에서 할당 된 값을 복구할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>In other words, setting a field or property to its own default value is equivalent of not setting it at all.</source>
          <target state="translated">즉, 필드 또는 속성을로 설정 자체 기본값 같습니다 전혀 설정 하지 않는 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>Likewise, if no value is set for the field or property, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> uses the default value found in the schema.</source>
          <target state="translated">마찬가지로, 필드 또는 속성에 대해 설정 된 경우는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 기본값의 스키마에 있는 사용 합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>In both cases, (setting the property to its default, or not setting it at all), the XML-document instance does not contain any value for the property.</source>
          <target state="translated">둘 다의 경우, (이 속성을 해당 기본 설정 또는 전혀 설정 하지 않은)에서 XML 문서 인스턴스에서 속성에 대 한 모든 값이 포함 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>You can use the class constructors instead of the schema to assign the default values.</source>
          <target state="translated">기본 값을 할당 하는 대신 스키마 클래스 생성자를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>If you are using Xsd.exe to generate a classes from schemas, you can comment out or remove all of the [System.ComponentModel.DefaultValueAttribute("myFieldName")] attributes from the class files.</source>
          <target state="translated">Xsd.exe 클래스를 생성 하는 스키마에서를 사용 하는 경우 주석으로 처리 하거나 클래스 파일에서 [System.ComponentModel.DefaultValueAttribute("myFieldName")] 특성을 모두 제거할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>The following example shows a class named <ph id="ph1">`Pet`</ph> that contains a field that has a default value set to "Dog".</source>
          <target state="translated">다음 예에서는 라는 클래스 <ph id="ph1">`Pet`</ph> "Dog"로 설정 하는 기본 값을 지정 된 필드를 포함 하 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>However, the example also creates an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object, and sets its <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlDefaultValue%2A&gt;</ph> property to a new default value ("Cat").</source>
          <target state="translated">그러나 예제에서는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체 및 설정의 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlDefaultValue%2A&gt;</ph> 속성을 새 기본값 ("Cat").</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>This overrides the original default value.</source>
          <target state="translated">이 원래 기본값을 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>Thus, if the field value is set to "Cat", the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> treats it as the default value, and not serialize it.</source>
          <target state="translated">따라서, 필드 값은 "Cat"로 설정 하는 경우는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 기본 값으로 간주 하 고 serialize 하지 합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
          <source>If it is set to any other value, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> serializes the value.</source>
          <target state="translated">다른 값으로 설정 된 경우는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 값을 serialize 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Xml.Serialization.XmlAttributes.XmlElements">
          <source>Gets a collection of objects that specify how the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> serializes a public field or read/write property as an XML element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph>가 공용 필드 또는 읽기/쓰기 속성을 XML 요소로 serialize하는 방식을 지정하는 개체의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlElements">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlElementAttributes" /&gt;</ph> that contains a collection of <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlElementAttribute" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlElementAttributes" /&gt;</ph> 개체의 컬렉션을 포함하는 <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlElementAttribute" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlElements">
          <source>For each overridden member that is serialized as an XML element, you must add a new <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> to an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlElementAttributes&gt;</ph> by calling the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlElementAttributes.Add%2A&gt;</ph> method.</source>
          <target state="translated">XML 요소로 serialize 되는 각 재정의 된 멤버를 추가 해야 새 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlElementAttributes&gt;</ph> 호출 하 여는 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlElementAttributes.Add%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlElements">
          <source>By default, an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttributes&gt;</ph> object is created and assigned to the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlElements%2A&gt;</ph> property.</source>
          <target state="translated">기본적으로는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttributes&gt;</ph> 개체가 생성 되 고에 할당 된 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlElements%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlElements">
          <source>The following example serializes the <ph id="ph1">`Transportation`</ph> class, which contains a single field named <ph id="ph2">`Vehicles`</ph> that returns an <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 serialize 된 <ph id="ph1">`Transportation`</ph> 라는 단일 필드를 포함 하는 클래스 <ph id="ph2">`Vehicles`</ph> 반환 하는 <ph id="ph3">&lt;xref:System.Collections.ArrayList&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlElements">
          <source>The example applies two <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> attributes to the <ph id="ph2">`Vehicles`</ph> field.</source>
          <target state="translated">예 2를 적용 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> 특성에 <ph id="ph2">`Vehicles`</ph> 필드입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlElements">
          <source>The example creates two <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> objects and adds them to the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlElementAttributes&gt;</ph> collection of an <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object.</source>
          <target state="translated">이 예제에서는 두 개의 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> 개체에 추가 합니다.는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlElementAttributes&gt;</ph> 의 컬렉션은 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlElements">
          <source>To allow the array to accept different object types, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object is added to the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object.</source>
          <target state="translated">다양 한 개체 유형을 수락 배열에 있도록는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체에 추가 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Xml.Serialization.XmlAttributes.XmlEnum">
          <source>Gets or sets an object that specifies how the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> serializes an enumeration member.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph>가 열거형 멤버를 serialize하는 방식을 지정하는 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlEnum">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlEnumAttribute" /&gt;</ph> that specifies how the <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> serializes an enumeration member.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlEnumAttribute" /&gt;</ph>가 열거형 멤버를 serialize하는 방식을 지정하는 <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlEnum">
          <source>For each identifier you want to override, you must create an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object, and set the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlEnum%2A&gt;</ph> property to an <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlEnumAttribute&gt;</ph> that overrides the identifier.</source>
          <target state="translated">재정의 하려는 각 식별자를 만들어야 합니다는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체를 설정의 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlEnum%2A&gt;</ph> 속성을는 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlEnumAttribute&gt;</ph> 식별자를 재정의 하 합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlEnum">
          <source>Add the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object to the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object and specify both the <ph id="ph3">&lt;xref:System.Type&gt;</ph> of the class that contains the enumeration, and the overridden member name.</source>
          <target state="translated">추가 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 개체를 모두 지정는 <ph id="ph3">&lt;xref:System.Type&gt;</ph> 열거형 및 재정의 된 멤버 이름을 포함 하는 클래스의 합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlEnum">
          <source>The following example serializes two classes named <ph id="ph1">`Food`</ph> and <ph id="ph2">`FoodType`</ph>.</source>
          <target state="translated">다음 예제에서는 serialize 라는 두 개의 클래스가 <ph id="ph1">`Food`</ph> 및 <ph id="ph2">`FoodType`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlEnum">
          <source>The <ph id="ph1">`FoodType`</ph> class contains two enumerations that are overridden and, for each enumeration, the example creates an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlEnumAttribute&gt;</ph> object that it assigns to the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlEnum%2A&gt;</ph> property of an <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`FoodType`</ph> 클래스 재정의 된 두 개의 열거형을 포함 하 고 각 열거에 대 한이 예에서는 만듭니다는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlEnumAttribute&gt;</ph> 개체에 할당 되는 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlEnum%2A&gt;</ph> 속성은 <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlEnum">
          <source>The example then adds the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object, which is used to create an <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
          <target state="translated">예제에서는 그런는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 를 만드는 데 사용 되는 개체는 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
          <source>Gets or sets a value that specifies whether or not the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> serializes a public field or public read/write property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph>가 공용 필드 또는 읽기/쓰기 속성을 serialize하는지 여부를 지정하는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> must not serialize the field or property; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph>가 필드 또는 속성을 serialize하지 않으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
          <source>By default, all public fields and public read/write properties are serialized by the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
          <target state="translated">기본적으로 모든 public 필드 및 공용 읽기/쓰기 속성 하 여 serialize 되는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
          <source>That is, the value of each public field or property is persisted as an XML element or XML attribute in an XML-document instance.</source>
          <target state="translated">즉, 각 공용 필드 또는 속성의 값은 XML 요소 또는 XML 문서 인스턴스에 XML 특성으로 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
          <source>To override the default serialization of a field or property, create an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object, and set its <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlIgnore%2A&gt;</ph> property to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">필드 또는 속성의 기본 직렬화를 재정의 하려면 만듭니다는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체를 설정의 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlIgnore%2A&gt;</ph> 속성을 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
          <source><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides.Add%2A&gt;</ph> the object to an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object and specify the type of the object that contains the field or property to ignore, and the name of the field or property to ignore.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides.Add%2A&gt;</ph> 개체는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 개체를 필드 또는 속성을 ignore의 이름과 필드 또는 속성을 ignore를 포함 하는 개체의 유형을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
          <source>If an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlIgnoreAttribute&gt;</ph> is applied to a field or property, the field or property is ignored.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlIgnoreAttribute&gt;</ph> 적용 되는 필드 또는 속성에는 필드 또는 속성은 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
          <source>However you can override that behavior by creating an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object, setting its <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlIgnore%2A&gt;</ph> property to <ph id="ph3">`false`</ph>, adding it to an <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object specifying the type of the object that contains the field or property, and the name of the field or property.</source>
          <target state="translated">그러나 만들어 동작을 재정의할 수 있습니다는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 설정 개체를 해당 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlIgnore%2A&gt;</ph> 속성을 <ph id="ph3">`false`</ph>, 추가 하는 <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 의 이름과 필드 또는 속성을 포함 하는 개체의 유형을 지정 하는 개체는 필드 또는 속성입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
          <source>The following example serializes a class named <ph id="ph1">`Group`</ph>, which contains a member named <ph id="ph2">`Comment`</ph> to which the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlIgnoreAttribute&gt;</ph> is applied.</source>
          <target state="translated">다음 예에서는 라는 클래스를 직렬화 <ph id="ph1">`Group`</ph>, 라는 멤버를 포함 하 <ph id="ph2">`Comment`</ph> 입니다는 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlIgnoreAttribute&gt;</ph> 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
          <source>The example creates an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object, and sets the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlIgnore%2A&gt;</ph> property to <ph id="ph3">`false`</ph>, thereby overriding the <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlIgnoreAttribute&gt;</ph>.</source>
          <target state="translated">이 예에서는 만듭니다는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체 및 설정의 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlIgnore%2A&gt;</ph> 속성을 <ph id="ph3">`false`</ph>재정의 <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlIgnoreAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="P:System.Xml.Serialization.XmlAttributes.Xmlns">
          <source>Gets or sets a value that specifies whether to keep all namespace declarations when an object containing a member that returns an <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /&gt;</ph> object is overridden.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /&gt;</ph> 개체를 반환하는 멤버가 들어 있는 개체가 재정의될 때 모든 네임스페이스 선언을 유지할지 여부를 지정하는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.Xmlns">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the namespace declarations should be kept; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">네임스페이스 선언을 유지해야 한다면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.Xmlns">
          <source>The following example contains a class named <ph id="ph1">`Student`</ph>.</source>
          <target state="translated">다음 예제에서는 클래스를 포함 <ph id="ph1">`Student`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.Xmlns">
          <source>The class contains a member named <ph id="ph1">`MyNamespaces`</ph> that returns an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt;</ph> object.</source>
          <target state="translated">명명 된 멤버를 포함 하는 클래스 <ph id="ph1">`MyNamespaces`</ph> 반환 하는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializerNamespaces&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.Xmlns">
          <source>The example creates an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object that is added to an instance of the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> class.</source>
          <target state="translated">이 예에서는 만듭니다는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 인스턴스에 추가 된 개체는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.Xmlns">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes.Xmlns%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, which instructs the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> to preserve the namespaces when the serialization of the <ph id="ph4">`Student`</ph> object is overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes.Xmlns%2A&gt;</ph> 속성이로 설정 되어 <ph id="ph2">`true`</ph>, 지시 하는 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 네임 스페이스를 유지 하기 위해 때의 직렬화는 <ph id="ph4">`Student`</ph> 개체는 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:System.Xml.Serialization.XmlAttributes.XmlRoot">
          <source>Gets or sets an object that specifies how the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> serializes a class as an XML root element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph>가 클래스를 XML 루트 요소로 serialize하는 방식을 지정하는 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlRoot">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlRootAttribute" /&gt;</ph> that overrides a class attributed as an XML root element.</source>
          <target state="translated">XML 루트 요소로 지정된 클래스를 재정의하는 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlRootAttribute" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlRoot">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object, an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object, and an <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlRootAttribute&gt;</ph> object.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 개체는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체 및 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlRootAttribute&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlRoot">
          <source>The example assigns the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlRootAttribute&gt;</ph> to the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlRoot%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object, and adds the <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object to the <ph id="ph5">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object.</source>
          <target state="translated">이 예에서는 할당는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlRootAttribute&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlRoot%2A&gt;</ph> 속성의는 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체를 추가 하는 <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체를 <ph id="ph5">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlRoot">
          <source>Lastly, the example gets the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object by passing the <ph id="ph2">&lt;xref:System.Type&gt;</ph> of the serialized class to the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object.</source>
          <target state="translated">마지막으로,이 예제에서는 가져옵니다는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 전달 하 여 개체는 <ph id="ph2">&lt;xref:System.Type&gt;</ph> 에 대해 직렬화 된 클래스의는 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlRoot">
          <source>(In this example, the <ph id="ph1">&lt;xref:System.Type&gt;</ph> is <ph id="ph2">`Group`</ph>.)</source>
          <target state="translated">(이 예제는 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 은 <ph id="ph2">`Group`</ph>.)</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="P:System.Xml.Serialization.XmlAttributes.XmlText">
          <source>Gets or sets an object that instructs the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> to serialize a public field or public read/write property as XML text.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph>가 공용 필드 또는 공용 읽기/쓰기 속성을 XML 텍스트로 serialize하도록 하는 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlText">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlTextAttribute" /&gt;</ph> that overrides the default serialization of a public property or field.</source>
          <target state="translated">공용 속성 또는 필드의 기본 serialization을 재정의하는 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlTextAttribute" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlText">
          <source>By default, a public field or public read/write property is serialized as an XML element by the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
          <target state="translated">기본적으로 공용 필드 또는 공용 읽기/쓰기 속성은로 serialize 하 여 XML 요소는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlText">
          <source>However, it can force the field or property to be serialized as XML text by applying an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTextAttribute&gt;</ph> to the field or property.</source>
          <target state="translated">그러나 필드 또는 속성을 적용 하 여 XML 텍스트로 serialize 할 수는는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTextAttribute&gt;</ph> 필드 또는 속성에 있습니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlText">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTextAttribute&gt;</ph> cannot be applied to a field or property that returns an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTextAttribute&gt;</ph> 필드 또는 배열을 반환 하는 속성에 적용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlText">
          <source>To override the default serialization of a field or property (that does not return an array), create an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTextAttribute&gt;</ph> and assign it to the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlText%2A&gt;</ph> property of an <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object.</source>
          <target state="translated">필드 또는 속성 (즉 배열을 반환 하지 않음)의 기본 직렬화를 재정의 하려면 만듭니다는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTextAttribute&gt;</ph> 에 할당 하는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlText%2A&gt;</ph> 속성은 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlText">
          <source>Add the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object and specify the type of the object that contains the overridden field or property, and the name of the overridden field or property.</source>
          <target state="translated">추가 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 개체를 재정의 하는 필드 또는 속성을 포함 하는 개체 유형과 재정의 된 필드 또는 속성의 이름을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlText">
          <source>The following example serializes the class named <ph id="ph1">`Group`</ph>, which contains a field named <ph id="ph2">`Comment`</ph>.</source>
          <target state="translated">다음 예제에서는 라는 클래스를 serialize <ph id="ph1">`Group`</ph>, 라는 필드를 포함 하 <ph id="ph2">`Comment`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlText">
          <source>To override the default way the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> serializes the field, the example creates an <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> and an <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object.</source>
          <target state="translated">기본값을 재정의 하려면 방식으로 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 가 필드를 serialize 만듭니다는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlText">
          <source>The example then creates an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTextAttribute&gt;</ph> object, which it assigns to the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlText%2A&gt;</ph> property, and adds the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object (with the name of the field to be serialized as XML text) to the <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object.</source>
          <target state="translated">만듭니다는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTextAttribute&gt;</ph> 를 할당 하는 개체는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlText%2A&gt;</ph> 속성을 추가 하 고는 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> (XML 텍스트로 serialize 될 필드의 이름)으로 개체를 <ph id="ph4">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlText">
          <source>Lastly the example creates an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> using the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object.</source>
          <target state="translated">마지막으로 예제에서는 만듭니다는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> 를 사용 하는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="P:System.Xml.Serialization.XmlAttributes.XmlType">
          <source>Gets or sets an object that specifies how the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph> serializes a class to which the <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlTypeAttribute" /&gt;</ph> has been applied.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlSerializer" /&gt;</ph>가 적용된 클래스를 <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlTypeAttribute" /&gt;</ph>가 serialize하는 방식을 지정하는 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlType">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlTypeAttribute" /&gt;</ph> that overrides an <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlTypeAttribute" /&gt;</ph> applied to a class declaration.</source>
          <target state="translated">클래스 선언에 적용된 <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlTypeAttribute" /&gt;</ph>를 재정의하는 <ph id="ph2">&lt;see cref="T:System.Xml.Serialization.XmlTypeAttribute" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlType">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTypeAttribute&gt;</ph> can be used to control how a type is serialized by the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTypeAttribute&gt;</ph> 는 형식으로 serialize 되는 방식을 제어 하는 데 사용할 수는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlType">
          <source>For example, by default, when a type is serialized, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> uses the class name as the XML element name.</source>
          <target state="translated">예를 들어 형식이 serialize 될 때 기본적으로는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> XML 요소 이름으로 클래스 이름을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlType">
          <source>By creating an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTypeAttribute&gt;</ph>, setting the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlType%2A&gt;</ph> property to it, and creating an <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> object, you can change the XML element name.</source>
          <target state="translated">만들어는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTypeAttribute&gt;</ph>설정는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlType%2A&gt;</ph> 속성을 만들기는 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributeOverrides&gt;</ph> 개체를 XML 요소 이름을 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlAttributes.XmlType">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTypeAttribute&gt;</ph> object, and assigns it to the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlType%2A&gt;</ph> property of an <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> object.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlTypeAttribute&gt;</ph> 개체에 할당 합니다는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributes.XmlType%2A&gt;</ph> 속성은 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlAttributes&gt;</ph> 개체입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>