<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XmlChoiceIdentifierAttribute.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5cf8e0936efaad93549d3d919319b64917f382988.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf8e0936efaad93549d3d919319b64917f382988</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>Specifies that the member can be further detected by using an enumeration.</source>
          <target state="translated">열거형을 사용하여 멤버를 추가 검색할 수 있도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>The XML schema element definition named <ph id="ph1">`xsi:choice`</ph> is used to define a complex element that can contain only one child in an instance (maxoccurs = 1).</source>
          <target state="translated">명명 된 XML 스키마 요소 정의 <ph id="ph1">`xsi:choice`</ph> 인스턴스에서 자식 노드가 한 개만 포함 될 수 있는 복잡 한 요소를 정의 하는 데 사용 됩니다 (maxoccurs = 1).</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>That child can be one of several types, and it can have one of several names.</source>
          <target state="translated">해당 자식 여러 형식 중 하나일 수 있습니다 및 몇 가지 이름 중 하나를 가질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>Each name is associated with a specific type; however, several names can be associated with the same type.</source>
          <target state="translated">각 이름은 특정 형식과 연결 됩니다. 그러나 여러 개의 이름을 동일한 유형의 연결할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>Because of this, an instance of such an element is indistinct.</source>
          <target state="translated">이 인해 이러한 요소는 인스턴스 고유 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>For example, consider the following schema fragment that defines such an indistinct element named <ph id="ph1">`MyChoice`</ph>.</source>
          <target state="translated">예를 들어 이러한 구별 되지 않는 라는 요소를 정의 하는 다음과 같은 스키마 단편은 <ph id="ph1">`MyChoice`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute&gt;</ph> allows you to assign a special enumeration value to each instance of the member.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute&gt;</ph> 멤버의 각 인스턴스에 특별 한 열거 값을 할당할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>You must either create the enumeration yourself or it can be generated by the <bpt id="p1">[</bpt>XML Schema Definition Tool (Xsd.exe)<ept id="p1">](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md)</ept>.</source>
          <target state="translated">하거나 열거형 직접 만들어야 하거나으로 생성할 수 있습니다는 <bpt id="p1">[</bpt>XML 스키마 정의 도구 (Xsd.exe)<ept id="p1">](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>The following C# code shows how the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute&gt;</ph> is applied to an <ph id="ph2">`Item`</ph> field; the <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName%2A&gt;</ph> property identifies the field that contains the enumeration that is further used to detect the choice.</source>
          <target state="translated">C# 코드에서는 다음 방법을 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute&gt;</ph> 에 적용 되는 <ph id="ph2">`Item`</ph> ; 필드는 <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName%2A&gt;</ph> 추가로 선택을 검색 하는 데 사용 되는 열거형을 포함 하는 필드 속성을 식별 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>When this code is in place, you can serialize and deserialize this class by setting the <ph id="ph1">`ItemType`</ph> field to an appropriate enumeration.</source>
          <target state="translated">이 코드 이면 serialize 하는 설정 하 여이 클래스를 deserialize는 <ph id="ph1">`ItemType`</ph> 필드를 적절 한 열거형입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>For example, to serialize the <ph id="ph1">`Choice`</ph> class, the C# code resembles the following.</source>
          <target state="translated">예를 들어, serialize 하는 <ph id="ph1">`Choice`</ph> 클래스, C# 코드는 다음과 유사 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>When deserializing, the C# code resembles the following:</source>
          <target state="translated">역직렬화 하는 동안, C# 코드는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>There is a second scenario when the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute&gt;</ph> is used.</source>
          <target state="translated">두 번째 시나리오는 경우는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute&gt;</ph> 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>In the following schema, the member is a field that returns an array of items (maxOccurs="unbounded").</source>
          <target state="translated">다음 스키마에는 멤버는 항목의 배열을 반환 하는 필드 (maxOccurs = "unbounded").</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>The array can contain objects of the first choice ("D-a-t-a"), and of the second choice ("MoreData").</source>
          <target state="translated">배열의 첫 번째 선택 항목의 개체를 포함할 수 있습니다 ("D-a-t-a"), 및의 두 번째 방법은 ("MoreData").</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>The resulting class then uses a field to return an array of items.</source>
          <target state="translated">다음 결과 클래스는 필드를 사용 하 여 항목의 배열을 반환 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>For each item in the array, a corresponding <ph id="ph1">`ItemChoiceType`</ph> enumeration must also be found.</source>
          <target state="translated">해당 배열의 각 항목에 대 한 <ph id="ph1">`ItemChoiceType`</ph> 열거도 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>The matching enumerations are contained in the array returned by the <ph id="ph1">`ItemsElementName`</ph> field.</source>
          <target state="translated">일치 하는 열거형에서 반환 된 배열에 포함 되어는 <ph id="ph1">`ItemsElementName`</ph> 필드입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>When deserializing an object that includes a range of choices, use a control structure (such as an if...then...else structure) to determine how to deserialize a particular value.</source>
          <target state="translated">제어 구조를 사용 하 여 선택 항목의 범위를 포함 하는 개체를 역직렬화 할 때 (if 등... then... else 구조)에 특정 값을 역직렬화 하는 방법을 결정 하 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>In the control structure, check the enumeration value and deserialize the value accordingly.</source>
          <target state="translated">제어 구조에서 열거형 값을 확인 하 고 그에 따라 값을 deserialize 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>The following example serializes a class named <ph id="ph1">`Choices`</ph> that includes two fields, <ph id="ph2">`MyChoice`</ph> and <ph id="ph3">`ManyChoices`</ph>.</source>
          <target state="translated">다음 예제에서는 라는 클래스를 직렬화 <ph id="ph1">`Choices`</ph> 두 필드가 들어 있는 <ph id="ph2">`MyChoice`</ph> 및 <ph id="ph3">`ManyChoices`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute&gt;</ph> is applied to each field that specifies (through the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName%2A&gt;</ph> property) another class member that gets or sets an enumeration that detects the member value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute&gt;</ph> 지정 하는 각 필드에 적용 됩니다 (통해는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName%2A&gt;</ph> 속성)는 멤버 값을 검색 하는 열거형을 가져오거나 설정 합니다. 다른 클래스 멤버입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>The <ph id="ph1">`MyChoice`</ph> field can be set to a single value, with a corresponding enumeration member found in the <ph id="ph2">`EnumType`</ph> field.</source>
          <target state="translated"><ph id="ph1">`MyChoice`</ph> 필드에 해당 열거형 멤버와 단일 값으로 설정할 수 있습니다는 <ph id="ph2">`EnumType`</ph> 필드입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>The <ph id="ph1">`ManyChoices`</ph> field returns an array of objects.</source>
          <target state="translated"><ph id="ph1">`ManyChoices`</ph> 필드 개체의 배열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>The <ph id="ph1">`ChoiceArray`</ph> field returns an array of enumeration values.</source>
          <target state="translated"><ph id="ph1">`ChoiceArray`</ph> 필드 열거형 값의 배열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>For each array member in the <ph id="ph1">`ManyChoices`</ph> field, a corresponding member is found in the array returned by the <ph id="ph2">`ChoiceArray`</ph> field.</source>
          <target state="translated">각 배열 멤버에 <ph id="ph1">`ManyChoices`</ph> 해당 멤버가에서 반환 된 배열에 있는 필드는 <ph id="ph2">`ChoiceArray`</ph> 필드입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor">
          <source>The following example serializes a class named <ph id="ph1">`Choices`</ph> that includes two fields, <ph id="ph2">`MyChoice`</ph> and <ph id="ph3">`ManyChoices`</ph>.</source>
          <target state="translated">다음 예제에서는 라는 클래스를 직렬화 <ph id="ph1">`Choices`</ph> 두 필드가 들어 있는 <ph id="ph2">`MyChoice`</ph> 및 <ph id="ph3">`ManyChoices`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute&gt;</ph> is applied to each field that specifies (through the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName%2A&gt;</ph> property) another class member that gets or sets an enumeration that detects the member value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute&gt;</ph> 지정 하는 각 필드에 적용 됩니다 (통해는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName%2A&gt;</ph> 속성)는 멤버 값을 검색 하는 열거형을 가져오거나 설정 합니다. 다른 클래스 멤버입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor">
          <source>The <ph id="ph1">`MyChoice`</ph> field can be set to a single value, with a corresponding enumeration member found in the <ph id="ph2">`EnumType`</ph> field.</source>
          <target state="translated"><ph id="ph1">`MyChoice`</ph> 필드에 해당 열거형 멤버와 단일 값으로 설정할 수 있습니다는 <ph id="ph2">`EnumType`</ph> 필드입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor">
          <source>The <ph id="ph1">`ManyChoices`</ph> field returns an array of objects.</source>
          <target state="translated"><ph id="ph1">`ManyChoices`</ph> 필드 개체의 배열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor">
          <source>The <ph id="ph1">`ChoiceArray`</ph> field returns an array of enumeration values.</source>
          <target state="translated"><ph id="ph1">`ChoiceArray`</ph> 필드 열거형 값의 배열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor">
          <source>For each array member in the <ph id="ph1">`ManyChoices`</ph> field, a corresponding member is found in the array returned by the <ph id="ph2">`ChoiceArray`</ph> field.</source>
          <target state="translated">각 배열 멤버에 <ph id="ph1">`ManyChoices`</ph> 해당 멤버가에서 반환 된 배열에 있는 필드는 <ph id="ph2">`ChoiceArray`</ph> 필드입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor(System.String)">
          <source>The member name that returns the enumeration used to detect a choice.</source>
          <target state="translated">선택을 검색하는 데 사용하는 열거형을 반환하는 멤버 이름입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
          <source>Gets or sets the name of the field that returns the enumeration to use when detecting types.</source>
          <target state="translated">형식을 검색하는 경우 사용할 열거형을 반환하는 필드의 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
          <source>The name of a field that returns an enumeration.</source>
          <target state="translated">열거형을 반환하는 필드의 이름입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
          <source>At least one member must be present in the enumeration returned by the field named in the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName%2A&gt;</ph> value.</source>
          <target state="translated">에 이름이 지정 된 필드에서 반환 된 열거형에 구성원을 하나 이상 있어야는 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName%2A&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
          <source>By default, that enumeration name takes the name of the field that the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute&gt;</ph> is applied to.</source>
          <target state="translated">기본적으로 해당 열거형 이름 필드의 이름을 하는 사용 된 <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute&gt;</ph> 에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
          <source>The following example serializes a class named <ph id="ph1">`Choices`</ph> that includes two fields, <ph id="ph2">`MyChoice`</ph> and <ph id="ph3">`ManyChoices`</ph>.</source>
          <target state="translated">다음 예제에서는 라는 클래스를 직렬화 <ph id="ph1">`Choices`</ph> 두 필드가 들어 있는 <ph id="ph2">`MyChoice`</ph> 및 <ph id="ph3">`ManyChoices`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute&gt;</ph> is applied to each field that specifies (through the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName%2A&gt;</ph> property) another class member that gets or sets an enumeration that detects the member value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute&gt;</ph> 지정 하는 각 필드에 적용 됩니다 (통해는 <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName%2A&gt;</ph> 속성)는 멤버 값을 검색 하는 열거형을 가져오거나 설정 합니다. 다른 클래스 멤버입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
          <source>The <ph id="ph1">`MyChoice`</ph> field can be set to a single value, with a corresponding enumeration member found in the <ph id="ph2">`EnumType`</ph> field.</source>
          <target state="translated"><ph id="ph1">`MyChoice`</ph> 필드에 해당 열거형 멤버와 단일 값으로 설정할 수 있습니다는 <ph id="ph2">`EnumType`</ph> 필드입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
          <source>The <ph id="ph1">`ManyChoices`</ph> field returns an array of objects.</source>
          <target state="translated"><ph id="ph1">`ManyChoices`</ph> 필드 개체의 배열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
          <source>The <ph id="ph1">`ChoiceArray`</ph> field returns an array of enumeration values.</source>
          <target state="translated"><ph id="ph1">`ChoiceArray`</ph> 필드 열거형 값의 배열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
          <source>For each array member in the <ph id="ph1">`ManyChoices`</ph> field, a corresponding member is found in the array returned by the <ph id="ph2">`ChoiceArray`</ph> field.</source>
          <target state="translated">각 배열 멤버에 <ph id="ph1">`ManyChoices`</ph> 해당 멤버가에서 반환 된 배열에 있는 필드는 <ph id="ph2">`ChoiceArray`</ph> 필드입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>