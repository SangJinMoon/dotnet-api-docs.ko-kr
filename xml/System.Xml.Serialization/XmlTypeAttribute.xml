<Type Name="XmlTypeAttribute" FullName="System.Xml.Serialization.XmlTypeAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d81450332b3c1dbb9f285e70ae9da4fedb68c9d2" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36438455" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlTypeAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlTypeAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlTypeAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlTypeAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlTypeAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type XmlTypeAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Enum | System.AttributeTargets.Interface | System.AttributeTargets.Struct)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.Xml.Serialization.XmlSerializer" />가 특성 대상을 serialize할 때 생성되는 XML 스키마를 제어합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlTypeAttribute> 제어 하는 특성의 제품군에 속하는 방법을 <xref:System.Xml.Serialization.XmlSerializer> 직렬화 하거나 개체를 역직렬화 합니다. 비슷한 특성의 전체 목록은 참조 하십시오. [특성을 제어 XML 직렬화](~/docs/standard/serialization/attributes-that-control-xml-serialization.md)합니다.  
  
 적용할 수는 <xref:System.Xml.Serialization.XmlTypeAttribute> 클래스, 구조체, 열거형 또는 인터페이스 선언에 있습니다.  
  
 적용 된 <xref:System.Xml.Serialization.XmlTypeAttribute> XML 형식의 네임 스페이스, XML 유형 이름 및 형식을 XML 스키마 문서에 포함할지 여부를 지정 하는 클래스에 있습니다. 속성을 설정할 때의 결과 확인 하는 <xref:System.Xml.Serialization.XmlTypeAttribute> 클래스 응용 프로그램 실행 파일이 나 DLL로 컴파일하고 결과 파일을 전달는 [XML 스키마 정의 도구 (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md)합니다. 형식 정의 포함 하 여 스키마를 작성 하는 도구입니다.  
  
> [!NOTE]
>  설정 하는 경우는 <xref:System.Xml.Serialization.XmlTypeAttribute.IncludeInSchema%2A> 속성을 `false`, [XML 스키마 정의 도구 (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md) 형식이 스키마에 포함 되지 않습니다. 기본적으로 각 공용 클래스에 대 한 XSD 도구를 생성 한 `complexType` 및 해당 형식의 요소입니다.  
  
 특성을 사용 하는 방법에 대 한 자세한 내용은 참조 [특성](http://msdn.microsoft.com/library/30386922-1e00-4602-9ebf-526b271a8b87)합니다.  
  
> [!NOTE]
>  word를 사용 하 여 `XmlType` 대신에 간결 코드에서 <xref:System.Xml.Serialization.XmlTypeAttribute>합니다.  
  
   
  
## Examples  
 다음 예제에서는 두 클래스를는 <xref:System.Xml.Serialization.XmlTypeAttribute> 적용 되었습니다.  
  
 [!code-cpp[Classic XmlTypeAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlTypeAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlTypeAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlTypeAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlTypeAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlTypeAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlText" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTypeAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlTypeAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTypeAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는의 두 인스턴스는 <xref:System.Xml.Serialization.XmlTypeAttribute> 두 클래스의 직렬화를 재정의 하는 데 사용 되는 클래스입니다.  
  
 [!code-cpp[XMLTypeAttribute1_2#2](~/samples/snippets/cpp/VS_Snippets_Remoting/XMLTypeAttribute1_2/CPP/xmltypeattribute1_2.cpp#2)]
 [!code-csharp[XMLTypeAttribute1_2#2](~/samples/snippets/csharp/VS_Snippets_Remoting/XMLTypeAttribute1_2/CS/xmltypeattribute1_2.cs#2)]
 [!code-vb[XMLTypeAttribute1_2#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XMLTypeAttribute1_2/VB/xmltypeattribute1_2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTypeAttribute (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlTypeAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTypeAttribute(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlTypeAttribute : string -&gt; System.Xml.Serialization.XmlTypeAttribute" Usage="new System.Xml.Serialization.XmlTypeAttribute typeName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <see cref="T:System.Xml.Serialization.XmlSerializer" />가 클래스 인스턴스를 serialize할 때 생성하고 클래스 인스턴스를 deserialize할 때 인식하는 XML 형식의 이름입니다.</param>
        <summary>
          <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> 클래스의 새 인스턴스를 초기화하고 XML 형식의 이름을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 적용 된 <xref:System.Xml.Serialization.XmlTypeAttribute> XML 형식의 네임 스페이스, XML 유형 이름 및 형식을 XML 스키마 문서에 포함할지 여부를 지정 하는 클래스에 있습니다. 속성을 설정할 때의 결과 확인 하는 <xref:System.Xml.Serialization.XmlTypeAttribute> 클래스 응용 프로그램 실행 파일이 나 DLL로 컴파일하고 결과 파일을 전달는 [XML 스키마 정의 도구 (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md)합니다. 형식 정의 포함 하 여 스키마를 작성 하는 도구입니다.  
  
   
  
## Examples  
 다음 예제에서는의 두 인스턴스는 <xref:System.Xml.Serialization.XmlTypeAttribute> 두 클래스의 직렬화를 재정의 하는 데 사용 되는 클래스입니다.  
  
 [!code-cpp[XMLTypeAttribute1_2#2](~/samples/snippets/cpp/VS_Snippets_Remoting/XMLTypeAttribute1_2/CPP/xmltypeattribute1_2.cpp#2)]
 [!code-csharp[XMLTypeAttribute1_2#2](~/samples/snippets/csharp/VS_Snippets_Remoting/XMLTypeAttribute1_2/CS/xmltypeattribute1_2.cs#2)]
 [!code-vb[XMLTypeAttribute1_2#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XMLTypeAttribute1_2/VB/xmltypeattribute1_2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousType">
      <MemberSignature Language="C#" Value="public bool AnonymousType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AnonymousType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlTypeAttribute.AnonymousType" />
      <MemberSignature Language="VB.NET" Value="Public Property AnonymousType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AnonymousType { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AnonymousType : bool with get, set" Usage="System.Xml.Serialization.XmlTypeAttribute.AnonymousType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>결과 스키마 형식이 XSD 익명 형식인지 여부를 결정하는 값을 가져오거나 설정합니다.</summary>
        <value>결과 스키마 형식이 XSD 익명 형식이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeInSchema">
      <MemberSignature Language="C#" Value="public bool IncludeInSchema { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeInSchema" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlTypeAttribute.IncludeInSchema" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeInSchema As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeInSchema { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeInSchema : bool with get, set" Usage="System.Xml.Serialization.XmlTypeAttribute.IncludeInSchema" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 스키마 문서에 형식을 포함할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>XML 스키마 문서에 형식을 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 적용 된 <xref:System.Xml.Serialization.XmlTypeAttribute> XML 형식의 네임 스페이스, XML 유형 이름 및 형식을 XML 스키마 문서에 포함할지 여부를 지정 하는 클래스에 있습니다. 속성을 설정할 때의 결과 확인 하 고 <xref:System.Xml.Serialization.XmlTypeAttribute> 클래스, 응용 프로그램 실행 파일이 나 DLL로 컴파일 및 XML 스키마 정의 도구 (XSD.exe)를 파일에 전달 합니다. 형식 정의 포함 하 여 스키마를 작성 하는 도구입니다.  
  
   
  
## Examples  
 다음 예제에서는 적용는 <xref:System.Xml.Serialization.XmlTypeAttribute> 에 `ExtraneousInfo` 설정 클래스는 <xref:System.Xml.Serialization.XmlTypeAttribute.IncludeInSchema%2A> 속성을 `false`합니다.  
  
 [!code-cpp[Classic XmlTypeAttribute.IncludeInSchema Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlTypeAttribute.IncludeInSchema Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlTypeAttribute.IncludeInSchema Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlTypeAttribute.IncludeInSchema Example/CS/source.cs#1)]
 [!code-vb[Classic XmlTypeAttribute.IncludeInSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlTypeAttribute.IncludeInSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlTypeAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Xml.Serialization.XmlTypeAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 형식의 네임스페이스를 가져오거나 설정합니다.</summary>
        <value>XML 형식의 네임스페이스입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 적용는 <xref:System.Xml.Serialization.XmlTypeAttribute> 클래스 설정 하는 동안에 <xref:System.Xml.Serialization.XmlTypeAttribute.Namespace%2A> 속성입니다.  
  
 [!code-cpp[Classic XmlTypeAttribute.Namespace Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlTypeAttribute.Namespace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlTypeAttribute.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlTypeAttribute.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic XmlTypeAttribute.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlTypeAttribute.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlTypeAttribute.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string with get, set" Usage="System.Xml.Serialization.XmlTypeAttribute.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 형식의 이름을 가져오거나 설정합니다.</summary>
        <value>XML 형식의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 적용 된 <xref:System.Xml.Serialization.XmlTypeAttribute> XML 형식의 네임 스페이스, XML 유형 이름 및 형식을 XML 스키마 문서에 포함할지 여부를 지정 하는 클래스에 있습니다. 속성을 설정할 때의 결과 확인 하는 <xref:System.Xml.Serialization.XmlTypeAttribute> 클래스 응용 프로그램 실행 파일이 나 DLL로 컴파일하고 결과 파일을 전달는 [XML 스키마 정의 도구 (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md)합니다. 형식 정의 포함 하 여 스키마를 작성 하는 도구입니다.  
  
   
  
## Examples  
 다음 예제에서는 적용 된 <xref:System.Xml.Serialization.XmlTypeAttribute> 에 `Person` 및 `Job` 클래스입니다. 클래스를 컴파일하고 실행 파일에 XML 스키마 정의 도구에 전달 하는 경우 스키마는 [출력] 섹션에 표시 됩니다.  
  
 [!code-cpp[Classic XmlTypeAttribute.TypeName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlTypeAttribute.TypeName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlTypeAttribute.TypeName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlTypeAttribute.TypeName Example/CS/source.cs#1)]
 [!code-vb[Classic XmlTypeAttribute.TypeName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlTypeAttribute.TypeName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>