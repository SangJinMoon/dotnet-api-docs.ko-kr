<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PhysicalAddress.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac560936bae143ea68d22d99243f51e63e4ba126f83.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">60936bae143ea68d22d99243f51e63e4ba126f83</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.NetworkInformation.PhysicalAddress">
          <source>Provides the Media Access Control (MAC) address for a network interface (adapter).</source>
          <target state="translated">네트워크 인터페이스(어댑터)에 MAC(Media Access Control) 주소를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.NetworkInformation.PhysicalAddress">
          <source>The MAC address, or physical address, is a hardware address that uniquely identifies each node, such as a computer or printer, on a network.</source>
          <target state="translated">MAC 주소 또는 실제 주소는 컴퓨터 또는 네트워크에 프린터와 같은 각 노드를 고유 하 게 식별 하는 하드웨어 주소입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.NetworkInformation.PhysicalAddress">
          <source>Instances of this class are returned by the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">이 클래스의 인스턴스는에서 반환 되는 <ph id="ph1">&lt;xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.NetworkInformation.PhysicalAddress">
          <source>The following code example displays the physical addresses of all interfaces on the local computer.</source>
          <target state="translated">다음 코드 예제에서는 로컬 컴퓨터에서 모든 인터페이스의 실제 주소를 표시합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> array containing the address.</source>
          <target state="translated">주소가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> 배열입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])">
          <source>In common scenarios, applications do not need to call this constructor; instances of this class are returned by the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A&gt;</ph> method.</source>
          <target state="translated">공통 시나리오, 응용 프로그램 필요가 없습니다;이 생성자를 호출 이 클래스의 인스턴스는에서 반환 되는 <ph id="ph1">&lt;xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])">
          <source>Note that you can also use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A&gt;</ph> method to create a new instance of <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph>.</source>
          <target state="translated">사용할 수 있는 참고는 <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A&gt;</ph> 의 새 인스턴스를 만드는 메서드를 <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])">
          <source>The following code example creates a new <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> object.</source>
          <target state="translated">다음 코드 예제에서는 새 <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> to compare to the current instance.</source>
          <target state="translated">현재 인스턴스와 비교할 <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)">
          <source>Compares two <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> instances.</source>
          <target state="translated">두 개의 <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> 인스턴스를 비교합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this instance and the specified instance contain the same address; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 인스턴스와 지정된 인스턴스에 동일한 주소가 들어 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)">
          <source>The following code example compares two <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> instances.</source>
          <target state="translated">다음 코드 예제에서는 두 개의 비교 <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes">
          <source>Returns the address of the current instance.</source>
          <target state="translated">현재 인스턴스의 주소를 반환합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes">
          <source>A <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> array containing the address.</source>
          <target state="translated">주소가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> 배열입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes">
          <source>The following code example calls this method to retrieve the address of a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> and formats the address for display.</source>
          <target state="translated">다음 코드 예제에서는 호출의 주소를 검색 하려면이 메서드는 <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> 하 고 표시 하기 위한 주소 서식을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.GetHashCode">
          <source>Returns the hash value of a physical address.</source>
          <target state="translated">실제 주소의 해시 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.GetHashCode">
          <source>An integer hash value.</source>
          <target state="translated">정수 해시 값입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.Net.NetworkInformation.PhysicalAddress.None">
          <source>Returns a new <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> instance with a zero length address.</source>
          <target state="translated">길이가 0인 주소를 사용하는 새 <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> 인스턴스를 반환합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Net.NetworkInformation.PhysicalAddress.None">
          <source>This field is read-only.</source>
          <target state="translated">이 필드는 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.NetworkInformation.PhysicalAddress.None">
          <source>The <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A&gt;</ph> method returns <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.None&gt;</ph> if you specify <ph id="ph3">`null`</ph> address.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A&gt;</ph> 메서드 반환 <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.None&gt;</ph> 지정 하는 경우 <ph id="ph3">`null`</ph> 주소입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Net.NetworkInformation.PhysicalAddress.None">
          <source>The following code example demonstrates using this field to test the result of parsing an address.</source>
          <target state="translated">다음 코드 예제에서는이 필드를 사용 하 여 주소를 구문 분석의 결과 테스트 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the address that will be used to initialize the <ph id="ph2">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> instance returned by this method.</source>
          <target state="translated">이 메서드에서 반환된 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 인스턴스를 초기화하는 데 사용할 주소가 들어 있는 <ph id="ph2">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>Parses the specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> and stores its contents as the address bytes of the <ph id="ph2">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> returned by this method.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>을 구문 분석하고 해당 내용을 이 메서드에서 반환된 <ph id="ph2">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph>의 주소 바이트로 저장합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> instance with the specified address.</source>
          <target state="translated">지정된 주소를 사용한 <ph id="ph1">&lt;see cref="T:System.Net.NetworkInformation.PhysicalAddress" /&gt;</ph> 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>The <ph id="ph1">`address`</ph> parameter must contain a string that can only consist of numbers and upper-case letters as hexadecimal digits.</source>
          <target state="translated"><ph id="ph1">`address`</ph> 대문자 16 진수 숫자 및 매개 변수는 숫자의만 구성 될 수 있는 문자열을 포함 해야 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>Some examples of string formats that are acceptable are as follows:</source>
          <target state="translated">허용 되는 문자열 형식 중 몇 가지 예는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>Note that an address that contains <ph id="ph1">`f0-e1-d2-c3-b4-a5`</ph> will fail to parse and throw an exception.</source>
          <target state="translated">포함 하는 주소 <ph id="ph1">`f0-e1-d2-c3-b4-a5`</ph> 구문 분석 하 고 예외가 throw 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A&gt;</ph> method to retrieve the address from an existing <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> instance.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A&gt;</ph> 를 기존 주소를 검색할 메서드 <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> instance by calling the <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 한 <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> 호출 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="address" /&gt;</ph> parameter contains an illegal hardware address.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="address" /&gt;</ph> 매개 변수에 잘못된 하드웨어 주소가 포함되어 있는 경우</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
          <source>This exception also occurs if the <ph id="ph1">&lt;paramref name="address" /&gt;</ph> parameter contains a string in the incorrect format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="address" /&gt;</ph> 매개 변수에 잘못된 형식의 문자열이 포함되어 있는 경우</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.ToString">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> representation of the address of this instance.</source>
          <target state="translated">이 인스턴스의 주소에 대한 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 표현을 반환합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Net.NetworkInformation.PhysicalAddress.ToString">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the address contained in this instance.</source>
          <target state="translated">이 인스턴스에 포함된 주소가 들어 있는 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.NetworkInformation.PhysicalAddress.ToString">
          <source>The following code example demonstrates displaying the address in a <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> instance.</source>
          <target state="translated">다음 코드 예제에서는 주소를 표시 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> 인스턴스.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>