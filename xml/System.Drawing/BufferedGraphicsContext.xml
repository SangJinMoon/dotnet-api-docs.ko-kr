<Type Name="BufferedGraphicsContext" FullName="System.Drawing.BufferedGraphicsContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6cebe4384e5215400e3718cf0dc794274c63580a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class BufferedGraphicsContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphicsContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphicsContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphicsContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphicsContext sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="7e1f4-101">이중 버퍼링에 사용할 수 있는 그래픽 버퍼를 만드는 메서드를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e1f4-101">Provides methods for creating graphics buffers that can be used for double buffering.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e1f4-102"><xref:System.Drawing.BufferedGraphicsContext> 클래스를 사용 하면 해당 그래픽에 대 한 사용자 지정 이중 버퍼링을 구현할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-102">The <xref:System.Drawing.BufferedGraphicsContext> class allows you to implement custom double buffering for your graphics.</span></span> <span data-ttu-id="7e1f4-103">이중 버퍼링을 사용 하는 그래픽 줄이거나 깜빡임을 표시 화면을 그려서 발생 하는 제거할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-103">Graphics that use double buffering can reduce or eliminate flicker that is caused by redrawing a display surface.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e1f4-104">설정 하는 이중 버퍼링을 사용 하는 가장 간단한 방법은 <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> 컨트롤 사용 하 여 컨트롤 스타일 플래그는 <xref:System.Windows.Forms.Control.SetStyle%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-104">The simplest way to use double buffering is to set the <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> control style flag on a control using the <xref:System.Windows.Forms.Control.SetStyle%2A> method.</span></span> <span data-ttu-id="7e1f4-105">설정의 <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> 컨트롤 스타일 플래그는 컨트롤에 대 한 코드를 추가 하지 않고도 기본 그래픽 버퍼를 통해 컨트롤에 대 한 모든 그리기를 리디렉션합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-105">Setting the <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> control styles flag for a control redirects all painting for the control through a default graphics buffer, without requiring any additional code.</span></span> <span data-ttu-id="7e1f4-106">이 플래그가로 설정 되어 `true` 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-106">This flag is set to `true` by default.</span></span>  
  
 <span data-ttu-id="7e1f4-107"><xref:System.Drawing.BufferedGraphicsContext> 클래스 만들고 그래픽 버퍼를 구성 하기 위한 메서드를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-107">The <xref:System.Drawing.BufferedGraphicsContext> class provides methods for creating and configuring a graphics buffer.</span></span> <span data-ttu-id="7e1f4-108"><xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드를 만듭니다는 <xref:System.Drawing.BufferedGraphics>, 변수인도 버퍼에 쓸 출력 장치에 해당 콘텐츠를 렌더링 하는 데 사용할 메서드를 제공 하는 그래픽 버퍼에 대 한 래퍼입니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-108">The <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method creates a <xref:System.Drawing.BufferedGraphics>, which is a wrapper for a graphics buffer that also provides methods you can use to write to the buffer and render its contents to an output device.</span></span>  
  
 <span data-ttu-id="7e1f4-109">검색할 수 있습니다는 <xref:System.Drawing.BufferedGraphicsContext> 정적에서은 현재 어플리케이션 도메인에 대 한 <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-109">You can retrieve the <xref:System.Drawing.BufferedGraphicsContext> for the current application domain from the static <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="7e1f4-110">애니메이션 같은 그래픽 위주의 응용 프로그램을 만들 수 있습니다 전용 <xref:System.Drawing.BufferedGraphicsContext> 생성자를 사용 하지만 대부분의 응용 프로그램에 대 한는 <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> 속성 만으로도 충분 합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-110">For graphically intensive applications such as animation, you can create a dedicated <xref:System.Drawing.BufferedGraphicsContext> using the constructor, but for most applications the <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> property will be sufficient.</span></span>  
  
 <span data-ttu-id="7e1f4-111">그리기 버퍼링 된 그래픽 및 버퍼링을 사용자 지정 구현에 대 한 자세한 내용은 참조 하십시오. [이중 버퍼링 그래픽](~/docs/framework/winforms/advanced/double-buffered-graphics.md) 및 [하는 방법: 버퍼링 된 그래픽 수동 관리](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-111">For more information on drawing buffered graphics and custom buffering implementations, see [Double Buffered Graphics](~/docs/framework/winforms/advanced/double-buffered-graphics.md) and [How to: Manually Manage Buffered Graphics](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e1f4-112">다음 코드 예제에서는 확보 하는 방법을 보여 줍니다.는 <xref:System.Drawing.BufferedGraphicsContext> 은 현재 어플리케이션 도메인에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-112">The following code example demonstrates how to acquire the <xref:System.Drawing.BufferedGraphicsContext> for the current application domain.</span></span> <span data-ttu-id="7e1f4-113">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Drawing.BufferedGraphics> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-113">This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.</span></span>  
  
 [!code-cpp[BufferingExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#1)]
 [!code-csharp[BufferingExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#1)]
 [!code-vb[BufferingExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Drawing.BufferedGraphics" />
    <altmember cref="T:System.Drawing.BufferedGraphicsManager" />
    <altmember cref="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BufferedGraphicsContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7e1f4-114">
            <see cref="T:System.Drawing.BufferedGraphicsContext" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-114">Initializes a new instance of the <see cref="T:System.Drawing.BufferedGraphicsContext" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e1f4-115">애니메이션 같은 그래픽 위주의 응용 프로그램에 대 한 경우에 따라 성능을 개선할 수 있습니다 전용을 사용 하 여 <xref:System.Drawing.BufferedGraphicsContext> 에서 제공 하는 기본 인스턴스 대신는 <xref:System.Drawing.BufferedGraphicsManager>합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-115">For graphically intensive applications such as animation, you can sometimes improve performance by using a dedicated <xref:System.Drawing.BufferedGraphicsContext> instead of the default instance provided by the <xref:System.Drawing.BufferedGraphicsManager>.</span></span> <span data-ttu-id="7e1f4-116">이 통해 만들고 그래픽 버퍼를 개별적으로 관리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-116">This allows you to create and manage graphics buffers individually.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e1f4-117">항상 호출 해야 <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 전용을 사용 하 여 완료 <xref:System.Drawing.BufferedGraphicsContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-117">You should always call <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> when you finish using a dedicated <xref:System.Drawing.BufferedGraphicsContext>.</span></span>  
  
 <span data-ttu-id="7e1f4-118">전용된 그래픽 버퍼에 대 한 자세한 내용은 참조 [하는 방법: 버퍼링 된 그래픽 수동 관리](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-118">For more information about dedicated graphics buffers, see [How to: Manually Manage Buffered Graphics](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Allocate">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7e1f4-119">그래픽 버퍼를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-119">Creates a graphics buffer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (System.Drawing.Graphics targetGraphics, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(class System.Drawing.Graphics targetGraphics, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetGraphics As Graphics, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(System::Drawing::Graphics ^ targetGraphics, System::Drawing::Rectangle targetRectangle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetGraphics" Type="System.Drawing.Graphics" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetGraphics">
          <span data-ttu-id="7e1f4-120">새 버퍼의 픽셀 형식을 일치시킬 대상 <see cref="T:System.Drawing.Graphics" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-120">The <see cref="T:System.Drawing.Graphics" /> to match the pixel format for the new buffer to.</span>
          </span>
        </param>
        <param name="targetRectangle">
          <span data-ttu-id="7e1f4-121">만들 버퍼의 크기를 나타내는 <see cref="T:System.Drawing.Rectangle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-121">A <see cref="T:System.Drawing.Rectangle" /> indicating the size of the buffer to create.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e1f4-122">지정된 <see cref="T:System.Drawing.Graphics" />의 픽셀 형식을 사용하여 지정된 크기의 그래픽 버퍼를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-122">Creates a graphics buffer of the specified size using the pixel format of the specified <see cref="T:System.Drawing.Graphics" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e1f4-123">지정된 크기의 버퍼를 그리는 데 사용할 수 있는 <see cref="T:System.Drawing.BufferedGraphics" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-123">A <see cref="T:System.Drawing.BufferedGraphics" /> that can be used to draw to a buffer of the specified dimensions.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e1f4-124">호출 하는 경우는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드 값을 초과 하는 필요에 따라 크기가 사각형과는 <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> 속성, 임시 <xref:System.Drawing.BufferedGraphicsContext> 버퍼를 할당 하 고 버퍼의 임시 컨텍스트를 제공 하기 위해 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-124">When you call the <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method with a rectangle whose size exceeds the value of the <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> property, a temporary <xref:System.Drawing.BufferedGraphicsContext> is created to allocate the buffer and provide a temporary context for the buffer.</span></span> <span data-ttu-id="7e1f4-125">새 <xref:System.Drawing.BufferedGraphicsContext> 와 다릅니다.는 <xref:System.Drawing.BufferedGraphicsContext> 응용 프로그램에 대 한 도메인은 자동으로 삭제 시기는 <xref:System.Drawing.BufferedGraphics> 에서 반환 되는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드가 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-125">The new <xref:System.Drawing.BufferedGraphicsContext> is distinct from the <xref:System.Drawing.BufferedGraphicsContext> for the application domain and it is disposed automatically when the <xref:System.Drawing.BufferedGraphics> returned by the <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method is disposed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e1f4-126">다음 코드 예제에서는 사용 하 여 그래픽 버퍼를 만드는 방법을 보여 줍니다는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-126">The following code example demonstrates creating a graphics buffer using the <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method.</span></span> <span data-ttu-id="7e1f4-127">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Drawing.BufferedGraphics> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-127">This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.</span></span>  
  
 [!code-cpp[BufferingExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#3)]
 [!code-csharp[BufferingExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#3)]
 [!code-vb[BufferingExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Drawing.Rectangle" />
      </Docs>
    </Member>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (IntPtr targetDC, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(native int targetDC, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.IntPtr,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetDC As IntPtr, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(IntPtr targetDC, System::Drawing::Rectangle targetRectangle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetDC">
          <span data-ttu-id="7e1f4-128">새 버퍼의 픽셀 형식을 일치시킬 대상 장치 컨텍스트에 대한 <see cref="T:System.IntPtr" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-128">An <see cref="T:System.IntPtr" /> to a device context to match the pixel format of the new buffer to.</span>
          </span>
        </param>
        <param name="targetRectangle">
          <span data-ttu-id="7e1f4-129">만들 버퍼의 크기를 나타내는 <see cref="T:System.Drawing.Rectangle" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-129">A <see cref="T:System.Drawing.Rectangle" /> indicating the size of the buffer to create.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e1f4-130">지정된 <see cref="T:System.Drawing.Graphics" />의 픽셀 형식을 사용하여 지정된 크기의 그래픽 버퍼를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-130">Creates a graphics buffer of the specified size using the pixel format of the specified <see cref="T:System.Drawing.Graphics" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e1f4-131">지정된 크기의 버퍼를 그리는 데 사용할 수 있는 <see cref="T:System.Drawing.BufferedGraphics" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-131">A <see cref="T:System.Drawing.BufferedGraphics" /> that can be used to draw to a buffer of the specified dimensions.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e1f4-132">호출 하는 경우는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드 값을 초과 하는 필요에 따라 크기가 사각형과는 <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> 속성, 임시 <xref:System.Drawing.BufferedGraphicsContext> 버퍼를 할당 하 고 버퍼의 임시 컨텍스트를 제공 하기 위해 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-132">When you call the <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method with a rectangle whose size exceeds the value of the <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> property, a temporary <xref:System.Drawing.BufferedGraphicsContext> is created to allocate the buffer and provide a temporary context for the buffer.</span></span> <span data-ttu-id="7e1f4-133">새 <xref:System.Drawing.BufferedGraphicsContext> 와 다릅니다.는 <xref:System.Drawing.BufferedGraphicsContext> 응용 프로그램에 대 한 도메인은 자동으로 삭제 시기는 <xref:System.Drawing.BufferedGraphics> 에서 반환 되는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드가 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-133">The new <xref:System.Drawing.BufferedGraphicsContext> is distinct from the <xref:System.Drawing.BufferedGraphicsContext> for the application domain and it is disposed automatically when the <xref:System.Drawing.BufferedGraphics> returned by the <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method is disposed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e1f4-134">다음 코드 예제에서는 사용 하 여 그래픽 버퍼를 만드는 방법을 보여 줍니다는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-134">The following code example demonstrates creating a graphics buffer using the <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method.</span></span> <span data-ttu-id="7e1f4-135">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Drawing.BufferedGraphics> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-135">This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.</span></span>  
  
 [!code-cpp[BufferingExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#4)]
 [!code-csharp[BufferingExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#4)]
 [!code-vb[BufferingExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="7e1f4-136">비관리 코드에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-136">for access to unmanaged code.</span>
          </span>
          <span data-ttu-id="7e1f4-137">연관 된 열거: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-137">Related enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.IntPtr" />
        <altmember cref="T:System.Drawing.Rectangle" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7e1f4-138">
            <see cref="T:System.Drawing.BufferedGraphicsContext" />에서 사용하는 모든 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-138">Releases all resources used by the <see cref="T:System.Drawing.BufferedGraphicsContext" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e1f4-139"><xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 사용을 마치면 <xref:System.Drawing.BufferedGraphicsContext>를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-139">Call <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> when you are finished using the <xref:System.Drawing.BufferedGraphicsContext>.</span></span> <span data-ttu-id="7e1f4-140"><xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 메서드를 사용하면 <xref:System.Drawing.BufferedGraphicsContext>를 사용할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-140">The <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> method leaves the <xref:System.Drawing.BufferedGraphicsContext> in an unusable state.</span></span> <span data-ttu-id="7e1f4-141">호출한 후 <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>에 대 한 모든 참조를 해제 해야는 <xref:System.Drawing.BufferedGraphicsContext> 가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.Drawing.BufferedGraphicsContext> 차지한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-141">After calling <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>, you must release all references to the <xref:System.Drawing.BufferedGraphicsContext> so the garbage collector can reclaim the memory that the <xref:System.Drawing.BufferedGraphicsContext> was occupying.</span></span> <span data-ttu-id="7e1f4-142">자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-142">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7e1f4-143"><xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.Drawing.BufferedGraphicsContext>를 호출하십시오.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-143">Always call <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> before you release your last reference to the <xref:System.Drawing.BufferedGraphicsContext>.</span></span> <span data-ttu-id="7e1f4-144">사용 중인 리소스가 가비지 수집기 호출할 때까지 해제 되지 것입니다 그렇지 않은 경우는 <xref:System.Object.Finalize%2A> 의 메서드는 <xref:System.Drawing.BufferedGraphicsContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-144">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Object.Finalize%2A> method of the <xref:System.Drawing.BufferedGraphicsContext>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphicsContext ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7e1f4-145">가비지 컬렉션이 회수하기 전에 개체가 리소스를 해제하고 다른 정리 작업을 수행할 수 있게 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-145">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7e1f4-146">버퍼가 할당된 후 아직 삭제되지 않았으면 현재 그래픽 버퍼를 삭제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-146">Disposes of the current graphics buffer, if a buffer has been allocated and has not yet been disposed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e1f4-147">그래픽 버퍼를 사용 하는 경우 표시 됩니다 삭제 되는 무료; 즉시 그렇지 않으면 삭제 됩니다 즉시 합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-147">If the graphics buffer is in use, it will be marked for disposal as soon as it is free; otherwise, it will be disposed immediately.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumBuffer">
      <MemberSignature Language="C#" Value="public System.Drawing.Size MaximumBuffer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MaximumBuffer" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphicsContext.MaximumBuffer" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumBuffer As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size MaximumBuffer { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7e1f4-148">사용할 버퍼의 최대 크기를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-148">Gets or sets the maximum size of the buffer to use.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e1f4-149">버퍼의 최대 크기를 나타내는 <see cref="T:System.Drawing.Size" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-149">A <see cref="T:System.Drawing.Size" /> indicating the maximum size of the buffer dimensions.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e1f4-150">이 속성을 사용 하면 메모리에 유지 해야 하는 버퍼에 대 한 최대 크기를 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-150">This property allows you to get or set the maximum dimensions for a buffer that should be retained in memory.</span></span> <span data-ttu-id="7e1f4-151">하지만 버퍼 크기 보다 큰 모든 크기의 버퍼를 할당할 수는 <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> 크기를 일시적으로 사용 하 고 때 삭제는 <xref:System.Drawing.BufferedGraphics> 개체를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-151">You can allocate a buffer of any size, however any buffer with dimensions greater than the <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> size will be used temporarily and then discarded when the <xref:System.Drawing.BufferedGraphics> object is released.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e1f4-152">다음 예제에 대 한 버퍼에 대 한 최대 크기를 설정 하는 방법을 보여 줍니다는 <xref:System.Drawing.BufferedGraphicsContext>합니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-152">The following example demonstrates setting the maximum size for the buffer for a <xref:System.Drawing.BufferedGraphicsContext>.</span></span> <span data-ttu-id="7e1f4-153">이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Drawing.BufferedGraphics> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7e1f4-153">This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.</span></span>  
  
 [!code-cpp[BufferingExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#2)]
 [!code-csharp[BufferingExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#2)]
 [!code-vb[BufferingExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7e1f4-154">크기의 높이나 너비가 0보다 작거나 같은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-154">The height or width of the size is less than or equal to zero.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="7e1f4-155">모든 창에 대 한 사용자 액세스를 허용 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-155">for allowing user access to all windows.</span>
          </span>
          <span data-ttu-id="7e1f4-156">연관 된 열거: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7e1f4-156">Related enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>