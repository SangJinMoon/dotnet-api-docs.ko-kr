<Type Name="BufferedGraphicsContext" FullName="System.Drawing.BufferedGraphicsContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2505cc4bca381dc53178fdaa930e0e1c184112e1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36340541" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class BufferedGraphicsContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphicsContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphicsContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphicsContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphicsContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type BufferedGraphicsContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>이중 버퍼링에 사용할 수 있는 그래픽 버퍼를 만드는 메서드를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.BufferedGraphicsContext> 클래스를 사용 하면 해당 그래픽에 대 한 사용자 지정 이중 버퍼링을 구현할 수 있습니다. 이중 버퍼링을 사용 하는 그래픽 줄이거나 깜빡임을 표시 화면을 그려서 발생 하는 제거할 수 있습니다.  
  
> [!NOTE]
>  설정 하는 이중 버퍼링을 사용 하는 가장 간단한 방법은 <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> 컨트롤 사용 하 여 컨트롤 스타일 플래그는 <xref:System.Windows.Forms.Control.SetStyle%2A> 메서드. 설정의 <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> 컨트롤 스타일 플래그는 컨트롤에 대 한 코드를 추가 하지 않고도 기본 그래픽 버퍼를 통해 컨트롤에 대 한 모든 그리기를 리디렉션합니다. 이 플래그가로 설정 되어 `true` 기본적으로 합니다.  
  
 <xref:System.Drawing.BufferedGraphicsContext> 클래스 만들고 그래픽 버퍼를 구성 하기 위한 메서드를 제공 합니다. <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드를 만듭니다는 <xref:System.Drawing.BufferedGraphics>, 변수인도 버퍼에 쓸 출력 장치에 해당 콘텐츠를 렌더링 하는 데 사용할 메서드를 제공 하는 그래픽 버퍼에 대 한 래퍼입니다.  
  
 검색할 수 있습니다는 <xref:System.Drawing.BufferedGraphicsContext> 정적에서은 현재 어플리케이션 도메인에 대 한 <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> 속성입니다. 애니메이션 같은 그래픽 위주의 응용 프로그램을 만들 수 있습니다 전용 <xref:System.Drawing.BufferedGraphicsContext> 생성자를 사용 하지만 대부분의 응용 프로그램에 대 한는 <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> 속성 만으로도 충분 합니다.  
  
 그리기 버퍼링 된 그래픽 및 버퍼링을 사용자 지정 구현에 대 한 자세한 내용은 참조 하십시오. [이중 버퍼링 그래픽](~/docs/framework/winforms/advanced/double-buffered-graphics.md) 및 [하는 방법: 버퍼링 된 그래픽 수동 관리](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 확보 하는 방법을 보여 줍니다.는 <xref:System.Drawing.BufferedGraphicsContext> 은 현재 어플리케이션 도메인에 대 한 합니다. 이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Drawing.BufferedGraphics> 클래스입니다.  
  
 [!code-cpp[BufferingExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#1)]
 [!code-csharp[BufferingExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#1)]
 [!code-vb[BufferingExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Drawing.BufferedGraphics" />
    <altmember cref="T:System.Drawing.BufferedGraphicsManager" />
    <altmember cref="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BufferedGraphicsContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Drawing.BufferedGraphicsContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 애니메이션 같은 그래픽 위주의 응용 프로그램에 대 한 경우에 따라 성능을 개선할 수 있습니다 전용을 사용 하 여 <xref:System.Drawing.BufferedGraphicsContext> 에서 제공 하는 기본 인스턴스 대신는 <xref:System.Drawing.BufferedGraphicsManager>합니다. 이 통해 만들고 그래픽 버퍼를 개별적으로 관리할 수 있습니다.  
  
> [!NOTE]
>  항상 호출 해야 <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 전용을 사용 하 여 완료 <xref:System.Drawing.BufferedGraphicsContext>합니다.  
  
 전용된 그래픽 버퍼에 대 한 자세한 내용은 참조 [하는 방법: 버퍼링 된 그래픽 수동 관리](~/docs/framework/winforms/advanced/how-to-manually-manage-buffered-graphics.md)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Allocate">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>그래픽 버퍼를 만듭니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (System.Drawing.Graphics targetGraphics, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(class System.Drawing.Graphics targetGraphics, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetGraphics As Graphics, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(System::Drawing::Graphics ^ targetGraphics, System::Drawing::Rectangle targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.Allocate : System.Drawing.Graphics * System.Drawing.Rectangle -&gt; System.Drawing.BufferedGraphics" Usage="bufferedGraphicsContext.Allocate (targetGraphics, targetRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetGraphics" Type="System.Drawing.Graphics" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetGraphics">새 버퍼의 픽셀 형식을 일치시킬 대상 <see cref="T:System.Drawing.Graphics" />입니다.</param>
        <param name="targetRectangle">만들 버퍼의 크기를 나타내는 <see cref="T:System.Drawing.Rectangle" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Graphics" />의 픽셀 형식을 사용하여 지정된 크기의 그래픽 버퍼를 만듭니다.</summary>
        <returns>지정된 크기의 버퍼를 그리는 데 사용할 수 있는 <see cref="T:System.Drawing.BufferedGraphics" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 하는 경우는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드 값을 초과 하는 필요에 따라 크기가 사각형과는 <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> 속성, 임시 <xref:System.Drawing.BufferedGraphicsContext> 버퍼를 할당 하 고 버퍼의 임시 컨텍스트를 제공 하기 위해 만들어집니다. 새 <xref:System.Drawing.BufferedGraphicsContext> 와 다릅니다.는 <xref:System.Drawing.BufferedGraphicsContext> 응용 프로그램에 대 한 도메인은 자동으로 삭제 시기는 <xref:System.Drawing.BufferedGraphics> 에서 반환 되는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드가 삭제 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하 여 그래픽 버퍼를 만드는 방법을 보여 줍니다는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드. 이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Drawing.BufferedGraphics> 클래스입니다.  
  
 [!code-cpp[BufferingExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#3)]
 [!code-csharp[BufferingExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#3)]
 [!code-vb[BufferingExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Drawing.Rectangle" />
      </Docs>
    </Member>
    <Member MemberName="Allocate">
      <MemberSignature Language="C#" Value="public System.Drawing.BufferedGraphics Allocate (IntPtr targetDC, System.Drawing.Rectangle targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.BufferedGraphics Allocate(native int targetDC, valuetype System.Drawing.Rectangle targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Allocate(System.IntPtr,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Allocate (targetDC As IntPtr, targetRectangle As Rectangle) As BufferedGraphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::BufferedGraphics ^ Allocate(IntPtr targetDC, System::Drawing::Rectangle targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.Allocate : nativeint * System.Drawing.Rectangle -&gt; System.Drawing.BufferedGraphics" Usage="bufferedGraphicsContext.Allocate (targetDC, targetRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.BufferedGraphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
        <Parameter Name="targetRectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="targetDC">새 버퍼의 픽셀 형식을 일치시킬 대상 장치 컨텍스트에 대한 <see cref="T:System.IntPtr" />입니다.</param>
        <param name="targetRectangle">만들 버퍼의 크기를 나타내는 <see cref="T:System.Drawing.Rectangle" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Graphics" />의 픽셀 형식을 사용하여 지정된 크기의 그래픽 버퍼를 만듭니다.</summary>
        <returns>지정된 크기의 버퍼를 그리는 데 사용할 수 있는 <see cref="T:System.Drawing.BufferedGraphics" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 하는 경우는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드 값을 초과 하는 필요에 따라 크기가 사각형과는 <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> 속성, 임시 <xref:System.Drawing.BufferedGraphicsContext> 버퍼를 할당 하 고 버퍼의 임시 컨텍스트를 제공 하기 위해 만들어집니다. 새 <xref:System.Drawing.BufferedGraphicsContext> 와 다릅니다.는 <xref:System.Drawing.BufferedGraphicsContext> 응용 프로그램에 대 한 도메인은 자동으로 삭제 시기는 <xref:System.Drawing.BufferedGraphics> 에서 반환 되는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드가 삭제 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하 여 그래픽 버퍼를 만드는 방법을 보여 줍니다는 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 메서드. 이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Drawing.BufferedGraphics> 클래스입니다.  
  
 [!code-cpp[BufferingExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#4)]
 [!code-csharp[BufferingExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#4)]
 [!code-vb[BufferingExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드에 액세스 합니다. 연관 된 열거: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.IntPtr" />
        <altmember cref="T:System.Drawing.Rectangle" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="bufferedGraphicsContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Drawing.BufferedGraphicsContext" />에서 사용하는 모든 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 사용을 마치면 <xref:System.Drawing.BufferedGraphicsContext>를 호출합니다. <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A> 메서드를 사용하면 <xref:System.Drawing.BufferedGraphicsContext>를 사용할 수 없게 됩니다. 호출한 후 <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>에 대 한 모든 참조를 해제 해야는 <xref:System.Drawing.BufferedGraphicsContext> 가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.Drawing.BufferedGraphicsContext> 차지한 합니다. 자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.  
  
> [!NOTE]
>  <xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.Drawing.BufferedGraphicsContext>를 호출하십시오. 사용 중인 리소스가 가비지 수집기 호출할 때까지 해제 되지 것입니다 그렇지 않은 경우는 <xref:System.Object.Finalize%2A> 의 메서드는 <xref:System.Drawing.BufferedGraphicsContext>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphicsContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphicsContext ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="bufferedGraphicsContext.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>가비지 컬렉션이 회수하기 전에 개체가 리소스를 해제하고 다른 정리 작업을 수행할 수 있게 합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphicsContext.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberSignature Language="F#" Value="member this.Invalidate : unit -&gt; unit" Usage="bufferedGraphicsContext.Invalidate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>버퍼가 할당된 후 아직 삭제되지 않았으면 현재 그래픽 버퍼를 삭제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 그래픽 버퍼를 사용 하는 경우 표시 됩니다 삭제 되는 무료; 즉시 그렇지 않으면 삭제 됩니다 즉시 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumBuffer">
      <MemberSignature Language="C#" Value="public System.Drawing.Size MaximumBuffer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MaximumBuffer" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphicsContext.MaximumBuffer" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumBuffer As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size MaximumBuffer { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumBuffer : System.Drawing.Size with get, set" Usage="System.Drawing.BufferedGraphicsContext.MaximumBuffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용할 버퍼의 최대 크기를 가져오거나 설정합니다.</summary>
        <value>버퍼의 최대 크기를 나타내는 <see cref="T:System.Drawing.Size" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 사용 하면 메모리에 유지 해야 하는 버퍼에 대 한 최대 크기를 설정할 수 있습니다. 하지만 버퍼 크기 보다 큰 모든 크기의 버퍼를 할당할 수는 <xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> 크기를 일시적으로 사용 하 고 때 삭제는 <xref:System.Drawing.BufferedGraphics> 개체를 해제 합니다.  
  
   
  
## Examples  
 다음 예제에 대 한 버퍼에 대 한 최대 크기를 설정 하는 방법을 보여 줍니다는 <xref:System.Drawing.BufferedGraphicsContext>합니다. 이 코드는에 대해 제공 된 큰 예제의 일부는 <xref:System.Drawing.BufferedGraphics> 클래스입니다.  
  
 [!code-cpp[BufferingExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#2)]
 [!code-csharp[BufferingExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#2)]
 [!code-vb[BufferingExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">크기의 높이나 너비가 0보다 작거나 같은 경우</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">모든 창에 대 한 사용자 액세스를 허용 합니다. 연관 된 열거: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>