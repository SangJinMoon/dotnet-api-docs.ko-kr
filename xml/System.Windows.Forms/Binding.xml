<Type Name="Binding" FullName="System.Windows.Forms.Binding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d4af73d31e4176ed1cbfa02c4a8d37010400a36" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33659733" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Binding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Binding" />
  <TypeSignature Language="VB.NET" Value="Public Class Binding" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binding" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ListBindingConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>개체 속성 값과 컨트롤 속성 값 사이의 단순 바인딩을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Windows.Forms.Binding> 만들고 컨트롤의 속성 및 개체의 속성 또는 개체의 목록에서 현재 개체의 속성이 사이의 단순 바인딩을 유지 관리 하는 클래스입니다.  
  
 첫 번째 경우의 예를 들어 바인딩할 수 있습니다는 <xref:System.Windows.Forms.Control.Text%2A> 속성은 <xref:System.Windows.Forms.TextBox> 컨트롤을 `FirstName` 속성은 `Customer` 개체입니다. 두 번째 경우의 예를 들어 바인딩할 수 있습니다는 <xref:System.Windows.Forms.Control.Text%2A> 의 속성은 <xref:System.Windows.Forms.TextBox> 컨트롤을 `FirstName` 의 속성은 <xref:System.Data.DataTable> customer가 들어 있는입니다.  
  
 <xref:System.Windows.Forms.Binding> 클래스 또한 통해을 수 있습니다는 <xref:System.Windows.Forms.Binding.Format> 이벤트를 통해 서식이 지정 된 값을 검색할 수는 <xref:System.Windows.Forms.Binding.Parse> 이벤트입니다.  
  
 생성할 때는 <xref:System.Windows.Forms.Binding> 인스턴스를 함께 <xref:System.Windows.Forms.Binding.%23ctor%2A> 생성자를 세 가지 항목을 지정 해야 합니다.  
  
-   바인딩할 컨트롤 속성의 이름입니다.  
  
-   데이터 원본입니다.  
  
-   목록이 나 데이터 원본의 속성에 확인 되는 탐색 경로입니다. 탐색 경로 개체를 만드는 데도 <xref:System.Windows.Forms.Binding.BindingMemberInfo%2A> 속성입니다.  
  
 첫째, 데이터를 바인딩할 컨트롤 속성의 이름을 지정 해야 합니다. 예를 들어, 데이터를 표시할는 <xref:System.Windows.Forms.TextBox> 을 제어는 <xref:System.Windows.Forms.TextBoxBase.Text%2A> 속성입니다.  
  
 둘째, 데이터 원본으로는 다음 표에 클래스의 인스턴스를 지정할 수 있습니다.  
  
  빈 문자열이 될 수 있는 탐색 경로 지정 해야 하는 세 번째 (""), 단일 속성 이름 또는 이름의 마침표로 구분 된 계층 구조입니다. 빈 문자열로 탐색 경로 설정 하는 경우는 <xref:System.Object.ToString%2A> 메서드가 기본 데이터 원본 개체에서 호출 됩니다.  
  
 데이터 원본이 있으면는 <xref:System.Data.DataTable>, 여러 개 포함할 수 있는 <xref:System.Data.DataColumn> 개체를 탐색 경로 사용 하 여 특정 열으로 확인할 수 있어야 합니다.  
  
> [!NOTE]
>  데이터 소스는 <xref:System.Data.DataSet>, <xref:System.Data.DataViewManager>, 또는 <xref:System.Data.DataTable>를 바인딩하는 실제로 <xref:System.Data.DataView>합니다. 따라서 바인딩된 열은 실제로 <xref:System.Data.DataRowView> 개체입니다.  
  
 데이터 원본을 여러 개 포함 하는 개체에 설정 된 경우에 마침표로 구분 된 탐색 경로 필수 <xref:System.Data.DataTable> 개체 (예:는 <xref:System.Data.DataSet> 또는 <xref:System.Data.DataViewManager>). 속성을 가진 다른 개체 (예: 다른 클래스 개체를 반환 하는 속성을 사용 하는 클래스)에 대 한 참조를 반환 하는 개체에 바인딩하는 경우에 마침표로 구분 된 탐색 경로 사용할 수 있습니다. 예를 들어 다음 탐색 경로 모든 유효한 데이터 필드를 설명합니다.  
  
-   "Size.Height"  
  
-   "Suppliers.CompanyName"  
  
-   "Regions.regionsToCustomers.CustomerFirstName"  
  
-   "Regions.regionsToCustomers.customersToOrders.ordersToDetails.Quantity"  
  
 각 멤버의 경로 (예: 정수), 단일 값으로 확인 하는 속성 또는 값 (예: 문자열의 배열)의 목록을 반환할 수 있습니다. 경로 있는 각 멤버 속성이 나 목록을 사용할 수 있지만 최종 멤버 속성을 확인 해야 합니다. 이전 멤버를 기반으로 각 멤버: "Size.Height"으로 확인 된 <xref:System.Drawing.Size.Height%2A> 속성에 대 한 현재 <xref:System.Drawing.Size>; "Regions.regionsToCustomers.CustomerFirstName"의 이름으로 확인 첫 번째 현재 고객에 대 한 고객은 현재 영역에 대 한 고객 중 하나입니다.  
  
 A <xref:System.Data.DataRelation> 하나에 연결 하 여 값의 목록을 반환 <xref:System.Data.DataTable> 두 번째 <xref:System.Data.DataTable> 에 <xref:System.Data.DataSet>합니다. 경우는 <xref:System.Data.DataSet> 포함 <xref:System.Data.DataRelation> 개체와 데이터 멤버가 지정할 수 있습니다는 <xref:System.Data.DataTable.TableName%2A> 이어서는 <xref:System.Data.DataRelation.RelationName%2A>, 한 다음은 <xref:System.Data.DataColumn.ColumnName%2A>합니다. 예를 들어 경우는 <xref:System.Data.DataTable> "공급 업체" 라는 포함 된 <xref:System.Data.DataRelation> "suppliers2products" 라는 데이터 멤버가 될 수 "Suppliers.suppliers2products.ProductName"입니다.  
  
 데이터 소스 관련된 클래스 집합을 구성할 수 있습니다. 예를 들어 태양계 카탈로그화 하는 클래스 집합인 한다고 가정 합니다. 이름의 클래스 `System` 라는 속성이 포함 `Stars` 의 컬렉션을 반환 하는 `Star` 개체입니다. 각 `Star` 개체에 `Name` 및 `Mass` 속성 및 `Planets` 속성의 컬렉션을 반환 하는 `Planet` 개체입니다. 이 시스템에서 각 지구 역시 `Mass` 및 `Name` 속성입니다. 각 `Planet` 추가 개체에는 `Moons` 속성의 컬렉션을 반환 하는 `Moon` 역시는 각각 개체 `Name` 및 `Mass` 속성입니다. 지정 하는 경우는 `System` 개체 데이터 소스로 데이터 멤버로 다음 중 하나를 지정할 수 있습니다.  
  
-   "Stars.Name"  
  
-   "Stars.Mass"  
  
-   "Stars.Planets.Name"  
  
-   "Stars.Planets.Mass"  
  
-   "Stars.Planets.Moons.Name"  
  
-   "Stars.Planets.Moons.Mass"  
  
 단순 바인딩 될 수 있는 컨트롤의 컬렉션을 기능 <xref:System.Windows.Forms.Binding> 개체에 <xref:System.Windows.Forms.ControlBindingsCollection>, 컨트롤의 통해 액세스할 수 있는 <xref:System.Windows.Forms.Control.DataBindings%2A> 속성입니다. 추가한는 <xref:System.Windows.Forms.Binding> 호출 하 여 컬렉션에는 <xref:System.Windows.Forms.ControlBindingsCollection.Add%2A> 메서드를 함으로써 바인딩 컨트롤의 속성을 개체의 속성 (또는 목록에 있는 현재 개체의 속성에).  
  
 바인딩할 수 있습니다 단순에서 파생 된 모든 개체에는 <xref:System.Windows.Forms.Control?displayProperty=nameWithType> 예를 들어 다음과 같은 Windows 컨트롤을 클래스:  
  
-   <xref:System.Windows.Forms.Button>  
  
-   <xref:System.Windows.Forms.CheckBox>  
  
-   <xref:System.Windows.Forms.CheckedListBox>  
  
-   <xref:System.Windows.Forms.ComboBox>  
  
-   <xref:System.Windows.Forms.DateTimePicker>  
  
-   <xref:System.Windows.Forms.DomainUpDown>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.HScrollBar>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.LinkLabel>  
  
-   <xref:System.Windows.Forms.ListBox>  
  
-   <xref:System.Windows.Forms.ListView>  
  
-   <xref:System.Windows.Forms.MonthCalendar>  
  
-   <xref:System.Windows.Forms.NumericUpDown>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.RadioButton>  
  
-   <xref:System.Windows.Forms.RichTextBox>  
  
-   <xref:System.Windows.Forms.ScrollBar>  
  
-   <xref:System.Windows.Forms.StatusBar>  
  
-   <xref:System.Windows.Forms.TextBox>  
  
-   <xref:System.Windows.Forms.TreeView>  
  
-   <xref:System.Windows.Forms.VScrollBar>  
  
> [!NOTE]
>  만 <xref:System.Windows.Forms.ListControl.SelectedValue%2A> 의 속성은 <xref:System.Windows.Forms.ComboBox>, <xref:System.Windows.Forms.CheckedListBox>, 및 <xref:System.Windows.Forms.ListBox> 컨트롤은 단순 합니다.  
  
 <xref:System.Windows.Forms.BindingManagerBase> 클래스는 모든 관리 하는 추상 클래스는 <xref:System.Windows.Forms.Binding> 특정 데이터 원본 및 데이터 멤버에 대 한 개체입니다. 파생 된 클래스 <xref:System.Windows.Forms.BindingManagerBase> 됩니다는 <xref:System.Windows.Forms.CurrencyManager> 및 <xref:System.Windows.Forms.PropertyManager> 클래스입니다. 어떻게는 <xref:System.Windows.Forms.Binding> 관리 되는 여부에 따라 달라 집니다는 <xref:System.Windows.Forms.Binding> 속성 바인딩 또는 목록 바인딩이 있습니다. 예를 들어 목록 바인딩인 경우 사용할 수 있습니다는 <xref:System.Windows.Forms.BindingManagerBase> 지정 하는 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> 목록에는 <xref:System.Windows.Forms.BindingManagerBase.Position%2A>, 따라서 (목록에 있는 모든 항목) 중 어떤 항목 컨트롤에 실제로 연결을 결정 합니다. 반환할 적절 한 <xref:System.Windows.Forms.BindingManagerBase>를 사용 하 여는 <xref:System.Windows.Forms.BindingContext>합니다.  
  
 동일 하 게 연결 된 컨트롤 집합에 새 행을 추가 하려면 <xref:System.Windows.Forms.Binding.DataSource%2A>를 사용 하 여는 <xref:System.Windows.Forms.BindingManagerBase.AddNew%2A> 의 메서드는 <xref:System.Windows.Forms.BindingManagerBase> 클래스입니다. 사용 하 여는 <xref:System.Windows.Forms.BindingContext.Item%2A> 의 속성은 <xref:System.Windows.Forms.BindingContext> 반환할 적절 한 클래스 <xref:System.Windows.Forms.CurrencyManager>합니다. 사용 하 여 새 행 추가 이스케이프 하는 <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제는 단순 데이터 바인딩을 설명 하는 여러 컨트롤이 있는 Windows Form을 만듭니다. 이 예에서는 만듭니다는 <xref:System.Data.DataSet> 라는 두 개의 테이블과 `Customers` 및 `Orders`, 및 <xref:System.Data.DataRelation> 라는 `custToOrders`합니다. 네 가지 컨트롤 (한 <xref:System.Windows.Forms.DateTimePicker> 및 세 개의 <xref:System.Windows.Forms.TextBox> 컨트롤) 데이터 테이블의 열에 바인딩됩니다. 각 컨트롤에 대 한 예제를 만들고 추가 하는 <xref:System.Windows.Forms.Binding> 통해 컨트롤에는 <xref:System.Windows.Forms.Control.DataBindings%2A> 속성입니다. 반환 하는 예제는 <xref:System.Windows.Forms.BindingManagerBase> 통해 폼의 각 테이블에 대 한 <xref:System.Windows.Forms.BindingContext>합니다. 4 개의 <xref:System.Windows.Forms.Button> 증가 또는 감소 제어는 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> 속성에는 <xref:System.Windows.Forms.BindingManagerBase> 개체입니다.  
  
 [!code-cpp[Classic Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.BindingContext" />
    <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
    <altmember cref="T:System.Windows.Forms.ComboBox" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.Binding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">바인딩할 컨트롤 속성의 이름입니다.</param>
        <param name="dataSource">데이터 소스를 나타내는 <see cref="T:System.Object" />입니다.</param>
        <param name="dataMember">바인딩할 속성 또는 목록입니다.</param>
        <summary>표시된 컨트롤 속성을 지정된 데이터 소스의 데이터 멤버에 단순 바인딩하는 <see cref="T:System.Windows.Forms.Binding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 데이터 원본에 대 한 다음 클래스의 인스턴스를 지정할 수 있습니다.  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   클래스를 구현 하는 모든 클래스는 <xref:System.Collections.IList> 인터페이스  
  
-   모든 클래스  
  
 참조는 <xref:System.Windows.Forms.Binding> 만들기에 대 한 자세한 정보에 대 한 클래스는 `dataMember` 문자열입니다.  
  
 컨트롤의 속성에 대 한 바인딩을 만들 때 새 <xref:System.Windows.Forms.Binding> 바인딩된 컨트롤에서 노출 하는 이벤트를 검사 하 고 두 특정 이벤트에 연결 합니다.  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   라는 이벤트 *PropertyName* `Changed` (예를 들어 <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 존재 하지 않는 속성에 바인딩할 하려고 하면는 <xref:System.ArgumentException> throw 됩니다는 <xref:System.Windows.Forms.Binding> 를 컨트롤의 추가 <xref:System.Windows.Forms.Control.DataBindings%2A?displayProperty=nameWithType> 컬렉션입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 바인딩에 <xref:System.Windows.Forms.TextBox> 테이블의 열에 대 한 제어는 <xref:System.Data.DataSet> 라는 `myDataSet`합니다. 이 예제에서는 선언 `myDataSet` 모듈의 선언 섹션에 있습니다.  
  
 [!code-cpp[Classic Binding.Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Binding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <paramref name="propertyName" />이 컨트롤의 올바른 속성도 아니고 빈 문자열("")도 아닌 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyName" />에 지정된 속성이 컨트롤에 없는 경우</exception>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
        <altmember cref="T:System.Windows.Forms.CurrencyManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String, formattingEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">바인딩할 컨트롤 속성의 이름입니다.</param>
        <param name="dataSource">데이터 소스를 나타내는 <see cref="T:System.Object" />입니다.</param>
        <param name="dataMember">바인딩할 속성 또는 목록입니다.</param>
        <param name="formattingEnabled">
          표시된 데이터의 형식을 지정하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
        <summary>표시된 컨트롤 속성을 데이터 소스의 지정된 데이터 멤버에 바인딩하고 선택적으로 서식 지정이 적용될 수 있도록 하는 <see cref="T:System.Windows.Forms.Binding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyName" />에 지정된 속성이 컨트롤에 없는 경우  
  
 또는  
  
 지정한 속성이 읽기 전용 속성인 경우</exception>
        <exception cref="T:System.Exception">형식 지정을 사용하지 않고 <paramref name="propertyName" />이 올바른 컨트롤 속성도 아니고 빈 문자열("")도 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
      </Parameters>
      <Docs>
        <param name="propertyName">바인딩할 컨트롤 속성의 이름입니다.</param>
        <param name="dataSource">데이터 소스를 나타내는 <see cref="T:System.Object" />입니다.</param>
        <param name="dataMember">바인딩할 속성 또는 목록입니다.</param>
        <param name="formattingEnabled">
          표시된 데이터의 형식을 지정하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
        <param name="dataSourceUpdateMode">
          <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 값 중 하나입니다.</param>
        <summary>지정된 컨트롤 속성을 지정된 데이터 소스의 데이터 멤버로 바인딩하는 <see cref="T:System.Windows.Forms.Binding" /> 클래스의 새 인스턴스를 초기화합니다. 선택적으로 서식 지정을 활성화하고 지정된 업데이트 설정을 기반으로 데이터 소스에 값을 전파합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 데이터 원본에 대 한 다음 클래스의 인스턴스를 지정할 수 있습니다.  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   클래스를 구현 하는 모든 클래스는 <xref:System.Collections.IList> 인터페이스  
  
-   모든 클래스  
  
 참조는 <xref:System.Windows.Forms.Binding> 만들기에 대 한 자세한 정보에 대 한 클래스는 `dataMember` 문자열입니다.  
  
 컨트롤의 속성에 대 한 바인딩을 만들 때 새 <xref:System.Windows.Forms.Binding> 바인딩된 컨트롤에서 노출 하는 이벤트를 검사 하 고 두 특정 이벤트에 연결 합니다.  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>.  
  
-   라는 이벤트 *PropertyName* `Changed` (예를 들어 <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyName" />에 지정된 속성이 컨트롤에 없는 경우  
  
 또는  
  
 지정한 데이터 소스, 데이터 멤버 또는 컨트롤 속성이 컬렉션의 다른 바인딩과 연결되어 있는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyName">바인딩할 컨트롤 속성의 이름입니다.</param>
        <param name="dataSource">데이터 소스를 나타내는 <see cref="T:System.Object" />입니다.</param>
        <param name="dataMember">바인딩할 속성 또는 목록입니다.</param>
        <param name="formattingEnabled">
          표시된 데이터의 형식을 지정하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
        <param name="dataSourceUpdateMode">
          <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 값 중 하나입니다.</param>
        <param name="nullValue">데이터 소스 값이 <see cref="T:System.Object" />인 경우 바인딩된 컨트롤 속성에 적용될 <see cref="T:System.DBNull" />입니다.</param>
        <summary>특정 컨트롤 속성을 지정된 데이터 소스의 지정된 데이터 멤버로 바인딩하는 <see cref="T:System.Windows.Forms.Binding" /> 클래스의 새 인스턴스를 초기화합니다. 선택적으로 서식 지정을 활성화하고, 지정된 업데이트 설정을 기반으로 데이터 소스에 값을 전파하고, 데이터 소스에서 <see cref="T:System.DBNull" />이 반환될 때 지정된 값으로 속성을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 데이터 원본에 대 한 다음 클래스의 인스턴스를 지정할 수 있습니다.  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   클래스를 구현 하는 모든 클래스는 <xref:System.Collections.IList> 인터페이스  
  
-   모든 클래스  
  
 참조는 <xref:System.Windows.Forms.Binding> 만들기에 대 한 자세한 정보에 대 한 클래스는 `dataMember` 문자열입니다.  
  
 컨트롤의 속성에 대 한 바인딩을 만들 때 새 <xref:System.Windows.Forms.Binding> 바인딩된 컨트롤에서 노출 하는 이벤트를 검사 하 고 두 특정 이벤트에 연결 합니다.  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   라는 이벤트 *PropertyName* `Changed` (예를 들어 <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyName" />에 지정된 속성이 컨트롤에 없는 경우  
  
 또는  
  
 지정한 데이터 소스, 데이터 멤버 또는 컨트롤 속성이 컬렉션의 다른 바인딩과 연결되어 있는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">바인딩할 컨트롤 속성의 이름입니다.</param>
        <param name="dataSource">데이터 소스를 나타내는 <see cref="T:System.Object" />입니다.</param>
        <param name="dataMember">바인딩할 속성 또는 목록입니다.</param>
        <param name="formattingEnabled">
          표시된 데이터의 형식을 지정하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
        <param name="dataSourceUpdateMode">
          <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 값 중 하나입니다.</param>
        <param name="nullValue">데이터 소스 값이 <see cref="T:System.Object" />인 경우 바인딩된 컨트롤 속성에 적용될 <see cref="T:System.DBNull" />입니다.</param>
        <param name="formatString">값을 표시할 방법을 나타내는 하나 이상의 서식 지정자 문자입니다.</param>
        <summary>지정된 컨트롤 속성을 지정된 데이터 소스의 데이터 멤버로 바인딩하는 <see cref="T:System.Windows.Forms.Binding" /> 클래스의 새 인스턴스를 초기화합니다. 선택적으로 지정된 서식 문자열을 사용하여 서식 지정을 활성화하고, 지정된 업데이트 설정에 따라 데이터 소스에 값을 전파하고, 데이터 소스에서 <see cref="T:System.DBNull" />이 반환될 때 지정된 값으로 속성을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 데이터 원본에 대 한 다음 클래스의 인스턴스를 지정할 수 있습니다.  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   클래스를 구현 하는 모든 클래스는 <xref:System.Collections.IList> 인터페이스  
  
-   모든 클래스  
  
 참조는 <xref:System.Windows.Forms.Binding> 만들기에 대 한 자세한 정보에 대 한 클래스는 `dataMember` 문자열입니다.  
  
 컨트롤의 속성에 대 한 바인딩을 만들 때 새 <xref:System.Windows.Forms.Binding> 바인딩된 컨트롤에서 노출 하는 이벤트를 검사 하 고 두 특정 이벤트에 연결 합니다.  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   라는 이벤트 *PropertyName* `Changed` (예를 들어 <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyName" />에 지정된 속성이 컨트롤에 없는 경우  
  
 또는  
  
 지정한 데이터 소스, 데이터 멤버 또는 컨트롤 속성이 컬렉션의 다른 바인딩과 연결되어 있는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, IFormatProvider formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, class System.IFormatProvider formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString, IFormatProvider ^ formatInfo);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="propertyName">바인딩할 컨트롤 속성의 이름입니다.</param>
        <param name="dataSource">데이터 소스를 나타내는 <see cref="T:System.Object" />입니다.</param>
        <param name="dataMember">바인딩할 속성 또는 목록입니다.</param>
        <param name="formattingEnabled">
          표시된 데이터의 형식을 지정하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
        <param name="dataSourceUpdateMode">
          <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> 값 중 하나입니다.</param>
        <param name="nullValue">데이터 소스 값이 <see cref="T:System.Object" />인 경우 바인딩된 컨트롤 속성에 적용될 <see cref="T:System.DBNull" />입니다.</param>
        <param name="formatString">값을 표시할 방법을 나타내는 하나 이상의 서식 지정자 문자입니다.</param>
        <param name="formatInfo">기본 서식 지정 동작을 재정의하도록 구현된 <see cref="T:System.IFormatProvider" />입니다.</param>
        <summary>지정된 컨트롤 속성을 지정된 데이터 소스의 데이터 멤버로 바인딩하는 <see cref="T:System.Windows.Forms.Binding" /> 클래스의 새 인스턴스를 초기화합니다. 선택적으로 지정된 서식 문자열을 사용하여 서식 지정을 활성화하고, 지정된 업데이트 설정을 기반으로 데이터 소스에 값을 전파하고, 데이터 소스에서 <see cref="T:System.DBNull" />이 반환될 때 지정된 값으로 속성을 설정하고, 지정된 서식 공급자를 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 데이터 원본에 대 한 다음 클래스의 인스턴스를 지정할 수 있습니다.  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   클래스를 구현 하는 모든 클래스는 <xref:System.Collections.IList> 인터페이스  
  
-   모든 클래스  
  
 참조는 <xref:System.Windows.Forms.Binding> 만들기에 대 한 자세한 정보에 대 한 클래스는 `dataMember` 문자열입니다.  
  
 컨트롤의 속성에 대 한 바인딩을 만들 때 새 <xref:System.Windows.Forms.Binding> 바인딩된 컨트롤에서 노출 하는 이벤트를 검사 하 고 두 특정 이벤트에 연결 합니다.  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   라는 이벤트 *PropertyName* `Changed` (예를 들어 <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyName" />에 지정된 속성이 컨트롤에 없는 경우  
  
 또는  
  
 지정한 데이터 소스, 데이터 멤버 또는 컨트롤 속성이 컬렉션의 다른 바인딩과 연결되어 있는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="BindableComponent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IBindableComponent BindableComponent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IBindableComponent BindableComponent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindableComponent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindableComponent As IBindableComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IBindableComponent ^ BindableComponent { System::Windows::Forms::IBindableComponent ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IBindableComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.Binding" />이 연결된 컨트롤을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Windows.Forms.IBindableComponent" />이 연결된 <see cref="T:System.Windows.Forms.Binding" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingComplete">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.BindingCompleteEventHandler BindingComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.BindingCompleteEventHandler BindingComplete" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.BindingComplete" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BindingComplete As BindingCompleteEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::BindingCompleteEventHandler ^ BindingComplete;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터를 컨트롤에서 데이터 소스로 가져오거나 데이터 소스에서 컨트롤로 가져올 때처럼 <see cref="P:System.Windows.Forms.Binding.FormattingEnabled" /> 속성이 <see langword="true" />로 설정되고 바인딩 작업이 완료되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 중 하나에서이 이벤트는 발생 하는 경우 조건을 <xref:System.Windows.Forms.Binding.FormattingEnabled%2A> 은 `true`:  
  
-   데이터 원본에서 데이터를 컨트롤 속성이 푸시됩니다.  
  
-   컨트롤의 속성 데이터를에서 데이터 원본에 푸시됩니다.  
  
 이 이벤트는 이러한 작업을 완료 상태와 무관 완료 될 때 발생 합니다. 예를 들어, 바인딩 작업에 null 값을 바인딩하는 <xref:System.Windows.Forms.DateTimePicker.Value%2A> 속성은 예외가 발생 하지만 <xref:System.Windows.Forms.Binding.BindingComplete> 이벤트가 계속 발생 합니다. 이 이벤트의 처리기 수는 적절 한 조치를 검사 하 여 성공, 오류 또는 바인딩 프로세스의 예외에 따라는 <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> 의 속성은 <xref:System.Windows.Forms.BindingCompleteEventArgs> 매개 변수입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 처리 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.Binding.BindingComplete> 이벤트입니다.  
  
 [!code-cpp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.FormattingEnabled" />
        <altmember cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BindingManagerBase">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingManagerBase BindingManagerBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingManagerBase BindingManagerBase" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingManagerBase As BindingManagerBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingManagerBase ^ BindingManagerBase { System::Windows::Forms::BindingManagerBase ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingManagerBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.Forms.BindingManagerBase" />의 <see cref="T:System.Windows.Forms.Binding" />를 가져옵니다.</summary>
        <value>이 <see cref="T:System.Windows.Forms.BindingManagerBase" />을 관리하는 <see cref="T:System.Windows.Forms.Binding" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Windows.Forms.BindingManagerBase> 증가 시키거나 감소 시키는 하 여 데이터 바인딩된 목록에서 반복 하는 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> 속성입니다. <xref:System.Windows.Forms.BindingManagerBase> 클래스는 추상 클래스입니다. <xref:System.Windows.Forms.CurrencyManager> 데이터 바인딩된 목록, 관리 하는 클래스에서 상속 된 <xref:System.Windows.Forms.BindingManagerBase> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.BindingManagerBase> 의 모든 <xref:System.Windows.Forms.Binding> 양식과 인쇄에는 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> 각 속성이 <xref:System.Windows.Forms.BindingManagerBase>합니다.  
  
 [!code-cpp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingMemberInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingMemberInfo BindingMemberInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BindingMemberInfo BindingMemberInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingMemberInfo As BindingMemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingMemberInfo BindingMemberInfo { System::Windows::Forms::BindingMemberInfo get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingMemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="Overload:System.Windows.Forms.Binding.#ctor" /> 생성자의 <paramref name="dataMember" /> 매개 변수를 기반으로 이 바인딩에 대한 정보가 포함된 개체를 가져옵니다.</summary>
        <value>이 <see cref="T:System.Windows.Forms.BindingMemberInfo" />에 대한 정보가 포함된 <see cref="T:System.Windows.Forms.Binding" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingMemberInfo> 에서 만든는 `dataMember` 문자열을 전달 하는 <xref:System.Windows.Forms.Binding.%23ctor%2A> 생성자입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.BindingMemberInfo> 각 <xref:System.Windows.Forms.Binding> 폼을 인쇄에는 <xref:System.Windows.Forms.BindingMemberInfo.BindingPath%2A>, <xref:System.Windows.Forms.BindingMemberInfo.BindingField%2A>, 및 <xref:System.Windows.Forms.BindingMemberInfo.BindingMember%2A> 속성 값을 <xref:System.Windows.Forms.Binding>합니다.  
  
 [!code-cpp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.Control" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Control As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Control { System::Windows::Forms::Control ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>바인딩이 속한 컨트롤을 가져옵니다.</summary>
        <value>바인딩이 속한 <see cref="T:System.Windows.Forms.Control" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.BindingManagerBase> 특정 데이터 원본 및 각각에 대 한 인쇄 정보에 대 한 <xref:System.Windows.Forms.Binding.Control%2A> 데이터 원본에 바인딩되는 속성입니다. 이 예제에서는 사용는 <xref:System.Windows.Forms.BindingManagerBase.Bindings%2A> 의 속성은 <xref:System.Windows.Forms.BindingManagerBase> 모든 컨트롤을 가져옵니다.  
  
 [!code-cpp[Classic Binding.Control Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Control Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Control Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Control Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Control Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Control Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlUpdateMode ControlUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ControlUpdateMode ControlUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlUpdateMode As ControlUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ControlUpdateMode ControlUpdateMode { System::Windows::Forms::ControlUpdateMode get(); void set(System::Windows::Forms::ControlUpdateMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 소스의 변경 사항이 바인딩된 컨트롤 속성에 전파되는 시기를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ControlUpdateMode" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Windows.Forms.ControlUpdateMode.OnPropertyChanged" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSource { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 바인딩에 대한 데이터 소스를 가져옵니다.</summary>
        <value>데이터 소스를 나타내는 <see cref="T:System.Object" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가능한 데이터 원본은 다음과 같습니다.  
  
-   <xref:System.Data.DataSet>입니다.  
  
-   <xref:System.Data.DataTable>입니다.  
  
-   <xref:System.Data.DataView>입니다.  
  
-   <xref:System.Data.DataViewManager>입니다.  
  
-   구현 하는 모든 개체는 <xref:System.Collections.IList> 인터페이스  
  
-   모든 개체  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.Binding.DataSource%2A> 반환 하는 <xref:System.Data.DataSet>합니다.  
  
 [!code-cpp[Classic Binding.DataSource Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.DataSource Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.DataSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSourceNullValue">
      <MemberSignature Language="C#" Value="public object DataSourceNullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSourceNullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceNullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSourceNullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤 값이 <see langword="null" />이거나 비어 있을 경우 데이터 소스에 저장할 값을 가져오거나 설정합니다.</summary>
        <value>컨트롤 속성이 비어 있거나 <see langword="null" />일 경우 데이터 소스에 저장할 <see cref="T:System.Object" />입니다. 기본값은 값 형식의 경우 <see cref="T:System.DBNull" />이고 값이 아닌 형식의 경우 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 수는 <xref:System.Windows.Forms.Binding.NullValue%2A> 때 데이터 원본에 바인딩된 컨트롤에 표시 되는 값을 지정 하려면 속성 <xref:System.DBNull>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.NullValue" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceUpdateMode As DataSourceUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataSourceUpdateMode DataSourceUpdateMode { System::Windows::Forms::DataSourceUpdateMode get(); void set(System::Windows::Forms::DataSourceUpdateMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataSourceUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>바인딩된 컨트롤 속성의 변경 사항이 데이터 소스에 전파되는 시기를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>변경 내용이 전파되는 때를 나타내는 값입니다. 기본값은 <see cref="F:System.Windows.Forms.DataSourceUpdateMode.OnValidation" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은로 설정 하는 경우에 <xref:System.Windows.Forms.DataSourceUpdateMode.Never>, 바인딩이 적어도 한 번, 처음 설정 될 때 업데이트 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Format;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Format" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Format" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Format As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Format;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤의 속성이 데이터 값에 바인딩되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Binding.Format> 이벤트는 컨트롤을 컨트롤에 데이터 원본에서 데이터를 가져올 때 발생 합니다. 처리할 수는 <xref:System.Windows.Forms.Binding.Format> 에 데이터 원본에서 형식이 지정 되지 않은 데이터를 변환 하는 이벤트에 표시할 데이터의 서식이 지정 합니다. 데이터 소스에 컨트롤에서 데이터를 끌어온 경우는 <xref:System.Windows.Forms.Binding.Parse> 때는 표시 된 값은 이벤트가 발생 하면 <xref:System.Windows.Forms.Binding.Format> 이벤트 발생에 표시할 데이터의 서식을 다시 지정 합니다. 이렇게 하면 바인딩된 컨트롤을 사용자 컨트롤에 서식이 지정 되거나 지정 되지 않은 데이터를 입력 하는 여부에 관계 없이 올바른 형식의 데이터를 표시 합니다.  
  
 <xref:System.Windows.Forms.Binding.Format> 및 <xref:System.Windows.Forms.Binding.Parse> 이벤트를 통해 데이터를 표시 하기 위한 사용자 지정 형식을 만들 수 있습니다. 예를 들어, 테이블의 데이터 형식인 경우 <xref:System.Decimal>, 현지 통화 형식으로 설정 하 여 데이터를 표시할 수는 <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> 의 속성에서 <xref:System.Windows.Forms.ConvertEventArgs> 서식이 지정 된 값에 <xref:System.Windows.Forms.Binding.Format> 이벤트입니다. 에 표시 된 값을 때는 결과적으로 해야 합니다는 <xref:System.Windows.Forms.Binding.Parse> 이벤트입니다.  
  
 <xref:System.Windows.Forms.Binding.Format> 이벤트가 발생할 때마다는 <xref:System.Windows.Forms.BindingManagerBase.Current%2A> 의 값은 <xref:System.Windows.Forms.BindingManagerBase> 포함 하는 변경 내용:  
  
-   처음으로 속성 바인딩되어 있습니다.  
  
-   언제 든 지는 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> 변경 합니다.  
  
-   때마다 데이터 바인딩된 목록 정렬 되거나 필터링이 수행 될 때는 <xref:System.Data.DataView> 목록을 제공 합니다.  
  
 <xref:System.Windows.Forms.Binding.Format> 다음에 발생는 <xref:System.Windows.Forms.Binding.Parse> 이벤트입니다. 예를 들어 컨트롤이 포커스를 잃을 때 해당 내용은 구문 분석 됩니다. 직후 컨트롤을 컨트롤에 새 데이터를 밀어넣을 <xref:System.Windows.Forms.Binding.Format> 서식을 지정 하 여 새 내용 이벤트가 발생 합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.Binding>, 추가 <xref:System.Windows.Forms.ConvertEventHandler> 둘 다에 대리자는 <xref:System.Windows.Forms.Binding.Parse> 및 <xref:System.Windows.Forms.Binding.Format> 이벤트를 추가 하 고는 <xref:System.Windows.Forms.Binding> 에 <xref:System.Windows.Forms.BindingsCollection> 의 <xref:System.Windows.Forms.TextBox> 를 통해 제어할는 <xref:System.Windows.Forms.Control.DataBindings%2A> 속성입니다. `DecimalToCurrencyString` 에 추가 하는 이벤트 대리자는 <xref:System.Windows.Forms.Binding.Format> 이벤트에 바인딩된 값의 서식을 (한 <xref:System.Decimal> 유형) 사용 하 여 통화는 <xref:System.Decimal.ToString%2A> 메서드. `CurrencyStringToDecimal` 에 추가 하는 이벤트 대리자는 <xref:System.Windows.Forms.Binding.Parse> 컨트롤에서 표시 값을 변환 하는 이벤트를 다시는 <xref:System.Decimal> 유형입니다.  
  
 이 예에서는 가정의 존재는 <xref:System.Data.DataSet> 라는 `ds`합니다.  
  
 [!code-cpp[Classic Binding.Format Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Format Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Format Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Format Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Format Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Format Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="FormatInfo">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatInfo As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatInfo { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자 지정 형식 지정 동작을 제공하는 <see cref="T:System.IFormatProvider" />를 가져오거나 설정합니다.</summary>
        <value>사용자 지정 형식 지정 동작을 제공하는 <see cref="T:System.IFormatProvider" /> 구현입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 설정 하면 기본 동작을 사용 하 여 서식 지정 재정의 합니다는 <xref:System.Windows.Forms.Application.CurrentCulture%2A?displayProperty=nameWithType> 속성을 설정 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatString">
      <MemberSignature Language="C#" Value="public string FormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FormatString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>값을 표시할 방법을 나타내는 서식 지정자 문자를 가져오거나 설정합니다.</summary>
        <value>값을 표시할 방법을 나타내는 서식 지정자 문자의 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 형식 문자열에는 표준.NET Framework 형식 사양을 따라야 합니다. 자세한 내용은 참조 [.NET Framework의 형식 지정](~/docs/standard/base-types/formatting-types.md)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormattingEnabled">
      <MemberSignature Language="C#" Value="public bool FormattingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FormattingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property FormattingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FormattingEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤 속성 데이터에 형식 변환과 서식 지정이 적용되는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          컨트롤 속성 데이터의 형식을 변환하고 지정할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 설정 `true` 또한 오류 처리 동작을 사용 하 고 발생 된 <xref:System.Windows.Forms.Binding.BindingComplete> 이벤트를 발생 합니다. 이 이벤트의 처리기 수는 적절 한 조치를 검사 하 여 성공, 오류 또는 바인딩 프로세스의 예외에 따라는 <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> 의 속성은 <xref:System.Windows.Forms.BindingCompleteEventArgs> 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.BindingComplete" />
        <altmember cref="T:System.Windows.Forms.BindingCompleteEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="IsBinding">
      <MemberSignature Language="C#" Value="public bool IsBinding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBinding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.IsBinding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBinding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBinding { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>바인딩이 활성화되어 있는지를 나타내는 값을 가져옵니다.</summary>
        <value>
          바인딩이 활성화되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 바인딩이 다음이 조건에 맞을 때 활성화 됩니다.  
  
-   속성은 모두 설정 됩니다.  
  
-   사용자 로드 하지 않는 <xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A> 또는 <xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A> 에 <xref:System.Windows.Forms.BindingManagerBase> 하는 <xref:System.Windows.Forms.Binding> 에 속합니다.  
  
-   컨트롤에는 <xref:System.Windows.Forms.Binding> 속한 만들어졌습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 인쇄는 <xref:System.Windows.Forms.Binding.PropertyName%2A> 및 <xref:System.Windows.Forms.Binding.IsBinding%2A> 각각에 대 한 값 <xref:System.Windows.Forms.Binding> 폼에 있습니다.  
  
 [!code-cpp[Classic Binding.IsBinding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.IsBinding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.IsBinding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.IsBinding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullValue">
      <MemberSignature Language="C#" Value="public object NullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.NullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property NullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 소스에 <see cref="T:System.Object" /> 값이 포함될 경우 컨트롤 속성으로 설정할 <see cref="T:System.DBNull" />를 가져오거나 설정합니다.</summary>
        <value>데이터 소스에 <see cref="T:System.Object" /> 값이 포함될 경우 컨트롤 속성으로 설정할 <see cref="T:System.DBNull" />입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터 원본에 포함 해야 <xref:System.DBNull> 에 대 한는 <xref:System.Windows.Forms.Binding.NullValue%2A> 속성을 올바르게 적용 되도록 합니다. 데이터 원본 유형이 같은 형식이 정수 또는 문자열의 값은 <xref:System.Windows.Forms.Binding.NullValue%2A> 속성은 무시 됩니다. 또한는 <xref:System.Windows.Forms.Binding.NullValue%2A> 로 설정 되어 있으면 속성은 무시 됩니다 `null`합니다.  
  
 컨트롤 속성의 개체에 null 값이 데이터 원본에 추가 됩니다 <xref:System.Windows.Forms.Binding.NullValue%2A>합니다. 경우 <xref:System.Windows.Forms.Binding.NullValue%2A> 설정 되는 문자열 값으로 비교는 대/소문자 구분 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBindingComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingComplete (System.Windows.Forms.BindingCompleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingComplete(class System.Windows.Forms.BindingCompleteEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBindingComplete (e As BindingCompleteEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBindingComplete(System::Windows::Forms::BindingCompleteEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.BindingCompleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.BindingCompleteEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.Binding.BindingComplete" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.Binding.OnBindingComplete%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFormat">
      <MemberSignature Language="C#" Value="protected virtual void OnFormat (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFormat(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFormat (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFormat(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.ConvertEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.Binding.Format" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.Binding.OnFormat%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="OnParse">
      <MemberSignature Language="C#" Value="protected virtual void OnParse (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParse(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParse (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParse(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.ConvertEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.Binding.Parse" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.Binding.OnParse%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Parse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Parse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Parse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Parse As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Parse;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 바인딩된 컨트롤의 값이 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Binding.Format> 및 <xref:System.Windows.Forms.Binding.Parse> 이벤트를 통해 데이터를 표시 하기 위한 사용자 지정 형식을 만들 수 있습니다. 예를 들어, 테이블의 데이터 형식인 경우 <xref:System.Decimal>, 현지 통화 형식으로 설정 하 여 데이터를 표시할 수는 <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> 의 속성에서 <xref:System.Windows.Forms.ConvertEventArgs> 서식이 지정 된 값에 <xref:System.Windows.Forms.Binding.Format> 이벤트입니다. 에 표시 된 값을 때는 결과적으로 해야 합니다는 <xref:System.Windows.Forms.Binding.Parse> 이벤트입니다.  
  
 <xref:System.Windows.Forms.Binding.Parse> 다음과 같은 이벤트가 발생 합니다.  
  
-   이후에 <xref:System.Windows.Forms.Control.Validated> 의 이벤트는 <xref:System.Windows.Forms.Control> 발생 합니다.  
  
-   경우는 <xref:System.Windows.Forms.BindingManagerBase.EndCurrentEdit%2A> 의 메서드는 <xref:System.Windows.Forms.BindingManagerBase> 호출 됩니다.  
  
-   때는 <xref:System.Windows.Forms.BindingManagerBase.Current%2A> 의 <xref:System.Windows.Forms.BindingManagerBase> 변경 (즉 때는 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> 변경).  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.Binding>, 추가 <xref:System.Windows.Forms.ConvertEventHandler> 둘 다에 대리자는 <xref:System.Windows.Forms.Binding.Parse> 및 <xref:System.Windows.Forms.Binding.Format> 이벤트를 추가 하 고는 <xref:System.Windows.Forms.Binding> 에 <xref:System.Windows.Forms.BindingsCollection> 의 <xref:System.Windows.Forms.TextBox> 를 통해 제어할는 <xref:System.Windows.Forms.Control.DataBindings%2A> 속성입니다. `DecimalToCurrencyString` 에 추가 하는 이벤트 대리자는 <xref:System.Windows.Forms.Binding.Format> 이벤트에 바인딩된 값의 서식을 (한 <xref:System.Decimal> 유형) 사용 하 여 통화는 <xref:System.Decimal.ToString%2A> 메서드. `CurrencyStringToDecimal` 에 추가 하는 이벤트 대리자는 <xref:System.Windows.Forms.Binding.Parse> 컨트롤에서 표시 값을 변환 하는 이벤트를 다시는 <xref:System.Decimal> 유형입니다.  
  
 [!code-cpp[Classic Binding.Parse Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Parse Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Parse Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Parse Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Parse Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Parse Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
      </Docs>
    </Member>
    <Member MemberName="PropertyName">
      <MemberSignature Language="C#" Value="public string PropertyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PropertyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.PropertyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PropertyName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤의 데이터 바인딩된 속성의 이름을 가져오거나 설정합니다.</summary>
        <value>바인딩할 컨트롤 속성의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Windows.Forms.Binding.PropertyName%2A> 목록 데이터 원본에 바인딩할 컨트롤 속성을 지정 합니다. 와 같은 display 속성을 바인딩할 가장 일반적으로 <xref:System.Windows.Forms.Control.Text%2A> 의 속성을 <xref:System.Windows.Forms.TextBox> 제어 합니다. 그러나 컨트롤의 모든 속성을 바인딩할 수 있으므로 프로그래밍 방식으로 컨트롤 만들 수 있습니다 데이터베이스에서 데이터를 사용 하 여 런타임에 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 인쇄는 <xref:System.Windows.Forms.Binding.PropertyName%2A> 각 값 <xref:System.Windows.Forms.Binding> 폼에 있는 각 컨트롤에 대 한 합니다.  
  
 [!code-cpp[Classic Binding.PropertyName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.PropertyName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.PropertyName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.PropertyName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadValue">
      <MemberSignature Language="C#" Value="public void ReadValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.ReadValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>컨트롤 속성을 데이터 소스에서 읽은 값으로 설정합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public void WriteValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.WriteValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>컨트롤 속성에서 현재 값을 읽고 데이터 소스에 씁니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>