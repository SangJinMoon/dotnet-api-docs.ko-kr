<Type Name="ListView" FullName="System.Windows.Forms.ListView">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1e72770b5a826b4b618ee58512f64684e24b11fa" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36519441" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ListView : System.Windows.Forms.Control" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListView extends System.Windows.Forms.Control" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListView" />
  <TypeSignature Language="VB.NET" Value="Public Class ListView&#xA;Inherits Control" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListView : System::Windows::Forms::Control" />
  <TypeSignature Language="F#" Value="type ListView = class&#xA;    inherit Control" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a Windows list view control, which displays a collection of items that can be displayed using one of four different views.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.ListView> 컨트롤 항목 텍스트와 필요에 따라 항목의 유형을 식별 하는 아이콘을 사용 하 여 항목 목록을 표시할 수 있습니다. 예를 들어 Windows 탐색기 파일의 목록은 모양이 비슷합니다는 <xref:System.Windows.Forms.ListView> 제어 합니다. 파일 및 트리에서 현재 선택한 폴더의 목록으로 표시 됩니다. 각 파일 및 폴더에 파일 또는 폴더의 유형을 식별 하는 데 도움이 될 때까지 연관 된 아이콘이 표시 됩니다. <xref:System.Windows.Forms.ListViewItem> 클래스 내에서 항목을 나타냅니다는 <xref:System.Windows.Forms.ListView> 제어 합니다. 항목 목록에 표시 되는 다섯 가지 뷰 중 하나에 표시할 수 있습니다. 큰 아이콘, 작은 아이콘 또는 작은 아이콘 세로 목록에 항목을 표시할 수 있습니다. 항목에 부모 항목과 관련 된 정보가 들어 있는 하위 있을 수도 있습니다. 자세히 보기를 사용 하는 하위 항목에 표시 되는 정보를 식별 하는 열 머리글과 함께 표에 항목과 하위 항목을 표시할 수 있습니다. 아래 설명 된 대로 가용성이 제한, tile 보기에서는 사용 하는 텍스트 정보 옆에 있는 큰 아이콘을 포함 하는 타일로 항목과 하위 항목을 표시할 수 있습니다. <xref:System.Windows.Forms.ListView> 에서는 단일 또는 다중 선택 합니다. 다중 선택 기능 사용자가을 수 있습니다. 비슷한 방법으로 항목의 목록에서 선택 된 <xref:System.Windows.Forms.ListBox> 제어 합니다. 또한 사용자는 작업을 수행 하려면 선택한 항목을 활성화할 수 있습니다. 예를 들어, 사용할 수는 <xref:System.Windows.Forms.ListView> 컨트롤을 다음 응용 프로그램 열고 활용할 수 있는 파일의 목록을 표시 합니다. 사용자 파일을 열고 다음 항목을 활성화 하 고 응용 프로그램에서 파일을 열 수를 두 번 클릭 선택할 수 있습니다. <xref:System.Windows.Forms.ListView> 또한 사용 하 여 확인란에 표시할 수는 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> 속성에서 작업을 수행 하고자 하는 항목을 확인 가능 합니다. 사용할 수는 <xref:System.Windows.Forms.ListView> 여러 가지 방법으로 제어 합니다. 응용 프로그램, 데이터베이스 또는 텍스트 파일에서 정보를 표시 하려면 컨트롤을 사용할 수 있습니다. <xref:System.Windows.Forms.ListView> 에서 처리 하는 파일 집합을 선택 하는 등 사용자 정보를 사용할 수도 있습니다.  
  
 <xref:System.Windows.Forms.ListView> 많은 수의 모양 및 동작에 유연성을 제공 하는 속성을 제공 합니다. <xref:System.Windows.Forms.ListView.View%2A> 속성 항목이 표시 되는 방식을 변경할 수 있습니다. <xref:System.Windows.Forms.ListView.LargeImageList%2A>, <xref:System.Windows.Forms.ListView.SmallImageList%2A>, 및 <xref:System.Windows.Forms.ListView.StateImageList%2A> 속성을 사용 하면 지정 하는 <xref:System.Windows.Forms.ImageList> 항목 및의 경우 표시 되는 이미지를 포함 하는 개체는 <xref:System.Windows.Forms.ListView.StateImageList%2A>, 되는 확인란 때 표시 되는 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> 속성이 `true`합니다. 선택한 항목을를 확인 하려면 사용할 수 있습니다는 <xref:System.Windows.Forms.ListView.CheckedItems%2A> 속성에 액세스는 <xref:System.Windows.Forms.ListView.CheckedListViewItemCollection> 컬렉션입니다. <xref:System.Windows.Forms.ListView.Columns%2A> 속성에 액세스할 수 있습니다는 <xref:System.Windows.Forms.ListView.ColumnHeaderCollection>, 열 헤더를 저장 하는 때 표시 되는 <xref:System.Windows.Forms.ListView.View%2A> 컨트롤의 속성이로 설정 되어 <xref:System.Windows.Forms.View.Details>합니다. 항목이 추가 되 고 제거는 <xref:System.Windows.Forms.ListView> 통해는 <xref:System.Windows.Forms.ListView.Items%2A> 속성입니다. <xref:System.Windows.Forms.ListView.Items%2A> 속성에 액세스할 수 있습니다는 <xref:System.Windows.Forms.ListView.ListViewItemCollection> 컨트롤의 항목을 조작 하기 위한 메서드를 제공 하는 컨트롤입니다. 사용자가 항목의 텍스트를 편집할 수 있도록 하려는 경우 사용할 수 있습니다는 <xref:System.Windows.Forms.ListView.LabelEdit%2A> 속성입니다. 컨트롤에서 많은 수의 항목을 포함 된 경우 정렬된 된 목록에 표시 하려면 사용자가 보다 쉽게 방식은 합니다. 사용할 수는 <xref:System.Windows.Forms.ListView.Sorting%2A> 항목을 사전순으로 정렬 하는 속성입니다. 모양을 완전히 사용자 지정할 수 있습니다는 <xref:System.Windows.Forms.ListView> 제어 합니다. 이 위해 설정 된 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> 속성을 `true` 다음 이벤트 중 하나 이상을 처리할: <xref:System.Windows.Forms.ListView.DrawItem>, <xref:System.Windows.Forms.ListView.DrawSubItem>, <xref:System.Windows.Forms.ListView.DrawColumnHeader>합니다.  
  
 대부분의 속성의는 <xref:System.Windows.Forms.ListView> 제어 때 사용 되는 <xref:System.Windows.Forms.ListView.View%2A> 컨트롤의 속성이로 설정 되어 <xref:System.Windows.Forms.View.Details>합니다. <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A> 사용자의 속성을 사용 하면 <xref:System.Windows.Forms.ListView> 런타임 시 열의 순서를 다시 구성 하는 컨트롤입니다. <xref:System.Windows.Forms.ListView.FullRowSelect%2A> 속성이 항목 및 항목과 하위 항목만 아니라 선택할 수 있습니다. 항목과 하위 항목의 경계를 식별 하려면 자세히 보기에 눈금선을 표시 하는 <xref:System.Windows.Forms.ListView>를 사용할 수 있습니다는 <xref:System.Windows.Forms.ListView.GridLines%2A> 속성입니다. <xref:System.Windows.Forms.ListView.HeaderStyle%2A> 속성을 표시 하려면 열 머리글의 형식을 지정할 수 있습니다.  
  
 A <xref:System.Windows.Forms.ListView> 컨트롤이 가상 모드에서 작동할 수 있습니다 위치 <xref:System.Windows.Forms.ListViewItem> 개체에 저장 되지 않고 동적으로 생성 되는 <xref:System.Windows.Forms.ListView.Items%2A> 컬렉션입니다. 이 매우 큰 목록 또는 목록의 내용이 자주 변경 처리 하기 위한 유용할 수 있습니다. 가상 모드를 사용 하도록 설정 된 <xref:System.Windows.Forms.ListView.VirtualMode%2A> 속성을 `true` 처리는 <xref:System.Windows.Forms.ListView.RetrieveVirtualItem>, <xref:System.Windows.Forms.ListView.CacheVirtualItems>, 및 <xref:System.Windows.Forms.ListView.SearchForVirtualItem> 이벤트.  
  
 에 사용할 수 있는 여러 속성 외에 <xref:System.Windows.Forms.ListView> 제어 하 고, 메서드 및 응용 프로그램 추가 기능을 제공 하는 데 사용할 수 있는 이벤트는 <xref:System.Windows.Forms.ListView>합니다. <xref:System.Windows.Forms.ListView.BeginUpdate%2A> 및 <xref:System.Windows.Forms.ListView.EndUpdate%2A> 메서드를 사용 하면 많은 항목을 추가할 때 성능을 향상 시키기는 <xref:System.Windows.Forms.ListView> 컨트롤 항목이 추가 될 때마다 다시 표시 하지 못하도록 하 여 합니다. 경우에 <xref:System.Windows.Forms.ListView> 표시 하는 항목 및 하위 항목을 만들려는 경우 하위 항목을 마우스 오른쪽 단추로 클릭할 때 기능을 제공 합니다. 사용할 수 있는 하위 항목 클릭 되는 항목을 확인 하려면는 <xref:System.Windows.Forms.ListView.GetItemAt%2A> 메서드. 을 편집 된 후 항목의 유효성 검사를 수행할 때 특정 항목을 변경 하려면 사용자에 게 표시 하는 것이 좋습니다. <xref:System.Windows.Forms.ListView.EnsureVisible%2A> 특정 항목 컨트롤의 표시 영역에 있는지 확인 하는 메서드를 호출할 수 있습니다.  
  
 경우는 <xref:System.Windows.Forms.ListView.LabelEdit%2A> 속성이로 설정 `true`, 텍스트에 대 한 이벤트 처리기를 만들어서 변경 전후 편집 하 고 텍스트 유효성 검사와 같은 작업을 수행할 수 있습니다는 <xref:System.Windows.Forms.ListView.BeforeLabelEdit> 및 <xref:System.Windows.Forms.ListView.AfterLabelEdit> 이벤트입니다. 파일 열기 대화 상자에 표시 되는 항목을 편집 하려면 표시 등의 작업을 수행 하는 <xref:System.Windows.Forms.ListView>에 대 한 이벤트 처리기를 만들 수 있습니다는 <xref:System.Windows.Forms.ListView.ItemActivate> 이벤트입니다. 항목을 정렬 하려면 사용자를 허용 하는 경우는 <xref:System.Windows.Forms.ListView> 열 머리글을 클릭할 때에 대 한 이벤트 처리기를 만들 수 있습니다는 <xref:System.Windows.Forms.ListView.ColumnClick> 정렬을 수행 하는 이벤트입니다. 때는 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> 속성이 `true`를 처리 하 여 항목의 선택 상태에 변경 내용이 발생 하는 시기를 결정할 수 있습니다는 <xref:System.Windows.Forms.ListView.ItemCheck> 이벤트입니다.  
  
 에 대 한 배경 이미지를 설정할 수도 있습니다는 <xref:System.Windows.Forms.ListView> 와 <xref:System.Windows.Forms.Control.BackgroundImage%2A> 속성입니다. 응용 프로그램 있어야는 <xref:System.STAThreadAttribute> 에 해당 `Main` 올바르게에 대 한 배경 이미지를 표시 하는 메서드는 <xref:System.Windows.Forms.ListView> 제어 합니다. 또한 경우는 <xref:System.Windows.Forms.ListView> 배경 이미지가 있는 컨트롤은 Internet Explorer에서 호스팅되는 응용 프로그램 매니페스트 파일에 종속 어셈블리가 배경 이미지 되는지 표시 된 속성으로 comctl32.dll 버전 6.0을 지정 합니다.  
  
> [!NOTE]
>  설정의 <xref:System.Windows.Forms.Control.Cursor%2A> 속성에 대 한는 <xref:System.Windows.Forms.ListView> 컨트롤에서 커서의 모양에 영향을 주지 않습니다에 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1 및 이전 버전입니다.  
  
 Windows XP 및 Windows Server 2003을 개선 하는 세 가지 기능을 제공는 <xref:System.Windows.Forms.ListView> 응용 프로그램 호출 하는 경우 제어는 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> 메서드: 타일 보기, 그룹화 및 삽입 표시 합니다.  
  
 바둑판식 뷰를 통해 그래픽 정보와 텍스트 정보를 큰 아이콘 옆에 있는 항목과 하위 항목 텍스트를 표시 하 여 분산 수 있습니다. 설정의 <xref:System.Windows.Forms.ListView.View%2A> 속성을 <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType> 이 동작을 활성화 합니다.  
  
 그룹화 기능을 사용 하면 시각적으로 항목 관련 범주로 그룹화 수 있습니다. 사용 하 여는 <xref:System.Windows.Forms.ListView.Groups%2A> 추가할 속성 <xref:System.Windows.Forms.ListViewGroup> 개체는 <xref:System.Windows.Forms.ListView> 이 기능을 사용 하려는 경우를 제어 합니다. 기능을 일시적으로 해제 하려면 설정는 <xref:System.Windows.Forms.ListView.ShowGroups%2A> 속성을 `false`합니다.  
  
 삽입 표시 기능은 끌어서 놓기 항목 위치를 변경할 때 놓는 위치를 나타내는 시각적 피드백을 제공할 수 있습니다. 사용 하 여는 <xref:System.Windows.Forms.ListViewInsertionMark> 통해 검색 된 개체는 <xref:System.Windows.Forms.ListView.InsertionMark%2A> 속성을 삽입 표시를 표시 합니다.  
  
 이러한 기능은 Windows XP 및 Windows Server 2003 에서만 사용할 수 있습니다. 이전 운영 체제에서 이러한 기능에 관련 된 코드가 아무 효과가 없습니다, 바둑판식 뷰 큰 아이콘 보기로 나타나고 삽입 표시와 그룹 표시 되지 않습니다. 경우에 따라 이러한 기능을 사용할 수 있는지 확인 하는 코드를 포함할 수도 있으며 사용할 수 없는 경우 대체 기능을 제공할 수 있습니다. 이러한 기능은 운영 체제 테마 기능을 제공 하는 라이브러리에서 제공 됩니다. 이 라이브러리의 가용성을 확인 하려면 호출는 <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> 메서드 오버 로드를 전달은 <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> 값입니다.  
  
 다음 표에서 몇 가지는 <xref:System.Windows.Forms.ListView> 멤버와는 사용할 수 있는 보기입니다.  
  
|ListView 멤버|보기|  
|---------------------|----------|  
|<xref:System.Windows.Forms.ListView.Alignment%2A> 속성|<xref:System.Windows.Forms.View.SmallIcon> 또는 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoArrange%2A> 속성|<xref:System.Windows.Forms.View.SmallIcon> 또는 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> 메서드|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.Columns%2A> 속성|<xref:System.Windows.Forms.View.Details> 또는 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.DrawSubItem> 이벤트|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.FindItemWithText%2A> 메서드|<xref:System.Windows.Forms.View.Details>, <xref:System.Windows.Forms.View.List>또는 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.FindNearestItem%2A> 메서드|<xref:System.Windows.Forms.View.SmallIcon> 또는 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.GetItemAt%2A> 메서드|<xref:System.Windows.Forms.View.Details> 또는 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Groups%2A> 속성|제외한 모든 보기 <xref:System.Windows.Forms.View.List>|  
|<xref:System.Windows.Forms.ListView.HeaderStyle%2A> 속성|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.InsertionMark%2A> 속성|<xref:System.Windows.Forms.View.LargeIcon>, <xref:System.Windows.Forms.View.SmallIcon>또는 <xref:System.Windows.Forms.View.Tile>|  
  
   
  
## Examples  
 다음 코드 예제에서는 한 <xref:System.Windows.Forms.ListView> 3 개 컨트롤 <xref:System.Windows.Forms.ListViewItem> 지정 된 개체 및 3 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> 각 항목에 대해 지정 된 개체입니다. 예제에서는 <xref:System.Windows.Forms.ColumnHeader> 자세히 보기의 하위 항목을 표시 하는 개체입니다. 두 개의 <xref:System.Windows.Forms.ImageList> 개체에 대 한 이미지를 제공 하는 코드 예제에서는 만들어집니다는 <xref:System.Windows.Forms.ListViewItem> 개체입니다. 이러한 <xref:System.Windows.Forms.ImageList> 개체에 추가 되는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성입니다. 이 예제에서는 만들기에서 다음 속성을 사용 하 여는 <xref:System.Windows.Forms.ListView> 제어:  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 이 예제에서는 코드를 추가 했는지는 <xref:System.Windows.Forms.Form> 생성자 나 폼에서 다른 방법의 예제에서 만든 메서드를 호출 합니다. 이 예제는 또한 라는 이미지가에서는 `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, 및 `MyLargeImage2` C 드라이브의 루트 디렉터리에 있는  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListViewItem" />
    <altmember cref="T:System.Windows.Forms.ImageList" />
    <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListView();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.ListView" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는 한 <xref:System.Windows.Forms.ListView> 3 개 컨트롤 <xref:System.Windows.Forms.ListViewItem> 지정 된 개체 및 3 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> 각 항목에 대해 지정 된 개체입니다. 예제에서는 <xref:System.Windows.Forms.ColumnHeader> 자세히 보기의 하위 항목을 표시 하는 개체입니다. 두 개의 <xref:System.Windows.Forms.ImageList> 개체에 대 한 이미지를 제공 하는 코드 예제에서는 만들어집니다는 <xref:System.Windows.Forms.ListViewItem> 개체입니다. 이러한 <xref:System.Windows.Forms.ImageList> 개체에 추가 되는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성입니다. 이 예제에서는 만들기에서 다음 속성을 사용 하 여는 <xref:System.Windows.Forms.ListView> 제어:  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 이 예제에서는 코드를 추가 했는지는 <xref:System.Windows.Forms.Form> 생성자 나 폼에서 다른 방법의 예제에서 만든 메서드를 호출 합니다. 이 예제는 또한 라는 이미지가에서는 `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, 및 `MyLargeImage2` C 드라이브의 루트 디렉터리에 있는  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activation">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ItemActivation Activation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ItemActivation Activation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Activation" />
      <MemberSignature Language="VB.NET" Value="Public Property Activation As ItemActivation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ItemActivation Activation { System::Windows::Forms::ItemActivation get(); void set(System::Windows::Forms::ItemActivation value); };" />
      <MemberSignature Language="F#" Value="member this.Activation : System.Windows.Forms.ItemActivation with get, set" Usage="System.Windows.Forms.ListView.Activation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemActivation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type of action the user must take to activate an item.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ItemActivation" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Windows.Forms.ItemActivation.Standard" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.Activation%2A> 속성을 사용 하면 사용자에 항목을 활성화 하는 방법을 지정할 수 있습니다는 <xref:System.Windows.Forms.ListView> 제어 합니다. 항목을 활성화 한 <xref:System.Windows.Forms.ListView> 항목을 선택 하는 것에서 다릅니다. 항목이 활성화 될 때 작업에 대 한 이벤트 처리기에서 일반적으로 수행 된 <xref:System.Windows.Forms.ListView.ItemActivate> 이벤트입니다. 예를 들어 항목이 활성화 될 때 수 파일을 열거나 항목을 편집할 수 있는 대화 상자를 표시 합니다. 일반적으로 항목을 활성화 하려면 사용자가 두 번 클릭할 합니다. 경우는 <xref:System.Windows.Forms.ListView.Activation%2A> 속성이 <xref:System.Windows.Forms.ItemActivation.OneClick>, 해당 항목을 한 번 클릭 하면 활성화 됩니다. 설정의 <xref:System.Windows.Forms.ListView.Activation%2A> 속성을 <xref:System.Windows.Forms.ItemActivation.TwoClick> 두 개의 클릭 사이의 기간에 제한이 없기 때문에 표준 두 번 클릭에서 다릅니다.  
  
> [!NOTE]
>  경우는 <xref:System.Windows.Forms.ListView.Activation%2A> 속성이 <xref:System.Windows.Forms.ItemActivation.OneClick> 또는 <xref:System.Windows.Forms.ItemActivation.TwoClick>, 레이블 편집 허용 되지 것입니다의 값에 관계 없이 <xref:System.Windows.Forms.ListView.LabelEdit%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is not one of the <see cref="T:System.Windows.Forms.ItemActivation" /> members.</exception>
        <altmember cref="T:System.Windows.Forms.ItemActivation" />
        <altmember cref="E:System.Windows.Forms.ListView.ItemActivate" />
      </Docs>
    </Member>
    <Member MemberName="AfterLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler AfterLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LabelEditEventHandler AfterLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.AfterLabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AfterLabelEdit As LabelEditEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LabelEditEventHandler ^ AfterLabelEdit;" />
      <MemberSignature Language="F#" Value="member this.AfterLabelEdit : System.Windows.Forms.LabelEditEventHandler " Usage="member this.AfterLabelEdit : System.Windows.Forms.LabelEditEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the label for an item is edited by the user.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.AfterLabelEdit> 왔을 항목에 대 한 텍스트를 수정 하면 오류가 발생 합니다. 사용자가 입력 한 항목에 대 한 새 문자열 이벤트를 전달 하 고 이벤트 처리기에는 변경 사항을 거부할 수 있습니다. 이벤트 처리기가 변경을 거부 했습니다 사용자 항목을 편집이 시작 되기 전에 텍스트 텍스트로 되돌아갑니다.  
  
> [!NOTE]
>  때문에 <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> 이벤트 수행한 레이블 편집 호출 커밋되기 전에 <xref:System.Windows.Forms.ListView.Sort%2A?displayProperty=nameWithType> 이 이벤트에 대 한 처리기에서 메서드는 원래 값을 사용 하 여 항목을 정렬 합니다.  
  
 되려면에서는 <xref:System.Windows.Forms.ListView.AfterLabelEdit> 발생 하는 이벤트는 <xref:System.Windows.Forms.ListView.LabelEdit%2A> 속성의는 <xref:System.Windows.Forms.ListView> 제어로 설정 해야 `true`합니다.  
  
 에 대 한 이벤트 처리기를 만들 수는 <xref:System.Windows.Forms.ListView.BeforeLabelEdit> 항목의 텍스트를 편집 하기 전에 작업을 수행 하는 이벤트입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.ListView.AfterLabelEdit> 새로 편집된 된 레이블을 알파벳에서 자로 제한 하는 이벤트입니다. 이 예제에서는 사용은 <xref:System.Text.ASCIIEncoding> 클래스의 새 레이블 각 문자의 ASCII 문자 코드를 가져올 수 있습니다. 문자 숫자를 나타내는 ASCII 코드 사이의 뒤쳐지면 항목에 새 레이블을 적용할 수 없습니다. 이 예제에서는 만든는 <xref:System.Windows.Forms.ListView> 컨트롤은 폼과 항목을 추가한에 있습니다. 이 예제는 또한 연결에서는 <xref:System.Windows.Forms.ListView.AfterLabelEdit> 예제 코드에 정의 된 이벤트 처리기에는 이벤트입니다. 사용 하려면는 <xref:System.Text.ASCIIEncoding> 클래스 파일에 포함 해야는 <xref:System.Text> 네임 스페이스입니다.  
  
 [!code-cpp[ListView.AfterLabelEdit#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CPP/form1.cpp#1)]
 [!code-csharp[ListView.AfterLabelEdit#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CS/form1.cs#1)]
 [!code-vb[ListView.AfterLabelEdit#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.AfterLabelEdit/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.LabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewAlignment Alignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ListViewAlignment Alignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Alignment" />
      <MemberSignature Language="VB.NET" Value="Public Property Alignment As ListViewAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewAlignment Alignment { System::Windows::Forms::ListViewAlignment get(); void set(System::Windows::Forms::ListViewAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.Alignment : System.Windows.Forms.ListViewAlignment with get, set" Usage="System.Windows.Forms.ListView.Alignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the alignment of items in the control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListViewAlignment" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Windows.Forms.ListViewAlignment.Top" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.Alignment%2A> 맞춤 속성에만 영향을 때의 <xref:System.Windows.Forms.ListView.View%2A> 속성이 <xref:System.Windows.Forms.View.LargeIcon> 또는 <xref:System.Windows.Forms.View.SmallIcon>합니다.  
  
> [!NOTE]
>  이 속성은 아무 효과가와 <xref:System.Windows.Forms.ListView.View%2A> 속성이 <xref:System.Windows.Forms.View.List>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is not one of the <see cref="T:System.Windows.Forms.ListViewAlignment" /> values.</exception>
        <altmember cref="T:System.Windows.Forms.ListViewAlignment" />
      </Docs>
    </Member>
    <Member MemberName="AllowColumnReorder">
      <MemberSignature Language="C#" Value="public bool AllowColumnReorder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowColumnReorder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.AllowColumnReorder" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowColumnReorder As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowColumnReorder { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowColumnReorder : bool with get, set" Usage="System.Windows.Forms.ListView.AllowColumnReorder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the user can drag column headers to reorder columns in the control.</summary>
        <value>
          <see langword="true" /> 끌어서 놓기 열 다시 정렬가 허용 하는 경우 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 설정는 <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A> 속성 효과가 <xref:System.Windows.Forms.ListView.View%2A> 속성이 <xref:System.Windows.Forms.View.Details>합니다. 런타임 시 컨트롤에서 열의 위치를 변경할 수 있도록 하려면이 속성을 사용할 수 있습니다. 경우는 <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A> 속성이로 설정 되어 `true`, 사용자가 응용 프로그램 내에서 요구를 충족 하는 방식으로 항목 및 해당 하위 항목을 표시 하도록 컨트롤의 열을 배치할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 한 <xref:System.Windows.Forms.ListView> 3 개 컨트롤 <xref:System.Windows.Forms.ListViewItem> 지정 된 개체 및 3 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> 각 항목에 대해 지정 된 개체입니다. 예제에서는 <xref:System.Windows.Forms.ColumnHeader> 자세히 보기의 하위 항목을 표시 하는 개체입니다. 두 개의 <xref:System.Windows.Forms.ImageList> 개체에 대 한 이미지를 제공 하는 코드 예제에서는 만들어집니다는 <xref:System.Windows.Forms.ListViewItem> 개체입니다. 이러한 <xref:System.Windows.Forms.ImageList> 개체에 추가 되는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성입니다. 이 예제에서는 만들기에서 다음 속성을 사용 하 여는 <xref:System.Windows.Forms.ListView> 제어:  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 이 예제에서는 코드를 추가 했는지는 <xref:System.Windows.Forms.Form> 생성자 나 폼에서 다른 방법의 예제에서 만든 메서드를 호출 합니다. 이 예제는 또한 라는 이미지가에서는 `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, 및 `MyLargeImage2` C 드라이브의 루트 디렉터리에 있는  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrangeIcons">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Arranges items in the control when they are displayed as icons.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ArrangeIcons() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ArrangeIcons" />
      <MemberSignature Language="VB.NET" Value="Public Sub ArrangeIcons ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ArrangeIcons();" />
      <MemberSignature Language="F#" Value="member this.ArrangeIcons : unit -&gt; unit" Usage="listView.ArrangeIcons " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arranges items in the control when they are displayed as icons based on the value of the <see cref="P:System.Windows.Forms.ListView.Alignment" /> property.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> 메서드 인 유용한 경우에는 <xref:System.Windows.Forms.ListView.View%2A> 속성이 <xref:System.Windows.Forms.View.LargeIcon> 또는 <xref:System.Windows.Forms.View.SmallIcon>합니다. 이 버전의 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> 의 값에 따라 항목을 정렬 하는 메서드는 <xref:System.Windows.Forms.ListView.Alignment%2A> 속성입니다. 다른 값에 따라 항목을 정렬 하려면는 <xref:System.Windows.Forms.ListView.Alignment%2A> 속성을 다른 버전의 사용은 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons (System.Windows.Forms.ListViewAlignment value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ArrangeIcons(valuetype System.Windows.Forms.ListViewAlignment value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ArrangeIcons(System.Windows.Forms.ListViewAlignment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ArrangeIcons (value As ListViewAlignment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ArrangeIcons(System::Windows::Forms::ListViewAlignment value);" />
      <MemberSignature Language="F#" Value="member this.ArrangeIcons : System.Windows.Forms.ListViewAlignment -&gt; unit" Usage="listView.ArrangeIcons value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.ListViewAlignment" />
      </Parameters>
      <Docs>
        <param name="value">One of the <see cref="T:System.Windows.Forms.ListViewAlignment" /> values.</param>
        <summary>Arranges items in the control when they are displayed as icons with a specified alignment setting.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> 메서드 인 유용한 경우에는 <xref:System.Windows.Forms.ListView.View%2A> 속성이 <xref:System.Windows.Forms.View.LargeIcon> 또는 <xref:System.Windows.Forms.View.SmallIcon>합니다. 이 버전의는 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> 에 아이콘을 정렬 하는 메서드는 <xref:System.Windows.Forms.ListView> 에 따라는 <xref:System.Windows.Forms.ListViewAlignment> 에 지정 된 값의 `value` 매개 변수입니다. 이 메서드를 호출의 값이 변경 되지 않습니다는 <xref:System.Windows.Forms.ListView.Alignment%2A> 컨트롤의 속성입니다. 이 메서드를 다른 값을 사용 하 여 컨트롤에 아이콘을 정렬 하는 <xref:System.Windows.Forms.ListView.Alignment%2A> 속성입니다. 값에 따라 항목을 정렬 하려면는 <xref:System.Windows.Forms.ListView.Alignment%2A> 속성을 다른 버전의 사용은 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The value specified in the <paramref name="value" /> parameter is not a member of the <see cref="T:System.Windows.Forms.ListViewAlignment" /> enumeration.</exception>
        <altmember cref="T:System.Windows.Forms.ListViewAlignment" />
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="AutoArrange">
      <MemberSignature Language="C#" Value="public bool AutoArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.AutoArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoArrange : bool with get, set" Usage="System.Windows.Forms.ListView.AutoArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether icons are automatically kept arranged.</summary>
        <value>
          <see langword="true" /> 정렬 되지 않습니다 및 모눈에 맞춰진 아이콘 자동으로 보관 하면 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.AutoArrange%2A> 속성만의 항목을 정렬 된 <xref:System.Windows.Forms.ListView> 시점을 제어할는 <xref:System.Windows.Forms.ListView.View%2A> 속성이로 설정 되어 <xref:System.Windows.Forms.View.LargeIcon> 또는 <xref:System.Windows.Forms.View.SmallIcon>합니다. 에 있는 항목의 맞춤을 변경 하려면는 <xref:System.Windows.Forms.ListView> 컨트롤을 사용 하 여는 <xref:System.Windows.Forms.ListView.Alignment%2A> 속성입니다. 사용할 수 있습니다 <xref:System.Windows.Forms.ListView.AutoArrange%2A> 에 있는 모든 항목이 되도록 프로그램 <xref:System.Windows.Forms.ListView> 컨트롤 실행 시 서로 겹치지 않도록 자동으로 정렬 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="public void AutoResizeColumn (int columnIndex, System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumn(int32 columnIndex, valuetype System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumn (columnIndex As Integer, headerAutoResize As ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumn(int columnIndex, System::Windows::Forms::ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeColumn : int * System.Windows.Forms.ColumnHeaderAutoResizeStyle -&gt; unit" Usage="listView.AutoResizeColumn (columnIndex, headerAutoResize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <param name="columnIndex">The zero-based index of the column to resize.</param>
        <param name="headerAutoResize">One of the <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> values.</param>
        <summary>Resizes the width of the given column as indicated by the resize style.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출은 효과적인 한 번만 <xref:System.Windows.Forms.ListView> 포함 하 고 <xref:System.Windows.Forms.Form> 구성 되 고 <xref:System.Windows.Forms.ListView> 열 머리글 및 열은 항목으로 채워집니다. 새 항목에 추가 되는 <xref:System.Windows.Forms.ListView>, 하지 않는 한 열 크기가 조정 되지 것입니다 <xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> 를 다시 호출 합니다.  
  
   
  
## Examples  
 다음 예제에서는 초기화는 <xref:System.Windows.Forms.ListView> 자세히 보기와에 자동으로 사용 하 여 열 크기를 조정 된 <xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> 메서드. 이 예제를 실행 하려면 Windows Form과 호출에이 코드를 붙여는 `InitializeResizingListView` 폼의 생성자에서 메서드 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리기입니다.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> is greater than 0 when <see cref="P:System.Windows.Forms.ListView.Columns" /> is <see langword="null" />  -or-  <paramref name="columnIndex" /> is less than 0 or greater than the number of columns set.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="headerAutoResize" /> is not a member of the <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> enumeration.</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="public void AutoResizeColumns (System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumns(valuetype System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.AutoResizeColumns(System.Windows.Forms.ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumns (headerAutoResize As ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumns(System::Windows::Forms::ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeColumns : System.Windows.Forms.ColumnHeaderAutoResizeStyle -&gt; unit" Usage="listView.AutoResizeColumns headerAutoResize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <param name="headerAutoResize">One of the <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> values.</param>
        <summary>Resizes the width of the columns as indicated by the resize style.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출은 효과적인 한 번만 <xref:System.Windows.Forms.ListView> 포함 하 고 <xref:System.Windows.Forms.Form> 구성 되 고 <xref:System.Windows.Forms.ListView> 열 머리글 및 열은 항목으로 채워집니다. 새 항목에 추가 되는 <xref:System.Windows.Forms.ListView>, 하지 않는 한 열 크기가 조정 되지 것입니다 <xref:System.Windows.Forms.ListView.AutoResizeColumns%2A> 를 다시 호출 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 초기화 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.ListView> 세부 정보 보기 및 사용 하 여 열을 자동으로 크기 조정에 <xref:System.Windows.Forms.ListView.AutoResizeColumns%2A> 메서드. 이 예제를 실행 하려면 Windows Form과 호출에이 코드를 붙여는 `InitializeResizingListView2` 폼의 생성자에서 메서드 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리기입니다.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#9)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" /> is called with a value other than <see cref="F:System.Windows.Forms.ColumnHeaderAutoResizeStyle.None" /> when <see cref="P:System.Windows.Forms.ListView.View" /> is not set to <see cref="F:System.Windows.Forms.View.Details" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListView.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color.</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> 배경색입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayout : System.Windows.Forms.ImageLayout with get, set" Usage="System.Windows.Forms.ListView.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an <see cref="T:System.Windows.Forms.ImageLayout" /> value.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageLayout" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은의 배경 이미지의 레이아웃에 영향을 주지는 <xref:System.Windows.Forms.ListView> 컨트롤, 따라서 표시 되지 않습니다는 디자이너에서 나 intellisense 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is not one of the <see cref="T:System.Windows.Forms.ImageLayout" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayoutChanged : EventHandler " Usage="member this.BackgroundImageLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="P:System.Windows.Forms.ListView.BackgroundImageLayout" /> property changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageTiled">
      <MemberSignature Language="C#" Value="public bool BackgroundImageTiled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BackgroundImageTiled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImageTiled" />
      <MemberSignature Language="VB.NET" Value="Public Property BackgroundImageTiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BackgroundImageTiled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageTiled : bool with get, set" Usage="System.Windows.Forms.ListView.BackgroundImageTiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the background image of the <see cref="T:System.Windows.Forms.ListView" /> should be tiled.</summary>
        <value>
          <see langword="true" /> 하는 경우의 배경 이미지는 <see cref="T:System.Windows.Forms.ListView" /> 바둑판식 건너뛸 필요가 없으면, <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.BackgroundImageTiled%2A> 속성에서 반환 `false` 이미지로 설정 되지 않은 경우.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BeforeLabelEdit As LabelEditEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LabelEditEventHandler ^ BeforeLabelEdit;" />
      <MemberSignature Language="F#" Value="member this.BeforeLabelEdit : System.Windows.Forms.LabelEditEventHandler " Usage="member this.BeforeLabelEdit : System.Windows.Forms.LabelEditEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user starts editing the label of an item.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.BeforeLabelEdit> 이 이벤트는 항목에 대 한 텍스트를 수정 하기 시작할 때 발생 합니다. 이벤트 처리기가이 이벤트를 취소 하는 경우 사용자는 텍스트를 편집할 수 없습니다. 이 이벤트를 사용 하 여 사용자의 특정 항목을 편집 하지 못하도록는 <xref:System.Windows.Forms.ListView> 제어 합니다. 경우는 <xref:System.Windows.Forms.ListView.LabelEdit%2A> 의 속성은 <xref:System.Windows.Forms.ListView> 로 설정 되어 `false`, <xref:System.Windows.Forms.ListView.BeforeLabelEdit> 이벤트가 발생 하지 않습니다; 모든 사용자 항목 레이블을 편집 하 여 자동으로 거부 됩니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 처리는 <xref:System.Windows.Forms.ListView.BeforeLabelEdit> 이벤트 및 사용 하는 <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A?displayProperty=nameWithType> 속성입니다. 예제를 실행 하려면 포함 하는 폼에 다음 코드를 붙여는 <xref:System.Windows.Forms.ListView> 라는 컨트롤 `ListView1` 있고 세 개 이상의 항목으로 채워집니다. 예제에서 이벤트 처리기는 이벤트에 연결을 확인 합니다.  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.LabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.BeginUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginUpdate();" />
      <MemberSignature Language="F#" Value="member this.BeginUpdate : unit -&gt; unit" Usage="listView.BeginUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Prevents the control from drawing until the <see cref="M:System.Windows.Forms.ListView.EndUpdate" /> method is called.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 여러 항목을 추가 하는 것이 좋습니다는 <xref:System.Windows.Forms.ListView> 사용 하는 것의 <xref:System.Windows.Forms.ListView.ListViewItemCollection.AddRange%2A> 의 메서드는 <xref:System.Windows.Forms.ListView.ListViewItemCollection> (통해 액세스는 <xref:System.Windows.Forms.ListView.Items%2A> 속성의는 <xref:System.Windows.Forms.ListView>). 이 항목의 배열을 한 번의 작업 목록에 추가할 수 있습니다. 하지만 추가 하려는 항목을 사용 하 여 한 번에 하나씩는 <xref:System.Windows.Forms.ListView.ListViewItemCollection.Add%2A> 의 메서드는 <xref:System.Windows.Forms.ListView.ListViewItemCollection> 사용할 수 있습니다 클래스는 <xref:System.Windows.Forms.ListView.BeginUpdate%2A> 컨트롤 다시 칠하지 않으려면 메서드는 <xref:System.Windows.Forms.ListView> 항목이 추가 될 때마다 합니다. 컨트롤에 항목을 추가 작업을 완료 했으면, 호출는 <xref:System.Windows.Forms.ListView.EndUpdate%2A> 메서드를 사용 하도록 설정 된 <xref:System.Windows.Forms.ListView> 다시 그려야 합니다. 이 방법으로 항목의 그리기 추가 <xref:System.Windows.Forms.ListView> 컨트롤에 많은 수의 항목이 추가 될 때입니다.  
  
 경우 <xref:System.Windows.Forms.ListView.BeginUpdate%2A> 두 번 이상 라고 <xref:System.Windows.Forms.ListView.EndUpdate%2A> 해당 하는 횟수를 호출 해야 합니다. 에 대 한 마지막 호출 될 때까지 <xref:System.Windows.Forms.ListView.EndUpdate%2A> 는 <xref:System.Windows.Forms.ListView> 이 그려집니다. 이 이외의 여러 번 호출 <xref:System.Windows.Forms.ListView.BeginUpdate%2A> 영향을 주지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 초기화 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.ListView> 확인란을 포함 하도록 제어 합니다. 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.ListView.BeginUpdate%2A> 및 <xref:System.Windows.Forms.ListView.EndUpdate%2A> 메서드. 이 예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여넣습니다는 <xref:System.Windows.Forms.ListView> 라는 `ListView1`합니다. 호출 된 `InititalizeListView` 폼의 생성자에서 메서드 또는 `Load` 메서드.  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.EndUpdate" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderStyle As BorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BorderStyle BorderStyle { System::Windows::Forms::BorderStyle get(); void set(System::Windows::Forms::BorderStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BorderStyle : System.Windows.Forms.BorderStyle with get, set" Usage="System.Windows.Forms.ListView.BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the border style of the control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.BorderStyle" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 수 있습니다는 <xref:System.Windows.Forms.ListView.BorderStyle%2A> 의 테두리 스타일을 변경 하려면 속성에서 <xref:System.Windows.Forms.ListView> 폼에 있는 다른 컨트롤의 테두리 스타일 설정과 일치 하는 컨트롤입니다. 예를 들어 경우 테두리를 표시 하는 폼에서 다른 컨트롤의 없음 설정할 수 있습니다는 <xref:System.Windows.Forms.ListView.BorderStyle%2A> 의 속성은 <xref:System.Windows.Forms.ListView> 컨트롤을 <xref:System.Windows.Forms.BorderStyle.None> 다른 컨트롤에 맞게 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is not one of the <see cref="T:System.Windows.Forms.BorderStyle" /> values.</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="CacheVirtualItems">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.CacheVirtualItems" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CacheVirtualItems As CacheVirtualItemsEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::CacheVirtualItemsEventHandler ^ CacheVirtualItems;" />
      <MemberSignature Language="F#" Value="member this.CacheVirtualItems : System.Windows.Forms.CacheVirtualItemsEventHandler " Usage="member this.CacheVirtualItems : System.Windows.Forms.CacheVirtualItemsEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CacheVirtualItemsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the contents of the display area for a <see cref="T:System.Windows.Forms.ListView" /> in virtual mode has changed, and the <see cref="T:System.Windows.Forms.ListView" /> determines that a new range of items is needed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트는 런타임에만 발생 때 <xref:System.Windows.Forms.ListView.VirtualMode%2A> 은 `true`합니다. 이 이벤트를 처리할 수 있습니다는 <xref:System.Windows.Forms.ListView> 항목 정보를 업데이트 하려면 캐시에서 유지 되는 바로 사용할 수 있도록 합니다. 이렇게 큰 목록 또는 목록 항목이 있는 계산을 많이 소모 되며 성능이 향상 됩니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기는 캐시 새로 고침 작업은 실제로 필요 하 고 캐시를 다시 작성 한 다음 확인 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Windows.Forms.ListView.VirtualMode%2A> 속성입니다.  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckBoxes">
      <MemberSignature Language="C#" Value="public bool CheckBoxes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckBoxes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckBoxes" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckBoxes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckBoxes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckBoxes : bool with get, set" Usage="System.Windows.Forms.ListView.CheckBoxes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether a check box appears next to each item in the control.</summary>
        <value>
          <see langword="true" /> 각 항목 옆에 확인란이 나타납니다는 <see cref="T:System.Windows.Forms.ListView" /> 제어; 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> 속성 목록에서 각 항목 옆에 확인란을 표시할 수 있습니다. 이렇게 하면 항목의 목록을 표시 하려면 응용 프로그램 (항목과 경우 하위는 <xref:System.Windows.Forms.ListView.View%2A> 속성이로 설정 되어 `View.Details`) 사용자의 확인란을 클릭 하 여 선택할 수 있습니다. <xref:System.Windows.Forms.ListView.CheckBoxes%2A> 속성의 여러 항목을 선택할 수 있습니다는 <xref:System.Windows.Forms.ListView> CTRL 키를 사용 하지 않고 제어 합니다. 응용 프로그램에 따라 사용 하 여 확인란 표준 보다는 항목을 선택 하려면 다중 선택 방법 더 쉬울 수도 사용자에 대 한 합니다. 경우에는 <xref:System.Windows.Forms.ListView.MultiSelect%2A> 의 속성은 <xref:System.Windows.Forms.ListView> 로 설정 되어 `false`, 확인란을 표시 하 고 사용자에 게 다중 선택 기능을 제공할 수 있습니다. 이 기능은 여러 항목을 선택할 수를 원하는 아직 사용자 응용 프로그램 내에서 작업을 수행 하 고 목록에서 여러 항목을 선택할 수 있게 하려면 않는 경우 유용할 수 있습니다.  
  
 에 대 한 이벤트 처리기를 만들고 항목 검사 된 시기를 확인 하려면는 <xref:System.Windows.Forms.ListView.ItemCheck> 이벤트입니다. 에 체크 인 된 모든 항목을 가져옵니다는 <xref:System.Windows.Forms.ListView>를 사용 하 여는 <xref:System.Windows.Forms.ListView.CheckedItems%2A> 속성에 액세스는 <xref:System.Windows.Forms.ListView.CheckedIndexCollection> 컨트롤에 대 한 합니다. 체크 인 된 모든 항목의 인덱스를 가져오려면는 <xref:System.Windows.Forms.ListView>를 사용 하 여는 <xref:System.Windows.Forms.ListView.CheckedIndices%2A> 속성입니다.  
  
 경우는 <xref:System.Windows.Forms.ImageList> 에 지정 된는 <xref:System.Windows.Forms.ListView.StateImageList%2A> 속성에서 인덱스가 0과 1 인 이미지의 <xref:System.Windows.Forms.ImageList> 확인란 대신 표시 됩니다. 인덱스 위치 0에 있는 이미지 선택 취소 되어 있음된 확인란 대신 나타나고 인덱스 1 위치에 이미지 선택 된 확인란 대신 표시 됩니다.  
  
> [!NOTE]
>  이 속성을 설정 하면 `true`, <xref:System.Windows.Forms.ListView.ItemCheck> 이벤트가 발생 합니다.  
>   
>  확인란 때 표시 되는 <xref:System.Windows.Forms.ListView.View%2A> 속성이 <xref:System.Windows.Forms.View.Tile>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 한 <xref:System.Windows.Forms.ListView> 3 개 컨트롤 <xref:System.Windows.Forms.ListViewItem> 지정 된 개체 및 3 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> 각 항목에 대해 지정 된 개체입니다. 예제에서는 <xref:System.Windows.Forms.ColumnHeader> 자세히 보기의 하위 항목을 표시 하는 개체입니다. 두 개의 <xref:System.Windows.Forms.ImageList> 개체에 대 한 이미지를 제공 하는 코드 예제에서는 만들어집니다는 <xref:System.Windows.Forms.ListViewItem> 개체입니다. 이러한 <xref:System.Windows.Forms.ImageList> 개체에 추가 되는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성입니다. 이 예제에서는 만들기에서 다음 속성을 사용 하 여는 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 이 예제에서는 코드를 추가 했는지는 <xref:System.Windows.Forms.Form> 생성자 나 폼에서 다른 방법의 예제에서 만든 메서드를 호출 합니다. 이 예제는 또한 라는 이미지가에서는 `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, 및 `MyLargeImage2` C 드라이브의 루트 디렉터리에 있는  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="P:System.Windows.Forms.ListView.MultiSelect" />
      </Docs>
    </Member>
    <Member MemberName="CheckedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedIndexCollection CheckedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/CheckedIndexCollection CheckedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedIndices As ListView.CheckedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::CheckedIndexCollection ^ CheckedIndices { System::Windows::Forms::ListView::CheckedIndexCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CheckedIndices : System.Windows.Forms.ListView.CheckedIndexCollection" Usage="System.Windows.Forms.ListView.CheckedIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the indexes of the currently checked items in the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" /> 현재 선택한 항목의 인덱스를 포함 하 합니다. 현재 선택 된 항목이 없으면 경우 빈 <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" /> 반환 됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은만 유용한 경우는 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> 의 속성은 <xref:System.Windows.Forms.ListView> 로 설정 되어 `true`합니다. <xref:System.Windows.Forms.ListView.CheckedIndices%2A> 속성의 인덱스 위치를 포함 하는 컬렉션을 반환 된 <xref:System.Windows.Forms.ListView.ListViewItemCollection> 컨트롤에 체크 인 된 모든 항목의 합니다. 컬렉션의 항목을 조작 하는 방법에 대 한 자세한 내용은 참조 하십시오. <xref:System.Windows.Forms.ListView.CheckedIndexCollection>합니다.  
  
 체크 인 된 항목의 컬렉션을 가져오려면 하려는 경우는 <xref:System.Windows.Forms.ListView> 대신 사용 하 여 옵션을 선택 하는 항목의 인덱스 위치는 <xref:System.Windows.Forms.ListView.CheckedItems%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckedItems" />
      </Docs>
    </Member>
    <Member MemberName="CheckedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedListViewItemCollection CheckedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/CheckedListViewItemCollection CheckedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedItems As ListView.CheckedListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::CheckedListViewItemCollection ^ CheckedItems { System::Windows::Forms::ListView::CheckedListViewItemCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CheckedItems : System.Windows.Forms.ListView.CheckedListViewItemCollection" Usage="System.Windows.Forms.ListView.CheckedItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the currently checked items in the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" /> 현재 확인란이 선택 된 항목이 들어 있는입니다. 현재 선택 된 항목이 없으면 경우 빈 <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" /> 반환 됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은만 유용한 경우는 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> 의 속성은 <xref:System.Windows.Forms.ListView> 로 설정 되어 `true`합니다. <xref:System.Windows.Forms.ListView.CheckedItems%2A> 속성 컨트롤에서 선택 된 모든 항목이 포함 된 컬렉션을 반환 합니다. 컬렉션의 항목을 조작 하는 방법에 대 한 자세한 내용은 참조 하십시오. <xref:System.Windows.Forms.ListView.CheckedListViewItemCollection>합니다.  
  
 내의 인덱스 위치의 컬렉션을 가져오려면 하려는 경우는 <xref:System.Windows.Forms.ListView.ListViewItemCollection> 체크 인 된 항목의는 <xref:System.Windows.Forms.ListView> 대신 사용 하 여 옵션을 선택 하는 항목의 <xref:System.Windows.Forms.ListView.CheckedIndices%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 체크 <xref:System.Windows.Forms.ListView> 처리 하는 <xref:System.Windows.Forms.ListView.ItemChecked> 이벤트입니다. 이 예제에서는 사용 된 <xref:System.Windows.Forms.ListView.CheckedItems%2A> 속성을 새 가격 항목은 checked 또는 unchecked 될 때마다 기록 합니다. 이 예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여넣습니다는 <xref:System.Windows.Forms.ListView> 라는 `ListView1` 및 <xref:System.Windows.Forms.TextBox> 라는 `Textbox1`합니다. 호출 된 `InititalizeListView` 폼의 생성자에서 메서드 또는 `Load` 메서드.  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView2#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#3)]
[!code-csharp[System.Windows.Forms.ListView2#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#3)]
[!code-vb[System.Windows.Forms.ListView2#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckedIndices" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="listView.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all items and columns from the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하 여 모든 항목 및 열을 제거 하는 <xref:System.Windows.Forms.ListView> 개별적으로 호출 하지 않고도 컨트롤 `Clear` 에서 메서드는 <xref:System.Windows.Forms.ListView.ColumnHeaderCollection> 및 <xref:System.Windows.Forms.ListView.ListViewItemCollection> 클래스입니다.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ListView.Clear%2A> 메서드 지워지지 않습니다 <xref:System.Windows.Forms.ListView.Groups%2A> 에 대해 지정 된는 <xref:System.Windows.Forms.ListView> 제어 합니다. 지울 <xref:System.Windows.Forms.ListView.Groups%2A> 호출 <xref:System.Windows.Forms.ListViewGroupCollection.Clear%2A?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.ListView.Clear%2A> 및 <xref:System.Windows.Forms.ListViewItem.Selected%2A?displayProperty=nameWithType> 멤버입니다. 이 예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여는 <xref:System.Windows.Forms.ListView> 라는 `ListView1` 및 명명 된 폼의 아래쪽에 있는 단추가 `Button1`합니다. 호출 된 `InitializeListView` 폼의 생성자에서 메서드 또는 `Load` 메서드.  
  
 [!code-cpp[System.Windows.Forms.ListView4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView4/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView4/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.ColumnHeaderCollection.Clear" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Clear" />
      </Docs>
    </Member>
    <Member MemberName="ColumnClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnClickEventHandler ColumnClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnClickEventHandler ColumnClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnClick As ColumnClickEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnClickEventHandler ^ ColumnClick;" />
      <MemberSignature Language="F#" Value="member this.ColumnClick : System.Windows.Forms.ColumnClickEventHandler " Usage="member this.ColumnClick : System.Windows.Forms.ColumnClickEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user clicks a column header within the list view control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ColumnClick> 이벤트에 있는 항목의 세부 정보 보기에서 열 머리글 중 하나를 클릭할 때 발생 한 <xref:System.Windows.Forms.ListView> 컨트롤 (때는 <xref:System.Windows.Forms.ListView.View%2A> 속성이로 설정 되어 <xref:System.Windows.Forms.View.Details>). <xref:System.Windows.Forms.ListView.ColumnClick> 일반적으로 이벤트는 항목을 정렬 하려면는 <xref:System.Windows.Forms.ListView> 열으로 클릭 한 열을 사용 하 여 기준으로 정렬 합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 포함 된 폼을 만듭니다는 <xref:System.Windows.Forms.ListView> 수동으로 때 열에 항목을 정렬 하는 <xref:System.Windows.Forms.ListView> 컨트롤을 클릭 합니다. 이 예제에서는 클래스를 정의 `ListViewItemComparer` 구현 하는 <xref:System.Collections.IComparer?displayProperty=nameWithType> 수행 하는 인터페이스는 <xref:System.Windows.Forms.ListViewItem> 비교 합니다. 이 예에서는 인스턴스를 만듭니다 `ListViewItemComparer` 사용 하 여 설정 하 고는 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> 속성의는 <xref:System.Windows.Forms.ListView> 제어 합니다. <xref:System.Windows.Forms.ListView.Sort%2A> 메서드 호출의 <xref:System.Windows.Forms.ListView.ColumnClick> 이벤트 처리기에 정의 된 메서드를 사용 하 여 `ListViewItemComparer` 항목을 클릭 한 열에 따라 정렬 합니다.  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ColumnReordered">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnReordered" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnReordered As ColumnReorderedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnReorderedEventHandler ^ ColumnReordered;" />
      <MemberSignature Language="F#" Value="member this.ColumnReordered : System.Windows.Forms.ColumnReorderedEventHandler " Usage="member this.ColumnReordered : System.Windows.Forms.ColumnReorderedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnReorderedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the column header order is changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ColumnReordered> 이벤트는 취소할 수 있는 이벤트 및 이벤트를 처리 하 고 설정 취소할 수는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 속성을 `true`합니다. 그러나 이벤트를 취소 하는 경우는 <xref:System.Windows.Forms.ColumnReorderedEventArgs.NewDisplayIndex%2A> 의 <xref:System.Windows.Forms.ColumnReorderedEventArgs> 에 변경 되지 것입니다는 <xref:System.Windows.Forms.ColumnReorderedEventArgs.OldDisplayIndex%2A> 값입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.ListView.ColumnReordered> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.ListView> 라는 `ListView1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.ListView.ColumnReordered> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#467](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#467)]
 [!code-vb[System.Windows.Forms.EventExamples#467](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#467)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ColumnHeaderCollection Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/ColumnHeaderCollection Columns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Columns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Columns As ListView.ColumnHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::ColumnHeaderCollection ^ Columns { System::Windows::Forms::ListView::ColumnHeaderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Columns : System.Windows.Forms.ListView.ColumnHeaderCollection" Usage="System.Windows.Forms.ListView.Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ColumnHeaderCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ColumnHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of all column headers that appear in the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" /> 때 나타나는 열 머리글을 표시 하는 <see cref="P:System.Windows.Forms.ListView.View" /> 속성이 <see cref="F:System.Windows.Forms.View.Details" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.Columns%2A> 속성이 포함 된 컬렉션을 반환 된 <xref:System.Windows.Forms.ColumnHeader> 에 표시 되는 개체는 <xref:System.Windows.Forms.ListView> 제어 합니다. <xref:System.Windows.Forms.ColumnHeader> 에 표시 되는 열을 정의 하는 개체는 <xref:System.Windows.Forms.ListView> 제어는 <xref:System.Windows.Forms.ListView.View%2A> 속성이로 설정 된 <xref:System.Windows.Forms.View.Details>합니다. 사용할 각 열에 있는 각 항목에 대 한 하위 항목 정보를 표시 하는 <xref:System.Windows.Forms.ListView>합니다. 컬렉션의 항목을 조작 하는 방법에 대 한 자세한 내용은 참조 하십시오. <xref:System.Windows.Forms.ListView.ColumnHeaderCollection>합니다.  
  
> [!NOTE]
>  경우 프로그램 <xref:System.Windows.Forms.ListView> 컨트롤에는 지정 된 모든 열 머리글 및 설정한는 <xref:System.Windows.Forms.ListView.View%2A> 속성을 <xref:System.Windows.Forms.View.Details>, <xref:System.Windows.Forms.ListView> 컨트롤에 모든 항목 표시 되지 것입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 한 <xref:System.Windows.Forms.ListView> 3 개 컨트롤 <xref:System.Windows.Forms.ListViewItem> 지정 된 개체 및 3 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> 각 항목에 대해 지정 된 개체입니다. 예제에서는 <xref:System.Windows.Forms.ColumnHeader> 자세히 보기의 하위 항목을 표시 하는 개체입니다. 두 개의 <xref:System.Windows.Forms.ImageList> 개체에 대 한 이미지를 제공 하는 코드 예제에서는 만들어집니다는 <xref:System.Windows.Forms.ListViewItem> 개체입니다. 이러한 <xref:System.Windows.Forms.ImageList> 개체에 추가 되는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성입니다. 이 예제에서는 만들기에서 다음 속성을 사용 하 여는 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 이 예제에서는 코드를 추가 했는지는 <xref:System.Windows.Forms.Form> 생성자 나 폼에서 다른 방법의 예제에서 만든 메서드를 호출 합니다. 이 예제는 또한 라는 이미지가에서는 `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, 및 `MyLargeImage2` C 드라이브의 루트 디렉터리에 있는  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" />
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnWidthChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnWidthChanged As ColumnWidthChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnWidthChangedEventHandler ^ ColumnWidthChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnWidthChanged : System.Windows.Forms.ColumnWidthChangedEventHandler " Usage="member this.ColumnWidthChanged : System.Windows.Forms.ColumnWidthChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after the width of a column is successfully changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 열 너비 변경에 취소 되 면이 이벤트가 발생 하지 것입니다는 <xref:System.Windows.Forms.ListView.ColumnWidthChanging> 이벤트  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.ListView.ColumnWidthChanged> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.ListView> 라는 `ListView1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.ListView.ColumnWidthChanged> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#468](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#468)]
 [!code-vb[System.Windows.Forms.EventExamples#468](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#468)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanging">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnWidthChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnWidthChanging As ColumnWidthChangingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnWidthChangingEventHandler ^ ColumnWidthChanging;" />
      <MemberSignature Language="F#" Value="member this.ColumnWidthChanging : System.Windows.Forms.ColumnWidthChangingEventHandler " Usage="member this.ColumnWidthChanging : System.Windows.Forms.ColumnWidthChangingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the width of a column is changing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트를 사용 하면 사용 하 여 새 열 너비를 확인 하 고 <xref:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth%2A?displayProperty=nameWithType> 속성을 설정 하 여 선택 하는 경우 이벤트를 취소할은 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 속성을 `true`합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 처리는 <xref:System.Windows.Forms.ListView.ColumnWidthChanging> 이벤트입니다. 에 대해서도 설명는 <xref:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth%2A?displayProperty=nameWithType> 및 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 멤버입니다. 이 예제를 실행 하려면 Windows Form에 코드를 붙여 넣습니다. 호출 `InitializeListView1` 폼의 생성자 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리기입니다.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberSignature Language="F#" Value="override this.CreateHandle : unit -&gt; unit" Usage="listView.CreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a handle for the control.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.ListView.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property is not relevant for this class.</summary>
        <value>모든 경우에 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 이 클래스와 관련이 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSize : System.Drawing.Size" Usage="System.Windows.Forms.ListView.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default size of the control.</summary>
        <value>컨트롤의 기본 <see cref="T:System.Drawing.Size" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="listView.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.ListView" /> and optionally releases the managed resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 된 <xref:System.Windows.Forms.ListView.Dispose%2A> 메서드는 구성 요소는 더 이상 필요 합니다. 이 메서드 (구성 요소에는 사이트) 경우 해당 컨테이너에서 구성 요소를 제거 하 고 dispose 이벤트를 트리거합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected override bool DoubleBuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.DoubleBuffered" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Property DoubleBuffered As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool DoubleBuffered { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DoubleBuffered : bool with get, set" Usage="System.Windows.Forms.ListView.DoubleBuffered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker.</summary>
        <value>이중 버퍼링을 사용하여 컨트롤의 화면을 그려야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawColumnHeader">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawColumnHeader" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawColumnHeader As DrawListViewColumnHeaderEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewColumnHeaderEventHandler ^ DrawColumnHeader;" />
      <MemberSignature Language="F#" Value="member this.DrawColumnHeader : System.Windows.Forms.DrawListViewColumnHeaderEventHandler " Usage="member this.DrawColumnHeader : System.Windows.Forms.DrawListViewColumnHeaderEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewColumnHeaderEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the details view of a <see cref="T:System.Windows.Forms.ListView" /> is drawn and the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property is set to <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트의 모양을 사용자 지정할 수 있습니다는 <xref:System.Windows.Forms.ListView> 소유자 그리기를 사용 하 여 제어 합니다. 발생 하는 경우에만 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> 속성이로 설정 되어 `true` 및 <xref:System.Windows.Forms.ListView.View%2A> 속성이로 설정 된 <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>합니다. 이 이벤트는 컨트롤의 각 열 머리글에 발생할 수 있습니다. 소유자 그리기에 대 한 자세한 내용은 참조는 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> 속성 참조 항목입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는의 구현을 제공는 <xref:System.Windows.Forms.ListView.DrawColumnHeader> 이벤트 처리기입니다. 전체 예제 구현을 비롯 하 여 <xref:System.Windows.Forms.ListView.DrawSubItem> 이벤트 처리기 참조는 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> 참조 항목입니다.  
  
 [!code-csharp[ListViewOwnerDraw#5](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#5)]
 [!code-vb[ListViewOwnerDraw#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawListViewItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewItemEventHandler ^ DrawItem;" />
      <MemberSignature Language="F#" Value="member this.DrawItem : System.Windows.Forms.DrawListViewItemEventHandler " Usage="member this.DrawItem : System.Windows.Forms.DrawListViewItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a <see cref="T:System.Windows.Forms.ListView" /> is drawn and the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property is set to <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트의 모양을 사용자 지정할 수 있습니다는 <xref:System.Windows.Forms.ListView> 소유자 그리기를 사용 하 여 제어 합니다. 발생 하는 경우에만 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> 속성이 `true`합니다. 소유자 그리기에 대 한 자세한 내용은 참조는 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> 속성 참조 항목입니다.  
  
 <xref:System.Windows.Forms.ListView.DrawItem> 이벤트 각각에 대해 발생할 수 있습니다 <xref:System.Windows.Forms.ListView> 항목입니다. 때는 <xref:System.Windows.Forms.ListView.View%2A> 속성이로 설정 되어 <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>, <xref:System.Windows.Forms.ListView.DrawSubItem> 및 <xref:System.Windows.Forms.ListView.DrawColumnHeader> 이벤트도 발생 합니다. 이 경우 처리할 수 있습니다는 <xref:System.Windows.Forms.ListView.DrawItem> 백그라운드 등의 모든 항목에 공통 되는 요소를 그리기를 처리 해야 하는 이벤트는 <xref:System.Windows.Forms.ListView.DrawSubItem> 텍스트 값과 같은 개별 하위 항목에 대 한 요소를 그리는 데 이벤트입니다. 모든 항목을 그릴 수도 있습니다는 <xref:System.Windows.Forms.ListView> 편하게 사용 될 수 있지만 두 개의 이벤트 중 하나에 사용 하 여 제어 합니다. 자세히 보기에서 열 머리글을 그리려면 처리 해야 합니다는 <xref:System.Windows.Forms.ListView.DrawColumnHeader> 이벤트입니다.  
  
> [!NOTE]
>  기본 Win32 컨트롤의 버그 때문에 <xref:System.Windows.Forms.ListView.DrawItem> 이벤트가 발생 하지 않고 <xref:System.Windows.Forms.ListView.DrawSubItem> 에 이벤트 행 위에 마우스 포인터를 움직이면 세부 정보 뷰에서 행 마다 한 번씩, 그리고 아무 것도 원인이 <xref:System.Windows.Forms.ListView.DrawSubItem> 되도록 이벤트 처리기 키를 그려진 사용자 지정 배경을 그린는 <xref:System.Windows.Forms.ListView.DrawItem> 이벤트 처리기입니다. 예제를 참조는 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> 추가 이벤트가 발생할 때 각 행을 무효화 하는 해결 방법에 대 한 참조 항목입니다. 다른 해결 방법은 모든 사용자 지정 그리기 코드에 배치 하는 <xref:System.Windows.Forms.ListView.DrawSubItem> 이벤트 처리기 및 (하위 항목 포함) 전체 항목의 배경 그리는 경우에만 <xref:System.Windows.Forms.DrawListViewSubItemEventArgs.ColumnIndex%2A?displayProperty=nameWithType> 값은 0입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는의 구현을 제공는 <xref:System.Windows.Forms.ListView.DrawItem> 이벤트 처리기입니다. 전체 예제를 참조 하십시오.는 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> 참조 항목입니다.  
  
 [!code-csharp[ListViewOwnerDraw#3](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#3)]
 [!code-vb[ListViewOwnerDraw#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="DrawSubItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawSubItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawSubItem As DrawListViewSubItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewSubItemEventHandler ^ DrawSubItem;" />
      <MemberSignature Language="F#" Value="member this.DrawSubItem : System.Windows.Forms.DrawListViewSubItemEventHandler " Usage="member this.DrawSubItem : System.Windows.Forms.DrawListViewSubItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewSubItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the details view of a <see cref="T:System.Windows.Forms.ListView" /> is drawn and the <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> property is set to <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트의 모양을 사용자 지정할 수 있습니다는 <xref:System.Windows.Forms.ListView> 소유자 그리기를 사용 하 여 제어 합니다. 발생 하는 경우에만 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> 속성이로 설정 되어 `true` 및 <xref:System.Windows.Forms.ListView.View%2A> 속성이로 설정 된 <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>합니다. 소유자 그리기에 대 한 자세한 내용은 참조는 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> 속성 참조 항목입니다.  
  
> [!NOTE]
>  하위 항목 정보는 일반적으로 tile 보기에 표시으로 세부 정보를 볼 수는 tile 보기에서 해당 그려야에 대 한 처리기는 <xref:System.Windows.Forms.ListView.DrawItem> 이벤트입니다.  
  
 <xref:System.Windows.Forms.ListView.DrawSubItem> 이벤트 각각에 대해 발생할 수 있습니다 <xref:System.Windows.Forms.ListView> 하위 항목입니다. 처리할 수는 <xref:System.Windows.Forms.ListView.DrawItem> 백그라운드 등의 모든 하위 항목에 공통 되는 요소를 그리기를 처리 해야 하는 이벤트는 <xref:System.Windows.Forms.ListView.DrawSubItem> 텍스트 값과 같은 개별 하위 항목에 대 한 요소를 그리는 데 이벤트입니다. 모든 항목을 그릴 수도 있습니다는 <xref:System.Windows.Forms.ListView> 편하게 사용 될 수 있지만 두 개의 이벤트 중 하나에 사용 하 여 제어 합니다. 자세히 보기에서 열 머리글을 그리려면 처리 해야 합니다는 <xref:System.Windows.Forms.ListView.DrawColumnHeader> 이벤트입니다.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ListView.DrawSubItem> 되지 않은 하위 항목에 대 한 이벤트가 발생 하지 않는 <xref:System.Windows.Forms.ColumnHeader> 에 추가 된 개체는 <xref:System.Windows.Forms.ListView.Columns%2A> 컬렉션입니다. 이때 또한 각각의 첫 번째 하위 <xref:System.Windows.Forms.ListViewItem> 개체 부모 항목 자체를 나타내며 첫 번째 열에 표시 됩니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는의 구현을 제공는 <xref:System.Windows.Forms.ListView.DrawSubItem> 이벤트 처리기입니다. 전체 예제를 참조 하십시오.는 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> 참조 항목입니다.  
  
 [!code-csharp[ListViewOwnerDraw#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#4)]
 [!code-vb[ListViewOwnerDraw#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.EndUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUpdate();" />
      <MemberSignature Language="F#" Value="member this.EndUpdate : unit -&gt; unit" Usage="listView.EndUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resumes drawing of the list view control after drawing is suspended by the <see cref="M:System.Windows.Forms.ListView.BeginUpdate" /> method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 여러 항목을 추가 하는 것이 좋습니다는 <xref:System.Windows.Forms.ListView> 사용 하는 것의 <xref:System.Windows.Forms.ListView.ListViewItemCollection.AddRange%2A> 의 메서드는 <xref:System.Windows.Forms.ListView.ListViewItemCollection> (통해 액세스는 <xref:System.Windows.Forms.ListView.Items%2A> 속성의는 <xref:System.Windows.Forms.ListView>). 이 항목의 배열을 한 번의 작업 목록에 추가할 수 있습니다. 하지만 추가 하려는 항목을 사용 하 여 한 번에 하나씩는 <xref:System.Windows.Forms.ListView.ListViewItemCollection.Add%2A> 의 메서드는 <xref:System.Windows.Forms.ListView.ListViewItemCollection> 사용할 수 있습니다 클래스는 <xref:System.Windows.Forms.ListView.BeginUpdate%2A> 컨트롤 다시 칠하지 않으려면 메서드는 <xref:System.Windows.Forms.ListView> 항목이 추가 될 때마다 합니다. 컨트롤에 항목을 추가 작업을 완료 했으면, 호출는 <xref:System.Windows.Forms.ListView.EndUpdate%2A> 메서드를 사용 하도록 설정 된 <xref:System.Windows.Forms.ListView> 다시 그려야 합니다. 이 방법으로 항목의 그리기 추가 <xref:System.Windows.Forms.ListView> 많은 수의 항목은 컨트롤에 추가 될 때입니다.  
  
 경우 <xref:System.Windows.Forms.ListView.BeginUpdate%2A> 두 번 이상 라고 <xref:System.Windows.Forms.ListView.EndUpdate%2A> 해당 하는 횟수를 호출 해야 합니다. 에 대 한 마지막 호출 될 때까지 <xref:System.Windows.Forms.ListView.EndUpdate%2A> 는 <xref:System.Windows.Forms.ListView> 이 그려집니다. 이 이외의 여러 번 호출 <xref:System.Windows.Forms.ListView.BeginUpdate%2A> 영향을 주지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 초기화 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.ListView> 확인란을 포함 하도록 제어 합니다. 사용 하는 방법도 보여 줍니다는 <xref:System.Windows.Forms.ListView.BeginUpdate%2A> 및 <xref:System.Windows.Forms.ListView.EndUpdate%2A> 메서드. 이 예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여넣습니다는 <xref:System.Windows.Forms.ListView> 라는 `ListView1`합니다. 호출 된 `InititalizeListView` 폼의 생성자에서 메서드 또는 `Load` 메서드.  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.BeginUpdate" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EnsureVisible">
      <MemberSignature Language="C#" Value="public void EnsureVisible (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureVisible(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnsureVisible (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnsureVisible(int index);" />
      <MemberSignature Language="F#" Value="member this.EnsureVisible : int -&gt; unit" Usage="listView.EnsureVisible index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the item to scroll into view.</param>
        <summary>Ensures that the specified item is visible within the control, scrolling the contents of the control if necessary.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하 여 특정 항목 내에서 표시 되는지 확인 하는 <xref:System.Windows.Forms.ListView> 제어 합니다. 항목에 대해 유효성 검사를 수행 하는 경우는 <xref:System.Windows.Forms.ListView>, 호출할 수 있습니다는 <xref:System.Windows.Forms.ListView.EnsureVisible%2A> 유효성 검사에 실패 하는 항목에 표시 되는지 확인 하는 메서드는 <xref:System.Windows.Forms.ListView> 컨트롤을 사용자가 항목에 변경 내용을 수행 하도록 허용 합니다. 확인 하려는 항목을 표시 하는 경우는의 표시 가능 영역 위에 <xref:System.Windows.Forms.ListView> 컨트롤을 호출 하는 <xref:System.Windows.Forms.ListView.EnsureVisible%2A> 컨트롤의 표시 가능 영역의 첫 번째 항목 될 때까지 메서드는 컨트롤의 콘텐츠를 스크롤입니다. 항목의 표시 가능 영역 아래에 있으면는 <xref:System.Windows.Forms.ListView> 컨트롤을 호출 하는 <xref:System.Windows.Forms.ListView.EnsureVisible%2A> 메서드의 콘텐츠를 스크롤는 <xref:System.Windows.Forms.ListView> 될 컨트롤의 표시 가능 영역의 마지막 항목을 제어 합니다.  
  
 항목의 표시 영역 위쪽에 있는 인지 확인 하는 <xref:System.Windows.Forms.ListView> 컨트롤을 사용 하 여는 <xref:System.Windows.Forms.ListView.TopItem%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.TopItem" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindItemWithText">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Finds the first <see cref="T:System.Windows.Forms.ListViewItem" /> with that begins with the given text value.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.FindItemWithText : string -&gt; System.Windows.Forms.ListViewItem" Usage="listView.FindItemWithText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text to search for.</param>
        <summary>Finds the first <see cref="T:System.Windows.Forms.ListViewItem" /> that begins with the specified text value.</summary>
        <returns>The first <see cref="T:System.Windows.Forms.ListViewItem" /> that begins with the specified text value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 검색은 대/소문자를 구분합니다.  
  
 `text` 매개 변수는 일치 하는 텍스트의 부분 문자열을 지정할 수 있습니다. 또한이 메서드는 지정 된 텍스트로 시작 하는 첫 번째 항목을 반환 합니다. 예를 들어 경우는 <xref:System.Windows.Forms.ListView> 두 목록 항목이-"꺾쇠 괄호"와 두 번째 항목의 텍스트를 설정 하는 첫 번째 항목의 텍스트 "bracket"로 설정-에 대 한 호출 <xref:System.Windows.Forms.ListView.FindItemWithText%2A> 전달 `brack` 매개 변수는 해당 텍스트는 "bracket" 항목을 반환 합니다.  
  
 <xref:System.Windows.Forms.ListView.FindItemWithText%2A> 메서드 반환 `null` 목록 비어 있거나 일치 하는 항목이 없습니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Windows.Forms.ListView.FindItemWithText%2A> 메서드. 이 예제를 실행 하려면 Windows Form과 호출에 다음 코드를 붙여넣습니다는 `InitializeFindListView` 폼의 생성자에서 메서드 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리기입니다. 메서드 호출의 결과 표시 하려면 단추를 클릭 합니다.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String, includeSubItemsInSearch As Boolean, startIndex As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text, bool includeSubItemsInSearch, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.FindItemWithText : string * bool * int -&gt; System.Windows.Forms.ListViewItem" Usage="listView.FindItemWithText (text, includeSubItemsInSearch, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">The text to search for.</param>
        <param name="includeSubItemsInSearch">
          <see langword="true" /> to include subitems in the search; otherwise, <see langword="false" />.</param>
        <param name="startIndex">The index of the item at which to start the search.</param>
        <summary>Finds the first <see cref="T:System.Windows.Forms.ListViewItem" /> or <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />, if indicated, that begins with the specified text value. The search starts at the specified index.</summary>
        <returns>The first <see cref="T:System.Windows.Forms.ListViewItem" /> that begins with the specified text value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 검색은 대/소문자를 구분합니다.  
  
 `text` 매개 변수는 일치 하는 텍스트의 부분 문자열을 지정할 수 있습니다. 또한이 메서드는 지정 된 텍스트로 시작 하는 첫 번째 항목을 반환 합니다. 예를 들어 경우는 <xref:System.Windows.Forms.ListView> 두 목록 항목이-"꺾쇠 괄호"와 두 번째 항목의 텍스트를 설정 하는 첫 번째 항목의 텍스트 "bracket"로 설정-에 대 한 호출 <xref:System.Windows.Forms.ListView.FindItemWithText%2A> 전달 "brack" 매개 변수 항목이 텍스트가 반환 됩니다는 "bracket"입니다.  
  
 <xref:System.Windows.Forms.ListView.FindItemWithText%2A> 메서드 반환 `null` 목록 비어 있거나 일치 하는 항목이 없습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is less 0 or more than the number items in the <see cref="T:System.Windows.Forms.ListView" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int32 startIndex, bool isPrefixSearch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String,System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String, includeSubItemsInSearch As Boolean, startIndex As Integer, isPrefixSearch As Boolean) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);" />
      <MemberSignature Language="F#" Value="member this.FindItemWithText : string * bool * int * bool -&gt; System.Windows.Forms.ListViewItem" Usage="listView.FindItemWithText (text, includeSubItemsInSearch, startIndex, isPrefixSearch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="isPrefixSearch" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">The text to search for.</param>
        <param name="includeSubItemsInSearch">
          <see langword="true" /> to include subitems in the search; otherwise, <see langword="false" />.</param>
        <param name="startIndex">The index of the item at which to start the search.</param>
        <param name="isPrefixSearch">
          <see langword="true" /> to allow partial matches; otherwise, <see langword="false" />.</param>
        <summary>Finds the first <see cref="T:System.Windows.Forms.ListViewItem" /> or <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />, if indicated, that begins with the specified text value. The search starts at the specified index.</summary>
        <returns>The first <see cref="T:System.Windows.Forms.ListViewItem" /> that begins with the specified text value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FindItemWithText%2A> 메서드 반환 `null` 목록 비어 있거나 일치 하는 항목이 없습니다.  
  
 검색은 대/소문자를 구분합니다.  
  
 `text` 매개 변수는 일치 하는 텍스트의 부분 문자열을 지정할 수 있습니다. 이 메서드는 지정 된 텍스트로 시작 하는 첫 번째 항목을 반환 하지 않는 한 `false` 가 전달 `isPrefixSearch`합니다. 예를 들어 경우는 <xref:System.Windows.Forms.ListView> 두 목록 항목이-"꺾쇠 괄호"와 두 번째 항목의 텍스트를 설정 하는 첫 번째 항목의 텍스트 "bracket"로 설정-에 대 한 호출 <xref:System.Windows.Forms.ListView.FindItemWithText%2A> 전달 "brack" 검색 텍스트는 항목을 반환 하는 텍스트의는 "bracket"입니다. 경우 `isPrefixSearch` 로 설정 된 `false`,이 호출은 반환 합니다 `null`합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is less than 0 or more than the number of items in the <see cref="T:System.Windows.Forms.ListView" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindNearestItem">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Finds the next item from a given point, searching in the specified direction.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint dir, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindNearestItem(valuetype System.Windows.Forms.SearchDirectionHint dir, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindNearestItem(System::Windows::Forms::SearchDirectionHint dir, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.FindNearestItem : System.Windows.Forms.SearchDirectionHint * System.Drawing.Point -&gt; System.Windows.Forms.ListViewItem" Usage="listView.FindNearestItem (dir, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="dir">One of the <see cref="T:System.Windows.Forms.SearchDirectionHint" /> values.</param>
        <param name="point">The point at which to begin searching.</param>
        <summary>Finds the next item from the given point, searching in the specified direction</summary>
        <returns>The <see cref="T:System.Windows.Forms.ListViewItem" /> that is closest to the given point, searching in the specified direction.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FindNearestItem%2A> 메서드 반환 `null` 지정 방향에서 항목이 없는 경우. 응용 프로그램이 실행 중인 운영 체제에 따라 가장 가까운 항목을 식별 및 결과 영향을 줍니다 <xref:System.Windows.Forms.ListView.FindNearestItem%2A>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.View" /> is set to a value other than <see cref="F:System.Windows.Forms.View.SmallIcon" /> or <see cref="F:System.Windows.Forms.View.LargeIcon" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint searchDirection, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindNearestItem(valuetype System.Windows.Forms.SearchDirectionHint searchDirection, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindNearestItem (searchDirection As SearchDirectionHint, x As Integer, y As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindNearestItem(System::Windows::Forms::SearchDirectionHint searchDirection, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.FindNearestItem : System.Windows.Forms.SearchDirectionHint * int * int -&gt; System.Windows.Forms.ListViewItem" Usage="listView.FindNearestItem (searchDirection, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchDirection" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="searchDirection">One of the <see cref="T:System.Windows.Forms.SearchDirectionHint" /> values.</param>
        <param name="x">The x-coordinate for the point at which to begin searching.</param>
        <param name="y">The y-coordinate for the point at which to begin searching.</param>
        <summary>Finds the next item from the given x- and y-coordinates, searching in the specified direction.</summary>
        <returns>The <see cref="T:System.Windows.Forms.ListViewItem" /> that is closest to the given coordinates, searching in the specified direction.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FindNearestItem%2A> 메서드 반환 `null` 지정 방향에서 항목이 없는 경우. 응용 프로그램이 실행 중인 운영 체제에 따라 가장 가까운 항목을 식별 및 결과 영향을 줍니다 <xref:System.Windows.Forms.ListView.FindNearestItem%2A>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.View" /> is set to a value other than <see cref="F:System.Windows.Forms.View.SmallIcon" /> or <see cref="F:System.Windows.Forms.View.LargeIcon" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FocusedItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FocusedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewItem FocusedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.FocusedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusedItem As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewItem ^ FocusedItem { System::Windows::Forms::ListViewItem ^ get(); void set(System::Windows::Forms::ListViewItem ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FocusedItem : System.Windows.Forms.ListViewItem with get, set" Usage="System.Windows.Forms.ListView.FocusedItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the item in the control that currently has focus.</summary>
        <value>A <see cref="T:System.Windows.Forms.ListViewItem" /> 없이 포커스가 있는 항목을 나타내는 또는 <see langword="null" /> 항목이에서 포커스가 있는 경우는 <see cref="T:System.Windows.Forms.ListView" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FocusedItem%2A> 속성에서 반환 된 <xref:System.Windows.Forms.ListViewItem> 현재에 대 한 포커스 영역을 표시 하는 항목을 나타내는 <xref:System.Windows.Forms.ListView> 제어 합니다. 때문에 <xref:System.Windows.Forms.ListView> 컨트롤에 직접 편집할 수 없는 영역에 표시 되는 항목을 제외 때는 <xref:System.Windows.Forms.ListView> 컨트롤에 포커스가 내의 항목은 <xref:System.Windows.Forms.ListView> 포커스 십자선 주위에 표시 됩니다. 일반적으로 마지막 선택 항목에는 <xref:System.Windows.Forms.ListView> 컨트롤에 포커스가 있는 항목입니다. 항목 표시 포커스 십자선을 수 있지만 실제로 아닐에서 선택한 항목의 <xref:System.Windows.Forms.ListView>합니다. 사용 하 여는 <xref:System.Windows.Forms.ListView.SelectedItems%2A> 또는 <xref:System.Windows.Forms.ListView.SelectedIndices%2A> 속성에서 선택한 항목을는 <xref:System.Windows.Forms.ListView> 컨트롤은 <xref:System.Windows.Forms.ListView.FocusedItem%2A> 속성을 반드시 선택 되지 않습니다. 사용할 수는 <xref:System.Windows.Forms.ListView.FocusedItem%2A> 에서 마지막 항목을 확인 하려면 속성 클릭는 <xref:System.Windows.Forms.ListView> 선택 상태에 관계 없이 제어 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListView.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the foreground color.</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> 전경색입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullRowSelect">
      <MemberSignature Language="C#" Value="public bool FullRowSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FullRowSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.FullRowSelect" />
      <MemberSignature Language="VB.NET" Value="Public Property FullRowSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FullRowSelect { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.FullRowSelect : bool with get, set" Usage="System.Windows.Forms.ListView.FullRowSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether clicking an item selects all its subitems.</summary>
        <value>
          <see langword="true" /> 항목 및 해당 하위 항목; 선택 항목을 클릭 하는 경우 <see langword="false" /> 항목을 클릭 하 여 항목 자체를 선택 하는 경우. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FullRowSelect%2A> 속성 효과가 <xref:System.Windows.Forms.ListView.View%2A> 속성은 <xref:System.Windows.Forms.ListView> 로 설정 되어 <xref:System.Windows.Forms.View.Details>합니다. <xref:System.Windows.Forms.ListView.FullRowSelect%2A> 속성은 일반적으로 때 사용 되는 <xref:System.Windows.Forms.ListView> 많은 하위 항목으로 항목을 표시 합니다.이 있는 항목 텍스트의 가로 스크롤을 컨트롤의 내용으로 인해 볼 수 없는 경우 선택한 항목을 볼 수 중요 합니다.  
  
> [!NOTE]
>  때 <xref:System.Windows.Forms.ListView.FullRowSelect%2A> 로 설정 된 `true`, 도구 설명에 대 한는 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> 표시 되지 것입니다; 부모에 대 한 도구 설명만 <xref:System.Windows.Forms.ListViewItem> 표시 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 한 <xref:System.Windows.Forms.ListView> 3 개 컨트롤 <xref:System.Windows.Forms.ListViewItem> 지정 된 개체 및 3 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> 각 항목에 대해 지정 된 개체입니다. 예제에서는 <xref:System.Windows.Forms.ColumnHeader> 자세히 보기의 하위 항목을 표시 하는 개체입니다. 두 개의 <xref:System.Windows.Forms.ImageList> 개체에 대 한 이미지를 제공 하는 코드 예제에서는 만들어집니다는 <xref:System.Windows.Forms.ListViewItem> 개체입니다. 이러한 <xref:System.Windows.Forms.ImageList> 개체에 추가 되는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성입니다. 이 예제에서는 만들기에서 다음 속성을 사용 하 여는 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 이 예제에서는 코드를 추가 했는지는 <xref:System.Windows.Forms.Form> 생성자 나 폼에서 다른 방법의 예제에서 만든 메서드를 호출 합니다. 이 예제는 또한 라는 이미지가에서는 `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, 및 `MyLargeImage2` C 드라이브의 루트 디렉터리에 있는  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="F:System.Windows.Forms.View.Details" />
      </Docs>
    </Member>
    <Member MemberName="GetItemAt">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem GetItemAt (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem GetItemAt(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemAt(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemAt (x As Integer, y As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ GetItemAt(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.GetItemAt : int * int -&gt; System.Windows.Forms.ListViewItem" Usage="listView.GetItemAt (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The x-coordinate of the location to search for an item (expressed in client coordinates).</param>
        <param name="y">The y-coordinate of the location to search for an item (expressed in client coordinates).</param>
        <summary>Retrieves the item at the specified location.</summary>
        <returns>A <see cref="T:System.Windows.Forms.ListViewItem" /> that represents the item at the specified position. If there is no item at the specified location, the method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.GetItemAt%2A> 메서드를 사용 하면의 클라이언트 영역 내에서 특정 위치에 있는 항목을 확인할 수는 <xref:System.Windows.Forms.ListView> 제어 합니다. 사용자가 클릭 하거나 하위 항목을 마우스 오른쪽 단추로 클릭할 때이 메서드를 사용할 수 있습니다 (때는 <xref:System.Windows.Forms.ListView.View%2A> 속성이로 설정 되어 `View.Details`) 사용자가 마우스 클릭 한 번에 마우스 좌표에 따라 하위 항목 클릭 된을 소유 하는 항목을 확인 하려면 .  
  
> [!NOTE]
>  경우는 <xref:System.Windows.Forms.ListView.FullRowSelect%2A> 속성 값은 `false`,이 메서드는 지정된 된 위치 (때 표시 되는 첫 번째 열에는 컨트롤은 세부 정보 모드)은 부모 항목의 경계에 있을 경우에 항목을 반환 합니다. 설정 해야 합니다는 <xref:System.Windows.Forms.ListView.FullRowSelect%2A> 속성을 `true` 를 하위 항목의 범위 내에서 위치를 받아야 하는이 방법으로 항목을 검색 합니다. 사용할 수도 있습니다는 <xref:System.Windows.Forms.ListView.HitTest%2A> 특정 위치에 있는 항목에 대 한 자세한 정보를 검색 하는 메서드입니다.  
  
 내에서 항목의 위치를 바꿀 끌어서 놓기 작업을 수행 하는 <xref:System.Windows.Forms.ListView>, 사용 하려는 경우도 <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A?displayProperty=nameWithType> 메서드 보다는 <xref:System.Windows.Forms.ListView.GetItemAt%2A> 메서드. <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A?displayProperty=nameWithType> 메서드 마우스 포인터 위치에 관계 없이 가장 가까운 항목을 찾습니다. <xref:System.Windows.Forms.ListView.GetItemAt%2A> 메서드, 반면에 반환 `null` 경우 지정된 된 위치에 있는 항목이 없습니다.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ListViewInsertionMark> 클래스는 응용 프로그램에서 호출 하는 경우 Windows XP 및 Windows Server 2003에만 지원 됩니다는 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.PictureBox> 및 <xref:System.Windows.Forms.ListView> 컨트롤입니다. <xref:System.Windows.Forms.PictureBox> 설정 하 여 초기화 되는 <xref:System.Windows.Forms.PictureBox.BorderStyle%2A?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.PictureBox.SizeMode%2A?displayProperty=nameWithType> 사용 하 여 속성의 <xref:System.Windows.Forms.BorderStyle> 및 <xref:System.Windows.Forms.PictureBoxSizeMode> 열거형 각각. <xref:System.Windows.Forms.ListView> 예제 디렉터리에서 사진으로 채워집니다. <xref:System.Windows.Forms.ListView.GetItemAt%2A> 메서드 처리할 때 사용 되는 <xref:System.Windows.Forms.ListView> 컨트롤의 <xref:System.Windows.Forms.Control.MouseDown> 항목이 선택 되어 있는지 여부를 결정 하기 위해 이벤트입니다. 이벤트 처리기를 설정 하 여 선택한 파일을 나타내는 항목을 선택 하는 경우는 <xref:System.Windows.Forms.PictureBox.Image%2A?displayProperty=nameWithType> 속성입니다. 이 예제에서는 JPG 파일은 C:\documents and Settings\All Users\Documents\My Pictures\Sample Pictures 디렉터리에 존재를 해야 합니다. 이 예제를 실행 하려면 폼 호출에 코드를 붙여넣습니다는 `InitializePictureBox` 및 `PopulateListView` 폼의 생성자의 메서드 또는 `Load` 메서드. 모든 이벤트가 해당 이벤트 처리기와 연결 되어 있는지 확인 합니다.  
  
 [!code-cpp[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
        <altmember cref="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
        <altmember cref="T:System.Windows.Forms.ListViewInsertionMark" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetItemRect">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retrieves the bounding rectangle for an item within the control.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRect(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemRect(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRect (index As Integer) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRect(int index);" />
      <MemberSignature Language="F#" Value="member this.GetItemRect : int -&gt; System.Drawing.Rectangle" Usage="listView.GetItemRect index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the item within the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> whose bounding rectangle you want to return.</param>
        <summary>Retrieves the bounding rectangle for a specific item within the list view control.</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounding rectangle of the specified <see cref="T:System.Windows.Forms.ListViewItem" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 버전의에서 반환 되는 경계 사각형은 <xref:System.Windows.Forms.ListView.GetItemRect%2A> 메서드 아이콘, 항목 텍스트 및 하위 항목 텍스트를 포함 하 여 전체 항목을 나타냅니다. 경계 사각형 항목의 특정 부분을 지정 하려면 다른 버전의 사용은 <xref:System.Windows.Forms.ListView.GetItemRect%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
      </Docs>
    </Member>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index, System.Windows.Forms.ItemBoundsPortion portion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRect(int32 index, valuetype System.Windows.Forms.ItemBoundsPortion portion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemRect(System.Int32,System.Windows.Forms.ItemBoundsPortion)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRect (index As Integer, portion As ItemBoundsPortion) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRect(int index, System::Windows::Forms::ItemBoundsPortion portion);" />
      <MemberSignature Language="F#" Value="member this.GetItemRect : int * System.Windows.Forms.ItemBoundsPortion -&gt; System.Drawing.Rectangle" Usage="listView.GetItemRect (index, portion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="portion" Type="System.Windows.Forms.ItemBoundsPortion" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the item within the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> whose bounding rectangle you want to return.</param>
        <param name="portion">One of the <see cref="T:System.Windows.Forms.ItemBoundsPortion" /> values that represents a portion of the <see cref="T:System.Windows.Forms.ListViewItem" /> for which to retrieve the bounding rectangle.</param>
        <summary>Retrieves the specified portion of the bounding rectangle for a specific item within the list view control.</summary>
        <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounding rectangle for the specified portion of the specified <see cref="T:System.Windows.Forms.ListViewItem" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 버전의에서 반환 되는 경계 사각형은 <xref:System.Windows.Forms.ListView.GetItemRect%2A> 메서드에 지정 된 항목의 일부만 나타냅니다는 `portion` 매개 변수입니다. 전체 항목의 경계 사각형을 반환 하려면 다른 버전의 사용은 <xref:System.Windows.Forms.ListView.GetItemRect%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="T:System.Windows.Forms.ItemBoundsPortion" />
      </Docs>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public bool GridLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GridLines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.GridLines" />
      <MemberSignature Language="VB.NET" Value="Public Property GridLines As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GridLines { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.GridLines : bool with get, set" Usage="System.Windows.Forms.ListView.GridLines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether grid lines appear between the rows and columns containing the items and subitems in the control.</summary>
        <value>
          <see langword="true" /> 항목 및 하위 항목 주위에 모눈선 그려질 경우 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.GridLines%2A> 속성 효과가 <xref:System.Windows.Forms.ListView.View%2A> 속성은 <xref:System.Windows.Forms.ListView> 로 설정 되어 <xref:System.Windows.Forms.View.Details>합니다. <xref:System.Windows.Forms.ListView.GridLines%2A> 속성을 사용 하면 행 및 열에 표시 되는 식별 하는 줄을 표시 하는 <xref:System.Windows.Forms.ListView> 항목과 하위 항목이 표시 될 때 제어 합니다. 눈금선 표시 되는 Microsoft Excel의 경우와 같은 응용 프로그램으로 행과 열을 조정 하는 기능을 제공 하지 않습니다. 마우스 포인터의 크기를 조정할 열의 왼쪽에서 오른쪽으로 이동 하 고 다음 클릭 하 고 끌어서 열 원하는 크기가 될 때까지 열 머리글이 표시 되 면 열만 조정할 수 있습니다. 모눈선 기능은 항목과 하위 항목 주위 경계를 표시 하는 컨트롤의 사용자를 제공 하기 위해 사용 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 한 <xref:System.Windows.Forms.ListView> 3 개 컨트롤 <xref:System.Windows.Forms.ListViewItem> 지정 된 개체 및 3 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> 각 항목에 대해 지정 된 개체입니다. 예제에서는 <xref:System.Windows.Forms.ColumnHeader> 자세히 보기의 하위 항목을 표시 하는 개체입니다. 두 개의 <xref:System.Windows.Forms.ImageList> 개체에 대 한 이미지를 제공 하는 코드 예제에서는 만들어집니다는 <xref:System.Windows.Forms.ListViewItem> 개체입니다. 이러한 <xref:System.Windows.Forms.ImageList> 개체에 추가 되는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성입니다. 이 예제에서는 만들기에서 다음 속성을 사용 하 여는 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 이 예제에서는 코드를 추가 했는지는 <xref:System.Windows.Forms.Form> 생성자 나 폼에서 다른 방법의 예제에서 만든 메서드를 호출 합니다. 이 예제는 또한 라는 이미지가에서는 `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, 및 `MyLargeImage2` C 드라이브의 루트 디렉터리에 있는  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewGroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewGroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Groups" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Groups As ListViewGroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewGroupCollection ^ Groups { System::Windows::Forms::ListViewGroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Windows.Forms.ListViewGroupCollection" Usage="System.Windows.Forms.ListView.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewGroupCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewGroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of <see cref="T:System.Windows.Forms.ListViewGroup" /> objects assigned to the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.ListViewGroupCollection" /> 에 있는 모든 그룹을 포함 하는 <see cref="T:System.Windows.Forms.ListView" /> 제어 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView> 그룹화 기능을 논리적으로 관련 된 시각적 그룹을 만들 수 있습니다 <xref:System.Windows.Forms.ListView> 항목입니다. 각 그룹의 텍스트 헤더 가로 줄 다음에 오는 및 해당 그룹에 할당 된 항목으로 구성 됩니다. 헤더 텍스트를 왼쪽, 오른쪽 또는 컨트롤의 중심을 맞출 수 있습니다. 모든 그룹에 할당 한 <xref:System.Windows.Forms.ListView> 컨트롤이 표시 될 때마다는 <xref:System.Windows.Forms.ListView.View%2A> 속성 이외의 값으로 설정 됩니다 <xref:System.Windows.Forms.View.List?displayProperty=nameWithType>합니다.  
  
 <xref:System.Windows.Forms.ListView> 그룹에는 사용자가 항목의 유용한 범주를 분리 하 여 원하는 항목을 찾는 데 유용 합니다. 필요한 모든 범주를 만들 수 있습니다. 일반적인 방법은 목록을 정렬 방식에 따라 항목을 그룹화 합니다. 예를 들어 목록은 사전순 또는 하위 항목 유형 목록을 자세히 보기에서 열 머리글을 클릭 하 여 정렬 한 경우 날짜 등을 기준으로 정렬 됩니다 때 항목 이름의 첫 글자를 기준는 항목을 그룹화 할 수 있습니다. Windows 탐색기에서이 유형의 그룹화를 사용 합니다.  
  
 그룹화 기능을 사용 하려면 하나 이상의 추가 <xref:System.Windows.Forms.ListViewGroup> 개체를 <xref:System.Windows.Forms.ListView.Groups%2A> 의 컬렉션을 <xref:System.Windows.Forms.ListView> 제어 합니다. 그룹 머리글 텍스트와 헤더 맞춤 설정는 <xref:System.Windows.Forms.ListViewGroup.%23ctor%2A> 생성자, 속성을 설정 하거나 사용 하 여는 <xref:System.Windows.Forms.ListViewGroup.Header%2A?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.ListViewGroup.HeaderAlignment%2A?displayProperty=nameWithType> 속성.  
  
 그룹화 기능을 일시적으로 해제 하려면 설정는 <xref:System.Windows.Forms.ListView.ShowGroups%2A> 속성을 `false`합니다.  
  
 그룹을 지정 하 여 항목 그룹에 할당할 수 있습니다는 <xref:System.Windows.Forms.ListViewItem.%23ctor%2A> 설정 하 여 생성자는 <xref:System.Windows.Forms.ListViewItem.Group%2A?displayProperty=nameWithType> 속성을 직접 항목을 추가 하 여는 <xref:System.Windows.Forms.ListViewGroup.Items%2A?displayProperty=nameWithType> 그룹의 컬렉션입니다. 모든 항목 표시 하기 전에 그룹에 할당 해야 합니다. 그룹에 할당 되지 않은 모든 항목 머리글 레이블이 있는 기본 그룹에 나타납니다. "DefaultGroup{0}"입니다. 기본 그룹에 포함 되지 않은 <xref:System.Windows.Forms.ListView.Groups%2A> 컬렉션을 변경할 수 없습니다. 모든 항목이 있는 그룹에 제대로 추가 되었는지 확인 하는 디버깅에 주로 유용 합니다.  
  
 한 번에 하나의 그룹에 있는 항목 수만 있습니다. 항목을 설정 하 여 속해 있는 그룹을 변경할 수 있습니다는 <xref:System.Windows.Forms.ListViewItem.Group%2A?displayProperty=nameWithType> 실행 시 또는 추가 하 여 속성의 <xref:System.Windows.Forms.ListViewGroup.Items%2A?displayProperty=nameWithType> 이전 그룹에서 자동으로 제거 하는 다른 그룹의 컬렉션입니다.  
  
 그룹을 사용 하는 경우 삽입 표시 기능은 비활성화 됩니다. 삽입 표시 기능은에서 끌어서 놓기 위치를 사용 하는 동안 그룹 구성원 자격으로 항목을 정렬 하는 그룹화 기능 때문에 이것이 <xref:System.Windows.Forms.ListView> 항목이 아직 정렬 하지 않는 제어 합니다.  
  
 <xref:System.Windows.Forms.ListView> 응용 프로그램 그룹은 Windows XP 및 Windows Server 2003에만 사용할 수는 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> 메서드. 이전 버전의 운영 체제 그룹과 관련 된 코드가 아무 효과도 없습니다 및 그룹이 표시 되지 않습니다. 결과적으로, 그룹화 기능을 사용 하는 코드가 제대로 작동 하지 수도 있습니다.  
  
 그룹화 기능을 사용할 수 있는지 여부를 확인 하는 코드를 포함할 수도 있으며, 사용할 수 없는 경우 대체 기능을 제공할 수 있습니다. 예를 들어 다음 그룹으로 정렬 하는 것을 지원 하지 않는 운영 체제에서 실행 하는 경우 대체 정렬을 제공 하는 것이 좋습니다.  
  
 그룹화 기능은 운영 체제 테마 기능을 제공 하는 라이브러리에서 제공 됩니다. 이 라이브러리의 가용성을 확인 하려면 호출는 <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> 메서드 오버 로드를 전달은 <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> 값입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.ListView> 그룹화 기능 항목 세부 정보 보기에서 하위 항목 값으로 구성할 수 있습니다. 이러한 형식의 그룹화 Windows 탐색기에서 사용 되는 그룹화 하는 것과 비슷합니다. 예제에서는 그룹 동적으로 생성 됩니다. 각 하위 항목 열에 대해 하나의 그룹은 각 고유 하위 항목 값에 대해 만들어집니다. 부모 항목 열에 대 한 하나의 그룹은 각 고유 초기 문자에 대해 만들어집니다. 열 머리글을 클릭 하면 해당 열에 대해 만든 그룹으로 항목을 정렬 합니다. 동일한 열 머리글을 다시 클릭 하면 그룹의 순서를 반대로 바꿉니다.  
  
 [!code-cpp[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/CPP/listviewgroupsexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/CS/listviewgroupsexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/VB/listviewgroupsexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewGroup" />
        <altmember cref="T:System.Windows.Forms.ListViewGroupCollection" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="P:System.Windows.Forms.ListView.ShowGroups" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ColumnHeaderStyle HeaderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ColumnHeaderStyle HeaderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HeaderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property HeaderStyle As ColumnHeaderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ColumnHeaderStyle HeaderStyle { System::Windows::Forms::ColumnHeaderStyle get(); void set(System::Windows::Forms::ColumnHeaderStyle value); };" />
      <MemberSignature Language="F#" Value="member this.HeaderStyle : System.Windows.Forms.ColumnHeaderStyle with get, set" Usage="System.Windows.Forms.ListView.HeaderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnHeaderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the column header style.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ColumnHeaderStyle" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Windows.Forms.ColumnHeaderStyle.Clickable" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> 속성을 표시할 때 열 머리글의 형식을 지정할 수 있습니다는 <xref:System.Windows.Forms.ListView.View%2A> 의 속성은 <xref:System.Windows.Forms.ListView> 로 설정 되어 <xref:System.Windows.Forms.View.Details> 및 <xref:System.Windows.Forms.ListView> 컨트롤에 <xref:System.Windows.Forms.ColumnHeader> 는 에지정된개체<xref:System.Windows.Forms.ListView.ColumnHeaderCollection>. <xref:System.Windows.Forms.ColumnHeader> 에 표시 되는 열을 정의 하는 개체는 <xref:System.Windows.Forms.ListView> 제어 합니다. 사용할 각 열에 있는 각 항목에 대 한 하위 항목 정보를 표시 하는 <xref:System.Windows.Forms.ListView>합니다.  
  
 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> 속성을 사용 하면 열 머리글이 표시 되는지 여부를 표시 되어 있으면 작동할지 클릭할 수 있는 단추로 지정할 수 있습니다. 경우는 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> 속성이 <xref:System.Windows.Forms.ColumnHeaderStyle.None?displayProperty=nameWithType>, 열 머리글은 표시 되지 않지만 항목 및 하위 항목의는 <xref:System.Windows.Forms.ListView> 열에서 컨트롤 정렬 됩니다. 경우는 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> 속성이 <xref:System.Windows.Forms.ColumnHeaderStyle.Clickable?displayProperty=nameWithType>, 열 머리글의 항목 정렬 등의 작업을 수행 하려면 사용자가 클릭할 수 있는 단추 처럼 동작는 <xref:System.Windows.Forms.ListView> 클릭 한 열 항목을 사용 하는 키로 제어 합니다. 에 대 한 처리기에서이 동작을 구현할 수는 <xref:System.Windows.Forms.ListView.ColumnClick> 이벤트입니다. 경우는 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> 속성이 <xref:System.Windows.Forms.ColumnHeaderStyle.Nonclickable?displayProperty=nameWithType>, 열 머리글 나타나지만 클릭할 수는 없습니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Windows.Forms.ListView> 여러 항목을 선택할 수 있도록 합니다. 예제 설정에는 <xref:System.Windows.Forms.ListView.HideSelection%2A> 및 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> 속성입니다. 에 대해서도 설명는 <xref:System.Windows.Forms.ColumnHeader.Text%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.ColumnHeader.TextAlign%2A?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.ColumnHeader.Width%2A?displayProperty=nameWithType> 속성입니다. 이 예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여넣습니다는 <xref:System.Windows.Forms.ListView> 라는 개체 `ListView1` 및 <xref:System.Windows.Forms.TextBox> 라는 `TextBox1`합니다. 호출 된 `InitializeListView` 폼의 생성자에서 메서드 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리기입니다.  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is not one of the <see cref="T:System.Windows.Forms.ColumnHeaderStyle" /> values.</exception>
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
        <altmember cref="T:System.Windows.Forms.ColumnHeaderStyle" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="HideSelection">
      <MemberSignature Language="C#" Value="public bool HideSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HideSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HideSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property HideSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HideSelection { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HideSelection : bool with get, set" Usage="System.Windows.Forms.ListView.HideSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the selected item in the control remains highlighted when the control loses focus.</summary>
        <value>
          <see langword="true" /> 선택한 항목 표시 되지 않으면 강조 표시 된 컨트롤이 포커스를 잃을 때 <see langword="false" /> 선택한 항목에도 강조 표시 된 나타나는 경우 때 컨트롤이 포커스를 잃을 합니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 로이 속성이 설정 된 경우 `false`, 선택한 항목에는 <xref:System.Windows.Forms.ListView> 컨트롤이 유지 운영 체제에서 지정한 현재 선택 영역 색 보다 다른 색으로 강조 표시 된 때는 <xref:System.Windows.Forms.ListView> 컨트롤이 포커스를 잃을 합니다. 폼에서 다른 컨트롤을 클릭 하거나 다른 컨트롤을 이동할 때 표시 되는 사용자가 선택한 항목을 변경 하지 않으려면이 속성을 사용할 수 있습니다.  
  
> [!NOTE]
>  경우 응용 프로그램의 액세스 고려 하는 것이 좋습니다 설정 하는 <xref:System.Windows.Forms.ListView.HideSelection%2A> 속성을 `false`합니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Windows.Forms.ListView> 여러 항목을 선택할 수 있도록 합니다. 예제 설정에는 <xref:System.Windows.Forms.ListView.HideSelection%2A> 및 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> 속성입니다. 에 대해서도 설명는 <xref:System.Windows.Forms.ColumnHeader.Text%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.ColumnHeader.TextAlign%2A?displayProperty=nameWithType>, 및 <xref:System.Windows.Forms.ColumnHeader.Width%2A?displayProperty=nameWithType> 속성입니다. 이 예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여넣습니다는 <xref:System.Windows.Forms.ListView> 라는 개체 `ListView1` 및 <xref:System.Windows.Forms.TextBox> 라는 `TextBox1`합니다. 호출 된 `InitializeListView` 폼의 생성자에서 메서드 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리기입니다.  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTest">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Provides item information, given an x- and y-coordinate.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewHitTestInfo HitTest(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.HitTest(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewHitTestInfo ^ HitTest(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.HitTest : System.Drawing.Point -&gt; System.Windows.Forms.ListViewHitTestInfo" Usage="listView.HitTest point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">The <see cref="T:System.Drawing.Point" /> at which to retrieve the item information. The coordinates are relative to the upper-left corner of the control.</param>
        <summary>Provides item information, given a point.</summary>
        <returns>The item information, given a point.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 항목이 나 하위 항목에 점이 있는지 여부 및 항목에 포인터가 있는 같이 레이블 또는 이미지 영역을 확인 하려면이 메서드를 사용 합니다. 좌표는 컨트롤을 반환 된 외부에 있는 경우 <xref:System.Windows.Forms.ListViewHitTestInfo> 개체에는 <xref:System.Windows.Forms.ListViewHitTestInfo.Location%2A> "none"; 속성 및 <xref:System.Windows.Forms.ListViewHitTestInfo.Item%2A> 및 <xref:System.Windows.Forms.ListViewHitTestInfo.SubItem%2A> 속성으로 설정 됩니다 `null`합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The point contains coordinates that are less than 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewHitTestInfo HitTest(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.HitTest(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function HitTest (x As Integer, y As Integer) As ListViewHitTestInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewHitTestInfo ^ HitTest(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.HitTest : int * int -&gt; System.Windows.Forms.ListViewHitTestInfo" Usage="listView.HitTest (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The x-coordinate at which to retrieve the item information. The coordinate is relative to the upper-left corner of the control.</param>
        <param name="y">The y-coordinate at which to retrieve the item information. The coordinate is relative to the upper-left corner of the control.</param>
        <summary>Provides item information, given x- and y-coordinates.</summary>
        <returns>The item information, given x- and y- coordinates.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하 여 항목이 나 하위 항목이에 점이 있는지 여부 및 항목에 포인터가 있는 같이 레이블 또는 이미지 영역을 결정 합니다. 좌표는 컨트롤을 반환 된 외부에 있는 경우 <xref:System.Windows.Forms.ListViewHitTestInfo> 개체에는 <xref:System.Windows.Forms.ListViewHitTestInfo.Location%2A> "none"; 속성 및 <xref:System.Windows.Forms.ListViewHitTestInfo.Item%2A> 및 <xref:System.Windows.Forms.ListViewHitTestInfo.SubItem%2A> 속성으로 설정 됩니다 `null`합니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Windows.Forms.ListView.HitTest%2A> 에서 마우스 이벤트의 위치를 확인 하는 메서드는 <xref:System.Windows.Forms.ListView>합니다. 이 예제를 실행 하려면 포함 된 Windows Form에 붙여넣습니다는 <xref:System.Windows.Forms.ListView> 라는 `listView1` 항목으로 채워집니다. 연결 된 <xref:System.Windows.Forms.Control.MouseDown> 이벤트에 대 한 `listView1` 와 `listView1_MouseDown` 이 예제의 메서드.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#7)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The x- or y-coordinate is less than 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="HotTracking">
      <MemberSignature Language="C#" Value="public bool HotTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HotTracking" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HotTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property HotTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HotTracking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HotTracking : bool with get, set" Usage="System.Windows.Forms.ListView.HotTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the text of an item or subitem has the appearance of a hyperlink when the mouse pointer passes over it.</summary>
        <value>
          <see langword="true" /> 위로 마우스를 이동할 때 해당 항목의 텍스트에 하이퍼링크 모양을 경우 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Willcause 핫 트래킹을 사용 하면는 <xref:System.Windows.Forms.ListView.Activation%2A> 속성으로 설정 되어야 <xref:System.Windows.Forms.ItemActivation.OneClick> 및 <xref:System.Windows.Forms.ListView.HoverSelection%2A> 속성으로 설정 되어야 `true`합니다. 또한 런타임에 레이블 편집 핫 트래킹을 사용 경우 허용 되지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Windows.Forms.ListView> 핫 트래킹을 사용 합니다. 이 예제를 실행 하려면 Windows Form과 호출에 다음 코드를 붙여넣습니다는 `InitializeHotTrackingListView` 폼의 생성자에서 메서드 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리기입니다.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HoverSelection">
      <MemberSignature Language="C#" Value="public bool HoverSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HoverSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HoverSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property HoverSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HoverSelection { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HoverSelection : bool with get, set" Usage="System.Windows.Forms.ListView.HoverSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether an item is automatically selected when the mouse pointer remains over the item for a few seconds.</summary>
        <value>
          <see langword="true" /> 항목을 자동으로 선택 하는 경우 경우 마우스 포인터 위에 둘; 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성이로 설정 된 경우 `true`, 사용자의 항목을 가리킬 수 있습니다는 <xref:System.Windows.Forms.ListView> 컨트롤 항목을 선택 합니다. 여러 항목을 선택할 수 있습니다 (때는 <xref:System.Windows.Forms.ListView.MultiSelect%2A> 속성이 true로) CTRL 키를 누른 채 각 항목을 가리키는 여 합니다. 이 기능을 사용 하 여 응용 프로그램에서 항목을 사용자에 대 한 쉬운 방법을 제공는 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertionMark">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewInsertionMark InsertionMark { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewInsertionMark InsertionMark" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.InsertionMark" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertionMark As ListViewInsertionMark" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewInsertionMark ^ InsertionMark { System::Windows::Forms::ListViewInsertionMark ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertionMark : System.Windows.Forms.ListViewInsertionMark" Usage="System.Windows.Forms.ListView.InsertionMark" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewInsertionMark</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object used to indicate the expected drop location when an item is dragged within a <see cref="T:System.Windows.Forms.ListView" /> control.</summary>
        <value>A <see cref="T:System.Windows.Forms.ListViewInsertionMark" /> 삽입 표시를 나타내는 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView> 삽입 표시 기능은 다음 항목을 새 위치로 끌 때 끌어서 놓기 작업에서 예상된 저장 위치를 시각적으로 나타낼 수 있습니다. 경우에만이 기능이 작동 하는 <xref:System.Windows.Forms.ListView.AutoArrange%2A> 속성 `true` 및 시기는 <xref:System.Windows.Forms.ListView> 컨트롤 항목을 자동으로 정렬 되지 않습니다. 자동 정렬을 방지 하려면는 <xref:System.Windows.Forms.ListView.Sorting%2A> 속성으로 설정 되어 있어야 <xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.ListView.View%2A> 속성으로 설정 되어 있어야 <xref:System.Windows.Forms.View.LargeIcon?displayProperty=nameWithType>, <xref:System.Windows.Forms.View.SmallIcon?displayProperty=nameWithType>, 또는 <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>합니다. 또한 삽입 표시 기능은으로 표시 될 수 있습니다는 <xref:System.Windows.Forms.ListView> 그룹화 기능은 그룹 구성원 자격을 기준으로 항목을 정렬 하기 때문에 기능을 그룹화 합니다.  
  
 <xref:System.Windows.Forms.ListViewInsertionMark> 클래스에 대 한 처리기에서 일반적으로 사용 됩니다는 <xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType> 또는 <xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType> 이벤트 항목을 끄는 삽입 표시의 위치를 업데이트할 수 있습니다. 에 대 한 처리기에는 또한는 <xref:System.Windows.Forms.Control.DragDrop?displayProperty=nameWithType> 또는 <xref:System.Windows.Forms.Control.MouseUp?displayProperty=nameWithType> 올바른 위치에 끌어 온된 항목을 삽입 하는 이벤트입니다. 자세한 내용은 참조 <xref:System.Windows.Forms.ListViewInsertionMark> 및 [하는 방법: Windows Forms ListView 컨트롤에 삽입 표시](~/docs/framework/winforms/controls/how-to-display-an-insertion-mark-in-a-windows-forms-listview-control.md)합니다.  
  
> [!NOTE]
>  응용 프로그램 호출 삽입 표시 기능은 Windows XP 및 Windows Server 2003 에서만 사용할 수는 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> 메서드. 이전 버전의 운영 체제에서는 삽입 표시와 관련된 코드가 아무 효과도 없으며 삽입 표시가 나타나지 않습니다. 결과적으로, 삽입 표시 기능은에 사용 하는 코드가 제대로 작동 하지 수도 있습니다. 이 기능을 사용할 수 있는지 여부를 확인 하는 코드를 포함할 수도 있으며, 사용할 수 없는 경우 대체 기능을 제공할 수 있습니다. 예를 들어 다음 삽입 표시를 지원 하지 않는 운영 체제에서 실행할 때는 위치를 변경 하는 끌어서 놓기 항목을 구현 하는 모든 코드를 무시 하는 것이 좋습니다.  
>   
>  삽입 표시 기능은 운영 체제 테마 기능을 제공 하는 라이브러리에서 제공 됩니다. 이 라이브러리의 가용성을 확인 하려면 호출는 <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> 메서드 오버 로드를 전달은 <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> 값입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.ListView> 삽입 표시 기능입니다. 이 예제에서는 표준 끌기 이벤트를 사용 하 여을 끌어서 놓기 및 항목 다시 정렬을 구현 합니다. 삽입 표시의 위치에 대 한 처리기에서 업데이트 되 고 <xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType> 이벤트입니다. 이 처리기에서 마우스 포인터의 위치는 중간점을 가장 가까운 항목 비교 하 고 결과 삽입 표시가 항목의 오른쪽 또는 왼쪽에 표시 되는지 여부를 결정 하는 데 사용 됩니다.  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewInsertionMark" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.IsInputKey : System.Windows.Forms.Keys -&gt; bool" Usage="listView.IsInputKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</param>
        <summary>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
        <returns>
          <see langword="true" /> if the specified key is a regular input key; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemActivate">
      <MemberSignature Language="C#" Value="public event EventHandler ItemActivate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ItemActivate" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemActivate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemActivate As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ItemActivate;" />
      <MemberSignature Language="F#" Value="member this.ItemActivate : EventHandler " Usage="member this.ItemActivate : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an item is activated.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ItemActivate> 사용자에서 하나 이상의 항목을 활성화할 때 이벤트 발생는 <xref:System.Windows.Forms.ListView> 제어 합니다. 사용자는 단일 클릭 또는 두 번 클릭 값에 따라 사용 하 여 항목을 활성화할 수는 <xref:System.Windows.Forms.ListView.Activation%2A> 속성 또는 키보드를 사용 합니다. 에 대 한 이벤트 처리기 내에서 <xref:System.Windows.Forms.ListView.ItemActivate> 참조할 수 이벤트는 <xref:System.Windows.Forms.ListView.SelectedItems%2A> 또는 <xref:System.Windows.Forms.ListView.SelectedIndices%2A> 속성에서 선택한 항목의 컬렉션에 액세스 하는 <xref:System.Windows.Forms.ListView> 어떤 항목이 활성화 되 고 확인 하 합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.ListView.ItemActivate> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.ListView> 라는 `ListView1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.ListView.ItemActivate> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#473](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#473)]
 [!code-vb[System.Windows.Forms.EventExamples#473](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#473)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.Activation" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
      </Docs>
    </Member>
    <Member MemberName="ItemCheck">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckEventHandler ItemCheck;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckEventHandler ItemCheck" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemCheck" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemCheck As ItemCheckEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemCheckEventHandler ^ ItemCheck;" />
      <MemberSignature Language="F#" Value="member this.ItemCheck : System.Windows.Forms.ItemCheckEventHandler " Usage="member this.ItemCheck : System.Windows.Forms.ItemCheckEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the check state of an item changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> 속성으로 설정 되어 있어야 확인란의 각 항목 옆에 표시 되는 순서로 true는 <xref:System.Windows.Forms.ListView> 제어 합니다. <xref:System.Windows.Forms.ListView.ItemCheck> 이벤트가 발생할 때 또는 항목의 선택 상태가 변경 될 때는 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> 속성이 `true`합니다. 에 대 한 이벤트 처리기를 만들 수는 <xref:System.Windows.Forms.ListView.ItemCheck> 에서 항목을 선택할 때마다 항목의 아이콘 또는 다른 응용 프로그램 관련 작업의 상태를 변경 하는 등 작업을 수행 하는 이벤트는 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
> [!NOTE]
>  창 핸들 만들어지지 않은 경우 하는 경우는 <xref:System.Windows.Forms.ListView.ItemCheck> 이벤트가 발생 하면 이벤트 지연 됩니다. 창 핸들 (경우에 폼이 표시)을 만든 후 지연 된 <xref:System.Windows.Forms.ListView.ItemCheck> 이벤트가 발생 합니다. 자세한 내용은 <xref:System.Windows.Forms.Control.HandleCreated>을 참조하세요.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 체크 <xref:System.Windows.Forms.ListView> 제어를 처리 하는 <xref:System.Windows.Forms.ListView.ItemCheck> 이벤트입니다. 메서드에서 사용 하는 <xref:System.Windows.Forms.ItemCheckEventArgs.CurrentValue%2A?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.ItemCheckEventArgs.Index%2A?displayProperty=nameWithType> 속성을 검색 하 고 선택 된 메뉴 항목의 가격을 계산 합니다. 이 예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여넣습니다는 `ListView` 라는 `ListView1` 및 `TextBox` 라는 `Textbox1`합니다. 호출 된 `InititalizeListView` 폼의 생성자에서 메서드 또는 `Load` 메서드. 확인은 <xref:System.Windows.Forms.ListView.ItemCheck> 이벤트는이 예제의 이벤트 처리기와 연결 합니다.  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
        <altmember cref="T:System.Windows.Forms.ItemCheckEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ItemChecked">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckedEventHandler ItemChecked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckedEventHandler ItemChecked" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemChecked" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemChecked As ItemCheckedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemCheckedEventHandler ^ ItemChecked;" />
      <MemberSignature Language="F#" Value="member this.ItemChecked : System.Windows.Forms.ItemCheckedEventHandler " Usage="member this.ItemChecked : System.Windows.Forms.ItemCheckedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the checked state of an item changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트는 비슷합니다는 <xref:System.Windows.Forms.ListView.ItemCheck> 이벤트 항목 확인 된 후에 발생 합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.ListView.ItemChecked> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 또 다른 예에 대 한 참조는 <xref:System.Windows.Forms.ListView.ItemCheck> 이벤트입니다. 코드를 있는에 이벤트 처리기가 연결 하는 경우에 동일 하 게 작동는 <xref:System.Windows.Forms.ListView.ItemChecked> 이벤트입니다.  
  
 이 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.ListView> 라는 `ListView1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.ListView.ItemChecked> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#475](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#475)]
 [!code-vb[System.Windows.Forms.EventExamples#475](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#475)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemDragEventHandler ItemDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemDragEventHandler ItemDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemDrag As ItemDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemDragEventHandler ^ ItemDrag;" />
      <MemberSignature Language="F#" Value="member this.ItemDrag : System.Windows.Forms.ItemDragEventHandler " Usage="member this.ItemDrag : System.Windows.Forms.ItemDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user begins dragging an item.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ItemDrag> 이벤트 항목을 끌기 시작할 때 발생 합니다. 에 대 한 이벤트 처리기에는 일반적으로 <xref:System.Windows.Forms.ListView.ItemDrag> 의 호출 하 여 끌기 작업을 수행 하는 이벤트는 <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=nameWithType> 메서드. 이 이벤트를 사용 하 여 내부 및 외부로 응용 프로그램의 항목을 끌어 하는 데 필요한 작업을 수행할 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.ListView.ItemDrag> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.ListView> 라는 `ListView1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.ListView.ItemDrag> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#476](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#476)]
 [!code-vb[System.Windows.Forms.EventExamples#476](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#476)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
        <altmember cref="T:System.Windows.Forms.ItemDragEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ItemMouseHover">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemMouseHover" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemMouseHover As ListViewItemMouseHoverEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewItemMouseHoverEventHandler ^ ItemMouseHover;" />
      <MemberSignature Language="F#" Value="member this.ItemMouseHover : System.Windows.Forms.ListViewItemMouseHoverEventHandler " Usage="member this.ItemMouseHover : System.Windows.Forms.ListViewItemMouseHoverEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemMouseHoverEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the mouse hovers over an item.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.ListView.ItemMouseHover> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.ListView> 라는 `ListView1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.ListView.ItemMouseHover> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#477](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#477)]
 [!code-vb[System.Windows.Forms.EventExamples#477](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#477)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ListViewItemCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/ListViewItemCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As ListView.ListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::ListViewItemCollection ^ Items { System::Windows::Forms::ListView::ListViewItemCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : System.Windows.Forms.ListView.ListViewItemCollection" Usage="System.Windows.Forms.ListView.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewItemCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection containing all items in the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> 에 있는 모든 항목을 포함 하는 <see cref="T:System.Windows.Forms.ListView" /> 제어 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 <xref:System.Windows.Forms.ListView.ListViewItemCollection> 이 속성에서 반환 있습니다 수 추가 및 항목을 제거 하 고 항목의 수를 가져올 합니다. 컬렉션의 항목으로 수행할 수 있는 작업에 대 한 자세한 내용은 참조는 <xref:System.Windows.Forms.ListView.ListViewItemCollection> 클래스 참조 항목입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 한 <xref:System.Windows.Forms.ListView> 3 개 컨트롤 <xref:System.Windows.Forms.ListViewItem> 지정 된 개체 및 3 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> 각 항목에 대해 지정 된 개체입니다. 예제에서는 <xref:System.Windows.Forms.ColumnHeader> 자세히 보기의 하위 항목을 표시 하는 개체입니다. 두 개의 <xref:System.Windows.Forms.ImageList> 개체에 대 한 이미지를 제공 하는 코드 예제에서는 만들어집니다는 <xref:System.Windows.Forms.ListViewItem> 개체입니다. 이러한 <xref:System.Windows.Forms.ImageList> 개체에 추가 되는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성입니다. 이 예제에서는 만들기에서 다음 속성을 사용 하 여는 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 이 예제에서는 코드를 추가 했는지는 <xref:System.Windows.Forms.Form> 생성자 나 폼에서 다른 방법의 예제에서 만든 메서드를 호출 합니다. 이 예제는 또한 라는 이미지가에서는 `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, 및 `MyLargeImage2` C 드라이브의 루트 디렉터리에 있는  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.ListViewItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="ItemSelectionChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemSelectionChanged As ListViewItemSelectionChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewItemSelectionChangedEventHandler ^ ItemSelectionChanged;" />
      <MemberSignature Language="F#" Value="member this.ItemSelectionChanged : System.Windows.Forms.ListViewItemSelectionChangedEventHandler " Usage="member this.ItemSelectionChanged : System.Windows.Forms.ListViewItemSelectionChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemSelectionChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the selection state of an item changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가상 모드에는 <xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged> 여러 항목의 선택 상태가 변경 될 때 이벤트가 발생 합니다.  
  
 <xref:System.Windows.Forms.ListView.ItemSelectionChanged> 선택이 취소 선택 또는 선택 취소로 항목 상태가 변경 되는지 여부는 이벤트가 발생 합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.ListView.ItemSelectionChanged> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.ListView> 라는 `ListView1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.ListView.ItemSelectionChanged> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#478](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#478)]
 [!code-vb[System.Windows.Forms.EventExamples#478](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#478)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />
      </Docs>
    </Member>
    <Member MemberName="LabelEdit">
      <MemberSignature Language="C#" Value="public bool LabelEdit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Property LabelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LabelEdit { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.LabelEdit : bool with get, set" Usage="System.Windows.Forms.ListView.LabelEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the user can edit the labels of items in the control.</summary>
        <value>
          <see langword="true" /> 런타임 시; 사용자가 항목의 레이블을 편집할 수 있는 경우 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Forms.ListView.LabelEdit%2A> 속성이 `true`, 사용자는 항목 텍스트를 선택를 클릭 하 여 항목의 텍스트를 수정 하 고 다시 레이블 텍스트를 배치에 있는 항목 텍스트를 클릭 한 다음 편집 모드입니다. 그런 다음 사용자 수정 하거나 항목의 텍스트 레이블을 바꿀 수 있습니다. 사용할 수는 <xref:System.Windows.Forms.ListView.BeforeLabelEdit> 및 <xref:System.Windows.Forms.ListView.AfterLabelEdit> 전과 후 항목의 텍스트를 편집 하는 사용자의 작업을 수행 하는 이벤트입니다. 이 속성은로 설정 하는 경우에 하위 항목의 텍스트를 수정할 수 없습니다 `true`합니다. 하위 항목의 텍스트를 변경 하려면 컨트롤의 하위 항목을 두 번 클릭 하는 경우 사용자에 게으로 대화 상자를 표시할 수 있습니다.  
  
> [!NOTE]
>  경우는 <xref:System.Windows.Forms.ListView.Activation%2A> 속성이 <xref:System.Windows.Forms.ItemActivation.OneClick> 또는 <xref:System.Windows.Forms.ItemActivation.TwoClick>, 레이블 편집 허용 되지 것입니다의 값에 관계 없이 <xref:System.Windows.Forms.ListView.LabelEdit%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 한 <xref:System.Windows.Forms.ListView> 3 개 컨트롤 <xref:System.Windows.Forms.ListViewItem> 지정 된 개체 및 3 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> 각 항목에 대해 지정 된 개체입니다. 예제에서는 <xref:System.Windows.Forms.ColumnHeader> 자세히 보기의 하위 항목을 표시 하는 개체입니다. 두 개의 <xref:System.Windows.Forms.ImageList> 개체에 대 한 이미지를 제공 하는 코드 예제에서는 만들어집니다는 <xref:System.Windows.Forms.ListViewItem> 개체입니다. 이러한 <xref:System.Windows.Forms.ImageList> 개체에 추가 되는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성입니다. 이 예제에서는 만들기에서 다음 속성을 사용 하 여는 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 이 예제에서는 코드를 추가 했는지는 <xref:System.Windows.Forms.Form> 생성자 나 폼에서 다른 방법의 예제에서 만든 메서드를 호출 합니다. 이 예제는 또한 라는 이미지가에서는 `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, 및 `MyLargeImage2` C 드라이브의 루트 디렉터리에 있는  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="LabelWrap">
      <MemberSignature Language="C#" Value="public bool LabelWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelWrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LabelWrap" />
      <MemberSignature Language="VB.NET" Value="Public Property LabelWrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LabelWrap { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.LabelWrap : bool with get, set" Usage="System.Windows.Forms.ListView.LabelWrap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether item labels wrap when items are displayed in the control as icons.</summary>
        <value>
          <see langword="true" /> 아이콘으로 표시 될 때 항목 레이블이 줄 바꿈될지 하는 경우 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Forms.ListView.LabelWrap%2A> 속성이 `true`, 필요한 경우 해당 항목의 텍스트 텍스트의 다음 줄으로 줄 바꿈됩니다. 텍스트가 두 줄 텍스트 보다 긴 경우 텍스트가 줄어듭니다. 사용자가 항목을 선택 하는 경우 모든 항목 텍스트가 표시 됩니다. 경우는 <xref:System.Windows.Forms.ListView.LabelWrap%2A> 속성이 `false`, 모든 항목 텍스트 한 줄에 표시 됩니다. 전체 항목 텍스트가 표시 됩니다 때는 <xref:System.Windows.Forms.ListView.LabelWrap%2A> 로 설정 된 `false`합니다. 이 속성은 경우에만 사용된 된 <xref:System.Windows.Forms.ListView.View%2A> 속성이 <xref:System.Windows.Forms.View.LargeIcon> 또는 <xref:System.Windows.Forms.View.SmallIcon>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
      </Docs>
    </Member>
    <Member MemberName="LargeImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList LargeImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList LargeImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LargeImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property LargeImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ LargeImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LargeImageList : System.Windows.Forms.ImageList with get, set" Usage="System.Windows.Forms.ListView.LargeImageList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.ImageList" /> to use when displaying items as large icons in the control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" /> 때 사용할 아이콘을 포함 하는 <see cref="P:System.Windows.Forms.ListView.View" /> 속성이 <see cref="F:System.Windows.Forms.View.LargeIcon" />합니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 속성을 지정할 수 있습니다는 <xref:System.Windows.Forms.ImageList> 큰 아이콘으로 항목을 표시할 때 사용할 아이콘을 포함 하는 개체 (때는 <xref:System.Windows.Forms.ListView.View%2A> 속성이 <xref:System.Windows.Forms.View.LargeIcon>). <xref:System.Windows.Forms.ListView> 컨트롤 그래픽 형식으로 사용할 수는 <xref:System.Windows.Forms.ImageList> 아이콘을 표시할 때 컨트롤을 지원 합니다. <xref:System.Windows.Forms.ListView> 컨트롤.ico 파일에 제한 되지 않습니다. 한 번는 <xref:System.Windows.Forms.ImageList> 에 할당 되는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 속성을 설정한는 <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> 각 속성 <xref:System.Windows.Forms.ListViewItem> 에 <xref:System.Windows.Forms.ListView> 컨트롤에 적절 한 이미지의 인덱스 위치에는 <xref:System.Windows.Forms.ImageList>합니다. 에 대 한 아이콘의 크기는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 지정는 <xref:System.Windows.Forms.ImageList.ImageSize%2A>합니다.  
  
 에 대해 지정할 수 하나의 인덱스 때문에 <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A?displayProperty=nameWithType> 속성에는 <xref:System.Windows.Forms.ImageList> 에 지정 된 개체는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성 표시 하려면 이미지에 대 한 동일한 인덱스 위치에 있어야 합니다. 예를 들어 경우는 <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> 속성의는 <xref:System.Windows.Forms.ListViewItem> 설정 된 0으로 소규모 조직과 대규모 아이콘에 대 한 사용 하도록 이미지에 동일한 인덱스 위치에 있어야는 <xref:System.Windows.Forms.ImageList> 에 지정 된 개체는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성입니다.  
  
> [!NOTE]
>  이미지는 키에 지정 여전히 각 이미지 목록에 동일한 인덱스 위치에서 이미지의 버전 소규모 조직과 대규모를 배치 해야 합니다. 뷰를 전환할 때 하나의 목록에 있는 이미지의 인덱스 위치를 지정 된 키 값에 관계 없이 다른 목록에 이미지를 찾을 사용 됩니다.  
  
 설정 하는 <xref:System.Windows.Forms.ImageList> 작은 아이콘으로 항목을 표시할 때 사용할 (이외의 모든 보기 모드 <xref:System.Windows.Forms.View.LargeIcon>)를 사용 하 여는 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성. 이미지를 표시 하려면 항목 상태를 사용 하 여 사용 하려는 경우는 <xref:System.Windows.Forms.ListView.StateImageList%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 한 <xref:System.Windows.Forms.ListView> 3 개 컨트롤 <xref:System.Windows.Forms.ListViewItem> 지정 된 개체 및 3 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> 각 항목에 대해 지정 된 개체입니다. 예제에서는 <xref:System.Windows.Forms.ColumnHeader> 자세히 보기의 하위 항목을 표시 하는 개체입니다. 두 개의 <xref:System.Windows.Forms.ImageList> 개체에 대 한 이미지를 제공 하는 코드 예제에서는 만들어집니다는 <xref:System.Windows.Forms.ListViewItem> 개체입니다. 이러한 <xref:System.Windows.Forms.ImageList> 개체에 추가 되는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성입니다. 이 예제에서는 만들기에서 다음 속성을 사용 하 여는 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 이 예제에서는 코드를 추가 했는지는 <xref:System.Windows.Forms.Form> 생성자 나 폼에서 다른 방법의 예제에서 만든 메서드를 호출 합니다. 이 예제는 또한 라는 이미지가에서는 `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, 및 `MyLargeImage2` C 드라이브의 루트 디렉터리에 있는  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.SmallImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
      </Docs>
    </Member>
    <Member MemberName="ListViewItemSorter">
      <MemberSignature Language="C#" Value="public System.Collections.IComparer ListViewItemSorter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IComparer ListViewItemSorter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ListViewItemSorter" />
      <MemberSignature Language="VB.NET" Value="Public Property ListViewItemSorter As IComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IComparer ^ ListViewItemSorter { System::Collections::IComparer ^ get(); void set(System::Collections::IComparer ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ListViewItemSorter : System.Collections.IComparer with get, set" Usage="System.Windows.Forms.ListView.ListViewItemSorter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the sorting comparer for the control.</summary>
        <value>
          <see cref="T:System.Collections.IComparer" /> 컨트롤에 대 한 정렬 비교자를 나타내는입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> 속성에 있는 항목의 정렬을 수행 하는 개체를 지정할 수 있습니다는 <xref:System.Windows.Forms.ListView> 시점을 제어할는 <xref:System.Windows.Forms.ListView.Sort%2A> 항목 목록에 추가 될 때 또는 메서드 호출 됩니다. 없는 항목에는 해당 레이블 텍스트가 변경 될 때 자동으로 정렬 합니다.  
  
 지정한 개체가 구현 하는 클래스의 인스턴스 있어야 합니다.는 <xref:System.Collections.IComparer> 인터페이스 라는 단일 메서드가 들어 있는 <xref:System.Collections.Comparer.Compare%2A?displayProperty=nameWithType>합니다.  
  
 사용자 지정 정렬, 예를 들어 세부 정보 보기에서 열 머리글을 클릭 하면 제공 하려면이 속성을 사용할 수 있습니다. 이 위해 구현 하는 클래스를 만들는 <xref:System.Collections.IComparer> 인터페이스를 기준으로 정렬 하려면 열의 인덱스를 허용 하는 생성자를 제공 합니다. 에 대 한 처리기를 구현할 수 있습니다는 <xref:System.Windows.Forms.ListView.ColumnClick> 이벤트를 클릭 한 열의 인덱스를 사용 하 여이 클래스의 인스턴스를 만듭니다. 설정 하는 경우는 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> 속성을 새 인스턴스로 <xref:System.Windows.Forms.ListView> 컨트롤은 지정된 된 개체를 사용 하 여 자동으로 정렬 합니다. 에 대 한 후속 호출에서 <xref:System.Windows.Forms.ListView.Sort%2A> 메서드 같은 개체를 사용 합니다.  
  
> [!NOTE]
>  값을 설정 하면는 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> 속성은 <xref:System.Windows.Forms.ListView.Sort%2A> 메서드는 자동으로 호출 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 포함 된 폼을 만듭니다는 <xref:System.Windows.Forms.ListView> 수동으로 때 열에 항목을 정렬 하는 <xref:System.Windows.Forms.ListView> 컨트롤을 클릭 합니다. 이 예제에서는 클래스를 정의 `ListViewItemComparer` 구현 하는 <xref:System.Collections.IComparer?displayProperty=nameWithType> 수행 하는 인터페이스는 <xref:System.Windows.Forms.ListViewItem> 비교 합니다. 이 예에서는 인스턴스를 만듭니다 `ListViewItemComparer` 사용 하 여 설정 하 고는 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> 속성의는 <xref:System.Windows.Forms.ListView> 제어 합니다. <xref:System.Windows.Forms.ListView.Sort%2A> 메서드 호출의 <xref:System.Windows.Forms.ListView.ColumnClick> 이벤트 처리기에 정의 된 메서드를 사용 하 여 `ListViewItemComparer` 항목을 클릭 한 열에 따라 정렬 합니다.  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
      </Docs>
    </Member>
    <Member MemberName="MultiSelect">
      <MemberSignature Language="C#" Value="public bool MultiSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.MultiSelect" />
      <MemberSignature Language="VB.NET" Value="Public Property MultiSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MultiSelect { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MultiSelect : bool with get, set" Usage="System.Windows.Forms.ListView.MultiSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether multiple items can be selected.</summary>
        <value>
          <see langword="true" /> 컨트롤에서 여러 항목 경우; 한 번에 선택할 수 있습니다. 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때는 <xref:System.Windows.Forms.ListView.MultiSelect%2A> 속성이 `true`에서 여러 항목을 선택할 수는 <xref:System.Windows.Forms.ListView> 제어 합니다. 여러 항목을 선택 하려면 사용자 CTRL 키를 누른 채 선택 항목을 클릭 합니다. 선택 하는 첫 번째 항목을 클릭 하 여 선택한 다음 마지막 항목을 선택를 클릭 하 고 SHIFT 키를 누른 채 연속 된 항목을 선택할 수 있습니다. 다중 선택 기능을 사용 하 여의 여러 항목을 선택할 수는 <xref:System.Windows.Forms.ListView> 제어 하 고 선택한 모든 항목에 대 한 작업을 수행 합니다. 예를 들어 사용자는 여러 항목을 선택 하 고 선택한 항목에 수행할 수 있는 작업 집합을 표시 하는 바로 가기 메뉴를 표시 하려면 선택한 항목을 마우스 오른쪽 단추로 클릭 수 없습니다.  
  
 선택 된 항목을 결정 하는 <xref:System.Windows.Forms.ListView> 컨트롤을 사용 하 여는 <xref:System.Windows.Forms.ListView.SelectedItems%2A> 속성입니다. <xref:System.Windows.Forms.ListView.SelectedItems%2A> 속성에 액세스할 수 있습니다는 <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection> 선택 된 항목의 목록이 들어 있는입니다. 인덱스 위치를 사용 하려는 경우는 <xref:System.Windows.Forms.ListView.ListViewItemCollection> 항목을 대신 사용할 수 있습니다는 <xref:System.Windows.Forms.ListView.SelectedIndices%2A> 속성에 액세스는 <xref:System.Windows.Forms.ListView.SelectedIndexCollection>합니다.  
  
 경우 원하지 않는에서 다중 선택을 허용 하는 <xref:System.Windows.Forms.ListView>, 아직 사용자 제공 하려면 여러 항목을 설정 하 여 확인란에 표시할 수 있습니다 선택할 수 있는 방법을 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> 속성을 `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Windows.Forms.ListView> 여러 항목을 선택할 수 있도록 합니다. 예제 설정에는 <xref:System.Windows.Forms.ListView.HideSelection%2A> 및 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> 속성입니다. 이 예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여넣습니다는 <xref:System.Windows.Forms.ListView> 라는 개체 `ListView1` 및 <xref:System.Windows.Forms.TextBox> 라는 `TextBox1`합니다. 호출 된 `InitializeListView` 폼의 생성자에서 메서드 또는 `Load` 메서드.  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
        <altmember cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />
        <altmember cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="OnAfterLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterLabelEdit(class System.Windows.Forms.LabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterLabelEdit (e As LabelEditEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterLabelEdit(System::Windows::Forms::LabelEditEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterLabelEdit : System.Windows.Forms.LabelEditEventArgs -&gt; unit&#xA;override this.OnAfterLabelEdit : System.Windows.Forms.LabelEditEventArgs -&gt; unit" Usage="listView.OnAfterLabelEdit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnAfterLabelEdit%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.ListView.AfterLabelEdit> 새로 편집된 된 레이블을 알파벳에서 자로 제한 하는 이벤트입니다. 이 예제에서는 사용은 <xref:System.Text.ASCIIEncoding> 클래스의 새 레이블 각 문자의 ASCII 문자 코드를 가져올 수 있습니다. 문자 숫자를 나타내는 ASCII 코드 사이의 뒤쳐지면 항목에 새 레이블을 적용할 수 없습니다. 이 예제에서는 만든는 <xref:System.Windows.Forms.ListView> 컨트롤은 폼과 항목을 추가한에 있습니다. 이 예제는 또한 연결에서는 <xref:System.Windows.Forms.ListView.AfterLabelEdit> 예제 코드에 정의 된 이벤트 처리기에는 이벤트입니다. 사용 하려면는 <xref:System.Text.ASCIIEncoding> 클래스 파일에 포함 해야는 <xref:System.Text> 네임 스페이스입니다.  
  
 [!code-cpp[ListView.AfterLabelEdit#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CPP/form1.cpp#1)]
 [!code-csharp[ListView.AfterLabelEdit#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CS/form1.cs#1)]
 [!code-vb[ListView.AfterLabelEdit#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.AfterLabelEdit/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackgroundImageChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackgroundImageChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnBackgroundImageChanged : EventArgs -&gt; unit" Usage="listView.OnBackgroundImageChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnBackgroundImageChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeLabelEdit(class System.Windows.Forms.LabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeLabelEdit (e As LabelEditEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeLabelEdit(System::Windows::Forms::LabelEditEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBeforeLabelEdit : System.Windows.Forms.LabelEditEventArgs -&gt; unit&#xA;override this.OnBeforeLabelEdit : System.Windows.Forms.LabelEditEventArgs -&gt; unit" Usage="listView.OnBeforeLabelEdit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnBeforeLabelEdit%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnCacheVirtualItems">
      <MemberSignature Language="C#" Value="protected virtual void OnCacheVirtualItems (System.Windows.Forms.CacheVirtualItemsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCacheVirtualItems(class System.Windows.Forms.CacheVirtualItemsEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCacheVirtualItems (e As CacheVirtualItemsEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCacheVirtualItems(System::Windows::Forms::CacheVirtualItemsEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCacheVirtualItems : System.Windows.Forms.CacheVirtualItemsEventArgs -&gt; unit&#xA;override this.OnCacheVirtualItems : System.Windows.Forms.CacheVirtualItemsEventArgs -&gt; unit" Usage="listView.OnCacheVirtualItems e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.CacheVirtualItemsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.CacheVirtualItemsEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.CacheVirtualItems" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnCacheVirtualItems%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnClick (System.Windows.Forms.ColumnClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnClick(class System.Windows.Forms.ColumnClickEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnClick (e As ColumnClickEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnClick(System::Windows::Forms::ColumnClickEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnClick : System.Windows.Forms.ColumnClickEventArgs -&gt; unit&#xA;override this.OnColumnClick : System.Windows.Forms.ColumnClickEventArgs -&gt; unit" Usage="listView.OnColumnClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.ColumnClickEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ColumnClick" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnColumnClick%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 포함 된 폼을 만듭니다는 <xref:System.Windows.Forms.ListView> 수동으로 때 열에 항목을 정렬 하는 <xref:System.Windows.Forms.ListView> 컨트롤을 클릭 합니다. 이 예제에서는 클래스를 정의 `ListViewItemComparer` 구현 하는 <xref:System.Collections.IComparer?displayProperty=nameWithType> 수행 하는 인터페이스는 <xref:System.Windows.Forms.ListViewItem> 비교 합니다. 이 예에서는 인스턴스를 만듭니다 `ListViewItemComparer` 사용 하 여 설정 하 고는 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> 속성의는 <xref:System.Windows.Forms.ListView> 제어 합니다. <xref:System.Windows.Forms.ListView.Sort%2A> 메서드 호출의 <xref:System.Windows.Forms.ListView.ColumnClick> 이벤트 처리기에 정의 된 메서드를 사용 하 여 `ListViewItemComparer` 항목을 클릭 한 열에 따라 정렬 합니다.  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
        <altmember cref="T:System.Windows.Forms.ColumnClickEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnColumnReordered">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnReordered (System.Windows.Forms.ColumnReorderedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnReordered(class System.Windows.Forms.ColumnReorderedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnReordered (e As ColumnReorderedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnReordered(System::Windows::Forms::ColumnReorderedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnReordered : System.Windows.Forms.ColumnReorderedEventArgs -&gt; unit&#xA;override this.OnColumnReordered : System.Windows.Forms.ColumnReorderedEventArgs -&gt; unit" Usage="listView.OnColumnReordered e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnReorderedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.Windows.Forms.ColumnReorderedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ColumnReordered" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnColumnReordered%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanged (System.Windows.Forms.ColumnWidthChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanged(class System.Windows.Forms.ColumnWidthChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnWidthChanged (e As ColumnWidthChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnWidthChanged(System::Windows::Forms::ColumnWidthChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnWidthChanged : System.Windows.Forms.ColumnWidthChangedEventArgs -&gt; unit&#xA;override this.OnColumnWidthChanged : System.Windows.Forms.ColumnWidthChangedEventArgs -&gt; unit" Usage="listView.OnColumnWidthChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.ColumnWidthChangedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnColumnWidthChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanging (System.Windows.Forms.ColumnWidthChangingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanging(class System.Windows.Forms.ColumnWidthChangingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnWidthChanging (e As ColumnWidthChangingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnWidthChanging(System::Windows::Forms::ColumnWidthChangingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnWidthChanging : System.Windows.Forms.ColumnWidthChangingEventArgs -&gt; unit&#xA;override this.OnColumnWidthChanging : System.Windows.Forms.ColumnWidthChangingEventArgs -&gt; unit" Usage="listView.OnColumnWidthChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.ColumnWidthChangingEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanging" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ColumnWidthChanging> 이벤트는 Window의 전체 하는 경우 끌기 기능을 "표시 끄는 동안 창 내용" 옵션을 사용할 수 없습니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnColumnWidthChanging%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawColumnHeader">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawColumnHeader (System.Windows.Forms.DrawListViewColumnHeaderEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawColumnHeader(class System.Windows.Forms.DrawListViewColumnHeaderEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawColumnHeader (e As DrawListViewColumnHeaderEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawColumnHeader(System::Windows::Forms::DrawListViewColumnHeaderEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrawColumnHeader : System.Windows.Forms.DrawListViewColumnHeaderEventArgs -&gt; unit&#xA;override this.OnDrawColumnHeader : System.Windows.Forms.DrawListViewColumnHeaderEventArgs -&gt; unit" Usage="listView.OnDrawColumnHeader e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.DrawColumnHeader" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnDrawColumnHeader%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawListViewItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawListViewItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawListViewItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawListViewItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrawItem : System.Windows.Forms.DrawListViewItemEventArgs -&gt; unit&#xA;override this.OnDrawItem : System.Windows.Forms.DrawListViewItemEventArgs -&gt; unit" Usage="listView.OnDrawItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DrawListViewItemEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.DrawItem" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnDrawItem%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnDrawSubItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawSubItem (System.Windows.Forms.DrawListViewSubItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawSubItem(class System.Windows.Forms.DrawListViewSubItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawSubItem (e As DrawListViewSubItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawSubItem(System::Windows::Forms::DrawListViewSubItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrawSubItem : System.Windows.Forms.DrawListViewSubItemEventArgs -&gt; unit&#xA;override this.OnDrawSubItem : System.Windows.Forms.DrawListViewSubItemEventArgs -&gt; unit" Usage="listView.OnDrawSubItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewSubItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnDrawSubItem%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnFontChanged : EventArgs -&gt; unit" Usage="listView.OnFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see langword="FontChanged" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="listView.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleDestroyed : EventArgs -&gt; unit" Usage="listView.OnHandleDestroyed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnItemActivate">
      <MemberSignature Language="C#" Value="protected virtual void OnItemActivate (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemActivate(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemActivate (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemActivate(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemActivate : EventArgs -&gt; unit&#xA;override this.OnItemActivate : EventArgs -&gt; unit" Usage="listView.OnItemActivate e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ItemActivate" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnItemActivate%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemActivate" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemCheck">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCheck (System.Windows.Forms.ItemCheckEventArgs ice);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCheck(class System.Windows.Forms.ItemCheckEventArgs ice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemCheck (ice As ItemCheckEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemCheck(System::Windows::Forms::ItemCheckEventArgs ^ ice);" />
      <MemberSignature Language="F#" Value="abstract member OnItemCheck : System.Windows.Forms.ItemCheckEventArgs -&gt; unit&#xA;override this.OnItemCheck : System.Windows.Forms.ItemCheckEventArgs -&gt; unit" Usage="listView.OnItemCheck ice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ice" Type="System.Windows.Forms.ItemCheckEventArgs" />
      </Parameters>
      <Docs>
        <param name="ice">An <see cref="T:System.Windows.Forms.ItemCheckEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ItemCheck" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnItemCheck%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemCheck" />
        <altmember cref="T:System.Windows.Forms.ItemCheckEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemChecked">
      <MemberSignature Language="C#" Value="protected virtual void OnItemChecked (System.Windows.Forms.ItemCheckedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemChecked(class System.Windows.Forms.ItemCheckedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemChecked (e As ItemCheckedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemChecked(System::Windows::Forms::ItemCheckedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemChecked : System.Windows.Forms.ItemCheckedEventArgs -&gt; unit&#xA;override this.OnItemChecked : System.Windows.Forms.ItemCheckedEventArgs -&gt; unit" Usage="listView.OnItemChecked e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemCheckedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.Windows.Forms.ItemCheckedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ItemChecked" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnItemChecked%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDrag (System.Windows.Forms.ItemDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDrag(class System.Windows.Forms.ItemDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemDrag (e As ItemDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemDrag(System::Windows::Forms::ItemDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemDrag : System.Windows.Forms.ItemDragEventArgs -&gt; unit&#xA;override this.OnItemDrag : System.Windows.Forms.ItemDragEventArgs -&gt; unit" Usage="listView.OnItemDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.Windows.Forms.ItemDragEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ItemDrag" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnItemDrag%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemDrag" />
        <altmember cref="T:System.Windows.Forms.ItemDragEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnItemMouseHover (System.Windows.Forms.ListViewItemMouseHoverEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemMouseHover(class System.Windows.Forms.ListViewItemMouseHoverEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemMouseHover (e As ListViewItemMouseHoverEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemMouseHover(System::Windows::Forms::ListViewItemMouseHoverEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemMouseHover : System.Windows.Forms.ListViewItemMouseHoverEventArgs -&gt; unit&#xA;override this.OnItemMouseHover : System.Windows.Forms.ListViewItemMouseHoverEventArgs -&gt; unit" Usage="listView.OnItemMouseHover e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemMouseHoverEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.ListViewItemMouseHoverEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ItemMouseHover" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnItemMouseHover%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemSelectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnItemSelectionChanged (System.Windows.Forms.ListViewItemSelectionChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemSelectionChanged(class System.Windows.Forms.ListViewItemSelectionChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemSelectionChanged (e As ListViewItemSelectionChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemSelectionChanged(System::Windows::Forms::ListViewItemSelectionChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemSelectionChanged : System.Windows.Forms.ListViewItemSelectionChangedEventArgs -&gt; unit&#xA;override this.OnItemSelectionChanged : System.Windows.Forms.ListViewItemSelectionChangedEventArgs -&gt; unit" Usage="listView.OnItemSelectionChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemSelectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.ListViewItemSelectionChangedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnItemSelectionChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected override void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseHover (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseHover(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseHover : EventArgs -&gt; unit" Usage="listView.OnMouseHover e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseHover" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Forms.ListView.OnMouseHover%2A> 메서드는 마우스를 올려는 <xref:System.Windows.Forms.ListViewItem>는 메서드에서 발생는 <xref:System.Windows.Forms.ListView.ItemMouseHover> 이벤트입니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnMouseHover%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseLeave : EventArgs -&gt; unit" Usage="listView.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnParentChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnParentChanged : EventArgs -&gt; unit" Usage="listView.OnParentChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.ParentChanged" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnResize(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnResize : EventArgs -&gt; unit" Usage="listView.OnResize e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.Resize" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRetrieveVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnRetrieveVirtualItem (System.Windows.Forms.RetrieveVirtualItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRetrieveVirtualItem(class System.Windows.Forms.RetrieveVirtualItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRetrieveVirtualItem (e As RetrieveVirtualItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRetrieveVirtualItem(System::Windows::Forms::RetrieveVirtualItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRetrieveVirtualItem : System.Windows.Forms.RetrieveVirtualItemEventArgs -&gt; unit&#xA;override this.OnRetrieveVirtualItem : System.Windows.Forms.RetrieveVirtualItemEventArgs -&gt; unit" Usage="listView.OnRetrieveVirtualItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.RetrieveVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.RetrieveVirtualItemEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnRetrieveVirtualItem%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftLayoutChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRightToLeftLayoutChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRightToLeftLayoutChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRightToLeftLayoutChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRightToLeftLayoutChanged : EventArgs -&gt; unit&#xA;override this.OnRightToLeftLayoutChanged : EventArgs -&gt; unit" Usage="listView.OnRightToLeftLayoutChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSearchForVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnSearchForVirtualItem (System.Windows.Forms.SearchForVirtualItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSearchForVirtualItem(class System.Windows.Forms.SearchForVirtualItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSearchForVirtualItem (e As SearchForVirtualItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSearchForVirtualItem(System::Windows::Forms::SearchForVirtualItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSearchForVirtualItem : System.Windows.Forms.SearchForVirtualItemEventArgs -&gt; unit&#xA;override this.OnSearchForVirtualItem : System.Windows.Forms.SearchForVirtualItemEventArgs -&gt; unit" Usage="listView.OnSearchForVirtualItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.SearchForVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.SearchForVirtualItemEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.SearchForVirtualItem" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnSearchForVirtualItem%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectedIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectedIndexChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelectedIndexChanged : EventArgs -&gt; unit&#xA;override this.OnSelectedIndexChanged : EventArgs -&gt; unit" Usage="listView.OnSelectedIndexChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnSelectedIndexChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected override void OnSystemColorsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSystemColorsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSystemColorsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSystemColorsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSystemColorsChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnSystemColorsChanged : EventArgs -&gt; unit" Usage="listView.OnSystemColorsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVirtualItemsSelectionRangeChanged (System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVirtualItemsSelectionRangeChanged(class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnVirtualItemsSelectionRangeChanged (e As ListViewVirtualItemsSelectionRangeChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnVirtualItemsSelectionRangeChanged(System::Windows::Forms::ListViewVirtualItemsSelectionRangeChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnVirtualItemsSelectionRangeChanged : System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs -&gt; unit&#xA;override this.OnVirtualItemsSelectionRangeChanged : System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs -&gt; unit" Usage="listView.OnVirtualItemsSelectionRangeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OwnerDraw">
      <MemberSignature Language="C#" Value="public bool OwnerDraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OwnerDraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.OwnerDraw" />
      <MemberSignature Language="VB.NET" Value="Public Property OwnerDraw As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OwnerDraw { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OwnerDraw : bool with get, set" Usage="System.Windows.Forms.ListView.OwnerDraw" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ListView" /> control is drawn by the operating system or by code that you provide.</summary>
        <value>
          <see langword="true" /> 경우는 <see cref="T:System.Windows.Forms.ListView" /> 가 제공 하는 코드에서 컨트롤을 그리는 <see langword="false" /> 경우는 <see cref="T:System.Windows.Forms.ListView" /> 운영 체제에 의해 제어 그려집니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.ListView> 컨트롤 운영 체제에서 일반적으로 그려집니다. 모양을 사용자 지정 하기 위해 <xref:System.Windows.Forms.ListView> 항목, 하위 항목 및 열 머리글, 집합의 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> 속성을 `true` 다음 이벤트 중 하나 이상에 대 한 처리기를 제공 하 고: <xref:System.Windows.Forms.ListView.DrawItem>, <xref:System.Windows.Forms.ListView.DrawSubItem>, <xref:System.Windows.Forms.ListView.DrawColumnHeader>합니다. 이 소유자 그리기 호출 됩니다. 때는 <xref:System.Windows.Forms.ListView.View%2A> 속성이로 설정 되어 <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>, 모든 이벤트가 발생 합니다; 그렇지 않으면만 <xref:System.Windows.Forms.ListView.DrawItem> 이벤트가 발생 합니다.  
  
> [!NOTE]
>  하위 항목 정보는 일반적으로 tile 보기에 표시으로 세부 정보를 볼 수는 tile 보기에서 해당 그려야에 대 한 처리기는 <xref:System.Windows.Forms.ListView.DrawItem> 이벤트입니다. <xref:System.Windows.Forms.ListView.DrawSubItem> 되지 않은 하위 항목에 대 한 이벤트가 발생 하지 않는 <xref:System.Windows.Forms.ColumnHeader> 에 추가 된 개체는 <xref:System.Windows.Forms.ListView.Columns%2A> 컬렉션입니다. 이때 또한 각각의 첫 번째 하위 <xref:System.Windows.Forms.ListViewItem> 개체 부모 항목 자체를 나타내며 첫 번째 열에 표시 됩니다.  
  
 자세히 보기에서 처리할 수 있습니다는 <xref:System.Windows.Forms.ListView.DrawItem> 백그라운드 등의 모든 하위 항목에 공통 되는 요소를 그리기를 처리 해야 하는 이벤트는 <xref:System.Windows.Forms.ListView.DrawSubItem> 텍스트 값과 같은 개별 하위 항목에 대 한 요소를 그리는 데 이벤트입니다. 모든 항목을 그릴 수도 있습니다는 <xref:System.Windows.Forms.ListView> 편하게 사용 될 수 있지만 두 개의 이벤트 중 하나에 사용 하 여 제어 합니다. 자세히 보기에서 열 머리글을 그리려면 처리 해야 합니다는 <xref:System.Windows.Forms.ListView.DrawColumnHeader> 이벤트입니다.  
  
> [!NOTE]
>  그래픽 깜빡임 소유자 그리기를 재정의 하는 경우 문제를 피하려면는 <xref:System.Windows.Forms.ListView> 제어 하 고 설정의 <xref:System.Windows.Forms.ListView.DoubleBuffered%2A> 속성을 `true`합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에 대 한 사용자 지정 그리기를 제공 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.ListView> 제어 합니다. <xref:System.Windows.Forms.ListView> 예제의 컨트롤 그라데이션 배경이 합니다. 음수 값을 갖는 하위 항목에는 검은색 배경 및 빨간 전경 있어야 합니다.  
  
 에 대 한 처리기는 <xref:System.Windows.Forms.ListView.DrawItem> 이벤트 전체 항목의 배경을 그립니다. 에 대 한 처리기는 <xref:System.Windows.Forms.ListView.DrawSubItem> 이벤트 텍스트 값 및 텍스트와 음수 값이 있는 하위 항목 배경을 그립니다. 에 대 한 처리기는 <xref:System.Windows.Forms.ListView.DrawColumnHeader> 이벤트 각 열 머리글을 그립니다.  
  
 A <xref:System.Windows.Forms.ContextMenu> 구성 요소는 세부 정보 보기 및 목록 보기 간에 전환 하는 방법을 제공 합니다. 목록 보기에는 <xref:System.Windows.Forms.ListView.DrawItem> 이벤트가 발생 합니다. 이 경우 텍스트와 배경 둘 다에 그려집니다는 <xref:System.Windows.Forms.ListView.DrawItem> 이벤트 처리기입니다.  
  
 [!code-csharp[ListViewOwnerDraw#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#1)]
 [!code-vb[ListViewOwnerDraw#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.ListView.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the space between the <see cref="T:System.Windows.Forms.ListView" /> control and its contents.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Padding" /> 사이의 간격을 지정 하는 <see cref="T:System.Windows.Forms.ListView" /> 컨트롤과 내용입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 이 클래스와 관련이 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberSignature Language="F#" Value="member this.PaddingChanged : EventHandler " Usage="member this.PaddingChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.ListView.Padding" /> property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberSignature Language="F#" Value="member this.Paint : System.Windows.Forms.PaintEventHandler " Usage="member this.Paint : System.Windows.Forms.PaintEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="T:System.Windows.Forms.ListView" /> control is painted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView> 운영 체제에서 컨트롤을 그리는 또는 소유자가 그린 하므로 <xref:System.Windows.Forms.ListView.Paint> 이벤트는 발생 하지 않습니다. 소유자 그리기에 대 한 자세한 내용은 참조는 <xref:System.Windows.Forms.ListView.OwnerDraw%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RealizeProperties">
      <MemberSignature Language="C#" Value="protected void RealizeProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RealizeProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.RealizeProperties" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RealizeProperties ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RealizeProperties();" />
      <MemberSignature Language="F#" Value="member this.RealizeProperties : unit -&gt; unit" Usage="listView.RealizeProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initializes the properties of the <see cref="T:System.Windows.Forms.ListView" /> control that manage the appearance of the control.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedrawItems">
      <MemberSignature Language="C#" Value="public void RedrawItems (int startIndex, int endIndex, bool invalidateOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RedrawItems(int32 startIndex, int32 endIndex, bool invalidateOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.RedrawItems(System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RedrawItems (startIndex As Integer, endIndex As Integer, invalidateOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RedrawItems(int startIndex, int endIndex, bool invalidateOnly);" />
      <MemberSignature Language="F#" Value="member this.RedrawItems : int * int * bool -&gt; unit" Usage="listView.RedrawItems (startIndex, endIndex, invalidateOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
        <Parameter Name="invalidateOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startIndex">The index for the first item in the range to be redrawn.</param>
        <param name="endIndex">The index for the last item of the range to be redrawn.</param>
        <param name="invalidateOnly">
          <see langword="true" /> to invalidate the range of items; <see langword="false" /> to invalidate and repaint the items.</param>
        <summary>Forces a range of <see cref="T:System.Windows.Forms.ListViewItem" /> objects to be redrawn.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.RedrawItems%2A> 사용할 수 있는 메서드에 사용 여부는 <xref:System.Windows.Forms.ListView> 가상 모드에 있거나 일반 모드입니다.  
  
 경우는 <xref:System.Windows.Forms.ListView.BeginUpdate%2A> 메서드를 호출 하기 전에 호출한 <xref:System.Windows.Forms.ListView.RedrawItems%2A>, 다시 그리기 발생 하지 것입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> or <paramref name="endIndex" /> is less than 0, greater than or equal to the number of items in the <see cref="T:System.Windows.Forms.ListView" /> or, if in virtual mode, greater than the value of <see cref="P:System.Windows.Forms.ListView.VirtualListSize" />.  -or-  The given <paramref name="startIndex" /> is greater than the <paramref name="endIndex." /></exception>
      </Docs>
    </Member>
    <Member MemberName="RetrieveVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RetrieveVirtualItem As RetrieveVirtualItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::RetrieveVirtualItemEventHandler ^ RetrieveVirtualItem;" />
      <MemberSignature Language="F#" Value="member this.RetrieveVirtualItem : System.Windows.Forms.RetrieveVirtualItemEventHandler " Usage="member this.RetrieveVirtualItem : System.Windows.Forms.RetrieveVirtualItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RetrieveVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="T:System.Windows.Forms.ListView" /> is in virtual mode and requires a <see cref="T:System.Windows.Forms.ListViewItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Forms.ListView> 개체 가상 모드에 있으면 만듭니다 <xref:System.Windows.Forms.ListViewItem> 동적으로 사용 하는 대신 개체는 <xref:System.Windows.Forms.ListView.Items%2A> 컬렉션입니다. 개체를 만들어야 하는 경우이 이벤트는 발생 한 <xref:System.Windows.Forms.ListViewItem> 개체입니다. 이 이벤트에 대 한 처리기를 적절 한 만들어야 <xref:System.Windows.Forms.ListViewItem> 캐시에서 검색 하 고 다시 여 통해의 전달 된 <xref:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item%2A> 속성입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 이벤트에 대 한 처리기를 보여 줍니다. 이 예제에서는 listView1 필요한 각 <xref:System.Windows.Forms.ListViewItem> 에 해당 항목이 있는 인덱스의 제곱을 표시 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Windows.Forms.ListView.VirtualMode%2A> 속성입니다.  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#2)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item" /> property is not set to an item when the <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> event is handled.</exception>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayout">
      <MemberSignature Language="C#" Value="public virtual bool RightToLeftLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeftLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.RightToLeftLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeftLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool RightToLeftLayout { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeftLayout : bool with get, set" Usage="System.Windows.Forms.ListView.RightToLeftLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the control is laid out from right to left.</summary>
        <value>
          <see langword="true" /> 나타내는 <see cref="T:System.Windows.Forms.ListView" /> 컨트롤은의 레이아웃이 오른쪽에서 왼쪽, 그렇지 않으면 <see langword="false" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView> 오른쪽에서 왼쪽으로 읽는 언어를 여기서 속성 국가별 응용 프로그램에서 사용 됩니다. 설정한 경우 <xref:System.Windows.Forms.ListView> 및 <xref:System.Windows.Forms.RightToLeft> 컨트롤의 내용 및 텍스트를 true로 배치 됩니다 오른쪽에서 왼쪽으로 매깁니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RightToLeftLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RightToLeftLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RightToLeftLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.RightToLeftLayoutChanged : EventHandler " Usage="member this.RightToLeftLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.ListView.RightToLeftLayout" /> property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.ListView.RightToLeftLayoutChanged> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.ListView> 라는 `ListView1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.ListView.RightToLeftLayoutChanged> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#462](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#462)]
 [!code-vb[System.Windows.Forms.EventExamples#462](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#462)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scrollable">
      <MemberSignature Language="C#" Value="public bool Scrollable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Scrollable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Scrollable" />
      <MemberSignature Language="VB.NET" Value="Public Property Scrollable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Scrollable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Scrollable : bool with get, set" Usage="System.Windows.Forms.ListView.Scrollable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether a scroll bar is added to the control when there is not enough room to display all items.</summary>
        <value>
          <see langword="true" /> 사용자는 모든 항목을 볼 수 있도록 필요한 경우 컨트롤에 스크롤 막대가 추가 되 면 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성이로 설정 된 경우 `true`, <xref:System.Windows.Forms.ListView> 항목 수가 컨트롤의 클라이언트 영역 크기를 초과 하는 경우 사용할 세로 스크롤 막대를 표시 합니다. 이 속성을 사용 하 여 사용자에서 사용할 수 있는 모든 항목에 액세스할 수 있도록는 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
> [!NOTE]
>  버전의 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 버전 2.0 이전 열 머리글이 그려지지 않습니다 올바르게이 속성을 설정할 때 `false` 를 더 크게 컨트롤의 크기 조정 합니다. 이 문제를 해결 하려면이 속성을 설정 `true` 에 <xref:System.Windows.Forms.Form.ResizeBegin> 이벤트 처리기로 다시 설정 하 고 `false` 에 <xref:System.Windows.Forms.Form.ResizeEnd> 이벤트 처리기입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchForVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.SearchForVirtualItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SearchForVirtualItem As SearchForVirtualItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::SearchForVirtualItemEventHandler ^ SearchForVirtualItem;" />
      <MemberSignature Language="F#" Value="member this.SearchForVirtualItem : System.Windows.Forms.SearchForVirtualItemEventHandler " Usage="member this.SearchForVirtualItem : System.Windows.Forms.SearchForVirtualItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SearchForVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="T:System.Windows.Forms.ListView" /> is in virtual mode and a search is taking place.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트가 발생할 때 한 <xref:System.Windows.Forms.ListView> 가 가상 모드에 및 <xref:System.Windows.Forms.ListView.FindNearestItem%2A> 또는 <xref:System.Windows.Forms.ListView.FindItemWithText%2A> 메서드를 호출 합니다. 한 항목에서 제공 하는 항목 목록에서 계산 해야이 이벤트를 처리 하는 경우는 <xref:System.Windows.Forms.ListView.Items%2A> 속성 검색 조건과 일치 하 고 집합의 <xref:System.Windows.Forms.SearchForVirtualItemEventArgs.Index%2A?displayProperty=nameWithType> 속성의 인덱스에는 <xref:System.Windows.Forms.ListViewItem>합니다. 항목을 제공 하지 않으면 <xref:System.Windows.Forms.ListView.FindNearestItem%2A> 및 <xref:System.Windows.Forms.ListView.FindItemWithText%2A> 돌아갑니다 `null`합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 검색을 처음 10 천 제곱의 목록에 지정 된 정수를 가장 가까운 항목을 반환합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Windows.Forms.ListView.VirtualMode%2A> 속성입니다.  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#4)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.SelectedIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedIndexChanged;" />
      <MemberSignature Language="F#" Value="member this.SelectedIndexChanged : EventHandler " Usage="member this.SelectedIndexChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="P:System.Windows.Forms.ListView.SelectedIndices" /> collection changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.SelectedIndices%2A> 컬렉션이 변경 될 때마다는 <xref:System.Windows.Forms.ListViewItem.Selected%2A> 의 속성을 <xref:System.Windows.Forms.ListViewItem> 변경 합니다. 속성 변경 하는 프로그래밍 방식으로 발생할 수 있습니다 시기 또는 사용자가 항목을 선택 하거나 항목의 선택을 해제 합니다. Ctrl 키를 눌러 여러 선택을 수행 하지 않고 항목을 선택 하는 경우 컨트롤에는 먼저 이전 선택이 해제 합니다. 이 경우이 이벤트는 이전에 선택 된 각 항목에 대해 한 번씩 및 새로 선택 된 항목을 한 번씩 발생 합니다.  
  
 선택 된 항목을 결정 하는 <xref:System.Windows.Forms.ListView> 컨트롤을 사용 하 여는 <xref:System.Windows.Forms.ListView.SelectedItems%2A> 속성에 액세스는 <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>합니다. 선택한 항목에 대 한 변경 될 때마다 작업을 수행 하도록이 이벤트에 대 한 이벤트 처리기를 만들 수는 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.ListView.SelectedItems%2A> 속성 <xref:System.Windows.Forms.ListView.SelectedIndexChanged> 이벤트 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> 멤버 및 <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection> 클래스입니다. 이 예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여넣습니다는 <xref:System.Windows.Forms.ListView> 라는 개체 `ListView1` 및 <xref:System.Windows.Forms.TextBox> 라는 `TextBox1`합니다. 호출 된 `InitializeListView` 폼의 생성자에서 메서드 또는 `Load` 메서드. 이 예제에서는 이벤트 처리기에 올바르게 연결는 <xref:System.Windows.Forms.ListView.SelectedIndexChanged> 이벤트  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
        <altmember cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedIndexCollection SelectedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/SelectedIndexCollection SelectedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SelectedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedIndices As ListView.SelectedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::SelectedIndexCollection ^ SelectedIndices { System::Windows::Forms::ListView::SelectedIndexCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedIndices : System.Windows.Forms.ListView.SelectedIndexCollection" Usage="System.Windows.Forms.ListView.SelectedIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the indexes of the selected items in the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" /> 선택 된 항목의 인덱스를 포함 하 합니다. 현재 선택 된 항목이 없으면 빈 <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" /> 반환 됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.SelectedIndices%2A> 하기 전에 속성에 액세스 하는 경우 모든 인덱스가 포함 되지 것입니다는 <xref:System.Windows.Forms.ListView> 핸들 만들 일반적 때는 <xref:System.Windows.Forms.ListView> 폼에 표시 하기 위해 처음에 로드 됩니다. 으로 핸들을 만들 경우 참조를 확인할 수 있습니다는 <xref:System.Windows.Forms.Control.IsHandleCreated%2A> 속성입니다. 경우는 <xref:System.Windows.Forms.ListView.MultiSelect%2A> 속성이 `true`,이 속성에서 선택 된 모든 항목의 인덱스를 포함 하는 컬렉션을 반환는 <xref:System.Windows.Forms.ListView>합니다. 단일 선택에 대 한 <xref:System.Windows.Forms.ListView>에 있는 유일한 선택한 항목의 인덱스를 포함 하는 단일 요소를 포함 하는 컬렉션을 반환 하는이 속성은 <xref:System.Windows.Forms.ListView>합니다. 컬렉션의 항목으로 수행할 수 있는 작업에 대 한 자세한 내용은 참조 하십시오. <xref:System.Windows.Forms.ListView.SelectedIndexCollection>합니다.  
  
 선택 된 항목의 컬렉션을 가져오려면 하려는 경우는 <xref:System.Windows.Forms.ListView> 사용 하 여 항목에 선택 된 인덱스 위치 대신은 <xref:System.Windows.Forms.ListView.SelectedItems%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Windows.Forms.ListView.SelectedIndices%2A>, <xref:System.Windows.Forms.ListView.SelectedIndexChanged>, 및 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> 멤버 및 <xref:System.Windows.Forms.ListView.SelectedIndexCollection> 클래스입니다. 이 예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여넣습니다는 <xref:System.Windows.Forms.ListView> 라는 개체 `ListView1` 및 <xref:System.Windows.Forms.TextBox> 라는 `TextBox1`합니다. 호출 된 `InitializeListView` 폼의 생성자에서 메서드 또는 `Load` 메서드. 이 예제에서는 이벤트 처리기에 올바르게 연결는 <xref:System.Windows.Forms.ListView.SelectedIndexChanged> 이벤트입니다.  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#3)]
[!code-csharp[System.Windows.Forms.ListView1#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#3)]
[!code-vb[System.Windows.Forms.ListView1#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedListViewItemCollection SelectedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/SelectedListViewItemCollection SelectedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SelectedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedItems As ListView.SelectedListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::SelectedListViewItemCollection ^ SelectedItems { System::Windows::Forms::ListView::SelectedListViewItemCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedItems : System.Windows.Forms.ListView.SelectedListViewItemCollection" Usage="System.Windows.Forms.ListView.SelectedItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the items that are selected in the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" /> 컨트롤에서 선택 된 항목이 들어 있는입니다. 현재 선택 된 항목이 없으면 빈 <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" /> 반환 됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.SelectedItems%2A> 하기 전에 속성에 액세스 하는 경우 모든 항목이 포함 되지 것입니다는 <xref:System.Windows.Forms.ListView> 핸들 만들 일반적 때 <xref:System.Windows.Forms.ListView> 폼에 표시 하기 위해 처음에 로드 됩니다. 으로 핸들을 만들 경우 참조를 확인할 수 있습니다는 <xref:System.Windows.Forms.Control.IsHandleCreated%2A> 속성입니다. 때는 <xref:System.Windows.Forms.ListView.MultiSelect%2A> 속성이로 설정 되어 `true`에서 선택 된 항목이 포함 된 컬렉션을 반환 하는이 속성은 <xref:System.Windows.Forms.ListView>합니다. 단일 선택에 대 한 <xref:System.Windows.Forms.ListView>에서 선택한 항목만 포함 하는 컬렉션을 반환 하는이 속성은 <xref:System.Windows.Forms.ListView>합니다. 컬렉션의 항목으로 수행할 수 있는 작업에 대 한 자세한 내용은 참조 하십시오. <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>합니다.  
  
 컬렉션 내의 인덱스 위치를 가져오는 하려는 경우는 <xref:System.Windows.Forms.ListView.ListViewItemCollection> 에서 선택 된 항목의는 <xref:System.Windows.Forms.ListView> 컨트롤을 사용 하 여 항목을 선택 하는 대신는 <xref:System.Windows.Forms.ListView.SelectedIndices%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Windows.Forms.ListView.SelectedItems%2A>, <xref:System.Windows.Forms.ListView.SelectedIndexChanged> 이벤트, 및 <xref:System.Windows.Forms.ListView.HeaderStyle%2A> 멤버 및 <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection> 클래스. 이 예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여넣습니다는 <xref:System.Windows.Forms.ListView> 라는 개체 `ListView1` 및 <xref:System.Windows.Forms.TextBox> 라는 `TextBox1`합니다. 호출 된 `InitializeListView` 폼의 생성자에서 메서드 또는 `Load` 메서드. 이 예제에서는 이벤트 처리기에 올바르게 연결는 <xref:System.Windows.Forms.ListView.SelectedIndexChanged> 이벤트  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
      </Docs>
    </Member>
    <Member MemberName="ShowGroups">
      <MemberSignature Language="C#" Value="public bool ShowGroups { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowGroups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ShowGroups" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowGroups As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowGroups { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowGroups : bool with get, set" Usage="System.Windows.Forms.ListView.ShowGroups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether items are displayed in groups.</summary>
        <value>
          <see langword="true" /> 그룹에서 항목을 표시 하려면 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 그룹에 할당 한 <xref:System.Windows.Forms.ListView> 컨트롤이 표시 될 때마다는 <xref:System.Windows.Forms.ListView.View%2A> 속성 이외의 값으로 설정 됩니다 <xref:System.Windows.Forms.View.List>합니다. <xref:System.Windows.Forms.ListView> 그룹화 기능을 논리적으로 관련 된 시각적 그룹을 만들 수 있습니다 <xref:System.Windows.Forms.ListView> Windows XP 및 Windows Server 2003에 있는 항목입니다. 이 기능을 사용 하려면 응용 프로그램에서 호출 해야 합니다는 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> 메서드. 자세한 내용은 <xref:System.Windows.Forms.ListView.Groups%2A> 속성을 참조하세요.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Groups" />
        <altmember cref="T:System.Windows.Forms.ListViewGroup" />
        <altmember cref="T:System.Windows.Forms.ListViewGroupCollection" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="ShowItemToolTips">
      <MemberSignature Language="C#" Value="public bool ShowItemToolTips { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowItemToolTips" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ShowItemToolTips" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowItemToolTips As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowItemToolTips { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowItemToolTips : bool with get, set" Usage="System.Windows.Forms.ListView.ShowItemToolTips" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether ToolTips are shown for the <see cref="T:System.Windows.Forms.ListViewItem" /> objects contained in the <see cref="T:System.Windows.Forms.ListView" />.</summary>
        <value>
          <see langword="true" /> 경우 <see cref="T:System.Windows.Forms.ListViewItem" /> 고, 그렇지 않으면 표시 된 도구 설명 해야 <see langword="false" />합니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Forms.ListView.ShowItemToolTips%2A> 속성이 `true`있으면 모든 <xref:System.Windows.Forms.ListViewItem> 표시 도구 설명 됩니다; 그렇지 않으면 아무 것도 표시 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.ListView.ShowItemToolTips%2A> 및 <xref:System.Windows.Forms.ListViewItem.ToolTipText%2A?displayProperty=nameWithType> 속성입니다. 이 예제를 실행 하려면 Windows Form과 호출에 코드를 붙여 `InitializeItemsWithToolTips` 폼의 생성자 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리기입니다.  
  
 [!code-csharp[System.Windows.Forms.ListViewItemWhidbeyMembers#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemWhidbeyMembers/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.ListViewItemWhidbeyMembers#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemWhidbeyMembers/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmallImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList SmallImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList SmallImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SmallImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property SmallImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ SmallImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SmallImageList : System.Windows.Forms.ImageList with get, set" Usage="System.Windows.Forms.ListView.SmallImageList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.ImageList" /> to use when displaying items as small icons in the control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" /> 때 사용할 아이콘을 포함 하는 <see cref="P:System.Windows.Forms.ListView.View" /> 속성이 <see cref="F:System.Windows.Forms.View.SmallIcon" />합니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성을 지정할 수 있습니다는 <xref:System.Windows.Forms.ImageList> 작은 아이콘으로 항목을 표시할 때 사용할 아이콘을 포함 하는 개체 (때는 <xref:System.Windows.Forms.ListView.View%2A> 속성 이외의 값으로 설정 되어 <xref:System.Windows.Forms.View.LargeIcon>). <xref:System.Windows.Forms.ListView> 컨트롤 그래픽 형식으로 사용할 수는 <xref:System.Windows.Forms.ImageList> 아이콘을 표시할 때 컨트롤을 지원 합니다. <xref:System.Windows.Forms.ListView> 컨트롤.ico 파일에 제한 되지 않습니다. 한 번는 <xref:System.Windows.Forms.ImageList> 에 할당 되는 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성을 설정한는 <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> 각 속성 <xref:System.Windows.Forms.ListViewItem> 에 <xref:System.Windows.Forms.ListView> 컨트롤에 적절 한 이미지의 인덱스 위치에는 <xref:System.Windows.Forms.ImageList>합니다. 에 대 한 아이콘의 크기는 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 지정는 <xref:System.Windows.Forms.ImageList.ImageSize%2A> 속성입니다.  
  
 에 대해 지정할 수 하나의 인덱스 때문에 <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A?displayProperty=nameWithType> 속성에는 <xref:System.Windows.Forms.ImageList> 에 지정 된 개체는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성 표시 하려면 이미지에 대 한 동일한 인덱스 위치에 있어야 합니다. 예를 들어 경우는 <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> 속성의는 <xref:System.Windows.Forms.ListViewItem> 설정 된 0으로 소규모 조직과 대규모 아이콘에 대 한 사용 하도록 이미지에 동일한 인덱스 위치에 있어야는 <xref:System.Windows.Forms.ImageList> 에 지정 된 개체는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성입니다.  
  
> [!NOTE]
>  이미지는 키에 지정 여전히 각 이미지 목록에 동일한 인덱스 위치에서 이미지의 버전 소규모 조직과 대규모를 배치 해야 합니다. 뷰를 전환할 때 하나의 목록에 있는 이미지의 인덱스 위치를 지정 된 키 값에 관계 없이 다른 목록에 이미지를 찾을 사용 됩니다.  
  
 설정 하는 <xref:System.Windows.Forms.ImageList> 큰 아이콘으로 항목을 표시할 때 사용할 (때는 <xref:System.Windows.Forms.ListView.View%2A> 속성이로 설정 되어 <xref:System.Windows.Forms.View.LargeIcon>)를 사용 하 여는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 속성입니다. 이미지를 표시 하려면 항목 상태를 사용 하 여 사용 하려는 경우는 <xref:System.Windows.Forms.ListView.StateImageList%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 한 <xref:System.Windows.Forms.ListView> 3 개 컨트롤 <xref:System.Windows.Forms.ListViewItem> 지정 된 개체 및 3 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> 각 항목에 대해 지정 된 개체입니다. 예제에서는 <xref:System.Windows.Forms.ColumnHeader> 자세히 보기의 하위 항목을 표시 하는 개체입니다. 두 개의 <xref:System.Windows.Forms.ImageList> 개체에 대 한 이미지를 제공 하는 코드 예제에서는 만들어집니다는 <xref:System.Windows.Forms.ListViewItem> 개체입니다. 이러한 <xref:System.Windows.Forms.ImageList> 개체에 추가 되는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성입니다. 이 예제에서는 만들기에서 다음 속성을 사용 하 여는 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 이 예제에서는 코드를 추가 했는지는 <xref:System.Windows.Forms.Form> 생성자 나 폼에서 다른 방법의 예제에서 만든 메서드를 호출 합니다. 이 예제는 또한 라는 이미지가에서는 `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, 및 `MyLargeImage2` C 드라이브의 루트 디렉터리에 있는  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
        <altmember cref="P:System.Windows.Forms.ListView.LargeImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort();" />
      <MemberSignature Language="F#" Value="member this.Sort : unit -&gt; unit" Usage="listView.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sorts the items of the list view.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 항목이 사용 하 여 정렬 되는 <xref:System.Windows.Forms.ListView.Sorting%2A> 항목 텍스트를 기준으로 항목을 정렬 하는 속성입니다. 정렬 순서를 사용자 지정을 구현 하는 클래스를 작성 해야는 <xref:System.Collections.IComparer> 인터페이스를 설정의 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> 해당 클래스의 개체에는 속성입니다. 예를 들어 하위 항목 텍스트도 항목을 정렬 하려는 경우 유용, 합니다. 항목을 수동으로 정렬 수행에 대 한 자세한 내용은 참조에 대 한 예제는 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> 속성입니다.  
  
 경우는 <xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType> 속성 이외의 값으로 설정 됩니다 <xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType> 또는 경우에는 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> 속성이 설정 되어 있으면 목록 항목이 추가 될 때 자동으로 정렬 됩니다. 항목은 레이블 텍스트가 변경 될 때 자동으로 정렬 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.ListViewItemSorter" />
      </Docs>
    </Member>
    <Member MemberName="Sorting">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.SortOrder Sorting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SortOrder Sorting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Sorting" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorting As SortOrder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::SortOrder Sorting { System::Windows::Forms::SortOrder get(); void set(System::Windows::Forms::SortOrder value); };" />
      <MemberSignature Language="F#" Value="member this.Sorting : System.Windows.Forms.SortOrder with get, set" Usage="System.Windows.Forms.ListView.Sorting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SortOrder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the sort order for items in the control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.SortOrder" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Windows.Forms.SortOrder.None" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.Sorting%2A> 속성을 사용 하면 항목이 정렬 되는 여부를 지정할 수 있습니다는 <xref:System.Windows.Forms.ListView> 제어 합니다. 기본적으로 정렬 없음 수행 됩니다. 경우는 <xref:System.Windows.Forms.ListView.Sorting%2A> 속성이로 설정 되어 <xref:System.Windows.Forms.SortOrder.Ascending> 또는 <xref:System.Windows.Forms.SortOrder.Descending>에 있는 항목의 <xref:System.Windows.Forms.ListView> 오름차순에서 자동으로 정렬 됩니다 (속성이로 설정 된 경우 <xref:System.Windows.Forms.SortOrder.Ascending>) 영문자 순 또는 내림차순 (때는 속성이 <xref:System.Windows.Forms.SortOrder.Descending>). 에 표시 되는 항목을 자동으로 정렬 하려면이 속성을 사용할 수 있습니다 프로그램 <xref:System.Windows.Forms.ListView> 컨트롤을 쉽게 사용할 수 없는 항목 수가 많은 경우 항목을 찾을 수 있습니다.  
  
 사용자 고유의 항목을 사용 하는 대신 정렬을 수행 하려는 경우는 <xref:System.Windows.Forms.ListView.Sorting%2A> 속성을 사용 하 여는 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> 함께에서 속성은 <xref:System.Windows.Forms.ListView.Sort%2A> 메서드.  
  
 경우는 <xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType> 속성 이외의 값으로 설정 됩니다 <xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType> 또는 경우에는 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> 속성이 설정 되어 있으면 목록이 자동으로 정렬 됩니다 항목을 추가 하는 경우. 항목은 레이블 텍스트가 변경 될 때 자동으로 정렬 되지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 한 <xref:System.Windows.Forms.ListView> 3 개 컨트롤 <xref:System.Windows.Forms.ListViewItem> 지정 된 개체 및 3 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> 각 항목에 대해 지정 된 개체입니다. 예제에서는 <xref:System.Windows.Forms.ColumnHeader> 자세히 보기의 하위 항목을 표시 하는 개체입니다. 두 개의 <xref:System.Windows.Forms.ImageList> 개체에 대 한 이미지를 제공 하는 코드 예제에서는 만들어집니다는 <xref:System.Windows.Forms.ListViewItem> 개체입니다. 이러한 <xref:System.Windows.Forms.ImageList> 개체에 추가 되는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성입니다. 이 예제에서는 만들기에서 다음 속성을 사용 하 여는 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 이 예제에서는 코드를 추가 했는지는 <xref:System.Windows.Forms.Form> 생성자 나 폼에서 다른 방법의 예제에서 만든 메서드를 호출 합니다. 이 예제는 또한 라는 이미지가에서는 `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, 및 `MyLargeImage2` C 드라이브의 루트 디렉터리에 있는  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is not one of the <see cref="T:System.Windows.Forms.SortOrder" /> values.</exception>
        <altmember cref="T:System.Windows.Forms.SortOrder" />
      </Docs>
    </Member>
    <Member MemberName="StateImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList StateImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList StateImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.StateImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property StateImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ StateImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StateImageList : System.Windows.Forms.ImageList with get, set" Usage="System.Windows.Forms.ListView.StateImageList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Windows.Forms.ImageList" /> associated with application-defined states in the control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" /> 프로그램 응용 프로그램 정의 항목의 상태를 나타내는 데 사용할 수 있는 상태 이미지의 집합을 포함 하 합니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.StateImageList%2A> 속성을 지정할 수 있습니다는 <xref:System.Windows.Forms.ImageList> 프로그램에 있는 항목의 응용 프로그램별 상태를 나타내는 데 사용할 이미지를 포함 하는 <xref:System.Windows.Forms.ListView> 제어 합니다. 상태 이미지 항목에 대 한 아이콘의 왼쪽에 표시 됩니다. Checked 및 unchecked 확인란과 같은 상태 이미지를 응용 프로그램 정의 항목 상태를 나타내기 위해 사용할 수 있습니다. 상태 이미지의 모든 보기에 표시 되는 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
 경우는 <xref:System.Windows.Forms.ImageList> 에 지정 된는 <xref:System.Windows.Forms.ListView.StateImageList%2A> 속성 및 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> 속성이 `true`의 이미지 인덱스가 0과 1에는 <xref:System.Windows.Forms.ImageList> 확인란 대신 표시 됩니다. 인덱스 위치 0에 있는 이미지 선택 취소 되어 있음된 확인란 대신 나타나고 인덱스 1 위치에 이미지 선택 된 확인란 대신 표시 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.LargeImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.SmallImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.ListView.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property is not relevant for this class.</summary>
        <value>에 표시할 텍스트는 <see cref="T:System.Windows.Forms.ListView" /> 제어 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 이 클래스와 관련이 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberSignature Language="F#" Value="member this.TextChanged : EventHandler " Usage="member this.TextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="P:System.Windows.Forms.ListView.Text" /> property changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TileSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size TileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size TileSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.TileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property TileSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size TileSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.TileSize : System.Drawing.Size with get, set" Usage="System.Windows.Forms.ListView.TileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the size of the tiles shown in tile view.</summary>
        <value>A <see cref="T:System.Drawing.Size" /> 새 타일 크기를 포함 하는 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 경우 바둑판의 크기를 속성 제어는 <xref:System.Windows.Forms.ListView.View%2A> 속성이 <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>합니다. 이 속성을 설정 하는 것은 하위 항목 텍스트 한 줄에 표시할 너무 깁니다 때 줄 바꿈을 방지 하는 데 유용 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.ListView> 바둑판식 배열 기능입니다. 예제에서는 tile 보기에는 책을 나타내는 항목이 표시 됩니다. 각 항목의 책, 제목, 만든이 및 게시 연도 아이콘이 포함 된 타일로 표시 됩니다. 실행 되도록 예제 코드에 대 한 예제와 동일한 디렉터리에 Book.ico 라는 아이콘 파일을 포함 해야 합니다. 타일에 주석, 아이콘 하지 않고도 볼 보려면는 <xref:System.Windows.Forms.ImageList> 개체입니다.  
  
 [!code-cpp[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/CPP/listviewtilingexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/CS/listviewtilingexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/VB/listviewtilingexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="TopItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem TopItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewItem TopItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.TopItem" />
      <MemberSignature Language="VB.NET" Value="Public Property TopItem As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewItem ^ TopItem { System::Windows::Forms::ListViewItem ^ get(); void set(System::Windows::Forms::ListViewItem ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TopItem : System.Windows.Forms.ListViewItem with get, set" Usage="System.Windows.Forms.ListView.TopItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the first visible item in the control.</summary>
        <value>A <see cref="T:System.Windows.Forms.ListViewItem" /> 컨트롤에 표시 되는 첫 번째 항목을 나타내는입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 영 (0)의 인덱스 위치에 있는 항목의 맨 처음은 <xref:System.Windows.Forms.ListView> 제어 합니다. 경우는 <xref:System.Windows.Forms.ListView> 컨트롤 내용이 스크롤됩니다, 다른 항목 컨트롤의 맨 위에 있을 수 있습니다. 이 속성을 사용 하 여을 나타내거나 위쪽에 표시 되는 항목을 결정 하는 <xref:System.Windows.Forms.ListView> 제어 합니다. 값은 <xref:System.Windows.Forms.ListView.TopItem%2A> 속성 유지 되지 않을, 위치에 따라 원하는 맨 위 항목 목록 보기에 있습니다.  
  
 에 표시 되는 항목의 수는 <xref:System.Windows.Forms.ListView> 언제 든 지 컨트롤 목록 보기의 높이 및 포함 된 항목의 크기에 따라 달라 집니다. 항목 목록 보기의 높이 초과 하는 경우 항목을 통해 스크롤하여 볼 수 있는 여러 페이지에 계속 됩니다. 설정 하는 경우는 <xref:System.Windows.Forms.ListView.TopItem%2A> 속성 항목의 마지막 페이지에는 <xref:System.Windows.Forms.ListView>, 항목은 자동으로 스크롤하여 볼 수 있습니다; 그러나 <xref:System.Windows.Forms.ListView.TopItem%2A> 마지막 페이지의 맨 위 실제 항목으로 설정 됩니다.  
  
 되도록 특정 항목에 컨트롤의 표시 영역 (반드시 위쪽 위치에)를 사용 하 여는 <xref:System.Windows.Forms.ListView.EnsureVisible%2A> 메서드.  
  
> [!NOTE]
>  이 속성을 설정 하는 것이 없는 때 적용 된 <xref:System.Windows.Forms.ListView.Scrollable%2A> 속성 값은 `false`합니다.  
>   
>  이 속성의 버전에서 지원 되지 않습니다는 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 버전 2.0 이전 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는의 스타일을 다시 설정 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.ListViewItem> 개체의 하위 항목을 사용 하 여는 <xref:System.Windows.Forms.ListView.TopItem%2A> 속성 및 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem.ResetStyle%2A?displayProperty=nameWithType> 메서드. 예제를 실행 하려면 이라는 버튼을 포함 하는 폼에 다음 코드를 붙여 `Button1` 호출는 `InitializeListView` 폼의 생성자 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리기입니다.  
  
 [!code-cpp[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Forms.ListView.View" /> property is set to <see cref="F:System.Windows.Forms.View.LargeIcon" />,  <see cref="F:System.Windows.Forms.View.SmallIcon" />, or <see cref="F:System.Windows.Forms.View.Tile" />.</exception>
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="listView.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string representation of the <see cref="T:System.Windows.Forms.ListView" /> control.</summary>
        <returns>A string that states the control type, the count of items in the <see cref="T:System.Windows.Forms.ListView" /> control, and the type of the first item in the <see cref="T:System.Windows.Forms.ListView" />, if the count is not 0.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateExtendedStyles">
      <MemberSignature Language="C#" Value="protected void UpdateExtendedStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateExtendedStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.UpdateExtendedStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateExtendedStyles ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateExtendedStyles();" />
      <MemberSignature Language="F#" Value="member this.UpdateExtendedStyles : unit -&gt; unit" Usage="listView.UpdateExtendedStyles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Updates the extended styles applied to the list view control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 수는 <xref:System.Windows.Forms.ListView.UpdateExtendedStyles%2A> 에서 사용 하는 확장된 스타일을 재정의 하 여 파생된 클래스의 메서드는 <xref:System.Windows.Forms.ListView> 제어 합니다. 이 메서드를 호출 하는 경우 확인 해야 하는 확장된 스타일의 속성으로 설정의 <xref:System.Windows.Forms.ListView> 컨트롤 컨트롤의 파생된 버전에서 사용 됩니다.  
  
 다음은 확장된 스타일을 적용 되는 속성은 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
-   <xref:System.Windows.Forms.ListView.Activation%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.HoverSelection%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Activation" />
        <altmember cref="P:System.Windows.Forms.ListView.AllowColumnReorder" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
        <altmember cref="P:System.Windows.Forms.ListView.FullRowSelect" />
        <altmember cref="P:System.Windows.Forms.ListView.GridLines" />
        <altmember cref="P:System.Windows.Forms.ListView.HoverSelection" />
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleStateImageBehavior">
      <MemberSignature Language="C#" Value="public bool UseCompatibleStateImageBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCompatibleStateImageBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCompatibleStateImageBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCompatibleStateImageBehavior { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseCompatibleStateImageBehavior : bool with get, set" Usage="System.Windows.Forms.ListView.UseCompatibleStateImageBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ListView" /> uses state image behavior that is compatible with the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1 or the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0.</summary>
        <value>
          <see langword="true" /> 상태 이미지 동작 호환 되는 경우는 [! INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1; <see langword="false" /> 동작이 호환 되는 경우는 [! INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 로 변경 된 <xref:System.Windows.Forms.ListView> 컨트롤에 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0 있는지를 나타내는 항목을 선택 하거나 선택 취소 되어 있음 확정 상태로 설정 하는 사용자 지정 상태 이미지를 사용 하도록 설정 합니다. 이 기능을 추가 하 여는 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0에는.NET Framework 1.1 다르게 동작 합니다. 동작에 종속 된 응용 프로그램을 만든 경우는 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1 수 있도록는 <xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A> 속성이로 설정 되어 `true`은 기본 값입니다. 완전히 활용 하려면 사용자 지정 상태 이미지를 설정 <xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A> 를 `false`합니다.  
  
> [!NOTE]
>  사용 하는 경우는 [!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)] 디자이너는 <xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A> 속성으로 설정 됩니다 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="View">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.View View { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.View View" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.View" />
      <MemberSignature Language="VB.NET" Value="Public Property View As View" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::View View { System::Windows::Forms::View get(); void set(System::Windows::Forms::View value); };" />
      <MemberSignature Language="F#" Value="member this.View : System.Windows.Forms.View with get, set" Usage="System.Windows.Forms.ListView.View" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets how items are displayed in the control.</summary>
        <value>
          <see cref="T:System.Windows.Forms.View" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Windows.Forms.View.LargeIcon" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.View%2A> 속성을 디스플레이의 종류를 지정할 수 있습니다는 <xref:System.Windows.Forms.ListView> 컨트롤 사용 하 여 항목을 표시 합니다. 설정할 수 있습니다는 <xref:System.Windows.Forms.ListView.View%2A> 크고 작은 아이콘과 함께 각 항목 이름이 나 세로 목록에 항목을 표시 합니다. 가장 풍부한 옵션을 자세히 보기 항목 뿐만 아니라 각 항목에 대해 지정 된 모든 하위 항목을 볼 수 있습니다. 각 항목은 표의 세로 목록 및 열 머리글이 있는 열에 표시 된 각 항목에 대 한 하위 항목 표시 됩니다. 자세히 보기를 사용자에 게 데이터베이스 정보를 표시할 수 있습니다. Windows XP 및 Windows Server 2003을 사용 하 여 선택한 하위 항목 정보와 함께 큰 아이콘을 표시 하 여 그래픽 정보와 텍스트 정보 균형을 맞춘 타일로 항목을 표시할 수 있습니다. Tile 보기를 사용 하려면 응용 프로그램 호출 해야 합니다는 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> 메서드. 작은 이미지 보기 아이콘의 오른쪽에 있는 아이콘 및 텍스트 정보 각 항목을 표시합니다. 큰 이미지 보기 아이콘 및 텍스트 정보 아이콘 아래 각 항목을 표시합니다. 여는 이미지 목록에 대 한 아이콘의 크기를 지정는 <xref:System.Windows.Forms.ImageList.ImageSize%2A> 속성은 <xref:System.Windows.Forms.ImageList> 에 대 한는 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 또는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 속성입니다.  
  
> [!NOTE]
>  여러 이미지 목록을 크고 작은 아이콘 보기의 경우와 사용 중인 경우는 <xref:System.Windows.Forms.ListView> 컨트롤을 배치 해야 작은 및 큰 버전의 같은 이미지의 인덱스 위치에 각 이미지 목록의 합니다. 뷰를 전환할 때 하나의 목록에 있는 이미지의 인덱스 위치를 지정 된 키 값에 관계 없이 다른 목록에 이미지를 찾을 사용 됩니다.  
  
 대부분의 속성에는 <xref:System.Windows.Forms.ListView> 제어는 여러 보기의 동작이 나 표시에 영향을 줍니다. 항목의 보기에 영향을 주는 일부 속성은만 유용 시기는 <xref:System.Windows.Forms.ListView.View%2A> 속성이 주는 모든 보기에서 특정 값으로 설정 되어 있습니다. 예를 들어과 같은 속성 <xref:System.Windows.Forms.ListView.GridLines%2A> 및 <xref:System.Windows.Forms.ListView.FullRowSelect%2A> 은 유용한 경우는 <xref:System.Windows.Forms.ListView.View%2A> 속성이로 설정 되어 <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>, 동안는 <xref:System.Windows.Forms.ListView.MultiSelect%2A> 및 <xref:System.Windows.Forms.ListView.CheckBoxes%2A> 속성은 모든 보기에 유용 합니다.  
  
 다음 표에서 몇 가지는 <xref:System.Windows.Forms.ListView> 멤버와는 사용할 수 있는 보기입니다.  
  
|ListView 멤버|보기|  
|---------------------|----------|  
|<xref:System.Windows.Forms.ListView.Alignment%2A> 속성|<xref:System.Windows.Forms.View.SmallIcon> 또는 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoArrange%2A> 속성|<xref:System.Windows.Forms.View.SmallIcon> 또는 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> 메서드|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.CheckBoxes%2A>|제외한 모든 보기 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Columns%2A> 속성|<xref:System.Windows.Forms.View.Details> 또는 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.DrawSubItem> 이벤트|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.FindItemWithText%2A> 메서드|<xref:System.Windows.Forms.View.Details>, <xref:System.Windows.Forms.View.List>또는 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.FindNearestItem%2A> 메서드|<xref:System.Windows.Forms.View.SmallIcon> 또는 <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.GetItemAt%2A> 메서드|<xref:System.Windows.Forms.View.Details> 또는 <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Groups%2A> 속성|제외한 모든 보기 <xref:System.Windows.Forms.View.List>|  
|<xref:System.Windows.Forms.ListView.HeaderStyle%2A> 속성|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.InsertionMark%2A> 속성|<xref:System.Windows.Forms.View.LargeIcon>, <xref:System.Windows.Forms.View.SmallIcon>또는 <xref:System.Windows.Forms.View.Tile>|  
  
 사용할 수는 <xref:System.Windows.Forms.ListView.View%2A> 속성을 다른 응용 프로그램에서 데이터 뷰를 제공 하거나 해당 보기의 이점을 활용 하 여 특정 보기를 잠글 수 있습니다. 예를 들어는 <xref:System.Windows.Forms.ListView.View%2A> 종종 속성이 <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType> 세부 정보 보기는 다양 한 다른 보기에서 사용할 수 없는 옵션 보기를 제공 하기 때문에 있습니다.  
  
> [!NOTE]
>  경우 프로그램 <xref:System.Windows.Forms.ListView> 컨트롤에는 지정 된 모든 열 머리글 및 설정한는 <xref:System.Windows.Forms.ListView.View%2A> 속성을 <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>, <xref:System.Windows.Forms.ListView> 컨트롤에 모든 항목 표시 되지 것입니다. 경우에 <xref:System.Windows.Forms.ListView> 컨트롤에는 지정 된 모든 열 머리글을 설정한는 <xref:System.Windows.Forms.ListView.View%2A> 속성을 <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>, <xref:System.Windows.Forms.ListView> 컨트롤이 하위 항목을 표시 하지 것입니다.  
  
 Tile 보기 오른쪽에서 왼쪽 및 텍스트 정보에 큰 아이콘이 있는 각 항목을 표시합니다. 텍스트 정보 항목 레이블 뒤에 하위 항목을 기준으로 이루어져 있습니다. 기본적으로 항목 레이블의에 해당 하는 첫 번째 하위만 표시 됩니다. 추가 하위 항목을 표시 하려면 추가 해야 <xref:System.Windows.Forms.ColumnHeader> 개체는 <xref:System.Windows.Forms.ListView.Columns%2A> 컬렉션입니다. 각 하위 항목 타일에 열 머리글에 해당합니다. 하위 표시 되 고 표시 되는 순서를 제어 하려면 설정 해야 합니다는 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem.Name%2A?displayProperty=nameWithType> 각 항목에 대 한 속성 및 <xref:System.Windows.Forms.ColumnHeader.Name%2A?displayProperty=nameWithType> 각 헤더에 대 한 속성입니다. 그런 다음 추가, 제거 하거나 다시 정렬할 수에서 헤더는 <xref:System.Windows.Forms.ListView.Columns%2A> 원하는 결과 얻어야 하는 컬렉션입니다.  
  
 Tile 보기에서 바둑판의 크기를 제어 하려면 설정는 <xref:System.Windows.Forms.ListView.TileSize%2A> 속성입니다. 이 하위 항목 텍스트 한 줄에 비해 너무 길면 때 줄 바꿈을 방지 하는 데 유용 합니다.  
  
 Tile 보기의 예 참조는 <xref:System.Windows.Forms.ListView.TileSize%2A> 속성입니다.  
  
> [!NOTE]
>  열 세부 정보 보기에만 표시 됩니다, 있지만 자세히 보기 또는 tile 보기에서 열 머리글 없이 하위 항목 표시 되지 않습니다.  
  
 바둑판식 뷰는 응용 프로그램에서 호출 하는 경우 Windows XP 및 Windows Server 2003에만 사용할 수는 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> 메서드. 이전 운영 체제에서는 바둑판식 뷰와 관련된 코드가 아무 효과도 없으며, <xref:System.Windows.Forms.ListView> 컨트롤이 큰 아이콘 보기에 표시됩니다. 결과적으로, tile 보기에 사용 하는 코드가 제대로 작동 하지 수도 있습니다.  
  
 바둑판식 뷰는를 사용할 수 있는지 여부를 결정 하는 코드를 포함할 수도 있으며, 사용할 수 없는 경우 대체 기능을 제공할 수 있습니다. 예를 들어, 사용 하는 경우 소유자 그리기의 모양을 사용자 지정할 <xref:System.Windows.Forms.ListView> tile 보기에서 항목을 하려는 경우도 tile 보기를 지원 하지 않는 운영 체제에서 실행 하는 경우 큰 아이콘 보기에 적합 한 그리기 코드를 사용 합니다.  
  
 바둑판식 뷰 기능 운영 체제 테마 기능을 제공 하는 라이브러리에서 제공 됩니다. 이 라이브러리의 가용성을 확인 하려면 호출는 <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> 메서드 오버 로드를 전달은 <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> 값입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 한 <xref:System.Windows.Forms.ListView> 3 개 컨트롤 <xref:System.Windows.Forms.ListViewItem> 지정 된 개체 및 3 <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> 각 항목에 대해 지정 된 개체입니다. 예제에서는 <xref:System.Windows.Forms.ColumnHeader> 자세히 보기의 하위 항목을 표시 하는 개체입니다. 두 개의 <xref:System.Windows.Forms.ImageList> 개체에 대 한 이미지를 제공 하는 코드 예제에서는 만들어집니다는 <xref:System.Windows.Forms.ListViewItem> 개체입니다. 이러한 <xref:System.Windows.Forms.ImageList> 개체에 추가 되는 <xref:System.Windows.Forms.ListView.LargeImageList%2A> 및 <xref:System.Windows.Forms.ListView.SmallImageList%2A> 속성입니다. 이 예제에서는 만들기에서 다음 속성을 사용 하 여는 <xref:System.Windows.Forms.ListView> 제어 합니다.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 이 예제에서는 코드를 추가 했는지는 <xref:System.Windows.Forms.Form> 생성자 나 폼에서 다른 방법의 예제에서 만든 메서드를 호출 합니다. 이 예제는 또한 라는 이미지가에서는 `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, 및 `MyLargeImage2` C 드라이브의 루트 디렉터리에 있는  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is not one of the <see cref="T:System.Windows.Forms.View" /> values.</exception>
        <altmember cref="T:System.Windows.Forms.View" />
        <altmember cref="P:System.Windows.Forms.ListView.TileSize" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="VirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VirtualItemsSelectionRangeChanged As ListViewVirtualItemsSelectionRangeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewVirtualItemsSelectionRangeChangedEventHandler ^ VirtualItemsSelectionRangeChanged;" />
      <MemberSignature Language="F#" Value="member this.VirtualItemsSelectionRangeChanged : System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler " Usage="member this.VirtualItemsSelectionRangeChanged : System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a <see cref="T:System.Windows.Forms.ListView" /> is in virtual mode and the selection state of a range of items has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Forms.ListView> 가상 모드에 있지 않으면는 <xref:System.Windows.Forms.ListView.ItemSelectionChanged> 이벤트가 발생 합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.ListView> 라는 `ListView1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#482](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#482)]
 [!code-vb[System.Windows.Forms.EventExamples#482](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#482)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
      </Docs>
    </Member>
    <Member MemberName="VirtualListSize">
      <MemberSignature Language="C#" Value="public int VirtualListSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VirtualListSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.VirtualListSize" />
      <MemberSignature Language="VB.NET" Value="Public Property VirtualListSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int VirtualListSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.VirtualListSize : int with get, set" Usage="System.Windows.Forms.ListView.VirtualListSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of <see cref="T:System.Windows.Forms.ListViewItem" /> objects contained in the list when in virtual mode.</summary>
        <value>수가 <see cref="T:System.Windows.Forms.ListViewItem" /> 에 포함 된 개체는 <see cref="T:System.Windows.Forms.ListView" /> 가상 모드에 있는 경우.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가져오거나 설정할는 <xref:System.Windows.Forms.ListView.VirtualListSize%2A> 속성 때 <xref:System.Windows.Forms.ListView.VirtualMode%2A> 로 설정 `false` 영향을 미치지 것입니다는 <xref:System.Windows.Forms.ListView>합니다.  
  
 경우 <xref:System.Windows.Forms.ListView.VirtualMode%2A> 로 설정 된 `true`, 및 <xref:System.Windows.Forms.ListView.VirtualListSize%2A> 속성이 0 보다 크면, 처리 해야 합니다는 <xref:System.Windows.Forms.ListView.RetrieveVirtualItem> 이벤트를 제공 하는 유효한 <xref:System.Windows.Forms.ListViewItem>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> is set to a value less than 0.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> is set to <see langword="true" />, <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> is greater than 0, and <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> is not handled.</exception>
        <altmember cref="P:System.Windows.Forms.ListView.VirtualMode" />
      </Docs>
    </Member>
    <Member MemberName="VirtualMode">
      <MemberSignature Language="C#" Value="public bool VirtualMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VirtualMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.VirtualMode" />
      <MemberSignature Language="VB.NET" Value="Public Property VirtualMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool VirtualMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.VirtualMode : bool with get, set" Usage="System.Windows.Forms.ListView.VirtualMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether you have provided your own data-management operations for the <see cref="T:System.Windows.Forms.ListView" /> control.</summary>
        <value>
          <see langword="true" /> 경우 <see cref="T:System.Windows.Forms.ListView" /> 가 제공 하는 데이터 관리 작업을 사용 하 여, <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정의 <xref:System.Windows.Forms.ListView.VirtualMode%2A> 속성을 `true` 배치는 <xref:System.Windows.Forms.ListView> 가상 모드에 있습니다. 가상 모드에서는 일반 <xref:System.Windows.Forms.ListView.Items%2A> 컬렉션이 사용 되지 않습니다. 대신, <xref:System.Windows.Forms.ListViewItem> 개체도 동적으로 생성 됩니다는 <xref:System.Windows.Forms.ListView> 필요 합니다.  
  
 가상 모드는 여러 가지 상황에서 유용할 수 있습니다. 경우는 <xref:System.Windows.Forms.ListView> 이미 메모리에에서 매우 큰 컬렉션에서 개체를 입력 해야 만들기는 <xref:System.Windows.Forms.ListViewItem> 개체 각 항목 낭비 될 수 있습니다. 가상 모드에 필요한 항목에 대해서만 생성 됩니다. 값을 다른 경우에는 <xref:System.Windows.Forms.ListViewItem> 개체 자주 다시 계산 해야 할 수 있으며 전체 컬렉션에 대해 허용 되지 않는 성능을 생성 합니다. 가상 모드에 필요한 항목만 계산 됩니다.  
  
 가상 모드를 사용 하려면 처리 해야 하는 <xref:System.Windows.Forms.ListView.RetrieveVirtualItem> 될 때마다 발생 하는 이벤트는 <xref:System.Windows.Forms.ListView> 항목 필요 합니다. 이 이벤트 처리기를 만들어야는 <xref:System.Windows.Forms.ListViewItem> 지정된 된 인덱스에 속해 있는 개체입니다. 또한는 <xref:System.Windows.Forms.ListView.VirtualListSize%2A> 가상 목록 크기 속성을 설정 해야 합니다.  
  
 처리는 <xref:System.Windows.Forms.ListView.SearchForVirtualItem> 이벤트를 사용 하면 가상 모드에서 검색 합니다. 이 이벤트 처리 되지 않은 경우는 <xref:System.Windows.Forms.ListView.FindItemWithText%2A> 및 <xref:System.Windows.Forms.ListView.FindNearestItem%2A> 메서드는 반환 `null`합니다.  
  
 처리할 수는 <xref:System.Windows.Forms.ListView.CacheVirtualItems> 의 캐시를 유지 하기 위해 이벤트 <xref:System.Windows.Forms.ListViewItem> 개체입니다. 경우 계산 또는 만들려는 조회는 <xref:System.Windows.Forms.ListViewItem> 개체는 캐시 성능을 향상 시킬 수 유지 관리 비용이 많이 합니다.  
  
 경우는 <xref:System.Windows.Forms.ListView.View%2A> 속성이 <xref:System.Windows.Forms.View.Tile>를 값으로 자동으로 변경 됩니다 <xref:System.Windows.Forms.View.LargeIcon> 때 <xref:System.Windows.Forms.ListView.VirtualMode%2A> 로 설정 되어 `true`합니다.  
  
 가상 모드에는 <xref:System.Windows.Forms.ListView.Items%2A> 컬렉션을 사용할 수 없습니다. 결과에 액세스 하려고 한 <xref:System.InvalidOperationException>합니다. 경우도 마찬가지는 <xref:System.Windows.Forms.ListView.CheckedItems%2A> 컬렉션 및 <xref:System.Windows.Forms.ListView.SelectedItems%2A> 컬렉션입니다. 선택 되거나 확인 된 항목을 검색 하려는 경우 사용 된 <xref:System.Windows.Forms.ListView.SelectedIndices%2A> 및 <xref:System.Windows.Forms.ListView.CheckedIndices%2A> 컬렉션 대신 합니다.  
  
   
  
## Examples  
 다음이 예에서는 간단한 <xref:System.Windows.Forms.ListView> 내용이 먼저 10 천 제곱 합니다. 에서는 검색을 처리 하 고 성능 향상된을 위해 캐시를 사용 합니다.  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> is set to <see langword="true" /> and one of the following conditions exist:  -   <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> is greater than 0 and <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> is not handled.  -or-  -   <see cref="P:System.Windows.Forms.ListView.Items" />, <see cref="P:System.Windows.Forms.ListView.CheckedItems" />, or <see cref="P:System.Windows.Forms.ListView.SelectedItems" /> contains items.  -or-  -   Edits are made to <see cref="P:System.Windows.Forms.ListView.Items" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc :  -&gt; unit" Usage="listView.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</param>
        <summary>Overrides <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>