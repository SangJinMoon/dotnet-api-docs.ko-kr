<Type Name="KeyPressEventArgs" FullName="System.Windows.Forms.KeyPressEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dffe3a90d9e36ff28b69e6f18be491d69a6e7afb" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36519535" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class KeyPressEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyPressEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.KeyPressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyPressEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyPressEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type KeyPressEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="E:System.Windows.Forms.Control.KeyPress" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.KeyPressEventArgs> 사용자가 키를 누를 때 구성 되는 문자를 지정 합니다. 예를 들어 사용자가 SHIFT + K는 <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> 속성은 대문자 K를 반환 합니다.  
  
 A <xref:System.Windows.Forms.Control.KeyPress> 이벤트 키를 누를 때 발생 합니다. 밀접 하 게 하는 두 개의 이벤트는 <xref:System.Windows.Forms.Control.KeyPress> 이벤트는 <xref:System.Windows.Forms.Control.KeyUp> 및 <xref:System.Windows.Forms.Control.KeyDown>합니다. <xref:System.Windows.Forms.Control.KeyDown> 각 이벤트 앞 <xref:System.Windows.Forms.Control.KeyPress> 사용자가 키를 누를 때 이벤트 및 <xref:System.Windows.Forms.Control.KeyUp> 이벤트 키를 놓을 때 발생 합니다. 중복 키를 누르고 때 <xref:System.Windows.Forms.Control.KeyDown> 및 <xref:System.Windows.Forms.Control.KeyPress> 이벤트가 문자에서 반복 될 때마다 발생 합니다. 하나의 <xref:System.Windows.Forms.Control.KeyUp> 이벤트 출시 하는 즉시 생성 됩니다.  
  
 각 <xref:System.Windows.Forms.Control.KeyPress> 이벤트는 <xref:System.Windows.Forms.KeyPressEventArgs> 전달 됩니다. A <xref:System.Windows.Forms.KeyEventArgs> 각 함께 전달 되 면 <xref:System.Windows.Forms.Control.KeyDown> 및 <xref:System.Windows.Forms.Control.KeyUp> 이벤트입니다. A <xref:System.Windows.Forms.KeyEventArgs> 임의의 한정자 키 (CTRL, shift 키 또는 ALT)를 다른 키와 함께 눌렀는지 여부를 지정 합니다. (이 한정자 정보를 통해 얻을 수도 있습니다는 <xref:System.Windows.Forms.Control.ModifierKeys%2A> 의 속성은 <xref:System.Windows.Forms.Control> 클래스입니다.)  
  
 설정 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> 를 `true` 취소 하 여 `KeyPress` 이벤트입니다. 이렇게 하면 컨트롤이에서 키 누름을 처리 합니다.  
  
> [!NOTE]
>  일부 컨트롤에 특정 키 입력을 처리 합니다 <xref:System.Windows.Forms.Control.KeyDown>합니다. 예를 들어 <xref:System.Windows.Forms.RichTextBox> 하기 전에 Enter 키를 처리 <xref:System.Windows.Forms.Control.KeyPress> 호출 됩니다. 이러한 경우에는 취소할 수 없습니다는 <xref:System.Windows.Forms.Control.KeyPress> 이벤트에서 키 입력을 취소 해야 <xref:System.Windows.Forms.Control.KeyDown> 대신 합니다.  
  
 이벤트 모델에 대 한 정보를 참조 하십시오. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 예제를 사용 하는 <xref:System.Windows.Forms.KeyPressEventArgs> 누른 키를 계산 하 고 키를 누를 때마다 다음 결과 표시할 수 있습니다. <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> 다음에서 추가 운영 체제 유지를 true로 설정 키를 처리 합니다. 이 예에서는 가정 된 폼을 <xref:System.Windows.Forms.TextBox> 배치 합니다.  
  
 [!code-cpp[Classic KeyPressEventArgs Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source.cpp#1)]
 [!code-csharp[Classic KeyPressEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic KeyPressEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source.vb#1)]  
  
 이 클래스의 새 인스턴스를 만들어야 합니다. 이벤트 처리기를 설정 해야 합니다. 클래스에 대 한 생성자에서 수행할 수 있습니다.  
  
 [!code-cpp[Classic KeyPressEventArgs Example#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic KeyPressEventArgs Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source2.cs#2)]
 [!code-vb[Classic KeyPressEventArgs Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source2.vb#2)]  
  
 컨트롤에서 지정 된 이벤트가 발생 하면 연결 된 메서드가 호출 되 고 응용 프로그램 이벤트에 대 한 응답에서 코드를 실행할 수 있습니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
    <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
    <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
    <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
    <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyPressEventArgs (char keyChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char keyChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keyChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyPressEventArgs(char keyChar);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.KeyPressEventArgs : char -&gt; System.Windows.Forms.KeyPressEventArgs" Usage="new System.Windows.Forms.KeyPressEventArgs keyChar" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keyChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="keyChar">사용자가 누른 키에 해당하는 ASCII 문자입니다.</param>
        <summary>
          <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=nameWithType> 보조 키의 현재 상태를 가져올 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 SHIFT 키의 현재 상태를 보여 주는 메시지 상자를 표시 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Windows.Forms.KeyPressEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.Forms.Control.KeyPress" /> 이벤트가 처리되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>이벤트가 처리되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트 처리 되지 않은 경우 기본 처리에 대 한 운영 체제에 전송 됩니다. 설정 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> 를 `true` 취소 하 여 `KeyPress` 이벤트입니다.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Windows.Forms.TextBox> 제어 합니다. `keypressed` 메서드는 <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> ENTER 키를 눌렀는지 여부를 확인할 속성입니다. ENTER 키를 누르면는 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> 속성이로 설정 되어 `true`를 나타내는 이벤트를 처리 합니다.  
  
 [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="KeyChar">
      <MemberSignature Language="C#" Value="public char KeyChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char KeyChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.KeyChar" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char KeyChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.KeyChar : char with get, set" Usage="System.Windows.Forms.KeyPressEventArgs.KeyChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>누른 키에 해당하는 문자를 가져오거나 설정합니다.</summary>
        <value>구성된 ASCII 문자입니다. 예를 들어, 사용자가 Shift+K를 누르면 이 속성은 대문자 K를 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> 샘플 키 입력을 실행할 때 고 특별 한 런타임 환경에서 키 입력을 수정 하는 속성입니다. 사용할 수는 예를 들어 <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> 우편 번호를 입력 하면 숫자가 아닌 키를 사용 하지 않도록 설정, 데이터 입력 필드에 대문자로 모든 알파벳 키 누르기 바꾸거나 키보드 또는 특정 키 조합에 대 한 다른 키 입력된 장치를 모니터링 합니다.  
  
 다음 키 설정 또는 얻을 수 있습니다.  
  
-   a-z, A-Z.  
  
-   CTRL 합니다.  
  
-   문장 부호입니다.  
  
-   숫자 모두 위쪽의 키보드와 숫자 키패드의 키입니다.  
  
-   입력 합니다.  
  
 Get 또는 다음 키를 설정할 수 없습니다.  
  
-   <Tab> 키입니다.  
  
-   삽입 및 삭제 합니다.  
  
-   홈입니다.  
  
-   끝입니다.  
  
-   PAGE UP 및 PAGE DOWN 합니다.  
  
-   F1 F2 합니다.  
  
-   ALT 합니다.  
  
-   화살표 키  
  
> [!NOTE]
>  위에서 언급 한 문자가 아닌 키 중 하나를 검색 하는 방법에 대 한 정보를 참조 하십시오.는 <xref:System.Windows.Forms.KeyEventArgs> 클래스입니다.  
  
-  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Windows.Forms.TextBox> 제어 합니다. `keypressed` 메서드는 <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> ENTER 키를 눌렀는지 여부를 확인할 속성입니다. ENTER 키를 누르면는 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> 속성이로 설정 되어 `true`를 나타내는 이벤트를 처리 합니다.  
  
 [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
      </Docs>
    </Member>
  </Members>
</Type>