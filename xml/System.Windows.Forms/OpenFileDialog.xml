<Type Name="OpenFileDialog" FullName="System.Windows.Forms.OpenFileDialog">
  <TypeSignature Language="C#" Value="public sealed class OpenFileDialog : System.Windows.Forms.FileDialog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OpenFileDialog extends System.Windows.Forms.FileDialog" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.OpenFileDialog" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OpenFileDialog&#xA;Inherits FileDialog" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpenFileDialog sealed : System::Windows::Forms::FileDialog" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.FileDialog</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="66170-101">사용자가 파일을 열도록 요청하는 표준 대화 상자를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-101">Displays a standard dialog box that prompts the user to open a file.</span></span> <span data-ttu-id="66170-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="66170-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66170-103">이 클래스를 사용 하는 파일의 존재 여부를 확인 하 고 열 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="66170-103">This class allows you to check whether a file exists and to open it.</span></span> <span data-ttu-id="66170-104"><xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> 속성 대화 상자에서는 읽기 전용 확인란이 표시 되는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-104">The <xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> property determines whether a read-only check box appears in the dialog box.</span></span> <span data-ttu-id="66170-105"><xref:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked%2A> 속성은 읽기 전용 확인란이 선택 되었는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="66170-105">The <xref:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked%2A> property indicates whether the read-only check box is checked.</span></span>  
  
 <span data-ttu-id="66170-106">이 클래스를 찾을 수에 대 한 핵심 기능 중 대부분은 <xref:System.Windows.Forms.FileDialog> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-106">Most of the core functionality for this class is found in the <xref:System.Windows.Forms.FileDialog> class.</span></span>  

<span data-ttu-id="66170-107">오른쪽에서 왼쪽으로 운영 체제에 설정 하는 포함 하는 폼 <xref:System.Windows.Forms.Control.RightToLeft> 속성을 <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType> 대화 상자의 보여지는 **파일 이름**, **열려**, 및 **취소** 단추입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-107">On a right-to-left operating system, setting the containing form's <xref:System.Windows.Forms.Control.RightToLeft> property to <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType> localizes the dialog's **File Name**, **Open**, and **Cancel** buttons.</span></span> <span data-ttu-id="66170-108">속성 설정 하지 않으면 <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType>, 영어 텍스트 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="66170-108">If the property is not set to <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType>, English text is used instead.</span></span>  

 <span data-ttu-id="66170-109">사용자에 게 선택 파일이 아니라 폴더를 사용 하는 기능을 제공 하려는 경우 <xref:System.Windows.Forms.FolderBrowserDialog> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-109">If you want to give the user the ability to select a folder instead of a file, use <xref:System.Windows.Forms.FolderBrowserDialog> instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="66170-110">다음 코드 예제는 <xref:System.Windows.Forms.OpenFileDialog>, 파일 확장명 필터 및 대화 동작을 정의 하는 몇 가지 속성을 설정 하 고 사용 하 여 대화 상자 표시는 <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="66170-110">The following code example creates an <xref:System.Windows.Forms.OpenFileDialog>, sets several properties to define the file extension filter and dialog behavior, and displays the dialog box using the <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="66170-111">이 예제에서는 포함 하는 폼을 <xref:System.Windows.Forms.Button> 에 대 한 참조 및 배치는 <xref:System.IO> 네임 스페이스에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-111">The example requires a form with a <xref:System.Windows.Forms.Button> placed on it and a reference to the <xref:System.IO> namespace added to it.</span></span>  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.FileDialog" />
    <altmember cref="T:System.Windows.Forms.CommonDialog" />
    <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OpenFileDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.OpenFileDialog.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OpenFileDialog();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="66170-112">
          <see cref="T:System.Windows.Forms.OpenFileDialog" /> 클래스의 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-112">Initializes an instance of the <see cref="T:System.Windows.Forms.OpenFileDialog" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66170-113">이 기본적으로에 대 한 컴파일러에서 제공 하는 생성자는 <xref:System.Windows.Forms.OpenFileDialog> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-113">This is the default, compiler-supplied constructor for the <xref:System.Windows.Forms.OpenFileDialog> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckFileExists">
      <MemberSignature Language="C#" Value="public override bool CheckFileExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckFileExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.OpenFileDialog.CheckFileExists" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CheckFileExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CheckFileExists { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66170-114">존재하지 않는 파일 이름을 지정할 때 대화 상자에 경고가 표시되는지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-114">Gets or sets a value indicating whether the dialog box displays a warning if the user specifies a file name that does not exist.</span></span></summary>
        <value>
          <span data-ttu-id="66170-115">존재하지 않는 파일 이름을 지정할 때 대화 상자에 경고가 표시되면 <see langword="true" />이고, 표시되지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-115"><see langword="true" /> if the dialog box displays a warning when the user specifies a file name that does not exist; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="66170-116">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-116">The default value is <see langword="true" />.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.OpenFileDialog.OpenFile" />
        <altmember cref="P:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked" />
      </Docs>
    </Member>
    <Member MemberName="Multiselect">
      <MemberSignature Language="C#" Value="public bool Multiselect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiselect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.OpenFileDialog.Multiselect" />
      <MemberSignature Language="VB.NET" Value="Public Property Multiselect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Multiselect { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66170-117">대화 상자에서 여러 파일을 선택할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-117">Gets or sets a value indicating whether the dialog box allows multiple files to be selected.</span></span></summary>
        <value>
          <span data-ttu-id="66170-118">대화 상자에서 동시에 여러 파일을 선택할 수 있으면 <see langword="true" />이고, 선택할 수 없으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-118"><see langword="true" /> if the dialog box allows multiple files to be selected together or concurrently; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="66170-119">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-119">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66170-120">사용 하 여는 <xref:System.Windows.Forms.FileDialog.FileNames%2A> 속성의 전체 목록에 액세스 하려면 파일 이름을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-120">Use the <xref:System.Windows.Forms.FileDialog.FileNames%2A> property to access the full list of selected file names.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="66170-121">다음 코드 예제에서는 사용 하면 다양 한 이미지를 선택 하 고에 표시할 <xref:System.Windows.Forms.PictureBox> 양식의 컨트롤입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-121">The following code example allows the user to select a number of images and display them in <xref:System.Windows.Forms.PictureBox> controls on a Form.</span></span> <span data-ttu-id="66170-122">초기화를 보여 줍니다는 <xref:System.Windows.Forms.OpenFileDialog>설정는 <xref:System.Windows.Forms.FileDialog.Title%2A> 및 <xref:System.Windows.Forms.FileDialog.Filter%2A> 속성 및 사용자가을 설정 하 여 여러 파일을 선택할 수 있도록는 <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A> 속성을 true로 합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-122">It demonstrates initializing an <xref:System.Windows.Forms.OpenFileDialog>, setting the <xref:System.Windows.Forms.FileDialog.Title%2A> and <xref:System.Windows.Forms.FileDialog.Filter%2A> properties, and allowing the user to select multiple files by setting the <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A> property to true.</span></span> <span data-ttu-id="66170-123">이 코드 예제에서는 폼에 이미 있다고 가정는 <xref:System.Windows.Forms.OpenFileDialog> 라는 컨트롤 `openFileDialog1`, <xref:System.Windows.Forms.Button> 라는 `SelectFileButton`, 및 <xref:System.Windows.Forms.FlowLayoutPanel> 라는 `flowLayoutPanel1`합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-123">This code example assumes that your form already has an <xref:System.Windows.Forms.OpenFileDialog> control named `openFileDialog1`, a <xref:System.Windows.Forms.Button> named `SelectFileButton`, and a <xref:System.Windows.Forms.FlowLayoutPanel> named `flowLayoutPanel1`.</span></span>  
  
 [!code-csharp[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileNames" />
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="OpenFile">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.OpenFileDialog.OpenFile" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenFile () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenFile();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="66170-124">사용자가 선택한 파일을 읽기 전용 권한을 사용하여 엽니다.</span><span class="sxs-lookup"><span data-stu-id="66170-124">Opens the file selected by the user, with read-only permission.</span></span> <span data-ttu-id="66170-125">이 파일은 <see cref="P:System.Windows.Forms.FileDialog.FileName" /> 속성을 사용하여 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="66170-125">The file is specified by the <see cref="P:System.Windows.Forms.FileDialog.FileName" /> property.</span></span></summary>
        <returns><span data-ttu-id="66170-126">사용자가 선택한 읽기 전용 파일을 지정하는 <see cref="T:System.IO.Stream" />입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-126">A <see cref="T:System.IO.Stream" /> that specifies the read-only file selected by the user.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66170-127"><xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> 메서드는 대화 상자에서 파일을 신속 하 게 기능을 제공 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="66170-127">The <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> method is used to provide a facility to quickly open a file from the dialog box.</span></span> <span data-ttu-id="66170-128">파일 보안을 위해 읽기 전용 모드에서 열립니다.</span><span class="sxs-lookup"><span data-stu-id="66170-128">The file is opened in read-only mode for security purposes.</span></span> <span data-ttu-id="66170-129">파일 읽기/쓰기 모드에서를 열려면 다른 메서드를와 같은 사용 해야 <xref:System.IO.FileStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-129">To open a file in read/write mode, you must use another method, such as <xref:System.IO.FileStream>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="66170-130">다음 코드 예제에서는 <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="66170-130">The following code example demonstrates how to use the <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> method.</span></span>  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="66170-131">파일 이름이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="66170-131">The file name is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileDialogPermission"><span data-ttu-id="66170-132">파일을 열려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-132">to open a file.</span></span> <span data-ttu-id="66170-133">연관된 열거형: <see cref="F:System.Security.Permissions.FileDialogPermissionAccess.Open" /></span><span class="sxs-lookup"><span data-stu-id="66170-133">Associated enumeration: <see cref="F:System.Security.Permissions.FileDialogPermissionAccess.Open" />.</span></span></permission>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="P:System.Windows.Forms.OpenFileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnlyChecked">
      <MemberSignature Language="C#" Value="public bool ReadOnlyChecked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnlyChecked" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnlyChecked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnlyChecked { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66170-134">읽기 전용 확인란이 선택되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-134">Gets or sets a value indicating whether the read-only check box is selected.</span></span></summary>
        <value>
          <span data-ttu-id="66170-135">읽기 전용 확인란이 선택되어 있으면 <see langword="true" />이고, 선택되지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-135"><see langword="true" /> if the read-only check box is selected; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="66170-136">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-136">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66170-137"><xref:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked%2A> 상태 읽기/쓰기 모드에는 영향을 주지는 <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A?displayProperty=nameWithType> 대화 상자에서 선택한 파일을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-137">The <xref:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked%2A> state does not affect the read/write mode that <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A?displayProperty=nameWithType> uses to open a file selected in the dialog box.</span></span> <span data-ttu-id="66170-138"><xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> 읽기 전용 모드에서 파일을 엽니다 항상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="66170-138"><xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> will always open the file in read-only mode.</span></span>  
  
 <span data-ttu-id="66170-139"><xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> 속성 하기 전에 대화 상자에 표시 하려면 읽기 전용 확인란에 대 한 순서로 설정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-139">The <xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> property must be set before in order for the read-only check box to appear in the dialog box.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="66170-140">다음 코드 예제에서는 <xref:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-140">The following code example demonstrates the use of the <xref:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked%2A> property.</span></span> <span data-ttu-id="66170-141">이 예제에서는 표시 된 <xref:System.Windows.Forms.OpenFileDialog> 으로 <xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> 속성이로 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-141">This example displays the <xref:System.Windows.Forms.OpenFileDialog> box with the <xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> property set to `true`.</span></span> <span data-ttu-id="66170-142">읽기 전용 모드로 파일 열기 옵션을 클릭 하면는 <xref:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked%2A> 속성 값이 `true`, 및 <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> 메서드를 사용 하는 파일을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="66170-142">If the user clicks the option to open the file in read-only mode, the <xref:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked%2A> property evaluates to `true`, and the <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> method is used to open the file.</span></span> <span data-ttu-id="66170-143">그렇지 않은 경우는 <xref:System.IO.FileStream> 클래스로 읽기/쓰기 모드에서 파일을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="66170-143">Otherwise, the <xref:System.IO.FileStream> class is used to open the file in read/write mode.</span></span>  
  
 [!code-cpp[DlgOpenFileReadOnly#1](~/samples/snippets/cpp/VS_Snippets_Winforms/DlgOpenFileReadOnly/CPP/form1.cpp#1)]
 [!code-csharp[DlgOpenFileReadOnly#1](~/samples/snippets/csharp/VS_Snippets_Winforms/DlgOpenFileReadOnly/CS/form1.cs#1)]
 [!code-vb[DlgOpenFileReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/DlgOpenFileReadOnly/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.OpenFileDialog.ShowReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.OpenFileDialog.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="66170-144">모든 속성을 기본값으로 다시 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-144">Resets all properties to their default values.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SafeFileName">
      <MemberSignature Language="C#" Value="public string SafeFileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SafeFileName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.OpenFileDialog.SafeFileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SafeFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SafeFileName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66170-145">대화 상자에서 선택한 파일의 파일 이름과 확장명을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="66170-145">Gets the file name and extension for the file selected in the dialog box.</span></span> <span data-ttu-id="66170-146">파일 이름에 경로는 포함되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="66170-146">The file name does not include the path.</span></span></summary>
        <value><span data-ttu-id="66170-147">대화 상자에서 선택한 파일의 파일 이름과 확장명입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-147">The file name and extension for the file selected in the dialog box.</span></span> <span data-ttu-id="66170-148">파일 이름에 경로는 포함되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="66170-148">The file name does not include the path.</span></span> <span data-ttu-id="66170-149">기본값은 빈 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-149">The default value is an empty string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66170-150">안전한 파일 이름 (파일 이름 및 경로 없이 확장만 함)에서 경로 정보를 노출 하지 않으므로 응용 프로그램에 대 한 보안을 개선 하기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="66170-150">A safe file name (just the file name and extension without a path) can be used to improve security for applications because it does not expose path information.</span></span> <span data-ttu-id="66170-151">이 속성은 제한 된 신뢰 수준으로 실행 중인 코드에 액세스할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-151">This property should be accessible to code running with limited trust.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SafeFileNames">
      <MemberSignature Language="C#" Value="public string[] SafeFileNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] SafeFileNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.OpenFileDialog.SafeFileNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SafeFileNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ SafeFileNames { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66170-152">대화 상자에서 선택한 모든 파일의 파일 이름과 확장명의 배열을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="66170-152">Gets an array of file names and extensions for all the selected files in the dialog box.</span></span> <span data-ttu-id="66170-153">파일 이름에 경로는 포함되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="66170-153">The file names do not include the path.</span></span></summary>
        <value><span data-ttu-id="66170-154">대화 상자에서 선택한 모든 파일의 파일 이름과 확장명의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-154">An array of file names and extensions for all the selected files in the dialog box.</span></span> <span data-ttu-id="66170-155">파일 이름에 경로는 포함되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="66170-155">The file names do not include the path.</span></span> <span data-ttu-id="66170-156">파일을 선택하지 않는 경우 빈 배열이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="66170-156">If no files are selected, an empty array is returned.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66170-157">안전한 파일 이름 (파일 이름 및 경로 없이 확장만 함)에서 경로 정보를 노출 하지 않으므로 응용 프로그램에 대 한 보안을 개선 하기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="66170-157">A safe file name (just the file name and extension without a path) can be used to improve security for applications because it does not expose path information.</span></span> <span data-ttu-id="66170-158">이 속성은 제한 된 신뢰 수준으로 실행 중인 코드에 액세스할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-158">This property should be accessible to code running with limited trust.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowReadOnly">
      <MemberSignature Language="C#" Value="public bool ShowReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.OpenFileDialog.ShowReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowReadOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66170-159">대화 상자에 읽기 전용 확인란이 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-159">Gets or sets a value indicating whether the dialog box contains a read-only check box.</span></span></summary>
        <value>
          <span data-ttu-id="66170-160">대화 상자에 읽기 전용 확인란이 있으면 <see langword="true" />이고, 없으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-160"><see langword="true" /> if the dialog box contains a read-only check box; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="66170-161">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-161">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="66170-162">다음 코드 예제에서는 <xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="66170-162">The following code example demonstrates the use of the <xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> property.</span></span> <span data-ttu-id="66170-163">이 예제에서는 표시 된 <xref:System.Windows.Forms.OpenFileDialog> 으로 <xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> 속성이로 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="66170-163">This example displays the <xref:System.Windows.Forms.OpenFileDialog> box with the <xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> property set to `true`.</span></span> <span data-ttu-id="66170-164">읽기 전용 모드로 파일 열기 옵션을 클릭 하면는 <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> 메서드를 사용 하는 파일을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="66170-164">If the user clicks the option to open the file in read-only mode, the <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> method is used to open the file.</span></span> <span data-ttu-id="66170-165">그렇지 않은 경우는 <xref:System.IO.FileStream> 클래스로 읽기/쓰기 모드에서 파일을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="66170-165">Otherwise, the <xref:System.IO.FileStream> class is used to open the file in read/write mode.</span></span>  
  
 [!code-cpp[DlgOpenFileReadOnly#1](~/samples/snippets/cpp/VS_Snippets_Winforms/DlgOpenFileReadOnly/CPP/form1.cpp#1)]
 [!code-csharp[DlgOpenFileReadOnly#1](~/samples/snippets/csharp/VS_Snippets_Winforms/DlgOpenFileReadOnly/CS/form1.cs#1)]
 [!code-vb[DlgOpenFileReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/DlgOpenFileReadOnly/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked" />
      </Docs>
    </Member>
  </Members>
</Type>