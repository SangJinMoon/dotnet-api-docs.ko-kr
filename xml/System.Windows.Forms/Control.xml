<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Control.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b891ec5d-4b60-42d7-ac21-95eab9e3ef823de97c9a0d968c61220a0ff5dd4e4c0eb9b06744.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3de97c9a0d968c61220a0ff5dd4e4c0eb9b06744</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">058bfa0b75b777d3171411d35da8f11617fc06b0</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/04/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Control">
          <source>Defines the base class for controls, which are components with visual representation.</source>
          <target state="translated">시각적으로 표시되는 구성 요소인 컨트롤의 기본 클래스를 정의합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>To create your own control class, inherit from the <ph id="ph1">&lt;xref:System.Windows.Forms.UserControl&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> classes, or from the other Windows Forms provided controls.</source>
          <target state="translated">사용자 정의 컨트롤 클래스를 만들려면에서 상속 된 <ph id="ph1">&lt;xref:System.Windows.Forms.UserControl&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스 또는 다른 Windows Forms에서 컨트롤을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>For more information about authoring custom controls, see <bpt id="p1">[</bpt>Developing Custom Windows Forms Controls with the .NET Framework<ept id="p1">](~/docs/framework/winforms/controls/developing-custom-windows-forms-controls.md)</ept>.</source>
          <target state="translated">사용자 지정 컨트롤 제작 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>.NET Framework와 함께 사용자 지정 Windows Forms 컨트롤 개발<ept id="p1">](~/docs/framework/winforms/controls/developing-custom-windows-forms-controls.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class implements very basic functionality required by classes that display information to the user.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 사용자에 게 정보를 표시 하는 클래스에서 필요한 매우 기본적인 기능을 구현 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>It handles user input through the keyboard and pointing devices.</source>
          <target state="translated">키보드 및 포인팅 장치를 통해 사용자 입력을 처리합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>It handles message routing and security.</source>
          <target state="translated">메시지 라우팅 및 보안을 처리합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>It defines the bounds of a control (its position and size), although it does not implement painting.</source>
          <target state="translated">그리기를 구현 하지는 않지만 (해당 위치 및 크기), 컨트롤의 범위를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>It provides a window handle (<ph id="ph1">`hWnd`</ph>).</source>
          <target state="translated">창 핸들을 제공 (<ph id="ph1">`hWnd`</ph>).</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>Windows Forms controls use ambient properties so child controls can appear like their surrounding environment.</source>
          <target state="translated">Windows Forms 컨트롤 주변 환경 처럼 자식 컨트롤이 표시 되어 있으므로 앰비언트 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>An <bpt id="p1">*</bpt>ambient property<ept id="p1">*</ept> is a control property that, if not set, is retrieved from the parent control.</source>
          <target state="translated"><bpt id="p1">*</bpt>앰비언트 속성<ept id="p1">*</ept> 은 그렇지 않은 경우, 즉 컨트롤 속성 설정, 부모 컨트롤에서 검색 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>If the control does not have a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph>, and the property is not set, the control attempts to determine the value of the ambient property through the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Site%2A&gt;</ph> property.</source>
          <target state="translated">컨트롤에 없는 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph>, 및에서 속성이 설정 되지 않은 경우 해당 컨트롤 통해 앰비언트 속성의 값을 확인 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Site%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>If the control is not sited, if the site does not support ambient properties, or if the property is not set on the <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph>, the control uses its own default values.</source>
          <target state="translated">컨트롤은 사이트에 없거나, 사이트 앰비언트 속성을 지원 하지 않는 경우 또는 속성에 설정 되어 있지 않으면는 <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph>, 컨트롤 자체 기본값을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>Typically, an ambient property represents a characteristic of a control, such as <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph>, that is communicated to a child control.</source>
          <target state="translated">일반적으로 앰비언트 속성은 컨트롤의와 같은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph>, 즉 자식 컨트롤에 전달 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> will have the same <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> as its parent <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> by default.</source>
          <target state="translated">예를 들어 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 같은 가질 수 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> 부모로 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>Ambient properties provided by the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class include: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Cursor%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph>.</source>
          <target state="translated">앰비언트 속성에서 제공 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 포함: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Cursor%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph>, 및 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>To make your Windows Forms application support visual styles, be sure to set the <ph id="ph1">&lt;xref:System.Windows.Forms.FlatStyle&gt;</ph> property to <ph id="ph2">`System`</ph> and include a manifest with your executable.</source>
          <target state="translated">비주얼 스타일을 지원 하 여 Windows Forms 응용 프로그램을 하려면 설정 해야는 <ph id="ph1">&lt;xref:System.Windows.Forms.FlatStyle&gt;</ph> 속성을 <ph id="ph2">`System`</ph> 실행 파일을 사용 하 여 매니페스트를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>A manifest is an XML file that is included either as a resource within your application executable or as a separate file that resides in the same directory as the executable file.</source>
          <target state="translated">매니페스트는 응용 프로그램 실행 파일 내에서 리소스 사용 또는 실행 파일과 동일한 디렉터리에 있는 별도 파일로 포함 되어 있는 XML 파일입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>For an example of a manifest, see the Example section of the <ph id="ph1">&lt;xref:System.Windows.Forms.FlatStyle&gt;</ph> enumeration.</source>
          <target state="translated">예로 매니페스트의 예 섹션을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.Windows.Forms.FlatStyle&gt;</ph> 열거형입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>For more information about using visual styles, see <bpt id="p1">[</bpt>Visual Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773187.aspx)</ept>.</source>
          <target state="translated">비주얼 스타일을 사용 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>비주얼 스타일<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773187.aspx)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>Windows Forms has accessibility support built in, and provides information about your application that enables it to work with accessibility client applications such as screen enlarger and reviewer utilities, voice input utilities, on-screen keyboards, alternative input devices, and keyboard enhancement utilities.</source>
          <target state="translated">Windows Forms 내게 필요한 옵션 지원 기본 제공 되 고 있으며 화면 확대기 및 검토자 유틸리티와 같은 접근성 클라이언트 응용 프로그램 작업, 음성 입력된 유틸리티 화상 키보드를 사용 하면 응용 프로그램에 대 한 정보를 제공 합니다. 대체 입력된 장치 및 키보드 향상 유틸리티입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>Sometimes you will want to provide additional information to accessibility client applications.</source>
          <target state="translated">추가 정보를 접근성 클라이언트 응용 프로그램을 제공할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>There are two ways of providing this additional information.</source>
          <target state="translated">이 추가 정보를 제공 하는 방법은 두 가지가 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>You can set the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleName%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.AccessibleDescription%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.AccessibleRole%2A&gt;</ph> property values, which will be reported to accessibility client applications.</source>
          <target state="translated">설정할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleName%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.AccessibleDescription%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.AccessibleRole%2A&gt;</ph> 접근성 클라이언트 응용 프로그램에 보고 되는 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>This method is typically used to provide limited accessibility information for existing controls.</source>
          <target state="translated">이 메서드는 기존 컨트롤에 대 한 제한 된 내게 필요한 옵션 정보를 제공 하려면 일반적으로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>Alternatively, you can write your own class deriving from the <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject&gt;</ph> classes, providing as much accessibility information as needed.</source>
          <target state="translated">또는에서 파생 되는 고유한 클래스를 작성할 수는 <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject&gt;</ph> 클래스, 필요에 따라 많은 내게 필요한 옵션 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>To maintain better performance, do not set the size of a control in its constructor.</source>
          <target state="translated">더 나은 성능을 유지 하기 위해 해당 생성자에는 컨트롤의 크기를 설정 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>The preferred method is to override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> property.</source>
          <target state="translated">재정의 하는 메서드가 좋습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>Do not add data bindings for a <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> in its constructor.</source>
          <target state="translated">에 대 한 데이터 바인딩을 추가 하지 마십시오는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 생성자에서입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>Doing so will cause errors in code generation and can cause unwanted behavior.</source>
          <target state="translated">이렇게 하면 코드 생성에서 오류가 발생 하 고 원하지 않는 동작이 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>The majority of the controls in the <ph id="ph1">&lt;xref:System.Windows.Forms&gt;</ph> namespace use the underlying Windows common control as a base to build on.</source>
          <target state="translated">대부분의 컨트롤의는 <ph id="ph1">&lt;xref:System.Windows.Forms&gt;</ph> 네임 스페이스를 구축 하는 기반으로 기본 Windows 공용 컨트롤을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>For more information about the Windows common controls, see <bpt id="p1">[</bpt>General Control Reference<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775497.aspx)</ept>.</source>
          <target state="translated">Windows 공용 컨트롤에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>일반 컨트롤 참조<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775497.aspx)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>To identify Windows Forms controls from a separate process, use a standard <ph id="ph1">`SendMessage`</ph> call to pass the WM_GETCONTROLNAME message.</source>
          <target state="translated">별도 프로세스에서 Windows Forms 컨트롤을 식별 하려면 사용 하는 표준 <ph id="ph1">`SendMessage`</ph> WM_GETCONTROLNAME 메시지를 전달 하도록 호출 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>WM_GETCONTROLNAME is independent of the language and Windows hierarchy.</source>
          <target state="translated">WM_GETCONTROLNAME는 별개의 언어와 Windows 계층 구조입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>For more information, see the "Recommended Solution for Windows Forms" topic in<bpt id="p1">[</bpt>Automating Windows Forms<ept id="p1">](http://msdn.microsoft.com/library/ms996405.aspx)</ept>.</source>
          <target state="translated">자세한 내용은 "Windows Forms에 대 한 권장 솔루션" 항목을 참조<bpt id="p1">[</bpt>Windows Forms 자동화<ept id="p1">](http://msdn.microsoft.com/library/ms996405.aspx)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property to synchronize access to the control from multiple threads.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> 여러 스레드에서 컨트롤에 대 한 액세스를 동기화 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>For more information about multithreaded Windows Forms controls, see <bpt id="p1">[</bpt>How to: Make Thread-Safe Calls to Windows Forms Controls<ept id="p1">](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)</ept></source>
          <target state="translated">다중 스레드 Windows Forms 컨트롤에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>하는 방법: Windows Forms 컨트롤에 스레드로부터 안전한 호출 수행<ept id="p1">](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>Only the following members are thread safe: <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" /&gt;</ph>, <ph id="ph4">&lt;see cref="P:System.Windows.Forms.Control.InvokeRequired" /&gt;</ph>, and <ph id="ph5">&lt;see cref="M:System.Windows.Forms.Control.CreateGraphics" /&gt;</ph> if the handle for the control has already been created.</source>
          <target state="translated">다음 멤버는 스레드로부터 안전 하 게 보호에: <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" /&gt;</ph>, <ph id="ph4">&lt;see cref="P:System.Windows.Forms.Control.InvokeRequired" /&gt;</ph>, 및 <ph id="ph5">&lt;see cref="M:System.Windows.Forms.Control.CreateGraphics" /&gt;</ph> 컨트롤에 대 한 핸들에서 이미 만든 경우.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Control">
          <source>Calling <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.CreateGraphics" /&gt;</ph> before the control's handle has been created on a background thread can cause illegal cross thread calls.</source>
          <target state="translated">호출 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.CreateGraphics" /&gt;</ph> 컨트롤의 핸들이 백그라운드 스레드에서 생성 되기 전에 잘못 된 크로스 스레드 호출 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Control">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> class with default settings.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> 클래스의 새 인스턴스를 기본 설정으로 초기화합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class is the base class for all controls used in a Windows Forms application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스는 Windows Forms 응용 프로그램에서 사용 되는 모든 컨트롤에 대 한 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor">
          <source>Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</source>
          <target state="translated">이 클래스는 클래스의 인스턴스를 만들려면 일반적으로 사용 되지 않으므로이 생성자는 일반적으로 직접 호출 되지 하지만 않고 파생된 클래스에 의해 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.String)">
          <source>The text displayed by the control.</source>
          <target state="translated">컨트롤에 의해 표시된 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> class with specific text.</source>
          <target state="translated">지정된 텍스트를 사용하여 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class is the base class for all controls used in a Windows Forms application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스는 Windows Forms 응용 프로그램에서 사용 되는 모든 컨트롤에 대 한 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.String)">
          <source>Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</source>
          <target state="translated">이 클래스는 클래스의 인스턴스를 만들려면 일반적으로 사용 되지 않으므로이 생성자는 일반적으로 직접 호출 되지 하지만 않고 파생된 클래스에 의해 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.String)">
          <source>This version of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.%23ctor%2A&gt;</ph> constructor sets the initial <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value to the <ph id="ph3">`text`</ph> parameter value.</source>
          <target state="translated">이 버전의는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.%23ctor%2A&gt;</ph> 생성자 초기 설정 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값을는 <ph id="ph3">`text`</ph> 매개 변수 값입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> to be the parent of the control.</source>
          <target state="translated">컨트롤의 부모가 될 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String)">
          <source>The text displayed by the control.</source>
          <target state="translated">컨트롤에 의해 표시된 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> class as a child control, with specific text.</source>
          <target state="translated">지정된 텍스트를 사용하여 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> 클래스의 새 인스턴스를 자식 컨트롤로 초기화합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class is the base class for all controls used in a Windows Forms application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스는 Windows Forms 응용 프로그램에서 사용 되는 모든 컨트롤에 대 한 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String)">
          <source>Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</source>
          <target state="translated">이 클래스는 클래스의 인스턴스를 만들려면 일반적으로 사용 되지 않으므로이 생성자는 일반적으로 직접 호출 되지 하지만 않고 파생된 클래스에 의해 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String)">
          <source>This version of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.%23ctor%2A&gt;</ph> constructor sets the initial <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value to the <ph id="ph3">`text`</ph> parameter value.</source>
          <target state="translated">이 버전의는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.%23ctor%2A&gt;</ph> 생성자 초기 설정 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값을는 <ph id="ph3">`text`</ph> 매개 변수 값입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String)">
          <source>The constructor also adds the control to the parent control's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph>.</source>
          <target state="translated">또한 생성자는 부모 컨트롤에 컨트롤을 추가 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The text displayed by the control.</source>
          <target state="translated">컨트롤에 의해 표시된 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Drawing.Point.X" /&gt;</ph> position of the control, in pixels, from the left edge of the control's container.</source>
          <target state="translated">컨트롤 컨테이너의 왼쪽 가장자리로부터 시작하여 픽셀 단위로 나타낸 컨트롤의 <ph id="ph1">&lt;see cref="P:System.Drawing.Point.X" /&gt;</ph> 위치입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The value is assigned to the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Left" /&gt;</ph> property.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Left" /&gt;</ph> 속성에 할당됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Drawing.Point.Y" /&gt;</ph> position of the control, in pixels, from the top edge of the control's container.</source>
          <target state="translated">컨트롤 컨테이너의 위쪽 가장자리로부터 시작하여 픽셀 단위로 나타낸 컨트롤의 <ph id="ph1">&lt;see cref="P:System.Drawing.Point.Y" /&gt;</ph> 위치입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The value is assigned to the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Top" /&gt;</ph> property.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Top" /&gt;</ph> 속성에 할당됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The width of the control, in pixels.</source>
          <target state="translated">컨트롤의 너비(픽셀)입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The value is assigned to the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Width" /&gt;</ph> property.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Width" /&gt;</ph> 속성에 할당됩니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The height of the control, in pixels.</source>
          <target state="translated">컨트롤의 높이(픽셀)입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The value is assigned to the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Height" /&gt;</ph> property.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Height" /&gt;</ph> 속성에 할당됩니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> class with specific text, size, and location.</source>
          <target state="translated">지정된 텍스트, 크기 및 위치를 사용하여 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class is the base class for all controls used in a Windows Forms application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스는 Windows Forms 응용 프로그램에서 사용 되는 모든 컨트롤에 대 한 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</source>
          <target state="translated">이 클래스는 클래스의 인스턴스를 만들려면 일반적으로 사용 되지 않으므로이 생성자는 일반적으로 직접 호출 되지 하지만 않고 파생된 클래스에 의해 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>This version of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.%23ctor%2A&gt;</ph> constructor sets the initial <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value to the <ph id="ph3">`text`</ph> parameter value.</source>
          <target state="translated">이 버전의는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.%23ctor%2A&gt;</ph> 생성자 초기 설정 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값을는 <ph id="ph3">`text`</ph> 매개 변수 값입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The initial <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> of the control are determined by the <ph id="ph3">`left`</ph>, <ph id="ph4">`top`</ph>, <ph id="ph5">`width`</ph> and <ph id="ph6">`height`</ph> parameter values.</source>
          <target state="translated">초기 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> 컨트롤에 따라 결정 되는 <ph id="ph3">`left`</ph>, <ph id="ph4">`top`</ph>, <ph id="ph5">`width`</ph> 및 <ph id="ph6">`height`</ph> 매개 변수 값입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>To maintain better performance, do not set the size of a control in its constructor.</source>
          <target state="translated">더 나은 성능을 유지 하기 위해 해당 생성자에는 컨트롤의 크기를 설정 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The preferred method is to override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> property.</source>
          <target state="translated">재정의 하는 메서드가 좋습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> to be the parent of the control.</source>
          <target state="translated">컨트롤의 부모가 될 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The text displayed by the control.</source>
          <target state="translated">컨트롤에 의해 표시된 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Drawing.Point.X" /&gt;</ph> position of the control, in pixels, from the left edge of the control's container.</source>
          <target state="translated">컨트롤 컨테이너의 왼쪽 가장자리로부터 시작하여 픽셀 단위로 나타낸 컨트롤의 <ph id="ph1">&lt;see cref="P:System.Drawing.Point.X" /&gt;</ph> 위치입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The value is assigned to the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Left" /&gt;</ph> property.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Left" /&gt;</ph> 속성에 할당됩니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Drawing.Point.Y" /&gt;</ph> position of the control, in pixels, from the top edge of the control's container.</source>
          <target state="translated">컨트롤 컨테이너의 위쪽 가장자리로부터 시작하여 픽셀 단위로 나타낸 컨트롤의 <ph id="ph1">&lt;see cref="P:System.Drawing.Point.Y" /&gt;</ph> 위치입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The value is assigned to the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Top" /&gt;</ph> property.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Top" /&gt;</ph> 속성에 할당됩니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The width of the control, in pixels.</source>
          <target state="translated">컨트롤의 너비(픽셀)입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The value is assigned to the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Width" /&gt;</ph> property.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Width" /&gt;</ph> 속성에 할당됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The height of the control, in pixels.</source>
          <target state="translated">컨트롤의 높이(픽셀)입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The value is assigned to the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Height" /&gt;</ph> property.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Height" /&gt;</ph> 속성에 할당됩니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> class as a child control, with specific text, size, and location.</source>
          <target state="translated">지정된 텍스트, 크기 및 위치를 사용하여 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> 클래스의 새 인스턴스를 자식 컨트롤로 초기화합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class is the base class for all controls used in a Windows Forms application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스는 Windows Forms 응용 프로그램에서 사용 되는 모든 컨트롤에 대 한 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</source>
          <target state="translated">이 클래스는 클래스의 인스턴스를 만들려면 일반적으로 사용 되지 않으므로이 생성자는 일반적으로 직접 호출 되지 하지만 않고 파생된 클래스에 의해 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>This version of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.%23ctor%2A&gt;</ph> constructor sets the initial <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value to the <ph id="ph3">`text`</ph> parameter value.</source>
          <target state="translated">이 버전의는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.%23ctor%2A&gt;</ph> 생성자 초기 설정 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값을는 <ph id="ph3">`text`</ph> 매개 변수 값입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The constructor also adds the control to the parent control's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph>.</source>
          <target state="translated">또한 생성자는 부모 컨트롤에 컨트롤을 추가 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The initial <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> of the control are determined by the <ph id="ph3">`left`</ph>, <ph id="ph4">`top`</ph>, <ph id="ph5">`width`</ph> and <ph id="ph6">`height`</ph> parameter values.</source>
          <target state="translated">초기 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> 컨트롤에 따라 결정 되는 <ph id="ph3">`left`</ph>, <ph id="ph4">`top`</ph>, <ph id="ph5">`width`</ph> 및 <ph id="ph6">`height`</ph> 매개 변수 값입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>To maintain better performance, do not set the size of a control in its constructor.</source>
          <target state="translated">더 나은 성능을 유지 하기 위해 해당 생성자에는 컨트롤의 크기를 설정 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The preferred method is to override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> property.</source>
          <target state="translated">재정의 하는 메서드가 좋습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Control">
          <source>Notifies the accessibility client applications of <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleEvents" /&gt;</ph>.</source>
          <target state="translated">내게 필요한 옵션 지원 클라이언트 응용 프로그램에 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleEvents" /&gt;</ph>를 알립니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleEvents" /&gt;</ph> to notify the accessibility client applications of.</source>
          <target state="translated">내게 필요한 옵션 지원 클라이언트 응용 프로그램에 알릴 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleEvents" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)">
          <source>The child <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> to notify of the accessible event.</source>
          <target state="translated">액세스할 수 있는 이벤트를 알릴 자식 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)">
          <source>Notifies the accessibility client applications of the specified <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleEvents" /&gt;</ph> for the specified child control.</source>
          <target state="translated">지정된 자식 컨트롤에 대해 지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleEvents" /&gt;</ph>를 내게 필요한 옵션 지원 클라이언트 응용 프로그램에 알립니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)">
          <source>You must call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A?displayProperty=nameWithType&gt;</ph> method for each <ph id="ph2">&lt;xref:System.Windows.Forms.AccessibleEvents&gt;</ph> the accessibility client applications are to be notified of.</source>
          <target state="translated">호출 해야 합니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A?displayProperty=nameWithType&gt;</ph> 메서드 각각에 대해 <ph id="ph2">&lt;xref:System.Windows.Forms.AccessibleEvents&gt;</ph> 접근성 클라이언트 응용 프로그램의 알림을 받을 수는 있습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A&gt;</ph> method is typically called when a property is set or from within an event handler.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A&gt;</ph> 일반적으로 메서드는 속성을 설정 하거나 내에서 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)">
          <source>For example, you might call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A&gt;</ph> method and pass in an <ph id="ph2">&lt;xref:System.Windows.Forms.AccessibleEvents&gt;</ph> value of <ph id="ph3">`Hide`</ph> from within the event handler for the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.VisibleChanged?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">예를 들어, 호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A&gt;</ph> 메서드와 전달은 <ph id="ph2">&lt;xref:System.Windows.Forms.AccessibleEvents&gt;</ph> 값 <ph id="ph3">`Hide`</ph> 에서 대 한 이벤트 처리기 내에서 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.VisibleChanged?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)">
          <source>The following code example demonstrates the creation of an accessibility-aware chart control, using the <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject&gt;</ph> classes to expose accessible information.</source>
          <target state="translated">다음 코드 예제에는 내게 필요한 옵션 인식 차트를 만드는 방법을 보여 줍니다. 컨트롤을 사용 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject&gt;</ph> 클래스 액세스할 수 있는 정보를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)">
          <source>The control plots two curves along with a legend.</source>
          <target state="translated">컨트롤은 범례를 따라 두 곡선을 그립니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)">
          <source>The <ph id="ph1">`ChartControlAccessibleObject`</ph> class, which derives from <ph id="ph2">`ControlAccessibleObject`</ph>, is used in the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A&gt;</ph> method to provide custom accessible information for the chart control.</source>
          <target state="translated"><ph id="ph1">`ChartControlAccessibleObject`</ph> 클래스에서 파생 되 <ph id="ph2">`ControlAccessibleObject`</ph>에 사용 되는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A&gt;</ph> 메서드는 차트 컨트롤에 대 한 사용자 지정 액세스할 수 있는 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)">
          <source>Since the chart legend is not an actual <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> -based control, but instead is drawn by the chart control, it does not any built-in accessible information.</source>
          <target state="translated">차트 범례는 실제 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> -컨트롤을 따르지만 그려지며 차트 컨트롤에서 액세스할 수 있는 기본 제공 정보를 포함 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)">
          <source>Because of this, the <ph id="ph1">`ChartControlAccessibleObject`</ph> class overrides the <ph id="ph2">&lt;xref:System.Windows.Forms.AccessibleObject.GetChild%2A&gt;</ph> method to return the <ph id="ph3">`CurveLegendAccessibleObject`</ph> that represents accessible information for each part of the legend.</source>
          <target state="translated">이 인해는 <ph id="ph1">`ChartControlAccessibleObject`</ph> 재정의 <ph id="ph2">&lt;xref:System.Windows.Forms.AccessibleObject.GetChild%2A&gt;</ph> 반환 하는 메서드는 <ph id="ph3">`CurveLegendAccessibleObject`</ph> 범례의 각 부분에 액세스할 수 있는 정보를 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)">
          <source>When an accessible-aware application uses this control, the control can provide the necessary accessible information.</source>
          <target state="translated">액세스할 수 있는 인식 응용 프로그램이이 제어를 사용 하는 경우 컨트롤은 필요한 액세스 가능 정보를 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)">
          <source>This code excerpt demonstrates calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibilityNotifyClients%2A&gt;</ph> method.</source>
          <target state="translated">코드 발췌 한이 호출을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibilityNotifyClients%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> class overview for the complete code example.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> 전체 코드 예제에 대 한 클래스 개요입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleEvents" /&gt;</ph> to notify the accessibility client applications of.</source>
          <target state="translated">내게 필요한 옵션 지원 클라이언트 응용 프로그램에 알릴 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleEvents" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32,System.Int32)">
          <source>The identifier of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleObject" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleObject" /&gt;</ph>의 식별자입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32,System.Int32)">
          <source>The child <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> to notify of the accessible event.</source>
          <target state="translated">액세스할 수 있는 이벤트를 알릴 자식 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32,System.Int32)">
          <source>Notifies the accessibility client applications of the specified <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleEvents" /&gt;</ph> for the specified child control .</source>
          <target state="translated">지정된 자식 컨트롤에 대해 지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleEvents" /&gt;</ph>를 내게 필요한 옵션 지원 클라이언트 응용 프로그램에 알립니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.AccessibilityObject">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleObject" /&gt;</ph> assigned to the control.</source>
          <target state="translated">컨트롤에 할당된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleObject" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibilityObject">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleObject" /&gt;</ph> assigned to the control.</source>
          <target state="translated">컨트롤에 할당된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleObject" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibilityObject">
          <source>To control the instance returned from this method, override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A&gt;</ph> method.</source>
          <target state="translated">이 메서드에서 반환 되는 인스턴스를 제어 하려면 재정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibilityObject">
          <source>If no <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> is currently assigned to the control, a new instance of one is created.</source>
          <target state="translated">현재 컨트롤에 할당된 <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> 클래스가 없으면 이 클래스의 새 인스턴스가 만들어집니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibilityObject">
          <source>To get or set the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibilityObject%2A&gt;</ph> property, you must add a reference to the <ph id="ph2">`Accessibility`</ph> assembly installed with the<ph id="ph3">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</source>
          <target state="translated">가져오거나 설정할는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibilityObject%2A&gt;</ph> 속성에 대 한 참조를 추가 해야는 <ph id="ph2">`Accessibility`</ph> 어셈블리와 함께 설치는<ph id="ph3">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibilityObject">
          <source>For more information about accessible objects, see <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592.aspx)</ept>.</source>
          <target state="translated">액세스 가능한 개체에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>Active Accessibility<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd373592.aspx)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription">
          <source>Gets or sets the default action description of the control for use by accessibility client applications.</source>
          <target state="translated">내게 필요한 옵션 지원 클라이언트 응용 프로그램에서 사용되는 컨트롤의 기본 작업 설명을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription">
          <source>The default action description of the control for use by accessibility client applications.</source>
          <target state="translated">내게 필요한 옵션 지원 클라이언트 응용 프로그램에서 사용할 컨트롤의 기본 동작 설명입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription">
          <source>An object's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A&gt;</ph> property describes the object's primary method of manipulation from the user's viewpoint.</source>
          <target state="translated">개체의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A&gt;</ph> 속성 개체의 기본 사용자의 관점에서 조작 방법에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription">
          <source>This property should be a verb or a short verb phrase.</source>
          <target state="translated">이 속성에 동사 또는 짧은 동사 구 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription">
          <source>Not all objects have default actions, and some objects might have a default action that is related to its <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject.Value%2A?displayProperty=nameWithType&gt;</ph> property, such as in the following examples:</source>
          <target state="translated">일부 개체는 기본 동작 및 일부 개체에 관련 된 기본 작업이 있는 것은 <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject.Value%2A?displayProperty=nameWithType&gt;</ph> 다음 예제와 같이 속성:</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription">
          <source>A selected check box has a default action of "Uncheck" and a value of "Checked."</source>
          <target state="translated">선택 된 확인란 "취소"의 기본 동작에는 "선택 됩니다."의 값</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription">
          <source>A cleared check box has a default action of "Check" and a value of "Unchecked."</source>
          <target state="translated">선택 취소 된 확인란에 "확인"의 기본 동작 및 값이 "옵션"을 해제 합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription">
          <source>A button labeled "Print" has a default action of "Press," with no value.</source>
          <target state="translated">"인쇄" 레이블이 붙은 단추 기본 동작이 "Press"의 값이 없는 합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription">
          <source>A label or a text box control that shows "Printer" has no default action, but would have a value of "Printer."</source>
          <target state="translated">레이블 또는 "Printer"를 표시 하는 텍스트 상자 컨트롤에 기본 작업이 없는 "Printer"의 값</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription">
          <source>For more information about properties of accessible objects, see <bpt id="p1">[</bpt>Content of Descriptive Properties<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)</ept>.</source>
          <target state="translated">액세스 가능한 개체의 속성에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>설명이 포함 된 속성의 콘텐츠<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.AccessibleDescription">
          <source>Gets or sets the description of the control used by accessibility client applications.</source>
          <target state="translated">내게 필요한 옵션 지원 클라이언트 응용 프로그램에서 사용하는 컨트롤의 설명을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDescription">
          <source>The description of the control used by accessibility client applications.</source>
          <target state="translated">내게 필요한 옵션 지원 클라이언트 응용 프로그램에서 사용하는 컨트롤의 설명입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDescription">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDescription">
          <source>An object's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleDescription%2A&gt;</ph> property provides a textual description about an object's visual appearance.</source>
          <target state="translated">개체의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleDescription%2A&gt;</ph> 속성은 개체의 시각적 모양에 대 한 텍스트 설명을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDescription">
          <source>The description is primarily used to provide greater context for low-vision or blind users, but can also be used for context searching or other applications.</source>
          <target state="translated">설명은 이해를 돕기 위해 시각 장애인을 위해 주로 사용 하지만 컨텍스트 검색 이나 다른 응용 프로그램에 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDescription">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleDescription%2A&gt;</ph> property is needed if the description is not obvious, or if it is redundant based on the object's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.AccessibleName%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.AccessibleRole%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.AccessibleObject.State%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Forms.AccessibleObject.Value%2A&gt;</ph> properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleDescription%2A&gt;</ph> 속성 설명이 드러나지 않습니다. 경우에 필요 하거나 중복 되는 경우 개체의 기반 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.AccessibleName%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.AccessibleRole%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.AccessibleObject.State%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Windows.Forms.AccessibleObject.Value%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDescription">
          <source>For example, a button with "OK" would not need additional information, but a button that shows a picture of a cactus would.</source>
          <target state="translated">예를 들어, "확인" 단추에는 추가 정보를 사용 해야 합니다. 하지만 선인장 그림이 표시 된 단추입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDescription">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleName%2A&gt;</ph>, and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.AccessibleRole%2A&gt;</ph> (and perhaps <ph id="ph3">&lt;xref:System.Windows.Forms.AccessibleObject.Help%2A&gt;</ph>) properties for the cactus button would describe its purpose, but the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.AccessibleDescription%2A&gt;</ph> property would convey information that is less tangible, such as "A button that shows a picture of a cactus."</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleName%2A&gt;</ph>, 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.AccessibleRole%2A&gt;</ph> (용도나 <ph id="ph3">&lt;xref:System.Windows.Forms.AccessibleObject.Help%2A&gt;</ph>) 선인장 단추에 대 한 속성의 용도 설명 하지만 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.AccessibleDescription%2A&gt;</ph> 속성 "선인장 그림이 표시 된 단추입니다."와 같은 명백 하지 않은 정보를 전달 합니다</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDescription">
          <source>For more information about properties of accessible objects, see <bpt id="p1">[</bpt>Content of Descriptive Properties<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)</ept>.</source>
          <target state="translated">액세스 가능한 개체의 속성에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>설명이 포함 된 속성의 콘텐츠<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDescription">
          <source>The following code example creates an instance of a <ph id="ph1">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> derived class, <ph id="ph2">`MyCheckBox`</ph>, assigns it an <ph id="ph3">&lt;xref:System.Drawing.Image&gt;</ph> to its <ph id="ph4">&lt;xref:System.Windows.Forms.ButtonBase.Image%2A&gt;</ph> property and sets the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.AccessibleName%2A&gt;</ph> and <ph id="ph6">&lt;xref:System.Windows.Forms.Control.AccessibleDescription%2A&gt;</ph> properties, because the <ph id="ph7">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property is <ph id="ph8">`null`</ph>.</source>
          <target state="translated">다음 코드 예제에서는의 인스턴스를 만듭니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> 파생 클래스를 <ph id="ph2">`MyCheckBox`</ph>, 할당 한 <ph id="ph3">&lt;xref:System.Drawing.Image&gt;</ph> 를 해당 <ph id="ph4">&lt;xref:System.Windows.Forms.ButtonBase.Image%2A&gt;</ph> 속성을 설정은 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.AccessibleName%2A&gt;</ph> 및 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.AccessibleDescription%2A&gt;</ph> 속성 때문에 <ph id="ph7">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성은 <ph id="ph8">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleDescription">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> named <ph id="ph2">`MyForm`</ph>.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 라는 <ph id="ph2">`MyForm`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.AccessibleName">
          <source>Gets or sets the name of the control used by accessibility client applications.</source>
          <target state="translated">내게 필요한 옵션 지원 클라이언트 응용 프로그램에서 사용하는 컨트롤의 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleName">
          <source>The name of the control used by accessibility client applications.</source>
          <target state="translated">내게 필요한 옵션 지원 클라이언트 응용 프로그램에서 사용하는 컨트롤의 이름입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleName">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleName">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleName%2A&gt;</ph> property is a label that briefly describes and identifies the object within its container, such as the text in a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph>, the name of a <ph id="ph3">&lt;xref:System.Windows.Forms.MenuItem&gt;</ph>, or a label displayed next to a <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleName%2A&gt;</ph> 속성은 간략하게 설명 하 고 텍스트와 같은 해당 컨테이너 내에서 개체를 식별 하는 레이블을 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph>, 이름는 <ph id="ph3">&lt;xref:System.Windows.Forms.MenuItem&gt;</ph>, 또는 옆에 표시 되는 레이블을 <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleName">
          <source>For more information about properties of accessible objects, see the "<bpt id="p1">[</bpt>Content of Descriptive Properties<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)</ept>.</source>
          <target state="translated">액세스 가능한 개체의 속성에 대 한 자세한 내용은 참조는 "<bpt id="p1">[</bpt>설명이 포함 된 속성의 콘텐츠<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleName">
          <source>The following code example creates an instance of a <ph id="ph1">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> derived class, <ph id="ph2">`MyCheckBox`</ph>, assigns it an <ph id="ph3">&lt;xref:System.Drawing.Image&gt;</ph> to its <ph id="ph4">&lt;xref:System.Windows.Forms.ButtonBase.Image%2A&gt;</ph> property and sets the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.AccessibleName%2A&gt;</ph> and <ph id="ph6">&lt;xref:System.Windows.Forms.Control.AccessibleDescription%2A&gt;</ph> properties since the <ph id="ph7">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property is <ph id="ph8">`null`</ph>.</source>
          <target state="translated">다음 코드 예제에서는의 인스턴스를 만듭니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> 파생 클래스를 <ph id="ph2">`MyCheckBox`</ph>, 할당 된 <ph id="ph3">&lt;xref:System.Drawing.Image&gt;</ph> 를 해당 <ph id="ph4">&lt;xref:System.Windows.Forms.ButtonBase.Image%2A&gt;</ph> 속성을 설정은 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.AccessibleName%2A&gt;</ph> 및 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.AccessibleDescription%2A&gt;</ph> 이후 속성은 <ph id="ph7">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 <ph id="ph8">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleName">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> named <ph id="ph2">`MyForm`</ph>.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 라는 <ph id="ph2">`MyForm`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.AccessibleRole">
          <source>Gets or sets the accessible role of the control</source>
          <target state="translated">컨트롤의 액세스 가능 역할을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleRole">
          <source>One of the values of <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleRole" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleRole" /&gt;</ph>의 다음 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleRole">
          <source>The default is <ph id="ph1">&lt;see langword="Default" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="Default" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleRole">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleRole%2A&gt;</ph> property describes what kind of user interface element an object is.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleRole%2A&gt;</ph> 속성은 개체가 어떤 사용자 인터페이스 요소 종류인지 설명합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleRole">
          <source>If the control's role cannot be determined, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleRole%2A&gt;</ph> property is set to <ph id="ph2">`Default`</ph>.</source>
          <target state="translated">컨트롤의 역할을 확인할 수 없으면 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibleRole%2A&gt;</ph> 속성은 <ph id="ph2">`Default`</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AccessibleRole">
          <source>For more information about properties of accessible objects, see <bpt id="p1">[</bpt>Content of Descriptive Properties<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)</ept>.</source>
          <target state="translated">액세스 가능한 개체의 속성에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>설명이 포함 된 속성의 콘텐츠<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.AccessibleRole">
          <source>The value assigned is not one of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleRole" /&gt;</ph> values.</source>
          <target state="translated">할당된 값이 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleRole" /&gt;</ph> 값 중 하나가 아닌 경우</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.AllowDrop">
          <source>Gets or sets a value indicating whether the control can accept data that the user drags onto it.</source>
          <target state="translated">사용자가 컨트롤로 끌어 온 데이터가 해당 컨트롤에서 허용되는지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AllowDrop">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if drag-and-drop operations are allowed in the control; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤에서 끌어서 놓기 작업을 수행할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AllowDrop">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AllowDrop">
          <source>The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped.</source>
          <target state="translated">사용자 이미지 또는 이미지 파일을 폼으로 끌어 지점에 표시 되도록가를 놓이고는 다음 코드 예제에서는 합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AllowDrop">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> 메서드는 폼을 그릴 될 때마다 이미지를 다시 그리기 위해 재정의 됩니다; 그렇지 않은 경우 이미지는 다음에 다시 그릴 때까지 유지만 합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AllowDrop">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> 이벤트 처리 메서드는 형식으로 끌고 있는 데이터의 형식을 결정 하 고 적절 한 피드백을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AllowDrop">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> event-handling method displays the image on the form, if an <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph> can be created from the data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> 경우 이벤트 처리 메서드는 폼에 이미지를 표시 한 <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph> 데이터에서 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AllowDrop">
          <source>Because the <ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType&gt;</ph> values are screen coordinates, the example uses the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PointToClient%2A&gt;</ph> method to convert them to client coordinates.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType&gt;</ph> 값은 화면 좌표를 사용 하 여는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PointToClient%2A&gt;</ph> 메서드를 클라이언트 좌표로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AllowDrop">
          <source>for unrestricted Clipboard access to set this property to <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">이 속성을 설정에 대 한 무제한 클립보드 액세스에 대 한 <ph id="ph1">&lt;see langword="true" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AllowDrop">
          <source>Associated enumeration: the <ph id="ph1">&lt;see langword="AllClipboard" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionClipboard" /&gt;</ph></source>
          <target state="translated">연관 된 열거형:는 <ph id="ph1">&lt;see langword="AllClipboard" /&gt;</ph> 의 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionClipboard" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AllowDrop">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.AllowDrop" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.AllowDrop" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.AllowDrop" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.AllowDrop" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AllowDrop">
          <source>Otherwise, you must provide all the implementation.</source>
          <target state="translated">그렇지 않으면 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AllowDrop">
          <source>You are not required to override both the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.AllowDrop" /&gt;</ph> property; you can override only one if needed.</source>
          <target state="translated">모두 재정의할 필요 하지는 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 의 접근자는 <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.AllowDrop" /&gt;</ph> 속성 필요한 경우 하나만 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Anchor">
          <source>Gets or sets the edges of the container to which a control is bound and determines how a control is resized with its parent.</source>
          <target state="translated">컨트롤이 바인딩되는 컨테이너의 가장자리를 가져오거나 설정하고 해당 부모를 기초로 컨트롤 크기를 조정하는 방법을 결정합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AnchorStyles" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.AnchorStyles" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>The default is <ph id="ph1">&lt;see langword="Top" /&gt;</ph> and <ph id="ph2">&lt;see langword="Left" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="Top" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="Left" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph> property to define how a control is automatically resized as its parent control is resized.</source>
          <target state="translated">사용 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph> 컨트롤은 자동으로 조정 방법을 부모 컨트롤 크기 조정 되는지를 정의 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>Anchoring a control to its parent control ensures that the anchored edges remain in the same position relative to the edges of the parent control when the parent control is resized.</source>
          <target state="translated">부모 컨트롤에 컨트롤을 고정 부모 컨트롤 크기를 조정할 때 부모 컨트롤의 가장자리를 기준으로 같은 위치에 고정된 된 가장자리 남아 있는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>You can anchor a control to one or more edges of its container.</source>
          <target state="translated">해당 컨테이너의 가장자리를 하나 이상의 컨트롤을 고정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>For example, if you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> whose <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph> property value is set to <ph id="ph4">`Top`</ph> and <ph id="ph5">`Bottom`</ph>, the <ph id="ph6">&lt;xref:System.Windows.Forms.Button&gt;</ph> is stretched to maintain the anchored distance to the top and bottom edges of the <ph id="ph7">&lt;xref:System.Windows.Forms.Form&gt;</ph> as the <ph id="ph8">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> of the <ph id="ph9">&lt;xref:System.Windows.Forms.Form&gt;</ph> is increased.</source>
          <target state="translated">예를 들어 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 인 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph> 속성 값으로 설정 됩니다 <ph id="ph4">`Top`</ph> 및 <ph id="ph5">`Bottom`</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Button&gt;</ph> 는 의위쪽및아래쪽가장자리에고정된거리를유지하기위해<ph id="ph7">&lt;xref:System.Windows.Forms.Form&gt;</ph>로 <ph id="ph8">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> 의 <ph id="ph9">&lt;xref:System.Windows.Forms.Form&gt;</ph> 증가 합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> properties are mutually exclusive.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> 속성은 함께 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>Only one can be set at a time, and the last one set takes precedence.</source>
          <target state="translated">한 번에 하나만 설정할 수 있습니다 및 우선적으로 마지막으로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>The following code example adds a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> to a form and sets some of its common properties.</source>
          <target state="translated">다음 코드 예제에서는 추가 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 폼에 일반적인 속성 중 일부를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</source>
          <target state="translated">이 예제에서는 폼 크기가 조정 될 때의 상대 위치를 유지할 수 있도록 폼의 오른쪽 아래 모서리에 있는 단추를 고정 합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>Next it sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> and resizes the button to the same size as the <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph>.</source>
          <target state="translated">그런 다음 설정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> 단추와 같은 크기를 조정 하 고는 <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>The example then sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> to <ph id="ph2">`true`</ph> and sets the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt;</ph> property.</source>
          <target state="translated">설정한 후의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> 를 <ph id="ph2">`true`</ph> 설정 하 고는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>Lastly, it adds an event handler to handle the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event of the button.</source>
          <target state="translated">마지막으로 처리 하는 이벤트 처리기 추가 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 단추의 이벤트가 있습니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>This example requires that you have an <ph id="ph1">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> named <ph id="ph2">`imageList1`</ph>.</source>
          <target state="translated">이 예제를 실행 하려면 프로그램 <ph id="ph1">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> 라는 <ph id="ph2">`imageList1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Anchor" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Anchor" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Anchor" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Anchor" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>Otherwise, you must provide all the implementation.</source>
          <target state="translated">그렇지 않으면 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Anchor">
          <source>You are not required to override both the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.Anchor" /&gt;</ph> property; you can override only one if needed.</source>
          <target state="translated">모두 재정의할 필요 하지는 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 의 접근자는 <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.Anchor" /&gt;</ph> 속성 필요한 경우 하나만 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.AutoScrollOffset">
          <source>Gets or sets where this control is scrolled to in <ph id="ph1">&lt;see cref="M:System.Windows.Forms.ScrollableControl.ScrollControlIntoView(System.Windows.Forms.Control)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Forms.ScrollableControl.ScrollControlIntoView(System.Windows.Forms.Control)" /&gt;</ph>에서 이 컨트롤이 스크롤되는 위치를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AutoScrollOffset">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph> specifying the scroll location.</source>
          <target state="translated">스크롤 위치를 지정하는 <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AutoScrollOffset">
          <source>The default is the upper-left corner of the control.</source>
          <target state="translated">기본값은 컨트롤의 왼쪽 위 모퉁이입니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.AutoSize">
          <source>This property is not relevant for this class.</source>
          <target state="translated">이 속성은 이 클래스와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AutoSize">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">사용하도록 설정되어 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.AutoSize">
          <source>This property is not relevant for this class.</source>
          <target state="translated">이 속성은 이 클래스와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.AutoSizeChanged">
          <source>This event is not relevant for this class.</source>
          <target state="translated">이 이벤트는 이 클래스와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.AutoSizeChanged">
          <source>This event is not relevant for this class.</source>
          <target state="translated">이 이벤트는 이 클래스와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.BackColor">
          <source>Gets or sets the background color for the control.</source>
          <target state="translated">컨트롤의 배경색을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackColor">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Color" /&gt;</ph> that represents the background color of the control.</source>
          <target state="translated">컨트롤의 배경색을 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Color" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackColor">
          <source>The default is the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.DefaultBackColor" /&gt;</ph> property.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.DefaultBackColor" /&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackColor">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> property does not support transparent colors unless the <ph id="ph2">`SupportsTransparentBackColor`</ph> value of <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType&gt;</ph> is set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> 속성 하지 않는 한 투명 한 색을 지원 하지 않습니다는 <ph id="ph2">`SupportsTransparentBackColor`</ph> 값 <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType&gt;</ph> 로 설정 된 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackColor">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> property is an ambient property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> 속성이 앰비언트 속성입니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackColor">
          <source>An ambient property is a control property that, if not set, is retrieved from the parent control.</source>
          <target state="translated">그렇지 않은 경우, 즉 앰비언트 속성은 컨트롤 속성 설정, 부모 컨트롤에서 검색 됩니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackColor">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> will have the same <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> as its parent <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> by default.</source>
          <target state="translated">예를 들어 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 같은 가질 수 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> 부모로 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackColor">
          <source>For more information about ambient properties, see the <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> class overview.</source>
          <target state="translated">앰비언트 속성에 대 한 자세한 내용은 참조는 <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph> 클래스 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스 개요입니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackColor">
          <source>The following code example sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of the controls to the default system colors.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 컨트롤을 기본 시스템 색상입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackColor">
          <source>The code recursively calls itself if the control has any child controls.</source>
          <target state="translated">코드 재귀적으로 컨트롤에 자식 컨트롤이 경우 자신을 호출 합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackColor">
          <source>This code example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with at least one child control; however, a child container control, like a <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph>, with its own child control(s) would better demonstrate the recursion.</source>
          <target state="translated">이 코드 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 하나 이상의 자식 컨트롤과; 그러나 자식 컨테이너 컨트롤, like는 <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph>, 자체 자식 컨트롤은 보다 잘 보여 주는 재귀 합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackColor">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.BackColor" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.BackColor" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.BackColor" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.BackColor" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackColor">
          <source>Otherwise, you must provide all the implementation.</source>
          <target state="translated">그렇지 않으면 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackColor">
          <source>You are not required to override both the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.BackColor" /&gt;</ph> property; you can override only one if needed.</source>
          <target state="translated">모두 재정의할 필요 하지는 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 의 접근자는 <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.BackColor" /&gt;</ph> 속성 필요한 경우 하나만 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.BackColorChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.BackColor" /&gt;</ph> property changes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.BackColor" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackColorChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackColorChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackColorChanged">
          <source>The following code example is an event handler that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트 처리기 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackColorChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph2">`Changed`</ph> that are raised when the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> value changes (<bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph2">`Changed`</ph> 있는 될 때 발생 하는 해당 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> 값이 변경 (<bpt id="p3">*</bpt> PropertyName<ept id="p3">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackColorChanged">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackColorChanged">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackColorChanged">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that contains a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 를 포함 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.BackgroundImage">
          <source>Gets or sets the background image displayed in the control.</source>
          <target state="translated">컨트롤에 표시할 배경 이미지를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImage">
          <source>An <ph id="ph1">&lt;see cref="T:System.Drawing.Image" /&gt;</ph> that represents the image to display in the background of the control.</source>
          <target state="translated">컨트롤의 배경에 표시할 이미지를 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Image" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImage">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> property to place a graphic image onto a control.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> 속성을 컨트롤에 그래픽 이미지를 삽입 합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImage">
          <source>Images with translucent or transparent colors are not supported by Windows Forms controls as background images.</source>
          <target state="translated">반투명, 투명 한 색을 사용 하 여 이미지 배경 이미지와 Windows Forms 컨트롤에서 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImage">
          <source>This property is not supported on child controls whose <ph id="ph1">&lt;xref:System.Windows.Forms.Form.RightToLeftLayout%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">이 속성이 지원 되지 않는 자식 컨트롤 <ph id="ph1">&lt;xref:System.Windows.Forms.Form.RightToLeftLayout%2A&gt;</ph> 속성은 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImage">
          <source>The following code example adds a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> to a form and sets some of its common properties.</source>
          <target state="translated">다음 코드 예제에서는 추가 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 폼에 일반적인 속성 중 일부를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImage">
          <source>The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</source>
          <target state="translated">이 예제에서는 폼 크기가 조정 될 때의 상대 위치를 유지할 수 있도록 폼의 오른쪽 아래 모서리에 있는 단추를 고정 합니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImage">
          <source>Next it sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> and resizes the button to the same size as the <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph>.</source>
          <target state="translated">그런 다음 설정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> 단추와 같은 크기를 조정 하 고는 <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImage">
          <source>The example then sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> to <ph id="ph2">`true`</ph> and sets the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt;</ph> property.</source>
          <target state="translated">설정한 후의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> 를 <ph id="ph2">`true`</ph> 설정 하 고는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImage">
          <source>Lastly, it adds an event handler to handle the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event of the button.</source>
          <target state="translated">마지막으로 처리 하는 이벤트 처리기 추가 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 단추의 이벤트가 있습니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImage">
          <source>This example requires that you have an <ph id="ph1">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> named <ph id="ph2">`imageList1`</ph>.</source>
          <target state="translated">이 예제를 실행 하려면 프로그램 <ph id="ph1">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> 라는 <ph id="ph2">`imageList1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImage">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.BackgroundImage" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.BackgroundImage" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.BackgroundImage" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.BackgroundImage" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImage">
          <source>Otherwise, you must provide all the implementation.</source>
          <target state="translated">그렇지 않으면 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImage">
          <source>You are not required to override both the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.BackgroundImage" /&gt;</ph> property; you can override only one if needed.</source>
          <target state="translated">모두 재정의할 필요 하지는 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 의 접근자는 <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.BackgroundImage" /&gt;</ph> 속성 필요한 경우 하나만 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.BackgroundImageChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.BackgroundImage" /&gt;</ph> property changes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.BackgroundImage" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackgroundImageChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackgroundImageChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackgroundImageChanged">
          <source>The following code example is an event handler that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트 처리기 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackgroundImageChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph2">`Changed`</ph> that are raised when the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> value changes (<bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph2">`Changed`</ph> 있는 될 때 발생 하는 해당 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> 값이 변경 (<bpt id="p3">*</bpt> PropertyName<ept id="p3">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackgroundImageChanged">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackgroundImageChanged">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackgroundImageChanged">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that contains a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 를 포함 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.BackgroundImageLayout">
          <source>Gets or sets the background image layout as defined in the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ImageLayout" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.ImageLayout" /&gt;</ph> 열거형에서 정의된 대로 배경 이미지 레이아웃을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImageLayout">
          <source>One of the values of <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ImageLayout" /&gt;</ph> (<ph id="ph2">&lt;see cref="F:System.Windows.Forms.ImageLayout.Center" /&gt;</ph> , <ph id="ph3">&lt;see cref="F:System.Windows.Forms.ImageLayout.None" /&gt;</ph>, <ph id="ph4">&lt;see cref="F:System.Windows.Forms.ImageLayout.Stretch" /&gt;</ph>, <ph id="ph5">&lt;see cref="F:System.Windows.Forms.ImageLayout.Tile" /&gt;</ph>, or <ph id="ph6">&lt;see cref="F:System.Windows.Forms.ImageLayout.Zoom" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.ImageLayout" /&gt;</ph>의 값(<ph id="ph2">&lt;see cref="F:System.Windows.Forms.ImageLayout.Center" /&gt;</ph>, <ph id="ph3">&lt;see cref="F:System.Windows.Forms.ImageLayout.None" /&gt;</ph>, <ph id="ph4">&lt;see cref="F:System.Windows.Forms.ImageLayout.Stretch" /&gt;</ph>, <ph id="ph5">&lt;see cref="F:System.Windows.Forms.ImageLayout.Tile" /&gt;</ph> 또는 <ph id="ph6">&lt;see cref="F:System.Windows.Forms.ImageLayout.Zoom" /&gt;</ph>) 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImageLayout">
          <source><ph id="ph1">&lt;see cref="F:System.Windows.Forms.ImageLayout.Tile" /&gt;</ph> is the default value.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.Forms.ImageLayout.Tile" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImageLayout">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImageLayout%2A&gt;</ph> property to specify the position and behavior of an image you have placed onto a control.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImageLayout%2A&gt;</ph> 속성을 통해 위치 및 컨트롤에 배치 했으면 이미지의 동작을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImageLayout">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImageLayout%2A&gt;</ph> takes effect only if the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> property is set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImageLayout%2A&gt;</ph> 경우에 적용 됩니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BackgroundImageLayout">
          <source>You can increase performance for large images if you set <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImageLayout%2A&gt;</ph> to something other than <ph id="ph2">&lt;xref:System.Windows.Forms.ImageLayout.Tile&gt;</ph>.</source>
          <target state="translated">설정 하는 경우에 큰 이미지에 대 한 성능을 향상 시킬 수 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImageLayout%2A&gt;</ph> 이외의 다른 값으로 <ph id="ph2">&lt;xref:System.Windows.Forms.ImageLayout.Tile&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.BackgroundImageLayout">
          <source>The specified enumeration value does not exist.</source>
          <target state="translated">지정된 열거형 값이 없는 경우</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.BackgroundImageLayout" /&gt;</ph> property changes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.BackgroundImageLayout" /&gt;</ph> 속성이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImageLayout%2A&gt;</ph> property changes either programmatically or by user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImageLayout%2A&gt;</ph> 속성을 프로그래밍 방식으로 또는 사용자 인터페이스에 의해 변경 합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged">
          <source>To report on multiple events or on events that occur frequently, consider replacing <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> with <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or appending the message to a multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 여러 줄에 메시지를 추가 하거나 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Control">
          <source>Executes a delegate asynchronously on the thread that the control's underlying handle was created on.</source>
          <target state="translated">컨트롤의 내부 핸들이 작성된 스레드에서 대리자를 비동기식으로 실행합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>A delegate to a method that takes no parameters.</source>
          <target state="translated">매개 변수를 사용하지 않는 메서드의 대리자입니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>Executes the specified delegate asynchronously on the thread that the control's underlying handle was created on.</source>
          <target state="translated">컨트롤의 내부 핸들이 작성된 스레드에서 지정된 대리자를 비동기식으로 실행합니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the result of the <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /&gt;</ph> operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 작업의 결과를 나타내는 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>The delegate is called asynchronously, and this method returns immediately.</source>
          <target state="translated">대리자가 비동기적으로 호출 하 고이 메서드가 즉시 반환 합니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>You can call this method from any thread, even the thread that owns the control's handle.</source>
          <target state="translated">컨트롤의 핸들이 있는 스레드에서 모든 스레드에서이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</source>
          <target state="translated">컨트롤의 핸들이 아직 존재 하지 않는 경우 창 핸들이 폼 또는 컨트롤을 찾을 때까지이 메서드는 컨트롤의 부모 체인을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>If no appropriate handle can be found, <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> will throw an exception.</source>
          <target state="translated">적절 한 핸들을 찾을 수 있는 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>Exceptions within the delegate method are considered untrapped and will be sent to the application's untrapped exception handler.</source>
          <target state="translated">대리자 메서드 내에서 예외 포착 되지 않는 것으로 간주 되어 응용 프로그램의 포착 되지 않은 예외 처리기로 전송 됩니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>You can call <ph id="ph1">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph> to retrieve the return value from the delegate, if neccesary, but this is not required.</source>
          <target state="translated">호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph> 경우도 있지만이 필요 하지 않은 경우는 대리자의 반환 값을 검색할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph> will block until the return value can be retrieved.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph> 반환 값을 검색할 수 있을 때까지 차단 됩니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>Most methods on a control can only be called from the thread where the control was created.</source>
          <target state="translated">대부분의 메서드는 컨트롤 에서만 호출 될 수 스레드에서 컨트롤이 만들어진 위치입니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>In addition to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property, there are four methods on a control that are thread safe: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> if the handle for the control has already been created.</source>
          <target state="translated">외에 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> 속성에는 스레드로부터 안전 컨트롤에서 네 가지 메서드가 있습니다: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 컨트롤에 대 한 핸들에서 이미 만든 경우.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> before the control's handle has been created on a background thread can cause illegal cross thread calls.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 컨트롤의 핸들이 백그라운드 스레드에서 생성 되기 전에 잘못 된 크로스 스레드 호출 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</source>
          <target state="translated">다른 모든 메서드 호출에 대 한 사용할지 invoke 메서드 중 하나를 컨트롤의 스레드에 대 한 호출을 마샬링하 합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>The invoke methods always invoke their callbacks on the control's thread.</source>
          <target state="translated">Invoke 메서드는 항상 컨트롤의 스레드에 해당 콜백을 호출합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>An exception might be thrown if the thread that should process the message is no longer active.</source>
          <target state="translated">메시지를 처리 해야 하는 스레드가 더 이상 활성 상태 이면 예외가 throw 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>The following code example demonstrates a use of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> method.</source>
          <target state="translated">사용법을 설명 하는 다음 코드 예제는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>No appropriate window handle can be found.</source>
          <target state="translated">해당 창 핸들을 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>for the immediate caller to call unmanaged code.</source>
          <target state="translated">비관리 코드를 호출할 직접 실행 호출자입니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>A delegate to a method that takes parameters of the same number and type that are contained in the <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> 매개 변수에 있는 매개 변수의 수 및 형식과 동일한 매개 변수를 갖는 메서드의 대리자입니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>An array of objects to pass as arguments to the given method.</source>
          <target state="translated">주어진 메서드에 인수로 전달하는 개체의 배열입니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>This can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no arguments are needed.</source>
          <target state="translated">인수가 필요하지 않으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>Executes the specified delegate asynchronously with the specified arguments, on the thread that the control's underlying handle was created on.</source>
          <target state="translated">컨트롤의 내부 핸들이 작성된 스레드에서 특정 인수를 사용하여 지정된 대리자를 비동기식으로 실행합니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the result of the <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /&gt;</ph> operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 작업의 결과를 나타내는 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>The delegate is called asynchronously, and this method returns immediately.</source>
          <target state="translated">대리자가 비동기적으로 호출 하 고이 메서드가 즉시 반환 합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>You can call this method from any thread, even the thread that owns the control's handle.</source>
          <target state="translated">컨트롤의 핸들이 있는 스레드에서 모든 스레드에서이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</source>
          <target state="translated">컨트롤의 핸들이 아직 존재 하지 않는 경우 창 핸들이 폼 또는 컨트롤을 찾을 때까지이 메서드는 컨트롤의 부모 체인을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>If no appropriate handle can be found, <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> will throw an exception.</source>
          <target state="translated">적절 한 핸들을 찾을 수 있는 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>Exceptions within the delegate method are considered untrapped and will be sent to the application's untrapped exception handler.</source>
          <target state="translated">대리자 메서드 내에서 예외 포착 되지 않는 것으로 간주 되어 응용 프로그램의 포착 되지 않은 예외 처리기로 전송 됩니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>You can call <ph id="ph1">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph> to retrieve the return value from the delegate, if neccesary, but this is not required.</source>
          <target state="translated">호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph> 경우도 있지만이 필요 하지 않은 경우는 대리자의 반환 값을 검색할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph> will block until the return value can be retrieved.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph> 반환 값을 검색할 수 있을 때까지 차단 됩니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>Most methods on a control can only be called from the thread where the control was created.</source>
          <target state="translated">대부분의 메서드는 컨트롤 에서만 호출 될 수 스레드에서 컨트롤이 만들어진 위치입니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>In addition to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property, there are four methods on a control that are thread safe: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> if the handle for the control has already been created.</source>
          <target state="translated">외에 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> 속성에는 스레드로부터 안전 컨트롤에서 네 가지 메서드가 있습니다: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 컨트롤에 대 한 핸들에서 이미 만든 경우.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> before the control's handle has been created on a background thread can cause illegal cross thread calls.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 컨트롤의 핸들이 백그라운드 스레드에서 생성 되기 전에 잘못 된 크로스 스레드 호출 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</source>
          <target state="translated">다른 모든 메서드 호출에 대 한 사용할지 invoke 메서드 중 하나를 컨트롤의 스레드에 대 한 호출을 마샬링하 합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>The invoke methods always invoke their callbacks on the control's thread.</source>
          <target state="translated">Invoke 메서드는 항상 컨트롤의 스레드에 해당 콜백을 호출합니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>An exception might be thrown if the thread that should process the message is no longer active.</source>
          <target state="translated">메시지를 처리 해야 하는 스레드가 더 이상 활성 상태 이면 예외가 throw 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>The following code example demonstrates a use of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> method.</source>
          <target state="translated">사용법을 설명 하는 다음 코드 예제는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])">
          <source>No appropriate window handle can be found.</source>
          <target state="translated">해당 창 핸들을 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.BindingContext">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.BindingContext" /&gt;</ph> for the control.</source>
          <target state="translated">컨트롤의 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.BindingContext" /&gt;</ph>를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BindingContext">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.BindingContext" /&gt;</ph> for the control.</source>
          <target state="translated">컨트롤의 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.BindingContext" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BindingContext">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.BindingContext&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> is used to return a single <ph id="ph3">&lt;xref:System.Windows.Forms.BindingManagerBase&gt;</ph> for all data-bound controls contained by the <ph id="ph4">&lt;xref:System.Windows.Forms.Control&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.BindingContext&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> 하나의 반환 하는 데 사용 되 <ph id="ph3">&lt;xref:System.Windows.Forms.BindingManagerBase&gt;</ph> 에 포함 된 모든 데이터 바인딩된 컨트롤에 대 한는 <ph id="ph4">&lt;xref:System.Windows.Forms.Control&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BindingContext">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.BindingManagerBase&gt;</ph> keeps all controls that are bound to the same data source synchronized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.BindingManagerBase&gt;</ph> 동기화 동일한 데이터 소스에 바인딩된 모든 컨트롤을 유지 합니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BindingContext">
          <source>For example, setting the <ph id="ph1">&lt;xref:System.Windows.Forms.BindingManagerBase.Position%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Forms.BindingManagerBase&gt;</ph> specifies the item in the underlying list that all data-bound controls point to.</source>
          <target state="translated">예를 들어 설정는 <ph id="ph1">&lt;xref:System.Windows.Forms.BindingManagerBase.Position%2A&gt;</ph> 의 속성은 <ph id="ph2">&lt;xref:System.Windows.Forms.BindingManagerBase&gt;</ph> 모든 데이터 바인딩된 컨트롤이 가리키는 내부 목록에서 항목을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BindingContext">
          <source>For more information about creating a new <ph id="ph1">&lt;xref:System.Windows.Forms.BindingContext&gt;</ph> and assigning it to the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BindingContext%2A&gt;</ph> property, see the <ph id="ph3">&lt;xref:System.Windows.Forms.BindingContext.%23ctor%2A&gt;</ph>.</source>
          <target state="translated">새로 만드는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Forms.BindingContext&gt;</ph> 할당 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BindingContext%2A&gt;</ph> 속성 참조는 <ph id="ph3">&lt;xref:System.Windows.Forms.BindingContext.%23ctor%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BindingContext">
          <source>The following code example creates four <ph id="ph1">&lt;xref:System.Windows.Forms.Binding&gt;</ph> objects to bind five controls, a <ph id="ph2">&lt;xref:System.Windows.Forms.DateTimePicker&gt;</ph> and four <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> controls, to several data sources.</source>
          <target state="translated">다음 코드 예제에서는 네 개를 만듭니다 <ph id="ph1">&lt;xref:System.Windows.Forms.Binding&gt;</ph> 다섯 개의 컨트롤을 바인딩하는 개체는 <ph id="ph2">&lt;xref:System.Windows.Forms.DateTimePicker&gt;</ph> 4 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 을 여러 데이터 소스 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BindingContext">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.BindingContext&gt;</ph> is then used to get the <ph id="ph2">&lt;xref:System.Windows.Forms.BindingManagerBase&gt;</ph> for each data source.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.BindingContext&gt;</ph> 다음 얻는 데 사용 되는 <ph id="ph2">&lt;xref:System.Windows.Forms.BindingManagerBase&gt;</ph> 각 데이터 원본에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BindingContext">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.BindingContext" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.BindingContext" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.BindingContext" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.BindingContext" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BindingContext">
          <source>Otherwise, you must provide all the implementation.</source>
          <target state="translated">그렇지 않으면 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.BindingContext">
          <source>You are not required to override both the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.BindingContext" /&gt;</ph> property; you can override only one if needed.</source>
          <target state="translated">모두 재정의할 필요 하지는 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 의 접근자는 <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.BindingContext" /&gt;</ph> 속성 필요한 경우 하나만 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.BindingContextChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.BindingContext" /&gt;</ph> property changes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.BindingContext" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BindingContextChanged">
          <source>To add a new <ph id="ph1">&lt;xref:System.Windows.Forms.BindingContext&gt;</ph> to the <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> through the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BindingContext%2A&gt;</ph> property, see the <ph id="ph4">&lt;xref:System.Windows.Forms.BindingContext.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">새 <ph id="ph1">&lt;xref:System.Windows.Forms.BindingContext&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> 통해는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BindingContext%2A&gt;</ph> 속성 참조는 <ph id="ph4">&lt;xref:System.Windows.Forms.BindingContext.%23ctor%2A&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BindingContextChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BindingContext%2A&gt;</ph> property is changed is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BindingContext%2A&gt;</ph> 속성이 변경 될 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 변경 됩니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BindingContextChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.BindingContextChanged">
          <source>The following code example adds an <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> delegate to the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BindingContextChanged&gt;</ph> event of a <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control.</source>
          <target state="translated">다음 코드 예제에서는 추가 <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> 위임는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BindingContextChanged&gt;</ph> 의 이벤트는 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Bottom">
          <source>Gets the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</source>
          <target state="translated">컨트롤의 아래쪽 가장자리와 해당 컨테이너 클라이언트 영역의 위쪽 가장자리 사이의 거리(픽셀)를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Bottom">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> representing the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</source>
          <target state="translated">컨트롤의 아래쪽 가장자리와 해당 컨테이너 클라이언트 영역의 위쪽 가장자리 사이의 거리(픽셀)를 나타내는 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Bottom">
          <source>The value of this property is equal to the sum of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph> property value, and the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> property value.</source>
          <target state="translated">이 속성의 값의 합계와 같은지는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph> 속성 값 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Bottom">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Bottom%2A&gt;</ph> property is a read-only property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Bottom%2A&gt;</ph> 속성은 읽기 전용 속성입니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Bottom">
          <source>You can manipulate this property value by changing the value of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> properties or calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SetBounds%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.SetBoundsCore%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.UpdateBounds%2A&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.SetClientSizeCore%2A&gt;</ph> methods.</source>
          <target state="translated">값을 변경 하 여이 속성 값을 조작할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> 속성 또는 호출의 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SetBounds%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.SetBoundsCore%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.UpdateBounds%2A&gt;</ph>, 또는 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.SetClientSizeCore%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Bottom">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Bottom%2A&gt;</ph> property to define the lower limit of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control relative to the client area of the container.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Bottom%2A&gt;</ph> 속성의 하 한을 정의할 수는 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 컨트롤 컨테이너의 클라이언트 영역을 기준으로 합니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Bounds">
          <source>Gets or sets the size and location of the control including its nonclient elements, in pixels, relative to the parent control.</source>
          <target state="translated">부모 컨트롤을 기준으로 비클라이언트 요소를 포함하는 컨트롤의 크기와 위치(픽셀)를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Bounds">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph> in pixels relative to the parent control that represents the size and location of the control including its nonclient elements.</source>
          <target state="translated">부모 컨트롤을 기준으로 비클라이언트 요소를 포함하여 컨트롤의 크기와 위치를 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph>(픽셀)입니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Bounds">
          <source>The bounds of the control include the nonclient elements such as scroll bars, borders, title bars, and menus.</source>
          <target state="translated">컨트롤의 범위는 스크롤 막대, 테두리, 제목 표시줄, 메뉴 등 비클라이언트 요소를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Bounds">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetBoundsCore%2A&gt;</ph> method is called to set the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Bounds%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetBoundsCore%2A&gt;</ph> 메서드는 설정 하 여 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Bounds%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Bounds">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Bounds%2A&gt;</ph> property is not always changed through its <ph id="ph2">`set`</ph> method so you should override the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SetBoundsCore%2A&gt;</ph> method to ensure that your code is executed when the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Bounds%2A&gt;</ph> property is set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Bounds%2A&gt;</ph> 속성이 통해 변경 되지 않습니다 해당 <ph id="ph2">`set`</ph> 메서드를 재정의 해야 하는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SetBoundsCore%2A&gt;</ph> 메서드 코드가 실행 되도록 때는 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Bounds%2A&gt;</ph> 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Bounds">
          <source>The following code example creates three <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls on a form and sets their size and location by using the various size-related and location-related properties.</source>
          <target state="translated">다음 코드 예제에서는 세 개를 만들며 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 폼에서 제어 하 고 다양 한 크기 및 위치 관련 속성을 사용 하 여 해당 크기와 위치를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Bounds">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that has a width and height of at least 300 pixels.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 하에 너비와 높이가 이상 300 픽셀입니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.BringToFront">
          <source>Brings the control to the front of the z-order.</source>
          <target state="translated">컨트롤을 Z 순서의 맨 앞으로 가져옵니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BringToFront">
          <source>The control is moved to the front of the z-order.</source>
          <target state="translated">컨트롤이 z 순서의 맨 앞으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BringToFront">
          <source>If the control is a child of another control, the child control is moved to the front of the z-order.</source>
          <target state="translated">다른 컨트롤의 자식 컨트롤을 사용 하는 경우 자식 컨트롤이 z 순서의 맨 앞으로 이동 됩니다.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BringToFront">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.BringToFront%2A&gt;</ph> does not make a control a top-level control, and it does not raise the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.BringToFront%2A&gt;</ph> 컨트롤을 최상위 컨트롤로 하며 발생 하지 않는 경우 만들지는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BringToFront">
          <source>The following code example ensures that a <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> is visible by calling its <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BringToFront%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드 예제를 사용 하면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> 호출 하 여 표시 되는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BringToFront%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.BringToFront">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with a <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> named <ph id="ph3">`panel1`</ph>, and a <ph id="ph4">&lt;xref:System.Windows.Forms.Label&gt;</ph> named <ph id="ph5">`label1`</ph>.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> 라는 <ph id="ph3">`panel1`</ph>, 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Label&gt;</ph> 라는 <ph id="ph5">`label1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.CanEnableIme">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ImeMode" /&gt;</ph> property can be set to an active value, to enable IME support.</source>
          <target state="translated">IME 지원을 사용하도록 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ImeMode" /&gt;</ph> 속성을 활성 값으로 설정할 수 있는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CanEnableIme">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> in all cases.</source>
          <target state="translated">모든 경우에 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CanEnableIme">
          <source>Derived classes can override this property to return <ph id="ph1">`false`</ph> if IME is not supported.</source>
          <target state="translated">파생된 클래스 반환 하도록이 속성을 재정의할 수 <ph id="ph1">`false`</ph> IME 지원 되지 않는 경우.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.CanFocus">
          <source>Gets a value indicating whether the control can receive focus.</source>
          <target state="translated">컨트롤이 포커스를 받을 수 있는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CanFocus">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control can receive focus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 포커스를 받을 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CanFocus">
          <source>In order for a control to receive input focus, the control must have a handle assigned to it, and the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> properties must both be set to <ph id="ph3">`true`</ph> for both the control and all its parent controls, and the control must be a form or the control's outermost parent must be a form.</source>
          <target state="translated">입력된 포커스를 받을 컨트롤에 대 한 순서 대로 컨트롤에 할당 하는 핸들 있어야 및 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> 속성 둘 다로 설정 해야 <ph id="ph3">`true`</ph> 컨트롤 모든 부모 컨트롤이 컨트롤이 폼에 대해 또는 컨트롤의 가장 바깥쪽 부모 폼 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CanFocus">
          <source>The following code example sets focus to the specified <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, if it can receive focus.</source>
          <target state="translated">다음 코드 예제에서는 지정 된 포커스를 설정 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>포커스를 받을 수 있으면, 합니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.CanRaiseEvents">
          <source>Determines if events can be raised on the control.</source>
          <target state="translated">컨트롤에서 이벤트가 발생할 수 있는지를 확인합니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CanRaiseEvents">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control is hosted as an ActiveX control whose events are not frozen; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 이벤트가 고정되지 않은 ActiveX 컨트롤로 호스팅되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CanRaiseEvents">
          <source>If this control is being hosted as an ActiveX control, this property will return <ph id="ph1">`false`</ph> if the ActiveX control has its events frozen.</source>
          <target state="translated">경우에이 컨트롤 ActiveX 컨트롤로 호스팅되는지,이 속성은 반환 <ph id="ph1">`false`</ph> ActiveX 컨트롤에 있는 경우 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.CanSelect">
          <source>Gets a value indicating whether the control can be selected.</source>
          <target state="translated">컨트롤을 선택할 수 있는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CanSelect">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control can be selected; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤을 선택할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CanSelect">
          <source>This property returns <ph id="ph1">`true`</ph> if the <ph id="ph2">`Selectable`</ph> value of <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType&gt;</ph> is set to <ph id="ph4">`true`</ph>, is contained in another control, the control itself is visible and enabled, and all its parent controls are visible and enabled.</source>
          <target state="translated">이 속성은 반환 <ph id="ph1">`true`</ph> 경우는 <ph id="ph2">`Selectable`</ph> 값 <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType&gt;</ph> 로 설정 된 <ph id="ph4">`true`</ph>표시 되 고 사용 가능한 컨트롤 자체는 다른 컨트롤에 포함 되며 부모 컨트롤이 표시 되 고 사용 하도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CanSelect">
          <source>The Windows Forms controls in the following list are not selectable and will return a value of <ph id="ph1">`false`</ph> for the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.CanSelect%2A&gt;</ph> property.</source>
          <target state="translated">다음 목록에 Windows Forms 컨트롤은 선택할 수 및의 값을 반환 합니다 <ph id="ph1">`false`</ph> 에 대 한는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.CanSelect%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CanSelect">
          <source>Controls derived from these controls are also not selectable.</source>
          <target state="translated">이러한 컨트롤에서 파생 된 컨트롤은도 선택할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CanSelect">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.LinkLabel&gt;</ph> (when there is no link present in the control)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.LinkLabel&gt;</ph> (이 경우 컨트롤에 링크가)</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CanSelect">
          <source>The following code example selects the specified <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, if it is selectable.</source>
          <target state="translated">다음 코드 예제에서는 지정 된 선택 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>선택 가능한 경우, 합니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Capture">
          <source>Gets or sets a value indicating whether the control has captured the mouse.</source>
          <target state="translated">컨트롤이 마우스를 캡처했는지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Capture">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control has captured the mouse; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 마우스를 캡처했으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Capture">
          <source>When a control has captured the mouse, it receives mouse input whether or not the cursor is within its borders.</source>
          <target state="translated">컨트롤이 마우스를 캡처, 커서가 테두리 내 여부에 관계 없이 마우스 입력을 받습니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Capture">
          <source>The mouse is typically only captured during drag operations.</source>
          <target state="translated">마우스는 일반적으로 끌기 작업 중에 캡처됩니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Capture">
          <source>Only the foreground window can capture the mouse.</source>
          <target state="translated">전경 창이 마우스를 캡처할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Capture">
          <source>When a background window attempts to do so, the window receives messages only for mouse events that occur when the mouse cursor is within the visible portion of the window.</source>
          <target state="translated">배경 창이 이렇게 하려고 하면 창 마우스 커서가 표시 된 창 영역 내에 있을 때 발생 하는 마우스 이벤트에 대 한 메시지를 받습니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Capture">
          <source>Also, even if the foreground window has captured the mouse, the user can still click another window, bringing it to the foreground.</source>
          <target state="translated">또한 전경 창이 마우스를 캡처, 경우에 계속 클릭할 수 다른 창은 전경으로 전환 합니다.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Capture">
          <source>When the mouse is captured, shortcut keys should not work.</source>
          <target state="translated">마우스를 캡처한 바로 가기 키 작업 하면 안 됩니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Capture">
          <source>The following code example demonstrates the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Capture%2A&gt;</ph> property.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Capture%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Capture">
          <source>To run this example paste the following code in a form containing a <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> named label1 and two <ph id="ph2">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> controls named listbox1 and listbox2.</source>
          <target state="translated">이 예제를 포함 하는 폼에서 다음 코드를 붙여넣습니다 실행 하려면 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> 레이블 1과 2 라는 <ph id="ph2">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> listbox1 및 listbox2 컨트롤 이라는 합니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Capture">
          <source>Ensure the form and controls' <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event is associated with the method in this example.</source>
          <target state="translated">폼 및 컨트롤의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 이벤트는이 예에서 메서드에 연결 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Capture">
          <source>for all windows to set this property value.</source>
          <target state="translated">이 속성 값을 설정 하려면 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Capture">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.CausesValidation">
          <source>Gets or sets a value indicating whether the control causes validation to be performed on any controls that require validation when it receives focus.</source>
          <target state="translated">컨트롤이 포커스를 받을 때 유효성 검사가 필요한 모든 컨트롤에 대해 유효성 검사가 수행되도록 하는지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CausesValidation">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control causes validation to be performed on any controls requiring validation when it receives focus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 포커스를 받을 때 유효성 검사가 필요한 모든 컨트롤에 대해 유효성 검사가 수행되도록 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CausesValidation">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CausesValidation">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> events are suppressed.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> 속성이 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> 이벤트는 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CausesValidation">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property value is typically set to <ph id="ph2">`false`</ph> for controls such as a Help button.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> 속성 값은 대개로 설정 <ph id="ph2">`false`</ph> 도움말 단추와 같은 컨트롤에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CausesValidation">
          <source>The following code example uses the derived class <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> and validates an email address that the user enters.</source>
          <target state="translated">다음 코드 예제에서는 파생된 클래스를 사용 하 여 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 고 사용자가 입력 하는 전자 메일 주소 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CausesValidation">
          <source>If the email address is not in the standard format (containing "<ph id="ph1">@" and "</ph>."), the validation fails, an <ph id="ph2">&lt;xref:System.Windows.Forms.ErrorProvider&gt;</ph> icon is displayed, and the event is canceled.</source>
          <target state="translated">표준 형식으로 전자 메일 주소가 없으면 (포함 된 "<ph id="ph1">@" and "</ph>."), 유효성 검사에 실패는 <ph id="ph2">&lt;xref:System.Windows.Forms.ErrorProvider&gt;</ph> 이벤트가 취소 되 고 아이콘이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CausesValidation">
          <source>One of the buttons on the form has its <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">폼에 단추 중 하나에 해당 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> 속성이로 설정 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CausesValidation">
          <source>Clicking or setting focus to this button does not trigger validation.</source>
          <target state="translated">클릭 하거나이 단추에 포커스 설정 유효성 검사를 트리거하지 않습니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CausesValidation">
          <source>This example requires that a <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>, an <ph id="ph2">&lt;xref:System.Windows.Forms.ErrorProvider&gt;</ph> control, and a <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> have been created on a form.</source>
          <target state="translated">이 예제에서는 한 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.ErrorProvider&gt;</ph> 컨트롤 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> 폼에 만든 합니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.CausesValidationChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.CausesValidation" /&gt;</ph> property changes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.CausesValidation" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.CausesValidationChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.CausesValidationChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.ChangeUICues">
          <source>Occurs when the focus or keyboard user interface (UI) cues change.</source>
          <target state="translated">포커스 또는 키보드 UI(사용자 인터페이스) 큐가 변경될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ChangeUICues">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ChangeUICues">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ChangeUICues">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ChangeUICues&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ChangeUICues&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ChangeUICues">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ChangeUICues">
          <source>To report on multiple events or on events that occur frequently, consider replacing <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> with <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or appending the message to a multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 여러 줄에 메시지를 추가 하거나 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ChangeUICues">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ChangeUICues">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ChangeUICues&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ChangeUICues&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls">
          <source>Gets or sets a value indicating whether to catch calls on the wrong thread that access a control's <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Handle" /&gt;</ph> property when an application is being debugged.</source>
          <target state="translated">응용 프로그램이 디버깅되는 동안 컨트롤의 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Handle" /&gt;</ph> 속성에 액세스하는 잘못된 스레드에 대한 호출을 catch할지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if calls on the wrong thread are caught; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">잘못된 스레드에 대한 호출이 catch되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls">
          <source>When a thread other than the creating thread of a control tries to access one of that control's methods or properties, it often leads to unpredictable results.</source>
          <target state="translated">컨트롤의 만드는 스레드가 아닌 다른 스레드에서 제어 하는 메서드 또는 속성 중 하나에 액세스 하려고 하면 종종 예기치 않은 결과가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls">
          <source>A common invalid thread activity is a call on the wrong thread that accesses the control's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> property.</source>
          <target state="translated">일반적인 잘못 된 스레드 활동은 컨트롤의에 액세스 하는 잘못 된 스레드에서 호출 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls">
          <source>Set <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls%2A&gt;</ph> to <ph id="ph2">`true`</ph> to find and diagnose this thread activity more easily while debugging.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls%2A&gt;</ph> 를 <ph id="ph2">`true`</ph> 를 찾아서이 스레드 작업을 보다 쉽게 디버깅 하는 동안 진단 합니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.Click">
          <source>Occurs when the control is clicked.</source>
          <target state="translated">컨트롤을 클릭하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event passes an <ph id="ph2">&lt;xref:System.EventArgs&gt;</ph> to its event handler, so it only indicates that a click has occurred.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 이벤트 전달는 <ph id="ph2">&lt;xref:System.EventArgs&gt;</ph> 해당 이벤트 처리기에 따라서 것만 한 번의 클릭이 발생 했음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>If you need more specific mouse information (button, number of clicks, wheel rotation, or location), use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> event.</source>
          <target state="translated">보다 구체적인 마우스 정보 (단추, 클릭, 휠 회전 또는 위치 수)가 필요한 경우 사용 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>However, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> event will not be raised if the click is caused by action other than that of the mouse, such as pressing the ENTER key.</source>
          <target state="translated">그러나는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> 클릭 하 고 ENTER 키를 누르는 것과 같은 마우스 이외의 작업에 의해 발생 하는 경우 이벤트를 발생 하지 것입니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>A double-click is determined by the mouse settings of the user's operating system.</source>
          <target state="translated">두 번 클릭은 운영 체제의 마우스 설정에 따라 결정 됩니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks.</source>
          <target state="translated">천천히 두 번 클릭하는 것이 아닌 두 번 클릭(double-click)으로 간주될 수 있도록 마우스 단추 클릭 간격을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event is raised every time a control is double-clicked.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 이벤트는 컨트롤을 두 번 클릭할 때마다 발생 합니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>For example, if you have event handlers for the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> events of a <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>, the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> events are raised when the form is double-clicked and both methods are called.</source>
          <target state="translated">예를 들어에 대 한 이벤트 처리기가는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> 의 이벤트는 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 및 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> 발생 하는 폼을 두 번 클릭 하 고 두 방법 모두 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>If a control is double-clicked and that control does not support the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> event, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event might be raised twice.</source>
          <target state="translated">컨트롤을 두 번 클릭 하는 경우 및 컨트롤을 지원 하지 않습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> 이벤트는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 이벤트를 두 번 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>You must set the <ph id="ph1">`StandardClick`</ph> value of <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> to <ph id="ph3">`true`</ph> for this event to be raised.</source>
          <target state="translated">설정 해야 합니다는 <ph id="ph1">`StandardClick`</ph> 값 <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> 를 <ph id="ph3">`true`</ph> 이 이벤트를 발생 합니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>The following events are not raised for the <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> class unless there is at least one <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType&gt;</ph> collection: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> and <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>.</source>
          <target state="translated">에 대 한 다음과 같은 이벤트가 발생 하지 않습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> 하나 이상 있으면 클래스 <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType&gt;</ph> 컬렉션: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> 및 <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>If there is at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the collection, and the user interacts with the tab control's header (where the <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> names appear), the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> raises the appropriate event.</source>
          <target state="translated">둘 이상 있는 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 컬렉션에 사용자 탭 컨트롤의 헤더 상호 작용 하 고 (여기서는 <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 이름이 표시), <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> 적절 한 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>However, if the user interaction is within the client area of the tab page, the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> raises the appropriate event.</source>
          <target state="translated">그러나 사용자 상호 작용 탭 페이지의 클라이언트 영역 내에 있으면는 <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 적절 한 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>The following code example shows the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event in an event handler.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 이벤트 처리기에서 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>Inheriting from a standard Windows Forms control and changing the <ph id="ph1">&lt;see langword="StandardClick" /&gt;</ph> or <ph id="ph2">&lt;see langword="StandardDoubleClick" /&gt;</ph> values of <ph id="ph3">&lt;see cref="T:System.Windows.Forms.ControlStyles" /&gt;</ph> to <ph id="ph4">&lt;see langword="true" /&gt;</ph> can cause unexpected behavior or have no effect at all if the control does not support the <ph id="ph5">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> or <ph id="ph6">&lt;see cref="E:System.Windows.Forms.Control.DoubleClick" /&gt;</ph> events.</source>
          <target state="translated">표준 Windows Forms 컨트롤에서 상속 하 고 변경 된 <ph id="ph1">&lt;see langword="StandardClick" /&gt;</ph> 또는 <ph id="ph2">&lt;see langword="StandardDoubleClick" /&gt;</ph> 값의 <ph id="ph3">&lt;see cref="T:System.Windows.Forms.ControlStyles" /&gt;</ph> 를 <ph id="ph4">&lt;see langword="true" /&gt;</ph> 효과가 없습니다. 모든 컨트롤을 지원 하지 않는 경우 하거나 예기치 않은 동작이 발생할 수 있습니다는 <ph id="ph5">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> 또는 <ph id="ph6">&lt;see cref="E:System.Windows.Forms.Control.DoubleClick" /&gt;</ph>이벤트입니다.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>The following table lists Windows Forms controls and which event (<ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> or <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Control.DoubleClick" /&gt;</ph>) is raised in response to the mouse action specified.</source>
          <target state="translated">다음 표에서 Windows Forms 컨트롤 및 이벤트 (event) (<ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Control.DoubleClick" /&gt;</ph>)는 지정 된 마우스 작업에 대 한 응답에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Control</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 컨트롤</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Left Mouse Click</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 마우스 왼쪽된 단추 클릭</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Left Mouse Double Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 왼쪽된 마우스 두 번 클릭</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Right Mouse Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 마우스 오른쪽 단추 클릭</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Right Mouse Double Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 마우스 오른쪽 단추 두 번 클릭</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Middle Mouse Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 마우스 가운데 단추 클릭</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Middle Mouse Double Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 마우스 가운데 단추를 두 번 클릭</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> XButton1 Mouse Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> XButton1 마우스 클릭</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> XButton1 Mouse Double-Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> XButton1 마우스 두 번 클릭</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> XButton2 Mouse Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> XButton2 마우스 클릭</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> XButton2 Mouse Double-Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> XButton2 마우스 두 번 클릭</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.MonthCalendar" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.MonthCalendar" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.DateTimePicker" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.DateTimePicker" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.HScrollBar" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.HScrollBar" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.VScrollBar" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.VScrollBar" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.Button" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.Button" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.CheckBox" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.CheckBox" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.RichTextBox" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.RichTextBox" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.RadioButton" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.RadioButton" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.ListBox" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.ListBox" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.CheckedListBox" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.CheckedListBox" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.ComboBox" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.ComboBox" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.TextBox" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.TextBox" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.DomainUpDown" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.DomainUpDown" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.NumericUpDown" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.NumericUpDown" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5"> * </ph><ph id="ph6">&lt;see cref="T:System.Windows.Forms.TreeView" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5"> * </ph><ph id="ph6">&lt;see cref="T:System.Windows.Forms.TreeView" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">\*</ph> <ph id="ph2">&lt;see cref="T:System.Windows.Forms.ListView" /&gt;</ph><ph id="ph3">&lt;/term&gt;</ph><ph id="ph4">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">\*</ph> <ph id="ph2">&lt;see cref="T:System.Windows.Forms.ListView" /&gt;</ph><ph id="ph3">&lt;/term&gt;</ph><ph id="ph4">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.ProgressBar" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.ProgressBar" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.TrackBar" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.TrackBar" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.Form" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.Form" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.DataGrid" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.DataGrid" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Label" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Label" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.LinkLabel" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.LinkLabel" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Panel" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Panel" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.GroupBox" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.GroupBox" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.PictureBox" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.PictureBox" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Splitter" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Splitter" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.StatusBar" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.StatusBar" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.ToolBar" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.ToolBar" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.TabPage" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.TabPage" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">** </ph><ph id="ph2">&lt;see cref="T:System.Windows.Forms.TabControl" /&gt;</ph><ph id="ph3">&lt;/term&gt;</ph><ph id="ph4">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">** </ph><ph id="ph2">&lt;see cref="T:System.Windows.Forms.TabControl" /&gt;</ph><ph id="ph3">&lt;/term&gt;</ph><ph id="ph4">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source><ph id="ph1">\*</ph> The mouse pointer must be over a child object (<ph id="ph2">&lt;see cref="T:System.Windows.Forms.TreeNode" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Windows.Forms.ListViewItem" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">\*</ph> 마우스 포인터가 자식 개체에 대해 이어야 합니다 (<ph id="ph2">&lt;see cref="T:System.Windows.Forms.TreeNode" /&gt;</ph> 또는 <ph id="ph3">&lt;see cref="T:System.Windows.Forms.ListViewItem" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Click">
          <source>** The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.TabControl" /&gt;</ph> must have at least one <ph id="ph2">&lt;see cref="T:System.Windows.Forms.TabPage" /&gt;</ph> in its <ph id="ph3">&lt;see cref="P:System.Windows.Forms.TabControl.TabPages" /&gt;</ph> collection.</source>
          <target state="translated">* *는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.TabControl" /&gt;</ph> 하나 이상 있어야 <ph id="ph2">&lt;see cref="T:System.Windows.Forms.TabPage" /&gt;</ph> 에 해당 <ph id="ph3">&lt;see cref="P:System.Windows.Forms.TabControl.TabPages" /&gt;</ph> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.ClientRectangle">
          <source>Gets the rectangle that represents the client area of the control.</source>
          <target state="translated">컨트롤의 클라이언트 영역을 나타내는 사각형을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientRectangle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph> that represents the client area of the control.</source>
          <target state="translated">컨트롤의 클라이언트 영역을 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientRectangle">
          <source>The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus.</source>
          <target state="translated">컨트롤의 클라이언트 영역은 스크롤 막대, 테두리, 제목 표시줄, 메뉴 등 비클라이언트 요소에서 뺀 컨트롤의 범위입니다.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientRectangle">
          <source>Because client coordinates are relative to the upper-left corner of the client area of the control, the coordinates of the upper-left corner of the rectangle returned by this property are (0,0).</source>
          <target state="translated">클라이언트 좌표는 컨트롤 클라이언트 영역의 왼쪽 위 모퉁이 기준으로 이므로,이 속성에서 반환 되는 사각형의 왼쪽 위 모퉁이의 좌표는 (0, 0).</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientRectangle">
          <source>You can use this property to obtain the size and coordinates of the client area of the control for tasks such as drawing on the surface of the control.</source>
          <target state="translated">크기와 컨트롤의 화면에 그리기 등의 작업에 대 한 컨트롤 클라이언트 영역의 좌표를 가져오려면이 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientRectangle">
          <source>For more information about drawing on controls, see <bpt id="p1">[</bpt>Rendering a Windows Forms Control<ept id="p1">](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)</ept>.</source>
          <target state="translated">컨트롤에서 그리기에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>Windows Forms 컨트롤 렌더링<ept id="p1">](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientRectangle">
          <source>The following code example enables auto-scrolling for a form, resizes the form, and ensures that a button remains visible after the form is resized.</source>
          <target state="translated">다음 코드 예제에서는 폼에 대 한 자동 스크롤을 사용할 수, 폼의 크기를 조정 및 단추 계속 표시 되는 폼 크기가 조정 후 확인 합니다.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientRectangle">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> named <ph id="ph3">`button2`</ph> on it.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 라는 <ph id="ph3">`button2`</ph> 에 있습니다.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.ClientSize">
          <source>Gets or sets the height and width of the client area of the control.</source>
          <target state="translated">컨트롤 클라이언트 영역의 높이와 너비를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientSize">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> that represents the dimensions of the client area of the control.</source>
          <target state="translated">컨트롤 클라이언트 영역의 크기를 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientSize">
          <source>The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus.</source>
          <target state="translated">컨트롤의 클라이언트 영역은 스크롤 막대, 테두리, 제목 표시줄, 메뉴 등 비클라이언트 요소에서 뺀 컨트롤의 범위입니다.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientSize">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetClientSizeCore%2A&gt;</ph> method is called to set the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ClientSize%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetClientSizeCore%2A&gt;</ph> 메서드는 설정 하 여 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ClientSize%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientSize">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ClientSize%2A&gt;</ph> property is not always changed through its <ph id="ph2">`set`</ph> method so you should override the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SetClientSizeCore%2A&gt;</ph> method to ensure that your code is executed when the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.ClientSize%2A&gt;</ph> property is set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.ClientSize%2A&gt;</ph> 속성이 통해 변경 되지 않습니다 해당 <ph id="ph2">`set`</ph> 메서드를 재정의 해야 하는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SetClientSizeCore%2A&gt;</ph> 메서드 코드가 실행 되도록 때는 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.ClientSize%2A&gt;</ph> 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientSize">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Size.Width%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Drawing.Size.Height%2A?displayProperty=nameWithType&gt;</ph> properties represent the width and height of the client area of the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Drawing.Size.Width%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Drawing.Size.Height%2A?displayProperty=nameWithType&gt;</ph> 속성 컨트롤의 클라이언트 영역 높이 너비를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientSize">
          <source>You can use this property to obtain the size of the client area of the control for tasks such as drawing on the surface of the control.</source>
          <target state="translated">컨트롤의 화면에 그리기 등의 작업에 대 한 컨트롤의 클라이언트 영역 크기를 구합니다이 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientSize">
          <source>For more information about drawing on controls, see <bpt id="p1">[</bpt>Rendering a Windows Forms Control<ept id="p1">](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)</ept>.</source>
          <target state="translated">컨트롤에서 그리기에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>Windows Forms 컨트롤 렌더링<ept id="p1">](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientSize">
          <source>You cannot bind application settings to this property.</source>
          <target state="translated">응용 프로그램 설정을이 속성에 바인딩할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientSize">
          <source>For more information on application settings, see <bpt id="p1">[</bpt>Application Settings Overview<ept id="p1">](~/docs/framework/winforms/advanced/application-settings-overview.md)</ept>.</source>
          <target state="translated">응용 프로그램 설정에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>응용 프로그램 설정 개요<ept id="p1">](~/docs/framework/winforms/advanced/application-settings-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientSize">
          <source>The following code example resizes the specified control so the control will accommodate its formatted text.</source>
          <target state="translated">다음 코드 예제에서는 컨트롤의 서식 있는 텍스트에 연결할 수 있도록 지정된 된 컨트롤을 조정 합니다.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientSize">
          <source>The formatted text is the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property with the control's assigned <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph> applied to the text.</source>
          <target state="translated">서식 있는 텍스트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 컨트롤을 사용 하 여 속성의 할당 된 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph> 텍스트에 적용 합니다.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientSize">
          <source>The <ph id="ph1">`AutoSizeControl`</ph> method in this example also has a <ph id="ph2">`textPadding`</ph> parameter that represents the padding to apply to all edges of the control.</source>
          <target state="translated"><ph id="ph1">`AutoSizeControl`</ph> 이 예제의 메서드 역시는 <ph id="ph2">`textPadding`</ph> 컨트롤의 모든 가장자리에 적용할 안쪽을 나타내는 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ClientSize">
          <source>To make the padding appear equal, align the text with the <ph id="ph1">&lt;xref:System.Drawing.ContentAlignment.MiddleCenter?displayProperty=nameWithType&gt;</ph> value, if your control supports it.</source>
          <target state="translated">안쪽을 하려면 텍스트를 정렬 합니다는 <ph id="ph1">&lt;xref:System.Drawing.ContentAlignment.MiddleCenter?displayProperty=nameWithType&gt;</ph> 값, 컨트롤이를 지원 합니다.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.ClientSizeChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ClientSize" /&gt;</ph> property changes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ClientSize" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ClientSizeChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ClientSizeChanged">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ClientSizeChanged">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ClientSizeChanged&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ClientSizeChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ClientSizeChanged">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ClientSizeChanged">
          <source>To report on multiple events or on events that occur frequently, consider replacing <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> with <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or appending the message to a multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 여러 줄에 메시지를 추가 하거나 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ClientSizeChanged">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ClientSizeChanged">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ClientSizeChanged&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ClientSizeChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.CompanyName">
          <source>Gets the name of the company or creator of the application containing the control.</source>
          <target state="translated">컨트롤을 포함하고 있는 응용 프로그램의 회사 이름이나 작성자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CompanyName">
          <source>The company name or creator of the application containing the control.</source>
          <target state="translated">컨트롤을 포함하고 있는 응용 프로그램의 회사 이름이나 작성자입니다.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CompanyName">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CompanyName%2A&gt;</ph> property is a read-only property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.CompanyName%2A&gt;</ph> 속성은 읽기 전용 속성입니다.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CompanyName">
          <source>To change the value of this property, set the <ph id="ph1">&lt;xref:System.Reflection.AssemblyCompanyAttribute.Company%2A&gt;</ph> property value of the <ph id="ph2">&lt;xref:System.Reflection.AssemblyCompanyAttribute&gt;</ph>.</source>
          <target state="translated">이 속성의 값을 변경 하려면는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyCompanyAttribute.Company%2A&gt;</ph> 의 속성 값은 <ph id="ph2">&lt;xref:System.Reflection.AssemblyCompanyAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CompanyName">
          <source>The following line of C# code sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CompanyName%2A&gt;</ph> property.</source>
          <target state="translated">C# 코드 집합의 다음 줄은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CompanyName%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CompanyName">
          <source>It is strongly recommended that you provide the company name, product name, and product version for your app.</source>
          <target state="translated">앱에 대 한 회사 이름, 제품 이름 및 제품 버전을 제공할 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CompanyName">
          <source>The following code example displays information about the application in a <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> contained by a <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서 응용 프로그램에 대 한 정보를 표시 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> 에 포함 된 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CompanyName">
          <source>This example requires that the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CompanyName%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProductName%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ProductVersion%2A&gt;</ph> have been set.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CompanyName%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProductName%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ProductVersion%2A&gt;</ph> 설정 되었습니다.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Contains(System.Windows.Forms.Control)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> to evaluate.</source>
          <target state="translated">실행할 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Contains(System.Windows.Forms.Control)">
          <source>Retrieves a value indicating whether the specified control is a child of the control.</source>
          <target state="translated">지정된 컨트롤이 특정 컨트롤의 자식인지를 나타내는 값을 검색합니다.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Contains(System.Windows.Forms.Control)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified control is a child of the control; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 컨트롤이 특정 컨트롤의 자식이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Contains(System.Windows.Forms.Control)">
          <source>The following code example ensures that a <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> is visible by calling its <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BringToFront%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드 예제를 사용 하면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> 호출 하 여 표시 되는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BringToFront%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Contains(System.Windows.Forms.Control)">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with a <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> named <ph id="ph3">`panel1`</ph>, and a <ph id="ph4">&lt;xref:System.Windows.Forms.Label&gt;</ph> named <ph id="ph5">`label1`</ph>.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> 라는 <ph id="ph3">`panel1`</ph>, 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Label&gt;</ph> 라는 <ph id="ph5">`label1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.ContainsFocus">
          <source>Gets a value indicating whether the control, or one of its child controls, currently has the input focus.</source>
          <target state="translated">컨트롤이나 해당 컨트롤의 자식 컨트롤이 현재 입력 포커스를 가지고 있는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContainsFocus">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control or one of its child controls currently has the input focus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이나 해당 컨트롤의 자식 컨트롤이 현재 입력 포커스를 가지고 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContainsFocus">
          <source>You can use this property to determine whether a control or any of the controls contained within it has the input focus.</source>
          <target state="translated">컨트롤이 나 그 안에 포함 된 컨트롤에 입력된 포커스가 있는지 여부를 확인 하려면이 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContainsFocus">
          <source>To determine whether the control has focus, regardless of whether any of its child controls have focus, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focused%2A&gt;</ph> property.</source>
          <target state="translated">컨트롤에 포커스를 컨트롤은 자식 컨트롤의 모든 권한이 있는지 여부에 상관 없이 포커스 있는지 여부를 확인 하려면 사용 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focused%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContainsFocus">
          <source>To give a control the input focus, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> methods.</source>
          <target state="translated">컨트롤이 입력된 포커스를 사용는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.ContextMenu">
          <source>Gets or sets the shortcut menu associated with the control.</source>
          <target state="translated">컨트롤과 연결된 바로 가기 메뉴를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContextMenu">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ContextMenu" /&gt;</ph> that represents the shortcut menu associated with the control.</source>
          <target state="translated">해당 컨트롤과 연결된 바로 가기 메뉴를 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ContextMenu" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContextMenu">
          <source>Use a shortcut menus to give context-specific menu options to users when they right-click on the control.</source>
          <target state="translated">바로 가기 메뉴를 사용 하 여 컨트롤에서 마우스 오른쪽 단추로 될 때 사용자에 게 상황에 맞는 메뉴 옵션을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContextMenu">
          <source>The following code example displays the <ph id="ph1">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph> assigned to a <ph id="ph2">&lt;xref:System.Windows.Forms.TreeView&gt;</ph> when the right mouse button is clicked and released.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph> 에 할당 한 <ph id="ph2">&lt;xref:System.Windows.Forms.TreeView&gt;</ph> 마우스 오른쪽 단추를 클릭 한 후 해제 합니다.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContextMenu">
          <source>This code requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with a <ph id="ph2">&lt;xref:System.Windows.Forms.TreeView&gt;</ph> on it.</source>
          <target state="translated">이 코드를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Windows.Forms.TreeView&gt;</ph> 에 있습니다.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContextMenu">
          <source>It is also required that the <ph id="ph1">&lt;xref:System.Windows.Forms.TreeView&gt;</ph> has a <ph id="ph2">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph> assigned to its <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ContextMenu%2A&gt;</ph> property.</source>
          <target state="translated">또한 전체 동기화를 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.TreeView&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph> 에 할당 된 해당 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ContextMenu%2A&gt;</ph> 속성 합니다.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContextMenu">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ContextMenu" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.ContextMenu" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ContextMenu" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.ContextMenu" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContextMenu">
          <source>Otherwise, you must provide all the implementation.</source>
          <target state="translated">그렇지 않으면 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContextMenu">
          <source>You are not required to override both the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.ContextMenu" /&gt;</ph> property; you can override only one if needed.</source>
          <target state="translated">모두 재정의할 필요 하지는 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 의 접근자는 <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.ContextMenu" /&gt;</ph> 속성 필요한 경우 하나만 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.ContextMenuChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ContextMenu" /&gt;</ph> property changes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ContextMenu" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ContextMenuChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ContextMenu%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ContextMenu%2A&gt;</ph> 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ContextMenuChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ContextMenuChanged">
          <source>The following code example displays a message when a change occurs to the shortcut menu.</source>
          <target state="translated">다음 코드 예제에서는 바로 가기 메뉴에 변경이 발생할 때 메시지를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.ContextMenuStrip">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ContextMenuStrip" /&gt;</ph> associated with this control.</source>
          <target state="translated">이 컨트롤과 연결된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ContextMenuStrip" /&gt;</ph>을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContextMenuStrip">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ContextMenuStrip" /&gt;</ph> for this control, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if there is no <ph id="ph3">&lt;see cref="T:System.Windows.Forms.ContextMenuStrip" /&gt;</ph>.</source>
          <target state="translated">이 컨트롤의 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ContextMenuStrip" /&gt;</ph>이거나, <ph id="ph2">&lt;see langword="null" /&gt;</ph>이 없는 경우 <ph id="ph3">&lt;see cref="T:System.Windows.Forms.ContextMenuStrip" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContextMenuStrip">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContextMenuStrip">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph> has also been assigned to the control, the <ph id="ph2">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph> takes precedence over the <ph id="ph3">&lt;xref:System.Windows.Forms.ContextMenuStrip&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph> 가 컨트롤에 할당 된는 <ph id="ph2">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph> 우선는 <ph id="ph3">&lt;xref:System.Windows.Forms.ContextMenuStrip&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContextMenuStrip">
          <source>The following code example demonstrates how to add three <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripMenuItem&gt;</ph> objects to a <ph id="ph2">&lt;xref:System.Windows.Forms.ContextMenuStrip&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 3 개를 추가 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripMenuItem&gt;</ph> 개체는 <ph id="ph2">&lt;xref:System.Windows.Forms.ContextMenuStrip&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ContextMenuStrip">
          <source>In addition it demonstrates setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ContextMenuStrip%2A&gt;</ph> property of the form.</source>
          <target state="translated">또한 설정을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ContextMenuStrip%2A&gt;</ph> 폼의 속성입니다.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.ContextMenuStripChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ContextMenuStrip" /&gt;</ph> property changes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ContextMenuStrip" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ContextMenuStripChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ContextMenuStripChanged">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ContextMenuStripChanged">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ContextMenuStripChanged&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ContextMenuStripChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ContextMenuStripChanged">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ContextMenuStripChanged">
          <source>To report on multiple events or on events that occur frequently, consider replacing <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> with <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or appending the message to a multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 여러 줄에 메시지를 추가 하거나 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ContextMenuStripChanged">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ContextMenuStripChanged">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ContextMenuStripChanged&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ContextMenuStripChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.ControlAdded">
          <source>Occurs when a new control is added to the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control.ControlCollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control.ControlCollection" /&gt;</ph>에 새로운 컨트롤이 추가되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ControlAdded">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ControlAdded">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlAdded&gt;</ph> to add a control to a form and displays the name of the added control in a <ph id="ph2">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlAdded&gt;</ph> 폼에 컨트롤을 추가 하려면에 추가 된 컨트롤의 이름을 표시 한 <ph id="ph2">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.ControlRemoved">
          <source>Occurs when a control is removed from the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control.ControlCollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control.ControlCollection" /&gt;</ph>에서 컨트롤이 제거되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ControlRemoved">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ControlRemoved">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlRemoved&gt;</ph> to remove a control from a form and displays the name of the removed control in a <ph id="ph2">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlRemoved&gt;</ph> 양식에서 컨트롤을 제거 하려면에 제거 된 컨트롤의 이름을 표시 한 <ph id="ph2">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Controls">
          <source>Gets the collection of controls contained within the control.</source>
          <target state="translated">컨트롤에 포함된 컨트롤의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Controls">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control.ControlCollection" /&gt;</ph> representing the collection of controls contained within the control.</source>
          <target state="translated">컨트롤에 포함된 컨트롤의 컬렉션을 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control.ControlCollection" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Controls">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> can act as a parent to a collection of controls.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 컨트롤의 컬렉션에 대 한 부모 작동할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Controls">
          <source>For example, when several controls are added to a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>, each of the controls is a member of the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> assigned to the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> property of the form, which is derived from the <ph id="ph4">&lt;xref:System.Windows.Forms.Control&gt;</ph> class.</source>
          <target state="translated">여러 컨트롤에 추가 될 때에 예를 들어는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>, 각 컨트롤의 멤버인는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> 에 할당 된는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> 에서 파생 된 폼의 속성은 <ph id="ph4">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Controls">
          <source>You can manipulate the controls in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> assigned to the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> property by using the methods available in the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> class.</source>
          <target state="translated">컨트롤을 조작할 수는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> 에 할당 된는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> 에서 사용할 수 있는 메서드를 사용 하 여 속성의 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Controls">
          <source>When adding several controls to a parent control, it is recommended that you call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> method before initializing the controls to be added.</source>
          <target state="translated">여러 컨트롤에 부모 컨트롤을 추가할 때 것이 좋습니다를 호출 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 추가할 컨트롤을 초기화 하기 전에 메서드.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Controls">
          <source>After adding the controls to the parent control, call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method.</source>
          <target state="translated">부모 컨트롤에 컨트롤을 추가한 후 호출 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Controls">
          <source>Doing so will increase the performance of applications with many controls.</source>
          <target state="translated">이렇게 하면 많은 컨트롤이 응용 프로그램의 성능이 향상 됩니다.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Controls">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> property to iterate through all controls of a form, including nested controls.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> 중첩 된 컨트롤을 포함 하 여 양식의 모든 컨트롤을 반복 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Controls">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GetNextControl%2A&gt;</ph> method to retrieve the previous or next child control in the tab order.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GetNextControl%2A&gt;</ph> 탭 순서의 이전 또는 다음 자식 컨트롤을 검색 하는 메서드입니다.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Controls">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A&gt;</ph> property to get or set the active control of a container control.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A&gt;</ph> 속성을 가져오거나 컨테이너 컨트롤의 활성 컨트롤을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Controls">
          <source>The following code example removes a <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> from the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> of the derived class <ph id="ph3">&lt;xref:System.Windows.Forms.Panel&gt;</ph> if it is a member of the collection.</source>
          <target state="translated">다음 코드 예제에서는 제거 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 에서 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> 파생된 클래스의 <ph id="ph3">&lt;xref:System.Windows.Forms.Panel&gt;</ph> 컬렉션의 멤버인 경우.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Controls">
          <source>The example requires that you have created a <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph>, a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph>, and at least one <ph id="ph3">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> control on a <ph id="ph4">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
          <target state="translated">이 예제에서는 만든는 <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph>와 하나 이상의 <ph id="ph3">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> 컨트롤에 <ph id="ph4">&lt;xref:System.Windows.Forms.Form&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Controls">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> control(s) are added to the <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> control, and the <ph id="ph3">&lt;xref:System.Windows.Forms.Panel&gt;</ph> control added to the <ph id="ph4">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> 컨트롤에 추가 되는 <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> 컨트롤 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Panel&gt;</ph> 에 추가 된 컨트롤은 <ph id="ph4">&lt;xref:System.Windows.Forms.Form&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Controls">
          <source>When the button is clicked, the radio button named <ph id="ph1">`removeButton`</ph> is removed from the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph>.</source>
          <target state="translated">단추를 클릭할 때 라디오 단추 라는 <ph id="ph1">`removeButton`</ph> 에서 제거 되는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.CreateAccessibilityInstance">
          <source>Creates a new accessibility object for the control.</source>
          <target state="translated">컨트롤의 액세스 가능성 개체를 새로 만듭니다.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.CreateAccessibilityInstance">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleObject" /&gt;</ph> for the control.</source>
          <target state="translated">컨트롤의 새로운 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleObject" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateAccessibilityInstance">
          <source>If you do not explicitly call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A&gt;</ph> method, it will be called when the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.AccessibilityObject%2A&gt;</ph> property is referenced.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A&gt;</ph> 메서드를 명시적으로 호출하지 않으면 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.AccessibilityObject%2A&gt;</ph> 속성을 참조할 때 이 메서드가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateAccessibilityInstance">
          <source>To get or set the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibilityObject%2A&gt;</ph> property, you must add a reference to the <ph id="ph2">`Accessibility`</ph> assembly installed with the <ph id="ph3">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</source>
          <target state="translated">가져오거나 설정할는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AccessibilityObject%2A&gt;</ph> 속성에 대 한 참조를 추가 해야는 <ph id="ph2">`Accessibility`</ph> 어셈블리와 함께 설치는 <ph id="ph3">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateAccessibilityInstance">
          <source>The following code example demonstrates the creation of an accessibility-aware chart control, using the <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject&gt;</ph> classes to expose accessible information.</source>
          <target state="translated">다음 코드 예제에는 내게 필요한 옵션 인식 차트를 만드는 방법을 보여 줍니다. 컨트롤을 사용 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject&gt;</ph> 클래스 액세스할 수 있는 정보를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateAccessibilityInstance">
          <source>The control plots two curves along with a legend.</source>
          <target state="translated">컨트롤은 범례를 따라 두 곡선을 그립니다.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateAccessibilityInstance">
          <source>The <ph id="ph1">`ChartControlAccessibleObject`</ph> class, which derives from <ph id="ph2">`ControlAccessibleObject`</ph>, is used in the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A&gt;</ph> method to provide custom accessible information for the chart control.</source>
          <target state="translated"><ph id="ph1">`ChartControlAccessibleObject`</ph> 클래스에서 파생 되 <ph id="ph2">`ControlAccessibleObject`</ph>에 사용 되는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A&gt;</ph> 메서드는 차트 컨트롤에 대 한 사용자 지정 액세스할 수 있는 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateAccessibilityInstance">
          <source>Since the chart legend is not an actual <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> -based control, but instead is drawn by the chart control, it does not any built-in accessible information.</source>
          <target state="translated">차트 범례는 실제 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> -컨트롤을 따르지만 그려지며 차트 컨트롤에서 액세스할 수 있는 기본 제공 정보를 포함 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateAccessibilityInstance">
          <source>Because of this, the <ph id="ph1">`ChartControlAccessibleObject`</ph> class overrides the <ph id="ph2">&lt;xref:System.Windows.Forms.AccessibleObject.GetChild%2A&gt;</ph> method to return the <ph id="ph3">`CurveLegendAccessibleObject`</ph> that represents accessible information for each part of the legend.</source>
          <target state="translated">이 인해는 <ph id="ph1">`ChartControlAccessibleObject`</ph> 재정의 <ph id="ph2">&lt;xref:System.Windows.Forms.AccessibleObject.GetChild%2A&gt;</ph> 반환 하는 메서드는 <ph id="ph3">`CurveLegendAccessibleObject`</ph> 범례의 각 부분에 액세스할 수 있는 정보를 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateAccessibilityInstance">
          <source>When an accessible-aware application uses this control, the control can provide the necessary accessible information.</source>
          <target state="translated">액세스할 수 있는 인식 응용 프로그램이이 제어를 사용 하는 경우 컨트롤은 필요한 액세스 가능 정보를 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateAccessibilityInstance">
          <source>This code excerpt demonstrates overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A&gt;</ph> method.</source>
          <target state="translated">이 코드 발췌 구문에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateAccessibilityInstance">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> class overview for the complete code example.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> 전체 코드 예제에 대 한 클래스 개요입니다.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateAccessibilityInstance">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /&gt;</ph> in a derived class, do not call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /&gt;</ph> method.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /&gt;</ph> 파생된 클래스에서 기본 클래스의을 호출 하지 마십시오 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.CreateControl">
          <source>Forces the creation of the visible control, including the creation of the handle and any visible child controls.</source>
          <target state="translated">핸들과 모든 표시되는 자식 컨트롤을 포함하여 표시 가능한 컨트롤을 강제로 만듭니다.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateControl">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateControl%2A&gt;</ph> method forces a handle to be created for the control and its child controls.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateControl%2A&gt;</ph> 메서드를 사용 하면 컨트롤과 해당 자식 컨트롤에 대해 만들 수에 대 한 핸들입니다.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateControl">
          <source>This method is used when you need a handle immediately for manipulation of the control or its children; simply calling a control's constructor does not create the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph>.</source>
          <target state="translated">컨트롤이 나 해당 자식; 조작에 대 한 핸들을 즉시 필요할 때이 메서드는 사용 단순히 호출 컨트롤의 생성자를 만들지 않습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateControl">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateControl%2A&gt;</ph> does not create a control handle if the control's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property is <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateControl%2A&gt;</ph> 경우 컨트롤 핸들을 만들지 않습니다 컨트롤의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> 속성은 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateControl">
          <source>You can either call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateHandle%2A&gt;</ph> method or access the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> property to create the control's handle regardless of the control's visibility, but in this case, no window handles are created for the control's children.</source>
          <target state="translated">호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateHandle%2A&gt;</ph> 메서드 또는 액세스는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> 만들 컨트롤의 속성 처리는 컨트롤의 표시 여부에 관계 없이 하지만 경우 컨트롤의 자식에 대 한 핸들이 만들어집니다 창이 없습니다.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.CreateControlsInstance">
          <source>Creates a new instance of the control collection for the control.</source>
          <target state="translated">컨트롤에 대한 컨트롤 컬렉션의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.CreateControlsInstance">
          <source>A new instance of <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control.ControlCollection" /&gt;</ph> assigned to the control.</source>
          <target state="translated">컨트롤에 할당된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control.ControlCollection" /&gt;</ph>의 새 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateControlsInstance">
          <source>The base class version of this method should not be called by a derived class.</source>
          <target state="translated">이 메서드의 기본 클래스 버전을 파생된 클래스에서 호출 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Created">
          <source>Gets a value indicating whether the control has been created.</source>
          <target state="translated">컨트롤이 만들어졌는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Created">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control has been created; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 만들어졌으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Created">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Created%2A&gt;</ph> property returns <ph id="ph2">`true`</ph> if the <ph id="ph3">&lt;xref:System.Windows.Forms.Control&gt;</ph> was successfully created even though the control's handle might not have been created or recreated yet.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Created%2A&gt;</ph> 속성에서 반환 <ph id="ph2">`true`</ph> 경우는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control&gt;</ph> 컨트롤의 핸들 수 되지 만들어졌거나 아직 다시 생성 하는 경우에 성공적으로 만들었습니다.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.CreateGraphics">
          <source>Creates the <ph id="ph1">&lt;see cref="T:System.Drawing.Graphics" /&gt;</ph> for the control.</source>
          <target state="translated">해당 컨트롤에 대한 <ph id="ph1">&lt;see cref="T:System.Drawing.Graphics" /&gt;</ph>를 만듭니다.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.CreateGraphics">
          <source>The <ph id="ph1">&lt;see cref="T:System.Drawing.Graphics" /&gt;</ph> for the control.</source>
          <target state="translated">컨트롤에 대한 <ph id="ph1">&lt;see cref="T:System.Drawing.Graphics" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateGraphics">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object that you retrieve through the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> method should not normally be retained after the current Windows message has been processed, because anything painted with that object will be erased with the next WM_PAINT message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> 통해 검색 하는 개체는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 메서드 하지 일반적으로 보존 되는 현재 Windows 메시지가 처리 된 후 해당 개체와 함께 색칠 다음 WM_PAINT 메시지와 함께 지워집니다 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateGraphics">
          <source>Therefore you cannot cache the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object for reuse, except to use non-visual methods like <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">캐시할 수 없으며 따라서는 <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> 사용 같은 표시 되지 않는 메서드를 제외 하 고 다시 사용 하기 위해 개체 <ph id="ph2">&lt;xref:System.Drawing.Graphics.MeasureString%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateGraphics">
          <source>Instead, you must call <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> every time that you want to use the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> object, and then call <ph id="ph3">&lt;xref:System.Drawing.Graphics.Dispose%2A&gt;</ph> when you are finished using it.</source>
          <target state="translated">대신 호출 해야 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 사용할 때마다는 <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> 개체를 호출 <ph id="ph3">&lt;xref:System.Drawing.Graphics.Dispose%2A&gt;</ph> 사용 했으면 합니다.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateGraphics">
          <source>For more information about Windows messages, see <ph id="ph1">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph>.</source>
          <target state="translated">Windows 메시지에 대 한 자세한 내용은 참조 하십시오. <ph id="ph1">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateGraphics">
          <source>By design, <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> sets ownership to the calling thread, and fails if it is called on other threads.</source>
          <target state="translated">기본적으로 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 호출 스레드에 소유권을 설정 하 고 다른 스레드에서 호출 되 면 실패 합니다.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateGraphics">
          <source>In addition to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property, there are four methods on a control that are thread safe: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> if the handle for the control has already been created.</source>
          <target state="translated">외에 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> 속성에는 스레드로부터 안전 컨트롤에서 네 가지 메서드가 있습니다: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 컨트롤에 대 한 핸들에서 이미 만든 경우.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateGraphics">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> before the control's handle has been created on a background thread can cause illegal cross thread calls.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 컨트롤의 핸들이 백그라운드 스레드에서 생성 되기 전에 잘못 된 크로스 스레드 호출 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateGraphics">
          <source>For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</source>
          <target state="translated">다른 모든 메서드 호출에 대 한 사용할지 invoke 메서드 중 하나를 컨트롤의 스레드에 대 한 호출을 마샬링하 합니다.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateGraphics">
          <source>The following code example resizes the specified control so the control will accommodate its formatted text.</source>
          <target state="translated">다음 코드 예제에서는 컨트롤의 서식 있는 텍스트에 연결할 수 있도록 지정된 된 컨트롤을 조정 합니다.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateGraphics">
          <source>The formatted text is the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property with the control's assigned <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph> applied to the text.</source>
          <target state="translated">서식 있는 텍스트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 컨트롤을 사용 하 여 속성의 할당 된 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph> 텍스트에 적용 합니다.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateGraphics">
          <source>The <ph id="ph1">`AutoSizeControl`</ph> method in this example also has a <ph id="ph2">`textPadding`</ph> parameter that represents the padding to apply to all edges of the control.</source>
          <target state="translated"><ph id="ph1">`AutoSizeControl`</ph> 이 예제의 메서드 역시는 <ph id="ph2">`textPadding`</ph> 컨트롤의 모든 가장자리에 적용할 안쪽을 나타내는 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateGraphics">
          <source>To make the padding appear equal, align the text with the <ph id="ph1">`MiddleCenter`</ph> value of <ph id="ph2">&lt;xref:System.Drawing.ContentAlignment?displayProperty=nameWithType&gt;</ph> if your control supports it.</source>
          <target state="translated">안쪽을 하려면 텍스트를 정렬 합니다는 <ph id="ph1">`MiddleCenter`</ph> 값 <ph id="ph2">&lt;xref:System.Drawing.ContentAlignment?displayProperty=nameWithType&gt;</ph> 컨트롤이를 지원 합니다.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateGraphics">
          <source>for safe subwindows to call this method.</source>
          <target state="translated">이 메서드를 호출할 하위 창에서 안전 하 게 보호 합니다.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateGraphics">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="SafeSubWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="SafeSubWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.CreateHandle">
          <source>Creates a handle for the control.</source>
          <target state="translated">컨트롤의 핸들을 만듭니다.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateHandle">
          <source>You typically should not call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateHandle%2A&gt;</ph> method directly.</source>
          <target state="translated">일반적으로 호출 하지 않아야는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateHandle%2A&gt;</ph> 메서드를 직접 합니다.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateHandle">
          <source>The preferred method is to call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateControl%2A&gt;</ph> method, which forces a handle to be created for the control and its child controls when the control is created.</source>
          <target state="translated">호출 하는 메서드가 좋습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateControl%2A&gt;</ph> 강제로 컨트롤을 만들 때 컨트롤 및 해당 자식 컨트롤에 대해 만들 수에 대 한 핸들입니다.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.CreateHandle">
          <source>The object is in a disposed state.</source>
          <target state="translated">개체가 삭제된 상태인 경우</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateHandle">
          <source>for all windows for inheriting classes to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateHandle">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.CreateHandle">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.CreateHandle" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.CreateHandle" /&gt;</ph> method to ensure that the handle is created.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.CreateHandle" /&gt;</ph> 파생된 클래스에서 호출 해야 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.CreateHandle" /&gt;</ph> 메서드 핸들을 만들 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.CreateParams">
          <source>Gets the required creation parameters when the control handle is created.</source>
          <target state="translated">컨트롤 핸들이 만들어지는 경우 필요한 작성 매개 변수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CreateParams">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.CreateParams" /&gt;</ph> that contains the required creation parameters when the handle to the control is created.</source>
          <target state="translated">컨트롤 핸들을 만들 때 필요한 작성 매개 변수가 포함된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.CreateParams" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CreateParams">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateParams%2A&gt;</ph> property should not be overridden and used to adjust the properties of your derived control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateParams%2A&gt;</ph> 속성 하지 재정의 되 고 파생 된 컨트롤의 속성을 조정 하는 데 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CreateParams">
          <source>Properties such as the <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.Caption%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.Width%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Forms.CreateParams.Height%2A?displayProperty=nameWithType&gt;</ph> should be set by the corresponding properties in your control such as <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Text%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Width%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Height%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">와 같은 <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.Caption%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.Width%2A?displayProperty=nameWithType&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Forms.CreateParams.Height%2A?displayProperty=nameWithType&gt;</ph> 와 같은 컨트롤에서 해당 속성으로 설정 해야 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Text%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Width%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Height%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CreateParams">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams&gt;</ph> should only be extended when you are wrapping a standard Windows control class or to set styles not provided by the Windows Forms namespace.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams&gt;</ph> 표준 Windows 컨트롤 클래스를 래핑할 또는 Windows Forms 네임 스페이스에서 제공 하지 않는 스타일을 설정할 때만 확장 해야 합니다.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CreateParams">
          <source>For more information about creating control parameters, see the <ph id="ph1">`CreateWindow`</ph> and <ph id="ph2">`CreateWindowEx`</ph> functions and the <bpt id="p1">[</bpt>CREATESTRUCT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632603.aspx)</ept>structure documentation.</source>
          <target state="translated">제어 매개 변수를 만드는 방법에 대 한 자세한 내용은 참조는 <ph id="ph1">`CreateWindow`</ph> 및 <ph id="ph2">`CreateWindowEx`</ph> 함수 및 <bpt id="p1">[</bpt>CREATESTRUCT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632603.aspx)</ept>설명서를 구성 합니다.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CreateParams">
          <source>The following code example extends the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateParams%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> derived class.</source>
          <target state="translated">다음 코드 예에서는 확장 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateParams%2A&gt;</ph> 속성의는 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CreateParams">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=nameWithType&gt;</ph> property is changed, which causes the button to display an <ph id="ph2">&lt;xref:System.Drawing.Icon&gt;</ph> rather than an <ph id="ph3">&lt;xref:System.Drawing.Image&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=nameWithType&gt;</ph> 속성이 변경 되 고 단추를 한 <ph id="ph2">&lt;xref:System.Drawing.Icon&gt;</ph> 아닌 <ph id="ph3">&lt;xref:System.Drawing.Image&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CreateParams">
          <source>This example requires that you have a class that inherits from the <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 상속 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CreateParams">
          <source>for the immediate caller to call unmanaged code when getting the property value.</source>
          <target state="translated">속성 값을 가져올 때 관리 되지 않는 코드를 호출 하는 직접 실행 호출자의 합니다.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CreateParams">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CreateParams">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.CreateParams" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.CreateParams" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.CreateParams" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.CreateParams" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.CreateParams">
          <source>Otherwise, you must provide all the implementation.</source>
          <target state="translated">그렇지 않으면 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Cursor">
          <source>Gets or sets the cursor that is displayed when the mouse pointer is over the control.</source>
          <target state="translated">마우스 포인터가 컨트롤 위에 있을 때 표시되는 커서를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Cursor">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Cursor" /&gt;</ph> that represents the cursor to display when the mouse pointer is over the control.</source>
          <target state="translated">마우스 포인터가 컨트롤 위에 있을 때 표시되는 커서를 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Cursor" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Cursor">
          <source>Assign a <ph id="ph1">&lt;xref:System.Windows.Forms.Cursor&gt;</ph> to the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Cursor%2A&gt;</ph> property of the control to change the cursor displayed when the mouse pointer is over the control.</source>
          <target state="translated">할당 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Cursor&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Cursor%2A&gt;</ph> 마우스 포인터가 컨트롤 위에 있을 때 표시 되는 커서를 변경 하려면 컨트롤의 속성입니다.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Cursor">
          <source>To temporarily change the mouse cursor for all controls on your application set the <ph id="ph1">&lt;xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">일시적으로 응용 프로그램 집합에 있는 모든 컨트롤에 대 한 마우스 커서를 변경 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Cursor">
          <source>Typically you would set the <ph id="ph1">&lt;xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType&gt;</ph> property to a wait cursor when populating a <ph id="ph2">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph> or saving or loading a file.</source>
          <target state="translated">설정한 일반적으로 <ph id="ph1">&lt;xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType&gt;</ph> 속성을 채울 때 대기 커서를 한 <ph id="ph2">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph> 또는 저장 하거나 파일을 로드 합니다.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Cursor">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Cursor%2A&gt;</ph> property is an ambient property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Cursor%2A&gt;</ph> 속성이 앰비언트 속성입니다.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Cursor">
          <source>An ambient property is a control property that, if not set, is retrieved from the parent control.</source>
          <target state="translated">그렇지 않은 경우, 즉 앰비언트 속성은 컨트롤 속성 설정, 부모 컨트롤에서 검색 됩니다.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Cursor">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> will have the same <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> as its parent <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> by default.</source>
          <target state="translated">예를 들어 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 같은 가질 수 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> 부모로 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Cursor">
          <source>For more information about ambient properties, see the <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> class overview.</source>
          <target state="translated">앰비언트 속성에 대 한 자세한 내용은 참조는 <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph> 클래스 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스 개요입니다.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Cursor">
          <source>The following code example fills a <ph id="ph1">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph> with the user's available logical drives.</source>
          <target state="translated">다음 코드 예에서는 채우기는 <ph id="ph1">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph> 사용자의 사용 가능한 논리 드라이브로 사용 합니다.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Cursor">
          <source>The example also sets the combo box's <ph id="ph1">&lt;xref:System.Windows.Forms.Cursor&gt;</ph> property so the <ph id="ph2">&lt;xref:System.Windows.Forms.Cursors.Hand%2A?displayProperty=nameWithType&gt;</ph> cursor is displayed when the mouse pointer is over the drop-down button.</source>
          <target state="translated">콤보 상자의 또한 설정 <ph id="ph1">&lt;xref:System.Windows.Forms.Cursor&gt;</ph> 속성 이므로 <ph id="ph2">&lt;xref:System.Windows.Forms.Cursors.Hand%2A?displayProperty=nameWithType&gt;</ph> 커서 마우스 포인터를 드롭 다운 단추 위로 가져갈 때 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Cursor">
          <source>This code requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with a <ph id="ph2">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph> on it.</source>
          <target state="translated">이 코드를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph> 에 있습니다.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Cursor">
          <source>for safe subwindows to set this property value.</source>
          <target state="translated">이 속성 값을 설정할 하위 창에서 안전 하 게 보호 합니다.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Cursor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Cursor">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Cursor" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Cursor" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Cursor" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Cursor" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Cursor">
          <source>Otherwise, you must provide all the implementation.</source>
          <target state="translated">그렇지 않으면 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Cursor">
          <source>You are not required to override both the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> methods of the <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.Cursor" /&gt;</ph> property; you can override only one if needed.</source>
          <target state="translated">모두 재정의할 필요 하지는 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 의 메서드는 <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.Cursor" /&gt;</ph> 속성; 필요한 경우 하나만 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.CursorChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Cursor" /&gt;</ph> property changes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Cursor" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.CursorChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Cursor%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Cursor%2A&gt;</ph> 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.CursorChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.CursorChanged">
          <source>The following code example demonstrates changing the mouse cursor using the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType&gt;</ph> property, the <ph id="ph2">&lt;xref:System.Windows.Forms.Cursor&gt;</ph> class, and the <ph id="ph3">&lt;xref:System.Windows.Forms.Cursors&gt;</ph> class.</source>
          <target state="translated">다음 코드 예제에서는 사용 하 여 마우스 커서를 변경 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType&gt;</ph> 속성에는 <ph id="ph2">&lt;xref:System.Windows.Forms.Cursor&gt;</ph> 클래스 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Cursors&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.CursorChanged">
          <source>The example creates a form that contains a <ph id="ph1">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph> control, a <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> control, and a <ph id="ph3">&lt;xref:System.Windows.Forms.ListView&gt;</ph> control.</source>
          <target state="translated">이 예에서는 포함 된 폼을 만듭니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph> 컨트롤은 <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> 컨트롤 및 <ph id="ph3">&lt;xref:System.Windows.Forms.ListView&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.CursorChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph> contains all cursors provided by the <ph id="ph2">&lt;xref:System.Windows.Forms.Cursors&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph> 에서 제공 하는 모든 커서를 포함 된 <ph id="ph2">&lt;xref:System.Windows.Forms.Cursors&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.CursorChanged">
          <source>When the user selects a mouse cursor in the <ph id="ph1">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType&gt;</ph> property is set to the selected cursor, which updates the cursor for the <ph id="ph3">&lt;xref:System.Windows.Forms.Panel&gt;</ph>.</source>
          <target state="translated">사용자가 단위로 나타낸 마우스 포인터를 선택 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType&gt;</ph> 속성이 선택 된 커서에 대 한 커서 업데이트를로 설정 되어는 <ph id="ph3">&lt;xref:System.Windows.Forms.Panel&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.CursorChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ListView&gt;</ph> is updated every time the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.CursorChanged?displayProperty=nameWithType&gt;</ph> event occurs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.ListView&gt;</ph> 업데이트 될 때마다 업데이트 되는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.CursorChanged?displayProperty=nameWithType&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.DataBindings">
          <source>Gets the data bindings for the control.</source>
          <target state="translated">컨트롤에 대한 데이터 바인딩을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DataBindings">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ControlBindingsCollection" /&gt;</ph> that contains the <ph id="ph2">&lt;see cref="T:System.Windows.Forms.Binding" /&gt;</ph> objects for the control.</source>
          <target state="translated">컨트롤의 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ControlBindingsCollection" /&gt;</ph> 개체를 포함하는 <ph id="ph2">&lt;see cref="T:System.Windows.Forms.Binding" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DataBindings">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DataBindings%2A&gt;</ph> property to access the <ph id="ph2">&lt;xref:System.Windows.Forms.ControlBindingsCollection&gt;</ph>.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DataBindings%2A&gt;</ph> 속성에 액세스는 <ph id="ph2">&lt;xref:System.Windows.Forms.ControlBindingsCollection&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DataBindings">
          <source>By adding <ph id="ph1">&lt;xref:System.Windows.Forms.Binding&gt;</ph> objects to the collection, you can bind any property of a control to the property of an object.</source>
          <target state="translated">추가 하 여 <ph id="ph1">&lt;xref:System.Windows.Forms.Binding&gt;</ph> 개체를 컬렉션에는 개체의 속성에는 컨트롤의 모든 속성을 바인딩할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DataBindings">
          <source>The following code example adds <ph id="ph1">&lt;xref:System.Windows.Forms.Binding&gt;</ph> objects to the <ph id="ph2">&lt;xref:System.Windows.Forms.ControlBindingsCollection&gt;</ph> of five controls: four <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> controls and a <ph id="ph4">&lt;xref:System.Windows.Forms.DateTimePicker&gt;</ph> control.</source>
          <target state="translated">다음 코드 예제에서는 추가 <ph id="ph1">&lt;xref:System.Windows.Forms.Binding&gt;</ph> 개체는 <ph id="ph2">&lt;xref:System.Windows.Forms.ControlBindingsCollection&gt;</ph> 다섯 개의 컨트롤의: 4 개의 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 컨트롤 및 <ph id="ph4">&lt;xref:System.Windows.Forms.DateTimePicker&gt;</ph> 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DataBindings">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ControlBindingsCollection&gt;</ph> is accessed through the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DataBindings%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.Control&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.ControlBindingsCollection&gt;</ph>는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DataBindings%2A&gt;</ph> 클래스의 <ph id="ph3">&lt;xref:System.Windows.Forms.Control&gt;</ph> 속성을 통해 액세스됩니다.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.DefaultBackColor">
          <source>Gets the default background color of the control.</source>
          <target state="translated">컨트롤의 기본 배경색을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultBackColor">
          <source>The default background <ph id="ph1">&lt;see cref="T:System.Drawing.Color" /&gt;</ph> of the control.</source>
          <target state="translated">컨트롤의 기본 배경 <ph id="ph1">&lt;see cref="T:System.Drawing.Color" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultBackColor">
          <source>The default is <ph id="ph1">&lt;see cref="P:System.Drawing.SystemColors.Control" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Drawing.SystemColors.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultBackColor">
          <source>This is the default <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> property value of a generic top-level control.</source>
          <target state="translated">이것이 기본 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> 일반 최상위 컨트롤의 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultBackColor">
          <source>Derived classes can have different defaults.</source>
          <target state="translated">파생된 클래스는 서로 다른 기본값을 가질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultBackColor">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultBackColor%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DefaultFont%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DefaultForeColor%2A&gt;</ph> members.</source>
          <target state="translated">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultBackColor%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DefaultFont%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DefaultForeColor%2A&gt;</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultBackColor">
          <source>To run the example, paste the following code in a form containing a <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> called ListBox1.</source>
          <target state="translated">예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여넣습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> ListBox1를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultBackColor">
          <source>Call the <ph id="ph1">`Populate_ListBox`</ph> method in the form's constructor or <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Load&gt;</ph> event-handling method.</source>
          <target state="translated">호출 된 <ph id="ph1">`Populate_ListBox`</ph> 폼의 생성자 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Load&gt;</ph> 이벤트 처리 메서드.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.DefaultCursor">
          <source>Gets or sets the default cursor for the control.</source>
          <target state="translated">컨트롤의 기본 커서를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultCursor">
          <source>An object of type <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Cursor" /&gt;</ph> representing the current default cursor.</source>
          <target state="translated">현재 기본 커서를 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Cursor" /&gt;</ph> 형식의 개체입니다.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultCursor">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultCursor%2A&gt;</ph> to configure a default cursor for your control.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultCursor%2A&gt;</ph> 를 컨트롤에 대 한 기본 커서를 구성 합니다.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultCursor">
          <source>This is more efficient than setting the cursor in the control's constructor, and gives automatic support for certain cursor-related designer functions.</source>
          <target state="translated">이 컨트롤의 생성자에 커서를 설정 하는 보다 더 효율적 이며 자동 지원 특정 커서와 관련 된 디자이너 기능에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>Gets the default font of the control.</source>
          <target state="translated">컨트롤의 기본 글꼴을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>The default <ph id="ph1">&lt;see cref="T:System.Drawing.Font" /&gt;</ph> of the control.</source>
          <target state="translated">컨트롤의 기본 <ph id="ph1">&lt;see cref="T:System.Drawing.Font" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>The value returned will vary depending on the user's operating system the local culture setting of their system.</source>
          <target state="translated">반환되는 값은 운영 체제와 시스템의 로컬 문화권 설정에 따라 다릅니다.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>The following table describes the value returned by <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultFont%2A&gt;</ph> depending on the operating system and local culture.</source>
          <target state="translated">다음 표에서 설명에서 반환 된 값 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultFont%2A&gt;</ph> 운영 체제와 로컬 문화권에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>System/and or Culture</source>
          <target state="translated">시스템 / 또는 Culture</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>Font</source>
          <target state="translated">글꼴</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>Windows NT 4x, Japanese version</source>
          <target state="translated">Windows NT 4 x, 일본어 버전</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>MS UI Gothic, 9 point.</source>
          <target state="translated">MS UI Gothic, 9 포인트입니다.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>Arabic Windows</source>
          <target state="translated">아랍어 Windows</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>Tahoma, 8 point.</source>
          <target state="translated">Tahoma, 8 포인트입니다.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>Other operating system/culture</source>
          <target state="translated">다른 운영 체제/culture</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>MS Shell Dlg logical font, typically Microsoft San Serif 8 point.</source>
          <target state="translated">MS Shell Dlg 논리 글꼴, 일반적으로 Microsoft San Serif 8 지점입니다.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>MS Shell Dlg maps to a font set in the system registry.</source>
          <target state="translated">MS Shell Dlg 글꼴 시스템 레지스트리에 설정에 매핑됩니다.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>If the previous fonts are not installed, the default font is Tahoma, 8 point.</source>
          <target state="translated">이전 글꼴이 설치 되어 있지 않으면 기본 글꼴이 Tahoma, 8 포인트 인 경우</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>If Tahoma, 8 point, is not installed, <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultFont%2A&gt;</ph> returns the value of the <ph id="ph2">&lt;xref:System.Drawing.FontFamily.GenericSansSerif%2A&gt;</ph> property</source>
          <target state="translated">Tahoma, 8 포인트 설치 되어 있지 않으면 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultFont%2A&gt;</ph> 의 값을 반환 된 <ph id="ph2">&lt;xref:System.Drawing.FontFamily.GenericSansSerif%2A&gt;</ph> 속성</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultBackColor%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DefaultFont%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DefaultForeColor%2A&gt;</ph> members.</source>
          <target state="translated">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultBackColor%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DefaultFont%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DefaultForeColor%2A&gt;</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>To run the example, paste the following code in a form containing a <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> called ListBox1.</source>
          <target state="translated">예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여넣습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> ListBox1를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>Call the <ph id="ph1">`Populate_ListBox`</ph> method in the form's constructor or <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Load&gt;</ph> event-handling method.</source>
          <target state="translated">호출 된 <ph id="ph1">`Populate_ListBox`</ph> 폼의 생성자 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Load&gt;</ph> 이벤트 처리 메서드.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.DefaultFont">
          <source>The default font or the regional alternative fonts are not installed on the client computer.</source>
          <target state="translated">클라이언트 컴퓨터에 기본 글꼴이나 국가별 대체 글꼴이 설치되어 있지 않은 경우</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.DefaultForeColor">
          <source>Gets the default foreground color of the control.</source>
          <target state="translated">컨트롤의 기본 전경색을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultForeColor">
          <source>The default foreground <ph id="ph1">&lt;see cref="T:System.Drawing.Color" /&gt;</ph> of the control.</source>
          <target state="translated">컨트롤의 기본 전경 <ph id="ph1">&lt;see cref="T:System.Drawing.Color" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultForeColor">
          <source>The default is <ph id="ph1">&lt;see cref="P:System.Drawing.SystemColors.ControlText" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Drawing.SystemColors.ControlText" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultForeColor">
          <source>This is the default <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> property value of a nonparented control.</source>
          <target state="translated">이것이 기본 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 부모로 지정 되지 않은 컨트롤의 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultForeColor">
          <source>Derived classes can have different defaults.</source>
          <target state="translated">파생된 클래스는 서로 다른 기본값을 가질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultForeColor">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultBackColor%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DefaultFont%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DefaultForeColor%2A&gt;</ph> members.</source>
          <target state="translated">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultBackColor%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DefaultFont%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DefaultForeColor%2A&gt;</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultForeColor">
          <source>To run the example, paste the following code in a form containing a <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> called ListBox1.</source>
          <target state="translated">예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여넣습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> ListBox1를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultForeColor">
          <source>Call the <ph id="ph1">`Populate_ListBox`</ph> method in the form's constructor or <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Load&gt;</ph> event-handling method.</source>
          <target state="translated">호출 된 <ph id="ph1">`Populate_ListBox`</ph> 폼의 생성자 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Load&gt;</ph> 이벤트 처리 메서드.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.DefaultImeMode">
          <source>Gets the default Input Method Editor (IME) mode supported by the control.</source>
          <target state="translated">컨트롤에서 지원하는 기본 IME(입력기) 모드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultImeMode">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ImeMode" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.ImeMode" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultImeMode">
          <source>An Input Method Editor (IME) is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, by using a standard keyboard.</source>
          <target state="translated">(입력기)는 사용자가 표준 키보드를 사용 하 여 복잡 한 한글 등의 기호를 입력할 수 있는 프로그램입니다.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultImeMode">
          <source>As implemented in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class, this property always returns the <ph id="ph2">&lt;xref:System.Windows.Forms.ImeMode.Inherit?displayProperty=nameWithType&gt;</ph> value.</source>
          <target state="translated">구현 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스,이 속성은 항상 반환는 <ph id="ph2">&lt;xref:System.Windows.Forms.ImeMode.Inherit?displayProperty=nameWithType&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultImeMode">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ImeMode.Inherit&gt;</ph> value specifies that the IME mode is inherited from the parent control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.ImeMode.Inherit&gt;</ph> 값 IME 모드는 부모 컨트롤에서 상속 되도록 지정 합니다.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultImeMode">
          <source>The following code example overrides the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultImeMode%2A&gt;</ph> property to turn off the Input Method Editor.</source>
          <target state="translated">다음 코드 예제에서는 재정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultImeMode%2A&gt;</ph> 속성을 입력 방법 편집기 해제를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultImeMode">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.DefaultImeMode" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.DefaultImeMode" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.DefaultImeMode" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.DefaultImeMode" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultImeMode">
          <source>Otherwise, you must provide all the implementation.</source>
          <target state="translated">그렇지 않으면 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.DefaultMargin">
          <source>Gets the space, in pixels, that is specified by default between controls.</source>
          <target state="translated">컨트롤 사이에 기본적으로 지정되는 공백(픽셀)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultMargin">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Padding" /&gt;</ph> that represents the default space between controls.</source>
          <target state="translated">컨트롤 사이의 기본 공백을 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Padding" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.DefaultMaximumSize">
          <source>Gets the length and height, in pixels, that is specified as the default maximum size of a control.</source>
          <target state="translated">컨트롤의 기본 최대 크기로 지정되는 길이와 높이를 픽셀 단위로 가져옵니다.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultMaximumSize">
          <source>A <ph id="ph1">&lt;see cref="M:System.Drawing.Point.#ctor(System.Drawing.Size)" /&gt;</ph> representing the size of the control.</source>
          <target state="translated">컨트롤의 크기를 나타내는 <ph id="ph1">&lt;see cref="M:System.Drawing.Point.#ctor(System.Drawing.Size)" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.DefaultMinimumSize">
          <source>Gets the length and height, in pixels, that is specified as the default minimum size of a control.</source>
          <target state="translated">컨트롤의 기본 최소 크기로 지정되는 길이와 높이를 픽셀 단위로 가져옵니다.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultMinimumSize">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> representing the size of the control.</source>
          <target state="translated">컨트롤의 크기를 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.DefaultPadding">
          <source>Gets the internal spacing, in pixels, of the contents of a control.</source>
          <target state="translated">컨트롤 내용의 내부 간격(픽셀)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultPadding">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Padding" /&gt;</ph> that represents the internal spacing of the contents of a control.</source>
          <target state="translated">컨트롤 내용의 내부 간격을 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Padding" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.DefaultSize">
          <source>Gets the default size of the control.</source>
          <target state="translated">컨트롤의 기본 크기를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultSize">
          <source>The default <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> of the control.</source>
          <target state="translated">컨트롤의 기본 <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultSize">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> property represents the <ph id="ph2">&lt;xref:System.Drawing.Size&gt;</ph> of the control when it is initially created.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> 속성이 나타내는 <ph id="ph2">&lt;xref:System.Drawing.Size&gt;</ph> 처음 만들어질 때 컨트롤의 합니다.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultSize">
          <source>You can adjust the size of the control by setting its <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> property value.</source>
          <target state="translated">설정 하 여 컨트롤의 크기를 조정할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultSize">
          <source>To maintain better performance, do not set the <ph id="ph1">&lt;xref:System.Drawing.Size&gt;</ph> of a control in its constructor.</source>
          <target state="translated">더 나은 성능을 유지 하기 위해 설정 하지 않으면는 <ph id="ph1">&lt;xref:System.Drawing.Size&gt;</ph> 생성자에서 컨트롤의 합니다.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultSize">
          <source>The preferred method is to override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> property.</source>
          <target state="translated">재정의 하는 메서드가 좋습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultSize">
          <source>On Windows Server 2003 systems, the size of a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> is restricted by the maximum pixel width and height of the monitor.</source>
          <target state="translated">Windows Server 2003 시스템의 크기는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 최대 픽셀 너비와 높이 모니터에 의해 제한 됩니다.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultSize">
          <source>The following code example overrides the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> property, and makes the default size of the form 500 pixels square.</source>
          <target state="translated">다음 코드 예제에서는 재정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> 속성 폼 500 픽셀로의 기본 크기를 만듭니다.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DefaultSize">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.DefaultSize" /&gt;</ph> property in a derived class, it is preferable to return a <ph id="ph2">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> with the desired dimensions rather than to override all the implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.DefaultSize" /&gt;</ph> 는 반환할 것이 좋습니다 파생된 클래스에서 속성을 한 <ph id="ph2">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> 모든 구현을 재정의 하는 대신 원하는 크기와 합니다.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)">
          <source>The Windows <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph> to process.</source>
          <target state="translated">처리할 Windows <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)">
          <source>Sends the specified message to the default window procedure.</source>
          <target state="translated">지정된 메시지를 기본 창 프로시저로 보냅니다.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)">
          <source>For more information about processing Windows messages, see the <bpt id="p1">[</bpt>WindowProc function<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=181565)</ept>.</source>
          <target state="translated">Windows 메시지를 처리 하는 방법에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>WindowProc 함수<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=181565)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)">
          <source>for the immediate caller to call unmanaged code.</source>
          <target state="translated">비관리 코드를 호출할 직접 실행 호출자입니다.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.DestroyHandle">
          <source>Destroys the handle associated with the control.</source>
          <target state="translated">컨트롤과 연결된 핸들을 제거합니다.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DestroyHandle">
          <source>for the immediate caller to call unmanaged code.</source>
          <target state="translated">비관리 코드를 호출할 직접 실행 호출자입니다.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DestroyHandle">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DestroyHandle">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.DestroyHandle" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.DestroyHandle" /&gt;</ph> method to ensure that the handle is destroyed.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.DestroyHandle" /&gt;</ph> 파생된 클래스에서 호출 해야 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.DestroyHandle" /&gt;</ph> 메서드는 핸들이 소멸 될 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.DeviceDpi">
          <source>Gets the DPI value for the display device where the control is currently being displayed.</source>
          <target state="translated">컨트롤을 현재 표시 중인 디스플레이 장치의 DPI 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DeviceDpi">
          <source>The DPI value of the display device.</source>
          <target state="translated">디스플레이 장치의 DPI 값입니다.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.DisplayRectangle">
          <source>Gets the rectangle that represents the display area of the control.</source>
          <target state="translated">컨트롤의 표시 영역을 나타내는 사각형을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DisplayRectangle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph> that represents the display area of the control.</source>
          <target state="translated">컨트롤의 표시 영역을 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DisplayRectangle">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DisplayRectangle%2A&gt;</ph> property returns the client rectangle of the display area of the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DisplayRectangle%2A&gt;</ph> 속성의 표시 영역 컨트롤의 클라이언트 사각형을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DisplayRectangle">
          <source>For the base control class, this is equal to the client rectangle.</source>
          <target state="translated">기본 컨트롤 클래스에 대 한 클라이언트 사각형에는이 같습니다.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DisplayRectangle">
          <source>However, inheriting controls might want to change this if their client area differs from their display area.</source>
          <target state="translated">그러나 상속 하는 컨트롤의 클라이언트 영역 표시 영역과 다른 경우이 변경 해야 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DisplayRectangle">
          <source>The display rectangle is the smallest <ph id="ph1">&lt;xref:System.Drawing.Rectangle&gt;</ph> that encloses a control and is used to lay out controls.</source>
          <target state="translated">표시 사각형은 가장 작은 <ph id="ph1">&lt;xref:System.Drawing.Rectangle&gt;</ph> 컨트롤을 포함 하 고 컨트롤을 배치 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DisplayRectangle">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.DisplayRectangle" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.DisplayRectangle" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.DisplayRectangle" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.DisplayRectangle" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DisplayRectangle">
          <source>Alternatively, you must provide all the implementation.</source>
          <target state="translated">또는 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> and its child controls and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>과 해당 자식 컨트롤에서 사용하는 관리되지 않는 리소스를 해제하고, 필요에 따라 관리되는 리소스를 해제할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.<ph id="ph3">`Dispose()`</ph></source>
          <target state="translated">이 메서드는 public <ph id="ph1">`Dispose()`</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> 메서드.<ph id="ph3">`Dispose()`</ph></target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Dispose(System.Boolean)">
          <source>invokes the protected <ph id="ph1">`Dispose(Boolean)`</ph> method with the <ph id="ph2">`disposing`</ph> parameter set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">보호 된 호출 <ph id="ph1">`Dispose(Boolean)`</ph> 메서드는 <ph id="ph2">`disposing`</ph> 매개 변수 설정 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 호출 <ph id="ph2">`Dispose`</ph> 와 <ph id="ph3">`disposing`</ph> 로 설정 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Windows.Forms.Control&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> 매개 변수가 <ph id="ph2">`true`</ph>인 경우 이 메서드는 이 <ph id="ph3">&lt;xref:System.Windows.Forms.Control&gt;</ph>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">이 메서드는 참조되는 각 개체의 <ph id="ph1">`Dispose()`</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>는 다른 개체에서 여러 번 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">구현 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>Dispose 메서드를 구현<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Overriding the Finalize Method<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> 및 <bpt id="p2">[</bpt>Finalize 메서드를 재정의<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Disposing">
          <source>Gets a value indicating whether the base <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> class is in the process of disposing.</source>
          <target state="translated">기본 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> 클래스에 대한 삭제 작업이 진행되고 있는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Disposing">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the base <ph id="ph2">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> class is in the process of disposing; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본 <ph id="ph2">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> 클래스에 대한 삭제 작업이 진행되고 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Disposing">
          <source>When this property returns <ph id="ph1">`true`</ph>, the base <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> class is in the process of disposing.</source>
          <target state="translated">이 속성이 반환 하는 경우 <ph id="ph1">`true`</ph>, 기본 <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스 삭제 작업이 진행 됩니다.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Disposing">
          <source>After the control is disposed of, it can no longer be referenced as a valid Windows control.</source>
          <target state="translated">삭제 된 컨트롤은 더 이상 유효한 Windows 컨트롤로 참조할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Disposing">
          <source>Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection.</source>
          <target state="translated">컨트롤의 인스턴스 삭제 하는 경우에 가비지 수집을 통해 메모리에서 제거 될 때까지 메모리에 유지 계속 됩니다.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Disposing">
          <source>When a control is disposed of, you cannot call its <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RecreateHandle%2A&gt;</ph> method.</source>
          <target state="translated">호출할 수 없습니다의 삭제는 컨트롤을 해당 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RecreateHandle%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Dock">
          <source>Gets or sets which control borders are docked to its parent control and determines how a control is resized with its parent.</source>
          <target state="translated">어느 컨트롤 테두리가 부모 컨트롤에 도킹되는지를 가져오거나 설정하고 해당 부모를 기초로 컨트롤 크기를 조정하는 방법을 결정합니다.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Dock">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DockStyle" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.DockStyle" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Dock">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.Forms.DockStyle.None" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.Forms.DockStyle.None" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Dock">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> property to define how a control is automatically resized as its parent control is resized.</source>
          <target state="translated">사용 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> 컨트롤은 자동으로 조정 방법을 부모 컨트롤 크기 조정 되는지를 정의 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Dock">
          <source>For example, setting <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Windows.Forms.DockStyle.Left?displayProperty=nameWithType&gt;</ph> causes the control to align itself with the left edges of its parent control and to resize as the parent control is resized.</source>
          <target state="translated">예를 들어 설정 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Windows.Forms.DockStyle.Left?displayProperty=nameWithType&gt;</ph> 하면 컨트롤이 부모 컨트롤의 왼쪽된 가장자리에 맞춰지고 하 고 크기를 조정 부모 컨트롤의 크기를 조정 합니다.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Dock">
          <source>Controls are docked in their Z-order, which is the visual layering of controls on a form along the form's Z-axis (depth).</source>
          <target state="translated">컨트롤은 폼의 z 축 (깊이)와 함께 폼에 컨트롤의 시각적 계층은 Z 순서에 도킹 됩니다.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Dock">
          <source>A control can be docked to one edge of its parent container or can be docked to all edges and fill the parent container.</source>
          <target state="translated">부모 컨테이너의 한쪽 가장자리에 도킹 될 수 있습니다 또는 모든 가장자리에 도킹 될 수 컨트롤과 부모 컨테이너를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Dock">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Margin%2A&gt;</ph> property on a docked control has no effect on the distance of the control from the edges of its container.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Margin%2A&gt;</ph> 도킹된 된 컨트롤에 속성에는 해당 컨테이너의 가장자리에서 컨트롤의 거리에 대 한 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Dock">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> properties are mutually exclusive.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> 속성은 함께 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Dock">
          <source>Only one can be set at a time, and the last one set takes precedence.</source>
          <target state="translated">한 번에 하나만 설정할 수 있습니다 및 우선적으로 마지막으로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Dock">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> and sets some of its common properties.</source>
          <target state="translated">다음 코드 예제에서는 한 <ph id="ph1">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> 공통 속성 중 일부를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Dock">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> and sets its <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> within the group box.</source>
          <target state="translated">이 예에서는 만듭니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 설정 하 고 해당 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> 그룹 상자 내에서.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Dock">
          <source>Next, it sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property of the group box, and docks the group box to the top of the form.</source>
          <target state="translated">그런 다음 설정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 그룹 상자 및 폼의 위쪽에 도킹 된 그룹 상자 속성입니다.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Dock">
          <source>Lastly, it disables the group box by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> property to <ph id="ph2">`false`</ph>, which causes all controls contained within the group box to be disabled.</source>
          <target state="translated">마지막으로, 그룹 상자 설정 하 여 비활성화는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> 속성을 <ph id="ph2">`false`</ph>, 사용 하지 않도록 설정할 그룹 상자에 포함 된 모든 컨트롤에 이르게 됩니다.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Dock">
          <source>The value assigned is not one of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DockStyle" /&gt;</ph> values.</source>
          <target state="translated">할당된 값이 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DockStyle" /&gt;</ph> 값 중 하나가 아닌 경우</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Dock">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Dock" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Dock" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Dock" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Dock" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Dock">
          <source>Otherwise, you must provide all the implementation.</source>
          <target state="translated">그렇지 않으면 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Dock">
          <source>You are not required to override both the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> methods of the <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.Dock" /&gt;</ph> property; you can override only one if needed.</source>
          <target state="translated">모두 재정의할 필요 하지는 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 의 메서드는 <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.Dock" /&gt;</ph> 속성; 필요한 경우 하나만 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.DockChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Dock" /&gt;</ph> property changes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Dock" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DockChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DockChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DockChanged">
          <source>The following code example is an event handler that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트 처리기 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DockChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph2">`Changed`</ph> that are raised when the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> value changes(<bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph2">`Changed`</ph> 있는 될 때 발생 하는 해당 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> 값이 변경 (<bpt id="p3">*</bpt> PropertyName<ept id="p3">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DockChanged">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DockChanged">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DockChanged">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that contains a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 를 포함 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The data to drag.</source>
          <target state="translated">끌 데이터입니다.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragDropEffects" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragDropEffects" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>Begins a drag-and-drop operation.</source>
          <target state="translated">끌어서 놓기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>A value from the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragDropEffects" /&gt;</ph> enumeration that represents the final effect that was performed during the drag-and-drop operation.</source>
          <target state="translated">끌어서 놓기 작업 동안 수행된 마지막 효과를 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragDropEffects" /&gt;</ph> 열거형의 값입니다.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The <ph id="ph1">`allowedEffects`</ph> parameter determines which drag operations can occur.</source>
          <target state="translated"><ph id="ph1">`allowedEffects`</ph> 작업이 발생할 수 있는 끌기 매개 변수를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>If the drag operation needs to interoperate with applications in another process, data should either be a base managed class (<ph id="ph1">&lt;xref:System.String&gt;</ph>, <ph id="ph2">&lt;xref:System.Drawing.Bitmap&gt;</ph>, or <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph>), or an object that implements <ph id="ph4">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Forms.IDataObject&gt;</ph>.</source>
          <target state="translated">관리 되는 기본 클래스는 끌기 작업을 다른 프로세스에서 응용 프로그램과 상호 운용 하는 경우 데이터 해야 하거나 (<ph id="ph1">&lt;xref:System.String&gt;</ph>, <ph id="ph2">&lt;xref:System.Drawing.Bitmap&gt;</ph>, 또는 <ph id="ph3">&lt;xref:System.Drawing.Imaging.Metafile&gt;</ph>)를 구현 하는 개체 또는 <ph id="ph4">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> 또는 <ph id="ph5">&lt;xref:System.Windows.Forms.IDataObject&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The following describes how and when events related to drag-and-drop operations are raised.</source>
          <target state="translated">다음에서는 끌어서 놓기 작업이 발생하는 방식 및 시기에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method determines the control under the current cursor location.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 메서드는 현재 커서 위치에서 컨트롤을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>It then checks to see if the control is a valid drop target.</source>
          <target state="translated">그런 다음 컨트롤은 유효한 놓기 대상 인지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>If the control is a valid drop target, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the drag-and-drop effect specified.</source>
          <target state="translated">컨트롤이 유효한 놓기 대상일 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 지정 된 끌어서 놓기 효과 함께 발생 합니다.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>For a list of drag-and-drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
          <target state="translated">끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> 열거형을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</source>
          <target state="translated">마우스 커서 위치, 키보드 상태 및 마우스 단추 상태의 변경 내용을 추적합니다.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>If the user moves out of a window, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
          <target state="translated">사용자가 창의 외부로 이동하면 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> 이벤트가 발생합니다.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>If the mouse enters another control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> for that control is raised.</source>
          <target state="translated">마우스를 다른 컨트롤로 가져가면 해당 컨트롤에 대한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph>가 발생합니다.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>If the mouse moves but stays within the same control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised.</source>
          <target state="translated">마우스를 동일한 컨트롤 내에서 이동하면 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 이벤트가 발생합니다.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>If there is a change in the keyboard or mouse button state, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> property of the event's <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>.</source>
          <target state="translated">키보드 또는 마우스 단추 상태가 변경 될 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> 이벤트가 발생 하 고 데이터를 끌기를 계속할지 여부를 결정 하거나의 값을 기준으로 작업을 취소 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> 이벤트의 속성 <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Continue`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised to continue the operation and the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the new effect so appropriate visual feedback can be set.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Continue`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 이벤트 작업을 계속 하려면는 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 적절 한 시각적 피드백이 설정 될 수 있도록 새로운 효과 함께 발생 합니다.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>For a list of valid drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
          <target state="translated">유효한 끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> 열거형을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 쌍을 이루고 있어서 마우스가 놓기 대상을 통과할 사용자에 게 마우스 위치에 대 한 최신 피드백이 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Drop`</ph>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Drop`</ph>, 놓기 효과 값이 원본에 반환, 되므로 소스 응용 프로그램이 소스 데이터에 대해 적절 한 작업을 수행할 수 예를 들어 데이터 잘라내기 작업이 이동 인 경우.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Cancel`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Cancel`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method catches all exceptions and rethrows only the following security or critical exceptions:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 메서드는 모든 예외를 catch 하 고 다음과 같은 보안 또는 심각한 예외만 다시 throw 합니다.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>SecurityException</source>
          <target state="translated">SecurityException</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>NullReferenceException</source>
          <target state="translated">NullReferenceException</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>StackOverflowException</source>
          <target state="translated">StackOverflowException</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>OutOfMemoryException</source>
          <target state="translated">OutOfMemoryException</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>ThreadAbortException</source>
          <target state="translated">ThreadAbortException</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>ExecutionEngineException</source>
          <target state="translated">ExecutionEngineException</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>IndexOutOfRangeException</source>
          <target state="translated">IndexOutOfRangeException</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>AccessViolationException</source>
          <target state="translated">AccessViolationException</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The following code example demonstrates a drag-and-drop operation between two <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> controls.</source>
          <target state="translated">다음 코드 예제에서는 두 끌어서 놓기 작업을 보여 줍니다. <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The example calls the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method when the drag action starts.</source>
          <target state="translated">예제에서는 호출은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 끌기 작업이 시작 될 때 메서드.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The drag action starts if the mouse has moved more than <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType&gt;</ph> from the mouse location during the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event.</source>
          <target state="translated">마우스를 이동 하는 경우 끌기 작업이 시작 이상 <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType&gt;</ph> 하는 동안 마우스 위치에서의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox.IndexFromPoint%2A&gt;</ph> method is used to determine the index of the item to drag during the <ph id="ph2">`MouseDown`</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.ListBox.IndexFromPoint%2A&gt;</ph> 메서드 결정 하는 동안 끌어 항목의 인덱스를 사용 하는 <ph id="ph2">`MouseDown`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The example also demonstrates using custom cursors for the drag-and-drop operation.</source>
          <target state="translated">또한이 예제에서는 끌어서 놓기 작업에 대 한 사용자 지정 커서를 사용 하 여 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The example requires that two cursor files, <ph id="ph1">`3dwarro.cur`</ph> and <ph id="ph2">`3dwno.cur`</ph>, exist in the application directory, for the custom drag and no-drop cursors, respectively.</source>
          <target state="translated">이 예제를 실행 하려면 커서 파일 <ph id="ph1">`3dwarro.cur`</ph> 및 <ph id="ph2">`3dwno.cur`</ph>, 사용자 지정 끌어서에 대 한 응용 프로그램 디렉터리에 있으면 놓기-커서, 각각.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The custom cursors will be used if the <ph id="ph1">`UseCustomCursorsCheck`</ph> <ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> is checked.</source>
          <target state="translated">사용자 지정 커서 사용 하는 경우는 <ph id="ph1">`UseCustomCursorsCheck`</ph> <ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> 을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The custom cursors are set in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event handler.</source>
          <target state="translated">에 설정 된 사용자 지정 커서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The keyboard state is evaluated in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event handler for the right <ph id="ph2">`ListBox`</ph>, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</source>
          <target state="translated">키보드 상태에서 평가 됩니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 오른쪽에 대 한 이벤트 처리기 <ph id="ph2">`ListBox`</ph>항목 끌기 작업을 결정 하는, SHIFT, CTRL 및 ALT, CTRL + ALT 키의 상태를 기반 합니다.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The location in the <ph id="ph1">`ListBox`</ph> where the drop would occur is also determined during the <ph id="ph2">`DragOver`</ph> event.</source>
          <target state="translated">위치는 <ph id="ph1">`ListBox`</ph> 삭제가 발생 중도 결정 됩니다는 <ph id="ph2">`DragOver`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>If the data to drop is not a <ph id="ph1">`String`</ph>, then the <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType&gt;</ph> is set to <ph id="ph3">`None`</ph> in <ph id="ph4">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph>.</source>
          <target state="translated">삭제할 데이터가 아닌 경우는 <ph id="ph1">`String`</ph>, 하면 <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType&gt;</ph> 로 설정 된 <ph id="ph3">`None`</ph> 에서 <ph id="ph4">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>Finally, the status of the drop is displayed in the <ph id="ph1">`DropLocationLabel`</ph> <ph id="ph2">&lt;xref:System.Windows.Forms.Label&gt;</ph>.</source>
          <target state="translated">드롭다운 상태에 표시 되는 마지막으로,는 <ph id="ph1">`DropLocationLabel`</ph> <ph id="ph2">&lt;xref:System.Windows.Forms.Label&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The data to drop for the right <ph id="ph1">`ListBox`</ph> is determined in the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> event handler and the <ph id="ph3">`String`</ph> value is added at the appropriate place in the <ph id="ph4">`ListBox`</ph>.</source>
          <target state="translated">데이터를 오른쪽에 대 한 drop <ph id="ph1">`ListBox`</ph> 에 따라 결정 됩니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> 이벤트 처리기 및 <ph id="ph3">`String`</ph> 적절 한 위치에서 값이 추가 <ph id="ph4">`ListBox`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event handler.</source>
          <target state="translated">끌기 작업, 폼의 경계를 벗어나면 경우에서 끌어서 놓기 작업이 취소 되 고 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration to specify how data should be transferred between the controls involved in a drag-and-drop operation.</source>
          <target state="translated">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> 끌어서 놓기 작업에 사용 되는 컨트롤 간의 데이터를 전송 하는 방법을 지정 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>This example requires that your form includes a <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> control and a <ph id="ph2">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> control and that the <ph id="ph3">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> control is populated with a list of valid file names.</source>
          <target state="translated">이 예제에서는 폼에 포함 되어 있는지는 <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> 제어 및 <ph id="ph2">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> 컨트롤과 하는 <ph id="ph3">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> 컨트롤이 올바른 파일 이름 목록으로 채워집니다.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>When the user drags a file name onto the <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> control, the control's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> event is raised.</source>
          <target state="translated">사용자 파일 이름을 끌 때는 <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> 컨트롤, 컨트롤의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
          <source>Within the event handler, the <ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.Effect%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs&gt;</ph> is initialized to <ph id="ph3">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> to indicate that the data referenced by the file path should be copied to the <ph id="ph4">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> control.</source>
          <target state="translated">이벤트 처리기 내에서 <ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.Effect%2A&gt;</ph> 속성의는 <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs&gt;</ph> 로 초기화 <ph id="ph3">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> 파일 경로에서 참조 하는 데이터에 복사 되어야 함을 나타내려면는 <ph id="ph4">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.DoubleBuffered">
          <source>Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker.</source>
          <target state="translated">이 컨트롤에서 깜빡임을 줄이거나 방지하기 위해 보조 버퍼를 사용하여 화면을 다시 그려야 하는지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DoubleBuffered">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the surface of the control should be drawn using double buffering; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이중 버퍼링을 사용하여 컨트롤의 화면을 그려야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DoubleBuffered">
          <source>Buffered graphics can reduce or eliminate flicker that is caused by progressive redrawing of parts of a displayed surface.</source>
          <target state="translated">버퍼링 된 그래픽 줄이거나 깜빡임을 점진적으로 다시 그리면은 표시 된 화면의 부분의 발생 하는 제거할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DoubleBuffered">
          <source>Buffered graphics require that the updated graphics data is first written to a buffer.</source>
          <target state="translated">버퍼링 된 그래픽에서는 업데이트 된 데이터 버퍼에 먼저 기록 됩니다.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DoubleBuffered">
          <source>The data in the graphics buffer is then quickly written to displayed surface memory.</source>
          <target state="translated">다음 그래픽 버퍼의 데이터를 표시 된 화면 메모리에 신속 하 게 기록 됩니다.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DoubleBuffered">
          <source>The relatively quick switch of the displayed graphics memory typically reduces the flicker that can otherwise occur.</source>
          <target state="translated">일반적으로 표시 된 그래픽 메모리의 상대적으로 더 빨리 스위치 깜빡임을 그 밖에 발생할 수를 줄입니다.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.DoubleBuffered">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleBuffered%2A&gt;</ph> is not a bindable property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleBuffered%2A&gt;</ph> 바인딩 가능한 속성이 아닙니다.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source>Occurs when the control is double-clicked.</source>
          <target state="translated">컨트롤을 두 번 클릭하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source>A double-click is determined by the mouse settings of the user's operating system.</source>
          <target state="translated">두 번 클릭은 운영 체제의 마우스 설정에 따라 결정 됩니다.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source>The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks.</source>
          <target state="translated">천천히 두 번 클릭하는 것이 아닌 두 번 클릭(double-click)으로 간주될 수 있도록 마우스 단추 클릭 간격을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event is raised every time a control is double-clicked.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 이벤트는 컨트롤을 두 번 클릭할 때마다 발생 합니다.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source>For example, if you have event handlers for the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> events of a <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>, the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> events are raised when the form is double-clicked and both methods are called.</source>
          <target state="translated">예를 들어에 대 한 이벤트 처리기가는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> 의 이벤트는 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 및 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> 발생 하는 폼을 두 번 클릭 하 고 두 방법 모두 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source>If a control is double-clicked and that control does not support the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> event, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event might be raised twice.</source>
          <target state="translated">컨트롤을 두 번 클릭 하는 경우 및 컨트롤을 지원 하지 않습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> 이벤트는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 이벤트를 두 번 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source>You must set the <ph id="ph1">`StandardDoubleClick`</ph> and <ph id="ph2">`StandardClick`</ph> values of <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> to <ph id="ph4">`true`</ph> for this event to be raised.</source>
          <target state="translated">설정 해야 합니다는 <ph id="ph1">`StandardDoubleClick`</ph> 및 <ph id="ph2">`StandardClick`</ph> 값 <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> 를 <ph id="ph4">`true`</ph> 이 이벤트를 발생 합니다.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source>These values might already be set to <ph id="ph1">`true`</ph> if you are inheriting from existing Windows Forms controls.</source>
          <target state="translated">이러한 값으로 이미 설정 되었을 <ph id="ph1">`true`</ph> 기존 계획에서 상속 하는 경우에 Windows Forms 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source>The following events are not raised for the <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> class unless there is at least one <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType&gt;</ph> collection: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> and <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>.</source>
          <target state="translated">에 대 한 다음과 같은 이벤트가 발생 하지 않습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> 하나 이상 있으면 클래스 <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType&gt;</ph> 컬렉션: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> 및 <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source>If there is at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the collection, and the user interacts with the tab control's header (where the <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> names appear), the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> raises the appropriate event.</source>
          <target state="translated">둘 이상 있는 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 컬렉션에 사용자 탭 컨트롤의 헤더 상호 작용 하 고 (여기서는 <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 이름이 표시), <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> 적절 한 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source>However, if the user interaction is within the client area of the tab page, the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> raises the appropriate event.</source>
          <target state="translated">그러나 사용자 상호 작용 탭 페이지의 클라이언트 영역 내에 있으면는 <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 적절 한 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> event of a <ph id="ph2">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> to load text files listed in the <ph id="ph3">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> into a <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> 의 이벤트는 <ph id="ph2">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> 에 나열 된 텍스트 파일을 로드 하는 <ph id="ph3">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> 에 <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source>Inheriting from a standard Windows Forms control and changing the <ph id="ph1">&lt;see langword="StandardClick" /&gt;</ph> or <ph id="ph2">&lt;see langword="StandardDoubleClick" /&gt;</ph> values of <ph id="ph3">&lt;see cref="T:System.Windows.Forms.ControlStyles" /&gt;</ph> to <ph id="ph4">&lt;see langword="true" /&gt;</ph> can cause unexpected behavior or have no effect at all if the control does not support the <ph id="ph5">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> or <ph id="ph6">&lt;see cref="E:System.Windows.Forms.Control.DoubleClick" /&gt;</ph> events.</source>
          <target state="translated">표준 Windows Forms 컨트롤에서 상속 하 고 변경 된 <ph id="ph1">&lt;see langword="StandardClick" /&gt;</ph> 또는 <ph id="ph2">&lt;see langword="StandardDoubleClick" /&gt;</ph> 값의 <ph id="ph3">&lt;see cref="T:System.Windows.Forms.ControlStyles" /&gt;</ph> 를 <ph id="ph4">&lt;see langword="true" /&gt;</ph> 효과가 없습니다. 모든 컨트롤을 지원 하지 않는 경우 하거나 예기치 않은 동작이 발생할 수 있습니다는 <ph id="ph5">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> 또는 <ph id="ph6">&lt;see cref="E:System.Windows.Forms.Control.DoubleClick" /&gt;</ph>이벤트입니다.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source>The following table lists Windows Forms controls and which event (<ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> or <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Control.DoubleClick" /&gt;</ph>) is raised in response to the mouse action specified.</source>
          <target state="translated">다음 표에서 Windows Forms 컨트롤 및 이벤트 (event) (<ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Control.DoubleClick" /&gt;</ph>)는 지정 된 마우스 작업에 대 한 응답에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Control</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 컨트롤</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Left Mouse Click</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 마우스 왼쪽된 단추 클릭</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Left Mouse Double Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 왼쪽된 마우스 두 번 클릭</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Right Mouse Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 마우스 오른쪽 단추 클릭</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Right Mouse Double Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 마우스 오른쪽 단추 두 번 클릭</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Middle Mouse Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 마우스 가운데 단추 클릭</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Middle Mouse Double Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 마우스 가운데 단추를 두 번 클릭</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> XButton1 Mouse Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> XButton1 마우스 클릭</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> XButton1 Mouse Double-Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> XButton1 마우스 두 번 클릭</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> XButton2 Mouse Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> XButton2 마우스 클릭</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> XButton2 Mouse Double-Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> XButton2 마우스 두 번 클릭</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.MonthCalendar" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.MonthCalendar" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.DateTimePicker" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.DateTimePicker" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.RichTextBox" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.RichTextBox" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.HScrollBar" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.HScrollBar" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.VScrollBar" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.VScrollBar" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.Button" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.Button" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.CheckBox" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.CheckBox" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.RadioButton" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.RadioButton" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.ListBox" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.ListBox" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.CheckedListBox" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.CheckedListBox" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.ComboBox" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.ComboBox" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.TextBox" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.TextBox" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.DomainUpDown" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.DomainUpDown" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.NumericUpDown" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.NumericUpDown" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5"> * </ph><ph id="ph6">&lt;see cref="T:System.Windows.Forms.TreeView" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5"> * </ph><ph id="ph6">&lt;see cref="T:System.Windows.Forms.TreeView" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">\*</ph> <ph id="ph2">&lt;see cref="T:System.Windows.Forms.ListView" /&gt;</ph><ph id="ph3">&lt;/term&gt;</ph><ph id="ph4">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">\*</ph> <ph id="ph2">&lt;see cref="T:System.Windows.Forms.ListView" /&gt;</ph><ph id="ph3">&lt;/term&gt;</ph><ph id="ph4">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> none</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.ProgressBar" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.ProgressBar" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.TrackBar" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.TrackBar" /&gt;</ph><ph id="ph2">&lt;/term&gt;</ph><ph id="ph3">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, Click</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.Form" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph><ph id="ph5">&lt;see cref="T:System.Windows.Forms.Form" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.DataGrid" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.DataGrid" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Label" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Label" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.LinkLabel" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.LinkLabel" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Panel" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Panel" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.GroupBox" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.GroupBox" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.PictureBox" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.PictureBox" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Splitter" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Splitter" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.StatusBar" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.StatusBar" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.ToolBar" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.ToolBar" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Forms.TabPage" /&gt;</ph>,</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.TabPage" /&gt;</ph>,</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">** </ph><ph id="ph2">&lt;see cref="T:System.Windows.Forms.TabControl" /&gt;</ph><ph id="ph3">&lt;/term&gt;</ph><ph id="ph4">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">** </ph><ph id="ph2">&lt;see cref="T:System.Windows.Forms.TabControl" /&gt;</ph><ph id="ph3">&lt;/term&gt;</ph><ph id="ph4">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 클릭</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Click, DoubleClick</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source><ph id="ph1">\*</ph> The mouse pointer must be over a child object (<ph id="ph2">&lt;see cref="T:System.Windows.Forms.TreeNode" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Windows.Forms.ListViewItem" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">\*</ph> 마우스 포인터가 자식 개체에 대해 이어야 합니다 (<ph id="ph2">&lt;see cref="T:System.Windows.Forms.TreeNode" /&gt;</ph> 또는 <ph id="ph3">&lt;see cref="T:System.Windows.Forms.ListViewItem" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DoubleClick">
          <source>** The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.TabControl" /&gt;</ph> must have at least one <ph id="ph2">&lt;see cref="T:System.Windows.Forms.TabPage" /&gt;</ph> in its <ph id="ph3">&lt;see cref="P:System.Windows.Forms.TabControl.TabPages" /&gt;</ph> collection.</source>
          <target state="translated">* *는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.TabControl" /&gt;</ph> 하나 이상 있어야 <ph id="ph2">&lt;see cref="T:System.Windows.Forms.TabPage" /&gt;</ph> 에 해당 <ph id="ph3">&lt;see cref="P:System.Windows.Forms.TabControl.TabPages" /&gt;</ph> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.DpiChangedAfterParent">
          <source>Occurs when the DPI setting for a control is changed programmatically after the DPI of it's parent control or form has changed.</source>
          <target state="translated">부모 컨트롤 또는 양식의 DPI가 변경된 후에 컨트롤의 DPI 설정이 프로그래밍 방식으로 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.DpiChangedBeforeParent">
          <source>Occurs when the DPI setting for a control is changed programmatically before a DPI change event for it's parent control or form has occurred.</source>
          <target state="translated">부모 컨트롤 또는 양식에 대한 DPI 변경 이벤트가 발생하기 전에 컨트롤의 DPI 설정이 프로그래밍 방식으로 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.DragDrop">
          <source>Occurs when a drag-and-drop operation is completed.</source>
          <target state="translated">끌어서 놓기 작업이 완료될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragDrop">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Windows.Forms.DragEventArgs&gt;</ph> are in screen coordinates, not client coordinates.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A&gt;</ph> 속성의는 <ph id="ph3">&lt;xref:System.Windows.Forms.DragEventArgs&gt;</ph> 에 화면 좌표를 클라이언트 좌표로 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragDrop">
          <source>The following line of Visual C# code converts the properties to a client <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph>.</source>
          <target state="translated">Visual C# 코드의 다음 줄을 클라이언트로 속성 변환 <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragDrop">
          <source>In versions earlier than <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>, if you put a <ph id="ph2">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> with <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> events on a Windows Form and drag and drop something onto the <ph id="ph5">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> at design time, the <ph id="ph6">`DropDrop`</ph> and <ph id="ph7">`DropEnter`</ph> events are raised.</source>
          <target state="translated">버전에서 보다 이전 <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>을 넣고는 <ph id="ph2">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> 와 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> 이벤트 Windows Form에 끌어다 놓습니다로 요소는 <ph id="ph5">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> 디자인 타임에는 <ph id="ph6">`DropDrop`</ph> 및 <ph id="ph7">`DropEnter`</ph> 이벤트는 발생합니다.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragDrop">
          <source>However, when you close and reopen the solution, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> events are not raised again.</source>
          <target state="translated">그러나 닫았다가 솔루션을 다시 열고는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> 이벤트가 다시 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragDrop">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragDrop">
          <source>This code excerpt demonstrates using the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> event.</source>
          <target state="translated">이 코드 발췌 한 구문을 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragDrop">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method for the complete code example.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 전체 코드 예제에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>Occurs when an object is dragged into the control's bounds.</source>
          <target state="translated">개체를 컨트롤의 범위 안으로 끌 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> event is raised when the user first drags the mouse cursor over the control during a drag-and-drop operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> 처음으로 가져왔을 마우스 커서를 컨트롤 위로 끌어서 놓기 작업 중 때 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>In versions earlier than <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>, if you put a <ph id="ph2">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> with <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> events on a Windows Form and drag and drop something onto the <ph id="ph5">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> at design time, the <ph id="ph6">`DropDrop`</ph> and <ph id="ph7">`DropEnter`</ph> events are raised.</source>
          <target state="translated">버전에서 보다 이전 <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>을 넣고는 <ph id="ph2">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> 와 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> 이벤트 Windows Form에 끌어다 놓습니다로 요소는 <ph id="ph5">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> 디자인 타임에는 <ph id="ph6">`DropDrop`</ph> 및 <ph id="ph7">`DropEnter`</ph> 이벤트는 발생합니다.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>However, when you close and reopen the solution, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> events are not raised again.</source>
          <target state="translated">그러나 닫았다가 솔루션을 다시 열고는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> 이벤트가 다시 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The following describes how and when events related to drag-and-drop operations are raised.</source>
          <target state="translated">다음에서는 끌어서 놓기 작업이 발생하는 방식 및 시기에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method determines the control under the current cursor location.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 메서드는 현재 커서 위치에서 컨트롤을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>It then checks to see if the control is a valid drop target.</source>
          <target state="translated">그런 다음 컨트롤은 유효한 놓기 대상 인지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>If the control is a valid drop target, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the drag-and-drop effect specified.</source>
          <target state="translated">컨트롤이 유효한 놓기 대상일 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 지정 된 끌어서 놓기 효과 함께 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>For a list of drag-and-drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
          <target state="translated">끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> 열거형을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</source>
          <target state="translated">마우스 커서 위치, 키보드 상태 및 마우스 단추 상태의 변경 내용을 추적합니다.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>If the user moves out of a window, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
          <target state="translated">사용자가 창의 외부로 이동하면 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> 이벤트가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>If the mouse enters another control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> for that control is raised.</source>
          <target state="translated">마우스를 다른 컨트롤로 가져가면 해당 컨트롤에 대한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph>가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>If the mouse moves but stays within the same control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised.</source>
          <target state="translated">마우스를 동일한 컨트롤 내에서 이동하면 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 이벤트가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>If there is a change in the keyboard or mouse button state, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> property of the event's <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>.</source>
          <target state="translated">키보드 또는 마우스 단추 상태가 변경 될 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> 이벤트가 발생 하 고 데이터를 끌기를 계속할지 여부를 결정 하거나의 값을 기준으로 작업을 취소 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> 이벤트의 속성 <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Continue`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised to continue the operation and the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the new effect so appropriate visual feedback can be set.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Continue`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 이벤트 작업을 계속 하려면는 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 적절 한 시각적 피드백이 설정 될 수 있도록 새로운 효과 함께 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>For a list of valid drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
          <target state="translated">유효한 끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> 열거형을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 쌍을 이루고 있어서 마우스가 놓기 대상을 통과할 사용자에 게 마우스 위치에 대 한 최신 피드백이 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Drop`</ph>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Drop`</ph>, 놓기 효과 값이 원본에 반환, 되므로 소스 응용 프로그램이 소스 데이터에 대해 적절 한 작업을 수행할 수 예를 들어 데이터 잘라내기 작업이 이동 인 경우.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Cancel`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Cancel`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Windows.Forms.DragEventArgs&gt;</ph> are in screen coordinates, not client coordinates.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A&gt;</ph> 속성의는 <ph id="ph3">&lt;xref:System.Windows.Forms.DragEventArgs&gt;</ph> 에 화면 좌표를 클라이언트 좌표로 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The following line of Visual C# code converts the properties to a client <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph>.</source>
          <target state="translated">Visual C# 코드의 다음 줄을 클라이언트로 속성 변환 <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The following code example demonstrates a drag-and-drop operation between two <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> controls.</source>
          <target state="translated">다음 코드 예제에서는 두 끌어서 놓기 작업을 보여 줍니다. <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The example calls the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method when the drag action starts.</source>
          <target state="translated">예제에서는 호출은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 끌기 작업이 시작 될 때 메서드.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The drag action starts if the mouse has moved more than <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType&gt;</ph> from the mouse location during the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event.</source>
          <target state="translated">마우스를 이동 하는 경우 끌기 작업이 시작 이상 <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType&gt;</ph> 하는 동안 마우스 위치에서의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox.IndexFromPoint%2A&gt;</ph> method is used to determine the index of the item to drag during the <ph id="ph2">`MouseDown`</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.ListBox.IndexFromPoint%2A&gt;</ph> 메서드 결정 하는 동안 끌어 항목의 인덱스를 사용 하는 <ph id="ph2">`MouseDown`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The example also demonstrates using custom cursors for the drag-and-drop operation.</source>
          <target state="translated">또한이 예제에서는 끌어서 놓기 작업에 대 한 사용자 지정 커서를 사용 하 여 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The example requires that two cursor files, <ph id="ph1">`3dwarro.cur`</ph> and <ph id="ph2">`3dwno.cur`</ph>, exist in the application directory, for the custom drag and no-drop cursors, respectively.</source>
          <target state="translated">이 예제를 실행 하려면 커서 파일 <ph id="ph1">`3dwarro.cur`</ph> 및 <ph id="ph2">`3dwno.cur`</ph>, 사용자 지정 끌어서에 대 한 응용 프로그램 디렉터리에 있으면 놓기-커서, 각각.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The custom cursors will be used if the <ph id="ph1">`UseCustomCursorsCheck`</ph><ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> is checked.</source>
          <target state="translated">사용자 지정 커서 사용 하는 경우는 <ph id="ph1">`UseCustomCursorsCheck`</ph> <ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> 을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The custom cursors are set in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event handler.</source>
          <target state="translated">에 설정 된 사용자 지정 커서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The keyboard state is evaluated in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event handler for the right <ph id="ph2">`ListBox`</ph>, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</source>
          <target state="translated">키보드 상태에서 평가 됩니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 오른쪽에 대 한 이벤트 처리기 <ph id="ph2">`ListBox`</ph>항목 끌기 작업을 결정 하는, SHIFT, CTRL 및 ALT, CTRL + ALT 키의 상태를 기반 합니다.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The location in the <ph id="ph1">`ListBox`</ph> where the drop would occur is also determined during the <ph id="ph2">`DragOver`</ph> event.</source>
          <target state="translated">위치는 <ph id="ph1">`ListBox`</ph> 삭제가 발생 중도 결정 됩니다는 <ph id="ph2">`DragOver`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>If the data to drop is not a <ph id="ph1">`String`</ph>, then the <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType&gt;</ph> is set to <ph id="ph3">`None`</ph> in <ph id="ph4">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph>.</source>
          <target state="translated">삭제할 데이터가 아닌 경우는 <ph id="ph1">`String`</ph>, 하면 <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType&gt;</ph> 로 설정 된 <ph id="ph3">`None`</ph> 에서 <ph id="ph4">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>Finally, the status of the drop is displayed in the <ph id="ph1">`DropLocationLabel`</ph><ph id="ph2">&lt;xref:System.Windows.Forms.Label&gt;</ph>.</source>
          <target state="translated">드롭다운 상태에 표시 되는 마지막으로,는 <ph id="ph1">`DropLocationLabel`</ph> <ph id="ph2">&lt;xref:System.Windows.Forms.Label&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>The data to drop for the right <ph id="ph1">`ListBox`</ph> is determined in the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> event handler and the <ph id="ph3">`String`</ph> value is added at the appropriate place in the <ph id="ph4">`ListBox`</ph>.</source>
          <target state="translated">데이터를 오른쪽에 대 한 drop <ph id="ph1">`ListBox`</ph> 에 따라 결정 됩니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> 이벤트 처리기 및 <ph id="ph3">`String`</ph> 적절 한 위치에서 값이 추가 <ph id="ph4">`ListBox`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event handler.</source>
          <target state="translated">끌기 작업, 폼의 경계를 벗어나면 경우에서 끌어서 놓기 작업이 취소 되 고 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>This code excerpt demonstrates using the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> event.</source>
          <target state="translated">이 코드 발췌 한 구문을 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragEnter">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method for the complete code example.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 전체 코드 예제에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>Occurs when an object is dragged out of the control's bounds.</source>
          <target state="translated">컨트롤의 범위 밖으로 개체를 끌 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised when the user drags the cursor out of the control or the user cancels the current drag-and-drop operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> 이벤트는 현재 끌어서 놓기 작업을 취소 하는 사용자 또는 사용자가 컨트롤에서 커서를 끌 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>The following describes how and when events related to drag-and-drop operations are raised.</source>
          <target state="translated">다음에서는 끌어서 놓기 작업이 발생하는 방식 및 시기에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method determines the control under the current cursor location.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 메서드는 현재 커서 위치에서 컨트롤을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>It then checks to see if the control is a valid drop target.</source>
          <target state="translated">그런 다음 컨트롤은 유효한 놓기 대상 인지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>If the control is a valid drop target, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the drag-and-drop effect specified.</source>
          <target state="translated">컨트롤이 유효한 놓기 대상일 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 지정 된 끌어서 놓기 효과 함께 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>For a list of drag-and-drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
          <target state="translated">끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> 열거형을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</source>
          <target state="translated">마우스 커서 위치, 키보드 상태 및 마우스 단추 상태의 변경 내용을 추적합니다.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>If the user moves out of a window, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
          <target state="translated">사용자가 창의 외부로 이동하면 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> 이벤트가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>If the mouse enters another control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> for that control is raised.</source>
          <target state="translated">마우스를 다른 컨트롤로 가져가면 해당 컨트롤에 대한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph>가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>If the mouse moves but stays within the same control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised.</source>
          <target state="translated">마우스를 동일한 컨트롤 내에서 이동하면 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 이벤트가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>If there is a change in the keyboard or mouse button state, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> property of the event's <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>.</source>
          <target state="translated">키보드 또는 마우스 단추 상태가 변경 될 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> 이벤트가 발생 하 고 데이터를 끌기를 계속할지 여부를 결정 하거나의 값을 기준으로 작업을 취소 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> 이벤트의 속성 <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Continue`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised to continue the operation and the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the new effect so appropriate visual feedback can be set.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Continue`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 이벤트 작업을 계속 하려면는 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 적절 한 시각적 피드백이 설정 될 수 있도록 새로운 효과 함께 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>For a list of valid drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
          <target state="translated">유효한 끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> 열거형을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 쌍을 이루고 있어서 마우스가 놓기 대상을 통과할 사용자에 게 마우스 위치에 대 한 최신 피드백이 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Drop`</ph>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Drop`</ph>, 놓기 효과 값이 원본에 반환, 되므로 소스 응용 프로그램이 소스 데이터에 대해 적절 한 작업을 수행할 수 예를 들어 데이터 잘라내기 작업이 이동 인 경우.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Cancel`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Cancel`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>The following code example demonstrates a drag-and-drop operation between two <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> controls.</source>
          <target state="translated">다음 코드 예제에서는 두 끌어서 놓기 작업을 보여 줍니다. <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>The example calls the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method when the drag action starts.</source>
          <target state="translated">예제에서는 호출은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 끌기 작업이 시작 될 때 메서드.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>The drag action starts if the mouse has moved more than <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType&gt;</ph> from the mouse location during the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event.</source>
          <target state="translated">마우스를 이동 하는 경우 끌기 작업이 시작 이상 <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType&gt;</ph> 하는 동안 마우스 위치에서의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox.IndexFromPoint%2A&gt;</ph> method is used to determine the index of the item to drag during the <ph id="ph2">`MouseDown`</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.ListBox.IndexFromPoint%2A&gt;</ph> 메서드 결정 하는 동안 끌어 항목의 인덱스를 사용 하는 <ph id="ph2">`MouseDown`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>The example also demonstrates using custom cursors for the drag-and-drop operation.</source>
          <target state="translated">또한이 예제에서는 끌어서 놓기 작업에 대 한 사용자 지정 커서를 사용 하 여 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>The example requires that two cursor files, <ph id="ph1">`3dwarro.cur`</ph> and <ph id="ph2">`3dwno.cur`</ph>, exist in the application directory, for the custom drag and no-drop cursors, respectively.</source>
          <target state="translated">이 예제를 실행 하려면 커서 파일 <ph id="ph1">`3dwarro.cur`</ph> 및 <ph id="ph2">`3dwno.cur`</ph>, 사용자 지정 끌어서에 대 한 응용 프로그램 디렉터리에 있으면 놓기-커서, 각각.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>The custom cursors will be used if the <ph id="ph1">`UseCustomCursorsCheck`</ph><ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> is checked.</source>
          <target state="translated">사용자 지정 커서 사용 하는 경우는 <ph id="ph1">`UseCustomCursorsCheck`</ph> <ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> 을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>The custom cursors are set in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event handler.</source>
          <target state="translated">에 설정 된 사용자 지정 커서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>The keyboard state is evaluated in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event handler for the right <ph id="ph2">`ListBox`</ph>, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</source>
          <target state="translated">키보드 상태에서 평가 됩니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 오른쪽에 대 한 이벤트 처리기 <ph id="ph2">`ListBox`</ph>항목 끌기 작업을 결정 하는, SHIFT, CTRL 및 ALT, CTRL + ALT 키의 상태를 기반 합니다.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>The location in the <ph id="ph1">`ListBox`</ph> where the drop would occur is also determined during the <ph id="ph2">`DragOver`</ph> event.</source>
          <target state="translated">위치는 <ph id="ph1">`ListBox`</ph> 삭제가 발생 중도 결정 됩니다는 <ph id="ph2">`DragOver`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>If the data to drop is not a <ph id="ph1">`String`</ph>, then the <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType&gt;</ph> is set to <ph id="ph3">`None`</ph> in <ph id="ph4">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph>.</source>
          <target state="translated">삭제할 데이터가 아닌 경우는 <ph id="ph1">`String`</ph>, 하면 <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType&gt;</ph> 로 설정 된 <ph id="ph3">`None`</ph> 에서 <ph id="ph4">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>Finally, the status of the drop is displayed in the <ph id="ph1">`DropLocationLabel`</ph><ph id="ph2">&lt;xref:System.Windows.Forms.Label&gt;</ph>.</source>
          <target state="translated">드롭다운 상태에 표시 되는 마지막으로,는 <ph id="ph1">`DropLocationLabel`</ph> <ph id="ph2">&lt;xref:System.Windows.Forms.Label&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>The data to drop for the right <ph id="ph1">`ListBox`</ph> is determined in the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> event handler and the <ph id="ph3">`String`</ph> value is added at the appropriate place in the <ph id="ph4">`ListBox`</ph>.</source>
          <target state="translated">데이터를 오른쪽에 대 한 drop <ph id="ph1">`ListBox`</ph> 에 따라 결정 됩니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> 이벤트 처리기 및 <ph id="ph3">`String`</ph> 적절 한 위치에서 값이 추가 <ph id="ph4">`ListBox`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event handler.</source>
          <target state="translated">끌기 작업, 폼의 경계를 벗어나면 경우에서 끌어서 놓기 작업이 취소 되 고 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>This code excerpt demonstrates using the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event.</source>
          <target state="translated">이 코드 발췌 한 구문을 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragLeave">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method for the complete code example.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 전체 코드 예제에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.DragOver">
          <source>Occurs when an object is dragged over the control's bounds.</source>
          <target state="translated">개체를 컨트롤의 범위 위로 끌 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised when the mouse cursor moves within the bounds of the control during a drag-and-drop operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 이벤트는 끌어서 놓기 작업 동안 컨트롤의 범위 내에서 마우스 커서를 이동 하면 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The following describes how and when events related to drag-and-drop operations are raised.</source>
          <target state="translated">다음에서는 끌어서 놓기 작업이 발생하는 방식 및 시기에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method determines the control under the current cursor location.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 메서드는 현재 커서 위치에서 컨트롤을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>It then checks to see if the control is a valid drop target.</source>
          <target state="translated">그런 다음 컨트롤은 유효한 놓기 대상 인지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>If the control is a valid drop target, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the drag-and-drop effect specified.</source>
          <target state="translated">컨트롤이 유효한 놓기 대상일 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 지정 된 끌어서 놓기 효과 함께 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>For a list of drag-and-drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
          <target state="translated">끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> 열거형을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</source>
          <target state="translated">마우스 커서 위치, 키보드 상태 및 마우스 단추 상태의 변경 내용을 추적합니다.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>If the user moves out of a window, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
          <target state="translated">사용자가 창의 외부로 이동하면 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> 이벤트가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>If the mouse enters another control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> for that control is raised.</source>
          <target state="translated">마우스를 다른 컨트롤로 가져가면 해당 컨트롤에 대한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph>가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>If the mouse moves but stays within the same control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised.</source>
          <target state="translated">마우스를 동일한 컨트롤 내에서 이동하면 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 이벤트가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>If there is a change in the keyboard or mouse button state, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> property of the event's <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>.</source>
          <target state="translated">키보드 또는 마우스 단추 상태가 변경 될 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> 이벤트가 발생 하 고 데이터를 끌기를 계속할지 여부를 결정 하거나의 값을 기준으로 작업을 취소 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> 이벤트의 속성 <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> value is <ph id="ph2">`Continue`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised to continue the operation and the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the new effect so appropriate visual feedback can be set.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 값은 <ph id="ph2">`Continue`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 이벤트 작업을 계속 하려면는 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 적절 한 시각적 피드백이 설정 될 수 있도록 새로운 효과 함께 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>For a list of valid drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
          <target state="translated">유효한 끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> 열거형을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 쌍을 이루고 있어서 마우스가 놓기 대상을 통과할 사용자에 게 마우스 위치에 대 한 최신 피드백이 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Drop`</ph>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Drop`</ph>, 놓기 효과 값이 원본에 반환, 되므로 소스 응용 프로그램이 소스 데이터에 대해 적절 한 작업을 수행할 수 예를 들어 데이터 잘라내기 작업이 이동 인 경우.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Cancel`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Cancel`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Windows.Forms.DragEventArgs&gt;</ph> are in screen coordinates, not client coordinates.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A&gt;</ph> 속성의는 <ph id="ph3">&lt;xref:System.Windows.Forms.DragEventArgs&gt;</ph> 에 화면 좌표를 클라이언트 좌표로 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The following line of C# code converts the properties to a client <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph>:</source>
          <target state="translated">C# 코드의 다음 줄을 클라이언트로 속성 변환 <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));</source>
          <target state="translated">Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The following code example demonstrates a drag-and-drop operation between two <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> controls.</source>
          <target state="translated">다음 코드 예제에서는 두 끌어서 놓기 작업을 보여 줍니다. <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The example calls the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method when the drag action starts.</source>
          <target state="translated">예제에서는 호출은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 끌기 작업이 시작 될 때 메서드.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The drag action starts if the mouse has moved more than <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType&gt;</ph> from the mouse location during the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event.</source>
          <target state="translated">마우스를 이동 하는 경우 끌기 작업이 시작 이상 <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType&gt;</ph> 하는 동안 마우스 위치에서의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox.IndexFromPoint%2A&gt;</ph> method is used to determine the index of the item to drag during the <ph id="ph2">`MouseDown`</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.ListBox.IndexFromPoint%2A&gt;</ph> 메서드 결정 하는 동안 끌어 항목의 인덱스를 사용 하는 <ph id="ph2">`MouseDown`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The example also demonstrates using custom cursors for the drag-and-drop operation.</source>
          <target state="translated">또한이 예제에서는 끌어서 놓기 작업에 대 한 사용자 지정 커서를 사용 하 여 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The example requires that two cursor files, <ph id="ph1">`3dwarro.cur`</ph> and <ph id="ph2">`3dwno.cur`</ph>, exist in the application directory, for the custom drag and no-drop cursors, respectively.</source>
          <target state="translated">이 예제를 실행 하려면 커서 파일 <ph id="ph1">`3dwarro.cur`</ph> 및 <ph id="ph2">`3dwno.cur`</ph>, 사용자 지정 끌어서에 대 한 응용 프로그램 디렉터리에 있으면 놓기-커서, 각각.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The custom cursors will be used if the <ph id="ph1">`UseCustomCursorsCheck`</ph><ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> is checked.</source>
          <target state="translated">사용자 지정 커서 사용 하는 경우는 <ph id="ph1">`UseCustomCursorsCheck`</ph> <ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> 을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The custom cursors are set in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event handler.</source>
          <target state="translated">에 설정 된 사용자 지정 커서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The keyboard state is evaluated in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event handler for the right <ph id="ph2">`ListBox`</ph>, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</source>
          <target state="translated">키보드 상태에서 평가 됩니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 오른쪽에 대 한 이벤트 처리기 <ph id="ph2">`ListBox`</ph>항목 끌기 작업을 결정 하는, SHIFT, CTRL 및 ALT, CTRL + ALT 키의 상태를 기반 합니다.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The location in the <ph id="ph1">`ListBox`</ph> where the drop would occur is also determined during the <ph id="ph2">`DragOver`</ph> event.</source>
          <target state="translated">위치는 <ph id="ph1">`ListBox`</ph> 삭제가 발생 중도 결정 됩니다는 <ph id="ph2">`DragOver`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>If the data to drop is not a <ph id="ph1">`String`</ph>, then the <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType&gt;</ph> is set to <ph id="ph3">`None`</ph> in <ph id="ph4">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph>.</source>
          <target state="translated">삭제할 데이터가 아닌 경우는 <ph id="ph1">`String`</ph>, 하면 <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType&gt;</ph> 로 설정 된 <ph id="ph3">`None`</ph> 에서 <ph id="ph4">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>Finally, the status of the drop is displayed in the <ph id="ph1">`DropLocationLabel`</ph><ph id="ph2">&lt;xref:System.Windows.Forms.Label&gt;</ph>.</source>
          <target state="translated">드롭다운 상태에 표시 되는 마지막으로,는 <ph id="ph1">`DropLocationLabel`</ph> <ph id="ph2">&lt;xref:System.Windows.Forms.Label&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>The data to drop for the right <ph id="ph1">`ListBox`</ph> is determined in the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> event handler and the <ph id="ph3">`String`</ph> value is added at the appropriate place in the <ph id="ph4">`ListBox`</ph>.</source>
          <target state="translated">데이터를 오른쪽에 대 한 drop <ph id="ph1">`ListBox`</ph> 에 따라 결정 됩니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> 이벤트 처리기 및 <ph id="ph3">`String`</ph> 적절 한 위치에서 값이 추가 <ph id="ph4">`ListBox`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event handler.</source>
          <target state="translated">끌기 작업, 폼의 경계를 벗어나면 경우에서 끌어서 놓기 작업이 취소 되 고 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>This code excerpt demonstrates using the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event.</source>
          <target state="translated">이 코드 발췌 한 구문을 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.DragOver">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method for the complete code example.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 전체 코드 예제에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
          <source>The bitmap to be drawn to.</source>
          <target state="translated">그릴 비트맵입니다.</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
          <source>The bounds within which the control is rendered.</source>
          <target state="translated">컨트롤이 렌더링되는 범위입니다.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
          <source>Supports rendering to the specified bitmap.</source>
          <target state="translated">지정한 비트맵에서의 렌더링을 지원합니다.</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DrawToBitmap%2A&gt;</ph> method is not supported for ActiveX controls.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DrawToBitmap%2A&gt;</ph> ActiveX 컨트롤에 대 한 메서드가 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
          <source>You can override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPrint%2A&gt;</ph> event and provide custom printing logic if required.</source>
          <target state="translated">재정의할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPrint%2A&gt;</ph> 이벤트 하 고 필요한 경우 사용자 지정 인쇄 논리를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DrawToBitmap%2A&gt;</ph> method has the following limitations:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DrawToBitmap%2A&gt;</ph> 메서드에 다음과 같은 제한이 있습니다.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
          <source>An <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> might be thrown for large bitmaps.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> 큰 비트맵에 대해 throw 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
          <source>The maximum allowable size varies by machine.</source>
          <target state="translated">허용 되는 최대 크기는 컴퓨터에 따라 다릅니다.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DrawToBitmap%2A&gt;</ph> does not support the <ph id="ph2">`Ink`</ph> controls for the Windows XP Tablet PC Edition 2005 operating system.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DrawToBitmap%2A&gt;</ph> 지원 하지 않습니다는 <ph id="ph2">`Ink`</ph> Windows XP Tablet PC Edition 2005 운영 체제에 대 한 제어 합니다.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DrawToBitmap%2A&gt;</ph> does not draw a child <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> if the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> is set to <ph id="ph5">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DrawToBitmap%2A&gt;</ph> 자식 그리지 않습니다 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 경우는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> 의 속성은 <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 로 설정 된 <ph id="ph5">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
          <source>Controls inside containers are rendered in reverse order.</source>
          <target state="translated">컨테이너 내에 있는 컨트롤 역순으로 렌더링 됩니다.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DrawToBitmap%2A&gt;</ph> is not fully functional for the <ph id="ph2">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph>; only the border of a bitmap is drawn.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DrawToBitmap%2A&gt;</ph> 에 대 한 완전히 작동 하지 않습니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph>에게만 비트맵의 테두리를 그립니다.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Enabled">
          <source>Gets or sets a value indicating whether the control can respond to user interaction.</source>
          <target state="translated">컨트롤이 사용자 상호 작용에 응답할 수 있는지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Enabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control can respond to user interaction; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 사용자 상호 작용에 응답할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Enabled">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Enabled">
          <source>With the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> property, you can enable or disable controls at run time.</source>
          <target state="translated">와 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> 속성을 런타임에 컨트롤을 사용 하지 않도록 설정 하거나 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Enabled">
          <source>For example, you can disable controls that do not apply to the current state of the application.</source>
          <target state="translated">예를 들어 응용 프로그램의 현재 상태에 적용 되지 않는 컨트롤을 비활성화할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Enabled">
          <source>You can also disable a control to restrict its use.</source>
          <target state="translated">또한 해당 사용을 제한 하는 컨트롤을 해제할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Enabled">
          <source>For example, a button can be disabled to prevent the user from clicking it.</source>
          <target state="translated">예를 들어 사용자가 클릭 하지 않도록 하려면 단추를 해제할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Enabled">
          <source>If a control is disabled, it cannot be selected.</source>
          <target state="translated">컨트롤이 비활성화 된 경우에 선택할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Enabled">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> property to <ph id="ph2">`false`</ph> does not disable the application's control box or prevent the application window from receiving the focus.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> 속성을 <ph id="ph2">`false`</ph> 응용 프로그램의 컨트롤 상자를 사용 하지 않도록 설정 하지 않거나 응용 프로그램 창에서 포커스를 받을 방지 합니다.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Enabled">
          <source>When a container control has its enabled property set to <ph id="ph1">`false`</ph>, all its contained controls are disabled, as well.</source>
          <target state="translated">컨테이너 컨트롤의 enabled 속성을 설정 하는 경우 <ph id="ph1">`false`</ph>, 포함 된 모든 컨트롤도 비활성화 됩니다.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Enabled">
          <source>For example, if the user clicks on any of the controls contained in a disabled <ph id="ph1">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> control, no events are raised.</source>
          <target state="translated">예를 들어 사용자가 비활성화 된에 포함 된 컨트롤은 클릭할 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> 컨트롤은 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Enabled">
          <source>When a scrollable control is disabled, the scroll bars are also disabled.</source>
          <target state="translated">스크롤할 수 있는 컨트롤을 사용 하지 않도록 설정 하는 경우 스크롤 막대가 조건도 비활성화 됩니다.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Enabled">
          <source>For example, a disabled multiline textbox is unable to scroll to display all the lines of text.</source>
          <target state="translated">예를 들어 사용할 수 없는 여러 줄 textbox가 텍스트의 모든 줄을 표시 하려면 스크롤할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Enabled">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> and sets some of its common properties.</source>
          <target state="translated">다음 코드 예제에서는 한 <ph id="ph1">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> 공통 속성 중 일부를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Enabled">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> and sets its <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> within the group box.</source>
          <target state="translated">이 예에서는 만듭니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 설정 하 고 해당 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> 그룹 상자 내에서.</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Enabled">
          <source>Next, it sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property of the group box, and docks the group box to the top of the form.</source>
          <target state="translated">그런 다음 설정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 그룹 상자 및 폼의 위쪽에 도킹 된 그룹 상자 속성입니다.</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Enabled">
          <source>Lastly, it disables the group box by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> property to <ph id="ph2">`false`</ph>, which causes all controls contained within the group box to be disabled.</source>
          <target state="translated">마지막으로, 그룹 상자 설정 하 여 비활성화는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> 속성을 <ph id="ph2">`false`</ph>, 사용 하지 않도록 설정할 그룹 상자에 포함 된 모든 컨트롤에 이르게 됩니다.</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.EnabledChanged">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Enabled" /&gt;</ph> property value has changed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Enabled" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.EnabledChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.EnabledChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.EnabledChanged">
          <source>The following code example uses two <ph id="ph1">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> controls to demonstrate the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.EnabledChanged&gt;</ph> event.</source>
          <target state="translated">다음 코드 예제는 두 <ph id="ph1">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> 보여 주기 위해 컨트롤의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.EnabledChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.EnabledChanged">
          <source>Clicking one button changes the value of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> property of the other button to <ph id="ph2">`false`</ph> and displays a <ph id="ph3">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph>.</source>
          <target state="translated">값을 변경 하 한 단추를 클릭 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> 하는 다른 단추의 속성 <ph id="ph2">`false`</ph> 표시는 <ph id="ph3">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents a specific invoke asynchronous operation, returned when calling <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>를 호출할 때 반환되는 특정 호출 비동기 작업을 나타내는 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)">
          <source>Retrieves the return value of the asynchronous operation represented by the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> passed.</source>
          <target state="translated">전달된 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>가 나타내는 비동기 작업의 반환 값을 검색합니다.</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> generated by the asynchronous operation.</source>
          <target state="translated">비동기 작업을 통해 생성되는 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)">
          <source>If the asynchronous operation has not been completed, this function will block until the result is available.</source>
          <target state="translated">비동기 작업이 완료 되지 않은 경우이 함수는 결과가 나올 때까지 차단 됩니다.</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)">
          <source>In addition to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property, there are four methods on a control that are thread safe: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> if the handle for the control has already been created.</source>
          <target state="translated">외에 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> 속성에는 스레드로부터 안전 컨트롤에서 네 가지 메서드가 있습니다: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 컨트롤에 대 한 핸들에서 이미 만든 경우.</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> before the control's handle has been created on a background thread can cause illegal cross thread calls.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 컨트롤의 핸들이 백그라운드 스레드에서 생성 되기 전에 잘못 된 크로스 스레드 호출 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)">
          <source>For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</source>
          <target state="translated">다른 모든 메서드 호출에 대 한 사용할지 invoke 메서드 중 하나를 컨트롤의 스레드에 대 한 호출을 마샬링하 합니다.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> parameter value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 매개 변수 값이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> object was not created by a preceding call of the <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /&gt;</ph> method from the same control.</source>
          <target state="translated">이전에 동일한 컨트롤에서 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /&gt;</ph> 메서드를 호출하여 <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> 개체를 만들지 않은 경우</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.Enter">
          <source>Occurs when the control is entered.</source>
          <target state="translated">컨트롤이 입력되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Enter">
          <source>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> methods, or by setting the <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType&gt;</ph> property to the current form, focus events occur in the following order:</source>
          <target state="translated">호출 하 여 키보드 (TAB, SHIFT + TAB 등)를 사용 하 여 포커스를 변경 하면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> 메서드를 설정 하거나는 <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType&gt;</ph> 속성을 현재 폼으로 포커스 이벤트가 다음 순서 대로 발생:</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Enter">
          <source>When you change the focus by using the mouse or by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> method, focus events occur in the following order:</source>
          <target state="translated">마우스를 사용 하거나 호출 하 여 포커스를 변경 하면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> 메서드, 포커스 이벤트가 다음 순서 대로 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Enter">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> events are suppressed.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> 속성이 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> 이벤트는 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Enter">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> events are suppressed by the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> 이벤트에 의해 표시 되는 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Enter">
          <source>The equivalent events in the <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> class are the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Activated&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Form.Deactivate&gt;</ph> events.</source>
          <target state="translated">에 해당 하는 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 클래스는 <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Activated&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Form.Deactivate&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Enter">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> 이벤트는 계층적 및 적절 한 컨트롤에 도달할 때까지 부모 체인 위쪽 및 아래쪽 연계 됩니다.</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Enter">
          <source>For example, assume you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with two <ph id="ph2">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> controls, and each <ph id="ph3">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> control has one <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control.</source>
          <target state="translated">예를 들어 있다고 가정는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 두 개의 <ph id="ph2">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> 컨트롤 및 각 <ph id="ph3">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> 컨트롤에 하나 <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Enter">
          <source>When the caret is moved from one <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> to the other, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> event is raised for the <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph>, and the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> event is raised for the other <ph id="ph6">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> and <ph id="ph7">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">하나에서 캐럿을 이동할 때 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 다른는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> 에 대 한 이벤트는 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> 이벤트가 발생 하면 다른 <ph id="ph6">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> 및 <ph id="ph7">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Enter">
          <source>Do not attempt to set focus from within the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event handlers.</source>
          <target state="translated">내에서 포커스를 설정 하지 마십시오는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, 또는 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Enter">
          <source>Doing so can cause your application or the operating system to stop responding.</source>
          <target state="translated">이렇게 하면 응용 프로그램 또는 운영 체제 응답 하지 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Enter">
          <source>For more information, see the <ph id="ph1">`WM_KILLFOCUS`</ph> topic in the "Keyboard Input Reference" section and the "Message Deadlocks" section of the<bpt id="p1">[</bpt>About Messages and Message Queues<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx)</ept>topic.</source>
          <target state="translated">자세한 내용은 참조는 <ph id="ph1">`WM_KILLFOCUS`</ph> "키보드 입력 참조" 섹션 및의 "메시지 교착 상태" 섹션에 있는 항목은<bpt id="p1">[</bpt>에 대 한 메시지와 메시지 큐<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx)</ept>항목입니다.</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Enter">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Enter">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> event to change the foreground and background colors of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> under particular conditions.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> 의 전경색과 배경색 색을 변경 하는 이벤트는 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 특정 조건 하에서 합니다.</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.FindForm">
          <source>Retrieves the form that the control is on.</source>
          <target state="translated">컨트롤이 포함된 폼을 검색합니다.</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.FindForm">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Form" /&gt;</ph> that the control is on.</source>
          <target state="translated">컨트롤이 포함된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Form" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.FindForm">
          <source>The control's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph> property value might not be the same as the <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph> returned by <ph id="ph3">&lt;xref:System.Windows.Forms.Control.FindForm%2A&gt;</ph> method.</source>
          <target state="translated">컨트롤의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph> 속성 값 수와 같을 수 없습니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph> 반환한 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.FindForm%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.FindForm">
          <source>For example, if a <ph id="ph1">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> control is contained within a <ph id="ph2">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> control, and the <ph id="ph3">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> is on a <ph id="ph4">&lt;xref:System.Windows.Forms.Form&gt;</ph>, the <ph id="ph5">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> control's <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph> is the <ph id="ph7">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> and the <ph id="ph8">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> control's <ph id="ph9">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph> is the <ph id="ph10">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
          <target state="translated">예를 들어 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> 컨트롤 내에 포함 된 한 <ph id="ph2">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> 컨트롤 및 <ph id="ph3">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> 에 <ph id="ph4">&lt;xref:System.Windows.Forms.Form&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> 컨트롤의 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph> 는 <ph id="ph7">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> 및 <ph id="ph8">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> 컨트롤의 <ph id="ph9">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph>는 <ph id="ph10">&lt;xref:System.Windows.Forms.Form&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.FindForm">
          <source>The following code example finds the form that contains the specified button.</source>
          <target state="translated">다음 코드 예제에서는 지정 된 단추를 포함 하는 폼을 찾습니다.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.FindForm">
          <source>for all windows to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.FindForm">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Focus">
          <source>Sets input focus to the control.</source>
          <target state="translated">컨트롤에 대한 입력 포커스를 설정합니다.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Focus">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the input focus request was successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">입력 포커스 요청이 성공하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Focus">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> if the control successfully received input focus.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> 메서드 반환 <ph id="ph2">`true`</ph> 컨트롤이 입력된 포커스를 성공적으로 수신 하는 경우.</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Focus">
          <source>The control can have the input focus while not displaying any visual cues of having the focus.</source>
          <target state="translated">컨트롤 표시 하지 않고도 모든 시각적 포커스의 입력된 포커스를 가질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Focus">
          <source>This behavior is primarily observed by the nonselectable controls listed below, or any controls derived from them.</source>
          <target state="translated">아래에 나열 된 선택할 수 없는 컨트롤에서이 동작은 주로 볼 또는 모든 컨트롤에서 파생 된 해당 합니다.</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Focus">
          <source>A control can be selected and receive input focus if all the following are true: the <ph id="ph1">`Selectable`</ph> value of <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> is set to <ph id="ph3">`true`</ph>, it is contained in another control, and all its parent controls are both visible and enabled.</source>
          <target state="translated">컨트롤을 선택 하 고 다음에 해당할 경우 입력된 포커스를 받을:는 <ph id="ph1">`Selectable`</ph> 의 값 <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> 로 설정 된 <ph id="ph3">`true`</ph>, 다른 컨트롤에 포함 된 및 모든 부모 컨트롤이 표시 되 고 사용 하도록 설정 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Focus">
          <source>The Windows Forms controls in the following list are not selectable.</source>
          <target state="translated">다음 목록에 Windows Forms 컨트롤은 선택할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Focus">
          <source>Controls derived from these controls are also not selectable.</source>
          <target state="translated">이러한 컨트롤에서 파생 된 컨트롤은도 선택할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Focus">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.LinkLabel&gt;</ph> (when there is no link present in the control)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.LinkLabel&gt;</ph> (이 경우 컨트롤에 링크가)</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Focus">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> is a low-level method intended primarily for custom control authors.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> 하위 수준 메서드는 사용자 지정 컨트롤 작성자 주로 위한 것입니다.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Focus">
          <source>Instead, application programmers should use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A&gt;</ph> property for child controls, or the <ph id="ph3">&lt;xref:System.Windows.Forms.Form.Activate%2A&gt;</ph> method for forms.</source>
          <target state="translated">대신, 응용 프로그램 프로그래머를 사용 해야는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> 메서드 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A&gt;</ph> 자식 컨트롤에 대 한 속성 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.Form.Activate%2A&gt;</ph> 폼에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Focus">
          <source>The following code example sets focus to the specified <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, if it can receive focus.</source>
          <target state="translated">다음 코드 예제에서는 지정 된 포커스를 설정 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>포커스를 받을 수 있으면, 합니다.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Focus">
          <source>for all windows to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Focus">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Focused">
          <source>Gets a value indicating whether the control has input focus.</source>
          <target state="translated">컨트롤에 입력 포커스가 있는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Focused">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control has focus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤에 포커스가 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Focused">
          <source>The following code example disables a <ph id="ph1">&lt;xref:System.Windows.Forms.MenuItem&gt;</ph> if a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> does not have focus.</source>
          <target state="translated">다음 코드 예제에서는 사용 하지 않도록 설정 된 <ph id="ph1">&lt;xref:System.Windows.Forms.MenuItem&gt;</ph> 경우는 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 포커스가 없는 합니다.</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Focused">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> named <ph id="ph3">`textBox1`</ph> and two <ph id="ph4">&lt;xref:System.Windows.Forms.MenuItem&gt;</ph> objects named <ph id="ph5">`menuItemEdit`</ph> and <ph id="ph6">`menuItemEditInsertCustomerInfo`</ph>.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 라는 <ph id="ph3">`textBox1`</ph> 와 두 개의 <ph id="ph4">&lt;xref:System.Windows.Forms.MenuItem&gt;</ph> 개체의 명명 된 <ph id="ph5">`menuItemEdit`</ph> 및 <ph id="ph6">`menuItemEditInsertCustomerInfo`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Focused">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Focused" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Focused" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Focused" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Focused" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Focused">
          <source>Otherwise, you must provide all the implementation.</source>
          <target state="translated">그렇지 않으면 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Font">
          <source>Gets or sets the font of the text displayed by the control.</source>
          <target state="translated">컨트롤에서 표시되는 텍스트의 글꼴을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Font">
          <source>The <ph id="ph1">&lt;see cref="T:System.Drawing.Font" /&gt;</ph> to apply to the text displayed by the control.</source>
          <target state="translated">컨트롤에 표시되는 텍스트에 적용되는 <ph id="ph1">&lt;see cref="T:System.Drawing.Font" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Font">
          <source>The default is the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.DefaultFont" /&gt;</ph> property.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.DefaultFont" /&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Font">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph> property is an ambient property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph> 속성이 앰비언트 속성입니다.</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Font">
          <source>An ambient property is a control property that, if not set, is retrieved from the parent control.</source>
          <target state="translated">그렇지 않은 경우, 즉 앰비언트 속성은 컨트롤 속성 설정, 부모 컨트롤에서 검색 됩니다.</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Font">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> will have the same <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> as its parent <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> by default.</source>
          <target state="translated">예를 들어 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 같은 가질 수 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> 부모로 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Font">
          <source>For more information about ambient properties, see the <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> class overview.</source>
          <target state="translated">앰비언트 속성에 대 한 자세한 내용은 참조는 <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph> 클래스 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스 개요입니다.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Font">
          <source>Because the <ph id="ph1">&lt;xref:System.Drawing.Font&gt;</ph> is immutable (meaning that you cannot adjust any of its properties), you can only assign the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph> property a new <ph id="ph3">&lt;xref:System.Drawing.Font&gt;</ph>.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Drawing.Font&gt;</ph> 는 변경할 수 없습니다 (조정할 수 없는 속성을 의미)를 할당할 수 있습니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph> 는 새 <ph id="ph3">&lt;xref:System.Drawing.Font&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Font">
          <source>However, you can base the new font on the existing font.</source>
          <target state="translated">그러나 기존 글꼴에 새 글꼴을 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Font">
          <source>[Visual Basic, C#]</source>
          <target state="translated">[Visual Basic, C#]</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Font">
          <source>The following is an example of how to adjust the existing font to make it bold:</source>
          <target state="translated">다음은 기존 글꼴을 굵게를 조정 하는 방법의 예입니다.</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Font">
          <source>The following code example displays a <ph id="ph1">&lt;xref:System.Windows.Forms.FontDialog&gt;</ph> to the user and changes the <ph id="ph2">&lt;xref:System.Drawing.Font&gt;</ph> of a <ph id="ph3">&lt;xref:System.Windows.Forms.DateTimePicker&gt;</ph> control.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.Windows.Forms.FontDialog&gt;</ph> 사용자 및 변경 내용에는 <ph id="ph2">&lt;xref:System.Drawing.Font&gt;</ph> 의 <ph id="ph3">&lt;xref:System.Windows.Forms.DateTimePicker&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Font">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> and a <ph id="ph3">&lt;xref:System.Windows.Forms.DateTimePicker&gt;</ph> on it.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.DateTimePicker&gt;</ph> 에 있습니다.</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Font">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Font" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Font" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Font" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Font" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Font">
          <source>Otherwise, you must provide all the implementation.</source>
          <target state="translated">그렇지 않으면 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Font">
          <source>You are not required to override both the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.Font" /&gt;</ph> property; you can override only one if needed.</source>
          <target state="translated">모두 재정의할 필요 하지는 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 의 접근자는 <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.Font" /&gt;</ph> 속성 필요한 경우 하나만 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.FontChanged">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Font" /&gt;</ph> property value changes.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Font" /&gt;</ph> 속성 값이 변경될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.FontChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph> property is changed by either a programmatic modification or through interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Font%2A&gt;</ph> 속성이 상호 작용을 통해 또는 프로그래밍 방식으로 수정으로 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.FontChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.FontChanged">
          <source>The following code example demonstrates the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.FontChanged&gt;</ph> event.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.FontChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.FontHeight">
          <source>Gets or sets the height of the font of the control.</source>
          <target state="translated">컨트롤의 글꼴 높이를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.FontHeight">
          <source>The height of the <ph id="ph1">&lt;see cref="T:System.Drawing.Font" /&gt;</ph> of the control in pixels.</source>
          <target state="translated">컨트롤의 <ph id="ph1">&lt;see cref="T:System.Drawing.Font" /&gt;</ph> 높이(픽셀)입니다.</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.FontHeight">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.FontHeight%2A&gt;</ph> property should not be set to any value other than the control's <ph id="ph2">&lt;xref:System.Drawing.Font.Height%2A?displayProperty=nameWithType&gt;</ph> value, or -1.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.FontHeight%2A&gt;</ph> 속성은 컨트롤의 이외의 다른 값으로 설정 하지 <ph id="ph2">&lt;xref:System.Drawing.Font.Height%2A?displayProperty=nameWithType&gt;</ph> 값 또는-1입니다.</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.FontHeight">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.Forms.Control.FontHeight%2A&gt;</ph> to -1 has the effect of clearing the cached height value, and the value is recalculated the next time the property is referenced.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.FontHeight%2A&gt;</ph> -1로는 캐시 된 높이 값을 지우면의 효과가 없으며 값 속성이 참조 되는 다음에 다시 계산 됩니다.</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.ForeColor">
          <source>Gets or sets the foreground color of the control.</source>
          <target state="translated">컨트롤의 전경색을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ForeColor">
          <source>The foreground <ph id="ph1">&lt;see cref="T:System.Drawing.Color" /&gt;</ph> of the control.</source>
          <target state="translated">컨트롤의 전경 <ph id="ph1">&lt;see cref="T:System.Drawing.Color" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ForeColor">
          <source>The default is the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.DefaultForeColor" /&gt;</ph> property.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.DefaultForeColor" /&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ForeColor">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> property is an ambient property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 속성이 앰비언트 속성입니다.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ForeColor">
          <source>An ambient property is a control property that, if not set, is retrieved from the parent control.</source>
          <target state="translated">그렇지 않은 경우, 즉 앰비언트 속성은 컨트롤 속성 설정, 부모 컨트롤에서 검색 됩니다.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ForeColor">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> will have the same <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> as its parent <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> by default.</source>
          <target state="translated">예를 들어 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 같은 가질 수 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> 부모로 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ForeColor">
          <source>For more information about ambient properties, see the <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> class overview.</source>
          <target state="translated">앰비언트 속성에 대 한 자세한 내용은 참조는 <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph> 클래스 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스 개요입니다.</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ForeColor">
          <source>The following code example sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of the controls to the default system colors.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 컨트롤을 기본 시스템 색상입니다.</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ForeColor">
          <source>The code recursively calls itself if the control has any child controls.</source>
          <target state="translated">코드 재귀적으로 컨트롤에 자식 컨트롤이 경우 자신을 호출 합니다.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ForeColor">
          <source>This code example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with at least one child control; however, a child container control, like a <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph>, with its own child control(s) would better demonstrate the recursion.</source>
          <target state="translated">이 코드 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 하나 이상의 자식 컨트롤과; 그러나 자식 컨테이너 컨트롤, like는 <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph>, 자체 자식 컨트롤은 보다 잘 보여 주는 재귀 합니다.</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ForeColor">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ForeColor" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.ForeColor" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ForeColor" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.ForeColor" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ForeColor">
          <source>Otherwise, you must provide all the implementation.</source>
          <target state="translated">그렇지 않으면 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ForeColor">
          <source>You are not required to override both the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.ForeColor" /&gt;</ph> property; you can override only one if needed.</source>
          <target state="translated">모두 재정의할 필요 하지는 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 의 접근자는 <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.ForeColor" /&gt;</ph> 속성 필요한 경우 하나만 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.ForeColorChanged">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ForeColor" /&gt;</ph> property value changes.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ForeColor" /&gt;</ph> 속성 값이 변경될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ForeColorChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> property is changed by either a programmatic modification or through interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 속성이 상호 작용을 통해 또는 프로그래밍 방식으로 수정으로 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ForeColorChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ForeColorChanged">
          <source>The following code example is an event handler that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트 처리기 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ForeColorChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph2">`Changed`</ph> that are raised when the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> value changes (<bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph2">`Changed`</ph> 있는 될 때 발생 하는 해당 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> 값이 변경 (<bpt id="p3">*</bpt> PropertyName<ept id="p3">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ForeColorChanged">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ForeColorChanged">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ForeColorChanged">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that contains a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 를 포함 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.FromChildHandle(System.IntPtr)">
          <source>The window handle (<ph id="ph1">&lt;see langword="HWND" /&gt;</ph>) to search for.</source>
          <target state="translated">검색할 창 핸들(<ph id="ph1">&lt;see langword="HWND" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.FromChildHandle(System.IntPtr)">
          <source>Retrieves the control that contains the specified handle.</source>
          <target state="translated">지정된 핸들이 포함된 컨트롤을 검색합니다.</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.FromChildHandle(System.IntPtr)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> that represents the control associated with the specified handle; returns <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no control with the specified handle is found.</source>
          <target state="translated">지정된 핸들과 연결된 컨트롤을 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다. 지정된 핸들이 있는 컨트롤이 없으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.FromChildHandle(System.IntPtr)">
          <source>This method searches up the window handle parent chain until it finds a handle that is associated with a control.</source>
          <target state="translated">이 메서드는 컨트롤과 연결 된 하는 핸들을 찾을 때까지 창 핸들 부모 체인을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.FromChildHandle(System.IntPtr)">
          <source>This method is more reliable than the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.FromHandle%2A&gt;</ph> method, because it correctly returns controls that own more than one handle.</source>
          <target state="translated">이 메서드는 보다 안정적는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.FromHandle%2A&gt;</ph> 메서드를 여러 개 핸들을 소유 하는 컨트롤을 제대로 반환 하기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.FromChildHandle(System.IntPtr)">
          <source>for all windows to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.FromChildHandle(System.IntPtr)">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.FromHandle(System.IntPtr)">
          <source>The window handle (<ph id="ph1">&lt;see langword="HWND" /&gt;</ph>) to search for.</source>
          <target state="translated">검색할 창 핸들(<ph id="ph1">&lt;see langword="HWND" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.FromHandle(System.IntPtr)">
          <source>Returns the control that is currently associated with the specified handle.</source>
          <target state="translated">지정된 핸들과 연결된 컨트롤을 반환합니다.</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.FromHandle(System.IntPtr)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> that represents the control associated with the specified handle; returns <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no control with the specified handle is found.</source>
          <target state="translated">지정된 핸들과 연결된 컨트롤을 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다. 지정된 핸들이 있는 컨트롤이 없으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.FromHandle(System.IntPtr)">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.FromChildHandle%2A&gt;</ph> method if you need to return controls that own more than one handle.</source>
          <target state="translated">사용 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.FromChildHandle%2A&gt;</ph> 메서드 둘 이상의 핸들을 소유 하는 컨트롤을 반환 해야 하는 경우.</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.FromHandle(System.IntPtr)">
          <source>for all windows to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.FromHandle(System.IntPtr)">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetAccessibilityObjectById(System.Int32)">
          <source>An <ph id="ph1">&lt;see langword="Int32" /&gt;</ph> that identifies the <ph id="ph2">&lt;see cref="T:System.Windows.Forms.AccessibleObject" /&gt;</ph> to retrieve.</source>
          <target state="translated">검색할 <ph id="ph1">&lt;see langword="Int32" /&gt;</ph>를 식별하는 <ph id="ph2">&lt;see cref="T:System.Windows.Forms.AccessibleObject" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetAccessibilityObjectById(System.Int32)">
          <source>Retrieves the specified <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleObject" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleObject" /&gt;</ph>를 검색합니다.</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetAccessibilityObjectById(System.Int32)">
          <source>The specified <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleObject" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleObject" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetAutoSizeMode">
          <source>Retrieves a value indicating how a control will behave when its <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.AutoSize" /&gt;</ph> property is enabled.</source>
          <target state="translated">해당 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.AutoSize" /&gt;</ph> 속성을 사용할 수 있을 때 컨트롤이 동작하는 방법을 나타내는 값을 검색합니다.</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetAutoSizeMode">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AutoSizeMode" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.AutoSizeMode" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Control">
          <source>Retrieves the child control at a specified location.</source>
          <target state="translated">지정한 위치에 있는 자식 컨트롤을 검색합니다.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph> that contains the coordinates where you want to look for a control.</source>
          <target state="translated">컨트롤을 찾을 좌표가 포함된 <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)">
          <source>Coordinates are expressed relative to the upper-left corner of the control's client area.</source>
          <target state="translated">좌표는 컨트롤 클라이언트 영역의 왼쪽 위 모퉁이를 기준으로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)">
          <source>Retrieves the child control that is located at the specified coordinates.</source>
          <target state="translated">지정된 좌표에 위치한 자식 컨트롤을 검색합니다.</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> that represents the control that is located at the specified point.</source>
          <target state="translated">지정된 지점에 위치한 컨트롤을 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)">
          <source>If there is no child control at the specified point, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GetChildAtPoint%2A&gt;</ph> method returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">지정된 된 지점에서 자식 컨트롤이 없는 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GetChildAtPoint%2A&gt;</ph> 메서드 반환 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)">
          <source>for all windows to call this method if the control returned is not a child of the control.</source>
          <target state="translated">모든 windows 컨트롤을 반환 하는 경우이 메서드를 호출 하는 데 아닌 경우 컨트롤의 자식</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph> that contains the coordinates where you want to look for a control.</source>
          <target state="translated">컨트롤을 찾을 좌표가 포함된 <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)">
          <source>Coordinates are expressed relative to the upper-left corner of the control's client area.</source>
          <target state="translated">좌표는 컨트롤 클라이언트 영역의 왼쪽 위 모퉁이를 기준으로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)">
          <source>One of the values of <ph id="ph1">&lt;see cref="T:System.Windows.Forms.GetChildAtPointSkip" /&gt;</ph>, determining whether to ignore child controls of a certain type.</source>
          <target state="translated">특정 형식의 자식 컨트롤을 무시할지를 결정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.GetChildAtPointSkip" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)">
          <source>Retrieves the child control that is located at the specified coordinates, specifying whether to ignore child controls of a certain type.</source>
          <target state="translated">지정한 좌표에 있는 자식 컨트롤을 검색하여 특정 형식의 자식 컨트롤을 무시할지를 지정합니다.</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)">
          <source>The child <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> at the specified coordinates.</source>
          <target state="translated">지정한 좌표의 자식 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetContainerControl">
          <source>Returns the next <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ContainerControl" /&gt;</ph> up the control's chain of parent controls.</source>
          <target state="translated">해당 컨트롤의 부모 컨트롤 체인까지 다음 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ContainerControl" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetContainerControl">
          <source>An <ph id="ph1">&lt;see cref="T:System.Windows.Forms.IContainerControl" /&gt;</ph>, that represents the parent of the <ph id="ph2">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.IContainerControl" /&gt;</ph>의 부모를 나타내는 <ph id="ph2">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetContainerControl">
          <source>for all windows to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetContainerControl">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> to start the search with.</source>
          <target state="translated">검색을 시작하는 데 사용할 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search forward in the tab order; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to search backward.</source>
          <target state="translated">탭 순서에서 앞으로 검색하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 뒤로 검색하면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)">
          <source>Retrieves the next control forward or back in the tab order of child controls.</source>
          <target state="translated">자식 컨트롤의 탭 순서에서 앞뒤에 있는 다음 컨트롤을 검색합니다.</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)">
          <source>The next <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> in the tab order.</source>
          <target state="translated">탭 순서에서 다음 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GetNextControl%2A&gt;</ph> method is dependent on tab order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.GetNextControl%2A&gt;</ph> 메서드 탭 순서에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)">
          <source>To iterate through all controls of a form, including nested controls, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> property.</source>
          <target state="translated">사용 하 여 중첩 된 컨트롤을 포함 하는 양식의 모든 컨트롤을 반복 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)">
          <source>To get or set the active control of a container control, use the <ph id="ph1">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A&gt;</ph> property.</source>
          <target state="translated">가져오거나 설정할 컨테이너 컨트롤의 활성 컨트롤을 사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)">
          <source>The custom-sized area for a control.</source>
          <target state="translated">컨트롤의 사용자 지정 크기 영역입니다.</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)">
          <source>Retrieves the size of a rectangular area into which a control can be fitted.</source>
          <target state="translated">컨트롤이 들어갈 수 있는 사각형 영역의 크기를 검색합니다.</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)">
          <source>An ordered pair of type <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> representing the width and height of a rectangle.</source>
          <target state="translated">사각형의 너비와 높이를 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> 형식의 정렬된 쌍입니다.</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)">
          <source>The behavior of <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GetPreferredSize%2A&gt;</ph> differs by control.</source>
          <target state="translated">동작은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GetPreferredSize%2A&gt;</ph> 컨트롤에 따라 다릅니다.</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.LayoutEngine%2A&gt;</ph> might be unable to assign the returned size to the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.LayoutEngine%2A&gt;</ph> 컨트롤에 반환 되는 크기를 할당할 수 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)">
          <source>You can return a size larger than the constraints indicated in the <ph id="ph1">`proposedSize`</ph> parameter, but <ph id="ph2">`proposedSize`</ph> should decrease as the constraint decreases.</source>
          <target state="translated">에 표시 된 제약 조건 보다 큰 크기를 반환할 수 있습니다는 <ph id="ph1">`proposedSize`</ph> 매개 변수를 있지만 <ph id="ph2">`proposedSize`</ph> 감소 하는 제약 조건으로 감소 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)">
          <source>For example, <ph id="ph1">`GetPreferredSize(new Size(100, 0))`</ph> should not be wider than <ph id="ph2">`GetPreferredSize(new Size(200, 0))`</ph>.</source>
          <target state="translated">예를 들어 <ph id="ph1">`GetPreferredSize(new Size(100, 0))`</ph> 보다 넓은 되어서는 안 <ph id="ph2">`GetPreferredSize(new Size(200, 0))`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)">
          <source>The exception is a <ph id="ph1">`proposedSize`</ph> of 0 or <ph id="ph2">`Size.Empty`</ph>, which are defined as unconstrained.</source>
          <target state="translated">예외는는 <ph id="ph1">`proposedSize`</ph> 0 또는 <ph id="ph2">`Size.Empty`</ph>, 제약 없이로 정의 됩니다.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph> that specifies the area for which to retrieve the display bounds.</source>
          <target state="translated">디스플레이 범위를 검색할 영역을 지정하는 <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
          <source>The height and width of the control's bounds.</source>
          <target state="translated">컨트롤 범위의 높이 및 너비입니다.</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
          <source>One of the values of <ph id="ph1">&lt;see cref="T:System.Windows.Forms.BoundsSpecified" /&gt;</ph> that specifies the bounds of the control to use when defining its size and position.</source>
          <target state="translated">크기 및 위치를 정의하는 데 사용할 컨트롤 범위를 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.BoundsSpecified" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
          <source>Retrieves the bounds within which the control is scaled.</source>
          <target state="translated">컨트롤의 배율이 조정되는 범위를 검색합니다.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph> representing the bounds within which the control is scaled.</source>
          <target state="translated">컨트롤의 크기가 조정되는 범위를 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
          <source>This is a helper method that is called by <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleControl%2A&gt;</ph> to retrieve the bounds within which the control is scaled.</source>
          <target state="translated">이 호출 하는 도우미 메서드입니다 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleControl%2A&gt;</ph> 를 컨트롤의 배율이 조정 되는 범위를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
          <source>You can override this method to reuse the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleControl%2A&gt;</ph> scaling logic, but you must supply your own bounds.</source>
          <target state="translated">다시 사용 하려면이 메서드를 재정의할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleControl%2A&gt;</ph> 범위를 직접 제공 해야 하지만 논리를 확장 합니다.</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
          <source>The default implementation returns scaled bounds that take into account the <ph id="ph1">`specified`</ph> bounds, whether the control is top level, whether the control is fixed width or auto size, and any adornments the control might have.</source>
          <target state="translated">계정에 사용 하는 크기 조정 된 범위를 반환 하는 기본 구현에서 <ph id="ph1">`specified`</ph> 범위, 컨트롤이 최상위 수준 인지 여부는 고정 되어 너비 또는 자동 크기 조정 및 컨트롤에 있을 수 있는 장식을 합니다.</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ControlStyles" /&gt;</ph> bit to return the value from.</source>
          <target state="translated">값을 반환할 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ControlStyles" /&gt;</ph> 비트입니다.</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)">
          <source>Retrieves the value of the specified control style bit for the control.</source>
          <target state="translated">컨트롤에 대해 지정된 컨트롤 스타일 비트의 값을 검색합니다.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified control style bit is set to <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 컨트롤 스타일 비트가 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정되어 있으면 <ph id="ph2">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)">
          <source>Control style bit flags are used to categorize supported behavior.</source>
          <target state="translated">컨트롤 스타일 비트 플래그는 지원 되는 동작을 분류 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)">
          <source>A control can enable a style by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph> method and passing in the appropriate <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> bit and the Boolean value to set the bit to.</source>
          <target state="translated">컨트롤을 호출 하 여 스타일을 사용 하도록 설정할 수는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph> 메서드와 적절 한 전달 <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> 비트 고 비트를 설정 하는 부울 값입니다.</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)">
          <source>To determine the value assigned to a specified <ph id="ph1">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> bit, use the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GetStyle%2A&gt;</ph> method and pass in the <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> member to evaluate.</source>
          <target state="translated">에 지정 된 할당 된 값을 확인 하려면 <ph id="ph1">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> 를 사용 하 여는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GetStyle%2A&gt;</ph> 메서드와 전달은 <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> 평가 하는 멤버입니다.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)">
          <source>The following code example returns the value of the double-buffering related style bits for a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 반환 이중 버퍼링 관련된 스타일의 값에 대 한 비트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)">
          <source>This example returns <ph id="ph1">`true`</ph> only if all the style bits are set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">이 예에서는 반환 <ph id="ph1">`true`</ph> 모든 스타일 비트가 설정 된 경우에 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetTopLevel">
          <source>Determines if the control is a top-level control.</source>
          <target state="translated">컨트롤이 최상위 컨트롤인지를 확인합니다.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.GetTopLevel">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control is a top-level control; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">해당 컨트롤이 최상위 컨트롤이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>Occurs during a drag operation.</source>
          <target state="translated">끌기 작업을 수행하는 동안 발생합니다.</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised when a drag-and-drop operation is started.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 는 끌어서 놓기 작업이 시작 될 때 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>With the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event, the source of a drag event can modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</source>
          <target state="translated">와 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트, 끌기 이벤트의 소스를 끌어서 놓기 작업 중 사용자의 시각적 피드백을 제공 하기 위해 마우스 포인터의 모양을 수정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>The following describes how and when events related to drag-and-drop operations are raised.</source>
          <target state="translated">다음에서는 끌어서 놓기 작업이 발생하는 방식 및 시기에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method determines the control under the current cursor location.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 메서드는 현재 커서 위치에서 컨트롤을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>It then checks to see if the control is a valid drop target.</source>
          <target state="translated">그런 다음 컨트롤은 유효한 놓기 대상 인지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>If the control is a valid drop target, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the drag-and-drop effect specified.</source>
          <target state="translated">컨트롤이 유효한 놓기 대상일 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 지정 된 끌어서 놓기 효과 함께 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>For a list of drag-and-drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
          <target state="translated">끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> 열거형을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</source>
          <target state="translated">마우스 커서 위치, 키보드 상태 및 마우스 단추 상태의 변경 내용을 추적합니다.</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>If the user moves out of a window, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
          <target state="translated">사용자가 창의 외부로 이동하면 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> 이벤트가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>If the mouse enters another control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> for that control is raised.</source>
          <target state="translated">마우스를 다른 컨트롤로 가져가면 해당 컨트롤에 대한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph>가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>If the mouse moves but stays within the same control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised.</source>
          <target state="translated">마우스를 동일한 컨트롤 내에서 이동하면 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 이벤트가 발생합니다.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>If there is a change in the keyboard or mouse button state, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> property of the event's <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>.</source>
          <target state="translated">키보드 또는 마우스 단추 상태가 변경 될 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> 이벤트가 발생 하 고 데이터를 끌기를 계속할지 여부를 결정 하거나의 값을 기준으로 작업을 취소 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> 이벤트의 속성 <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Continue`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised to continue the operation and the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the new effect so appropriate visual feedback can be set.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Continue`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 이벤트 작업을 계속 하려면는 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 적절 한 시각적 피드백이 설정 될 수 있도록 새로운 효과 함께 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>For a list of valid drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
          <target state="translated">유효한 끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> 열거형을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 쌍을 이루고 있어서 마우스가 놓기 대상을 통과할 사용자에 게 마우스 위치에 대 한 최신 피드백이 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Drop`</ph>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Drop`</ph>, 놓기 효과 값이 원본에 반환, 되므로 소스 응용 프로그램이 소스 데이터에 대해 적절 한 작업을 수행할 수 예를 들어 데이터 잘라내기 작업이 이동 인 경우.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Cancel`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Cancel`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>The following code example demonstrates a drag-and-drop operation between two <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> controls.</source>
          <target state="translated">다음 코드 예제에서는 두 끌어서 놓기 작업을 보여 줍니다. <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>The example calls the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method when the drag action starts.</source>
          <target state="translated">예제에서는 호출은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 끌기 작업이 시작 될 때 메서드.</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>The drag action starts if the mouse has moved more than <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType&gt;</ph> from the mouse location during the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event.</source>
          <target state="translated">마우스를 이동 하는 경우 끌기 작업이 시작 이상 <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType&gt;</ph> 하는 동안 마우스 위치에서의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox.IndexFromPoint%2A&gt;</ph> method is used to determine the index of the item to drag during the <ph id="ph2">`MouseDown`</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.ListBox.IndexFromPoint%2A&gt;</ph> 메서드 결정 하는 동안 끌어 항목의 인덱스를 사용 하는 <ph id="ph2">`MouseDown`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>The example also demonstrates using custom cursors for the drag-and-drop operation.</source>
          <target state="translated">또한이 예제에서는 끌어서 놓기 작업에 대 한 사용자 지정 커서를 사용 하 여 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>The example requires that two cursor files, <ph id="ph1">`3dwarro.cur`</ph> and <ph id="ph2">`3dwno.cur`</ph>, exist in the application directory, for the custom drag and no-drop cursors, respectively.</source>
          <target state="translated">이 예제를 실행 하려면 커서 파일 <ph id="ph1">`3dwarro.cur`</ph> 및 <ph id="ph2">`3dwno.cur`</ph>, 사용자 지정 끌어서에 대 한 응용 프로그램 디렉터리에 있으면 놓기-커서, 각각.</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>The custom cursors will be used if the <ph id="ph1">`UseCustomCursorsCheck`</ph><ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> is checked.</source>
          <target state="translated">사용자 지정 커서 사용 하는 경우는 <ph id="ph1">`UseCustomCursorsCheck`</ph> <ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> 을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>The custom cursors are set in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event handler.</source>
          <target state="translated">에 설정 된 사용자 지정 커서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>The keyboard state is evaluated in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event handler for the right <ph id="ph2">`ListBox`</ph>, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</source>
          <target state="translated">키보드 상태에서 평가 됩니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 오른쪽에 대 한 이벤트 처리기 <ph id="ph2">`ListBox`</ph>항목 끌기 작업을 결정 하는, SHIFT, CTRL 및 ALT, CTRL + ALT 키의 상태를 기반 합니다.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>The location in the <ph id="ph1">`ListBox`</ph> where the drop would occur is also determined during the <ph id="ph2">`DragOver`</ph> event.</source>
          <target state="translated">위치는 <ph id="ph1">`ListBox`</ph> 삭제가 발생 중도 결정 됩니다는 <ph id="ph2">`DragOver`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>If the data to drop is not a <ph id="ph1">`String`</ph>, then the <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType&gt;</ph> is set to <ph id="ph3">`None`</ph> in <ph id="ph4">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph>.</source>
          <target state="translated">삭제할 데이터가 아닌 경우는 <ph id="ph1">`String`</ph>, 하면 <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType&gt;</ph> 로 설정 된 <ph id="ph3">`None`</ph> 에서 <ph id="ph4">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>Finally, the status of the drop is displayed in the <ph id="ph1">`DropLocationLabel`</ph><ph id="ph2">&lt;xref:System.Windows.Forms.Label&gt;</ph>.</source>
          <target state="translated">드롭다운 상태에 표시 되는 마지막으로,는 <ph id="ph1">`DropLocationLabel`</ph> <ph id="ph2">&lt;xref:System.Windows.Forms.Label&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>The data to drop for the right <ph id="ph1">`ListBox`</ph> is determined in the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> event handler and the <ph id="ph3">`String`</ph> value is added at the appropriate place in the <ph id="ph4">`ListBox`</ph>.</source>
          <target state="translated">데이터를 오른쪽에 대 한 drop <ph id="ph1">`ListBox`</ph> 에 따라 결정 됩니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> 이벤트 처리기 및 <ph id="ph3">`String`</ph> 적절 한 위치에서 값이 추가 <ph id="ph4">`ListBox`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event handler.</source>
          <target state="translated">끌기 작업, 폼의 경계를 벗어나면 경우에서 끌어서 놓기 작업이 취소 되 고 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>This code excerpt demonstrates using the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event.</source>
          <target state="translated">이 코드 발췌 한 구문을 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GiveFeedback">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method for the complete code example.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 전체 코드 예제에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.GotFocus">
          <source>Occurs when the control receives focus.</source>
          <target state="translated">컨트롤이 포커스를 받으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GotFocus">
          <source>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> methods, or by setting the <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType&gt;</ph> property to the current form, focus events occur in the following order:</source>
          <target state="translated">호출 하 여 키보드 (TAB, SHIFT + TAB 등)를 사용 하 여 포커스를 변경 하면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> 메서드를 설정 하거나는 <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType&gt;</ph> 속성을 현재 폼으로 포커스 이벤트가 다음 순서 대로 발생:</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GotFocus">
          <source>When you change the focus by using the mouse or by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> method, focus events occur in the following order:</source>
          <target state="translated">마우스를 사용 하거나 호출 하 여 포커스를 변경 하면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> 메서드, 포커스 이벤트가 다음 순서 대로 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GotFocus">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> events are suppressed.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> 속성이 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> 이벤트는 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GotFocus">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages.</source>
          <target state="translated"><bpt id="p1">**</bpt>참고<ept id="p1">**</ept> 는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> 이벤트는 WM_KILLFOCUS 및 WM_SETFOCUS Windows 메시지에 연결 된 하위 수준 포커스 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GotFocus">
          <source>Typically, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> events are only used when updating <ph id="ph3">&lt;xref:System.Windows.Forms.UICues&gt;</ph> or when writing custom controls.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> 이벤트는 업데이트할 때에 사용 되 <ph id="ph3">&lt;xref:System.Windows.Forms.UICues&gt;</ph> 때나 사용자 지정 컨트롤을 작성 합니다.</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GotFocus">
          <source>Instead the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> events should be used for all controls except the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> class, which uses the <ph id="ph4">&lt;xref:System.Windows.Forms.Form.Activated&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Forms.Form.Deactivate&gt;</ph> events.</source>
          <target state="translated">대신는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> 제외한 모든 컨트롤에 사용할 이벤트는 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> 클래스를 사용 하는 <ph id="ph4">&lt;xref:System.Windows.Forms.Form.Activated&gt;</ph> 및 <ph id="ph5">&lt;xref:System.Windows.Forms.Form.Deactivate&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GotFocus">
          <source>For more information about the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> events, see the <bpt id="p1">[</bpt>WM_SETFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646283\(v=vs.85\).aspx)</ept>and<bpt id="p2">[</bpt>WM_KILLFOCUS<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> topics.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> 이벤트 참조는 <bpt id="p1">[</bpt>WM_SETFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646283\(v=vs.85\).aspx)</ept>및<bpt id="p2">[</bpt>WM_KILLFOCUS<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GotFocus">
          <source>Do not attempt to set focus from within the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event handlers.</source>
          <target state="translated">내에서 포커스를 설정 하지 마십시오는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, 또는 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GotFocus">
          <source>Doing so can cause your application or the operating system to stop responding.</source>
          <target state="translated">이렇게 하면 응용 프로그램 또는 운영 체제 응답 하지 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GotFocus">
          <source>For more information, see the <bpt id="p1">[</bpt>WM_KILLFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> topic.</source>
          <target state="translated">자세한 내용은 참조는 <bpt id="p1">[</bpt>WM_KILLFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GotFocus">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GotFocus">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GotFocus">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GotFocus">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GotFocus">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.GotFocus">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Handle">
          <source>Gets the window handle that the control is bound to.</source>
          <target state="translated">컨트롤이 바인딩되는 창 핸들을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Handle">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> that contains the window handle (<ph id="ph2">&lt;see langword="HWND" /&gt;</ph>) of the control.</source>
          <target state="translated">컨트롤의 창 핸들(<ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>)이 포함된 <ph id="ph2">&lt;see langword="HWND" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Handle">
          <source>The value of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> property is a Windows <ph id="ph2">`HWND`</ph>.</source>
          <target state="translated">값은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> 속성은 Windows <ph id="ph2">`HWND`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Handle">
          <source>If the handle has not yet been created, referencing this property will force the handle to be created.</source>
          <target state="translated">핸들 아직 만들지 않은 경우이 속성을 참조 고쳐집니다 핸들을을 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Handle">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.Windows.Forms.ControlPaint.DrawFocusRectangle%2A?displayProperty=nameWithType&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> property.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.Windows.Forms.ControlPaint.DrawFocusRectangle%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Handle">
          <source>To run the example paste the following code in a form.</source>
          <target state="translated">실행 하려면 예제에서는 양식에서 다음 코드를 붙여넣습니다.</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Handle">
          <source>Add two buttons named <ph id="ph1">`Button1`</ph> and <ph id="ph2">`Button2`</ph> to the form and ensure all events are connected to their event handlers.</source>
          <target state="translated">라는 두 개의 단추를 추가 <ph id="ph1">`Button1`</ph> 및 <ph id="ph2">`Button2`</ph> 폼에 해당 이벤트 처리기에 연결 된 모든 이벤트를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.HandleCreated">
          <source>Occurs when a handle is created for the control.</source>
          <target state="translated">컨트롤의 핸들을 만들면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleCreated">
          <source>A handle is created when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> is displayed for the first time.</source>
          <target state="translated">핸들이 생성 됩니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 처음으로 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleCreated">
          <source>For example, if a <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> is created that has <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> set to <ph id="ph3">`false`</ph>, the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.HandleCreated&gt;</ph> event will not be raised until <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> is set to <ph id="ph6">`true`</ph>.</source>
          <target state="translated">예를 들어 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 만들어집니다가 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> 로 설정 <ph id="ph3">`false`</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.HandleCreated&gt;</ph> 될 때까지 이벤트를 발생 하지 것입니다 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> 로 설정 된 <ph id="ph6">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleCreated">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleCreated">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleCreated">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleCreated">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleCreated">
          <source>To report on multiple events or on events that occur frequently, consider replacing <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> with <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or appending the message to a multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 여러 줄에 메시지를 추가 하거나 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleCreated">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleCreated">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleCreated&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleCreated&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.HandleDestroyed">
          <source>Occurs when the control's handle is in the process of being destroyed.</source>
          <target state="translated">컨트롤의 핸들이 소멸될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleDestroyed">
          <source>During the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleDestroyed&gt;</ph> event, the control is still a valid Windows control and the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> can be recreated by calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.RecreateHandle%2A&gt;</ph> method.</source>
          <target state="translated">중에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleDestroyed&gt;</ph> 컨트롤 이벤트는 여전히 유효한 Windows 컨트롤 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> 호출 하 여 다시 만들 수 있습니다는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.RecreateHandle%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleDestroyed">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleDestroyed">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleDestroyed">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleDestroyed&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleDestroyed&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleDestroyed">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleDestroyed">
          <source>To report on multiple events or on events that occur frequently, consider replacing <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> with <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or appending the message to a multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 여러 줄에 메시지를 추가 하거나 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleDestroyed">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HandleDestroyed">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.HasChildren">
          <source>Gets a value indicating whether the control contains one or more child controls.</source>
          <target state="translated">컨트롤에 자식 컨트롤이 하나 이상 있는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.HasChildren">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control contains one or more child controls; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤에 자식 컨트롤이 하나 이상 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.HasChildren">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> collection has a <ph id="ph2">&lt;xref:System.Windows.Forms.Layout.ArrangedElementCollection.Count%2A&gt;</ph> greater than zero, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.HasChildren%2A&gt;</ph> property will return <ph id="ph4">`true`</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Controls%2A&gt;</ph> 컬렉션에는 <ph id="ph2">&lt;xref:System.Windows.Forms.Layout.ArrangedElementCollection.Count%2A&gt;</ph> 0 보다 큰는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.HasChildren%2A&gt;</ph> 속성은 반환 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.HasChildren">
          <source>Accessing the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HasChildren%2A&gt;</ph> property does not force the creation of a <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> if the control has no children, so referencing this property can provide a performance benefit when walking a tree of controls.</source>
          <target state="translated">에 액세스 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HasChildren%2A&gt;</ph> 속성 만들기 강제로 적용 하지 않습니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> 컨트롤에 자식이 없는 경우이 속성을 참조 하므로 수 성능 이점을 제공 컨트롤의 트리를 탐색 하는 경우.</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.HasChildren">
          <source>The following code example sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of the controls to the default system colors.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 컨트롤을 기본 시스템 색상입니다.</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.HasChildren">
          <source>The code recursively calls itself if the control has any child controls.</source>
          <target state="translated">코드 재귀적으로 컨트롤에 자식 컨트롤이 경우 자신을 호출 합니다.</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.HasChildren">
          <source>This code example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with at least one child control; however, a child container control, like a <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph>, with its own child control(s) would better demonstrate the recursion.</source>
          <target state="translated">이 코드 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 하나 이상의 자식 컨트롤과; 그러나 자식 컨테이너 컨트롤, like는 <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph>, 자체 자식 컨트롤은 보다 잘 보여 주는 재귀 합니다.</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Height">
          <source>Gets or sets the height of the control.</source>
          <target state="translated">컨트롤의 높이를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Height">
          <source>The height of the control in pixels.</source>
          <target state="translated">컨트롤의 높이(픽셀)입니다.</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Height">
          <source>Changes made to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph> property values cause the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Bottom%2A&gt;</ph> property value of the control to change.</source>
          <target state="translated">변경 내용을 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph> 속성 값은 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Bottom%2A&gt;</ph> 변경 하려면 컨트롤의 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Height">
          <source>The minimum height for the derived control <ph id="ph1">&lt;xref:System.Windows.Forms.Splitter&gt;</ph> is one pixel.</source>
          <target state="translated">파생된 컨트롤에 대 한 최소 높이 <ph id="ph1">&lt;xref:System.Windows.Forms.Splitter&gt;</ph> 은 1 픽셀입니다.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Height">
          <source>The default height for the <ph id="ph1">&lt;xref:System.Windows.Forms.Splitter&gt;</ph> control is three pixels.</source>
          <target state="translated">에 대 한 기본 높이 <ph id="ph1">&lt;xref:System.Windows.Forms.Splitter&gt;</ph> 컨트롤은 세 가지 픽셀입니다.</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Height">
          <source>Setting the height of the <ph id="ph1">&lt;xref:System.Windows.Forms.Splitter&gt;</ph> control to a value less than one will reset the property value to the default height.</source>
          <target state="translated">설정의 높이 <ph id="ph1">&lt;xref:System.Windows.Forms.Splitter&gt;</ph> 기본 높이에 속성 값으로 재설정 됩니다 하나 보다 작은 값으로 제어 합니다.</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Height">
          <source>The following code example creates three <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls on a form and sets their size and location by using the various size-related and location-related properties.</source>
          <target state="translated">다음 코드 예제에서는 세 개를 만들며 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 폼에서 제어 하 고 다양 한 크기 및 위치 관련 속성을 사용 하 여 해당 크기와 위치를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Height">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that has a width and height of at least 300 pixels.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 하에 너비와 높이가 이상 300 픽셀입니다.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.HelpRequested">
          <source>Occurs when the user requests help for a control.</source>
          <target state="translated">사용자가 컨트롤에 대한 도움말을 요청하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HelpRequested">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HelpRequested&gt;</ph> event is commonly raised when the user presses the F1 key or an associated context-sensitive help button is clicked.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.HelpRequested&gt;</ph> 일반적으로 이벤트는 사용자가 F1 키 또는 관련된 상황에 맞는 도움말 단추를 클릭 합니다.</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HelpRequested">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HelpRequested">
          <source>The following code example demonstrates handling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HelpRequested&gt;</ph> event to display custom Help content on a form containing four address fields.</source>
          <target state="translated">다음 코드 예제에서는 처리는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HelpRequested&gt;</ph> 4 주소 필드가 포함 된 폼에서 사용자 지정 도움말 콘텐츠를 표시 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HelpRequested">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HelpRequested&gt;</ph> event is raised either by pressing the F1 key with the focus in an address field, or by the using the context-sensitive Help button and clicking the Help cursor on an address field.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.HelpRequested&gt;</ph> 포커스가 있는 주소 필드가에서 F1 키를 눌러 또는 상황에 맞는 도움말 단추를 사용 하 고 주소 필드에서 도움말 커서를 클릭 하 여 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HelpRequested">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.HelpEventArgs.Handled%2A&gt;</ph> property is set to true to indicate that the <ph id="ph2">`HelpRequested`</ph> event is handled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.HelpEventArgs.Handled%2A&gt;</ph> 속성 임을 나타내는 true로 설정 되는 <ph id="ph2">`HelpRequested`</ph> 이벤트를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.HelpRequested">
          <source>The example also demonstrates storing the Help text in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Tag%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">또한 예제에 대 한 도움말 텍스트를 저장할는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Tag%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Hide">
          <source>Conceals the control from the user.</source>
          <target state="translated">사용자에게 컨트롤을 숨깁니다.</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Hide">
          <source>Hiding the control is equivalent to setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">컨트롤을 숨기는 것이 설정에 해당 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> 속성을 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Hide">
          <source>After the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Hide%2A&gt;</ph> method is called, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property returns a value of <ph id="ph3">`false`</ph> until the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Show%2A&gt;</ph> method is called.</source>
          <target state="translated">후의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Hide%2A&gt;</ph> 메서드가 호출 되는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> 속성의 값을 반환 <ph id="ph3">`false`</ph> 될 때까지 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Show%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Hide">
          <source>The following code example hides a button if the CTRL key is pressed when the button is clicked.</source>
          <target state="translated">다음 코드 예제는 단추를 클릭할 때 CTRL 키를 누른 단추를 숨깁니다.</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Hide">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> named <ph id="ph2">`button1`</ph> on a <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 라는 <ph id="ph2">`button1`</ph> 에 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.ImeMode">
          <source>Gets or sets the Input Method Editor (IME) mode of the control.</source>
          <target state="translated">컨트롤의 IME(입력기) 모드를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ImeMode">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ImeMode" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.ImeMode" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ImeMode">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.Forms.ImeMode.Inherit" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.Forms.ImeMode.Inherit" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ImeMode">
          <source>An IME is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, using a standard keyboard.</source>
          <target state="translated">IME는 표준 키보드를 사용 하 여 복잡 한 한글 문자나 기호를 입력할 수 있게 하는 프로그램입니다.</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ImeMode">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt;</ph> property is typically set to <ph id="ph2">&lt;xref:System.Windows.Forms.ImeMode.Off?displayProperty=nameWithType&gt;</ph> for a <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control that is intended to only enter numeric values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt;</ph> 일반적으로 속성 <ph id="ph2">&lt;xref:System.Windows.Forms.ImeMode.Off?displayProperty=nameWithType&gt;</ph> 에 대 한 한 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 컨트롤입니다. 숫자 값만을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ImeMode">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt;</ph> property value is set to <ph id="ph2">&lt;xref:System.Windows.Forms.ImeMode.NoControl?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt;</ph> 속성 값으로 설정 됩니다 <ph id="ph2">&lt;xref:System.Windows.Forms.ImeMode.NoControl?displayProperty=nameWithType&gt;</ph> 에 대 한는 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ImeMode">
          <source>Most classes that do not directly support Input Method Editors, or allow direct input from an IME, will set the value of this property to <ph id="ph1">&lt;xref:System.Windows.Forms.ImeMode.NoControl&gt;</ph>.</source>
          <target state="translated">Input Method Editor 지원 직접적 또는에서 직접 입력을 허용 하지 않는 대부분의 클래스에이 속성의 값이 설정 됩니다 <ph id="ph1">&lt;xref:System.Windows.Forms.ImeMode.NoControl&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ImeMode">
          <source>The user can interactively change the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt;</ph> unless it has been programmatically set to <ph id="ph2">&lt;xref:System.Windows.Forms.ImeMode.Disable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">사용자가 대화형으로 변경할 수는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt;</ph> 프로그래밍 방식으로 설정 하지 않은 경우 <ph id="ph2">&lt;xref:System.Windows.Forms.ImeMode.Disable?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ImeMode">
          <source>In this case, the user will not be able to use the IME.</source>
          <target state="translated">이 경우 사용자 입력기를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ImeMode">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt;</ph> property is ignored on Windows 8 when the global input mode is in effect.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt;</ph> 전역 입력된 모드 적용 될 때 Windows 8에서 속성이 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ImeMode">
          <source>For more info, see <bpt id="p1">[</bpt>Switch Text Input Changed from Per-Thread to Per-User<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=256509)</ept>.</source>
          <target state="translated">자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>스위치 텍스트 입력에서에서 변경 Per-thread 사용자 단위로<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=256509)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.ImeMode">
          <source>The assigned value is not one of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ImeMode" /&gt;</ph> enumeration values.</source>
          <target state="translated">할당된 값이 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ImeMode" /&gt;</ph> 열거형 값이 아닌 경우</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.ImeModeBase">
          <source>Gets or sets the IME mode of a control.</source>
          <target state="translated">컨트롤의 IME 모드를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ImeModeBase">
          <source>The IME mode of the control.</source>
          <target state="translated">컨트롤의 IME 모드입니다.</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.ImeModeChanged">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ImeMode" /&gt;</ph> property has changed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ImeMode" /&gt;</ph> 속성이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ImeModeChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt;</ph> property is changed by either a programmatic modification or through interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ImeMode%2A&gt;</ph> 속성이 상호 작용을 통해 또는 프로그래밍 방식으로 수정으로 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ImeModeChanged">
          <source>Controls that do not support Input Method Managers will never raise this event.</source>
          <target state="translated">입력기를 지원 하지 않는 컨트롤이이 이벤트를 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ImeModeChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ImeModeChanged">
          <source>The following code example is an event handler that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트 처리기 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ImeModeChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph2">`Changed`</ph> that are raised when the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> value changes (<bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph2">`Changed`</ph> 있는 될 때 발생 하는 해당 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> 값이 변경 (<bpt id="p3">*</bpt> PropertyName<ept id="p3">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ImeModeChanged">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ImeModeChanged">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ImeModeChanged">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that contains a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 를 포함 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.InitLayout">
          <source>Called after the control has been added to another container.</source>
          <target state="translated">컨트롤을 다른 컨테이너에 추가한 후 호출됩니다.</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.InitLayout">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InitLayout%2A&gt;</ph> method is called immediately after adding a control to a container.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.InitLayout%2A&gt;</ph> 메서드 컨테이너에 컨트롤을 추가한 직후 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.InitLayout">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InitLayout%2A&gt;</ph> method enables a control to initialize its layout state based on its container.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.InitLayout%2A&gt;</ph> 메서드를 사용 하면 해당 컨테이너에 따라 레이아웃 상태로 초기화 하는 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.InitLayout">
          <source>For example, you would typically apply anchoring and docking to the control in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InitLayout%2A&gt;</ph> method.</source>
          <target state="translated">예를 들어 일반적으로 적용 고정 및 도킹 컨트롤에 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InitLayout%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.InitLayout">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.InitLayout" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.InitLayout" /&gt;</ph> method so that the control is displayed correctly.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.InitLayout" /&gt;</ph> 파생된 클래스에서 호출 해야 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.InitLayout" /&gt;</ph> 메서드 컨트롤을 올바르게 표시 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Control">
          <source>Invalidates a specific region of the control and causes a paint message to be sent to the control.</source>
          <target state="translated">특정 컨트롤 영역을 무효화하고 그리기 메시지를 컨트롤로 보냅니다.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invalidate">
          <source>Invalidates the entire surface of the control and causes the control to be redrawn.</source>
          <target state="translated">컨트롤의 전체 화면을 무효화하고 컨트롤을 다시 그립니다.</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method does not force a synchronous paint; to force a synchronous paint, call the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method after calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 메서드 동기식 강제로 적용 하지 않습니다; 동기식을 강제로 표시 하려면 함수를 호출할는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> 메서드를 호출한 후의 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate">
          <source>When this method is called with no parameters, the entire client area is added to the update region.</source>
          <target state="translated">이 메서드는 매개 변수 없이, 전체 클라이언트 영역 업데이트 영역에 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate">
          <source>The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped.</source>
          <target state="translated">사용자 이미지 또는 이미지 파일을 폼으로 끌어 지점에 표시 되도록가를 놓이고는 다음 코드 예제에서는 합니다.</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> 메서드는 폼을 그릴 될 때마다 이미지를 다시 그리기 위해 재정의 됩니다; 그렇지 않은 경우 이미지는 다음에 다시 그릴 때까지 유지만 합니다.</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> 이벤트 처리 메서드는 형식으로 끌고 있는 데이터의 형식을 결정 하 고 적절 한 피드백을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> event-handling method displays the image on the form, if an <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph> can be created from the data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> 경우 이벤트 처리 메서드는 폼에 이미지를 표시 한 <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph> 데이터에서 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate">
          <source>Because the <ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType&gt;</ph> values are screen coordinates, the example uses the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PointToClient%2A&gt;</ph> method to convert them to client coordinates.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType&gt;</ph> 값은 화면 좌표를 사용 하 여는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PointToClient%2A&gt;</ph> 메서드를 클라이언트 좌표로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invalidate(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to invalidate the control's child controls; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤의 자식 컨트롤을 무효화하는 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invalidate(System.Boolean)">
          <source>Invalidates a specific region of the control and causes a paint message to be sent to the control.</source>
          <target state="translated">특정 컨트롤 영역을 무효화하고 그리기 메시지를 컨트롤로 보냅니다.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invalidate(System.Boolean)">
          <source>Optionally, invalidates the child controls assigned to the control.</source>
          <target state="translated">또한 필요에 따라 컨트롤에 할당된 자식 컨트롤을 무효화합니다.</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate(System.Boolean)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method does not force a synchronous paint; to force a synchronous paint, call the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method after calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 메서드 동기식 강제로 적용 하지 않습니다; 동기식을 강제로 표시 하려면 함수를 호출할는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> 메서드를 호출한 후의 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate(System.Boolean)">
          <source>When this method is called with no parameters, the entire client area is added to the update region.</source>
          <target state="translated">이 메서드는 매개 변수 없이, 전체 클라이언트 영역 업데이트 영역에 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph> that represents the region to invalidate.</source>
          <target state="translated">무효화할 영역을 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)">
          <source>Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</source>
          <target state="translated">지정된 컨트롤 영역을 무효화하고, 이 영역을 다음 그리기 작업에서 다시 그릴 컨트롤의 업데이트 영역에 추가하고, 그리기 메시지를 컨트롤로 보냅니다.</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method does not force a synchronous paint; to force a synchronous paint, call the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method after calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 메서드 동기식 강제로 적용 하지 않습니다; 동기식을 강제로 표시 하려면 함수를 호출할는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> 메서드를 호출한 후의 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)">
          <source>When this method is called with no parameters, the entire client area is added to the update region.</source>
          <target state="translated">이 메서드는 매개 변수 없이, 전체 클라이언트 영역 업데이트 영역에 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Drawing.Region" /&gt;</ph> to invalidate.</source>
          <target state="translated">무효화할 <ph id="ph1">&lt;see cref="T:System.Drawing.Region" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)">
          <source>Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</source>
          <target state="translated">지정된 컨트롤 영역을 무효화하고, 이 영역을 다음 그리기 작업에서 다시 그릴 컨트롤의 업데이트 영역에 추가하고, 그리기 메시지를 컨트롤로 보냅니다.</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method does not force a synchronous paint; to force a synchronous paint, call the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method after calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 메서드 동기식 강제로 적용 하지 않습니다; 동기식을 강제로 표시 하려면 함수를 호출할는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> 메서드를 호출한 후의 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)">
          <source>When this method is called with no parameters, the entire client area is added to the update region.</source>
          <target state="translated">이 메서드는 매개 변수 없이, 전체 클라이언트 영역 업데이트 영역에 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph> that represents the region to invalidate.</source>
          <target state="translated">무효화할 영역을 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to invalidate the control's child controls; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤의 자식 컨트롤을 무효화하는 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle,System.Boolean)">
          <source>Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</source>
          <target state="translated">지정된 컨트롤 영역을 무효화하고, 이 영역을 다음 그리기 작업에서 다시 그릴 컨트롤의 업데이트 영역에 추가하고, 그리기 메시지를 컨트롤로 보냅니다.</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle,System.Boolean)">
          <source>Optionally, invalidates the child controls assigned to the control.</source>
          <target state="translated">또한 필요에 따라 컨트롤에 할당된 자식 컨트롤을 무효화합니다.</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle,System.Boolean)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method does not force a synchronous paint; to force a synchronous paint, call the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method after calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 메서드 동기식 강제로 적용 하지 않습니다; 동기식을 강제로 표시 하려면 함수를 호출할는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> 메서드를 호출한 후의 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle,System.Boolean)">
          <source>When this method is called with no parameters, the entire client area is added to the update region.</source>
          <target state="translated">이 메서드는 매개 변수 없이, 전체 클라이언트 영역 업데이트 영역에 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Drawing.Region" /&gt;</ph> to invalidate.</source>
          <target state="translated">무효화할 <ph id="ph1">&lt;see cref="T:System.Drawing.Region" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to invalidate the control's child controls; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤의 자식 컨트롤을 무효화하는 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region,System.Boolean)">
          <source>Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</source>
          <target state="translated">지정된 컨트롤 영역을 무효화하고, 이 영역을 다음 그리기 작업에서 다시 그릴 컨트롤의 업데이트 영역에 추가하고, 그리기 메시지를 컨트롤로 보냅니다.</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region,System.Boolean)">
          <source>Optionally, invalidates the child controls assigned to the control.</source>
          <target state="translated">또한 필요에 따라 컨트롤에 할당된 자식 컨트롤을 무효화합니다.</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region,System.Boolean)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method does not force a synchronous paint; to force a synchronous paint, call the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method after calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 메서드 동기식 강제로 적용 하지 않습니다; 동기식을 강제로 표시 하려면 함수를 호출할는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> 메서드를 호출한 후의 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region,System.Boolean)">
          <source>When this method is called with no parameters, the entire client area is added to the update region.</source>
          <target state="translated">이 메서드는 매개 변수 없이, 전체 클라이언트 영역 업데이트 영역에 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.Invalidated">
          <source>Occurs when a control's display requires redrawing.</source>
          <target state="translated">컨트롤을 다시 그려야 할 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Invalidated">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Invalidated">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Invalidated">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidated&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidated&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Invalidated">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Invalidated">
          <source>To report on multiple events or on events that occur frequently, consider replacing <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> with <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or appending the message to a multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 여러 줄에 메시지를 추가 하거나 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Invalidated">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Invalidated">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invalidated&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invalidated&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Control">
          <source>Executes a delegate on the thread that owns the control's underlying window handle.</source>
          <target state="translated">컨트롤의 내부 창 핸들이 있는 스레드에서 대리자를 실행합니다.</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>A delegate that contains a method to be called in the control's thread context.</source>
          <target state="translated">컨트롤의 스레드 컨텍스트에서 호출될 메서드가 있는 대리자입니다.</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>Executes the specified delegate on the thread that owns the control's underlying window handle.</source>
          <target state="translated">컨트롤의 내부 창 핸들이 있는 스레드에서 지정된 대리자를 실행합니다.</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>The return value from the delegate being invoked, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the delegate has no return value.</source>
          <target state="translated">호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>Delegates are similar to function pointers in C or C++ languages.</source>
          <target state="translated">대리자는 C 또는 c + + 언어의 함수 포인터와 유사 합니다.</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>Delegates encapsulate a reference to a method inside a delegate object.</source>
          <target state="translated">대리자는 대리자 개체를 내부 메서드에 대 한 참조를 캡슐화합니다.</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time.</source>
          <target state="translated">대리자 개체 참조 된 메서드를 호출 하는 코드에 전달 될 수 하 고 컴파일 타임에는 메서드를 호출할 수 있습니다 알 수 없는 키를 누릅니다.</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.</source>
          <target state="translated">C 또는 c + + 함수 포인터와는 달리 대리자는 개체 지향, 형식이 안전한 및 더 안전 합니다.</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method searches up the control's parent chain until it finds a control or form that has a window handle if the current control's underlying window handle does not exist yet.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> 현재 컨트롤의 내부 창 핸들이 아직 존재 하지 않는 경우를 처리 하는 컨트롤의 부모 체인 컨트롤이 나 기간이 된 양식을 찾을 때까지 메서드를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>If no appropriate handle can be found, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method will throw an exception.</source>
          <target state="translated">적절 한 핸들을 찾을 수 있는 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> 메서드 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>Exceptions that are raised during the call will be propagated back to the caller.</source>
          <target state="translated">호출 하는 동안 발생 하는 예외를 다시 호출자에 게 전파 됩니다.</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>In addition to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property, there are four methods on a control that are thread safe: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> if the handle for the control has already been created.</source>
          <target state="translated">외에 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> 속성에는 스레드로부터 안전 컨트롤에서 네 가지 메서드가 있습니다: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 컨트롤에 대 한 핸들에서 이미 만든 경우.</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> before the control's handle has been created on a background thread can cause illegal cross thread calls.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 컨트롤의 핸들이 백그라운드 스레드에서 생성 되기 전에 잘못 된 크로스 스레드 호출 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</source>
          <target state="translated">다른 모든 메서드 호출에 대 한 사용할지 invoke 메서드 중 하나를 컨트롤의 스레드에 대 한 호출을 마샬링하 합니다.</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>The delegate can be an instance of <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph>, in which case the sender parameter will contain this control, and the event parameter will contain <ph id="ph2">&lt;xref:System.EventArgs.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">대리자의 인스턴스 수 <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph>,이 경우 보낸 사람 매개 변수가이 컨트롤 되 고 이벤트 매개 변수는 포함 <ph id="ph2">&lt;xref:System.EventArgs.Empty?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>The delegate can also be an instance of <ph id="ph1">&lt;xref:System.Windows.Forms.MethodInvoker&gt;</ph>, or any other delegate that takes a void parameter list.</source>
          <target state="translated">대리자의 인스턴스 수도 있습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MethodInvoker&gt;</ph>, 또는 대리자는 void 매개 변수 목록입니다.</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>A call to an <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.MethodInvoker&gt;</ph> delegate will be faster than a call to another type of delegate.</source>
          <target state="translated">에 대 한 호출은 <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.MethodInvoker&gt;</ph> 대리자 보다 빨리 대리자의 다른 형식으로 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>An exception might be thrown if the thread that should process the message is no longer active.</source>
          <target state="translated">메시지를 처리 해야 하는 스레드가 더 이상 활성 상태 이면 예외가 throw 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>The following code example shows controls that contain a delegate.</source>
          <target state="translated">다음 코드 예제에서는 대리자를 포함 하는 컨트롤을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>The delegate encapsulates a method that adds items to the list box, and this method is executed on the thread that owns the underlying handle of the form.</source>
          <target state="translated">대리자 목록 상자에 항목을 추가 하는 메서드를 캡슐화 하 고이 메서드는 폼의 기본 핸들을 소유 하는 스레드에서 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate)">
          <source>When the user clicks on the button, <ph id="ph1">`Invoke`</ph> runs the delegate.</source>
          <target state="translated">사용자가 단추를 클릭할 때 <ph id="ph1">`Invoke`</ph> 대리자를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>A delegate to a method that takes parameters of the same number and type that are contained in the <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> 매개 변수에 있는 매개 변수의 수 및 형식과 동일한 매개 변수를 갖는 메서드의 대리자입니다.</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>An array of objects to pass as arguments to the specified method.</source>
          <target state="translated">지정된 메서드에 인수로 전달하는 개체의 배열입니다.</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>This parameter can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the method takes no arguments.</source>
          <target state="translated">메서드가 인수를 사용하지 않으면 이 매개 변수는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>Executes the specified delegate, on the thread that owns the control's underlying window handle, with the specified list of arguments.</source>
          <target state="translated">컨트롤의 내부 창 핸들이 있는 스레드에서 특정 인수 목록을 사용하여 지정된 대리자를 실행합니다.</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the return value from the delegate being invoked, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the delegate has no return value.</source>
          <target state="translated">호출되는 대리자의 반환 값이 있는 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>이거나, 대리자에 반환 값이 없으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>Delegates are similar to function pointers in C or C++ languages.</source>
          <target state="translated">대리자는 C 또는 c + + 언어의 함수 포인터와 유사 합니다.</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>Delegates encapsulate a reference to a method inside a delegate object.</source>
          <target state="translated">대리자는 대리자 개체를 내부 메서드에 대 한 참조를 캡슐화합니다.</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time.</source>
          <target state="translated">대리자 개체 참조 된 메서드를 호출 하는 코드에 전달 될 수 하 고 컴파일 타임에는 메서드를 호출할 수 있습니다 알 수 없는 키를 누릅니다.</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.</source>
          <target state="translated">C 또는 c + + 함수 포인터와는 달리 대리자는 개체 지향, 형식이 안전한 및 더 안전 합니다.</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</source>
          <target state="translated">컨트롤의 핸들이 아직 존재 하지 않는 경우 창 핸들이 폼 또는 컨트롤을 찾을 때까지이 메서드는 컨트롤의 부모 체인을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>If no appropriate handle can be found, this method throws an exception.</source>
          <target state="translated">적절 한 핸들을 찾을 수 있는 경우이 메서드는 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>Exceptions that are raised during the call will be propagated back to the caller.</source>
          <target state="translated">호출 하는 동안 발생 하는 예외를 다시 호출자에 게 전파 됩니다.</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>In addition to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property, there are four methods on a control that are thread safe: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> if the handle for the control has already been created.</source>
          <target state="translated">외에 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> 속성에는 스레드로부터 안전 컨트롤에서 네 가지 메서드가 있습니다: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 컨트롤에 대 한 핸들에서 이미 만든 경우.</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> before the control's handle has been created on a background thread can cause illegal cross thread calls.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 컨트롤의 핸들이 백그라운드 스레드에서 생성 되기 전에 잘못 된 크로스 스레드 호출 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</source>
          <target state="translated">다른 모든 메서드 호출에 대 한 사용할지 invoke 메서드 중 하나를 컨트롤의 스레드에 대 한 호출을 마샬링하 합니다.</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>The delegate can be an instance of <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph>, in which case the sender parameter will contain this control, and the event parameter will contain <ph id="ph2">&lt;xref:System.EventArgs.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">대리자의 인스턴스 수 <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph>,이 경우 보낸 사람 매개 변수가이 컨트롤 되 고 이벤트 매개 변수는 포함 <ph id="ph2">&lt;xref:System.EventArgs.Empty?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>The delegate can also be an instance of <ph id="ph1">&lt;xref:System.Windows.Forms.MethodInvoker&gt;</ph>, or any other delegate that takes a void parameter list.</source>
          <target state="translated">대리자의 인스턴스 수도 있습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MethodInvoker&gt;</ph>, 또는 대리자는 void 매개 변수 목록입니다.</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>A call to an <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.MethodInvoker&gt;</ph> delegate will be faster than a call to another type of delegate.</source>
          <target state="translated">에 대 한 호출은 <ph id="ph1">&lt;xref:System.EventHandler&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.MethodInvoker&gt;</ph> 대리자 보다 빨리 대리자의 다른 형식으로 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>An exception might be thrown if the thread that should process the message is no longer active.</source>
          <target state="translated">메시지를 처리 해야 하는 스레드가 더 이상 활성 상태 이면 예외가 throw 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>The following code example shows controls that contain a delegate.</source>
          <target state="translated">다음 코드 예제에서는 대리자를 포함 하는 컨트롤을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>The delegate encapsulates a method that adds items to the list box, and this method is executed on the thread that owns the underlying handle of the form, using the specified arguments.</source>
          <target state="translated">대리자 목록 상자에 항목을 추가 하는 메서드를 캡슐화 하 고이 메서드는 지정된 된 인수를 사용 하 여 폼의 기본 핸들을 소유 하는 스레드에서 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])">
          <source>When the user clicks on the button, <ph id="ph1">`Invoke`</ph> runs the delegate.</source>
          <target state="translated">사용자가 단추를 클릭할 때 <ph id="ph1">`Invoke`</ph> 대리자를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> to assign the event to.</source>
          <target state="translated">해당 이벤트를 할당할 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.GotFocus" /&gt;</ph> event for the specified control.</source>
          <target state="translated">지정된 컨트롤에 대해 <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.GotFocus" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> to assign the event to.</source>
          <target state="translated">해당 이벤트를 할당할 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.LostFocus" /&gt;</ph> event for the specified control.</source>
          <target state="translated">지정된 컨트롤에 대해 <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.LostFocus" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> to assign the <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> event to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> 이벤트를 할당할 <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> event for the specified control.</source>
          <target state="translated">지정된 컨트롤에 대해 <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> to assign the <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Control.Paint" /&gt;</ph> event to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> 이벤트를 할당할 <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Control.Paint" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Windows.Forms.PaintEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.PaintEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Paint" /&gt;</ph> event for the specified control.</source>
          <target state="translated">지정된 컨트롤에 대해 <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Paint" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> to assign the <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Control.Paint" /&gt;</ph> event to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> 이벤트를 할당할 <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Control.Paint" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Windows.Forms.PaintEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.PaintEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see langword="PaintBackground" /&gt;</ph> event for the specified control.</source>
          <target state="translated">지정된 컨트롤에 대해 <ph id="ph1">&lt;see langword="PaintBackground" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>Gets a value indicating whether the caller must call an invoke method when making method calls to the control because the caller is on a different thread than the one the control was created on.</source>
          <target state="translated">호출자가 컨트롤이 만들어진 스레드와 다른 스레드에 있기 때문에 메서드를 통해 컨트롤을 호출하는 경우 해당 호출자가 호출 메서드를 호출해야 하는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Handle" /&gt;</ph> was created on a different thread than the calling thread (indicating that you must make calls to the control through an invoke method); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤의 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이 호출 스레드와 다른 스레드에서 만들어져 호출 메서드를 통해 해당 컨트롤을 호출해야 하는 경우 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Handle" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>Controls in Windows Forms are bound to a specific thread and are not thread safe.</source>
          <target state="translated">Windows Forms에서 컨트롤을 특정 스레드에 바인딩되며는 스레드로부터 안전 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>Therefore, if you are calling a control's method from a different thread, you must use one of the control's invoke methods to marshal the call to the proper thread.</source>
          <target state="translated">따라서 다른 스레드에서 컨트롤의 메서드를 호출 하는 경우 하나를 사용 해야의 컨트롤의 호출을 적절 한 스레드에 마샬링해야 하는 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>This property can be used to determine if you must call an invoke method, which can be useful if you do not know what thread owns a control.</source>
          <target state="translated">컨트롤 하는지 알 수 없는 경우에 유용할 수 있는 호출 메서드를 호출 해야 하는 경우를 확인 하려면이 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>In addition to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> property, there are four methods on a control that are thread safe to call: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>,<ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> if the handle for the control has already been created.</source>
          <target state="translated">이외에 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> 속성, 컨트롤에는 스레드로부터 안전 하 게 호출할 네 가지 메서드가 있습니다: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph>,<ph id="ph3">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.EndInvoke%2A&gt;</ph> 및 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 컨트롤에 대 한 핸들에서 이미 만든 경우.</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> before the control's handle has been created on a background thread can cause illegal cross thread calls.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateGraphics%2A&gt;</ph> 컨트롤의 핸들이 백그라운드 스레드에서 생성 되기 전에 잘못 된 크로스 스레드 호출 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>For all other method calls, you should use one of these invoke methods when calling from a different thread.</source>
          <target state="translated">다른 모든 메서드 호출에 대해 하나를 사용 해야 이러한 다른 스레드에서 호출 하는 경우 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>If the control's handle does not yet exist, <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> searches up the control's parent chain until it finds a control or form that does have a window handle.</source>
          <target state="translated">컨트롤의 핸들이 아직 존재 하지 않는 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> 창 핸들이 폼 또는 컨트롤을 찾을 때까지 해당 컨트롤의 부모 체인을 위로 검색.</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>If no appropriate handle can be found, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> method returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">적절 한 핸들을 찾을 수 있는 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> 메서드 반환 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>This means that <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> can return <ph id="ph2">`false`</ph> if <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> is not required (the call occurs on the same thread), or if the control was created on a different thread but the control's handle has not yet been created.</source>
          <target state="translated">즉 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> 반환할 수 <ph id="ph2">`false`</ph> 경우 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> 필요 하지 않습니다 (호출이 동일한 스레드에서 발생), 또는 다른 스레드에서 컨트롤 만들어졌지만 컨트롤의 핸들이 아직 만들어지지 않은 경우.</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>In the case where the control's handle has not yet been created, you should not simply call properties, methods, or events on the control.</source>
          <target state="translated">여기서 컨트롤의 핸들이 아직 만들어지지 않은 경우에 호출 하지 않아야 단순히 속성, 메서드 또는 이벤트 컨트롤에 있습니다.</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>This might cause the control's handle to be created on the background thread, isolating the control on a thread without a message pump and making the application unstable.</source>
          <target state="translated">메시지 펌프 하지 않고 스레드에서 컨트롤을 격리 하 고 고 응용 프로그램이 불안정 백그라운드 스레드에서 만들어질 컨트롤의 핸들이 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>You can protect against this case by also checking the value of <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsHandleCreated%2A&gt;</ph> when <ph id="ph2">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> returns <ph id="ph3">`false`</ph> on a background thread.</source>
          <target state="translated">값을 확인 하 여이 경우 으로부터 보호할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsHandleCreated%2A&gt;</ph> 때 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A&gt;</ph> 반환 <ph id="ph3">`false`</ph> 백그라운드 스레드입니다.</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>If the control handle has not yet been created, you must wait until it has been created before calling <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>.</source>
          <target state="translated">컨트롤 핸들이 아직 만들지 않은 경우 호출 하기 전에 만든 될 때까지 대기 해야 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>Typically, this happens only if a background thread is created in the constructor of the primary form for the application (as in <ph id="ph1">`Application.Run(new MainForm())`</ph>, before the form has been shown or <ph id="ph2">`Application.Run`</ph> has been called.</source>
          <target state="translated">일반적으로 이러한 경우 응용 프로그램에 대 한 기본 폼의 생성자에서 백그라운드 스레드가 생성 됩니다 (에서 같이 <ph id="ph1">`Application.Run(new MainForm())`</ph>는 폼이 표시 되기 전에, 또는 <ph id="ph2">`Application.Run`</ph> 가 호출 되었습니다.</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>One solution is to wait until the form's handle has been created before starting the background thread.</source>
          <target state="translated">한 가지 해결 방법은 백그라운드 스레드를 시작 하기 전에 폼의 핸들을 만든 될 때까지 기다려야 합니다.</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>Either force handle creation by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> property, or wait until the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Load&gt;</ph> event to start the background process.</source>
          <target state="translated">호출 하 여 핸들 생성을 강제로 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Handle%2A&gt;</ph> 속성 또는 때까지 기다려야는 <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Load&gt;</ph> 백그라운드 프로세스를 시작 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>An even better solution is to use the <ph id="ph1">`SynchronizationContext`</ph> returned by <ph id="ph2">&lt;xref:System.Threading.SynchronizationContext&gt;</ph> rather than a control for cross-thread marshaling.</source>
          <target state="translated">사용 하는 것 보다 나은 해결책은 <ph id="ph1">`SynchronizationContext`</ph> 반환한 <ph id="ph2">&lt;xref:System.Threading.SynchronizationContext&gt;</ph> 스레드 간 위한 컨트롤 대신 합니다.</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>An exception might be thrown if the thread that should process the message is no longer active.</source>
          <target state="translated">메시지를 처리 해야 하는 스레드가 더 이상 활성 상태 이면 예외가 throw 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.InvokeRequired">
          <source>For more information about multithreaded Windows Forms controls, see <bpt id="p1">[</bpt>How to: Use a Background Thread to Search for Files<ept id="p1">](~/docs/framework/winforms/controls/how-to-use-a-background-thread-to-search-for-files.md)</ept> and <bpt id="p2">[</bpt>How to: Make Thread-Safe Calls to Windows Forms Controls<ept id="p2">](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)</ept>.</source>
          <target state="translated">다중 스레드 Windows Forms 컨트롤에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>하는 방법: 파일을 검색 하는 백그라운드 스레드를 사용 하 여<ept id="p1">](~/docs/framework/winforms/controls/how-to-use-a-background-thread-to-search-for-files.md)</ept> 및 <bpt id="p2">[</bpt>하는 방법: Windows Forms 컨트롤에 스레드로부터 안전한 호출 수행<ept id="p2">](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.IsAccessible">
          <source>Gets or sets a value indicating whether the control is visible to accessibility applications.</source>
          <target state="translated">컨트롤이 내게 필요한 옵션 지원 응용 프로그램에 표시되는지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.IsAccessible">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control is visible to accessibility applications; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 내게 필요한 옵션 지원 응용 프로그램에 표시되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.IsDisposed">
          <source>Gets a value indicating whether the control has been disposed of.</source>
          <target state="translated">컨트롤이 삭제되었는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.IsDisposed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control has been disposed of; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 삭제되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.IsDisposed">
          <source>When this property returns <ph id="ph1">`true`</ph>, the control is disposed of and can no longer be referenced as a valid Windows control.</source>
          <target state="translated">이 속성이 반환 하는 경우 <ph id="ph1">`true`</ph>, 컨트롤의 삭제 되 고 올바른 Windows 컨트롤로 더 이상 참조할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.IsDisposed">
          <source>Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection.</source>
          <target state="translated">컨트롤의 인스턴스 삭제 하는 경우에 가비지 수집을 통해 메모리에서 제거 될 때까지 메모리에 유지 계속 됩니다.</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.IsDisposed">
          <source>When a control is disposed, you cannot call its <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RecreateHandle%2A&gt;</ph> method.</source>
          <target state="translated">호출할 수 없습니다 컨트롤이 삭제 될 때 해당 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RecreateHandle%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.IsHandleCreated">
          <source>Gets a value indicating whether the control has a handle associated with it.</source>
          <target state="translated">컨트롤에 연결된 핸들이 있는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.IsHandleCreated">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a handle has been assigned to the control; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤에 핸들이 할당되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.IsHandleCreated">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsHandleCreated%2A&gt;</ph> property to determine whether <ph id="ph2">&lt;xref:System.Windows.Forms.Control.CreateHandle%2A&gt;</ph> has been called.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsHandleCreated%2A&gt;</ph> 속성을 확인 하는지 여부를 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.CreateHandle%2A&gt;</ph> 가 호출 합니다.</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.IsInputChar(System.Char)">
          <source>The character to test.</source>
          <target state="translated">테스트할 문자입니다.</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.IsInputChar(System.Char)">
          <source>Determines if a character is an input character that the control recognizes.</source>
          <target state="translated">문자가 컨트롤이 인식하는 입력 문자인지를 확인합니다.</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.IsInputChar(System.Char)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the character should be sent directly to the control and not preprocessed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">문자가 컨트롤로 직접 보내지고 전처리되지 않으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputChar(System.Char)">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph> method to determine whether the character specified by the <ph id="ph2">`charCode`</ph> parameter is an input character that the control wants.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph> 있는지 여부를 지정 된 문자를 확인 하는 <ph id="ph2">`charCode`</ph> 매개 변수는 컨트롤이 하는 입력된 문자.</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputChar(System.Char)">
          <source>This method is called during window message preprocessing to determine whether the specified input character should be preprocessed or sent directly to the control.</source>
          <target state="translated">이 메서드는 지정된 된 입력된 문자를 전처리 되거나 컨트롤에 직접 전송 하는지 확인 하기 위해 창 메시지 전처리 하는 동안 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputChar(System.Char)">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, the specified character is sent directly to the control.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph> 반환 <ph id="ph2">`true`</ph>, 지정된 된 문자는 컨트롤에 직접 전송 됩니다.</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputChar(System.Char)">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph> returns <ph id="ph2">`false`</ph>, the specified character is preprocessed and only sent to the control if it is not consumed by the preprocessing phase.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph> 반환 <ph id="ph2">`false`</ph>, 지정된 된 문자를 전처리 되 고 전처리 단계에서 사용 하지 않은 경우에 컨트롤 전송 합니다.</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputChar(System.Char)">
          <source>The preprocessing of a character includes checking whether the character is a mnemonic of another control.</source>
          <target state="translated">전처리는 문자를 포함 다른 컨트롤의 니모닉 문자 인지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputChar(System.Char)">
          <source>for all windows for inheriting classes to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputChar(System.Char)">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Keys" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Keys" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</source>
          <target state="translated">지정된 키가 일반 입력 키인지 또는 전처리가 필요한 특수 키인지를 확인합니다.</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified key is a regular input key; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 키가 일반 입력 키이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> method to determine whether the key specified by the <ph id="ph2">`keyData`</ph> parameter is an input key that the control wants.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> 키에서 지정 되었는지 여부를 확인 하는 <ph id="ph2">`keyData`</ph> 매개 변수는 컨트롤이 입력된 키인지 합니다.</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source>This method is called during window message preprocessing to determine whether the specified input key should be preprocessed or sent directly to the control.</source>
          <target state="translated">이 메서드는 지정 된 입력된 키인지 전처리 되거나 컨트롤에 직접 전송 하는지 확인 하기 위해 창 메시지 전처리 하는 동안 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, the specified key is sent directly to the control.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> 반환 <ph id="ph2">`true`</ph>, 지정된 된 키 컨트롤에 직접 전송 됩니다.</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> returns <ph id="ph2">`false`</ph>, the specified key is preprocessed and only sent to the control if it is not consumed by the preprocessing phase.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> 반환 <ph id="ph2">`false`</ph>, 지정된 된 키가 전처리 하 고 전처리 단계에서 사용 하지 않은 경우에 컨트롤 전송 합니다.</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source>Keys that are preprocessed include the TAB, RETURN, ESC, and the UP ARROW, DOWN ARROW, LEFT ARROW, and RIGHT ARROW keys.</source>
          <target state="translated">전처리 하는 키의 탭, 리턴, esc를 누르고 및 위쪽 화살표, 아래쪽 화살표, 왼쪽 화살표 및 오른쪽 화살표 키를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source>The following code example shows you how to override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> method for a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control.</source>
          <target state="translated">다음 코드 예제에서는 재정의 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> 에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source>In this example, the <ph id="ph1">`TabTextBox`</ph> class handles the TAB key.</source>
          <target state="translated">이 예제는 <ph id="ph1">`TabTextBox`</ph> TAB 키를 처리 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source>When the <ph id="ph1">`TabTextBox`</ph> has the focus and the user presses the TAB key four spaces are added at the text insertion point, replacing any selected text.</source>
          <target state="translated">경우는 <ph id="ph1">`TabTextBox`</ph> 포커스가 있고 사용자 TAB 키를 눌러 텍스트 삽입 지점에 4 개의 공백이 추가 되어 선택한 텍스트를 대체 합니다.</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source>By default, the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control handles the TAB key by moving the input focus to the next control.</source>
          <target state="translated">기본적으로는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 컨트롤이 입력된 포커스를 다음 컨트롤로 이동 하 여 TAB 키를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source>In this case, the keypress never reaches the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnKeyDown%2A&gt;</ph> method override.</source>
          <target state="translated">이 경우에 키 누름에 도달 하지 않습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnKeyDown%2A&gt;</ph> 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source>To prevent this default behavior, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> method override returns <ph id="ph2">`true`</ph> when the user presses the TAB key.</source>
          <target state="translated">이 기본 동작을 방지 하기 위해는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> 메서드 재정의 반환 <ph id="ph2">`true`</ph> TAB 키를 누를 때.</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source>For all other keypresses, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> method override returns the result of calling the base-class version of the method.</source>
          <target state="translated">다른 모든 키 누르기는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> 메서드 재정의 기본 클래스 버전의 메서드 호출의 결과 반환 합니다.</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source>for all windows for inheriting classes to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.IsKeyLocked(System.Windows.Forms.Keys)">
          <source>The CAPS LOCK, NUM LOCK, or SCROLL LOCK member of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Keys" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Keys" /&gt;</ph> 열거형의 Caps Lock, Num Lock 또는 Scroll Lock 멤버입니다.</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.IsKeyLocked(System.Windows.Forms.Keys)">
          <source>Determines whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK key is in effect.</source>
          <target state="translated">Caps Lock, Num Lock 또는 Scroll Lock 키가 유효한지를 확인합니다.</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.IsKeyLocked(System.Windows.Forms.Keys)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified key or keys are in effect; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정한 키가 유효하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsKeyLocked(System.Windows.Forms.Keys)">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsKeyLocked%2A&gt;</ph> property to determine whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK keys are on, whether individually or in combination.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsKeyLocked%2A&gt;</ph> 여부를 개별적으로 또는 함께, CAPS LOCK, NUM LOCK 또는 SCROLL LOCK 키가 있는지 여부를 확인 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsKeyLocked(System.Windows.Forms.Keys)">
          <source>The following code example displays a message box indicating whether the specified key (the Caps Lock key in this case) is in effect.</source>
          <target state="translated">다음 코드 예제에서는 지정된 된 키 (이 경우 Caps Lock 키)가 유효한 지 여부를 나타내는 메시지 상자를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.IsKeyLocked(System.Windows.Forms.Keys)">
          <source>The <ph id="ph1">&lt;paramref name="keyVal" /&gt;</ph> parameter refers to a key other than the CAPS LOCK, NUM LOCK, or SCROLL LOCK key.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keyVal" /&gt;</ph> 매개 변수는 Caps Lock, Num Lock 또는 Scroll Lock 키 이외의 키를 참조합니다.</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.IsMirrored">
          <source>Gets a value indicating whether the control is mirrored.</source>
          <target state="translated">컨트롤이 미러링되는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.IsMirrored">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control is mirrored; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 미러링되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.IsMirrored">
          <source>A mirrored control displays both layout and text from right to left.</source>
          <target state="translated">미러링된 컨트롤 레이아웃 및 오른쪽에서 왼쪽으로 텍스트를 모두 표시합니다.</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.IsMirrored">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Create Mirrored Windows Forms and Controls<ept id="p1">](http://msdn.microsoft.com/library/7c5c4ecc-9bfb-4508-8383-753e306719b1)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>하는 방법: 미러링된 Windows Forms 만들기 및 컨트롤<ept id="p1">](http://msdn.microsoft.com/library/7c5c4ecc-9bfb-4508-8383-753e306719b1)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)">
          <source>The character to test.</source>
          <target state="translated">테스트할 문자입니다.</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)">
          <source>The string to search.</source>
          <target state="translated">검색할 문자열입니다.</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)">
          <source>Determines if the specified character is the mnemonic character assigned to the control in the specified string.</source>
          <target state="translated">지정된 문자가 특정 문자열의 컨트롤에 할당된 니모닉 문자인지를 확인합니다.</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="charCode" /&gt;</ph> character is the mnemonic character assigned to the control; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="charCode" /&gt;</ph> 문자가 컨트롤에 할당된 니모닉 문자이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)">
          <source>The mnemonic character is the character immediately following the first instance of "&amp;" in a <ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">니모닉 문자는 문자 바로 다음에 "&amp;"의 첫 번째 인스턴스는 <ph id="ph1">&lt;xref:System.String&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)">
          <source>The following code example demonstrates an extension of the button class that overrides the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessMnemonic%2A&gt;</ph> method to exhibit custom behavior.</source>
          <target state="translated">다음 코드 예제에서는 재정의 하는 단추 클래스의 확장은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessMnemonic%2A&gt;</ph> 메서드를 사용자 지정 동작을 노출 합니다.</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)">
          <source>The example also demonstrates the use of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CanSelect%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsMnemonic%2A&gt;</ph> properties.</source>
          <target state="translated">이 예제에서는 또한의 사용법을 보여줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CanSelect%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsMnemonic%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)">
          <source>To run this example paste the following code after a form class, in the same file.</source>
          <target state="translated">이 예에서는 실행 하려면 같은 파일에 폼 클래스 뒤 다음 코드를 붙여 넣습니다.</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)">
          <source>Add a button of type <ph id="ph1">`MnemonicButton`</ph> to the form.</source>
          <target state="translated">형식의 단추 추가 <ph id="ph1">`MnemonicButton`</ph> 양식입니다.</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)">
          <source>for all windows for inheriting classes to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.KeyDown">
          <source>Occurs when a key is pressed while the control has focus.</source>
          <target state="translated">컨트롤에 포커스가 있을 때 키를 누르면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyDown">
          <source>Key events occur in the following order:</source>
          <target state="translated">주요 이벤트는 다음 순서 대로 발생합니다.</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyDown">
          <source>To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <ph id="ph1">&lt;xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType&gt;</ph> property in your form's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event-handling method to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">폼 수준 에서만 키보드 이벤트를 처리 하 고 키보드 이벤트를 수신할 다른 컨트롤에서는 설정는 <ph id="ph1">&lt;xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType&gt;</ph> 속성 폼의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> 이벤트 처리 메서드를 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyDown">
          <source>Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically.</source>
          <target state="translated">탭, 리턴, ESC, 및 화살표 키 등의 특정 키 컨트롤에서 자동으로 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyDown">
          <source>To have these keys raise the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event, you must override the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> method in each control on your form.</source>
          <target state="translated">이러한 키에 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> 재정의 해야 이벤트에는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> 양식의 각 컨트롤의 메서드.</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyDown">
          <source>The code for the override of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> would need to determine if one of the special keys is pressed and return a value of <ph id="ph2">`true`</ph>.</source>
          <target state="translated">재정의 위한 코드는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> 특수 키 중 하나를 누를 경우를 결정 하 고 값을 반환 해야 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyDown">
          <source>Instead of overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> method, you can handle the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> event and set the <ph id="ph3">&lt;xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
          <target state="translated">재정의 하는 대신는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> 메서드를 처리할 수 있습니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> 이벤트 집합과 <ph id="ph3">&lt;xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A&gt;</ph> 속성을 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyDown">
          <source>For a code example, see the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> event.</source>
          <target state="translated">코드 예제를 참조 하십시오.는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyDown">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyDown">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event to determine the type of character entered into the control.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> 컨트롤에 입력 한 문자 형식을 결정 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.KeyPress">
          <source>Occurs when a character.</source>
          <target state="translated">컨트롤에 포커스가 있을 때 문자, 스페이스 또는 백스페이스 키를 누르면</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.KeyPress">
          <source>space or backspace key is pressed while the control has focus.</source>
          <target state="translated">발생합니다.</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyPress">
          <source>Key events occur in the following order:</source>
          <target state="translated">주요 이벤트는 다음 순서 대로 발생합니다.</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyPress">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event is not raised by non-character keys other than space and backspace; however, the non-character keys do raise the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> events.</source>
          <target state="translated">그러나 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> 공간과 백스페이스 이외의 문자가 아닌 키에 의해 이벤트가 발생 하지 않습니다; 문자가 아닌 키 발생 마십시오.는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyPress">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A&gt;</ph> property to sample keystrokes at run time and to consume or modify a subset of common keystrokes.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A&gt;</ph> 샘플 키 입력을 런타임 시를 사용 하거나 공통 키 입력의 하위 집합을 수정 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyPress">
          <source>To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <ph id="ph1">&lt;xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType&gt;</ph> property in your form's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event-handling method to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">폼 수준 에서만 키보드 이벤트를 처리 하 고 키보드 이벤트를 수신할 다른 컨트롤에서는 설정는 <ph id="ph1">&lt;xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType&gt;</ph> 속성 폼의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> 이벤트 처리 메서드를 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyPress">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyPress">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event to prevent characters from entering the control.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> 문자가 컨트롤에 진입 하지 못하도록 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.KeyUp">
          <source>Occurs when a key is released while the control has focus.</source>
          <target state="translated">컨트롤에 포커스가 있을 때 키를 눌렀다 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyUp">
          <source>Key events occur in the following order:</source>
          <target state="translated">주요 이벤트는 다음 순서 대로 발생합니다.</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyUp">
          <source>To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <ph id="ph1">&lt;xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType&gt;</ph> property in your form's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event-handling method to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">폼 수준 에서만 키보드 이벤트를 처리 하 고 키보드 이벤트를 수신할 다른 컨트롤에서는 설정는 <ph id="ph1">&lt;xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType&gt;</ph> 속성 폼의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> 이벤트 처리 메서드를 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyUp">
          <source>Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically.</source>
          <target state="translated">탭, 리턴, ESC, 및 화살표 키 등의 특정 키 컨트롤에서 자동으로 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyUp">
          <source>To have these keys raise the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> event, you must override the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> method in each control on your form.</source>
          <target state="translated">이러한 키에 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> 재정의 해야 이벤트에는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> 양식의 각 컨트롤의 메서드.</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyUp">
          <source>The code for the override of <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> would need to determine if one of the special keys is pressed and return a value of <ph id="ph2">`true`</ph>.</source>
          <target state="translated">재정의 위한 코드 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> 특수 키 중 하나를 누를 경우를 결정 하 고 값을 반환 해야 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyUp">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.KeyUp">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> event with the <ph id="ph2">&lt;xref:System.Windows.Forms.Help&gt;</ph> class to display pop-up style help to the user.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> 인 이벤트는 <ph id="ph2">&lt;xref:System.Windows.Forms.Help&gt;</ph> 사용자에 게 팝업 스타일 도움말을 표시 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.Layout">
          <source>Occurs when a control should reposition its child controls.</source>
          <target state="translated">컨트롤이 자식 컨트롤의 위치를 변경하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Layout">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event occurs when child controls are added or removed, when the bounds of the control changes, and when other changes occur that can affect the layout of the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 이벤트 때 자식 컨트롤을 추가 하거나 제거할 범위 컨트롤 변경 되 고 있는 다른 변경 내용이 있을 수는 컨트롤의 레이아웃에 영향을 줄 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Layout">
          <source>The layout event can be suppressed using the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> methods.</source>
          <target state="translated">레이아웃 이벤트를 사용 하 여 보류 될 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Layout">
          <source>Suspending layout enables you to perform multiple actions on a control without having to perform a layout for each change.</source>
          <target state="translated">레이아웃을 일시 중단을 사용 하면 각 변경에 대 한 레이아웃을 수행 하지 않고도 컨트롤에서 여러 동작을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Layout">
          <source>For example, if you resize and move a control, each operation would raise a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event.</source>
          <target state="translated">예를 들어, 크기를 조정 하 고 컨트롤을 이동 하는 경우 각 작업 발생 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Layout">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Layout">
          <source>The following code example centers a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> on the screen in the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event.</source>
          <target state="translated">다음 코드 예제에서는 센터는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 화면에서 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Layout">
          <source>This will keep the form centered as the user resizes it.</source>
          <target state="translated">이렇게 하면 사용자가 크기 조정으로 가운데 맞춤 폼을 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Layout">
          <source>This example requires that you have created a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> control.</source>
          <target state="translated">이 예제에서는 만든는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.LayoutEngine">
          <source>Gets a cached instance of the control's layout engine.</source>
          <target state="translated">컨트롤 레이아웃 엔진의 캐시된 인스턴스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.LayoutEngine">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Layout.LayoutEngine" /&gt;</ph> for the control's contents.</source>
          <target state="translated">컨트롤의 내용에 대한 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Layout.LayoutEngine" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.LayoutEngine">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.LayoutEngine%2A&gt;</ph> property gets the layout engine for the control's children rather than for the control itself.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.LayoutEngine%2A&gt;</ph> 속성 컨트롤의 자식에 대 한 아닌 컨트롤 자체에 대 한 레이아웃 엔진을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.Leave">
          <source>Occurs when the input focus leaves the control.</source>
          <target state="translated">입력 포커스가 컨트롤을 벗어나면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Leave">
          <source>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> methods, or by setting the <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType&gt;</ph> property to the current form, focus events occur in the following order:</source>
          <target state="translated">호출 하 여 키보드 (TAB, SHIFT + TAB 등)를 사용 하 여 포커스를 변경 하면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> 메서드를 설정 하거나는 <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType&gt;</ph> 속성을 현재 폼으로 포커스 이벤트가 다음 순서 대로 발생:</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Leave">
          <source>When you change the focus by using the mouse or by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> method, focus events occur in the following order:</source>
          <target state="translated">마우스를 사용 하거나 호출 하 여 포커스를 변경 하면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> 메서드, 포커스 이벤트가 다음 순서 대로 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Leave">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> events are suppressed.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> 속성이 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> 이벤트는 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Leave">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> events are suppressed by the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> 이벤트에 의해 표시 되는 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Leave">
          <source>The equivalent events in the <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> class are the <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Activated&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Form.Deactivate&gt;</ph> events.</source>
          <target state="translated">에 해당 하는 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 클래스는 <ph id="ph2">&lt;xref:System.Windows.Forms.Form.Activated&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Form.Deactivate&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Leave">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> 이벤트는 계층적 및 적절 한 컨트롤에 도달할 때까지 부모 체인 위쪽 및 아래쪽 연계 됩니다.</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Leave">
          <source>For example, assume you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with two <ph id="ph2">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> controls, and each <ph id="ph3">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> control has one <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control.</source>
          <target state="translated">예를 들어 있다고 가정는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 두 개의 <ph id="ph2">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> 컨트롤 및 각 <ph id="ph3">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> 컨트롤에 하나 <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Leave">
          <source>When the caret is moved from one <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> to the other, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> event is raised for the <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph>, and the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> event is raised for the other <ph id="ph6">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> and <ph id="ph7">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">하나에서 캐럿을 이동할 때 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 다른는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> 에 대 한 이벤트는 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> 이벤트가 발생 하면 다른 <ph id="ph6">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> 및 <ph id="ph7">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Leave">
          <source>Do not attempt to set focus from within the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event handlers.</source>
          <target state="translated">내에서 포커스를 설정 하지 마십시오는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, 또는 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Leave">
          <source>Doing so can cause your application or the operating system to stop responding.</source>
          <target state="translated">이렇게 하면 응용 프로그램 또는 운영 체제 응답 하지 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Leave">
          <source>For more information, see the <bpt id="p1">[</bpt>WM_KILLFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> topic.</source>
          <target state="translated">자세한 내용은 참조는 <bpt id="p1">[</bpt>WM_KILLFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Leave">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Leave">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> event to reset a control to its former state.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> 컨트롤을 이전 상태로 다시 설정 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Left">
          <source>Gets or sets the distance, in pixels, between the left edge of the control and the left edge of its container's client area.</source>
          <target state="translated">컨트롤의 왼쪽 가장자리와 해당 컨테이너 클라이언트 영역의 왼쪽 가장자리 사이의 거리(픽셀)를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Left">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> representing the distance, in pixels, between the left edge of the control and the left edge of its container's client area.</source>
          <target state="translated">컨트롤의 왼쪽 가장자리와 해당 컨테이너 클라이언트 영역의 왼쪽 가장자리 사이의 거리(픽셀)를 나타내는 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Left">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph> property value is equivalent to the <ph id="ph2">&lt;xref:System.Drawing.Point.X%2A?displayProperty=nameWithType&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property value of the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph> 속성 값은 해당 하는 <ph id="ph2">&lt;xref:System.Drawing.Point.X%2A?displayProperty=nameWithType&gt;</ph> 의 속성은 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> 컨트롤의 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Left">
          <source>Changes made to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph> property values cause the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Right%2A&gt;</ph> property value of the control to change.</source>
          <target state="translated">변경 내용을 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph> 속성 값은 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Right%2A&gt;</ph> 변경 하려면 컨트롤의 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Left">
          <source>The following code example creates three <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls on a form and sets their size and location by using the various size-related and location-related properties.</source>
          <target state="translated">다음 코드 예제에서는 세 개를 만들며 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 폼에서 제어 하 고 다양 한 크기 및 위치 관련 속성을 사용 하 여 해당 크기와 위치를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Left">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that has a width and height of at least 300 pixels.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 하에 너비와 높이가 이상 300 픽셀입니다.</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Location">
          <source>Gets or sets the coordinates of the upper-left corner of the control relative to the upper-left corner of its container.</source>
          <target state="translated">해당 컨테이너의 왼쪽 위 모퉁이를 기준으로 컨트롤의 왼쪽 위 모퉁이의 좌표를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Location">
          <source>The <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph> that represents the upper-left corner of the control relative to the upper-left corner of its container.</source>
          <target state="translated">해당 컨테이너의 왼쪽 위 모퉁이를 기준으로 하여 컨트롤의 왼쪽 위 모퉁이를 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Location">
          <source>Because the <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> class is a value type (<ph id="ph2">`Structure`</ph> in Visual Basic, <ph id="ph3">`struct`</ph> in Visual C#), it is returned by value, meaning accessing the property returns a copy of the upper-left point of the control.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> 클래스는 값 형식 (<ph id="ph2">`Structure`</ph> Visual Basic의 <ph id="ph3">`struct`</ph> Visual C#), 컨트롤의 왼쪽 위 지점이의 복사본을 반환 하는 속성에 액세스를 의미 하는 값으로 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Location">
          <source>So, adjusting the <ph id="ph1">&lt;xref:System.Drawing.Point.X%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Drawing.Point.Y%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph> returned from this property will not affect the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Right%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph>, or <ph id="ph7">&lt;xref:System.Windows.Forms.Control.Bottom%2A&gt;</ph> property values of the control.</source>
          <target state="translated">따라서 조정는 <ph id="ph1">&lt;xref:System.Drawing.Point.X%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Drawing.Point.Y%2A&gt;</ph> 의 속성에서 <ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph> 이에서 반환 된 속성에 영향을 주지 것입니다는 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Right%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph>, 또는 <ph id="ph7">&lt;xref:System.Windows.Forms.Control.Bottom%2A&gt;</ph> 컨트롤의 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Location">
          <source>To adjust these properties set each property value individually, or set the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property with a new <ph id="ph2">&lt;xref:System.Drawing.Point&gt;</ph>.</source>
          <target state="translated">각 속성 값을 개별적으로 설정 하거나 설정 이러한 속성을 조정 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> 를 새 속성 <ph id="ph2">&lt;xref:System.Drawing.Point&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Location">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> is a <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property value represents the upper-left corner of the <ph id="ph4">&lt;xref:System.Windows.Forms.Form&gt;</ph> in screen coordinates.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 는 <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> 속성 값의 왼쪽 위 모퉁이 나타내는 <ph id="ph4">&lt;xref:System.Windows.Forms.Form&gt;</ph> 화면 좌표에서입니다.</target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Location">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> and sets some of its common properties.</source>
          <target state="translated">다음 코드 예제에서는 한 <ph id="ph1">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> 공통 속성 중 일부를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Location">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> and sets its <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> within the group box.</source>
          <target state="translated">이 예에서는 만듭니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 설정 하 고 해당 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> 그룹 상자 내에서.</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Location">
          <source>Next, it sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property of the group box, and docks the group box to the top of the form.</source>
          <target state="translated">그런 다음 설정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 그룹 상자 및 폼의 위쪽에 도킹 된 그룹 상자 속성입니다.</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Location">
          <source>Lastly, it disables the group box by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> property to <ph id="ph2">`false`</ph>, which causes all controls contained within the group box to be disabled.</source>
          <target state="translated">마지막으로, 그룹 상자 설정 하 여 비활성화는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> 속성을 <ph id="ph2">`false`</ph>, 사용 하지 않도록 설정할 그룹 상자에 포함 된 모든 컨트롤에 이르게 됩니다.</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.LocationChanged">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Location" /&gt;</ph> property value has changed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Location" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LocationChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property is changed by either a programmatic modification or through interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> 속성이 상호 작용을 통해 또는 프로그래밍 방식으로 수정으로 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LocationChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LocationChanged">
          <source>The following code example raises the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.LocationChanged&gt;</ph> event on a <ph id="ph2">&lt;xref:System.Windows.Forms.StatusStrip&gt;</ph> when the form is resized.</source>
          <target state="translated">다음 코드 예제에서는 발생은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.LocationChanged&gt;</ph> 이벤트에는 <ph id="ph2">&lt;xref:System.Windows.Forms.StatusStrip&gt;</ph> 폼 크기를 조정할 때.</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.LogicalToDeviceUnits(System.Int32)">
          <source>The Logical value to convert.</source>
          <target state="translated">변환할 논리 값입니다.</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.LogicalToDeviceUnits(System.Int32)">
          <source>Converts a Logical DPI value to it's equivalent DeviceUnit DPI value.</source>
          <target state="translated">논리적 DPI 값을 동등한 DeviceUnit DPI 값으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.LogicalToDeviceUnits(System.Int32)">
          <source>The resulting DeviceUnit value.</source>
          <target state="translated">결과 DeviceUnit 값입니다.</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>Occurs when the control loses focus.</source>
          <target state="translated">컨트롤이 포커스를 잃을 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> methods, or by setting the <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType&gt;</ph> property to the current form, focus events occur in the following order:</source>
          <target state="translated">호출 하 여 키보드 (TAB, SHIFT + TAB 등)를 사용 하 여 포커스를 변경 하면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> 메서드를 설정 하거나는 <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType&gt;</ph> 속성을 현재 폼으로 포커스 이벤트가 다음 순서 대로 발생:</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>When you change the focus by using the mouse or by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> method, focus events occur in the following order:</source>
          <target state="translated">마우스를 사용 하거나 호출 하 여 포커스를 변경 하면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> 메서드, 포커스 이벤트가 다음 순서 대로 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> events are suppressed.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> 속성이 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> 이벤트는 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>If the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> is set to <ph id="ph3">`true`</ph> in the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event delegate, all events that would usually occur after the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event are suppressed.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> 속성은 <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> 로 설정 된 <ph id="ph3">`true`</ph> 에 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> 후 일반적으로 발생 하는 모든 이벤트, 이벤트 대리자는 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> 이벤트는 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> 이벤트는 WM_KILLFOCUS 및 WM_SETFOCUS Windows 메시지에 연결 된 하위 수준 포커스 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>Typically, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> events are only used when updating <ph id="ph3">&lt;xref:System.Windows.Forms.UICues&gt;</ph> or when writing custom controls.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> 이벤트는 업데이트할 때에 사용 되 <ph id="ph3">&lt;xref:System.Windows.Forms.UICues&gt;</ph> 때나 사용자 지정 컨트롤을 작성 합니다.</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>Instead the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> events should be used for all controls except the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> class, which uses the <ph id="ph4">&lt;xref:System.Windows.Forms.Form.Activated&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Forms.Form.Deactivate&gt;</ph> events.</source>
          <target state="translated">대신는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> 제외한 모든 컨트롤에 사용할 이벤트는 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> 클래스를 사용 하는 <ph id="ph4">&lt;xref:System.Windows.Forms.Form.Activated&gt;</ph> 및 <ph id="ph5">&lt;xref:System.Windows.Forms.Form.Deactivate&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>For more information about the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> events, see the <bpt id="p1">[</bpt>WM_KILLFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> and <bpt id="p2">[</bpt>WM_KILLFOCUS<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> topics.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> 이벤트 참조는 <bpt id="p1">[</bpt>WM_KILLFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> 및 <bpt id="p2">[</bpt>WM_KILLFOCUS<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>Do not attempt to set focus from within the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event handlers.</source>
          <target state="translated">내에서 포커스를 설정 하지 마십시오는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, 또는 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>Doing so can cause your application or the operating system to stop responding.</source>
          <target state="translated">이렇게 하면 응용 프로그램 또는 운영 체제 응답 하지 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>For more information, see the <bpt id="p1">[</bpt>WM_KILLFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> topic.</source>
          <target state="translated">자세한 내용은 참조는 <bpt id="p1">[</bpt>WM_KILLFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>The following code example demonstrates validating the text for TextBox1.</source>
          <target state="translated">다음 코드 예제에서는 TextBox1에 대 한 텍스트 유효성을 검사 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>It also demonstrates handling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> event by setting the <ph id="ph2">&lt;xref:System.Windows.Forms.FileDialog.InitialDirectory%2A?displayProperty=nameWithType&gt;</ph> property to the text in TextBox1.</source>
          <target state="translated">처리 하는 방법도 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph> 설정 하 여 이벤트는 <ph id="ph2">&lt;xref:System.Windows.Forms.FileDialog.InitialDirectory%2A?displayProperty=nameWithType&gt;</ph> 텍스트 TextBox1에는 속성입니다.</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>The code example used the <ph id="ph1">&lt;xref:System.Windows.Forms.ErrorProvider.GetError%2A?displayProperty=nameWithType&gt;</ph> method to check for an error before opening the file dialog box.</source>
          <target state="translated">사용 되는 코드 예제는 <ph id="ph1">&lt;xref:System.Windows.Forms.ErrorProvider.GetError%2A?displayProperty=nameWithType&gt;</ph> 파일 대화 상자를 열기 전에 오류에 대 한 검사 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>To run this example, paste the following code into a form containing a <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> named <ph id="ph2">`TextBox1`</ph>, an <ph id="ph3">&lt;xref:System.Windows.Forms.OpenFileDialog&gt;</ph> named <ph id="ph4">`OpenFileDialog1`</ph>, a <ph id="ph5">&lt;xref:System.Windows.Forms.Button&gt;</ph> named <ph id="ph6">`Button1`</ph>, and an <ph id="ph7">&lt;xref:System.Windows.Forms.ErrorProvider&gt;</ph> named <ph id="ph8">`ErrorProvider1`</ph>.</source>
          <target state="translated">이 예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 라는 <ph id="ph2">`TextBox1`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.OpenFileDialog&gt;</ph> 라는 <ph id="ph4">`OpenFileDialog1`</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Button&gt;</ph> 라는 <ph id="ph6">`Button1`</ph>, 및 <ph id="ph7">&lt;xref:System.Windows.Forms.ErrorProvider&gt;</ph> 라는 <ph id="ph8">`ErrorProvider1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.LostFocus">
          <source>Ensure all events are associated with their event handlers.</source>
          <target state="translated">모든 이벤트가 해당 이벤트 처리기와 연결 되어 있는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Margin">
          <source>Gets or sets the space between controls.</source>
          <target state="translated">컨트롤 사이의 공백을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Margin">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Padding" /&gt;</ph> representing the space between controls.</source>
          <target state="translated">컨트롤 사이의 공백을 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Padding" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Margin">
          <source>Controls receive default values for <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Margin%2A&gt;</ph> that are reasonably close to Windows user interface guidelines.</source>
          <target state="translated">컨트롤에 대 한 기본값을 받을 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Margin%2A&gt;</ph> 합리적으로 Windows 사용자 인터페이스 지침 가까운 않은 합니다.</target>       </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Margin">
          <source>Some adjustments might still be necessary for particular applications.</source>
          <target state="translated">약간씩 조정 특정 응용 프로그램에 필요할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Margin">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Margin%2A&gt;</ph> property on a docked control has no effect on the distance of the control from the edges of its container.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Margin%2A&gt;</ph> 도킹된 된 컨트롤에 속성에는 해당 컨테이너의 가장자리에서 컨트롤의 거리에 대 한 영향을 주지 않습니다.</target>       </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.MarginChanged">
          <source>Occurs when the control's margin changes.</source>
          <target state="translated">컨트롤의 여백이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MarginChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MarginChanged">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MarginChanged">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MarginChanged&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MarginChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MarginChanged">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MarginChanged">
          <source>To report on multiple events or on events that occur frequently, consider replacing <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> with <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or appending the message to a multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 여러 줄에 메시지를 추가 하거나 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MarginChanged">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MarginChanged">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MarginChanged&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MarginChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.MaximumSize">
          <source>Gets or sets the size that is the upper limit that <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /&gt;</ph> can specify.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /&gt;</ph>에서 지정할 수 있는 상한을 나타내는 크기를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.MaximumSize">
          <source>An ordered pair of type <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> representing the width and height of a rectangle.</source>
          <target state="translated">사각형의 너비와 높이를 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> 형식의 정렬된 쌍입니다.</target>       </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.MinimumSize">
          <source>Gets or sets the size that is the lower limit that <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /&gt;</ph> can specify.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /&gt;</ph>에서 지정할 수 있는 하한을 나타내는 크기를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.MinimumSize">
          <source>An ordered pair of type <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> representing the width and height of a rectangle.</source>
          <target state="translated">사각형의 너비와 높이를 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> 형식의 정렬된 쌍입니다.</target>       </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.ModifierKeys">
          <source>Gets a value indicating which of the modifier keys (SHIFT, CTRL, and ALT) is in a pressed state.</source>
          <target state="translated">누른 상태에 있는 보조키(SHIFT, CTRL 및 ALT)를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ModifierKeys">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Keys" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Keys" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ModifierKeys">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.Forms.Keys.None" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.Forms.Keys.None" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ModifierKeys">
          <source>The following code example hides a button when the CTRL key is pressed while the button is clicked.</source>
          <target state="translated">다음 코드 예제에서는 단추를 클릭 하는 동안 CTRL 키를 누르면 단추를 숨깁니다.</target>       </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ModifierKeys">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> named <ph id="ph2">`button1`</ph> on a <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 라는 <ph id="ph2">`button1`</ph> 에 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.MouseButtons">
          <source>Gets a value indicating which of the mouse buttons is in a pressed state.</source>
          <target state="translated">누른 상태에 있는 마우스 단추를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.MouseButtons">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.MouseButtons" /&gt;</ph> enumeration values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.MouseButtons" /&gt;</ph> 열거형 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.MouseButtons">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.Forms.MouseButtons.None" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.Forms.MouseButtons.None" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.MouseButtons">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.RectangleToScreen%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PointToScreen%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.MouseButtons%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph6">&lt;xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType&gt;</ph> members.</source>
          <target state="translated">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.RectangleToScreen%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PointToScreen%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.MouseButtons%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType&gt;</ph>, 및 <ph id="ph6">&lt;xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType&gt;</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.MouseButtons">
          <source>To run the example, paste the following code in a form called Form1 containing several controls.</source>
          <target state="translated">Form1 이라는 폼에는 예제를 실행 하려면 다음 코드를 붙여 여러 개의 컨트롤이 들어 있습니다.</target>       </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.MouseButtons">
          <source>This example requires that the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> events are connected to the event handlers defined in the example.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> 이벤트가 예에서 정의 된 이벤트 처리기에 연결 합니다.</target>       </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>Occurs when the control loses mouse capture.</source>
          <target state="translated">컨트롤이 마우스 캡처를 잃을 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>In rare scenarios, you might need to detect unexpected input.</source>
          <target state="translated">드문 경우 예기치 않은 입력을 검색 해야 합니다.</target>       </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>For example, consider the following scenarios.</source>
          <target state="translated">예를 들어 다음과 같은 시나리오를 고려 합니다.</target>       </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>During a mouse operation, the user opens the Start menu by pressing the Windows key or CTRL+ESC.</source>
          <target state="translated">마우스 작업을 사용 하는 동안 사용자는 Windows 키 또는 CTRL + ESC를 눌러 시작 메뉴를 엽니다.</target>       </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>During a mouse operation, the user switches to another program by pressing ALT+TAB.</source>
          <target state="translated">마우스 작업을 사용 하는 동안 사용자가 ALT + TAB을 눌러 다른 프로그램으로 전환 합니다.</target>       </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>During a mouse operation, another program displays a window or a message box that takes focus away from the current application.</source>
          <target state="translated">마우스 작업을 사용 하는 동안 다른 프로그램에는 창 또는 현재 응용 프로그램에서 포커스를 사용 하는 메시지 상자가 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>Mouse operations can include clicking and holding the mouse on a form or a control, or performing a mouse drag operation.</source>
          <target state="translated">폼 또는 컨트롤에서 마우스를 누르고 마우스 작업 포함 하거나 수행 마우스 끌기 작업.</target>       </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>If you have to detect when a form or a control loses mouse capture for these and related unexpected scenarios, you can use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseCaptureChanged&gt;</ph> event.</source>
          <target state="translated">컨트롤이 이러한 마우스 캡처를 손실 또는 양식 검색할 수 있는 경우 사용할 수 있습니다 관련된 예기치 않은 시나리오는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseCaptureChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>The following code example demonstrates the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseCaptureChanged&gt;</ph> event for a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> control.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseCaptureChanged&gt;</ph> 에 대 한 이벤트는 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>To test this example, run it in the debugger by pressing F5.</source>
          <target state="translated">이 예제를 테스트 하려면 f5 키를 눌러 디버거 실행 합니다.</target>       </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>Open the <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window in Visual Studio so that you can see when events are raised.</source>
          <target state="translated">열기는 <bpt id="p1">**</bpt>출력<ept id="p1">**</ept> Visual Studio의 창 이벤트는 발생 볼 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>Click the <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> and notice the following output.</source>
          <target state="translated">클릭는 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 는 다음과 같은 출력을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>Now, click and hold the left mouse button on the <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> control.</source>
          <target state="translated">이제를 누른 채로 마우스 왼쪽된 단추는 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>While still clicking the mouse, press ALT+TAB to switch to another program.</source>
          <target state="translated">마우스 클릭 한 상태를 다른 프로그램으로 전환 하려면 ALT + TAB 키를 누릅니다.</target>       </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseCaptureChanged&gt;</ph> event is raised enabling you to potentially handle this scenario.</source>
          <target state="translated">에 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseCaptureChanged&gt;</ph> 잠재적으로이 시나리오를 처리할 수 있도록 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>Depending on your actions, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> event might not be raised.</source>
          <target state="translated">작업에 따라는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> 이벤트가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseCaptureChanged">
          <source>You can also try this test with the Windows key or CTRL+ESC.</source>
          <target state="translated">Windows 키 또는 CTRL + ESC를 사용 하 여이 테스트를 시도할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.MouseClick">
          <source>Occurs when the control is clicked by the mouse.</source>
          <target state="translated">컨트롤을 마우스로 클릭할 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseClick">
          <source>Depressing a mouse button when the cursor is over a control typically raises the following series of events from the control:</source>
          <target state="translated">일반적으로 커서가 컨트롤 위에 있을 때 마우스 단추를 누르면 다음 일련을의 컨트롤에서 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseClick">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 이벤트</target>       </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseClick">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 이벤트</target>       </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseClick">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> 이벤트</target>       </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseClick">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> 이벤트</target>       </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseClick">
          <source>For this to occur, the various events cannot be disabled in the control's class.</source>
          <target state="translated">이 위해서는 컨트롤의 클래스에서 다양 한 이벤트를 해제할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseClick">
          <source>Two single clicks that occur close enough in time, as determined by the mouse settings of the user's operating system, will generate a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDoubleClick&gt;</ph> event instead of the second <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> event.</source>
          <target state="translated">두 번 클릭을 시간 내에 사용자의 운영 체제의 마우스 설정에서 결정 된 대로 생성 됩니다 발생 하는 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDoubleClick&gt;</ph> 이벤트 대신 두 번째 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseClick">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> events are logically higher-level events of a control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 이벤트는 컨트롤의 논리적으로 더 높은 수준의 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseClick">
          <source>They are often raised by other actions, such as pressing the ENTER key when the control has focus.</source>
          <target state="translated">이러한 이벤트는 대개 컨트롤에 포커스가 있을 때 ENTER 키를 누르는 것과 같은 다른 작업에 의해 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseClick">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseClick">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseClick">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseClick">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseClick">
          <source>To report on multiple events or on events that occur frequently, consider replacing <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> with <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or appending the message to a multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 여러 줄에 메시지를 추가 하거나 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseClick">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseClick">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source>Occurs when the control is double clicked by the mouse.</source>
          <target state="translated">컨트롤을 마우스로 두 번 클릭할 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDoubleClick&gt;</ph> event occurs when the user depresses a mouse button twice in quick succession when the cursor is over the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDoubleClick&gt;</ph> 이벤트 커서가 컨트롤 위에 있을 때 두 번 연속적으로에서 마우스 단추를 누를 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source>The time interval that separates two single clicks from a double-click is determined by the mouse settings of the user's operating system.</source>
          <target state="translated">시간 간격을 두 번 클릭에서 두 번 클릭을 구분 하는 사용자의 운영 체제의 마우스 설정에서 결정 됩니다.</target>       </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source>The following series of events is raised by the control when such a user action takes place:</source>
          <target state="translated">다음과 같은 일련의 이벤트는 이러한 사용자 작업이 실행 될 때 컨트롤에 의해 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 이벤트</target>       </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 이벤트</target>       </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> 이벤트</target>       </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> 이벤트</target>       </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 이벤트</target>       </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> 이벤트</target>       </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDoubleClick&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDoubleClick&gt;</ph> 이벤트</target>       </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> 이벤트</target>       </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source>For this to occur, the various events cannot be disabled in the control's class.</source>
          <target state="translated">이 위해서는 컨트롤의 클래스에서 다양 한 이벤트를 해제할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> events are logically higher-level events of a control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> 이벤트는 컨트롤의 논리적으로 더 높은 수준의 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source>They may be raised by other user actions, such as shortcut key combinations.</source>
          <target state="translated">이러한 바로 가기 키 조합 등의 다른 사용자 작업에 의해 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDoubleClick&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDoubleClick&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source>To report on multiple events or on events that occur frequently, consider replacing <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> with <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or appending the message to a multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 여러 줄에 메시지를 추가 하거나 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDoubleClick">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseDoubleClick&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseDoubleClick&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.MouseDown">
          <source>Occurs when the mouse pointer is over the control and a mouse button is pressed.</source>
          <target state="translated">마우스 포인터가 컨트롤 위에 있을 때 마우스 단추를 클릭하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDown">
          <source>Mouse events occur in the following order:</source>
          <target state="translated">마우스 이벤트는 다음 순서대로 발생합니다.</target>       </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDown">
          <source>The following events are not raised for the <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> class unless there is at least one <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType&gt;</ph> collection: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> and <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>.</source>
          <target state="translated">에 대 한 다음과 같은 이벤트가 발생 하지 않습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> 하나 이상 있으면 클래스 <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType&gt;</ph> 컬렉션: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> 및 <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDown">
          <source>If there is at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the collection, and the user interacts with the tab control's header (where the <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> names appear), the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> raises the appropriate event.</source>
          <target state="translated">둘 이상 있는 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 컬렉션에 사용자 탭 컨트롤의 헤더 상호 작용 하 고 (여기서는 <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 이름이 표시), <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> 적절 한 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDown">
          <source>However, if the user interaction is within the client area of the tab page, the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> raises the appropriate event.</source>
          <target state="translated">그러나 사용자 상호 작용 탭 페이지의 클라이언트 영역 내에 있으면는 <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 적절 한 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDown">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDown">
          <source>The following code example demonstrates using different mouse events to draw the path of the mouse on a <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 여러 마우스 이벤트를 사용 하 여 마우스의 경로에 그리는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDown">
          <source>A line segment is added to the <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> for each <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> events that occur.</source>
          <target state="translated">선 세그먼트에 추가 되는 <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> 각 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 발생 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDown">
          <source>To update the graphics, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method is called for the <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> on each <ph id="ph3">`MouseDown`</ph> and <ph id="ph4">`MouseUp`</ph> event.</source>
          <target state="translated">그래픽을 업데이트 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> 각 <ph id="ph3">`MouseDown`</ph> 및 <ph id="ph4">`MouseUp`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDown">
          <source>In addition, the graphic path is scrolled up or down when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> event occurs.</source>
          <target state="translated">그래픽 경로 때 위아래로 스크롤할 또한는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDown">
          <source>Additional mouse events, like <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, are identified on screen as well.</source>
          <target state="translated">와 같은 추가 마우스 이벤트 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, 화면에서 식별 됩니다.</target>       </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseDown">
          <source>Also displayed on the screen is additional information about the mouse from the <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> class.</source>
          <target state="translated">마우스에 대 한 추가 정보는 화면에 표시 된 <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.MouseEnter">
          <source>Occurs when the mouse pointer enters the control.</source>
          <target state="translated">마우스 포인터가 컨트롤에 들어가면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseEnter">
          <source>Mouse events occur in the following order:</source>
          <target state="translated">마우스 이벤트는 다음 순서대로 발생합니다.</target>       </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseEnter">
          <source>The following events are not raised for the <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> class unless there is at least one <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType&gt;</ph> collection: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> and <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>.</source>
          <target state="translated">에 대 한 다음과 같은 이벤트가 발생 하지 않습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> 하나 이상 있으면 클래스 <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType&gt;</ph> 컬렉션: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> 및 <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseEnter">
          <source>If there is at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the collection, and the user interacts with the tab control's header (where the <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> names appear), the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> raises the appropriate event.</source>
          <target state="translated">둘 이상 있는 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 컬렉션에 사용자 탭 컨트롤의 헤더 상호 작용 하 고 (여기서는 <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 이름이 표시), <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> 적절 한 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseEnter">
          <source>However, if the user interaction is within the client area of the tab page, the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> raises the appropriate event.</source>
          <target state="translated">그러나 사용자 상호 작용 탭 페이지의 클라이언트 영역 내에 있으면는 <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 적절 한 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseEnter">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseEnter">
          <source>The following code example demonstrates using different mouse events to draw the path of the mouse on a <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 여러 마우스 이벤트를 사용 하 여 마우스의 경로에 그리는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseEnter">
          <source>A line segment is added to the <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> for each <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> events that occur.</source>
          <target state="translated">선 세그먼트에 추가 되는 <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> 각 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 발생 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseEnter">
          <source>To update the graphics, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method is called for the <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> on each <ph id="ph3">`MouseDown`</ph> and <ph id="ph4">`MouseUp`</ph> event.</source>
          <target state="translated">그래픽을 업데이트 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> 각 <ph id="ph3">`MouseDown`</ph> 및 <ph id="ph4">`MouseUp`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseEnter">
          <source>In addition, the graphic path is scrolled up or down when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> event occurs.</source>
          <target state="translated">그래픽 경로 때 위아래로 스크롤할 또한는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseEnter">
          <source>Additional mouse events, like <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, are identified on screen as well.</source>
          <target state="translated">와 같은 추가 마우스 이벤트 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, 화면에서 식별 됩니다.</target>       </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseEnter">
          <source>Also displayed on the screen is additional information about the mouse from the <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> class.</source>
          <target state="translated">마우스에 대 한 추가 정보는 화면에 표시 된 <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.MouseHover">
          <source>Occurs when the mouse pointer rests on the control.</source>
          <target state="translated">마우스 포인터가 컨트롤 위에 있을 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseHover">
          <source>A typical use of <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph> is to display a tool tip when the mouse pauses on a control within a specified area around the control (the "hover rectangle").</source>
          <target state="translated">일반적인 사용 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph> ("호버 사각형")는 컨트롤 주위의 지정된 된 영역 내에서 컨트롤에서 마우스를 놓을 때 도구 설명 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseHover">
          <source>The pause required for this event to be raised is specified in milliseconds by the <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A&gt;</ph> property.</source>
          <target state="translated">이 이벤트를 발생 하는 데 필요한 일시 중지 하 여 밀리초 단위로 지정 된는 <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseHover">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph> event is defined and detected in connection with the <ph id="ph2">&lt;xref:System.Windows.Forms.SystemInformation.MouseHoverSize%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A&gt;</ph> properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph> 이벤트 정의 되 고 연결 하 여 검색 된 <ph id="ph2">&lt;xref:System.Windows.Forms.SystemInformation.MouseHoverSize%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseHover">
          <source>Mouse events occur in the following order:</source>
          <target state="translated">마우스 이벤트는 다음 순서대로 발생합니다.</target>       </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseHover">
          <source>The following events are not raised for the <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> class unless there is at least one <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType&gt;</ph> collection: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> and <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>.</source>
          <target state="translated">에 대 한 다음과 같은 이벤트가 발생 하지 않습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> 하나 이상 있으면 클래스 <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType&gt;</ph> 컬렉션: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> 및 <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseHover">
          <source>If there is at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the collection, and the user interacts with the tab control's header (where the <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> names appear), the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> raises the appropriate event.</source>
          <target state="translated">둘 이상 있는 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 컬렉션에 사용자 탭 컨트롤의 헤더 상호 작용 하 고 (여기서는 <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 이름이 표시), <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> 적절 한 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseHover">
          <source>However, if the user interaction is within the client area of the tab page, the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> raises the appropriate event.</source>
          <target state="translated">그러나 사용자 상호 작용 탭 페이지의 클라이언트 영역 내에 있으면는 <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 적절 한 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseHover">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseHover">
          <source>The following code example demonstrates using different mouse events to draw the path of the mouse on a <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 여러 마우스 이벤트를 사용 하 여 마우스의 경로에 그리는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseHover">
          <source>A line segment is added to the <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> for each <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> events that occur.</source>
          <target state="translated">선 세그먼트에 추가 되는 <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> 각 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 발생 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseHover">
          <source>To update the graphics, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method is called for the <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> on each <ph id="ph3">`MouseDown`</ph> and <ph id="ph4">`MouseUp`</ph> event.</source>
          <target state="translated">그래픽을 업데이트 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> 각 <ph id="ph3">`MouseDown`</ph> 및 <ph id="ph4">`MouseUp`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseHover">
          <source>In addition, the graphic path is scrolled up or down when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> event occurs.</source>
          <target state="translated">그래픽 경로 때 위아래로 스크롤할 또한는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseHover">
          <source>Additional mouse events, like <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, are identified on screen as well.</source>
          <target state="translated">와 같은 추가 마우스 이벤트 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, 화면에서 식별 됩니다.</target>       </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseHover">
          <source>Also displayed on the screen is additional information about the mouse from the <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> class.</source>
          <target state="translated">마우스에 대 한 추가 정보는 화면에 표시 된 <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.MouseLeave">
          <source>Occurs when the mouse pointer leaves the control.</source>
          <target state="translated">마우스 포인터가 컨트롤을 벗어나면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseLeave">
          <source>Mouse events occur in the following order:</source>
          <target state="translated">마우스 이벤트는 다음 순서대로 발생합니다.</target>       </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseLeave">
          <source>The following events are not raised for the <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> class unless there is at least one <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType&gt;</ph> collection: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> and <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>.</source>
          <target state="translated">에 대 한 다음과 같은 이벤트가 발생 하지 않습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> 하나 이상 있으면 클래스 <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType&gt;</ph> 컬렉션: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> 및 <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseLeave">
          <source>If there is at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the collection, and the user interacts with the tab control's header (where the <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> names appear), the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> raises the appropriate event.</source>
          <target state="translated">둘 이상 있는 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 컬렉션에 사용자 탭 컨트롤의 헤더 상호 작용 하 고 (여기서는 <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 이름이 표시), <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> 적절 한 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseLeave">
          <source>However, if the user interaction is within the client area of the tab page, the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> raises the appropriate event.</source>
          <target state="translated">그러나 사용자 상호 작용 탭 페이지의 클라이언트 영역 내에 있으면는 <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 적절 한 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseLeave">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseLeave">
          <source>The following code example demonstrates using different mouse events to draw the path of the mouse on a <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 여러 마우스 이벤트를 사용 하 여 마우스의 경로에 그리는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseLeave">
          <source>A line segment is added to the <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> for each <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> events that occur.</source>
          <target state="translated">선 세그먼트에 추가 되는 <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> 각 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 발생 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseLeave">
          <source>To update the graphics, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method is called for the <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> on each <ph id="ph3">`MouseDown`</ph> and <ph id="ph4">`MouseUp`</ph> event.</source>
          <target state="translated">그래픽을 업데이트 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> 각 <ph id="ph3">`MouseDown`</ph> 및 <ph id="ph4">`MouseUp`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseLeave">
          <source>In addition, the graphic path is scrolled up or down when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> event occurs.</source>
          <target state="translated">그래픽 경로 때 위아래로 스크롤할 또한는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseLeave">
          <source>Additional mouse events, like <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, are identified on screen as well.</source>
          <target state="translated">와 같은 추가 마우스 이벤트 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, 화면에서 식별 됩니다.</target>       </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseLeave">
          <source>Also displayed on the screen is additional information about the mouse from the <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> class.</source>
          <target state="translated">마우스에 대 한 추가 정보는 화면에 표시 된 <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.MouseMove">
          <source>Occurs when the mouse pointer is moved over the control.</source>
          <target state="translated">마우스 포인터를 컨트롤 위로 이동하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseMove">
          <source>Typical uses of <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> are to change the control's color or to paint a raised rectangle around the control.</source>
          <target state="translated">일반적 사용 범위 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> 컨트롤 주위에 나타나는 사각형을 그리는 데 또는 컨트롤의 색을 변경 합니다.</target>       </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseMove">
          <source>Mouse events occur in the following order:</source>
          <target state="translated">마우스 이벤트는 다음 순서대로 발생합니다.</target>       </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseMove">
          <source>The following events are not raised for the <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> class unless there is at least one <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType&gt;</ph> collection: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> and <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>.</source>
          <target state="translated">에 대 한 다음과 같은 이벤트가 발생 하지 않습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> 하나 이상 있으면 클래스 <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType&gt;</ph> 컬렉션: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> 및 <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseMove">
          <source>If there is at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the collection, and the user interacts with the tab control's header (where the <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> names appear), the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> raises the appropriate event.</source>
          <target state="translated">둘 이상 있는 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 컬렉션에 사용자 탭 컨트롤의 헤더 상호 작용 하 고 (여기서는 <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 이름이 표시), <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> 적절 한 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseMove">
          <source>However, if the user interaction is within the client area of the tab page, the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> raises the appropriate event.</source>
          <target state="translated">그러나 사용자 상호 작용 탭 페이지의 클라이언트 영역 내에 있으면는 <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 적절 한 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseMove">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseMove">
          <source>The following code example demonstrates using different mouse events to draw the path of the mouse on a <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 여러 마우스 이벤트를 사용 하 여 마우스의 경로에 그리는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseMove">
          <source>A line segment is added to the <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> for each <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> events that occur.</source>
          <target state="translated">선 세그먼트에 추가 되는 <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> 각 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 발생 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseMove">
          <source>To update the graphics, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method is called for the <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> on each <ph id="ph3">`MouseDown`</ph> and <ph id="ph4">`MouseUp`</ph> event.</source>
          <target state="translated">그래픽을 업데이트 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> 각 <ph id="ph3">`MouseDown`</ph> 및 <ph id="ph4">`MouseUp`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseMove">
          <source>In addition, the graphic path is scrolled up or down when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> event occurs.</source>
          <target state="translated">그래픽 경로 때 위아래로 스크롤할 또한는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseMove">
          <source>Additional mouse events, like <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, are identified on screen as well.</source>
          <target state="translated">와 같은 추가 마우스 이벤트 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, 화면에서 식별 됩니다.</target>       </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseMove">
          <source>Also displayed on the screen is additional information about the mouse from the <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> class.</source>
          <target state="translated">마우스에 대 한 추가 정보는 화면에 표시 된 <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.MousePosition">
          <source>Gets the position of the mouse cursor in screen coordinates.</source>
          <target state="translated">화면 좌표에서 마우스 커서의 위치를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.MousePosition">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph> that contains the coordinates of the mouse cursor relative to the upper-left corner of the screen.</source>
          <target state="translated">화면의 왼쪽 위 모퉁이를 기준으로 마우스 커서의 좌표가 포함된 <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.MousePosition">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MousePosition%2A&gt;</ph> property returns a <ph id="ph2">&lt;xref:System.Drawing.Point&gt;</ph> that represents the mouse cursor position at the time the property was referenced.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MousePosition%2A&gt;</ph> 속성에서 반환 된 <ph id="ph2">&lt;xref:System.Drawing.Point&gt;</ph> 은 속성이 참조 하는 시간에 마우스 커서 위치를 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.MousePosition">
          <source>The coordinates indicate the position on the screen, not relative to the control, and are returned regardless of whether the cursor is positioned over the control.</source>
          <target state="translated">좌표는 컨트롤을 기준으로 하지 않고 화면에서의 위치와 커서가 컨트롤 위에 위치 하는지 여부에 관계 없이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.MousePosition">
          <source>The coordinates of the upper-left corner of the screen are 0,0.</source>
          <target state="translated">화면의 왼쪽 위 모퉁이의 좌표는 0, 0입니다.</target>       </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.MousePosition">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MousePosition%2A&gt;</ph> property is identical to the <ph id="ph2">&lt;xref:System.Windows.Forms.Cursor.Position%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.MousePosition%2A&gt;</ph> 속성은 동일는 <ph id="ph2">&lt;xref:System.Windows.Forms.Cursor.Position%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.MousePosition">
          <source>The following code example puts a <ph id="ph1">&lt;xref:System.Windows.Forms.TreeNode&gt;</ph> label into an editable state when the user presses ALT+E while the mouse cursor is over the tree node.</source>
          <target state="translated">다음 코드 예제에서는 배치는 <ph id="ph1">&lt;xref:System.Windows.Forms.TreeNode&gt;</ph> 레이블을 마우스 커서가 트리 노드 위에 있는 동안 사용자가 ALT + E를 누를 때 편집 가능한 상태에 있습니다.</target>       </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.MousePosition">
          <source>After the user is done editing the label, the labels cannot be edited again until the ALT+E key combination is pressed again.</source>
          <target state="translated">사용자를 완료 한 후 레이블의 편집 레이블을 편집할 수 없는 다시 다시 키 조합 ALT + E를 누를 때까지 합니다.</target>       </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.MousePosition">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.TreeView&gt;</ph> on a <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.TreeView&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.MousePosition">
          <source>The tree view should also have at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TreeNode&gt;</ph> in its <ph id="ph2">&lt;xref:System.Windows.Forms.TreeView.Nodes%2A&gt;</ph> collection.</source>
          <target state="translated">트리 뷰에 있는 하나 이상의 <ph id="ph1">&lt;xref:System.Windows.Forms.TreeNode&gt;</ph> 에 해당 <ph id="ph2">&lt;xref:System.Windows.Forms.TreeView.Nodes%2A&gt;</ph> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.MouseUp">
          <source>Occurs when the mouse pointer is over the control and a mouse button is released.</source>
          <target state="translated">마우스 포인터가 컨트롤 위에 있을 때 마우스 단추를 눌렀다 놓으면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseUp">
          <source>Mouse events occur in the following order:</source>
          <target state="translated">마우스 이벤트는 다음 순서대로 발생합니다.</target>       </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseUp">
          <source>The following events are not raised for the <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> class unless there is at least one <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType&gt;</ph> collection: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> and <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>.</source>
          <target state="translated">에 대 한 다음과 같은 이벤트가 발생 하지 않습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> 하나 이상 있으면 클래스 <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType&gt;</ph> 컬렉션: <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Forms.Control.MouseEnter&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Forms.Control.MouseLeave&gt;</ph> 및 <ph id="ph11">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseUp">
          <source>If there is at least one <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> in the collection, and the user interacts with the tab control's header (where the <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> names appear), the <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> raises the appropriate event.</source>
          <target state="translated">둘 이상 있는 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 컬렉션에 사용자 탭 컨트롤의 헤더 상호 작용 하 고 (여기서는 <ph id="ph2">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 이름이 표시), <ph id="ph3">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> 적절 한 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseUp">
          <source>However, if the user interaction is within the client area of the tab page, the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> raises the appropriate event.</source>
          <target state="translated">그러나 사용자 상호 작용 탭 페이지의 클라이언트 영역 내에 있으면는 <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> 적절 한 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseUp">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseUp">
          <source>The following code example demonstrates using different mouse events to draw the path of the mouse on a <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 여러 마우스 이벤트를 사용 하 여 마우스의 경로에 그리는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseUp">
          <source>A line segment is added to the <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> for each <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> events that occur.</source>
          <target state="translated">선 세그먼트에 추가 되는 <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> 각 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 발생 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseUp">
          <source>To update the graphics, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method is called for the <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> on each <ph id="ph3">`MouseDown`</ph> and <ph id="ph4">`MouseUp`</ph> event.</source>
          <target state="translated">그래픽을 업데이트 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> 각 <ph id="ph3">`MouseDown`</ph> 및 <ph id="ph4">`MouseUp`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseUp">
          <source>In addition, the graphic path is scrolled up or down when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> event occurs.</source>
          <target state="translated">그래픽 경로 때 위아래로 스크롤할 또한는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseUp">
          <source>Additional mouse events, like <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, are identified on screen as well.</source>
          <target state="translated">와 같은 추가 마우스 이벤트 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, 화면에서 식별 됩니다.</target>       </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseUp">
          <source>Also displayed on the screen is additional information about the mouse from the <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> class.</source>
          <target state="translated">마우스에 대 한 추가 정보는 화면에 표시 된 <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.MouseWheel">
          <source>Occurs when the mouse wheel moves while the control has focus.</source>
          <target state="translated">컨트롤에 포커스가 있을 때 마우스 휠을 움직이면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseWheel">
          <source>When handling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> event it is important to follow the user interface (UI) standards associated with the mouse wheel.</source>
          <target state="translated">처리 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> 마우스 휠과 사용 하 여 관련 사용자 인터페이스 (UI) 표준을 준수 해야 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseWheel">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.MouseEventArgs.Delta%2A?displayProperty=nameWithType&gt;</ph> property value indicates the amount the mouse wheel has been moved.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.MouseEventArgs.Delta%2A?displayProperty=nameWithType&gt;</ph> 속성 값 크기 마우스 휠을 이동 되었는지 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseWheel">
          <source>The UI should scroll when the accumulated delta is plus or minus 120.</source>
          <target state="translated">델타 때 누적 된 델타 더하기 또는 빼기 120입니다.</target>       </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseWheel">
          <source>The UI should scroll the number of logical lines returned by the <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType&gt;</ph> property for every delta value reached.</source>
          <target state="translated">델타에서 반환 되는 논리 줄의 수는 <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType&gt;</ph> 모든 델타 값에 대 한 속성에 도달 합니다.</target>       </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseWheel">
          <source>You can also scroll more smoothly in smaller that 120 unit increments, however the ratio should remain constant, that is <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType&gt;</ph> lines scrolled per 120 delta units of wheel movement.</source>
          <target state="translated">스크롤할 수도 있습니다 더 원활 하 게에서 더 작은 120 단위 증가 시키는 그대로 유지, 즉 있지만 <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType&gt;</ph> 줄 비율은 120 델타 단위당 스크롤됩니다.</target>       </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseWheel">
          <source>For more information about handling mouse wheel messages, see the<bpt id="p1">[</bpt>WM_MOUSEWHEEL<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645617\(v=vs.85\).aspx)</ept>topic.</source>
          <target state="translated">마우스 휠 메시지를 처리 하는 방법에 대 한 자세한 내용은 참조는<bpt id="p1">[</bpt>WM_MOUSEWHEEL<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms645617\(v=vs.85\).aspx)</ept>항목입니다.</target>       </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseWheel">
          <source>Mouse events occur in the following order:</source>
          <target state="translated">마우스 이벤트는 다음 순서대로 발생합니다.</target>       </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseWheel">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseWheel">
          <source>The following code example demonstrates using different mouse events to draw the path of the mouse on a <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 여러 마우스 이벤트를 사용 하 여 마우스의 경로에 그리는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Panel&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseWheel">
          <source>A line segment is added to the <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> for each <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> events that occur.</source>
          <target state="translated">선 세그먼트에 추가 되는 <ph id="ph1">&lt;xref:System.Drawing.Drawing2D.GraphicsPath&gt;</ph> 각 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 발생 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseWheel">
          <source>To update the graphics, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method is called for the <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> on each <ph id="ph3">`MouseDown`</ph> and <ph id="ph4">`MouseUp`</ph> event.</source>
          <target state="translated">그래픽을 업데이트 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph> 각 <ph id="ph3">`MouseDown`</ph> 및 <ph id="ph4">`MouseUp`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseWheel">
          <source>In addition, the graphic path is scrolled up or down when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> event occurs.</source>
          <target state="translated">그래픽 경로 때 위아래로 스크롤할 또한는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseWheel&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseWheel">
          <source>Additional mouse events, like <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, are identified on screen as well.</source>
          <target state="translated">와 같은 추가 마우스 이벤트 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseHover&gt;</ph>, 화면에서 식별 됩니다.</target>       </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.MouseWheel">
          <source>Also displayed on the screen is additional information about the mouse from the <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> class.</source>
          <target state="translated">마우스에 대 한 추가 정보는 화면에 표시 된 <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.Move">
          <source>Occurs when the control is moved.</source>
          <target state="translated">컨트롤이 이동하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Move">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Move">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Move&gt;</ph> event to display the location of the form in screen coordinates on the caption bar of the form.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Move&gt;</ph> 폼의 캡션 표시줄에 화면 좌표에서 폼의 위치를 표시 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Name">
          <source>Gets or sets the name of the control.</source>
          <target state="translated">컨트롤의 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Name">
          <source>The name of the control.</source>
          <target state="translated">컨트롤의 이름입니다.</target>       </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Name">
          <source>The default is an empty string ("").</source>
          <target state="translated">기본값은 빈 문자열("")입니다.</target>       </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Name">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Name%2A&gt;</ph> property can be used at run time to evaluate the object by name rather than type and programmatic name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Name%2A&gt;</ph> 속성 있습니다 사용할 런타임 시 개체를 확인할 이름 보다는 형식 및 프로그래밍 방식으로 이름으로 합니다.</target>       </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Name">
          <source>Because the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Name%2A&gt;</ph> property returns a <ph id="ph2">&lt;xref:System.String&gt;</ph> type, it can be evaluated in case-style logic statements (<ph id="ph3">`Select`</ph> statement in Visual Basic, <ph id="ph4">`switch`</ph> statement in Visual C# and <ph id="ph5">[!INCLUDE[vcprvc](~/includes/vcprvc-md.md)]</ph>).</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Name%2A&gt;</ph> 속성에서 반환은 <ph id="ph2">&lt;xref:System.String&gt;</ph> 유형, 대/소문자 스타일 논리 문을에서 확인할 수 있습니다 (<ph id="ph3">`Select`</ph> Visual Basic의 문 <ph id="ph4">`switch`</ph> 문을 Visual C# 및 <ph id="ph5">[!INCLUDE[vcprvc](~/includes/vcprvc-md.md)]</ph>).</target>       </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Name">
          <source>The following code example displays the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Name%2A&gt;</ph> of a control in a <ph id="ph2">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph> when the control is added or removed from a form.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Name%2A&gt;</ph> 컨트롤에 대 한 <ph id="ph2">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph> 컨트롤 추가 또는 폼에서 제거할 때.</target>       </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.NotifyInvalidate(System.Drawing.Rectangle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph> representing the area to invalidate.</source>
          <target state="translated">무효화할 영역을 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.NotifyInvalidate(System.Drawing.Rectangle)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Invalidated" /&gt;</ph> event with a specified region of the control to invalidate.</source>
          <target state="translated">무효화할 컨트롤의 지정한 영역에서 <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Invalidated" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.AutoSizeChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.AutoSizeChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnAutoSizeChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnAutoSizeChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.BackColorChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.BackColorChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnBackColorChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnBackColorChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnBackgroundImageChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnBackgroundImageChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.BindingContextChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.BindingContextChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnBindingContextChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnBindingContextChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.CausesValidationChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.CausesValidationChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnCausesValidationChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnCausesValidationChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.UICuesEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.UICuesEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ChangeUICues" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ChangeUICues" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnChangeUICues%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnChangeUICues%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnClick(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnClick(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnClick(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnClick(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnClick(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnClick%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnClick%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnClick(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnClick(System.EventArgs)">
          <source>The following code example demonstrates overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnClick%2A&gt;</ph> method in a derived class.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnClick%2A&gt;</ph> 파생된 클래스에서 메서드.</target>       </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnClick(System.EventArgs)">
          <source>To run the example, paste the following code after a form class, in the same file.</source>
          <target state="translated">이 예제를 실행 하려면 같은 파일에 폼 클래스 뒤 다음 코드를 붙여 넣습니다.</target>       </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnClick(System.EventArgs)">
          <source>Add a textbox of type <ph id="ph1">`SingleClickTextBox`</ph> to the form.</source>
          <target state="translated">형식의 텍스트 상자 추가 <ph id="ph1">`SingleClickTextBox`</ph> 양식입니다.</target>       </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnClick(System.EventArgs)">
          <source>The following code example shows one of the many uses of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event and event handler.</source>
          <target state="translated">다음 코드 예제에서는의 여러 기능 중 하나는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 이벤트와 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnClick(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ClientSizeChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ClientSizeChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnClientSizeChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnClientSizeChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ContextMenuChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ContextMenuChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnContextMenuChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnContextMenuChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ContextMenuStripChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ContextMenuStripChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnContextMenuStripChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnContextMenuStripChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ControlEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ControlEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ControlAdded" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ControlAdded" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
          <source>Called when a child control is added to the control.</source>
          <target state="translated">자식 컨트롤이 컨트롤에 추가 될 때 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnControlAdded%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnControlAdded%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlAdded&gt;</ph> to add a control to a form and displays the name of the added control in a <ph id="ph2">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlAdded&gt;</ph> 폼에 컨트롤을 추가 하려면에 추가 된 컨트롤의 이름을 표시 한 <ph id="ph2">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ControlEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ControlEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ControlRemoved" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ControlRemoved" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
          <source>Called when a child control is removed from the control.</source>
          <target state="translated">자식 컨트롤이 컨트롤에서 제거 될 때 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnControlRemoved%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnControlRemoved%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlRemoved&gt;</ph> to remove a control from a form and displays the name of the removed control in a <ph id="ph2">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlRemoved&gt;</ph> 양식에서 컨트롤을 제거 하려면에 제거 된 컨트롤의 이름을 표시 한 <ph id="ph2">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnCreateControl">
          <source>Raises the <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.CreateControl" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.CreateControl" /&gt;</ph> 메서드를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCreateControl">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnCreateControl%2A&gt;</ph> method is called when the control is first created.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnCreateControl%2A&gt;</ph> 메서드 컨트롤을 처음으로 만들어질 때 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCreateControl">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnCreateControl%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnCreateControl%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCreateControl">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCreateControl">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnCreateControl" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnCreateControl" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnCreateControl" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnCreateControl" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.CursorChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.CursorChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnCursorChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnCursorChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DockChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DockChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDockChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDockChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DoubleClick" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DoubleClick" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDoubleClick%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDoubleClick%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> event of a <ph id="ph2">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> to load text files listed in the <ph id="ph3">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> into a <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> 의 이벤트는 <ph id="ph2">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> 에 나열 된 텍스트 파일을 로드 하는 <ph id="ph3">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> 에 <ph id="ph4">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnDpiChangedAfterParent(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DpiChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DpiChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnDpiChangedAfterParent(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DpiChangedAfterParent" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DpiChangedAfterParent" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnDpiChangedBeforeParent(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DpiChangedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DpiChangedEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnDpiChangedBeforeParent(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DpiChangedBeforeParent" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DpiChangedBeforeParent" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DragDrop" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DragDrop" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDragDrop%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDragDrop%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DragEnter" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DragEnter" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDragEnter%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDragEnter%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DragLeave" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DragLeave" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDragLeave%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDragLeave%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DragOver" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DragOver" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDragOver%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDragOver%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.EnabledChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.EnabledChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnEnabledChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnEnabledChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Enter" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Enter" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnEnter%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnEnter%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> event to change the foreground and background colors of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> under particular conditions.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph> 의 전경색과 배경색 색을 변경 하는 이벤트는 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 특정 조건 하에서 합니다.</target>       </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.FontChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.FontChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnFontChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnFontChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ForeColorChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ForeColorChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnForeColorChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnForeColorChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.GiveFeedback" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.GiveFeedback" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnGiveFeedback%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnGiveFeedback%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.GotFocus" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.GotFocus" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnGotFocus%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnGotFocus%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.HandleCreated" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.HandleCreated" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnHandleCreated%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnHandleCreated%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.HandleDestroyed" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.HandleDestroyed" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnHandleDestroyed%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnHandleDestroyed%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.HelpEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.HelpEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.HelpRequested" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.HelpRequested" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnHelpRequested%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnHelpRequested%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ImeModeChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ImeModeChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnImeModeChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnImeModeChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Windows.Forms.InvalidateEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.InvalidateEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Invalidated" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Invalidated" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnInvalidated%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnInvalidated%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.KeyEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.KeyDown" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.KeyDown" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnKeyDown%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnKeyDown%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event to determine the type of character entered into the control.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> 컨트롤에 입력 한 문자 형식을 결정 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.KeyPressEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.KeyPressEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.KeyPress" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.KeyPress" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnKeyPress%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnKeyPress%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event to prevent characters from entering the control.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> 문자가 컨트롤에 진입 하지 못하도록 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2306" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.KeyEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2307" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.KeyUp" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.KeyUp" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnKeyUp%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnKeyUp%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> event with the <ph id="ph2">&lt;xref:System.Windows.Forms.Help&gt;</ph> class to display pop-up style help to the user.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> 인 이벤트는 <ph id="ph2">&lt;xref:System.Windows.Forms.Help&gt;</ph> 사용자에 게 팝업 스타일 도움말을 표시 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2314" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.LayoutEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.LayoutEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2315" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Layout" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Layout" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnLayout%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnLayout%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /&gt;</ph> method so that registered delegates receive the event and for typical docking and anchoring functions to work.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /&gt;</ph> 파생된 클래스에서 호출 해야 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /&gt;</ph> 메서드 등록 된 대리자가 이벤트를 받도록 하 고 있는 일반 도킹 및 고정 기능이 작동 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="2321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)">
          <source>Derived classes should override this method to do any custom layout logic.</source>
          <target state="translated">파생된 클래스는 사용자 지정 레이아웃 논리를 수행 하기 위해이 메서드를 재정의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2322" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2323" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Leave" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Leave" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnLeave%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnLeave%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> event to reset a control to its former state.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph> 컨트롤을 이전 상태로 다시 설정 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2330" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2331" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.LocationChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.LocationChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnLocationChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnLocationChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2342" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2343" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.LostFocus" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.LostFocus" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnLostFocus%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnLostFocus%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2349" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2350" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MarginChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MarginChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMarginChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMarginChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2356" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2357" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseCaptureChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseCaptureChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseCaptureChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseCaptureChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2363" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Windows.Forms.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2364" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseClick" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseClick" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseClick%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseClick%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2370" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Windows.Forms.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2371" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseDoubleClick%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseDoubleClick%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2377" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2378" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseDown" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseDown" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseDown%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseDown%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2384" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2385" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseEnter" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseEnter" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseEnter%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseEnter%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2391" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2392" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseHover" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseHover" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseHover%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseHover%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)">
          <source>The following code example demonstrates how to override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseHover%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnMouseMove%2A&gt;</ph> methods in a derived class.</source>
          <target state="translated">다음 코드 예제에서는 재정의 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseHover%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnMouseMove%2A&gt;</ph> 파생된 클래스에서 메서드.</target>       </trans-unit>
        <trans-unit id="2398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)">
          <source>To run the example, paste the following code in a new form and paste this class, forming the same file, after the form.</source>
          <target state="translated">예를 실행 하 고 새 폼에 다음 코드를 붙여 넣습니다.이 클래스를 붙여를 같은 파일 형식을 만듭니다.</target>       </trans-unit>
        <trans-unit id="2399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)">
          <source>Add a button of type <ph id="ph1">`FunButton`</ph> to the form.</source>
          <target state="translated">형식의 단추 추가 <ph id="ph1">`FunButton`</ph> 양식입니다.</target>       </trans-unit>
        <trans-unit id="2400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2401" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2402" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseLeave" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseLeave" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseLeave%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseLeave%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2408" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2409" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseMove" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseMove" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseMove%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseMove%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
          <source>The following code example demonstrates how to override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseHover%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnMouseMove%2A&gt;</ph> methods in a derived class.</source>
          <target state="translated">다음 코드 예제에서는 재정의 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseHover%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnMouseMove%2A&gt;</ph> 파생된 클래스에서 메서드.</target>       </trans-unit>
        <trans-unit id="2415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
          <source>To run the example, paste the following code in a new form and paste this class, forming the same file, after the form.</source>
          <target state="translated">예를 실행 하 고 새 폼에 다음 코드를 붙여 넣습니다.이 클래스를 붙여를 같은 파일 형식을 만듭니다.</target>       </trans-unit>
        <trans-unit id="2416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
          <source>Add a button of type <ph id="ph1">`FunButton`</ph> to the form.</source>
          <target state="translated">형식의 단추 추가 <ph id="ph1">`FunButton`</ph> 양식입니다.</target>       </trans-unit>
        <trans-unit id="2417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2418" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2419" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseUp" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseUp" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseUp%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseUp%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2425" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2426" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseWheel" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseWheel" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseWheel%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseWheel%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2432" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMove(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2433" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnMove(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Move" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Move" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMove(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMove(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMove(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMove%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMove%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMove(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMove(System.EventArgs)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Move&gt;</ph> event to display the location of the form in screen coordinates on the caption bar of the form.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Move&gt;</ph> 폼의 캡션 표시줄에 화면 좌표에서 폼의 위치를 표시 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnMove(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2440" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph> that represents the Windows message.</source>
          <target state="translated">Windows 메시지를 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2441" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)">
          <source>Notifies the control of Windows messages.</source>
          <target state="translated">컨트롤에 Windows 메시지를 알립니다.</target>       </trans-unit>
        <trans-unit id="2442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnNotifyMessage%2A&gt;</ph> method is called if the control's <ph id="ph2">`EnableNotifyMessage`</ph> style bit is set in <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnNotifyMessage%2A&gt;</ph> 경우 메서드는 컨트롤의 <ph id="ph2">`EnableNotifyMessage`</ph> 에 스타일 비트가 설정 <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)">
          <source>The <ph id="ph1">`EnableNotifyMessage`</ph> style in <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> enables the control to be notified when the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph> method receives a Windows message.</source>
          <target state="translated"><ph id="ph1">`EnableNotifyMessage`</ph> 에 스타일을 <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> 컨트롤 될 때 알림을 받으려면을 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph> 메서드는 Windows 메시지를 수신 합니다.</target>       </trans-unit>
        <trans-unit id="2444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)">
          <source>With this method, semi-trusted controls can listen for Windows messages without enabling them to modify the message.</source>
          <target state="translated">이 메서드로 부분적으로 신뢰할 수 있는 컨트롤 메시지를 수정 하려면을 사용 하지 않고 Windows 메시지 수신할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /&gt;</ph> in a derived class, calling the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /&gt;</ph> method is not necessary because there is no initial implementation.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /&gt;</ph> 파생된 클래스에서 기본 클래스의 호출 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /&gt;</ph> 초기 구현이 없기 때문에 메서드는 필요 없습니다.</target>       </trans-unit>
        <trans-unit id="2446" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2447" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.PaddingChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.PaddingChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaddingChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaddingChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2453" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.PaintEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.PaintEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2454" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Paint" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Paint" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">
          <source>The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on which it is dropped.</source>
          <target state="translated">다음 코드 예제에서는 이미지 또는 이미지 파일을 폼으로 끌어을 하 게 삭제 된 지점에 표시 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> 메서드는 폼을 그릴 될 때마다 이미지를 다시 그리기 위해 재정의 됩니다; 그렇지 않은 경우 이미지는 다음에 다시 그릴 때까지 유지만 합니다.</target>       </trans-unit>
        <trans-unit id="2461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> 이벤트 처리 메서드는 형식으로 끌고 있는 데이터의 형식을 결정 하 고 적절 한 피드백을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> event-handling method displays the image on the form, if an <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph> can be created from the data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> 경우 이벤트 처리 메서드는 폼에 이미지를 표시 한 <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph> 데이터에서 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">
          <source>Because the <ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType&gt;</ph> values are screen coordinates, the example uses the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PointToClient%2A&gt;</ph> method to convert them to client coordinates.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType&gt;</ph> 값은 화면 좌표를 사용 하 여는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PointToClient%2A&gt;</ph> 메서드를 클라이언트 좌표로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="2464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2465" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.PaintEventArgs" /&gt;</ph> that contains information about the control to paint.</source>
          <target state="translated">그리려는 컨트롤에 대한 정보가 포함된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.PaintEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2466" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
          <source>Paints the background of the control.</source>
          <target state="translated">컨트롤의 배경을 그립니다.</target>       </trans-unit>
        <trans-unit id="2467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> method enables derived classes to handle Windows background erase requests.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> 메서드 사용 하면 파생된 클래스가 Windows 백그라운드 처리를 지우기 요청입니다.</target>       </trans-unit>
        <trans-unit id="2468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
          <source>Inheriting classes should override this method to handle the erase background request from windows.</source>
          <target state="translated">클래스를 상속 하는 windows에서 배경 지우기 요청을 처리 하려면이 메서드를 재정의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" /&gt;</ph> in a derived class it is not necessary to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" /&gt;</ph>.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" /&gt;</ph> 파생된 클래스에서 필요한 경우가 아니라면 기본 클래스를 호출 하려면 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2470" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2471" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.BackColorChanged" /&gt;</ph> event when the <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.BackColor" /&gt;</ph> property value of the control's container changes.</source>
          <target state="translated">컨트롤 컨테이너의 <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.BackColorChanged" /&gt;</ph> 속성 값이 변경되면 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.BackColor" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentBackColorChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentBackColorChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2482" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2483" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /&gt;</ph> event when the <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.BackgroundImage" /&gt;</ph> property value of the control's container changes.</source>
          <target state="translated">컨트롤 컨테이너의 <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /&gt;</ph> 속성 값이 변경되면 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.BackgroundImage" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentBackgroundImageChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentBackgroundImageChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2494" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2495" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.BindingContextChanged" /&gt;</ph> event when the <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.BindingContext" /&gt;</ph> property value of the control's container changes.</source>
          <target state="translated">컨트롤 컨테이너의 <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.BindingContextChanged" /&gt;</ph> 속성 값이 변경되면 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.BindingContext" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentBindingContextChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentBindingContextChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2506" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2507" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ParentChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ParentChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2518" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2519" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.CursorChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.CursorChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentCursorChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentCursorChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2525" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2526" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.EnabledChanged" /&gt;</ph> event when the <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Enabled" /&gt;</ph> property value of the control's container changes.</source>
          <target state="translated">컨트롤 컨테이너의 <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.EnabledChanged" /&gt;</ph> 속성 값이 변경되면 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Enabled" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentEnabledChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentEnabledChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2537" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2538" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.FontChanged" /&gt;</ph> event when the <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Font" /&gt;</ph> property value of the control's container changes.</source>
          <target state="translated">컨트롤 컨테이너의 <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.FontChanged" /&gt;</ph> 속성 값이 변경되면 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Font" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentFontChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentFontChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2549" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2550" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ForeColorChanged" /&gt;</ph> event when the <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.ForeColor" /&gt;</ph> property value of the control's container changes.</source>
          <target state="translated">컨트롤 컨테이너의 <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.ForeColorChanged" /&gt;</ph> 속성 값이 변경되면 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.ForeColor" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentForeColorChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentForeColorChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2561" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2562" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /&gt;</ph> event when the <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.RightToLeft" /&gt;</ph> property value of the control's container changes.</source>
          <target state="translated">컨트롤 컨테이너의 <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /&gt;</ph> 속성 값이 변경되면 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.RightToLeft" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentRightToLeftChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentRightToLeftChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2573" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2574" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.VisibleChanged" /&gt;</ph> event when the <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Visible" /&gt;</ph> property value of the control's container changes.</source>
          <target state="translated">컨트롤 컨테이너의 <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.VisibleChanged" /&gt;</ph> 속성 값이 변경되면 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Visible" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentVisibleChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnParentVisibleChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2585" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2586" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.PreviewKeyDown" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.PreviewKeyDown" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPreviewKeyDown%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPreviewKeyDown%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2592" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.PaintEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.PaintEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2593" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Paint" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Paint" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)">
          <source>If the <ph id="ph1">`UserPaint`</ph> bit of the <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> is set, you can override <ph id="ph3">&lt;xref:System.Windows.Forms.Control.OnPrint%2A&gt;</ph> to do layered painting.</source>
          <target state="translated">경우는 <ph id="ph1">`UserPaint`</ph> 비트의 <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> 재정의할 수 있습니다 설정 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.OnPrint%2A&gt;</ph> 계층적으로 그릴를 합니다.</target>       </trans-unit>
        <trans-unit id="2595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph> for more information.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="2596" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)">
          <source>The <ph id="ph1">&lt;paramref name="e" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="e" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="2597" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2598" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.QueryContinueDrag" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.QueryContinueDrag" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
          <source>After dragging has begun, this method is called repeatedly by the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> until the drag operation is either canceled or completed.</source>
          <target state="translated">이 메서드는 반복적으로 호출 끌기가 시작 되는 <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> 끌기 작업 취소 또는 완료 될 때까지 합니다.</target>       </trans-unit>
        <trans-unit id="2600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
          <source>Override this method if you want to change the point at which dragging is canceled or at which a drop occurs.</source>
          <target state="translated">끌기가 취소 또는 놓기가 발생 시점을 변경 하려는 경우이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="2601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnQueryContinueDrag%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnQueryContinueDrag%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2606" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2607" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.RegionChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.RegionChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnRegionChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnRegionChanged%2A&gt;</ph> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2613" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnResize(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2614" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnResize(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Resize" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Resize" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnResize(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnResize(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnResize(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnResize%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnResize%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnResize(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnResize(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnResize(System.EventArgs)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /&gt;</ph> method can be called during construction, so if you override <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /&gt;</ph> it can be called before the control constructor is called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /&gt;</ph> 메서드 생성 되는 동안 재정의 하는 경우 그렇게 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /&gt;</ph> 컨트롤 생성자가 호출 되기 전에 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2621" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2622" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnRightToLeftChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnRightToLeftChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2633" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2634" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.SizeChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.SizeChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnSizeChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnSizeChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2640" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2641" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.StyleChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.StyleChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnStyleChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnStyleChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2647" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2648" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnSystemColorsChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnSystemColorsChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2654" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2655" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.TabIndexChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.TabIndexChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnTabIndexChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnTabIndexChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2661" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2662" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.TabStopChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.TabStopChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnTabStopChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnTabStopChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2673" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2674" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.TextChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.TextChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnTextChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnTextChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2683" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2684" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Validated" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Validated" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnValidated%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnValidated%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2690" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.CancelEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.CancelEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2691" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Validating" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.Validating" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnValidating%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnValidating%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2697" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2698" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.VisibleChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.VisibleChanged" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="2700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnVisibleChanged%2A&gt;</ph> method also enables derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnVisibleChanged%2A&gt;</ph> 메서드도 사용 하면 파생된 클래스가 대리자를 연결 하지 않고도 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="2703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)">
          <source>The following code example is an event-raising method that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트를 발생 시키는 방법이 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <ph id="ph2">`On`</ph><bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph3">`Changed`</ph> that raise the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept><ph id="ph4">`Changed`</ph> event when the <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> value changes (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <ph id="ph2">`On`</ph> <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph3">`Changed`</ph> 해당 발생 하는 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> <ph id="ph4">`Changed`</ph> 이벤트 때는 <bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> 값이 변경 (<bpt id="p4">*</bpt>PropertyName<ept id="p4">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="2705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> derived class displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 하는 클래스를 파생 합니다.</target>       </trans-unit>
        <trans-unit id="2706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="2707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)">
          <source>This example requires that you have a class that derives from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 파생 되는 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="2708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">파생 클래스에서 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /&gt;</ph>를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /&gt;</ph> 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="2709" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Padding">
          <source>Gets or sets padding within the control.</source>
          <target state="translated">컨트롤의 안쪽 여백을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="2710" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Padding">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Padding" /&gt;</ph> representing the control's internal spacing characteristics.</source>
          <target state="translated">컨트롤의 내부 간격 특성을 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Padding" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2711" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Padding">
          <source>For containers such as <ph id="ph1">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.TabControl&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Padding%2A&gt;</ph> property gets or sets their respective <ph id="ph4">&lt;xref:System.Windows.Forms.Control.DisplayRectangle%2A&gt;</ph> properties.</source>
          <target state="translated">와 같은 컨테이너에 대 한 <ph id="ph1">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.TabControl&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Padding%2A&gt;</ph> 속성 가져오거나 각각의 해당 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.DisplayRectangle%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="2712" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Padding">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ScrollableControl.DockPadding%2A?displayProperty=nameWithType&gt;</ph> property is equal to its <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Padding%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.ScrollableControl.DockPadding%2A?displayProperty=nameWithType&gt;</ph> 속성이 해당 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Padding%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="2713" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Padding">
          <source>Controls receive default values for <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Padding%2A&gt;</ph> that are reasonably close to Windows user interface guidelines.</source>
          <target state="translated">컨트롤에 대 한 기본값을 받을 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Padding%2A&gt;</ph> 합리적으로 Windows 사용자 인터페이스 지침 가까운 않은 합니다.</target>       </trans-unit>
        <trans-unit id="2714" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Padding">
          <source>Some adjustments might still be necessary for particular applications.</source>
          <target state="translated">약간씩 조정 특정 응용 프로그램에 필요할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2715" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Padding">
          <source>All controls that implement <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GetPreferredSize%2A&gt;</ph> are enlarged by the amount in <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Padding%2A&gt;</ph> when <ph id="ph3">&lt;xref:System.Windows.Forms.Control.AutoSize%2A&gt;</ph> is <ph id="ph4">`true`</ph>.</source>
          <target state="translated">구현 하는 모든 컨트롤 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GetPreferredSize%2A&gt;</ph> 크기에 따라 확대 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Padding%2A&gt;</ph> 때 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.AutoSize%2A&gt;</ph> 은 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2716" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Padding">
          <source>The following controls do not use <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Padding%2A&gt;</ph>:</source>
          <target state="translated">다음과 같은 컨트롤을 사용 하지 않는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Padding%2A&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="2717" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Padding">
          <source>Controls that do not implement <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AutoSize%2A&gt;</ph> through <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GetPreferredSize%2A&gt;</ph></source>
          <target state="translated">구현 하지 않는 컨트롤 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.AutoSize%2A&gt;</ph> 통해 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GetPreferredSize%2A&gt;</ph></target>       </trans-unit>
        <trans-unit id="2718" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Padding">
          <source>Custom controls that directly inherit from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph></source>
          <target state="translated">직접 상속 하는 사용자 지정 컨트롤 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph></target>       </trans-unit>
        <trans-unit id="2719" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.PaddingChanged">
          <source>Occurs when the control's padding changes.</source>
          <target state="translated">컨트롤의 안쪽 여백이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2720" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PaddingChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2721" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PaddingChanged">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="2722" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PaddingChanged">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PaddingChanged&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PaddingChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2723" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PaddingChanged">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2724" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PaddingChanged">
          <source>To report on multiple events or on events that occur frequently, consider replacing <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> with <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or appending the message to a multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 여러 줄에 메시지를 추가 하거나 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2725" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PaddingChanged">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2726" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PaddingChanged">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PaddingChanged&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PaddingChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2727" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.Paint">
          <source>Occurs when the control is redrawn.</source>
          <target state="translated">컨트롤을 다시 그리면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2728" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Paint">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event is raised when the control is redrawn.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> 이벤트는 컨트롤을 다시 그리면 발생 합니다.</target>       </trans-unit>
        <trans-unit id="2729" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Paint">
          <source>It passes an instance of <ph id="ph1">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph> to the method(s) that handles the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event.</source>
          <target state="translated">인스턴스를 전달 <ph id="ph1">&lt;xref:System.Windows.Forms.PaintEventArgs&gt;</ph> 를 처리 하는 메서드에 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2730" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Paint">
          <source>When creating a new custom control or an inherited control with a different visual appearance, you must provide code to render the control by overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method.</source>
          <target state="translated">재정의 하 여 컨트롤을 렌더링 하는 코드를 제공 해야와 모양이 다른 새 사용자 지정 컨트롤 또는 상속된 된 컨트롤을 만들 때의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="2731" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Paint">
          <source>For more information, see <bpt id="p1">[</bpt>Overriding the OnPaint Method<ept id="p1">](~/docs/framework/winforms/controls/overriding-the-onpaint-method.md)</ept> and <bpt id="p2">[</bpt>Custom Control Painting and Rendering<ept id="p2">](~/docs/framework/winforms/controls/custom-control-painting-and-rendering.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>OnPaint 메서드 재정의<ept id="p1">](~/docs/framework/winforms/controls/overriding-the-onpaint-method.md)</ept> 및 <bpt id="p2">[</bpt>사용자 지정 컨트롤 그리기 및 렌더링<ept id="p2">](~/docs/framework/winforms/controls/custom-control-painting-and-rendering.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2732" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Paint">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2733" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Paint">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Windows.Forms.PictureBox&gt;</ph> control on the form and uses the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event to draw to it.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.PictureBox&gt;</ph> 의 폼에 사용 하 여 컨트롤의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> 를 그리려면 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2734" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Parent">
          <source>Gets or sets the parent container of the control.</source>
          <target state="translated">컨트롤의 부모 컨테이너를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="2735" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Parent">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> that represents the parent or container control of the control.</source>
          <target state="translated">컨트롤의 부모 또는 컨테이너 컨트롤을 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2736" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Parent">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph> property value to <ph id="ph2">`null`</ph> removes the control from the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> of its current parent control.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph> 속성 값을 <ph id="ph2">`null`</ph> 에서 컨트롤이 제거는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph> 현재 부모 컨트롤의 합니다.</target>       </trans-unit>
        <trans-unit id="2737" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Parent">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.FindForm%2A&gt;</ph> method to set properties on the parent control of a button and its form.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph> 속성 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.FindForm%2A&gt;</ph> 메서드를 부모 컨트롤은 단추와 해당 폼의 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="2738" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Parent">
          <source>for all windows to get this property value.</source>
          <target state="translated">이 속성 값을 가져오는 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="2739" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Parent">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="2740" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.ParentChanged">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Parent" /&gt;</ph> property value changes.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Parent" /&gt;</ph> 속성 값이 변경될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="2741" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ParentChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Parent%2A&gt;</ph> 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="2742" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.ParentChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2743" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Control">
          <source>Forces the control to apply layout logic to child controls.</source>
          <target state="translated">컨트롤이 자식 컨트롤에 레이아웃 논리를 강제로 적용하도록 합니다.</target>       </trans-unit>
        <trans-unit id="2744" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PerformLayout">
          <source>Forces the control to apply layout logic to all its child controls.</source>
          <target state="translated">컨트롤이 모든 자식 컨트롤에 레이아웃 논리를 강제로 적용하도록 합니다.</target>       </trans-unit>
        <trans-unit id="2745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> method was called before calling the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event is suppressed.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 메서드가 호출 하기 전에 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> 메서드는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="2746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Windows.Forms.LayoutEventArgs&gt;</ph> created are set to <ph id="ph4">`null`</ph> if no values were provided when the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> method was called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A&gt;</ph> 의 속성은 <ph id="ph3">&lt;xref:System.Windows.Forms.LayoutEventArgs&gt;</ph> 로 설정 하는 생성 된 <ph id="ph4">`null`</ph> 때 지정 된 값이 없으면는 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> 메서드를 호출 했습니다.</target>       </trans-unit>
        <trans-unit id="2747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> 메서드를 사용하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="2748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout">
          <source>It also demonstrates ways in which the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event is raised.</source>
          <target state="translated">방식도 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="2749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout">
          <source>In this example, the <ph id="ph1">`Click`</ph> event handler for <ph id="ph2">`Button1`</ph> explicitly calls <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph>.</source>
          <target state="translated">이 예제는 <ph id="ph1">`Click`</ph> 에 대 한 이벤트 처리기 <ph id="ph2">`Button1`</ph> 명시적으로 호출 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout">
          <source>The <ph id="ph1">`Click`</ph> event handler for <ph id="ph2">`Button2`</ph> implicitly calls <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Click`</ph> 에 대 한 이벤트 처리기 <ph id="ph2">`Button2`</ph> 암시적으로 호출 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> is also called when the form is loaded.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> 양식이 로드 될 때 호출 또한 됩니다.</target>       </trans-unit>
        <trans-unit id="2752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout">
          <source><ph id="ph1">`Button3`</ph> returns the control to the state it was in when loaded.</source>
          <target state="translated"><ph id="ph1">`Button3`</ph> 컨트롤을 로드할 때의 상태로 돌아갑니다.</target>       </trans-unit>
        <trans-unit id="2753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout">
          <source>In each case, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event is raised.</source>
          <target state="translated">각각의 경우에는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="2754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout">
          <source>This is a complete example.</source>
          <target state="translated">전체 예제입니다.</target>       </trans-unit>
        <trans-unit id="2755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout">
          <source>To run the example, paste the following code in a blank form.</source>
          <target state="translated">이 예제를 실행 하려면 빈 폼에 다음 코드를 붙여 넣습니다.</target>       </trans-unit>
        <trans-unit id="2756" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> that represents the most recently changed control.</source>
          <target state="translated">가장 최근에 변경된 컨트롤을 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2757" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)">
          <source>The name of the most recently changed property on the control.</source>
          <target state="translated">컨트롤에서 가장 최근에 변경된 속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="2758" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)">
          <source>Forces the control to apply layout logic to all its child controls.</source>
          <target state="translated">컨트롤이 모든 자식 컨트롤에 레이아웃 논리를 강제로 적용하도록 합니다.</target>       </trans-unit>
        <trans-unit id="2759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> method was called before calling the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event is suppressed.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 메서드가 호출 하기 전에 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> 메서드는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="2760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)">
          <source>The <ph id="ph1">`affectedControl`</ph> and <ph id="ph2">`affectedProperty`</ph> parameters can both be set to <ph id="ph3">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`affectedControl`</ph> 및 <ph id="ph2">`affectedProperty`</ph> 매개 변수 둘 다로 설정할 수 있습니다 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)">
          <source>Doing so causes the <ph id="ph1">&lt;xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Windows.Forms.LayoutEventArgs&gt;</ph> created to be set to <ph id="ph4">`null`</ph>.</source>
          <target state="translated">이렇게 하면는 <ph id="ph1">&lt;xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A&gt;</ph> 의 속성은 <ph id="ph3">&lt;xref:System.Windows.Forms.LayoutEventArgs&gt;</ph> 로 설정 하기 위해 만든 <ph id="ph4">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> 메서드를 사용하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="2763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)">
          <source>It also demonstrates ways in which the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event is raised.</source>
          <target state="translated">방식도 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="2764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)">
          <source>In this example, the <ph id="ph1">`Click`</ph> event handler for <ph id="ph2">`Button1`</ph> explicitly calls <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph>.</source>
          <target state="translated">이 예제는 <ph id="ph1">`Click`</ph> 에 대 한 이벤트 처리기 <ph id="ph2">`Button1`</ph> 명시적으로 호출 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)">
          <source>The <ph id="ph1">`Click`</ph> event handler for <ph id="ph2">`Button2`</ph> implicitly calls <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`Click`</ph> 에 대 한 이벤트 처리기 <ph id="ph2">`Button2`</ph> 암시적으로 호출 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> is also called when the form is loaded.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.PerformLayout%2A&gt;</ph> 양식이 로드 될 때 호출 또한 됩니다.</target>       </trans-unit>
        <trans-unit id="2767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)">
          <source><ph id="ph1">`Button3`</ph> returns the control to the state it was in when loaded.</source>
          <target state="translated"><ph id="ph1">`Button3`</ph> 컨트롤을 로드할 때의 상태로 돌아갑니다.</target>       </trans-unit>
        <trans-unit id="2768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)">
          <source>In each case, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event is raised.</source>
          <target state="translated">각각의 경우에는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="2769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)">
          <source>This is a complete example.</source>
          <target state="translated">전체 예제입니다.</target>       </trans-unit>
        <trans-unit id="2770" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)">
          <source>To run the example, paste the following code in a blank form.</source>
          <target state="translated">이 예제를 실행 하려면 빈 폼에 다음 코드를 붙여 넣습니다.</target>       </trans-unit>
        <trans-unit id="2771" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)">
          <source>The screen coordinate <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph> to convert.</source>
          <target state="translated">변환할 화면 좌표 <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2772" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)">
          <source>Computes the location of the specified screen point into client coordinates.</source>
          <target state="translated">특정 화면 지점의 위치를 클라이언트 좌표로 계산합니다.</target>       </trans-unit>
        <trans-unit id="2773" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph> that represents the converted <ph id="ph2">&lt;see cref="T:System.Drawing.Point" /&gt;</ph>, <ph id="ph3">&lt;paramref name="p" /&gt;</ph>, in client coordinates.</source>
          <target state="translated">변환된 <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph>인 <ph id="ph2">&lt;see cref="T:System.Drawing.Point" /&gt;</ph>를 클라이언트 좌표로 나타내는 <ph id="ph3">&lt;paramref name="p" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)">
          <source>The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped.</source>
          <target state="translated">사용자 이미지 또는 이미지 파일을 폼으로 끌어 지점에 표시 되도록가를 놓이고는 다음 코드 예제에서는 합니다.</target>       </trans-unit>
        <trans-unit id="2775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> 메서드는 폼을 그릴 될 때마다 이미지를 다시 그리기 위해 재정의 됩니다; 그렇지 않은 경우 이미지는 다음에 다시 그릴 때까지 유지만 합니다.</target>       </trans-unit>
        <trans-unit id="2776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> 이벤트 처리 메서드는 형식으로 끌고 있는 데이터의 형식을 결정 하 고 적절 한 피드백을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> event-handling method displays the image on the form, if an <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph> can be created from the data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> 경우 이벤트 처리 메서드는 폼에 이미지를 표시 한 <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph> 데이터에서 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)">
          <source>Because the <ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType&gt;</ph> values are screen coordinates, the example uses the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PointToClient%2A&gt;</ph> method to convert them to client coordinates.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType&gt;</ph> 값은 화면 좌표를 사용 하 여는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PointToClient%2A&gt;</ph> 메서드를 클라이언트 좌표로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="2779" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)">
          <source>The client coordinate <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph> to convert.</source>
          <target state="translated">변환할 클라이언트 좌표 <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2780" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)">
          <source>Computes the location of the specified client point into screen coordinates.</source>
          <target state="translated">특정 클라이언트 지점의 위치를 화면 좌표로 계산합니다.</target>       </trans-unit>
        <trans-unit id="2781" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph> that represents the converted <ph id="ph2">&lt;see cref="T:System.Drawing.Point" /&gt;</ph>, <ph id="ph3">&lt;paramref name="p" /&gt;</ph>, in screen coordinates.</source>
          <target state="translated">변환된 <ph id="ph1">&lt;see cref="T:System.Drawing.Point" /&gt;</ph>인 <ph id="ph2">&lt;see cref="T:System.Drawing.Point" /&gt;</ph>를 화면 좌표로 나타내는 <ph id="ph3">&lt;paramref name="p" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.RectangleToScreen%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PointToScreen%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.MouseButtons%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph6">&lt;xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType&gt;</ph> members.</source>
          <target state="translated">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.RectangleToScreen%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PointToScreen%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.MouseButtons%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType&gt;</ph>, 및 <ph id="ph6">&lt;xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType&gt;</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="2783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)">
          <source>To run the example, paste the following code in a form called Form1 containing several controls.</source>
          <target state="translated">Form1 이라는 폼에는 예제를 실행 하려면 다음 코드를 붙여 여러 개의 컨트롤이 들어 있습니다.</target>       </trans-unit>
        <trans-unit id="2784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)">
          <source>This example requires that the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> events are connected to the event handlers defined in the example.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> 이벤트가 예에서 정의 된 이벤트 처리기에 연결 합니다.</target>       </trans-unit>
        <trans-unit id="2785" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.PreferredSize">
          <source>Gets the size of a rectangular area into which the control can fit.</source>
          <target state="translated">컨트롤이 들어갈 수 있는 사각형 영역의 크기를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="2786" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.PreferredSize">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> containing the height and width, in pixels.</source>
          <target state="translated">너비와 높이가 포함된 <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph>(픽셀)입니다.</target>       </trans-unit>
        <trans-unit id="2787" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PreProcessControlMessage(System.Windows.Forms.Message@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph> that represents the message to process.</source>
          <target state="translated">처리할 메시지를 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2788" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PreProcessControlMessage(System.Windows.Forms.Message@)">
          <source>Preprocesses keyboard or input messages within the message loop before they are dispatched.</source>
          <target state="translated">메시지 루프 내에 있는 키보드 또는 입력 메시지를 전처리한 다음 디스패치합니다.</target>       </trans-unit>
        <trans-unit id="2789" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PreProcessControlMessage(System.Windows.Forms.Message@)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.PreProcessControlState" /&gt;</ph> values, depending on whether <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" /&gt;</ph> is <ph id="ph3">&lt;see langword="true" /&gt;</ph> or <ph id="ph4">&lt;see langword="false" /&gt;</ph> and whether <ph id="ph5">&lt;see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" /&gt;</ph> or <ph id="ph6">&lt;see cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" /&gt;</ph> are <ph id="ph7">&lt;see langword="true" /&gt;</ph> or <ph id="ph8">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.PreProcessControlState" /&gt;</ph>가 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" /&gt;</ph> 또는 <ph id="ph3">&lt;see langword="true" /&gt;</ph>인지 여부와 <ph id="ph4">&lt;see langword="false" /&gt;</ph>나 <ph id="ph5">&lt;see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" /&gt;</ph>가 <ph id="ph6">&lt;see cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" /&gt;</ph> 또는 <ph id="ph7">&lt;see langword="true" /&gt;</ph>인지 여부에 따라 다른 <ph id="ph8">&lt;see langword="false" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="2790" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>, passed by reference, that represents the message to process.</source>
          <target state="translated">처리할 메시지를 나타내며 참조에 의해 전달되는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2791" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)">
          <source>The possible values are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.</source>
          <target state="translated">가능한 값은 WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR 및 WM_SYSCHAR입니다.</target>       </trans-unit>
        <trans-unit id="2792" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)">
          <source>Preprocesses keyboard or input messages within the message loop before they are dispatched.</source>
          <target state="translated">메시지 루프 내에 있는 키보드 또는 입력 메시지를 전처리한 다음 디스패치합니다.</target>       </trans-unit>
        <trans-unit id="2793" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message was processed by the control; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 메시지를 처리하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2794" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A&gt;</ph> is called by the application's message loop to preprocess input messages before they are dispatched.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A&gt;</ph> 디스패치 되기 전에 입력된 메시지를 전처리 하는 응용 프로그램의 메시지 루프에 의해 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="2795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)">
          <source>Possible values for the <ph id="ph1">`msg`</ph> parameter are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.</source>
          <target state="translated">에 가능한 값은 <ph id="ph1">`msg`</ph> 매개 변수는 WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR 및 wm_syschar입니다.</target>       </trans-unit>
        <trans-unit id="2796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)">
          <source>When overriding <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A&gt;</ph>, a control should return <ph id="ph2">`true`</ph> to indicate that it has processed the message.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A&gt;</ph>, 컨트롤은 반환 <ph id="ph2">`true`</ph> 메시지 처리 했음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="2797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)">
          <source>For messages that are not processed by the control, the result of <ph id="ph1">`base.PreProcessMessage`</ph> should be returned.</source>
          <target state="translated">컨트롤의 결과 의해 처리 되지 않은 메시지에 대 한 <ph id="ph1">`base.PreProcessMessage`</ph> 반환 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="2798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)">
          <source>Controls will typically override one of the more specialized methods such as <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ProcessCmdKey%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.ProcessDialogChar%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.Windows.Forms.Control.ProcessDialogKey%2A&gt;</ph> instead of overriding <ph id="ph6">&lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A&gt;</ph>.</source>
          <target state="translated">컨트롤은 일반적으로 더 특수 한 방법 중 하나와 같은 재정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ProcessCmdKey%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.ProcessDialogChar%2A&gt;</ph>, 또는 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.ProcessDialogKey%2A&gt;</ph> 재정의 하는 대신 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)">
          <source>for all windows for the immediate caller to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 직접 실행 호출자의 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="2800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2801" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.PreviewKeyDown">
          <source>Occurs before the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.KeyDown" /&gt;</ph> event when a key is pressed while focus is on this control.</source>
          <target state="translated">이 컨트롤에 포커스가 있는 동안 키를 누르면 <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.KeyDown" /&gt;</ph> 이벤트 전에 발생합니다.</target>       </trans-unit>
        <trans-unit id="2802" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PreviewKeyDown">
          <source>Some key presses, such as the TAB, RETURN, ESC, and arrow keys, are typically ignored by some controls because they are not considered input key presses.</source>
          <target state="translated">입력된 키 누름을 간주 되지 않는 때문에 일부 키 누름 탭, 리턴, esc를 누르고 화살표 키 등은 일반적으로 일부 컨트롤에서 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="2803" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PreviewKeyDown">
          <source>For example, by default, a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> control ignores the arrow keys.</source>
          <target state="translated">예를 들어 기본적으로 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> 컨트롤 화살표 키를 무시 합니다.</target>       </trans-unit>
        <trans-unit id="2804" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PreviewKeyDown">
          <source>Pressing the arrow keys typically causes the focus to move to the previous or next control.</source>
          <target state="translated">일반적으로 화살표 키를 누르면 포커스가 이전 또는 다음 컨트롤로 이동 하면 됩니다.</target>       </trans-unit>
        <trans-unit id="2805" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PreviewKeyDown">
          <source>The arrow keys are considered navigation keys and pressing these keys typically do not raise the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event for a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">화살표 키 탐색 키 및 키를 눌러 이러한 키가 일반적으로 발생 하지 않는 것으로 간주 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> 에 대 한 이벤트는 <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2806" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PreviewKeyDown">
          <source>However, pressing the arrow keys for a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> does raise the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> event.</source>
          <target state="translated">그러나에 대 한 키의 화살표를 누르면는 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> 발생지 않습니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2807" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PreviewKeyDown">
          <source>By handling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> event for a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> and setting the <ph id="ph3">&lt;xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A&gt;</ph> property to <ph id="ph4">`true`</ph>, you can raise the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event when the arrow keys are pressed.</source>
          <target state="translated">처리 하 여는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> 에 대 한 이벤트는 <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> 설정는 <ph id="ph3">&lt;xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A&gt;</ph> 속성을 <ph id="ph4">`true`</ph>를 발생 시킬 수 있습니다는 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> 화살표 키를 누를 때 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2808" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PreviewKeyDown">
          <source>However, if you handle the arrow keys, the focus will no longer move to the previous or next control.</source>
          <target state="translated">그러나 화살표 키를 처리 하는 경우 이전 또는 다음 컨트롤로 포커스가 이동 더 이상 됩니다.</target>       </trans-unit>
        <trans-unit id="2809" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PreviewKeyDown">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2810" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PreviewKeyDown">
          <source>The following code example demonstrates a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> that includes a <ph id="ph2">&lt;xref:System.Windows.Forms.ContextMenuStrip&gt;</ph>.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 포함 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.ContextMenuStrip&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2811" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PreviewKeyDown">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> has the focus and you press the UP ARROW or DOWN ARROW keys, the <ph id="ph2">&lt;xref:System.Windows.Forms.ContextMenuStrip&gt;</ph> appears.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 포커스가 있고 위쪽 화살표 또는 아래쪽 화살표 키를 눌러는 <ph id="ph2">&lt;xref:System.Windows.Forms.ContextMenuStrip&gt;</ph> 나타납니다.</target>       </trans-unit>
        <trans-unit id="2812" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PreviewKeyDown">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> event handler detects when the UP ARROW or DOWN ARROW keys are pressed and sets the <ph id="ph2">&lt;xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A&gt;</ph> property to <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> 위쪽 화살표 또는 아래쪽 화살표 키를 누를 때 검색 하 고 설정 하는 이벤트 처리기는 <ph id="ph2">&lt;xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A&gt;</ph> 속성을 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2813" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PreviewKeyDown">
          <source>This raises the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event so that you can display the <ph id="ph2">&lt;xref:System.Windows.Forms.ContextMenuStrip&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> 이벤트 표시할 수 있도록는 <ph id="ph2">&lt;xref:System.Windows.Forms.ContextMenuStrip&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2814" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PreviewKeyDown">
          <source>You should not put any logic in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> event handler, other than to set the <ph id="ph2">&lt;xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A&gt;</ph> property.</source>
          <target state="translated">두어서는 안됩니다 논리는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreviewKeyDown&gt;</ph> 설정 이외의 다른 이벤트 처리기는 <ph id="ph2">&lt;xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="2815" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.PreviewKeyDown">
          <source>Instead, you should put your logic in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event handler.</source>
          <target state="translated">대신에 논리를 삽입 해야는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="2816" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>, passed by reference, that represents the window message to process.</source>
          <target state="translated">처리할 창 메시지를 나타내며 참조에 의해 전달되는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2817" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Keys" /&gt;</ph> values that represents the key to process.</source>
          <target state="translated">처리할 키를 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Keys" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="2818" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>Processes a command key.</source>
          <target state="translated">명령 키를 처리합니다.</target>       </trans-unit>
        <trans-unit id="2819" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the character was processed by the control; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 문자를 처리하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2820" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>This method is called during message preprocessing to handle command keys.</source>
          <target state="translated">이 메서드는 명령 키를 처리 하기 위해 메시지 전처리 하는 동안 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="2821" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>Command keys are keys that always take precedence over regular input keys.</source>
          <target state="translated">명령 키가 일반 입력된 키 보다 항상 우선 하는 키입니다.</target>       </trans-unit>
        <trans-unit id="2822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>Examples of command keys include accelerators and menu shortcuts.</source>
          <target state="translated">명령 키의 예로 액셀러레이터 키 및 바로 가기 메뉴를 들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>The method must return <ph id="ph1">`true`</ph> to indicate that it has processed the command key, or <ph id="ph2">`false`</ph> to indicate that the key is not a command key.</source>
          <target state="translated">메서드 반환 해야 <ph id="ph1">`true`</ph> 명령 키가 처리 되었는지 나타내는 또는 <ph id="ph2">`false`</ph> 키 명령 키 임을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="2824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</source>
          <target state="translated">이 메서드는 컨트롤은 ActiveX 컨트롤 또는 Windows Forms 응용 프로그램에서 호스트 되는 경우에 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="2825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessCmdKey%2A&gt;</ph> method first determines whether the control has a <ph id="ph2">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph>, and if so, enables the <ph id="ph3">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph> to process the command key.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessCmdKey%2A&gt;</ph> 메서드는 컨트롤에 있는지 먼저 확인는 <ph id="ph2">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph>, 그렇다면 수 있도록는 <ph id="ph3">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph> 명령 키를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="2826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>If the command key is not a menu shortcut and the control has a parent, the key is passed to the parent's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessCmdKey%2A&gt;</ph> method.</source>
          <target state="translated">부모에 전달 된 키에 명령 키가 메뉴 바로 가기 하는 경우 컨트롤에 부모 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessCmdKey%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="2827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>The net effect is that command keys are "bubbled" up the control hierarchy.</source>
          <target state="translated">한 순수 효과 키 있게 됩니다"컨트롤 계층 구조는 명령입니다.</target>       </trans-unit>
        <trans-unit id="2828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>In addition to the key the user pressed, the key data also indicates which, if any, modifier keys were pressed at the same time as the key.</source>
          <target state="translated">사용자가 누른 키 뿐만 아니라 키 데이터도 나타냅니다에 누른 보조키 있는 경우 키와 같은 시간입니다.</target>       </trans-unit>
        <trans-unit id="2829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>Modifier keys include the SHIFT, CTRL, and ALT keys.</source>
          <target state="translated">보조키는 SHIFT, CTRL 및 ALT 키를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="2830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>for the immediate caller and inheriting classes to call this method.</source>
          <target state="translated">및에 대 한 직접 실행 호출자 클래스 상속이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="2831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="2832" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>When overriding the <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /&gt;</ph> method in a derived class, a control should return <ph id="ph2">&lt;see langword="true" /&gt;</ph> to indicate that it has processed the key.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /&gt;</ph> 파생된 클래스에서 메서드를 컨트롤은 반환 <ph id="ph2">&lt;see langword="true" /&gt;</ph> 키가 처리 되었는지 나타냅니다.</target>       </trans-unit>
        <trans-unit id="2833" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>For keys that are not processed by the control, the result of calling the base class's <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /&gt;</ph> method should be returned.</source>
          <target state="translated">컨트롤의 기본 클래스의 호출 결과 의해 처리 되지 않은 키에 대 한 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /&gt;</ph> 메서드를 반환 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2834" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
          <source>Controls will seldom, if ever, need to override this method.</source>
          <target state="translated">컨트롤 거의 얻어지는 경우 할이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2835" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)">
          <source>The character to process.</source>
          <target state="translated">처리할 문자입니다.</target>       </trans-unit>
        <trans-unit id="2836" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)">
          <source>Processes a dialog character.</source>
          <target state="translated">대화 상자 문자를 처리합니다.</target>       </trans-unit>
        <trans-unit id="2837" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the character was processed by the control; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 문자를 처리하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2838" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)">
          <source>This method is called during message preprocessing to handle dialog characters, such as control mnemonics.</source>
          <target state="translated">이 메서드는 메시지를 전처리 컨트롤 니모닉 같은 대화 상자 문자를 처리 하는 동안 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="2839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)">
          <source>This method is called only if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph> method indicates that the control is not processing the character.</source>
          <target state="translated">이 메서드는 경우에는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph> 메서드는 제어 문자를 처리 하지 않는다는 것을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="2840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessDialogChar%2A&gt;</ph> method simply sends the character to the parent's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProcessDialogChar%2A&gt;</ph> method, or returns <ph id="ph3">`false`</ph> if the control has no parent.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessDialogChar%2A&gt;</ph> 메서드를 부모의 문자를 단순히 보냅니다 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProcessDialogChar%2A&gt;</ph> 메서드나 반환 <ph id="ph3">`false`</ph> 컨트롤 부모가 없는 경우.</target>       </trans-unit>
        <trans-unit id="2841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> class overrides this method to perform actual processing of dialog characters.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 클래스 대화 상자 문자의 실제 처리를 수행 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="2842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)">
          <source>This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</source>
          <target state="translated">이 메서드는 컨트롤은 ActiveX 컨트롤 또는 Windows Forms 응용 프로그램에서 호스트 되는 경우에 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="2843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)">
          <source>for all windows for inheriting classes to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="2844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)">
          <source>When overriding the <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /&gt;</ph> method in a derived class, a control should return <ph id="ph2">&lt;see langword="true" /&gt;</ph> to indicate that it has processed the character.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /&gt;</ph> 파생된 클래스에서 메서드를 컨트롤은 반환 <ph id="ph2">&lt;see langword="true" /&gt;</ph> 문자 처리 했음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="2846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)">
          <source>For characters that are not processed by the control, the result of calling the base class's <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /&gt;</ph> method should be returned.</source>
          <target state="translated">컨트롤의 기본 클래스의 호출 결과 의해 처리 되지 않은 문자에 대 한 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /&gt;</ph> 메서드를 반환 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)">
          <source>Controls will seldom, if ever, need to override this method.</source>
          <target state="translated">컨트롤 거의 얻어지는 경우 할이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2848" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Keys" /&gt;</ph> values that represents the key to process.</source>
          <target state="translated">처리할 키를 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Keys" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="2849" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)">
          <source>Processes a dialog key.</source>
          <target state="translated">대화 상자 키를 처리합니다.</target>       </trans-unit>
        <trans-unit id="2850" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the key was processed by the control; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 키를 처리하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)">
          <source>This method is called during message preprocessing to handle dialog characters, such as TAB, RETURN, ESC, and arrow keys.</source>
          <target state="translated">이 메서드는 탭, 리턴, esc를 누르고 화살표 키 등의 대화 상자 문자를 처리 하기 위해 메시지를 전처리 하는 동안 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="2852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)">
          <source>This method is called only if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> method indicates that the control is not processing the key.</source>
          <target state="translated">이 메서드는 경우에는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputKey%2A&gt;</ph> 메서드 컨트롤이 키를 처리 하지 않는다는 것을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="2853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessDialogKey%2A&gt;</ph> simply sends the character to the parent's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProcessDialogKey%2A&gt;</ph> method, or returns <ph id="ph3">`false`</ph> if the control has no parent.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessDialogKey%2A&gt;</ph> 부모의 문자를 단순히 보냅니다 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProcessDialogKey%2A&gt;</ph> 메서드나 반환 <ph id="ph3">`false`</ph> 컨트롤 부모가 없는 경우.</target>       </trans-unit>
        <trans-unit id="2854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> class overrides this method to perform actual processing of dialog keys.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 클래스 대화 상자 키의 실제 처리를 수행 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="2855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)">
          <source>This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</source>
          <target state="translated">이 메서드는 컨트롤은 ActiveX 컨트롤 또는 Windows Forms 응용 프로그램에서 호스트 되는 경우에 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="2856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)">
          <source>for all windows for inheriting classes to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="2857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2858" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)">
          <source>When overriding the <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" /&gt;</ph> method in a derived class, a control should return <ph id="ph2">&lt;see langword="true" /&gt;</ph> to indicate that it has processed the key.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" /&gt;</ph> 파생된 클래스에서 메서드를 컨트롤은 반환 <ph id="ph2">&lt;see langword="true" /&gt;</ph> 키가 처리 되었는지 나타냅니다.</target>       </trans-unit>
        <trans-unit id="2859" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)">
          <source>For keys that are not processed by the control, the result of calling the base class's <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /&gt;</ph> method should be returned.</source>
          <target state="translated">컨트롤의 기본 클래스의 호출 결과 의해 처리 되지 않은 키에 대 한 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /&gt;</ph> 메서드를 반환 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)">
          <source>Controls will seldom, if ever, need to override this method.</source>
          <target state="translated">컨트롤 거의 얻어지는 경우 할이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2861" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>, passed by reference, that represents the window message to process.</source>
          <target state="translated">처리할 창 메시지를 나타내며 참조에 의해 전달되는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2862" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
          <source>Processes a key message and generates the appropriate control events.</source>
          <target state="translated">키 메시지를 처리하고 적합한 컨트롤 이벤트를 생성합니다.</target>       </trans-unit>
        <trans-unit id="2863" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message was processed by the control; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 메시지를 처리하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
          <source>This method is called when a control receives a keyboard message.</source>
          <target state="translated">이 메서드는 키보드 메시지를 받을 때 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="2865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
          <source>The method is responsible for generating the appropriate key events for the message by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnKeyPress%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnKeyDown%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.Forms.Control.OnKeyUp%2A&gt;</ph> methods.</source>
          <target state="translated">메서드를 호출 하 여 메시지에 대 한 적절 한 키 이벤트를 생성 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnKeyPress%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnKeyDown%2A&gt;</ph>, 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.OnKeyUp%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="2866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
          <source>The <ph id="ph1">`m`</ph> parameter contains the window message that must be processed.</source>
          <target state="translated"><ph id="ph1">`m`</ph> 매개 변수를 처리 해야 하는 창 메시지를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="2867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
          <source>Possible values for the <ph id="ph1">&lt;xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType&gt;</ph> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, WM_SYSKEYUP, and WM_IME_CHAR.</source>
          <target state="translated">에 가능한 값은 <ph id="ph1">&lt;xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType&gt;</ph> 속성은 WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, WM_SYSKEYUP, 및 WM_IME_CHAR 합니다.</target>       </trans-unit>
        <trans-unit id="2868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
          <source>for all windows for inheriting classes to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="2869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
          <source>for the immediate caller to call unmanaged code.</source>
          <target state="translated">비관리 코드를 호출할 직접 실행 호출자입니다.</target>       </trans-unit>
        <trans-unit id="2871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="2872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
          <source>When overriding the <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /&gt;</ph> method in a derived class, a control should return <ph id="ph2">&lt;see langword="true" /&gt;</ph> to indicate that it has processed the key.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /&gt;</ph> 파생된 클래스에서 메서드를 컨트롤은 반환 <ph id="ph2">&lt;see langword="true" /&gt;</ph> 키가 처리 되었는지 나타냅니다.</target>       </trans-unit>
        <trans-unit id="2873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
          <source>For keys that are not processed by the control, the result of calling the base class's <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /&gt;</ph> method should be returned.</source>
          <target state="translated">컨트롤의 기본 클래스의 호출 결과 의해 처리 되지 않은 키에 대 한 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /&gt;</ph> 메서드를 반환 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
          <source>Controls will seldom, if ever, need to override this method.</source>
          <target state="translated">컨트롤 거의 얻어지는 경우 할이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2875" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>, passed by reference, that represents the window message to process.</source>
          <target state="translated">처리할 창 메시지를 나타내며 참조에 의해 전달되는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2876" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)">
          <source>Processes a keyboard message.</source>
          <target state="translated">키보드 메시지를 처리합니다.</target>       </trans-unit>
        <trans-unit id="2877" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message was processed by the control; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 메시지를 처리하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)">
          <source>This method is called when a control receives a keyboard message.</source>
          <target state="translated">이 메서드는 키보드 메시지를 받을 때 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="2879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)">
          <source>The method first determines whether the control has a parent; if so, it calls the parent's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessKeyPreview%2A&gt;</ph> method.</source>
          <target state="translated">메서드는 먼저 컨트롤에 부모; 여부 확인 따라서 부모 항목을 호출 하는 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessKeyPreview%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="2880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)">
          <source>If the parent's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessKeyPreview%2A&gt;</ph> method does not process the message then the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A&gt;</ph> method is called to generate the appropriate keyboard events.</source>
          <target state="translated">경우 부모의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessKeyPreview%2A&gt;</ph> 방법은 메시지를 처리 하지 않습니다는 다음 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A&gt;</ph> 메서드는 적절 한 키보드 이벤트를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="2881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)">
          <source>The <ph id="ph1">`m`</ph> parameter contains the window message that must be processed.</source>
          <target state="translated"><ph id="ph1">`m`</ph> 매개 변수를 처리 해야 하는 창 메시지를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="2882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)">
          <source>Possible values for the <ph id="ph1">&lt;xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType&gt;</ph> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP.</source>
          <target state="translated">에 가능한 값의 <ph id="ph1">&lt;xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType&gt;</ph> WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, 및 WM_SYSKEYUP 속성이 됩니다.</target>       </trans-unit>
        <trans-unit id="2883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)">
          <source>for all windows for inheriting classes to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="2884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)">
          <source>When overriding the <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)" /&gt;</ph> method, a control should return <ph id="ph2">&lt;see langword="true" /&gt;</ph> to indicate that it has processed the key.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)" /&gt;</ph> 메서드, 컨트롤은 반환 <ph id="ph2">&lt;see langword="true" /&gt;</ph> 키가 처리 되었는지 나타냅니다.</target>       </trans-unit>
        <trans-unit id="2886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)">
          <source>For keys that are not processed by the control, the result of the base class's <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /&gt;</ph> should be returned.</source>
          <target state="translated">컨트롤의 기본 클래스의 결과 의해 처리 되지 않은 키에 대 한 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /&gt;</ph> 반환 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="2887" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)">
          <source>Controls will seldom, if ever, need to override this method.</source>
          <target state="translated">컨트롤 거의 얻어지는 경우 할이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2888" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>, passed by reference, that represents the window message to process.</source>
          <target state="translated">처리할 창 메시지를 나타내며 참조에 의해 전달되는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2889" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
          <source>Previews a keyboard message.</source>
          <target state="translated">키보드 메시지를 미리 봅니다.</target>       </trans-unit>
        <trans-unit id="2890" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message was processed by the control; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 메시지를 처리하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
          <source>This method is called by a child control when the child control receives a keyboard message.</source>
          <target state="translated">이 메서드는 자식 컨트롤이 키보드 메시지를 수신할 때 자식 컨트롤에 의해 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="2892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
          <source>The child control calls this method before generating any keyboard events for the message.</source>
          <target state="translated">자식 컨트롤의 메시지에 대 한 키보드 이벤트를 생성 하기 전에이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="2893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
          <source>If this method returns <ph id="ph1">`true`</ph>, the child control considers the message processed and does not generate any keyboard events.</source>
          <target state="translated">이 메서드가 반환 하는 경우 <ph id="ph1">`true`</ph>, 자식 컨트롤에서 메시지가 처리 및 키보드 이벤트를 생성 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="2894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
          <source>The <ph id="ph1">`m`</ph> parameter contains the window message to preview.</source>
          <target state="translated"><ph id="ph1">`m`</ph> 매개 변수를 미리 보려면 창 메시지를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="2895" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
          <source>Possible values for the <ph id="ph1">&lt;xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType&gt;</ph> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP.</source>
          <target state="translated">에 가능한 값의 <ph id="ph1">&lt;xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType&gt;</ph> WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, 및 WM_SYSKEYUP 속성이 됩니다.</target>       </trans-unit>
        <trans-unit id="2896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessKeyPreview%2A&gt;</ph> method simply sends the character to the parent's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProcessKeyPreview%2A&gt;</ph> method, or returns <ph id="ph3">`false`</ph> if the control has no parent.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessKeyPreview%2A&gt;</ph> 메서드를 부모의 문자를 단순히 보냅니다 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProcessKeyPreview%2A&gt;</ph> 메서드나 반환 <ph id="ph3">`false`</ph> 컨트롤 부모가 없는 경우.</target>       </trans-unit>
        <trans-unit id="2897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> class overrides this method to perform actual processing of dialog keys.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 클래스 대화 상자 키의 실제 처리를 수행 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="2898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
          <source>for all windows for inheriting classes to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="2899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
          <source>for the immediate caller to call unmanaged code.</source>
          <target state="translated">비관리 코드를 호출할 직접 실행 호출자입니다.</target>       </trans-unit>
        <trans-unit id="2901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="2902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
          <source>When overriding the <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /&gt;</ph> method in a derived class, a control should return <ph id="ph2">&lt;see langword="true" /&gt;</ph> to indicate that it has processed the key.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /&gt;</ph> 파생된 클래스에서 메서드를 컨트롤은 반환 <ph id="ph2">&lt;see langword="true" /&gt;</ph> 키가 처리 되었는지 나타냅니다.</target>       </trans-unit>
        <trans-unit id="2903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">
          <source>For keys that are not processed by the control, the result of calling the base class's <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /&gt;</ph> method should be returned.</source>
          <target state="translated">컨트롤의 기본 클래스의 호출 결과 의해 처리 되지 않은 키에 대 한 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /&gt;</ph> 메서드를 반환 해야 합니다.</target>       </trans-unit>
        <trans-unit id="2904" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
          <source>The character to process.</source>
          <target state="translated">처리할 문자입니다.</target>       </trans-unit>
        <trans-unit id="2905" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
          <source>Processes a mnemonic character.</source>
          <target state="translated">니모닉 문자를 처리합니다.</target>       </trans-unit>
        <trans-unit id="2906" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the character was processed as a mnemonic by the control; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 문자를 니모닉으로 처리하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
          <source>This method is called to give a control the opportunity to process a mnemonic character.</source>
          <target state="translated">이 메서드는 컨트롤의 니모닉 문자를 처리할 수 있도록 지정 합니다. 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="2908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
          <source>The method should determine whether the control is in a state to process mnemonics and if whether the given character represents a mnemonic.</source>
          <target state="translated">메서드가 결정 해야 컨트롤을 니모닉 처리 하는 상태에 있는지 여부와 지정 된 문자를 니모닉 나타내는지 합니다.</target>       </trans-unit>
        <trans-unit id="2909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
          <source>If so, the method should perform the action associated with the mnemonic and return <ph id="ph1">`true`</ph>.</source>
          <target state="translated">하는 경우,이 메서드는 수행 돌아가 니모닉와 연결 된 동작 <ph id="ph1">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
          <source>If not, the method should return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">메서드가 반환 하지, 하면 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
          <source>Implementations of this method often use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsMnemonic%2A&gt;</ph> method to determine whether the given character matches a mnemonic in the control's text.</source>
          <target state="translated">이 메서드의 구현에서는 자주 사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsMnemonic%2A&gt;</ph> 메서드를 지정 된 문자는 컨트롤의 텍스트에 니모닉과 일치 하는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="2912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="2913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
          <source>This default implementation of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessMnemonic%2A&gt;</ph> method simply returns <ph id="ph2">`false`</ph> to indicate that the control has no mnemonic.</source>
          <target state="translated">이 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessMnemonic%2A&gt;</ph> 메서드는 반환 <ph id="ph2">`false`</ph> 컨트롤에 없는 니모닉 있음을 나타내기 위해.</target>       </trans-unit>
        <trans-unit id="2914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
          <source>The following code example demonstrates an extension of the button class that overrides the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessMnemonic%2A&gt;</ph> method to exhibit custom behavior.</source>
          <target state="translated">다음 코드 예제에서는 재정의 하는 단추 클래스의 확장은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessMnemonic%2A&gt;</ph> 메서드를 사용자 지정 동작을 노출 합니다.</target>       </trans-unit>
        <trans-unit id="2915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
          <source>The example also demonstrates the use of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CanSelect%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsMnemonic%2A&gt;</ph> properties.</source>
          <target state="translated">이 예제에서는 또한의 사용법을 보여줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CanSelect%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsMnemonic%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="2916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
          <source>To run this example paste the following code after a form class, in the same file.</source>
          <target state="translated">이 예에서는 실행 하려면 같은 파일에 폼 클래스 뒤 다음 코드를 붙여 넣습니다.</target>       </trans-unit>
        <trans-unit id="2917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
          <source>Add a button of type <ph id="ph1">`MnemonicButton`</ph> to the form.</source>
          <target state="translated">형식의 단추 추가 <ph id="ph1">`MnemonicButton`</ph> 양식입니다.</target>       </trans-unit>
        <trans-unit id="2918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
          <source>for all windows for inheriting classes to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 클래스 상속을 위한 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="2919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2920" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.ProductName">
          <source>Gets the product name of the assembly containing the control.</source>
          <target state="translated">컨트롤이 포함된 어셈블리의 제품 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="2921" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductName">
          <source>The product name of the assembly containing the control.</source>
          <target state="translated">컨트롤이 포함된 어셈블리의 제품 이름입니다.</target>       </trans-unit>
        <trans-unit id="2922" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductName">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProductName%2A&gt;</ph> property is a read-only property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProductName%2A&gt;</ph> 속성은 읽기 전용 속성입니다.</target>       </trans-unit>
        <trans-unit id="2923" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductName">
          <source>To change the value of this property, set the <ph id="ph1">&lt;xref:System.Reflection.AssemblyProductAttribute.Product%2A&gt;</ph> property value of the <ph id="ph2">&lt;xref:System.Reflection.AssemblyProductAttribute&gt;</ph>.</source>
          <target state="translated">이 속성의 값을 변경 하려면는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyProductAttribute.Product%2A&gt;</ph> 의 속성 값은 <ph id="ph2">&lt;xref:System.Reflection.AssemblyProductAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2924" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductName">
          <source>The following line of C# code sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProductName%2A&gt;</ph> property.</source>
          <target state="translated">C# 코드 집합의 다음 줄은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProductName%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="2925" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductName">
          <source>It is strongly recommended that you provide the company name, product name, and product version.</source>
          <target state="translated">회사 이름, 제품 이름 및 제품 버전을 제공 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2926" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductName">
          <source>Providing this information enables the use of Windows Forms features such as <ph id="ph1">&lt;xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType&gt;</ph> that make it easier to write applications that comply with the "Certified for Windows" program.</source>
          <target state="translated">이 정보를 제공 사용할 수 있도록 Windows Forms 기능와 같은 <ph id="ph1">&lt;xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType&gt;</ph> "Certified for Windows" 프로그램 준수 하는 응용 프로그램을 작성할을 보다 쉽게 만들어 주는 합니다.</target>       </trans-unit>
        <trans-unit id="2927" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductName">
          <source>For more information about the Certified for Windows program, see <ph id="ph1">http://msdn.microsoft.com/certification</ph>.</source>
          <target state="translated">Certified for Windows 프로그램에 대 한 자세한 내용은 참조 <ph id="ph1">http://msdn.microsoft.com/certification</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2928" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductName">
          <source>The following code example displays information about the application in a <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> contained by a <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서 응용 프로그램에 대 한 정보를 표시 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> 에 포함 된 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2929" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductName">
          <source>This example requires that the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CompanyName%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProductName%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ProductVersion%2A&gt;</ph> have been set.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CompanyName%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProductName%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ProductVersion%2A&gt;</ph> 설정 되었습니다.</target>       </trans-unit>
        <trans-unit id="2930" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.ProductVersion">
          <source>Gets the version of the assembly containing the control.</source>
          <target state="translated">컨트롤이 포함된 어셈블리의 버전을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="2931" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductVersion">
          <source>The file version of the assembly containing the control.</source>
          <target state="translated">컨트롤이 포함된 어셈블리의 파일 버전입니다.</target>       </trans-unit>
        <trans-unit id="2932" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductVersion">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProductVersion%2A&gt;</ph> property is a read-only property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProductVersion%2A&gt;</ph> 속성은 읽기 전용 속성입니다.</target>       </trans-unit>
        <trans-unit id="2933" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductVersion">
          <source>To change the value of this property, set the <ph id="ph1">&lt;xref:System.Reflection.AssemblyVersionAttribute.Version%2A&gt;</ph> property value of the <ph id="ph2">&lt;xref:System.Reflection.AssemblyVersionAttribute&gt;</ph>.</source>
          <target state="translated">이 속성의 값을 변경 하려면는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyVersionAttribute.Version%2A&gt;</ph> 의 속성 값은 <ph id="ph2">&lt;xref:System.Reflection.AssemblyVersionAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2934" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductVersion">
          <source>The following line of C# code sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProductVersion%2A&gt;</ph> property.</source>
          <target state="translated">C# 코드 집합의 다음 줄은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProductVersion%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="2935" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductVersion">
          <source>It is strongly recommended that you provide the company name, product name, and product version.</source>
          <target state="translated">회사 이름, 제품 이름 및 제품 버전을 제공 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="2936" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductVersion">
          <source>Providing this information enables the use of Windows Forms features such as <ph id="ph1">&lt;xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType&gt;</ph> that make it easier to write applications that comply with the "Certified for Windows" program.</source>
          <target state="translated">이 정보를 제공 사용할 수 있도록 Windows Forms 기능와 같은 <ph id="ph1">&lt;xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType&gt;</ph> "Certified for Windows" 프로그램 준수 하는 응용 프로그램을 작성할을 보다 쉽게 만들어 주는 합니다.</target>       </trans-unit>
        <trans-unit id="2937" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductVersion">
          <source>For more information about the Certified for Windows program, see <ph id="ph1">http://msdn.microsoft.com/certification</ph>.</source>
          <target state="translated">Certified for Windows 프로그램에 대 한 자세한 내용은 참조 <ph id="ph1">http://msdn.microsoft.com/certification</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2938" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductVersion">
          <source>The following code example displays information about the application in a <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> contained by a <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서 응용 프로그램에 대 한 정보를 표시 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> 에 포함 된 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2939" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ProductVersion">
          <source>This example requires that the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CompanyName%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProductName%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ProductVersion%2A&gt;</ph> have been set.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CompanyName%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ProductName%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.ProductVersion%2A&gt;</ph> 설정 되었습니다.</target>       </trans-unit>
        <trans-unit id="2940" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.PropagatingImeMode">
          <source>Gets an object that represents a propagating IME mode.</source>
          <target state="translated">전파 IME 모드를 나타내는 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="2941" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.PropagatingImeMode">
          <source>An object that represents a propagating IME mode.</source>
          <target state="translated">전파 IME 모드를 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="2942" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.QueryAccessibilityHelp">
          <source>Occurs when <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleObject" /&gt;</ph> is providing help to accessibility applications.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.AccessibleObject" /&gt;</ph>가 내게 필요한 옵션 지원 응용 프로그램에 도움말을 제공하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="2943" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryAccessibilityHelp">
          <source>You should use the <ph id="ph1">&lt;xref:System.Windows.Forms.HelpProvider&gt;</ph> class to enable users to invoke help on your accessible object by pressing the F1 key.</source>
          <target state="translated">사용 해야는 <ph id="ph1">&lt;xref:System.Windows.Forms.HelpProvider&gt;</ph> 클래스를 사용 하는 사용자가 F1 키를 눌러 액세스 가능한 개체에 대 한 도움말을 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2944" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryAccessibilityHelp">
          <source>Using the <ph id="ph1">&lt;xref:System.Windows.Forms.HelpProvider&gt;</ph> provides you with complete information in the <ph id="ph2">&lt;xref:System.Windows.Forms.QueryAccessibilityHelpEventArgs&gt;</ph>.</source>
          <target state="translated">사용 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.HelpProvider&gt;</ph> 에 완전 한 정보를 제공는 <ph id="ph2">&lt;xref:System.Windows.Forms.QueryAccessibilityHelpEventArgs&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2945" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryAccessibilityHelp">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2946" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryAccessibilityHelp">
          <source>The following code example demonstrates the creation of an accessibility-aware chart control, using the <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject&gt;</ph> classes to expose accessible information.</source>
          <target state="translated">다음 코드 예제에는 내게 필요한 옵션 인식 차트를 만드는 방법을 보여 줍니다. 컨트롤을 사용 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ControlAccessibleObject&gt;</ph> 클래스 액세스할 수 있는 정보를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="2947" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryAccessibilityHelp">
          <source>The control plots two curves along with a legend.</source>
          <target state="translated">컨트롤은 범례를 따라 두 곡선을 그립니다.</target>       </trans-unit>
        <trans-unit id="2948" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryAccessibilityHelp">
          <source>The <ph id="ph1">`ChartControlAccessibleObject`</ph> class, which derives from <ph id="ph2">`ControlAccessibleObject`</ph>, is used in the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A&gt;</ph> method to provide custom accessible information for the chart control.</source>
          <target state="translated"><ph id="ph1">`ChartControlAccessibleObject`</ph> 클래스에서 파생 되 <ph id="ph2">`ControlAccessibleObject`</ph>에 사용 되는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A&gt;</ph> 메서드는 차트 컨트롤에 대 한 사용자 지정 액세스할 수 있는 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="2949" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryAccessibilityHelp">
          <source>Since the chart legend is not an actual <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> -based control, but instead is drawn by the chart control, it does not any built-in accessible information.</source>
          <target state="translated">차트 범례는 실제 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> -컨트롤을 따르지만 그려지며 차트 컨트롤에서 액세스할 수 있는 기본 제공 정보를 포함 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="2950" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryAccessibilityHelp">
          <source>Because of this, the <ph id="ph1">`ChartControlAccessibleObject`</ph> class overrides the <ph id="ph2">&lt;xref:System.Windows.Forms.AccessibleObject.GetChild%2A&gt;</ph> method to return the <ph id="ph3">`CurveLegendAccessibleObject`</ph> that represents accessible information for each part of the legend.</source>
          <target state="translated">이 인해는 <ph id="ph1">`ChartControlAccessibleObject`</ph> 재정의 <ph id="ph2">&lt;xref:System.Windows.Forms.AccessibleObject.GetChild%2A&gt;</ph> 반환 하는 메서드는 <ph id="ph3">`CurveLegendAccessibleObject`</ph> 범례의 각 부분에 액세스할 수 있는 정보를 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="2951" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryAccessibilityHelp">
          <source>When an accessible-aware application uses this control, the control can provide the necessary accessible information.</source>
          <target state="translated">액세스할 수 있는 인식 응용 프로그램이이 제어를 사용 하는 경우 컨트롤은 필요한 액세스 가능 정보를 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="2952" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryAccessibilityHelp">
          <source>This code excerpt demonstrates handling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryAccessibilityHelp&gt;</ph> event.</source>
          <target state="translated">이 코드 발췌 예에는 처리 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryAccessibilityHelp&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2953" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryAccessibilityHelp">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> class overview for the complete code example.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Windows.Forms.AccessibleObject&gt;</ph> 전체 코드 예제에 대 한 클래스 개요입니다.</target>       </trans-unit>
        <trans-unit id="2954" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>Occurs during a drag-and-drop operation and enables the drag source to determine whether the drag-and-drop operation should be canceled.</source>
          <target state="translated">끌어서 놓기 작업 중에 발생하며 끌기 소스가 끌어서 놓기 작업을 취소해야 할지를 결정하도록 합니다.</target>       </trans-unit>
        <trans-unit id="2955" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event is raised when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> 이벤트는 끌어서 놓기 작업 중 키보드 또는 마우스 단추 상태가 변경 될 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="2956" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> 이벤트를 사용 하면 끌기 소스가 끌어서 놓기 작업을 취소 해야 할지를 결정 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="2957" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>The following describes how and when events related to drag-and-drop operations are raised.</source>
          <target state="translated">다음에서는 끌어서 놓기 작업이 발생하는 방식 및 시기에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="2958" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method determines the control under the current cursor location.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 메서드는 현재 커서 위치에서 컨트롤을 확인 합니다.</target>       </trans-unit>
        <trans-unit id="2959" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>It then checks to see if the control is a valid drop target.</source>
          <target state="translated">그런 다음 컨트롤은 유효한 놓기 대상 인지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="2960" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>If the control is a valid drop target, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the drag-and-drop effect specified.</source>
          <target state="translated">컨트롤이 유효한 놓기 대상일 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 지정 된 끌어서 놓기 효과 함께 발생 합니다.</target>       </trans-unit>
        <trans-unit id="2961" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>For a list of drag-and-drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
          <target state="translated">끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> 열거형을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2962" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</source>
          <target state="translated">마우스 커서 위치, 키보드 상태 및 마우스 단추 상태의 변경 내용을 추적합니다.</target>       </trans-unit>
        <trans-unit id="2963" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>If the user moves out of a window, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
          <target state="translated">사용자가 창의 외부로 이동하면 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> 이벤트가 발생합니다.</target>       </trans-unit>
        <trans-unit id="2964" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>If the mouse enters another control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph> for that control is raised.</source>
          <target state="translated">마우스를 다른 컨트롤로 가져가면 해당 컨트롤에 대한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragEnter&gt;</ph>가 발생합니다.</target>       </trans-unit>
        <trans-unit id="2965" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>If the mouse moves but stays within the same control, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised.</source>
          <target state="translated">마우스를 동일한 컨트롤 내에서 이동하면 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 이벤트가 발생합니다.</target>       </trans-unit>
        <trans-unit id="2966" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>If there is a change in the keyboard or mouse button state, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> property of the event's <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>.</source>
          <target state="translated">키보드 또는 마우스 단추 상태가 변경 될 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> 이벤트가 발생 하 고 데이터를 끌기를 계속할지 여부를 결정 하거나의 값을 기준으로 작업을 취소 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> 이벤트의 속성 <ph id="ph3">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2967" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Continue`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event is raised to continue the operation and the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event is raised with the new effect so appropriate visual feedback can be set.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Continue`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 이벤트 작업을 계속 하려면는 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 적절 한 시각적 피드백이 설정 될 수 있도록 새로운 효과 함께 발생 합니다.</target>       </trans-unit>
        <trans-unit id="2968" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>For a list of valid drop effects, see the <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> enumeration.</source>
          <target state="translated">유효한 끌어서 놓기 작업 결과 목록에 대한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph> 열거형을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="2969" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트는 쌍을 이루고 있어서 마우스가 놓기 대상을 통과할 사용자에 게 마우스 위치에 대 한 최신 피드백이 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="2970" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Drop`</ph>, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Drop`</ph>, 놓기 효과 값이 원본에 반환, 되므로 소스 응용 프로그램이 소스 데이터에 대해 적절 한 작업을 수행할 수 예를 들어 데이터 잘라내기 작업이 이동 인 경우.</target>       </trans-unit>
        <trans-unit id="2971" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>If the value of <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> is <ph id="ph2">`Cancel`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> event is raised.</source>
          <target state="translated">하는 경우의 값 <ph id="ph1">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 은 <ph id="ph2">`Cancel`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DragLeave&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="2972" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>By default, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event sets <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> to <ph id="ph3">`Cancel`</ph> in <ph id="ph4">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> if the ESC key was pressed and sets <ph id="ph5">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> to <ph id="ph6">`Drop`</ph> in <ph id="ph7">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> if the left, middle, or right mouse button is pressed.</source>
          <target state="translated">기본적으로는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> 이벤트 설정 <ph id="ph2">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> 를 <ph id="ph3">`Cancel`</ph> 에 <ph id="ph4">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> ESC 키를 누른 설정 하는 경우 <ph id="ph5">&lt;xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A&gt;</ph> 를 <ph id="ph6">`Drop`</ph> 에 <ph id="ph7">&lt;xref:System.Windows.Forms.DragAction&gt;</ph> 왼쪽, 가운데 또는 오른쪽 마우스 단추를 누를 경우.</target>       </trans-unit>
        <trans-unit id="2973" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="2974" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>The following code example demonstrates a drag-and-drop operation between two <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> controls.</source>
          <target state="translated">다음 코드 예제에서는 두 끌어서 놓기 작업을 보여 줍니다. <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="2975" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>The example calls the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method when the drag action starts.</source>
          <target state="translated">예제에서는 호출은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 끌기 작업이 시작 될 때 메서드.</target>       </trans-unit>
        <trans-unit id="2976" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>The drag action starts if the mouse has moved more than <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType&gt;</ph> from the mouse location during the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event.</source>
          <target state="translated">마우스를 이동 하는 경우 끌기 작업이 시작 이상 <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType&gt;</ph> 하는 동안 마우스 위치에서의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2977" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox.IndexFromPoint%2A&gt;</ph> method is used to determine the index of the item to drag during the <ph id="ph2">`MouseDown`</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.ListBox.IndexFromPoint%2A&gt;</ph> 메서드 결정 하는 동안 끌어 항목의 인덱스를 사용 하는 <ph id="ph2">`MouseDown`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2978" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>The example also demonstrates using custom cursors for the drag-and-drop operation.</source>
          <target state="translated">또한이 예제에서는 끌어서 놓기 작업에 대 한 사용자 지정 커서를 사용 하 여 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="2979" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>The example requires that two cursor files,<ph id="ph1">`3dwarro.cur`</ph> and <ph id="ph2">`3dwno.cur`</ph>, exist in the application directory, for the custom drag and no-drop cursors, respectively.</source>
          <target state="translated">이 예제를 실행 하려면 커서 파일<ph id="ph1">`3dwarro.cur`</ph> 및 <ph id="ph2">`3dwno.cur`</ph>, 사용자 지정 끌어서에 대 한 응용 프로그램 디렉터리에 있으면 놓기-커서, 각각.</target>       </trans-unit>
        <trans-unit id="2980" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>The custom cursors will be used if the <ph id="ph1">`UseCustomCursorsCheck`</ph><ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> is checked.</source>
          <target state="translated">사용자 지정 커서 사용 하는 경우는 <ph id="ph1">`UseCustomCursorsCheck`</ph> <ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> 을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="2981" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>The custom cursors are set in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> event handler.</source>
          <target state="translated">에 설정 된 사용자 지정 커서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.GiveFeedback&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="2982" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>The keyboard state is evaluated in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> event handler for the right <ph id="ph2">`ListBox`</ph>, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</source>
          <target state="translated">키보드 상태에서 평가 됩니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DragOver&gt;</ph> 오른쪽에 대 한 이벤트 처리기 <ph id="ph2">`ListBox`</ph>항목 끌기 작업을 결정 하는, SHIFT, CTRL 및 ALT, CTRL + ALT 키의 상태를 기반 합니다.</target>       </trans-unit>
        <trans-unit id="2983" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>The location in the <ph id="ph1">`ListBox`</ph> where the drop would occur is also determined during the <ph id="ph2">`DragOver`</ph> event.</source>
          <target state="translated">위치는 <ph id="ph1">`ListBox`</ph> 삭제가 발생 중도 결정 됩니다는 <ph id="ph2">`DragOver`</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2984" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>If the data to drop is not a <ph id="ph1">`String`</ph>, then the <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType&gt;</ph> is set to <ph id="ph3">`None`</ph> in <ph id="ph4">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph>.</source>
          <target state="translated">삭제할 데이터가 아닌 경우는 <ph id="ph1">`String`</ph>, 하면 <ph id="ph2">&lt;xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType&gt;</ph> 로 설정 된 <ph id="ph3">`None`</ph> 에서 <ph id="ph4">&lt;xref:System.Windows.Forms.DragDropEffects&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2985" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>Finally, the status of the drop is displayed in the <ph id="ph1">`DropLocationLabel`</ph><ph id="ph2">&lt;xref:System.Windows.Forms.Label&gt;</ph>.</source>
          <target state="translated">드롭다운 상태에 표시 되는 마지막으로,는 <ph id="ph1">`DropLocationLabel`</ph> <ph id="ph2">&lt;xref:System.Windows.Forms.Label&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2986" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>The data to drop for the right <ph id="ph1">`ListBox`</ph> is determined in the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> event handler and the <ph id="ph3">`String`</ph> value is added at the appropriate place in the <ph id="ph4">`ListBox`</ph>.</source>
          <target state="translated">데이터를 오른쪽에 대 한 drop <ph id="ph1">`ListBox`</ph> 에 따라 결정 됩니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DragDrop&gt;</ph> 이벤트 처리기 및 <ph id="ph3">`String`</ph> 적절 한 위치에서 값이 추가 <ph id="ph4">`ListBox`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="2987" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event handler.</source>
          <target state="translated">끌기 작업, 폼의 경계를 벗어나면 경우에서 끌어서 놓기 작업이 취소 되 고 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="2988" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>This code excerpt demonstrates using the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> event.</source>
          <target state="translated">이 코드 발췌 한 구문을 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.QueryContinueDrag&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2989" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.QueryContinueDrag">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> method for the complete code example.</source>
          <target state="translated">참조는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoDragDrop%2A&gt;</ph> 전체 코드 예제에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="2990" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)">
          <source>The event to raise.</source>
          <target state="translated">발생시킬 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2991" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2992" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)">
          <source>Raises the appropriate drag event.</source>
          <target state="translated">적합한 끌기 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2993" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)">
          <source>The event to raise.</source>
          <target state="translated">발생시킬 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2994" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.KeyEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.KeyEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2995" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)">
          <source>Raises the appropriate key event.</source>
          <target state="translated">적합한 키 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2996" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)">
          <source>The event to raise.</source>
          <target state="translated">발생시킬 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="2997" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.MouseEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.MouseEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="2998" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)">
          <source>Raises the appropriate mouse event.</source>
          <target state="translated">적합한 마우스 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="2999" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)">
          <source>The event to raise.</source>
          <target state="translated">발생시킬 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3000" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.PaintEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.PaintEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3001" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)">
          <source>Raises the appropriate paint event.</source>
          <target state="translated">적합한 Paint 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="3002" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RecreateHandle">
          <source>Forces the re-creation of the handle for the control.</source>
          <target state="translated">해당 컨트롤의 핸들을 강제로 다시 만듭니다.</target>       </trans-unit>
        <trans-unit id="3003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.RecreateHandle">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RecreateHandle%2A&gt;</ph> method is called whenever parameters are needed for a new control, but using a call from <ph id="ph2">&lt;xref:System.Windows.Forms.Control.UpdateStyles%2A&gt;</ph> to <ph id="ph3">&lt;xref:System.Windows.Forms.Control.CreateParams%2A&gt;</ph> is insufficient.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.RecreateHandle%2A&gt;</ph> 메서드는 새 컨트롤에 대 한 매개 변수가 필요 하지만 코드에서 호출을 사용 하 여 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.UpdateStyles%2A&gt;</ph> 를 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.CreateParams%2A&gt;</ph> 충분 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="3004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.RecreateHandle">
          <source>This method also calls <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DestroyHandle%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.CreateHandle%2A&gt;</ph> and sets <ph id="ph3">&lt;xref:System.Windows.Forms.Control.RecreatingHandle%2A&gt;</ph> to <ph id="ph4">`true`</ph>.</source>
          <target state="translated">이 메서드를 호출 또한 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DestroyHandle%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.CreateHandle%2A&gt;</ph> 설정 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.RecreatingHandle%2A&gt;</ph> 를 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3005" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.RecreatingHandle">
          <source>Gets a value indicating whether the control is currently re-creating its handle.</source>
          <target state="translated">컨트롤이 현재 자신의 핸들을 다시 만들고 있는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="3006" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RecreatingHandle">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control is currently re-creating its handle; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 현재 자신의 핸들을 다시 만들고 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3007" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RecreatingHandle">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RecreatingHandle%2A&gt;</ph> property returns <ph id="ph2">`true`</ph> if the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.RecreateHandle%2A&gt;</ph> method is still running on the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.RecreatingHandle%2A&gt;</ph> 속성에서 반환 <ph id="ph2">`true`</ph> 경우는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.RecreateHandle%2A&gt;</ph> 메서드 컨트롤에서 계속 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="3008" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)">
          <source>The screen coordinate <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph> to convert.</source>
          <target state="translated">변환할 화면 좌표 <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3009" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)">
          <source>Computes the size and location of the specified screen rectangle in client coordinates.</source>
          <target state="translated">지정된 화면 사각형의 크기와 위치를 클라이언트 좌표로 계산합니다.</target>       </trans-unit>
        <trans-unit id="3010" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph> that represents the converted <ph id="ph2">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph>, <ph id="ph3">&lt;paramref name="r" /&gt;</ph>, in client coordinates.</source>
          <target state="translated">변환된 <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph>인 <ph id="ph2">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph>를 클라이언트 좌표로 나타내는 <ph id="ph3">&lt;paramref name="r" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3011" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)">
          <source>The client coordinate <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph> to convert.</source>
          <target state="translated">변환할 클라이언트 좌표 <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3012" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)">
          <source>Computes the size and location of the specified client rectangle in screen coordinates.</source>
          <target state="translated">지정된 클라이언트 사각형의 크기와 위치를 화면 좌표로 계산합니다.</target>       </trans-unit>
        <trans-unit id="3013" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph> that represents the converted <ph id="ph2">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph>, <ph id="ph3">&lt;paramref name="p" /&gt;</ph>, in screen coordinates.</source>
          <target state="translated">변환된 <ph id="ph1">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph>인 <ph id="ph2">&lt;see cref="T:System.Drawing.Rectangle" /&gt;</ph>를 화면 좌표로 나타내는 <ph id="ph3">&lt;paramref name="p" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.RectangleToScreen%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PointToScreen%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.MouseButtons%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph6">&lt;xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType&gt;</ph> members.</source>
          <target state="translated">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.RectangleToScreen%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.PointToScreen%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.MouseButtons%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType&gt;</ph>, 및 <ph id="ph6">&lt;xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType&gt;</ph> 멤버입니다.</target>       </trans-unit>
        <trans-unit id="3015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)">
          <source>To run the example, paste the following code in a form called <bpt id="p1">**</bpt>Form1<ept id="p1">**</ept> containing several controls.</source>
          <target state="translated">이라는 폼에는 예제를 실행 하려면 다음 코드를 붙여 <bpt id="p1">**</bpt>Form1<ept id="p1">**</ept> 여러 개의 컨트롤이 들어 있습니다.</target>       </trans-unit>
        <trans-unit id="3016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)">
          <source>This example requires that the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> events are connected to the event handlers defined in the example.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseMove&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.MouseUp&gt;</ph> 이벤트가 예에서 정의 된 이벤트 처리기에 연결 합니다.</target>       </trans-unit>
        <trans-unit id="3017" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> representing the handle of the control to reflect the message to.</source>
          <target state="translated">메시지를 반영할 컨트롤 핸들을 나타내는 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3018" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph> representing the Windows message to reflect.</source>
          <target state="translated">반영할 Windows 메시지를 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3019" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)">
          <source>Reflects the specified message to the control that is bound to the specified handle.</source>
          <target state="translated">지정된 메시지를 특정 핸들에 바인딩된 컨트롤에 반영합니다.</target>       </trans-unit>
        <trans-unit id="3020" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message was reflected; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">메시지가 반영되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ReflectMessage%2A&gt;</ph> method is an infrastructure method and typically should not be called from your code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.ReflectMessage%2A&gt;</ph> 메서드는 인프라 메서드이며 및 일반적으로 코드에서 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="3022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)">
          <source>If the <ph id="ph1">`hWnd`</ph> parameter does not represent a valid control, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ReflectMessage%2A&gt;</ph> method returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">`hWnd`</ph> 매개 변수가 유효한 제어를 나타내지 않을 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ReflectMessage%2A&gt;</ph> 메서드 반환 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)">
          <source>Because Windows messages are returned to the top-level window, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ReflectMessage%2A&gt;</ph> method is used to propagate the return message to the control that sent the message.</source>
          <target state="translated">Windows 메시지 최상위 창에 반환 되므로 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ReflectMessage%2A&gt;</ph> 메서드 메시지를 보낸 컨트롤에 반환 메시지를 전파 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="3024" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)">
          <source>for all windows to call this method.</source>
          <target state="translated">이 메서드를 호출 하는 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="3025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3026" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Refresh">
          <source>Forces the control to invalidate its client area and immediately redraw itself and any child controls.</source>
          <target state="translated">컨트롤이 해당 컨트롤의 클라이언트 영역을 강제로 무효화하도록 하고 컨트롤 자체와 모든 자식 컨트롤을 즉시 다시 그리도록 합니다.</target>       </trans-unit>
        <trans-unit id="3027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Refresh">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.Refresh" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.Refresh" /&gt;</ph> method so the control and its child controls are invalidated and redrawn.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.Refresh" /&gt;</ph> 파생된 클래스에서 호출 해야 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.Refresh" /&gt;</ph> 메서드 컨트롤과 해당 자식 컨트롤을 무효화 하 고 다시 그립니다.</target>       </trans-unit>
        <trans-unit id="3028" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Region">
          <source>Gets or sets the window region associated with the control.</source>
          <target state="translated">컨트롤과 연결된 창 영역을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3029" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Region">
          <source>The window <ph id="ph1">&lt;see cref="T:System.Drawing.Region" /&gt;</ph> associated with the control.</source>
          <target state="translated">컨트롤과 연결된 창 <ph id="ph1">&lt;see cref="T:System.Drawing.Region" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3030" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Region">
          <source>The window region is a collection of pixels within the window where the operating system permits drawing.</source>
          <target state="translated">창 영역은 운영 체제에서 그리기가 허용 하는 창 내의 픽셀의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="3031" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Region">
          <source>The operating system does not display any portion of a window that lies outside of the window region.</source>
          <target state="translated">운영 체제 창의 창 영역 외부에 있는 모든 부분을 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="3032" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Region">
          <source>The coordinates of a control's region are relative to the upper-left corner of the control, not the client area of the control.</source>
          <target state="translated">컨트롤의 영역 좌표가 되지 않은 컨트롤의 클라이언트 영역 컨트롤의 왼쪽 위 모퉁이 기준으로 합니다.</target>       </trans-unit>
        <trans-unit id="3033" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Region">
          <source>The collection of pixels contained with the region can be noncontiguous.</source>
          <target state="translated">영역과 함께 포함 되는 픽셀 컬렉션 인접 하지 않은 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3034" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Region">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Region%2A&gt;</ph> property by creating a round button.</source>
          <target state="translated">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Region%2A&gt;</ph> 라운드 단추 만들어 속성입니다.</target>       </trans-unit>
        <trans-unit id="3035" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Region">
          <source>To run the example, paste the following code in a form containing a button called <ph id="ph1">`roundButton`</ph>.</source>
          <target state="translated">예제를 실행 하려면 다음 코드를 붙여 이라는 단추가 있는 형태로 <ph id="ph1">`roundButton`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3036" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Region">
          <source>This example requires that the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event is connected to the event handler defined in the example.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> 이벤트가 예에서 정의 된 이벤트 처리기에 연결 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="3037" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Region">
          <source>for all windows to set this property value.</source>
          <target state="translated">이 속성 값을 설정 하려면 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="3038" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Region">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="3039" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.RegionChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Region" /&gt;</ph> property changes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Region" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3040" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.RegionChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3041" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.RegionChanged">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="3042" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.RegionChanged">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RegionChanged&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RegionChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3043" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.RegionChanged">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3044" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.RegionChanged">
          <source>To report on multiple events or on events that occur frequently, consider replacing <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> with <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or appending the message to a multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 여러 줄에 메시지를 추가 하거나 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3045" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.RegionChanged">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3046" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.RegionChanged">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.RegionChanged&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.RegionChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3047" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.RenderRightToLeft">
          <source>This property is now obsolete.</source>
          <target state="translated">이 속성은 더 이상 사용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="3048" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RenderRightToLeft">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control is rendered from right to left; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 오른쪽에서 왼쪽으로 렌더링되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3049" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RenderRightToLeft">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3050" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RescaleConstantsForDpi(System.Int32,System.Int32)">
          <source>The DPI value prior to the change.</source>
          <target state="translated">변경 전의 DPI 값입니다.</target>       </trans-unit>
        <trans-unit id="3051" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RescaleConstantsForDpi(System.Int32,System.Int32)">
          <source>The DPI value after the change.</source>
          <target state="translated">변경 후의 DPI 값입니다.</target>       </trans-unit>
        <trans-unit id="3052" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RescaleConstantsForDpi(System.Int32,System.Int32)">
          <source>Provides constants for rescaling the control when a DPI change occurs.</source>
          <target state="translated">DPI가 변경될 때 컨트롤 크기를 재조정하기 위한 상수를 제공합니다.</target>       </trans-unit>
        <trans-unit id="3053" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ResetBackColor">
          <source>Resets the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.BackColor" /&gt;</ph> property to its default value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.BackColor" /&gt;</ph> 속성을 기본값으로 다시 설정합니다.</target>       </trans-unit>
        <trans-unit id="3054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResetBackColor">
          <source>This method is not relevant for this class.</source>
          <target state="translated">이 메서드는 이 클래스와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="3055" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ResetBindings">
          <source>Causes a control bound to the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.BindingSource" /&gt;</ph> to reread all the items in the list and refresh their displayed values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.BindingSource" /&gt;</ph>에 바인딩된 컨트롤에서 목록의 모든 항목을 다시 읽고 표시된 값을 새로 고치도록 합니다.</target>       </trans-unit>
        <trans-unit id="3056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResetBindings">
          <source>This method is not relevant for this class.</source>
          <target state="translated">이 메서드는 이 클래스와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="3057" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ResetCursor">
          <source>Resets the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Cursor" /&gt;</ph> property to its default value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Cursor" /&gt;</ph> 속성을 기본값으로 다시 설정합니다.</target>       </trans-unit>
        <trans-unit id="3058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResetCursor">
          <source>This method is not relevant for this class.</source>
          <target state="translated">이 메서드는 이 클래스와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="3059" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ResetFont">
          <source>Resets the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Font" /&gt;</ph> property to its default value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Font" /&gt;</ph> 속성을 기본값으로 다시 설정합니다.</target>       </trans-unit>
        <trans-unit id="3060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResetFont">
          <source>This method is not relevant for this class.</source>
          <target state="translated">이 메서드는 이 클래스와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="3061" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ResetForeColor">
          <source>Resets the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ForeColor" /&gt;</ph> property to its default value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ForeColor" /&gt;</ph> 속성을 기본값으로 다시 설정합니다.</target>       </trans-unit>
        <trans-unit id="3062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResetForeColor">
          <source>This method is not relevant for this class.</source>
          <target state="translated">이 메서드는 이 클래스와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="3063" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ResetImeMode">
          <source>Resets the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ImeMode" /&gt;</ph> property to its default value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ImeMode" /&gt;</ph> 속성을 기본값으로 다시 설정합니다.</target>       </trans-unit>
        <trans-unit id="3064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResetImeMode">
          <source>This method is not relevant for this class.</source>
          <target state="translated">이 메서드는 이 클래스와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="3065" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ResetMouseEventArgs">
          <source>Resets the control to handle the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseLeave" /&gt;</ph> event.</source>
          <target state="translated">컨트롤을 다시 설정하여 <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.MouseLeave" /&gt;</ph> 이벤트를 처리합니다.</target>       </trans-unit>
        <trans-unit id="3066" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ResetRightToLeft">
          <source>Resets the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.RightToLeft" /&gt;</ph> property to its default value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.RightToLeft" /&gt;</ph> 속성을 기본값으로 다시 설정합니다.</target>       </trans-unit>
        <trans-unit id="3067" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResetRightToLeft">
          <source>This method is not relevant for this class.</source>
          <target state="translated">이 메서드는 이 클래스와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="3068" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ResetText">
          <source>Resets the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Text" /&gt;</ph> property to its default value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Text" /&gt;</ph> 속성을 기본값으로 다시 설정합니다.</target>       </trans-unit>
        <trans-unit id="3069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResetText">
          <source>You typically use this method if you are either creating a designer for the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> or creating your own control incorporating the <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph>.</source>
          <target state="translated">에 대 한 디자이너를 만들거나 하는 경우 일반적으로이 메서드를 사용는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 포함 하는 사용자 고유의 컨트롤을 만드는 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3070" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.Resize">
          <source>Occurs when the control is resized.</source>
          <target state="translated">컨트롤의 크기를 조정하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3071" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Resize">
          <source>To determine the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> of the resized control, you can cast the <ph id="ph2">`sender`</ph> parameter of the registered <ph id="ph3">&lt;xref:System.Windows.Forms.ControlEventHandler&gt;</ph> method  to a <ph id="ph4">&lt;xref:System.Windows.Forms.Control&gt;</ph> and get its <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> property (or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> and <ph id="ph7">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> properties individually).</source>
          <target state="translated">결정 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> 크기가 조정된 된 컨트롤의 캐스팅할 수 있습니다는 <ph id="ph2">`sender`</ph> 의 등록 된 매개 변수 <ph id="ph3">&lt;xref:System.Windows.Forms.ControlEventHandler&gt;</ph> 메서드를 한 <ph id="ph4">&lt;xref:System.Windows.Forms.Control&gt;</ph> 가져오고, 해당 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> 속성 (또는 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> 및 <ph id="ph7">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> 속성 개별적으로).</target>       </trans-unit>
        <trans-unit id="3072" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Resize">
          <source>To handle custom layouts, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event instead of the Resize event.</source>
          <target state="translated">사용자 지정 레이아웃을 처리 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 크기 조정 이벤트 대신 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3073" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Resize">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event is raised in response to a <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Resize&gt;</ph> event, but also in response to other changes that affect the layout of the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 에 대 한 응답 이벤트는 사용자가 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Resize&gt;</ph> 뿐만 아니라 다른 변경 사항에 따라 컨트롤의 레이아웃에 영향을 주는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3074" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Resize">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3075" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Resize">
          <source>The following code example handles the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Resize&gt;</ph> event of a <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 핸들의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Resize&gt;</ph> 의 이벤트는 <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3076" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Resize">
          <source>When the form is resized, the event handler ensures that the form stays square (its <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> remain equal).</source>
          <target state="translated">폼 크기를 조정 하는 경우 이벤트 처리기 폼 제곱 하 게 유지 하면 (해당 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> 와 같도록 그대로 유지).</target>       </trans-unit>
        <trans-unit id="3077" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Resize">
          <source>To run this example, make sure and associate this event-handling method with the form’s <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Resize&gt;</ph> event.</source>
          <target state="translated">이 예제를 실행 하려면 있어야 하 고이 이벤트 처리 메서드를 폼의 연결 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Resize&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3078" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.ResizeRedraw">
          <source>Gets or sets a value indicating whether the control redraws itself when resized.</source>
          <target state="translated">크기를 조정하는 경우 컨트롤이 자신을 다시 그리는지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3079" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ResizeRedraw">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control redraws itself when resized; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">크기를 조정하는 경우 컨트롤이 자신을 다시 그리면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3080" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ResizeRedraw">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResizeRedraw%2A&gt;</ph> property value is equivalent to the return value of the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GetStyle%2A&gt;</ph> method when passing in the <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles.ResizeRedraw?displayProperty=nameWithType&gt;</ph> value as a parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResizeRedraw%2A&gt;</ph> 속성 값은 반환 값에 해당 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GetStyle%2A&gt;</ph> 전달 하는 경우 메서드는 <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles.ResizeRedraw?displayProperty=nameWithType&gt;</ph> 값을 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="3081" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Control">
          <source>Resumes the usual layout logic.</source>
          <target state="translated">일반 레이아웃 논리를 다시 시작합니다.</target>       </trans-unit>
        <trans-unit id="3082" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ResumeLayout">
          <source>Resumes usual layout logic.</source>
          <target state="translated">일반 레이아웃 논리를 다시 시작합니다.</target>       </trans-unit>
        <trans-unit id="3083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResumeLayout">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method forces an immediate layout if there are any pending layout requests.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 보류 중인 레이아웃 요청 되어 있는 경우 메서드 강제로 즉시 레이아웃 합니다.</target>       </trans-unit>
        <trans-unit id="3084" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResumeLayout">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> methods are used in tandem to suppress multiple <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> events while you adjust multiple attributes of the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 메서드는 동시에 표시 하지 않는 데 여러 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 컨트롤의 여러 속성을 조정 하는 동안 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3085" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResumeLayout">
          <source>For example, you would typically call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> method, then set the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> properties of the control, and then call the <ph id="ph6">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method to enable the changes to take effect.</source>
          <target state="translated">예를 들어 일반적으로 호출 하는 것의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 메서드를 설정 합니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph>, 또는 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> 호출 고 컨트롤의 속성은 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 메서드 변경 내용을 적용 하려면 사용할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="3086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResumeLayout">
          <source>There must be no pending calls to <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> for <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> to be successfully called.</source>
          <target state="translated">에 대 한 보류 중인 호출 해야 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 에 대 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 성공적으로 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3087" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResumeLayout">
          <source>The following code example adds two buttons to a form.</source>
          <target state="translated">다음 코드 예제에서는 폼에 두 개의 단추를 추가합니다.</target>       </trans-unit>
        <trans-unit id="3088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResumeLayout">
          <source>The example transactions the addition of the buttons by using the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> methods.</source>
          <target state="translated">예제에서는 트랜잭션을 사용 하 여 단추를 추가 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="3089" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to execute pending layout requests; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">보류 중인 레이아웃 요청을 실행하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3090" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)">
          <source>Resumes usual layout logic, optionally forcing an immediate layout of pending layout requests.</source>
          <target state="translated">일반 레이아웃 논리를 다시 시작하여 필요에 따라 보류 중인 레이아웃 요청을 강제로 즉시 레이아웃합니다.</target>       </trans-unit>
        <trans-unit id="3091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method forces an immediate layout if there are any pending layout requests.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 보류 중인 레이아웃 요청 되어 있는 경우 메서드 강제로 즉시 레이아웃 합니다.</target>       </trans-unit>
        <trans-unit id="3092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)">
          <source>When the <ph id="ph1">`performLayout`</ph> parameter is set to <ph id="ph2">`true`</ph>, an immediate layout occurs if there are any pending layout requests.</source>
          <target state="translated">경우는 <ph id="ph1">`performLayout`</ph> 로 설정 된 <ph id="ph2">`true`</ph>, 즉시 레이아웃 보류 중인 레이아웃 요청 되어 있는 경우에 발생 합니다.</target>       </trans-unit>
        <trans-unit id="3093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> methods are used in tandem to suppress multiple <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> events while you adjust multiple attributes of the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 메서드는 동시에 표시 하지 않는 데 여러 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 컨트롤의 여러 속성을 조정 하는 동안 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)">
          <source>For example, you would typically call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> method, then set the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> properties of the control, and then call the <ph id="ph6">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method to enable the changes to take effect.</source>
          <target state="translated">예를 들어 일반적으로 호출 하는 것의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 메서드를 설정 합니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph>, 또는 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> 호출 고 컨트롤의 속성은 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 메서드 변경 내용을 적용 하려면 사용할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="3095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)">
          <source>There must be no pending calls to <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> for <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> to be successfully called.</source>
          <target state="translated">에 대 한 보류 중인 호출 해야 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 에 대 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 성공적으로 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)">
          <source>When adding several controls to a parent control, it is recommended that you call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> method before initializing the controls to be added.</source>
          <target state="translated">여러 컨트롤에 부모 컨트롤을 추가할 때 것이 좋습니다를 호출 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 추가할 컨트롤을 초기화 하기 전에 메서드.</target>       </trans-unit>
        <trans-unit id="3097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)">
          <source>After adding the controls to the parent control, call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method.</source>
          <target state="translated">부모 컨트롤에 컨트롤을 추가한 후 호출 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="3098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)">
          <source>This will increase the performance of applications with many controls.</source>
          <target state="translated">이렇게 하면 컨트롤이 많은 응용 프로그램의 성능을 늘어납니다.</target>       </trans-unit>
        <trans-unit id="3099" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Right">
          <source>Gets the distance, in pixels, between the right edge of the control and the left edge of its container's client area.</source>
          <target state="translated">컨트롤의 오른쪽 가장자리와 해당 컨테이너 클라이언트 영역의 왼쪽 가장자리 사이의 거리(픽셀)를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="3100" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Right">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> representing the distance, in pixels, between the right edge of the control and the left edge of its container's client area.</source>
          <target state="translated">컨트롤의 오른쪽 가장자리와 해당 컨테이너 클라이언트 영역의 왼쪽 가장자리 사이의 거리(픽셀)를 나타내는 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="3101" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Right">
          <source>The value of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Right%2A&gt;</ph> property is equal to the sum of the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph> property value and the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> property value.</source>
          <target state="translated">값은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Right%2A&gt;</ph> 속성은의 합계에는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph> 속성 값 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3102" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Right">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Right%2A&gt;</ph> property is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Right%2A&gt;</ph> 속성은 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="3103" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Right">
          <source>You can change this property value indirectly by changing the value of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> properties or calling the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SetBounds%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.SetBoundsCore%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.UpdateBounds%2A&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.SetClientSizeCore%2A&gt;</ph> methods.</source>
          <target state="translated">변경할 수 있습니다이 속성 값이 직접의 값을 변경 하 여는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> 속성 또는 호출의 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SetBounds%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.SetBoundsCore%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.UpdateBounds%2A&gt;</ph>, 또는 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.SetClientSizeCore%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="3104" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Right">
          <source>The following code example creates three <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls on a form and sets their size and location by using the various size-related and location-related properties.</source>
          <target state="translated">다음 코드 예제에서는 세 개를 만들며 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 폼에서 제어 하 고 다양 한 크기 및 위치 관련 속성을 사용 하 여 해당 크기와 위치를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="3105" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Right">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that has a width and height of at least 300 pixels.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 하에 너비와 높이가 이상 300 픽셀입니다.</target>       </trans-unit>
        <trans-unit id="3106" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>Gets or sets a value indicating whether control's elements are aligned to support locales using right-to-left fonts.</source>
          <target state="translated">오른쪽에서 왼쪽으로 쓰는 글꼴을 사용하는 로캘을 지원하도록 컨트롤 요소가 정렬되어 있는지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3107" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.RightToLeft" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.RightToLeft" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="3108" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.Windows.Forms.RightToLeft.Inherit" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.Forms.RightToLeft.Inherit" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3109" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property is an ambient property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> 속성이 앰비언트 속성입니다.</target>       </trans-unit>
        <trans-unit id="3110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>An ambient property is a control property that, if not set, is retrieved from the parent control.</source>
          <target state="translated">그렇지 않은 경우, 즉 앰비언트 속성은 컨트롤 속성 설정, 부모 컨트롤에서 검색 됩니다.</target>       </trans-unit>
        <trans-unit id="3111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> will have the same <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> as its parent <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> by default.</source>
          <target state="translated">예를 들어 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 같은 가질 수 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> 부모로 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="3112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>For more information about ambient properties, see the <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph> class or the <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> class overview.</source>
          <target state="translated">앰비언트 속성에 대 한 자세한 내용은 참조는 <ph id="ph1">&lt;xref:System.Windows.Forms.AmbientProperties&gt;</ph> 클래스 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스 개요입니다.</target>       </trans-unit>
        <trans-unit id="3113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property is used for international applications where the language is written from right to left, such as Hebrew or Arabic.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> 히브리어나 아랍어와 같이 왼쪽, 오른쪽에서 쓰는 속성 국가별 응용 프로그램에 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="3114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>When this property is set to <ph id="ph1">&lt;xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType&gt;</ph>, control elements that include text are displayed from right to left.</source>
          <target state="translated">이 속성이로 설정 된 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType&gt;</ph>, 오른쪽에서 왼쪽으로 텍스트를 포함 하는 컨트롤 요소가 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="3115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property is changed at run time, only raw text without formatting is preserved.</source>
          <target state="translated">하는 경우의 값은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> 속성이 런타임 시 변경 될, 서식 없이 원시 텍스트만 보존 됩니다.</target>       </trans-unit>
        <trans-unit id="3116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>The following are a few examples of how control elements are affected by the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property value of <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType&gt;</ph> :</source>
          <target state="translated">다음은 몇 가지 방법을 제어 요소 영향을 받는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> 속성 값이 <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType&gt;</ph> :</target>       </trans-unit>
        <trans-unit id="3117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>Vertical scroll bars are displayed on the left side rather than right side of scrollable controls (for example, <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph>, multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph>).</source>
          <target state="translated">스크롤 가능한 컨트롤의 오른쪽이 아닌 왼쪽에 세로 스크롤 막대가 표시 됩니다 (예를 들어 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Panel&gt;</ph>여러 줄, <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="3118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>Horizontal scroll bars start with the scroll box (thumb) right-aligned.</source>
          <target state="translated">가로 스크롤 막대 오른쪽 맞춤 스크롤 상자 (thumb)로 시작 합니다.</target>       </trans-unit>
        <trans-unit id="3119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>The check box element alignment, controlled by the <ph id="ph1">`CheckAlign`</ph> property, is reversed for <ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> controls.</source>
          <target state="translated">에 의해 제어 확인란 요소 맞춤은 <ph id="ph1">`CheckAlign`</ph> 에 대 한 속성을 반대로 되어 <ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.RadioButton&gt;</ph> 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="3120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>Items in list box, combo box, and up-down controls are right aligned.</source>
          <target state="translated">목록 상자, 콤보 상자 및 up-down 컨트롤의 항목은 오른쪽에 맞춰집니다.</target>       </trans-unit>
        <trans-unit id="3121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>Up and down buttons are left-aligned on <ph id="ph1">&lt;xref:System.Windows.Forms.NumericUpDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.DomainUpDown&gt;</ph> controls.</source>
          <target state="translated">에 왼쪽 맞춤 됩니다. 위쪽 및 아래쪽 단추 <ph id="ph1">&lt;xref:System.Windows.Forms.NumericUpDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.DomainUpDown&gt;</ph> 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="3122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>Menus (<ph id="ph1">&lt;xref:System.Windows.Forms.MainMenu&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.MenuItem&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph>) are displayed right-aligned.</source>
          <target state="translated">메뉴 (<ph id="ph1">&lt;xref:System.Windows.Forms.MainMenu&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.MenuItem&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph>) 오른쪽 맞춤으로 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="3123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>The alignment of toolbar buttons on a <ph id="ph1">&lt;xref:System.Windows.Forms.ToolBar&gt;</ph> control or the alignment of text on a <ph id="ph2">&lt;xref:System.Windows.Forms.ToolBarButton&gt;</ph> is not affected by the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property.</source>
          <target state="translated">도구 모음 단추 맞춤은 <ph id="ph1">&lt;xref:System.Windows.Forms.ToolBar&gt;</ph> 컨트롤 또는의 텍스트 맞춤은 <ph id="ph2">&lt;xref:System.Windows.Forms.ToolBarButton&gt;</ph> 영향을 받지 않습니다는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="3124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.AxHost&gt;</ph> supports right-to-left alignment; however, the effect on an ActiveX control depends on the extent to which the control author implemented support for right-to-left display.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.AxHost&gt;</ph> 오른쪽에서 왼쪽 맞춤; 지원 그러나 ActiveX 컨트롤에 대 한 영향을 컨트롤 작성자는 오른쪽에서 왼쪽으로 표시에 대 한 지원 구현 하는 범위 내에 따라 다릅니다.</target>       </trans-unit>
        <trans-unit id="3125" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>The assigned value is not one of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.RightToLeft" /&gt;</ph> values.</source>
          <target state="translated">할당된 값이 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.RightToLeft" /&gt;</ph> 값 중 하나가 아닌 경우</target>       </trans-unit>
        <trans-unit id="3126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.RightToLeft" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.RightToLeft" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.RightToLeft" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.RightToLeft" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="3127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>Otherwise, you must provide all the implementation.</source>
          <target state="translated">그렇지 않으면 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="3128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.RightToLeft">
          <source>You are not required to override both the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.RightToLeft" /&gt;</ph> property; you can override only one if needed.</source>
          <target state="translated">모두 재정의할 필요 하지는 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 의 접근자는 <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.RightToLeft" /&gt;</ph> 속성 필요한 경우 하나만 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3129" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.RightToLeftChanged">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.RightToLeft" /&gt;</ph> property value changes.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.RightToLeft" /&gt;</ph> 속성 값이 변경될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="3130" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.RightToLeftChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="3131" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.RightToLeftChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3132" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.RightToLeftChanged">
          <source>The following code example is an event handler that is executed when the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property value changes.</source>
          <target state="translated">다음 코드 예제는 되는 이벤트 처리기 될 때 실행 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성 값이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="3133" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.RightToLeftChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class has several methods with the name pattern <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept><ph id="ph2">`Changed`</ph> that are raised when the corresponding <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> value changes (<bpt id="p3">*</bpt>PropertyName<ept id="p3">*</ept> represents the name of the corresponding property).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스에 이름 패턴이 인 메서드가 <bpt id="p1">*</bpt>PropertyName<ept id="p1">*</ept> <ph id="ph2">`Changed`</ph> 있는 될 때 발생 하는 해당 <bpt id="p2">*</bpt>PropertyName<ept id="p2">*</ept> 값이 변경 (<bpt id="p3">*</bpt> PropertyName<ept id="p3">*</ept> 해당 속성의 이름을 나타내는).</target>       </trans-unit>
        <trans-unit id="3134" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.RightToLeftChanged">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="3135" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.RightToLeftChanged">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="3136" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.RightToLeftChanged">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that contains a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 를 포함 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3137" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Control">
          <source>Converts the current alignment to the appropriate alignment to support right-to-left text.</source>
          <target state="translated">오른쪽에서 왼쪽으로 쓰는 텍스트를 지원하려면 현재 맞춤을 적합한 맞춤으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="3138" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Drawing.ContentAlignment)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Drawing.ContentAlignment" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Drawing.ContentAlignment" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="3139" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Drawing.ContentAlignment)">
          <source>Converts the specified <ph id="ph1">&lt;see cref="T:System.Drawing.ContentAlignment" /&gt;</ph> to the appropriate <ph id="ph2">&lt;see cref="T:System.Drawing.ContentAlignment" /&gt;</ph> to support right-to-left text.</source>
          <target state="translated">오른쪽에서 왼쪽으로 쓰는 텍스트를 지원하려면 지정된 <ph id="ph1">&lt;see cref="T:System.Drawing.ContentAlignment" /&gt;</ph>를 적절한 <ph id="ph2">&lt;see cref="T:System.Drawing.ContentAlignment" /&gt;</ph>로 변환합니다.</target>       </trans-unit>
        <trans-unit id="3140" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Drawing.ContentAlignment)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Drawing.ContentAlignment" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Drawing.ContentAlignment" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="3141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Drawing.ContentAlignment)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> is set to <ph id="ph3">`No`</ph>, the return value is equal to the <ph id="ph4">`align`</ph> parameter passed in.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> 속성 <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> 로 설정 된 <ph id="ph3">`No`</ph>, 반환 값이 같지는 <ph id="ph4">`align`</ph> 매개 변수가 전달 합니다.</target>       </trans-unit>
        <trans-unit id="3142" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.HorizontalAlignment" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.HorizontalAlignment" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="3143" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)">
          <source>Converts the specified <ph id="ph1">&lt;see cref="T:System.Windows.Forms.HorizontalAlignment" /&gt;</ph> to the appropriate <ph id="ph2">&lt;see cref="T:System.Windows.Forms.HorizontalAlignment" /&gt;</ph> to support right-to-left text.</source>
          <target state="translated">오른쪽에서 왼쪽으로 쓰는 텍스트를 지원하려면 지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.HorizontalAlignment" /&gt;</ph>를 적절한 <ph id="ph2">&lt;see cref="T:System.Windows.Forms.HorizontalAlignment" /&gt;</ph>로 변환합니다.</target>       </trans-unit>
        <trans-unit id="3144" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.HorizontalAlignment" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.HorizontalAlignment" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="3145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> is set to <ph id="ph3">`No`</ph>, the return value is equal to the <ph id="ph4">`align`</ph> parameter passed in.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> 속성 <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> 로 설정 된 <ph id="ph3">`No`</ph>, 반환 값이 같지는 <ph id="ph4">`align`</ph> 매개 변수가 전달 합니다.</target>       </trans-unit>
        <trans-unit id="3146" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.LeftRightAlignment)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.LeftRightAlignment" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.LeftRightAlignment" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="3147" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.LeftRightAlignment)">
          <source>Converts the specified <ph id="ph1">&lt;see cref="T:System.Windows.Forms.LeftRightAlignment" /&gt;</ph> to the appropriate <ph id="ph2">&lt;see cref="T:System.Windows.Forms.LeftRightAlignment" /&gt;</ph> to support right-to-left text.</source>
          <target state="translated">오른쪽에서 왼쪽으로 쓰는 텍스트를 지원하려면 지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.LeftRightAlignment" /&gt;</ph>를 적절한 <ph id="ph2">&lt;see cref="T:System.Windows.Forms.LeftRightAlignment" /&gt;</ph>로 변환합니다.</target>       </trans-unit>
        <trans-unit id="3148" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.LeftRightAlignment)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.LeftRightAlignment" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.LeftRightAlignment" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="3149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.LeftRightAlignment)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> is set to <ph id="ph3">`No`</ph>, the return value is equal to the <ph id="ph4">`align`</ph> parameter passed in.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> 속성 <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> 로 설정 된 <ph id="ph3">`No`</ph>, 반환 값이 같지는 <ph id="ph4">`align`</ph> 매개 변수가 전달 합니다.</target>       </trans-unit>
        <trans-unit id="3150" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Drawing.ContentAlignment" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Drawing.ContentAlignment" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="3151" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)">
          <source>Converts the specified <ph id="ph1">&lt;see cref="T:System.Drawing.ContentAlignment" /&gt;</ph> to the appropriate <ph id="ph2">&lt;see cref="T:System.Drawing.ContentAlignment" /&gt;</ph> to support right-to-left text.</source>
          <target state="translated">오른쪽에서 왼쪽으로 쓰는 텍스트를 지원하려면 지정된 <ph id="ph1">&lt;see cref="T:System.Drawing.ContentAlignment" /&gt;</ph>를 적절한 <ph id="ph2">&lt;see cref="T:System.Drawing.ContentAlignment" /&gt;</ph>로 변환합니다.</target>       </trans-unit>
        <trans-unit id="3152" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Drawing.ContentAlignment" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Drawing.ContentAlignment" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="3153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> is set to <ph id="ph3">`No`</ph>, the return value is equal to the <ph id="ph4">`align`</ph> parameter passed in.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> 속성 <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> 로 설정 된 <ph id="ph3">`No`</ph>, 반환 값이 같지는 <ph id="ph4">`align`</ph> 매개 변수가 전달 합니다.</target>       </trans-unit>
        <trans-unit id="3154" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.HorizontalAlignment" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.HorizontalAlignment" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="3155" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)">
          <source>Converts the specified <ph id="ph1">&lt;see cref="T:System.Windows.Forms.HorizontalAlignment" /&gt;</ph> to the appropriate <ph id="ph2">&lt;see cref="T:System.Windows.Forms.HorizontalAlignment" /&gt;</ph> to support right-to-left text.</source>
          <target state="translated">오른쪽에서 왼쪽으로 쓰는 텍스트를 지원하려면 지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.HorizontalAlignment" /&gt;</ph>를 적절한 <ph id="ph2">&lt;see cref="T:System.Windows.Forms.HorizontalAlignment" /&gt;</ph>로 변환합니다.</target>       </trans-unit>
        <trans-unit id="3156" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.HorizontalAlignment" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.HorizontalAlignment" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="3157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> is set to <ph id="ph3">`No`</ph>, the return value is equal to the <ph id="ph4">`align`</ph> parameter passed in.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> 속성 <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> 로 설정 된 <ph id="ph3">`No`</ph>, 반환 값이 같지는 <ph id="ph4">`align`</ph> 매개 변수가 전달 합니다.</target>       </trans-unit>
        <trans-unit id="3158" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.LeftRightAlignment" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.LeftRightAlignment" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="3159" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)">
          <source>Converts the specified <ph id="ph1">&lt;see cref="T:System.Windows.Forms.LeftRightAlignment" /&gt;</ph> to the appropriate <ph id="ph2">&lt;see cref="T:System.Windows.Forms.LeftRightAlignment" /&gt;</ph> to support right-to-left text.</source>
          <target state="translated">오른쪽에서 왼쪽으로 쓰는 텍스트를 지원하려면 지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.LeftRightAlignment" /&gt;</ph>를 적절한 <ph id="ph2">&lt;see cref="T:System.Windows.Forms.LeftRightAlignment" /&gt;</ph>로 변환합니다.</target>       </trans-unit>
        <trans-unit id="3160" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.LeftRightAlignment" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.LeftRightAlignment" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="3161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> is set to <ph id="ph3">`No`</ph>, the return value is equal to the <ph id="ph4">`align`</ph> parameter passed in.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.RightToLeft%2A&gt;</ph> 속성 <ph id="ph2">&lt;xref:System.Windows.Forms.RightToLeft&gt;</ph> 로 설정 된 <ph id="ph3">`No`</ph>, 반환 값이 같지는 <ph id="ph4">`align`</ph> 매개 변수가 전달 합니다.</target>       </trans-unit>
        <trans-unit id="3162" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Control">
          <source>Scales the control and any child controls.</source>
          <target state="translated">컨트롤과 자식 컨트롤의 배율을 조정합니다.</target>       </trans-unit>
        <trans-unit id="3163" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Scale(System.Drawing.SizeF)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.SizeF" /&gt;</ph> containing the horizontal and vertical scaling factors.</source>
          <target state="translated">가로 및 세로 배율 인수가 포함된 <ph id="ph1">&lt;see cref="T:System.Drawing.SizeF" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3164" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Scale(System.Drawing.SizeF)">
          <source>Scales the control and all child controls by the specified scaling factor.</source>
          <target state="translated">컨트롤과 모든 자식 컨트롤의 배율을 지정한 배율 인수로 조정합니다.</target>       </trans-unit>
        <trans-unit id="3165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Scale(System.Drawing.SizeF)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Scale%2A&gt;</ph> method scales the control by the specified scaling <ph id="ph2">`factor`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Scale%2A&gt;</ph> 메서드 지정 된 크기 조정 하 여 컨트롤을 확장 <ph id="ph2">`factor`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Scale(System.Drawing.SizeF)">
          <source>It also recursively scales all child controls if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleChildren%2A&gt;</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">이 경우 재귀적으로 모든 자식 컨트롤을 조정 하는 또한는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleChildren%2A&gt;</ph> 속성은 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Scale(System.Drawing.SizeF)">
          <source>Internally, this method calls <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleControl%2A&gt;</ph> to scale each control.</source>
          <target state="translated">이 메서드를 호출 내부적으로 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleControl%2A&gt;</ph> 각 컨트롤의 배율을 조정 합니다.</target>       </trans-unit>
        <trans-unit id="3168" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Scale(System.Single)">
          <source>The ratio to use for scaling.</source>
          <target state="translated">배율 조정에 사용할 비율입니다.</target>       </trans-unit>
        <trans-unit id="3169" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Scale(System.Single)">
          <source>Scales the control and any child controls.</source>
          <target state="translated">컨트롤과 자식 컨트롤의 배율을 조정합니다.</target>       </trans-unit>
        <trans-unit id="3170" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Scale(System.Single,System.Single)">
          <source>The horizontal scaling factor.</source>
          <target state="translated">가로 배율 인수입니다.</target>       </trans-unit>
        <trans-unit id="3171" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Scale(System.Single,System.Single)">
          <source>The vertical scaling factor.</source>
          <target state="translated">세로 배율 인수입니다.</target>       </trans-unit>
        <trans-unit id="3172" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Scale(System.Single,System.Single)">
          <source>Scales the entire control and any child controls.</source>
          <target state="translated">전체 컨트롤과 자식 컨트롤의 배율을 조정합니다.</target>       </trans-unit>
        <trans-unit id="3173" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ScaleBitmapLogicalToDevice(System.Drawing.Bitmap@)">
          <source>The bitmap to scale.</source>
          <target state="translated">크기를 조정할 비트맵입니다.</target>       </trans-unit>
        <trans-unit id="3174" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ScaleBitmapLogicalToDevice(System.Drawing.Bitmap@)">
          <source>Scales a logical bitmap value to it's equivalent device unit value when a DPI change occurs.</source>
          <target state="translated">DPI가 변경될 때 논리적 비트맵 값을 동등한 장치 단위 값으로 크기 조정합니다.</target>       </trans-unit>
        <trans-unit id="3175" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.ScaleChildren">
          <source>Gets a value that determines the scaling of child controls.</source>
          <target state="translated">자식 컨트롤의 배율을 결정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="3176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ScaleChildren">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if child controls will be scaled when the <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.Scale(System.Single)" /&gt;</ph> method on this control is called; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 컨트롤에서 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 메서드가 호출될 때 자식 컨트롤의 배율이 조정되면 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.Scale(System.Single)" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ScaleChildren">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ScaleChildren">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleChildren%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Scale%2A&gt;</ph> method will recursively call the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.ScaleControl%2A&gt;</ph> method of each of its child controls.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleChildren%2A&gt;</ph> 속성은 <ph id="ph2">`true`</ph>, 하면 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Scale%2A&gt;</ph> 메서드 재귀적으로 호출 합니다는 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.ScaleControl%2A&gt;</ph> 각 컨트롤은 자식 컨트롤의 메서드.</target>       </trans-unit>
        <trans-unit id="3179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ScaleChildren">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleChildren%2A&gt;</ph> always returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">기본 구현은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleChildren%2A&gt;</ph> 항상 반환 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ScaleChildren">
          <source>Derived classes can override <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleChildren%2A&gt;</ph> to return <ph id="ph2">`false`</ph> to indicate that scaling should not be performed on their children.</source>
          <target state="translated">파생된 클래스에서 재정의할 수 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ScaleChildren%2A&gt;</ph> 반환할 <ph id="ph2">`false`</ph> 크기 조정을 수행 해야 함을 하지 자식 요소에 나타냅니다.</target>       </trans-unit>
        <trans-unit id="3181" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
          <source>The factor by which the height and width of the control will be scaled.</source>
          <target state="translated">컨트롤의 높이와 너비 크기를 조정하는 인수입니다.</target>       </trans-unit>
        <trans-unit id="3182" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.BoundsSpecified" /&gt;</ph> value that specifies the bounds of the control to use when defining its size and position.</source>
          <target state="translated">컨트롤의 크기와 위치를 정의할 때 사용할 컨트롤 범위를 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.BoundsSpecified" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="3183" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
          <source>Scales a control's location, size, padding and margin.</source>
          <target state="translated">컨트롤의 위치, 크기, 안쪽 여백 및 여백을 조정합니다.</target>       </trans-unit>
        <trans-unit id="3184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
          <source>If the control is top level, this will not scale the control's location.</source>
          <target state="translated">최상위 컨트롤을 사용 하는 경우 컨트롤의 위치를 조정 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="3185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
          <source>This does not scale children or the size of automatically sized controls.</source>
          <target state="translated">자식 또는 자동으로 조정된 된 컨트롤의 크기에는 확장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="3186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
          <source>You can omit scaling in any direction by changing the value of the <ph id="ph1">`specified`</ph> parameter.</source>
          <target state="translated">값을 변경 하 여 임의의 방향으로 확장을 생략할 수 있습니다는 <ph id="ph1">`specified`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="3187" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ScaleCore(System.Single,System.Single)">
          <source>The horizontal scaling factor.</source>
          <target state="translated">가로 배율 인수입니다.</target>       </trans-unit>
        <trans-unit id="3188" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ScaleCore(System.Single,System.Single)">
          <source>The vertical scaling factor.</source>
          <target state="translated">세로 배율 인수입니다.</target>       </trans-unit>
        <trans-unit id="3189" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.ScaleCore(System.Single,System.Single)">
          <source>This method is not relevant for this class.</source>
          <target state="translated">이 메서드는 이 클래스와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="3190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.ScaleCore(System.Single,System.Single)">
          <source>This method is not relevant for this class.</source>
          <target state="translated">이 메서드는 이 클래스와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="3191" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Control">
          <source>Activates a control.</source>
          <target state="translated">컨트롤을 활성화합니다.</target>       </trans-unit>
        <trans-unit id="3192" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Select">
          <source>Activates the control.</source>
          <target state="translated">컨트롤을 활성화합니다.</target>       </trans-unit>
        <trans-unit id="3193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Select">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> method activates the control if the control's <ph id="ph2">`Selectable`</ph> style bit is set to <ph id="ph3">`true`</ph> in <ph id="ph4">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph>, it is contained in another control, and all its parent controls are both visible and enabled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> 메서드 컨트롤을 활성화 하는 경우 컨트롤의 <ph id="ph2">`Selectable`</ph> 스타일 비트가 <ph id="ph3">`true`</ph> 에 <ph id="ph4">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph>를 다른 컨트롤에 포함 된와 모든 부모 컨트롤이 표시 되 고 사용할 합니다.</target>       </trans-unit>
        <trans-unit id="3194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Select">
          <source>The Windows Forms controls in the following list are not selectable.</source>
          <target state="translated">다음 목록에 Windows Forms 컨트롤은 선택할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Select">
          <source>Controls derived from controls in the list will also not be selectable.</source>
          <target state="translated">목록에서 컨트롤에서 파생 된 컨트롤은 또한 선택할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="3196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Select">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.LinkLabel&gt;</ph> (when there is no link present in the control)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.LinkLabel&gt;</ph> (이 경우 컨트롤에 링크가)</target>       </trans-unit>
        <trans-unit id="3197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Select">
          <source>The following code example selects the specified <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, if it is selectable.</source>
          <target state="translated">다음 코드 예제에서는 지정 된 선택 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>선택 가능한 경우, 합니다.</target>       </trans-unit>
        <trans-unit id="3198" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to specify the direction of the control to select; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">선택할 컨트롤의 방향을 지정하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3199" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to move forward in the tab order; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to move backward in the tab order.</source>
          <target state="translated">탭 순서에서 앞으로 이동하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 뒤로 이동하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3200" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)">
          <source>Activates a child control.</source>
          <target state="translated">자식 컨트롤을 활성화합니다.</target>       </trans-unit>
        <trans-unit id="3201" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)">
          <source>Optionally specifies the direction in the tab order to select the control from.</source>
          <target state="translated">또한 필요에 따라 컨트롤을 선택할 탭 순서의 방향을 지정합니다.</target>       </trans-unit>
        <trans-unit id="3202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">`directed`</ph> and <ph id="ph2">`forward`</ph> parameters are used by container-style controls.</source>
          <target state="translated"><ph id="ph1">`directed`</ph> 및 <ph id="ph2">`forward`</ph> 컨테이너 스타일 컨트롤에서 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="3203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)">
          <source>When the <ph id="ph1">`directed`</ph> parameter is set to <ph id="ph2">`true`</ph>, the <ph id="ph3">`forward`</ph> parameter is evaluated to determine which control to select.</source>
          <target state="translated">경우는 <ph id="ph1">`directed`</ph> 로 설정 된 <ph id="ph2">`true`</ph>, <ph id="ph3">`forward`</ph> 매개 변수는 선택할 컨트롤을 결정 하도록 평가 됩니다.</target>       </trans-unit>
        <trans-unit id="3204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)">
          <source>When <ph id="ph1">`forward`</ph> is set to <ph id="ph2">`true`</ph>, the next control in the tab order is selected; when <ph id="ph3">`false`</ph>, the previous control in the tab order is selected.</source>
          <target state="translated">때 <ph id="ph1">`forward`</ph> 로 설정 된 <ph id="ph2">`true`</ph>, 탭 순서의 다음 컨트롤로 확인란이; 때 <ph id="ph3">`false`</ph>, 탭 순서의 이전 컨트롤을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="3205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> method activates the control if the control's <ph id="ph2">`Selectable`</ph> style bit is set to <ph id="ph3">`true`</ph> in <ph id="ph4">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph>, it is contained in another control, and all its parent controls are both visible and enabled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> 메서드 컨트롤을 활성화 하는 경우 컨트롤의 <ph id="ph2">`Selectable`</ph> 스타일 비트가 <ph id="ph3">`true`</ph> 에 <ph id="ph4">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph>를 다른 컨트롤에 포함 된와 모든 부모 컨트롤이 표시 되 고 사용할 합니다.</target>       </trans-unit>
        <trans-unit id="3206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)">
          <source>The Windows Forms controls in the following list are not selectable.</source>
          <target state="translated">다음 목록에 Windows Forms 컨트롤은 선택할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)">
          <source>Controls derived from controls in the list will also not be selectable.</source>
          <target state="translated">목록에서 컨트롤에서 파생 된 컨트롤은 또한 선택할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="3208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.LinkLabel&gt;</ph> (when there is no link present in the control)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.LinkLabel&gt;</ph> (이 경우 컨트롤에 링크가)</target>       </trans-unit>
        <trans-unit id="3209" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> at which to start the search.</source>
          <target state="translated">검색을 시작할 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3210" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to move forward in the tab order; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to move backward in the tab order.</source>
          <target state="translated">탭 순서에서 앞으로 이동하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 뒤로 이동하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3211" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to ignore the controls with the <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.TabStop" /&gt;</ph> property set to <ph id="ph3">&lt;see langword="false" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 속성이 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.TabStop" /&gt;</ph>로 설정된 컨트롤을 무시하려면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3212" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to include nested (children of child controls) child controls; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">중첩된(자식 컨트롤의 자식) 자식 컨트롤을 포함시키려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3213" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to continue searching from the first control in the tab order after the last control has been reached; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">탭 순서의 마지막 컨트롤에 도달한 후 첫째 컨트롤부터 검색을 계속하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3214" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source>Activates the next control.</source>
          <target state="translated">다음 컨트롤을 활성화합니다.</target>       </trans-unit>
        <trans-unit id="3215" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a control was activated; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 활성화되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> method activates the next control in the tab order if the control's <ph id="ph2">`Selectable`</ph> style bit is set to <ph id="ph3">`true`</ph> in <ph id="ph4">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph>, it is contained in another control, and all its parent controls are both visible and enabled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> 메서드 탭 순서의 다음 컨트롤로 활성화 하는 경우 컨트롤의 <ph id="ph2">`Selectable`</ph> 스타일 비트가 <ph id="ph3">`true`</ph> 에 <ph id="ph4">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph>, 다른 컨트롤에 포함 된 및 모든 부모 컨트롤이 표시 되 고 사용 하도록 설정 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="3217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source>The Windows Forms controls in the following list are not selectable.</source>
          <target state="translated">다음 목록에 Windows Forms 컨트롤은 선택할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source>Controls derived from controls in the list will also not be selectable.</source>
          <target state="translated">목록에서 컨트롤에서 파생 된 컨트롤은 또한 선택할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="3219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.LinkLabel&gt;</ph> (when there is no link present in the control)</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.LinkLabel&gt;</ph> (이 경우 컨트롤에 링크가)</target>       </trans-unit>
        <trans-unit id="3220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> methods, or by setting the <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType&gt;</ph> property to the current form, focus events occur in the following order:</source>
          <target state="translated">호출 하 여 키보드 (TAB, SHIFT + TAB 등)를 사용 하 여 포커스를 변경 하면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> 메서드를 설정 하거나는 <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType&gt;</ph> 속성을 현재 폼으로 포커스 이벤트가 다음 순서 대로 발생:</target>       </trans-unit>
        <trans-unit id="3221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> events are suppressed.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> 속성이 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> 이벤트는 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="3222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source>The following code exampleshows the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> method being used in a form that has some controls.</source>
          <target state="translated">다음 코드 exampleshows는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> 메서드 일부 제어 기능을 포함 하는 폼에서 사용 되 고 있습니다.</target>       </trans-unit>
        <trans-unit id="3223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source>Each time that you click the form, the next control is activated.</source>
          <target state="translated">폼을 클릭할 때마다 다음 컨트롤이 활성화 됩니다.</target>       </trans-unit>
        <trans-unit id="3224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A&gt;</ph> property gets the currently active control in the container control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A&gt;</ph> 속성 컨테이너 컨트롤에서 현재 활성 컨트롤을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="3225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source>The following code example shows the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> method being used in a form that has a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> and some other controls.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> 있는 폼에 사용 되는 메서드는 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 및 다른 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="3226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source>When you click the <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph>, the next control after the <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> is activated.</source>
          <target state="translated">클릭는 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph>, 후 다음 컨트롤로 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 활성화 됩니다.</target>       </trans-unit>
        <trans-unit id="3227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source>Notice that you have to get the parent of the <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> control.</source>
          <target state="translated">부모를 가져올 것을 확인할는 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="3228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
          <source>Since <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> is not a container, calling <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> directly on the <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> would not change the activation.</source>
          <target state="translated">이후 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 컨테이너가, 호출 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> 에서 직접는 <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> 활성화 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="3229" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SendToBack">
          <source>Sends the control to the back of the z-order.</source>
          <target state="translated">컨트롤을 Z 순서의 맨 뒤로 보냅니다.</target>       </trans-unit>
        <trans-unit id="3230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SendToBack">
          <source>The control is moved to the back of the z-order.</source>
          <target state="translated">컨트롤을 z 순서의 맨 뒤로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="3231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SendToBack">
          <source>If the control is a child of another control, the child control is moved to the back of the z-order.</source>
          <target state="translated">다른 컨트롤의 자식 컨트롤을 사용 하는 경우 자식 컨트롤을 z 순서의 맨 뒤로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="3232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SendToBack">
          <source>If the control is a top-level control, this method will not work correctly unless the control is active.</source>
          <target state="translated">컨트롤이 최상위 컨트롤이 면 컨트롤이 활성화 된 경우가 아니면이 메서드가 제대로 작동 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="3233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SendToBack">
          <source>A top-level control is a control, such as a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>, that is not a child of another control.</source>
          <target state="translated">최상위 컨트롤은 컨트롤을와 같은 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>, 즉 자식도 아닌 다른 컨트롤의 합니다.</target>       </trans-unit>
        <trans-unit id="3234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SendToBack">
          <source>An active control is a visible control that has input focus.</source>
          <target state="translated">활성 컨트롤은 표시 컨트롤에 입력 포커스가입니다.</target>       </trans-unit>
        <trans-unit id="3235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SendToBack">
          <source>To use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SendToBack%2A&gt;</ph> method with an inactive, top-level control, first call the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BringToFront%2A&gt;</ph> method on the control.</source>
          <target state="translated">사용 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SendToBack%2A&gt;</ph> 메서드 비활성 최상위 컨트롤 호출 먼저는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BringToFront%2A&gt;</ph> 컨트롤 대 메서드.</target>       </trans-unit>
        <trans-unit id="3236" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetAutoSizeMode(System.Windows.Forms.AutoSizeMode)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.AutoSizeMode" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.AutoSizeMode" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="3237" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetAutoSizeMode(System.Windows.Forms.AutoSizeMode)">
          <source>Sets a value indicating how a control will behave when its <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.AutoSize" /&gt;</ph> property is enabled.</source>
          <target state="translated">해당 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.AutoSize" /&gt;</ph> 속성을 사용할 수 있을 때 컨트롤이 동작하는 방법을 나타내는 값을 설정합니다.</target>       </trans-unit>
        <trans-unit id="3238" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Control">
          <source>Sets the bounds of the control.</source>
          <target state="translated">컨트롤의 범위를 설정합니다.</target>       </trans-unit>
        <trans-unit id="3239" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The new <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Left" /&gt;</ph> property value of the control.</source>
          <target state="translated">컨트롤의 새 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Left" /&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3240" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The new <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Top" /&gt;</ph> property value of the control.</source>
          <target state="translated">컨트롤의 새 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Top" /&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3241" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The new <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Width" /&gt;</ph> property value of the control.</source>
          <target state="translated">컨트롤의 새 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Width" /&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3242" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The new <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Height" /&gt;</ph> property value of the control.</source>
          <target state="translated">컨트롤의 새 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Height" /&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3243" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Sets the bounds of the control to the specified location and size.</source>
          <target state="translated">컨트롤의 범위를 지정된 위치와 크기로 설정합니다.</target>       </trans-unit>
        <trans-unit id="3244" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>The new <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Left" /&gt;</ph> property value of the control.</source>
          <target state="translated">컨트롤의 새 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Left" /&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3245" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>The new <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Top" /&gt;</ph> property value of the control.</source>
          <target state="translated">컨트롤의 새 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Top" /&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3246" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>The new <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Width" /&gt;</ph> property value of the control.</source>
          <target state="translated">컨트롤의 새 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Width" /&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3247" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>The new <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Height" /&gt;</ph> property value of the control.</source>
          <target state="translated">컨트롤의 새 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Height" /&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3248" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.BoundsSpecified" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.BoundsSpecified" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="3249" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>For any parameter not specified, the current value will be used.</source>
          <target state="translated">매개 변수를 지정하지 않으면 현재 값이 사용됩니다.</target>       </trans-unit>
        <trans-unit id="3250" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>Sets the specified bounds of the control to the specified location and size.</source>
          <target state="translated">컨트롤의 지정된 범위를 특정 위치와 크기로 설정합니다.</target>       </trans-unit>
        <trans-unit id="3251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>The following code example centers a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> on the screen in the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event.</source>
          <target state="translated">다음 코드 예제에서는 센터는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 화면에서 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>This will keep the form centered as the user resizes it.</source>
          <target state="translated">이렇게 하면 사용자가 크기 조정으로 가운데 맞춤 폼을 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="3253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>This example requires that you have created a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> control.</source>
          <target state="translated">이 예제에서는 만든는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 제어 합니다.</target>       </trans-unit>
        <trans-unit id="3254" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>The new <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Left" /&gt;</ph> property value of the control.</source>
          <target state="translated">컨트롤의 새 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Left" /&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3255" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>The new <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Top" /&gt;</ph> property value of the control.</source>
          <target state="translated">컨트롤의 새 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Top" /&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3256" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>The new <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Width" /&gt;</ph> property value of the control.</source>
          <target state="translated">컨트롤의 새 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Width" /&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3257" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>The new <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Height" /&gt;</ph> property value of the control.</source>
          <target state="translated">컨트롤의 새 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Height" /&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3258" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.BoundsSpecified" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.BoundsSpecified" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="3259" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>Performs the work of setting the specified bounds of this control.</source>
          <target state="translated">이 컨트롤의 지정된 범위를 설정합니다.</target>       </trans-unit>
        <trans-unit id="3260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>Typically, the parameters that correspond to the bounds not included in the <ph id="ph1">`specified`</ph> parameter are passed in with their current values.</source>
          <target state="translated">에 포함 되지 범위에 해당 하는 매개 변수 일반적으로 <ph id="ph1">`specified`</ph> 매개 변수는 현재 값과 함께 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="3261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>For example, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph>, or the <ph id="ph3">&lt;xref:System.Drawing.Point.X%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Drawing.Point.Y%2A&gt;</ph> properties of the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property can be passed in with a reference to the current instance of the control.</source>
          <target state="translated">예를 들어는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph>, 또는 <ph id="ph3">&lt;xref:System.Drawing.Point.X%2A&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Drawing.Point.Y%2A&gt;</ph> 의 속성은 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> 속성 컨트롤의 현재 인스턴스에 대 한 참조를 사용 하 여 전달 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>However all values passed in are honored and applied to the control.</source>
          <target state="translated">그러나에 전달 된 모든 값 유지 하 고 컨트롤에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="3263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>The <ph id="ph1">`boundsSpecified`</ph> parameter represents the elements of the controls <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Bounds%2A&gt;</ph> changed by your application.</source>
          <target state="translated"><ph id="ph1">`boundsSpecified`</ph> 매개 변수는 컨트롤의 요소를 나타냅니다 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Bounds%2A&gt;</ph> 응용 프로그램에 의해 변경 합니다.</target>       </trans-unit>
        <trans-unit id="3264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>For example, if you change the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> of the control, the <ph id="ph2">`boundsSpecified`</ph> parameter value is the <ph id="ph3">`Size`</ph> value of <ph id="ph4">&lt;xref:System.Windows.Forms.BoundsSpecified&gt;</ph>.</source>
          <target state="translated">예를 들어, 변경 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> 컨트롤의는 <ph id="ph2">`boundsSpecified`</ph> 매개 변수 값이는 <ph id="ph3">`Size`</ph> 값 <ph id="ph4">&lt;xref:System.Windows.Forms.BoundsSpecified&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>However, if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> is adjusted in response to the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> property being set, the <ph id="ph3">`boundsSpecified`</ph> parameter value is the <ph id="ph4">`None`</ph> value of <ph id="ph5">&lt;xref:System.Windows.Forms.BoundsSpecified&gt;</ph>.</source>
          <target state="translated">그러나 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> 대 한 응답으로 조정 되는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> 속성이 설정 되 고는 <ph id="ph3">`boundsSpecified`</ph> 매개 변수 값이는 <ph id="ph4">`None`</ph> 값 <ph id="ph5">&lt;xref:System.Windows.Forms.BoundsSpecified&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>On Windows Server 2003 systems, the size of a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> is restricted by the maximum pixel width and height of the monitor.</source>
          <target state="translated">Windows Server 2003 시스템의 크기는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 최대 픽셀 너비와 높이 모니터에 의해 제한 됩니다.</target>       </trans-unit>
        <trans-unit id="3267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>The following code example overrides the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetBoundsCore%2A&gt;</ph> method to ensure that the control remains a fixed size.</source>
          <target state="translated">다음 코드 예제에서는 재정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetBoundsCore%2A&gt;</ph> 메서드를 유지 하는 컨트롤 크기가 고정 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="3268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>This example requires that you have a class that is either directly or indirectly derived from the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 직접 또는 간접적으로 파생 된 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="3269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /&gt;</ph> method to force the bounds of the control to change.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /&gt;</ph> 파생된 클래스에서 호출 해야 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /&gt;</ph> 메서드를 변경 하려면 컨트롤의 범위입니다.</target>       </trans-unit>
        <trans-unit id="3270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
          <source>Derived classes can add size restrictions to the <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /&gt;</ph> method.</source>
          <target state="translated">파생된 클래스에는 크기 제한을 추가할 수는 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="3271" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)">
          <source>The client area width, in pixels.</source>
          <target state="translated">클라이언트 영역의 너비(픽셀)입니다.</target>       </trans-unit>
        <trans-unit id="3272" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)">
          <source>The client area height, in pixels.</source>
          <target state="translated">클라이언트 영역의 높이(픽셀)입니다.</target>       </trans-unit>
        <trans-unit id="3273" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)">
          <source>Sets the size of the client area of the control.</source>
          <target state="translated">컨트롤 클라이언트 영역의 크기를 설정합니다.</target>       </trans-unit>
        <trans-unit id="3274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)">
          <source>The client area starts at the (0, 0) location and extends to the (<ph id="ph1">`x`</ph>, <ph id="ph2">`y`</ph>) location.</source>
          <target state="translated">클라이언트 영역에서 시작 하는 (0, 0) 위치를 확장 하 고는 (<ph id="ph1">`x`</ph>, <ph id="ph2">`y`</ph>) 위치입니다.</target>       </trans-unit>
        <trans-unit id="3275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)">
          <source>Typically, you should not set the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ClientSize%2A&gt;</ph> of the control.</source>
          <target state="translated">일반적으로 설정 하면 안 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ClientSize%2A&gt;</ph> 컨트롤의 합니다.</target>       </trans-unit>
        <trans-unit id="3276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)">
          <source>The following code example overrides the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetClientSizeCore%2A&gt;</ph> method to ensure that the control remains square.</source>
          <target state="translated">다음 코드 예제에서는 재정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetClientSizeCore%2A&gt;</ph> 메서드 컨트롤 정사각형 유지 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="3277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)">
          <source>This example requires that you have a class that is either directly or indirectly derived from the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 있어야에서 직접 또는 간접적으로 파생 된 클래스는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="3278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /&gt;</ph> method so that the <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.ClientSize" /&gt;</ph> property is adjusted.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /&gt;</ph> 파생된 클래스에서 호출 해야 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /&gt;</ph> 메서드 있도록는 <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.ClientSize" /&gt;</ph> 속성 조정 됩니다.</target>       </trans-unit>
        <trans-unit id="3279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)">
          <source>For more information about drawing on controls, see <bpt id="p1">[</bpt>Rendering a Windows Forms Control<ept id="p1">](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)</ept>.</source>
          <target state="translated">컨트롤에서 그리기에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>Windows Forms 컨트롤 렌더링<ept id="p1">](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3280" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ControlStyles" /&gt;</ph> bit to set.</source>
          <target state="translated">설정할 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ControlStyles" /&gt;</ph> 비트입니다.</target>       </trans-unit>
        <trans-unit id="3281" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to apply the specified style to the control; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 스타일을 컨트롤에 적용하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3282" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)">
          <source>Sets a specified <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ControlStyles" /&gt;</ph> flag to either <ph id="ph2">&lt;see langword="true" /&gt;</ph> or <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.ControlStyles" /&gt;</ph> 플래그를 <ph id="ph2">&lt;see langword="true" /&gt;</ph> 또는 <ph id="ph3">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="3283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)">
          <source>Control style bit flags are used to categorize supported behavior.</source>
          <target state="translated">컨트롤 스타일 비트 플래그는 지원 되는 동작을 분류 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="3284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)">
          <source>A control can enable a style by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph> method and passing in the appropriate <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> bit (or bits) and the Boolean value to set the bit(s) to.</source>
          <target state="translated">컨트롤을 호출 하 여 스타일을 사용 하도록 설정할 수는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph> 메서드와 적절 한 전달 <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> 비트 (또는 비트) 및 비트가 설정 되도록는 부울 값입니다.</target>       </trans-unit>
        <trans-unit id="3285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)">
          <source>To determine the value assigned to a specified <ph id="ph1">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> bit, use the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GetStyle%2A&gt;</ph> method and pass in the <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> member to evaluate.</source>
          <target state="translated">에 지정 된 할당 된 값을 확인 하려면 <ph id="ph1">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> 를 사용 하 여는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GetStyle%2A&gt;</ph> 메서드와 전달은 <ph id="ph3">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> 평가 하는 멤버입니다.</target>       </trans-unit>
        <trans-unit id="3286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)">
          <source>Setting the control style bits can substantially change the behavior of the control.</source>
          <target state="translated">컨트롤 스타일 비트를 설정 하 고 컨트롤의 동작을 충분히 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)">
          <source>Review the <ph id="ph1">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> enumeration documentation to understand the effects of changing the control style bits before calling the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph> method.</source>
          <target state="translated">검토는 <ph id="ph1">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> 열거형 설명서 컨트롤 스타일 비트 호출 하기 전에 변경에 따른 영향을 이해 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="3288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)">
          <source>The following code example enables double-buffering on a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> and updates the styles to reflect the changes.</source>
          <target state="translated">다음 코드 예제에 이중 버퍼링을 사용 하면 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 하 고 변경 내용을 반영 하기 위해 스타일을 업데이트 합니다.</target>       </trans-unit>
        <trans-unit id="3289" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to set the control as the top-level control; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤을 최상위 컨트롤로 설정하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3290" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)">
          <source>Sets the control as the top-level control.</source>
          <target state="translated">컨트롤을 최상위 컨트롤로 설정합니다.</target>       </trans-unit>
        <trans-unit id="3291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)">
          <source>If you call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetTopLevel%2A&gt;</ph> method of a <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph> and pass in a value of <ph id="ph3">`false`</ph>, the form will not be visible until you call <ph id="ph4">&lt;xref:System.Windows.Forms.Control.SetTopLevel%2A&gt;</ph> again, passing in a value of <ph id="ph5">`true`</ph>.</source>
          <target state="translated">호출 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetTopLevel%2A&gt;</ph> 의 메서드는 <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph> 의 값을 전달 하 고 <ph id="ph3">`false`</ph>를 호출할 때까지 폼 표시 되지 것입니다 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.SetTopLevel%2A&gt;</ph> 다시의 값을 전달 <ph id="ph5">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3292" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter is set to <ph id="ph2">&lt;see langword="true" /&gt;</ph> and the control is an ActiveX control.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="true" /&gt;</ph>로 설정되고 해당 컨트롤이 ActiveX 컨트롤인 경우</target>       </trans-unit>
        <trans-unit id="3293" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.GetTopLevel" /&gt;</ph> return value is not equal to the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter and the <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.Parent" /&gt;</ph> property is not <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.GetTopLevel" /&gt;</ph> 반환 값이 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 매개 변수와 같지 않고 <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.Parent" /&gt;</ph> 속성이 <ph id="ph4">&lt;see langword="null" /&gt;</ph>이 아닌 경우</target>       </trans-unit>
        <trans-unit id="3294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)">
          <source>to set the control as a top-level control if it is of any type other than <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Form" /&gt;</ph>.</source>
          <target state="translated">이외의 다른 모든 종류의이 컨트롤을 최상위 컨트롤로 설정 하려면 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Form" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)">
          <source>This permission is only demanded if the <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="true" /&gt;</ph> and the control is not an ActiveX control.</source>
          <target state="translated">이 사용 권한은 경우에 필요는 <ph id="ph1">&lt;paramref name="value" /&gt;</ph> 매개 변수는 <ph id="ph2">&lt;see langword="true" /&gt;</ph> 컨트롤은 ActiveX 컨트롤이 아닙니다.</target>       </trans-unit>
        <trans-unit id="3296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> value of <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>.</source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see langword="AllWindows" /&gt;</ph> 값 <ph id="ph2">&lt;see cref="T:System.Security.Permissions.UIPermissionWindow" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3297" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to make the control visible; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤을 표시하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3298" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)">
          <source>Sets the control to the specified visible state.</source>
          <target state="translated">컨트롤을 지정된 표시 상태로 설정합니다.</target>       </trans-unit>
        <trans-unit id="3299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)">
          <source>You would typically override this method to change the visibility behavior of the control.</source>
          <target state="translated">일반적으로이 메서드는 컨트롤의 표시 동작을 변경 하려면 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="3300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /&gt;</ph> method to force the visibility of the control to change.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /&gt;</ph> 파생된 클래스에서 호출 해야 기본 클래스의 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /&gt;</ph> 메서드를 변경 하려면 컨트롤의 표시 여부입니다.</target>       </trans-unit>
        <trans-unit id="3301" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Show">
          <source>Displays the control to the user.</source>
          <target state="translated">컨트롤을 사용자에게 표시합니다.</target>       </trans-unit>
        <trans-unit id="3302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Show">
          <source>Showing the control is equivalent to setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">컨트롤을 표시 설정에 해당 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> 속성을 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Show">
          <source>After the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Show%2A&gt;</ph> method is called, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property returns a value of <ph id="ph3">`true`</ph> until the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Hide%2A&gt;</ph> method is called.</source>
          <target state="translated">후의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Show%2A&gt;</ph> 메서드가 호출 되는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> 속성의 값을 반환 <ph id="ph3">`true`</ph> 될 때까지 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Hide%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="3304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Show">
          <source>The following code example displays an about dialog box and temporarily draws a blue square on its surface.</source>
          <target state="translated">다음 코드 예제에서는 표시 하는 대화 상자에 대 한를 일시적으로 해당 화면에 있는 파란색 사각형을 그립니다.</target>       </trans-unit>
        <trans-unit id="3305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Show">
          <source>This example requires that you have defined a class that derives from <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> named <ph id="ph2">`AboutDialog`</ph>.</source>
          <target state="translated">이 예제에서 파생 되는 클래스를 정의 하려면 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 라는 <ph id="ph2">`AboutDialog`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3306" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.ShowFocusCues">
          <source>Gets a value indicating whether the control should display focus rectangles.</source>
          <target state="translated">컨트롤이 포커스 영역을 표시할지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="3307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ShowFocusCues">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control should display focus rectangles; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤이 포커스 영역을 표시하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ShowFocusCues">
          <source>For more information about this feature, see the<bpt id="p1">[</bpt>WM_CHANGEUISTATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx)</ept>,<bpt id="p2">[</bpt>WM_QUERYUISTATE<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx)</ept>, and the <bpt id="p3">[</bpt>WM_UPDATEUISTATE<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx)</ept>topics.</source>
          <target state="translated">이 기능에 대 한 자세한 내용은 참조는<bpt id="p1">[</bpt>WM_CHANGEUISTATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx)</ept>,<bpt id="p2">[</bpt>WM_QUERYUISTATE<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx)</ept>, 및 <bpt id="p3">[</bpt>WM_UPDATEUISTATE<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx)</ept>항목입니다.</target>       </trans-unit>
        <trans-unit id="3309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ShowFocusCues">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ShowFocusCues" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.ShowFocusCues" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.ShowFocusCues" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.ShowFocusCues" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="3310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ShowFocusCues">
          <source>Otherwise, you must provide all the implementation.</source>
          <target state="translated">그렇지 않으면 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="3311" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.ShowKeyboardCues">
          <source>Gets a value indicating whether the user interface is in the appropriate state to show or hide keyboard accelerators.</source>
          <target state="translated">사용자 인터페이스가 키보드 액셀러레이터 키를 표시하는지 아니면 숨기는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="3312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ShowKeyboardCues">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the keyboard accelerators are visible; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">키보드 액셀러레이터 키가 표시되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ShowKeyboardCues">
          <source>In controls created in the Windows Forms designer, keyboard accelerators are visible by default.</source>
          <target state="translated">Windows Forms 디자이너에서 만든 컨트롤에서는 키보드 액셀러레이터 키가 기본적으로 표시 합니다.</target>       </trans-unit>
        <trans-unit id="3314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.ShowKeyboardCues">
          <source>For more information about this feature, see the<bpt id="p1">[</bpt>WM_CHANGEUISTATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx)</ept>,<bpt id="p2">[</bpt>WM_QUERYUISTATE<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx)</ept>, and the <bpt id="p3">[</bpt>WM_UPDATEUISTATE<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx)</ept>topics.</source>
          <target state="translated">이 기능에 대 한 자세한 내용은 참조는<bpt id="p1">[</bpt>WM_CHANGEUISTATE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx)</ept>,<bpt id="p2">[</bpt>WM_QUERYUISTATE<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx)</ept>, 및 <bpt id="p3">[</bpt>WM_UPDATEUISTATE<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx)</ept>항목입니다.</target>       </trans-unit>
        <trans-unit id="3315" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Site">
          <source>Gets or sets the site of the control.</source>
          <target state="translated">컨트롤의 사이트를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Site">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> associated with the <ph id="ph2">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>, if any.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph>가 있는 경우 이것과 관련된 <ph id="ph2">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3317" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Size">
          <source>Gets or sets the height and width of the control.</source>
          <target state="translated">컨트롤의 높이와 너비를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Size">
          <source>The <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> that represents the height and width of the control in pixels.</source>
          <target state="translated">컨트롤의 높이와 너비를 픽셀 단위로 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Size">
          <source>Because the <ph id="ph1">&lt;xref:System.Drawing.Size&gt;</ph> class is a value type (<ph id="ph2">`Structure`</ph> in Visual Basic, <ph id="ph3">`struct`</ph> in Visual C#), it is returned by value, meaning accessing the property returns a copy of the size of the control.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Drawing.Size&gt;</ph> 클래스는 값 형식 (<ph id="ph2">`Structure`</ph> Visual Basic의 <ph id="ph3">`struct`</ph> Visual C#), 컨트롤의 크기의 복사본을 반환 하는 속성에 액세스를 의미 하는 값으로 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="3320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Size">
          <source>So, adjusting the <ph id="ph1">&lt;xref:System.Drawing.Size.Width%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Drawing.Size.Height%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Drawing.Size&gt;</ph> returned from this property will not affect the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> of the control.</source>
          <target state="translated">따라서 조정는 <ph id="ph1">&lt;xref:System.Drawing.Size.Width%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Drawing.Size.Height%2A&gt;</ph> 의 속성은 <ph id="ph3">&lt;xref:System.Drawing.Size&gt;</ph> 이에서 반환 된 속성에 영향을 주지 것입니다는 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> 또는 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> 컨트롤의 합니다.</target>       </trans-unit>
        <trans-unit id="3321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Size">
          <source>To adjust the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> of the control, you must set the control's <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> property, or set the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> property with a new <ph id="ph6">&lt;xref:System.Drawing.Size&gt;</ph>.</source>
          <target state="translated">조정 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> 컨트롤의 컨트롤의 설정 해야 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> 속성을 설정 하거나는 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> 를 새 속성 <ph id="ph6">&lt;xref:System.Drawing.Size&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Size">
          <source>To maintain better performance, do not set the <ph id="ph1">&lt;xref:System.Drawing.Size&gt;</ph> of a control in its constructor.</source>
          <target state="translated">더 나은 성능을 유지 하기 위해 설정 하지 않으면는 <ph id="ph1">&lt;xref:System.Drawing.Size&gt;</ph> 생성자에서 컨트롤의 합니다.</target>       </trans-unit>
        <trans-unit id="3323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Size">
          <source>The preferred method is to override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> property.</source>
          <target state="translated">재정의 하는 메서드가 좋습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DefaultSize%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="3324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Size">
          <source>On Windows Server 2003 systems, the size of a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> is restricted by the maximum pixel width and height of the monitor.</source>
          <target state="translated">Windows Server 2003 시스템의 크기는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 최대 픽셀 너비와 높이 모니터에 의해 제한 됩니다.</target>       </trans-unit>
        <trans-unit id="3325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Size">
          <source>The following code example adds a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> to a form and sets some of its common properties.</source>
          <target state="translated">다음 코드 예제에서는 추가 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 폼에 일반적인 속성 중 일부를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="3326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Size">
          <source>The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</source>
          <target state="translated">이 예제에서는 폼 크기가 조정 될 때의 상대 위치를 유지할 수 있도록 폼의 오른쪽 아래 모서리에 있는 단추를 고정 합니다.</target>       </trans-unit>
        <trans-unit id="3327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Size">
          <source>Next it sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> and resizes the button to the same size as the <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph>.</source>
          <target state="translated">그런 다음 설정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> 단추와 같은 크기를 조정 하 고는 <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Size">
          <source>The example then sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> to <ph id="ph2">`true`</ph> and sets the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt;</ph> property.</source>
          <target state="translated">설정한 후의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> 를 <ph id="ph2">`true`</ph> 설정 하 고는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="3329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Size">
          <source>Lastly, it adds an event handler to handle the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event of the button.</source>
          <target state="translated">마지막으로 처리 하는 이벤트 처리기 추가 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 단추의 이벤트가 있습니다.</target>       </trans-unit>
        <trans-unit id="3330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Size">
          <source>This example requires that you have an <ph id="ph1">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> named <ph id="ph2">`imageList1`</ph>.</source>
          <target state="translated">이 예제를 실행 하려면 프로그램 <ph id="ph1">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> 라는 <ph id="ph2">`imageList1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3331" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.SizeChanged">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Size" /&gt;</ph> property value changes.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Size" /&gt;</ph> 속성 값이 변경될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="3332" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SizeChanged">
          <source>It is preferable to use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event to handle custom layouts.</source>
          <target state="translated">사용 하는 것이 좋습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 사용자 지정 레이아웃을 처리 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3333" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SizeChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> event is raised in response to <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Resize&gt;</ph> events, but also in other conditions when layout might need to be applied.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 대 한 응답으로 이벤트는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Resize&gt;</ph> 레이아웃 적용 해야 할 수는 다른 상황에서 뿐만 아니라 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3334" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SizeChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="3335" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SizeChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3336" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SizeChanged">
          <source>The following code example demonstrates the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SizeChanged&gt;</ph> event.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SizeChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3337" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SizeChanged">
          <source>An instance of a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> control has been provided that can be scaled both horizontally and vertically.</source>
          <target state="translated">인스턴스는 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 컨트롤은 가로 및 세로로 확장 될 수 있습니다 제공 되었습니다.</target>       </trans-unit>
        <trans-unit id="3338" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SizeChanged">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.NumericUpDown&gt;</ph> instance provides the horizontal and vertical scale value.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Forms.NumericUpDown&gt;</ph> 인스턴스 가로 및 세로 배율 값을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="3339" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SizeChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> instance named <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> is used to set the scale values for the <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> control instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 명명 된 인스턴스 <bpt id="p1">**</bpt>확인<ept id="p1">**</ept> 배율 값을 설정 하는 데 사용 되는 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 컨트롤 인스턴스.</target>       </trans-unit>
        <trans-unit id="3340" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SizeChanged">
          <source>Whenever the size of the control changes, the event handler associated with the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SizeChanged&gt;</ph> event of the control is called.</source>
          <target state="translated">변경 될 때마다 컨트롤의 크기, 연결 된 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SizeChanged&gt;</ph> 컨트롤의 이벤트 라고 합니다.</target>       </trans-unit>
        <trans-unit id="3341" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SizeChanged">
          <source>This event handler displays a message box indicating that the size of the control has changed.</source>
          <target state="translated">이 이벤트 처리기는 컨트롤의 크기 변경 되었음을 나타내는 메시지 상자를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="3342" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SizeFromClientSize(System.Drawing.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> value representing the height and width of the control's client area.</source>
          <target state="translated">컨트롤에 있는 클라이언트 영역의 높이와 너비를 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="3343" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SizeFromClientSize(System.Drawing.Size)">
          <source>Determines the size of the entire control from the height and width of its client area.</source>
          <target state="translated">해당 클라이언트 영역의 높이와 너비로 전체 컨트롤의 크기를 확인합니다.</target>       </trans-unit>
        <trans-unit id="3344" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SizeFromClientSize(System.Drawing.Size)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> value representing the height and width of the entire control.</source>
          <target state="translated">전체 컨트롤의 높이와 너비를 나타내는 <ph id="ph1">&lt;see cref="T:System.Drawing.Size" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="3345" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.StyleChanged">
          <source>Occurs when the control style changes.</source>
          <target state="translated">컨트롤 스타일이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3346" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.StyleChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.StyleChanged&gt;</ph> event occurs when <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> flags have been added or changed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.StyleChanged&gt;</ph> 이벤트가 발생할 때 <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> 추가 되거나 변경 된 플래그입니다.</target>       </trans-unit>
        <trans-unit id="3347" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.StyleChanged">
          <source>This event is raised if the control style is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 컨트롤 스타일이 변경 되 면 발생 합니다.</target>       </trans-unit>
        <trans-unit id="3348" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.StyleChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3349" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.StyleChanged">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="3350" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.StyleChanged">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.StyleChanged&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.StyleChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3351" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.StyleChanged">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3352" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.StyleChanged">
          <source>To report on multiple events or on events that occur frequently, consider replacing <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> with <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or appending the message to a multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 여러 줄에 메시지를 추가 하거나 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3353" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.StyleChanged">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3354" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.StyleChanged">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.StyleChanged&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.StyleChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3355" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.SuspendLayout">
          <source>Temporarily suspends the layout logic for the control.</source>
          <target state="translated">컨트롤의 레이아웃 논리를 임시로 일시 중단합니다.</target>       </trans-unit>
        <trans-unit id="3356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SuspendLayout">
          <source>The layout logic of the control is suspended until the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method is called.</source>
          <target state="translated">컨트롤의 레이아웃 논리 될 때까지 일시 중단 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="3357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SuspendLayout">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> methods are used in tandem to suppress multiple <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> events while you adjust multiple attributes of the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 메서드는 동시에 표시 하지 않는 데 여러 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Layout&gt;</ph> 컨트롤의 여러 속성을 조정 하는 동안 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SuspendLayout">
          <source>For example, you would typically call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> method, then set the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> properties of the control, and then call the <ph id="ph6">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method to enable the changes to take effect.</source>
          <target state="translated">예를 들어 일반적으로 호출 하는 것의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 메서드를 설정 합니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Anchor%2A&gt;</ph>, 또는 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Dock%2A&gt;</ph> 호출 고 컨트롤의 속성은 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 메서드 변경 내용을 적용 하려면 사용할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="3359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SuspendLayout">
          <source>There must be no pending calls to <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> for <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> to be successfully called.</source>
          <target state="translated">에 대 한 보류 중인 호출 해야 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 에 대 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 성공적으로 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SuspendLayout">
          <source>When adding several controls to a parent control, it is recommended that you call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> method before initializing the controls to be added.</source>
          <target state="translated">여러 컨트롤에 부모 컨트롤을 추가할 때 것이 좋습니다를 호출 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 추가할 컨트롤을 초기화 하기 전에 메서드.</target>       </trans-unit>
        <trans-unit id="3361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SuspendLayout">
          <source>After adding the controls to the parent control, call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> method.</source>
          <target state="translated">부모 컨트롤에 컨트롤을 추가한 후 호출 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="3362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SuspendLayout">
          <source>This will increase the performance of applications with many controls.</source>
          <target state="translated">이렇게 하면 컨트롤이 많은 응용 프로그램의 성능을 늘어납니다.</target>       </trans-unit>
        <trans-unit id="3363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SuspendLayout">
          <source>The following code example adds two buttons to a form.</source>
          <target state="translated">다음 코드 예제에서는 폼에 두 개의 단추를 추가합니다.</target>       </trans-unit>
        <trans-unit id="3364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.SuspendLayout">
          <source>The example transactions the addition of the buttons by using the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> methods.</source>
          <target state="translated">예제에서는 트랜잭션을 사용 하 여 단추를 추가 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SuspendLayout%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ResumeLayout%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="3365" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragDrop(System.Windows.Forms.DragEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3366" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragDrop(System.Windows.Forms.DragEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DragDrop" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DragDrop" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="3367" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragEnter(System.Windows.Forms.DragEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3368" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragEnter(System.Windows.Forms.DragEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DragEnter" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DragEnter" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="3369" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragLeave(System.EventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3370" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragLeave(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DragLeave" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DragLeave" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="3371" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragOver(System.Windows.Forms.DragEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.DragEventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3372" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragOver(System.Windows.Forms.DragEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DragOver" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Control.DragOver" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="3373" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.SystemColorsChanged">
          <source>Occurs when the system colors change.</source>
          <target state="translated">시스템 색이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3374" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SystemColorsChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Drawing.SystemColors&gt;</ph> is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Drawing.SystemColors&gt;</ph> 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 변경 됩니다.</target>       </trans-unit>
        <trans-unit id="3375" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SystemColorsChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3376" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SystemColorsChanged">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="3377" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SystemColorsChanged">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SystemColorsChanged&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SystemColorsChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3378" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SystemColorsChanged">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3379" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SystemColorsChanged">
          <source>To report on multiple events or on events that occur frequently, consider replacing <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> with <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or appending the message to a multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 여러 줄에 메시지를 추가 하거나 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3380" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SystemColorsChanged">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3381" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.SystemColorsChanged">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SystemColorsChanged&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SystemColorsChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3382" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.TabIndex">
          <source>Gets or sets the tab order of the control within its container.</source>
          <target state="translated">컨트롤 컨테이너 내의 컨트롤 탭 순서를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabIndex">
          <source>The index value of the control within the set of controls within its container.</source>
          <target state="translated">해당 컨테이너 내의 컨트롤 집합에 있는 컨트롤의 인덱스 값입니다.</target>       </trans-unit>
        <trans-unit id="3384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabIndex">
          <source>The controls in the container are included in the tab order.</source>
          <target state="translated">컨테이너의 컨트롤은 탭 순서에 포함됩니다.</target>       </trans-unit>
        <trans-unit id="3385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabIndex">
          <source>A tab index can consist of any valid integer greater than or equal to zero, lower numbers being earlier in the tab order.</source>
          <target state="translated">탭 순서에서 앞에 0 개, 더 낮은 숫자 보다 크거나 같은 임의의 유효한 정수 탭 인덱스를 구성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabIndex">
          <source>If more than one control on the same parent control has the same tab index, the z-order of the controls determines the order to cycle through the controls.</source>
          <target state="translated">같은 부모 컨트롤에 대 한 개 이상의 컨트롤이 동일한 탭 인덱스 있으면, 컨트롤의 z 순서 컨트롤 전체를 순환 하려면 순서를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="3387" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabIndex">
          <source>For a control to be included in the tab order, its <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> property must be set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">탭 순서에 포함 되도록 컨트롤에 대 한 해당 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> 속성으로 설정 되어 있어야 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabIndex">
          <source>The following code example adds a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> to a form and sets some of its common properties.</source>
          <target state="translated">다음 코드 예제에서는 추가 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 폼에 일반적인 속성 중 일부를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="3389" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabIndex">
          <source>The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</source>
          <target state="translated">이 예제에서는 폼 크기가 조정 될 때의 상대 위치를 유지할 수 있도록 폼의 오른쪽 아래 모서리에 있는 단추를 고정 합니다.</target>       </trans-unit>
        <trans-unit id="3390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabIndex">
          <source>Next it sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> and resizes the button to the same size as the <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph>.</source>
          <target state="translated">그런 다음 설정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> 단추와 같은 크기를 조정 하 고는 <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabIndex">
          <source>The example then sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> to <ph id="ph2">`true`</ph> and sets the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt;</ph> property.</source>
          <target state="translated">설정한 후의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> 를 <ph id="ph2">`true`</ph> 설정 하 고는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="3392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabIndex">
          <source>Lastly, it adds an event handler to handle the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event of the button.</source>
          <target state="translated">마지막으로 처리 하는 이벤트 처리기 추가 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 단추의 이벤트가 있습니다.</target>       </trans-unit>
        <trans-unit id="3393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabIndex">
          <source>This example requires that you have an <ph id="ph1">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> named <ph id="ph2">`imageList1`</ph>.</source>
          <target state="translated">이 예제를 실행 하려면 프로그램 <ph id="ph1">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> 라는 <ph id="ph2">`imageList1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3394" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.TabIndexChanged">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.TabIndex" /&gt;</ph> property value changes.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.TabIndex" /&gt;</ph> 속성 값이 변경될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="3395" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TabIndexChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt;</ph> 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="3396" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TabIndexChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3397" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TabIndexChanged">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="3398" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TabIndexChanged">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabIndexChanged&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabIndexChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3399" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TabIndexChanged">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3400" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TabIndexChanged">
          <source>To report on multiple events or on events that occur frequently, consider replacing <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> with <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or appending the message to a multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 여러 줄에 메시지를 추가 하거나 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3401" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TabIndexChanged">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3402" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TabIndexChanged">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.TabIndexChanged&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.TabIndexChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3403" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.TabStop">
          <source>Gets or sets a value indicating whether the user can give the focus to this control using the TAB key.</source>
          <target state="translated">Tab 키를 사용하여 이 컨트롤의 포커스를 이동할 수 있는지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabStop">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the user can give the focus to the control using the TAB key; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Tab 키를 사용하여 컨트롤의 포커스를 이동할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabStop">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabStop">
          <source>This property will always return <ph id="ph1">&lt;see langword="true" /&gt;</ph> for an instance of the <ph id="ph2">&lt;see cref="T:System.Windows.Forms.Form" /&gt;</ph> class.</source>
          <target state="translated">이 속성은 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 클래스의 인스턴스에 대해 항상 <ph id="ph2">&lt;see cref="T:System.Windows.Forms.Form" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="3407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabStop">
          <source>When the user presses the TAB key, the input focus is set to the next control in the tab order.</source>
          <target state="translated">사용자가 TAB 키를 누르면 입력된 포커스가 탭 순서의 다음 컨트롤로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="3408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabStop">
          <source>Controls with the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> property value of <ph id="ph2">`false`</ph> are not included in the collection of controls in the tab order.</source>
          <target state="translated">컨트롤과 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> 속성 값이 <ph id="ph2">`false`</ph> 탭 순서에 컨트롤의 컬렉션에 포함 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="3409" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabStop">
          <source>The tab order can be manipulated by setting the control's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt;</ph> property value.</source>
          <target state="translated">탭 순서는 컨트롤을 설정 하 여 조작할 수 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt;</ph> 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3410" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabStop">
          <source>The following code example adds a <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> to a form and sets some of its common properties.</source>
          <target state="translated">다음 코드 예제에서는 추가 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 폼에 일반적인 속성 중 일부를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="3411" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabStop">
          <source>The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</source>
          <target state="translated">이 예제에서는 폼 크기가 조정 될 때의 상대 위치를 유지할 수 있도록 폼의 오른쪽 아래 모서리에 있는 단추를 고정 합니다.</target>       </trans-unit>
        <trans-unit id="3412" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabStop">
          <source>Next it sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> and resizes the button to the same size as the <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph>.</source>
          <target state="translated">그런 다음 설정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackgroundImage%2A&gt;</ph> 단추와 같은 크기를 조정 하 고는 <ph id="ph2">&lt;xref:System.Drawing.Image&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3413" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabStop">
          <source>The example then sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> to <ph id="ph2">`true`</ph> and sets the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt;</ph> property.</source>
          <target state="translated">설정한 후의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> 를 <ph id="ph2">`true`</ph> 설정 하 고는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.TabIndex%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="3414" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabStop">
          <source>Lastly, it adds an event handler to handle the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event of the button.</source>
          <target state="translated">마지막으로 처리 하는 이벤트 처리기 추가 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 단추의 이벤트가 있습니다.</target>       </trans-unit>
        <trans-unit id="3415" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TabStop">
          <source>This example requires that you have an <ph id="ph1">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> named <ph id="ph2">`imageList1`</ph>.</source>
          <target state="translated">이 예제를 실행 하려면 프로그램 <ph id="ph1">&lt;xref:System.Windows.Forms.ImageList&gt;</ph> 라는 <ph id="ph2">`imageList1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3416" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.TabStopChanged">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.TabStop" /&gt;</ph> property value changes.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.TabStop" /&gt;</ph> 속성 값이 변경될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="3417" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TabStopChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStop%2A&gt;</ph> 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="3418" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TabStopChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3419" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TabStopChanged">
          <source>The following code example demonstrates the use of this member.</source>
          <target state="translated">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="3420" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TabStopChanged">
          <source>In the example, an event handler reports on the occurrence of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStopChanged&gt;</ph> event.</source>
          <target state="translated">예제에서는 이벤트 처리기에서 보고 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.TabStopChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3421" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TabStopChanged">
          <source>This report helps you to learn when the event occurs and can assist you in debugging.</source>
          <target state="translated">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3422" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TabStopChanged">
          <source>To report on multiple events or on events that occur frequently, consider replacing <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> with <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> or appending the message to a multiline <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> 여러 줄에 메시지를 추가 하거나 <ph id="ph3">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3423" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TabStopChanged">
          <source>To run the example code, paste it into a project that contains an instance of a type that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>, such as a <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>.</source>
          <target state="translated">예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>와 같은 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3424" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TabStopChanged">
          <source>Then name the instance <ph id="ph1">`Control1`</ph> and ensure that the event handler is associated with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.TabStopChanged&gt;</ph> event.</source>
          <target state="translated">다음 인스턴스 이름을 <ph id="ph1">`Control1`</ph> 이벤트 처리기가 연결 확인 하 고는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.TabStopChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3425" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Tag">
          <source>Gets or sets the object that contains data about the control.</source>
          <target state="translated">컨트롤에 대한 데이터가 포함된 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Tag">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains data about the control.</source>
          <target state="translated">컨트롤에 대한 데이터가 포함된 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Tag">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Tag">
          <source>Any type derived from the <ph id="ph1">&lt;xref:System.Object&gt;</ph> class can be assigned to this property.</source>
          <target state="translated">파생 된 모든 형식에서 <ph id="ph1">&lt;xref:System.Object&gt;</ph> 클래스는이 속성에 할당할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Tag">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Tag%2A&gt;</ph> property is set through the Windows Forms designer, only text can be assigned.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Tag%2A&gt;</ph> Windows Forms 디자이너를 통해 속성이 설정 되어 있으면 텍스트만 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Tag">
          <source>A common use for the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Tag%2A&gt;</ph> property is to store data that is closely associated with the control.</source>
          <target state="translated">에 대 한 일반적인 용도 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Tag%2A&gt;</ph> 속성은 컨트롤과 밀접 하 게 관련 된 데이터를 저장 합니다.</target>       </trans-unit>
        <trans-unit id="3431" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Tag">
          <source>For example, if you have a control that displays information about a customer, you might store a <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> that contains the customer's order history in that control's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Tag%2A&gt;</ph> property so the data can be accessed quickly.</source>
          <target state="translated">예를 들어 고객에 대 한 정보를 표시 하는 컨트롤을 사용 하는 경우 저장할 수 있습니다는 <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> 해당 컨트롤의 고객의 주문 기록이 들어 있는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Tag%2A&gt;</ph> 속성 데이터를 신속 하 게 액세스할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="3432" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Tag">
          <source>The following code example displays a form and stores a <ph id="ph1">`Customer`</ph> in its <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Tag%2A&gt;</ph> property.</source>
          <target state="translated">다음 코드 예제에서는 폼을 표시 하 고 저장 한 <ph id="ph1">`Customer`</ph> 에 해당 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Tag%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="3433" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Tag">
          <source>This example requires that you have defined a class that derives from <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> named <ph id="ph2">`CustomerForm`</ph> and that you have defined a <ph id="ph3">`Customer`</ph>.</source>
          <target state="translated">이 예제에서 파생 되는 클래스를 정의 하려면 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 라는 <ph id="ph2">`CustomerForm`</ph> 및 사용자가 정의한는 <ph id="ph3">`Customer`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3434" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Text">
          <source>Gets or sets the text associated with this control.</source>
          <target state="translated">이 컨트롤과 관련된 텍스트를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3435" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Text">
          <source>The text associated with this control.</source>
          <target state="translated">이 컨트롤과 관련된 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="3436" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Text">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property of the control is used differently by each derived class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 각 파생된 클래스에서 컨트롤의 속성을 다르게 사용 합니다.</target>       </trans-unit>
        <trans-unit id="3437" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Text">
          <source>For example the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph> is displayed in the title bar at the top of the form, is fairly small in character count, and usually displays the application or document name.</source>
          <target state="translated">예를 들어는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성은 <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph> 폼의 상단에 있는 제목 표시줄에 표시 됩니다, 문자 수가 매우 적고 이며 일반적으로 응용 프로그램이 나 문서 이름이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="3438" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Text">
          <source>However, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> can be large and can include numerous nonvisual characters used to format the text.</source>
          <target state="translated">그러나는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 속성은 <ph id="ph2">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> 매우 커질 수 있으며 텍스트의 서식을 지정 하는 데 사용 되는 다양 한 표시 되지 않는 문자를 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3439" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Text">
          <source>For example, the text displayed in a <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> can be formatted by adjusting the <ph id="ph2">&lt;xref:System.Drawing.Font&gt;</ph> properties, or by the addition of spaces or tab characters to align the text.</source>
          <target state="translated">예를 들어 표시 되는 텍스트는 <ph id="ph1">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> 조정 하 여 형식을 지정할 수는 <ph id="ph2">&lt;xref:System.Drawing.Font&gt;</ph> 속성 또는 공백 또는 탭 문자 텍스트를 추가 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="3440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Text">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> and sets some of its common properties.</source>
          <target state="translated">다음 코드 예제에서는 한 <ph id="ph1">&lt;xref:System.Windows.Forms.GroupBox&gt;</ph> 공통 속성 중 일부를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="3441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Text">
          <source>The example creates a <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> and sets its <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> within the group box.</source>
          <target state="translated">이 예에서는 만듭니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 설정 하 고 해당 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> 그룹 상자 내에서.</target>       </trans-unit>
        <trans-unit id="3442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Text">
          <source>Next, it sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property of the group box, and docks the group box to the top of the form.</source>
          <target state="translated">그런 다음 설정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 그룹 상자 및 폼의 위쪽에 도킹 된 그룹 상자 속성입니다.</target>       </trans-unit>
        <trans-unit id="3443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Text">
          <source>Lastly, it disables the group box by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> property to <ph id="ph2">`false`</ph>, which causes all controls contained within the group box to be disabled.</source>
          <target state="translated">마지막으로, 그룹 상자 설정 하 여 비활성화는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> 속성을 <ph id="ph2">`false`</ph>, 사용 하지 않도록 설정할 그룹 상자에 포함 된 모든 컨트롤에 이르게 됩니다.</target>       </trans-unit>
        <trans-unit id="3444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Text">
          <source>When overriding the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Text" /&gt;</ph> property in a derived class, use the base class's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Text" /&gt;</ph> property to extend the base implementation.</source>
          <target state="translated">재정의 하는 경우는 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Text" /&gt;</ph> 파생된 클래스에서 속성의 기본 클래스를 사용 하 여 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Text" /&gt;</ph> 속성을 기본 구현을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="3445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Text">
          <source>Otherwise, you must provide all the implementation.</source>
          <target state="translated">그렇지 않으면 모든 구현을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="3446" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Text">
          <source>You are not required to override both the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.Text" /&gt;</ph> property; you can override only one if needed.</source>
          <target state="translated">모두 재정의할 필요 하지는 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 의 접근자는 <ph id="ph3">&lt;see cref="P:System.Windows.Forms.Control.Text" /&gt;</ph> 속성 필요한 경우 하나만 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3447" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.TextChanged">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Text" /&gt;</ph> property value changes.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Text" /&gt;</ph> 속성 값이 변경될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="3448" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TextChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="3449" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TextChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3450" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TextChanged">
          <source>The following code example changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> displaying currency data.</source>
          <target state="translated">다음 코드 예제에서는 변경 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 통화 데이터를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="3451" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TextChanged">
          <source>The example converts the text to a decimal number and changes the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> if the number is negative and to <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> if the number is positive.</source>
          <target state="translated">이 예제에서는 텍스트는 10 진수 및 변경 내용에 변환에서 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType&gt;</ph> 숫자가 음수 이면 및 <ph id="ph3">&lt;xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType&gt;</ph> 숫자가 양수 이면 합니다.</target>       </trans-unit>
        <trans-unit id="3452" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.TextChanged">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that contains a <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 를 포함 하는 <ph id="ph2">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3453" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Top">
          <source>Gets or sets the distance, in pixels, between the top edge of the control and the top edge of its container's client area.</source>
          <target state="translated">컨트롤의 위쪽 가장자리와 해당 컨테이너 클라이언트 영역의 위쪽 가장자리 사이의 거리(픽셀)를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Top">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> representing the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</source>
          <target state="translated">컨트롤의 아래쪽 가장자리와 해당 컨테이너 클라이언트 영역의 위쪽 가장자리 사이의 거리(픽셀)를 나타내는 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="3455" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Top">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph> property value is equivalent to the <ph id="ph2">&lt;xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> property value of the control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph> 속성 값은 해당 하는 <ph id="ph2">&lt;xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType&gt;</ph> 의 속성은 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> 컨트롤의 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Top">
          <source>Changes made to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph> property values cause the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Bottom%2A&gt;</ph> property value of the control to change.</source>
          <target state="translated">변경 내용을 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Height%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Top%2A&gt;</ph> 속성 값은 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Bottom%2A&gt;</ph> 변경 하려면 컨트롤의 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3457" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Top">
          <source>The following code example creates three <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls on a form and sets their size and location by using the various size-related and location-related properties.</source>
          <target state="translated">다음 코드 예제에서는 세 개를 만들며 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 폼에서 제어 하 고 다양 한 크기 및 위치 관련 속성을 사용 하 여 해당 크기와 위치를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="3458" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Top">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that has a width and height of at least 300 pixels.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 하에 너비와 높이가 이상 300 픽셀입니다.</target>       </trans-unit>
        <trans-unit id="3459" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.TopLevelControl">
          <source>Gets the parent control that is not parented by another Windows Forms control.</source>
          <target state="translated">다른 Windows Forms 컨트롤에 의해 부모로 지정될 수 없는 부모 컨트롤을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="3460" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.TopLevelControl">
          <source>Typically, this is the outermost <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Form" /&gt;</ph> that the control is contained in.</source>
          <target state="translated">일반적으로 이것은 컨트롤이 포함된 가장 바깥쪽 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Form" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TopLevelControl">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph> that represents the top-level control that contains the current control.</source>
          <target state="translated">현재 컨트롤이 포함된 최상위 컨트롤을 나타내는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TopLevelControl">
          <source>The top-level control is defined as the parent control that is not parented by another Windows Forms control.</source>
          <target state="translated">부모 컨트롤의 자식이 다른 Windows Forms 컨트롤을 최상위 컨트롤 정의 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="3463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TopLevelControl">
          <source>Typically, this is the outermost <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that the control is contained in.</source>
          <target state="translated">일반적으로 이것은 컨트롤이 포함된 가장 바깥쪽 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TopLevelControl">
          <source>For example, if the control is contained on an MDI child <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>, then the top-level control is the Multiple Document Interface (MDI) parent <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
          <target state="translated">예를 들어 컨트롤이 MDI 자식에 포함 된 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>, 최상위 컨트롤은 문서 MDI (다중 인터페이스) 부모 <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TopLevelControl">
          <source>If the control is not parented on a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>, this property will return <ph id="ph2">`null`</ph>.</source>
          <target state="translated">에 컨트롤의 부모가 없는 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>,이 속성은 반환 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TopLevelControl">
          <source>for all windows to get this property value.</source>
          <target state="translated">이 속성 값을 가져오는 모든 창입니다.</target>       </trans-unit>
        <trans-unit id="3467" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.TopLevelControl">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="3468" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.Update">
          <source>Causes the control to redraw the invalidated regions within its client area.</source>
          <target state="translated">해당 컨트롤이 컨트롤의 클라이언트 영역 내에 무효화된 영역을 다시 그리게 합니다.</target>       </trans-unit>
        <trans-unit id="3469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Update">
          <source>Executes any pending requests for painting.</source>
          <target state="translated">그리기에 대 한 보류 중인 요청을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="3470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Update">
          <source>There are two ways to repaint a form and its contents:</source>
          <target state="translated">두 가지 방법을 사용 하 여 폼과 해당 내용을 다시 그릴 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Update">
          <source>You can use one of the overloads of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method.</source>
          <target state="translated">오버 로드 중 하나를 사용할 수는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 메서드는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="3472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Update">
          <source>You can call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Refresh%2A&gt;</ph> method, which forces the control to redraw itself and all its children.</source>
          <target state="translated">호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Refresh%2A&gt;</ph> 강제로 컨트롤 자체와 모든 자식 다시 그리게 합니다.</target>       </trans-unit>
        <trans-unit id="3473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Update">
          <source>This is equivalent to setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method to <ph id="ph2">`true`</ph> and using it with <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph>.</source>
          <target state="translated">이 설정에 해당 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 메서드를 <ph id="ph2">`true`</ph> 와 함께 사용 하 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Update">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method governs what gets painted or repainted.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 어떤 그리거나 다시 그리는 메서드를 제어 합니다.</target>       </trans-unit>
        <trans-unit id="3475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Update">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method governs when the painting or repainting occurs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> 그리기 또는 다시 그리기 발생 하면 메서드를 제어 합니다.</target>       </trans-unit>
        <trans-unit id="3476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Update">
          <source>If you use the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> methods together rather than calling <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Refresh%2A&gt;</ph>, what gets repainted depends on which overload of <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> you use.</source>
          <target state="translated">사용 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> 메서드를 호출 하는 대신 함께 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Refresh%2A&gt;</ph>의 오버 로드에 따라 달라 집니다 다시 그리는 내용은 무엇 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 사용 합니다.</target>       </trans-unit>
        <trans-unit id="3477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Update">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method just forces the control to be painted immediately, but the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> method governs what gets painted when you call the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> 방금 메서드를 통해 즉시 그릴 컨트롤이 컨트롤 이지만 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invalidate%2A&gt;</ph> 메서드를 호출 하는 경우 그리고 가져옵니다 기능 제어는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Update%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="3478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.Update">
          <source>For more information, see the<bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](http://msdn.microsoft.com/library/dd145213\(v=vs.85\).aspx)</ept>topic.</source>
          <target state="translated">자세한 내용은 참조는<bpt id="p1">[</bpt>WM_PAINT<ept id="p1">](http://msdn.microsoft.com/library/dd145213\(v=vs.85\).aspx)</ept>항목입니다.</target>       </trans-unit>
        <trans-unit id="3479" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Control">
          <source>Updates the bounds of the control.</source>
          <target state="translated">컨트롤의 범위를 업데이트합니다.</target>       </trans-unit>
        <trans-unit id="3480" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.UpdateBounds">
          <source>Updates the bounds of the control with the current size and location.</source>
          <target state="translated">현재 크기와 위치를 사용하여 컨트롤의 범위를 업데이트합니다.</target>       </trans-unit>
        <trans-unit id="3481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.UpdateBounds">
          <source>If the new <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> of the control is different from the previous <ph id="ph2">&lt;xref:System.Drawing.Size&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SizeChanged&gt;</ph> event is raised.</source>
          <target state="translated">하는 경우 새 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> 컨트롤의와 다르면 이전 <ph id="ph2">&lt;xref:System.Drawing.Size&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SizeChanged&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="3482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.UpdateBounds">
          <source>Likewise, if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> of the control changes, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LocationChanged&gt;</ph> event is raised.</source>
          <target state="translated">마찬가지로, 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> 컨트롤 변경의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LocationChanged&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="3483" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Drawing.Point.X" /&gt;</ph> coordinate of the control.</source>
          <target state="translated">컨트롤의 <ph id="ph1">&lt;see cref="P:System.Drawing.Point.X" /&gt;</ph> 좌표입니다.</target>       </trans-unit>
        <trans-unit id="3484" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Drawing.Point.Y" /&gt;</ph> coordinate of the control.</source>
          <target state="translated">컨트롤의 <ph id="ph1">&lt;see cref="P:System.Drawing.Point.Y" /&gt;</ph> 좌표입니다.</target>       </trans-unit>
        <trans-unit id="3485" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Drawing.Size.Width" /&gt;</ph> of the control.</source>
          <target state="translated">컨트롤의 <ph id="ph1">&lt;see cref="P:System.Drawing.Size.Width" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3486" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Drawing.Size.Height" /&gt;</ph> of the control.</source>
          <target state="translated">컨트롤의 <ph id="ph1">&lt;see cref="P:System.Drawing.Size.Height" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3487" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Updates the bounds of the control with the specified size and location.</source>
          <target state="translated">지정된 크기와 위치를 사용하여 컨트롤의 범위를 업데이트합니다.</target>       </trans-unit>
        <trans-unit id="3488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If the new <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> of the control if different from the previous <ph id="ph2">&lt;xref:System.Drawing.Size&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SizeChanged&gt;</ph> event is raised.</source>
          <target state="translated">하는 경우 새 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> 이전와 다른 경우 컨트롤의 <ph id="ph2">&lt;xref:System.Drawing.Size&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SizeChanged&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="3489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Likewise, is the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> of the control changes, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LocationChanged&gt;</ph> event is raised.</source>
          <target state="translated">마찬가지로,이 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> 컨트롤 변경의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LocationChanged&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="3490" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Drawing.Point.X" /&gt;</ph> coordinate of the control.</source>
          <target state="translated">컨트롤의 <ph id="ph1">&lt;see cref="P:System.Drawing.Point.X" /&gt;</ph> 좌표입니다.</target>       </trans-unit>
        <trans-unit id="3491" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Drawing.Point.Y" /&gt;</ph> coordinate of the control.</source>
          <target state="translated">컨트롤의 <ph id="ph1">&lt;see cref="P:System.Drawing.Point.Y" /&gt;</ph> 좌표입니다.</target>       </trans-unit>
        <trans-unit id="3492" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Drawing.Size.Width" /&gt;</ph> of the control.</source>
          <target state="translated">컨트롤의 <ph id="ph1">&lt;see cref="P:System.Drawing.Size.Width" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3493" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Drawing.Size.Height" /&gt;</ph> of the control.</source>
          <target state="translated">컨트롤의 <ph id="ph1">&lt;see cref="P:System.Drawing.Size.Height" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3494" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The client <ph id="ph1">&lt;see cref="P:System.Drawing.Size.Width" /&gt;</ph> of the control.</source>
          <target state="translated">컨트롤의 클라이언트 <ph id="ph1">&lt;see cref="P:System.Drawing.Size.Width" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3495" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The client <ph id="ph1">&lt;see cref="P:System.Drawing.Size.Height" /&gt;</ph> of the control.</source>
          <target state="translated">컨트롤의 클라이언트 <ph id="ph1">&lt;see cref="P:System.Drawing.Size.Height" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3496" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Updates the bounds of the control with the specified size, location, and client size.</source>
          <target state="translated">지정된 크기, 위치 및 클라이언트 크기를 사용하여 컨트롤의 범위를 업데이트합니다.</target>       </trans-unit>
        <trans-unit id="3497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If the new <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> of the control is different from the previous <ph id="ph2">&lt;xref:System.Drawing.Size&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SizeChanged&gt;</ph> event is raised.</source>
          <target state="translated">하는 경우 새 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Size%2A&gt;</ph> 컨트롤의와 다르면 이전 <ph id="ph2">&lt;xref:System.Drawing.Size&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.SizeChanged&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="3498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Likewise, if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> of the control changes, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LocationChanged&gt;</ph> event is raised.</source>
          <target state="translated">마찬가지로, 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Location%2A&gt;</ph> 컨트롤 변경의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.LocationChanged&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="3499" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.UpdateStyles">
          <source>Forces the assigned styles to be reapplied to the control.</source>
          <target state="translated">할당된 스타일이 컨트롤에 강제로 다시 적용되도록 합니다.</target>       </trans-unit>
        <trans-unit id="3500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.UpdateStyles">
          <source>This method calls the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateParams%2A&gt;</ph> method to get the styles to apply.</source>
          <target state="translated">이 메서드를 호출는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CreateParams%2A&gt;</ph> 메서드를 적용할 스타일을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="3501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.UpdateStyles">
          <source>The styles assigned to the <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.Style%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ExStyle%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Windows.Forms.CreateParams&gt;</ph> assigned to the control's <ph id="ph4">&lt;xref:System.Windows.Forms.Control.CreateParams%2A&gt;</ph> property are reapplied.</source>
          <target state="translated">에 할당 된 스타일은 <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.Style%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ExStyle%2A&gt;</ph> 의 속성은 <ph id="ph3">&lt;xref:System.Windows.Forms.CreateParams&gt;</ph> 는 컨트롤에 할당 된 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.CreateParams%2A&gt;</ph> 속성 다시 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="3502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.UpdateStyles">
          <source>The control is repainted to reflect the style changes if necessary.</source>
          <target state="translated">필요한 경우 스타일 변경 내용에 맞게 컨트롤 다시 그려집니다.</target>       </trans-unit>
        <trans-unit id="3503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.UpdateStyles">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.UpdateStyles%2A&gt;</ph> method has no effect if the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsHandleCreated%2A&gt;</ph> property value is <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.UpdateStyles%2A&gt;</ph> 경우 메서드는 아무런 영향을 주지는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsHandleCreated%2A&gt;</ph> 속성 값은 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.UpdateStyles">
          <source>The following code example enables double-buffering on a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> and updates the styles to reflect the changes.</source>
          <target state="translated">다음 코드 예제에 이중 버퍼링을 사용 하면 한 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 하 고 변경 내용을 반영 하기 위해 스타일을 업데이트 합니다.</target>       </trans-unit>
        <trans-unit id="3505" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.UpdateZOrder">
          <source>Updates the control in its parent's z-order.</source>
          <target state="translated">컨트롤 부모의 Z 순서대로 컨트롤을 업데이트합니다.</target>       </trans-unit>
        <trans-unit id="3506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.UpdateZOrder">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.UpdateZOrder%2A&gt;</ph> method updates the position of the control in its parent control's z-order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.UpdateZOrder%2A&gt;</ph> 메서드 부모 컨트롤의 z 순서에서 컨트롤의 위치를 업데이트 합니다.</target>       </trans-unit>
        <trans-unit id="3507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.UpdateZOrder">
          <source>For example, if this control is a newly created control that was added to a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph>, the z-order is updated with the new control added to the back.</source>
          <target state="translated">이 컨트롤은 새로 만든 제어 하는 경우에 예를 들어 추가한는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ControlCollection&gt;</ph>, z-순서 뒤에 추가 하 고 새 컨트롤으로 업데이트 됩니다.</target>       </trans-unit>
        <trans-unit id="3508" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.UseWaitCursor">
          <source>Gets or sets a value indicating whether to use the wait cursor for the current control and all child controls.</source>
          <target state="translated">현재 컨트롤과 모든 자식 컨트롤에 대기 커서를 사용할지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.UseWaitCursor">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to use the wait cursor for the current control and all child controls; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 컨트롤과 모든 자식 컨트롤에 WaitCursor를 사용하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.UseWaitCursor">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3511" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.UseWaitCursor">
          <source>Use a wait cursor whenever you perform an operation that takes a noticeable amount of time.However, note that operations that block the UI thread will also block acursor change.Therefore, this property should only be used when performing time-consuming operations in another thread.</source>
          <target state="translated">시간이 오래 걸리는 작업을 수행할 때마다 대기 커서를 사용 합니다. 그러나 UI 스레드를 차단 하는 작업 acursor 변경도 차단 됩니다 note 합니다. 따라서이 속성은 다른 스레드에서 시간이 많이 걸리는 작업을 수행할 때만 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="3512" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.UseWaitCursor">
          <source>To change the cursor globally and immediately, seethe <ph id="ph1">&lt;xref:System.Windows.Forms.Cursor.Current%2A&gt;</ph> property.</source>
          <target state="translated">즉시 전역적으로 커서를 변경 하려면 참조 하십시오. <ph id="ph1">&lt;xref:System.Windows.Forms.Cursor.Current%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="3513" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.Validated">
          <source>Occurs when the control is finished validating.</source>
          <target state="translated">컨트롤의 유효성 검사가 완료되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="3514" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validated">
          <source>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> methods, or by setting the <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType&gt;</ph> property to the current form, focus events occur in the following order:</source>
          <target state="translated">호출 하 여 키보드 (TAB, SHIFT + TAB 등)를 사용 하 여 포커스를 변경 하면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> 메서드를 설정 하거나는 <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType&gt;</ph> 속성을 현재 폼으로 포커스 이벤트가 다음 순서 대로 발생:</target>       </trans-unit>
        <trans-unit id="3515" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validated">
          <source>When you change the focus by using the mouse or by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> method, focus events occur in the following order:</source>
          <target state="translated">마우스를 사용 하거나 호출 하 여 포커스를 변경 하면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> 메서드, 포커스 이벤트가 다음 순서 대로 발생 합니다.</target>       </trans-unit>
        <trans-unit id="3516" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validated">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> events are suppressed.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> 속성이 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> 이벤트는 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="3517" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validated">
          <source>If the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> is set to <ph id="ph3">`true`</ph> in the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event delegate, all events that would usually occur after the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event are suppressed.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> 속성은 <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> 로 설정 된 <ph id="ph3">`true`</ph> 에 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> 후 일반적으로 발생 하는 모든 이벤트, 이벤트 대리자는 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> 이벤트는 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="3518" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validated">
          <source>Do not attempt to set focus from within the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event handlers.</source>
          <target state="translated">내에서 포커스를 설정 하지 마십시오는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, 또는 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="3519" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validated">
          <source>Doing so can cause your application or the operating system to stop responding.</source>
          <target state="translated">이렇게 하면 응용 프로그램 또는 운영 체제 응답 하지 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3520" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validated">
          <source>For more information, see the<bpt id="p1">[</bpt>WM_KILLFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx)</ept>topic, and the "Message Deadlocks" section of the <bpt id="p2">[</bpt>About Messages and Message Queues<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx)</ept> topic.</source>
          <target state="translated">자세한 내용은 참조는<bpt id="p1">[</bpt>WM_KILLFOCUS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx)</ept>항목과의 "메시지 교착 상태" 섹션에서 <bpt id="p2">[</bpt>에 대 한 메시지와 메시지 큐<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="3521" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validated">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3522" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validated">
          <source>The following code example uses the derived class <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> and validates an email address that the user enters.</source>
          <target state="translated">다음 코드 예제에서는 파생된 클래스를 사용 하 여 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 고 사용자가 입력 하는 전자 메일 주소 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="3523" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validated">
          <source>If the email address is not in the standard format (containing "<ph id="ph1">@" and "</ph>."), the validation fails, an <ph id="ph2">&lt;xref:System.Windows.Forms.ErrorProvider&gt;</ph> icon is displayed, and the event is canceled.</source>
          <target state="translated">표준 형식으로 전자 메일 주소가 없으면 (포함 된 "<ph id="ph1">@" and "</ph>."), 유효성 검사에 실패는 <ph id="ph2">&lt;xref:System.Windows.Forms.ErrorProvider&gt;</ph> 이벤트가 취소 되 고 아이콘이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="3524" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validated">
          <source>This example requires that a <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.ErrorProvider&gt;</ph> control have been created on a form.</source>
          <target state="translated">이 예제에서는 한 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.ErrorProvider&gt;</ph> 폼에 컨트롤을 만들었습니다.</target>       </trans-unit>
        <trans-unit id="3525" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.Validating">
          <source>Occurs when the control is validating.</source>
          <target state="translated">컨트롤의 유효성을 검사할 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="3526" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validating">
          <source>When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> methods, or by setting the <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType&gt;</ph> property to the current form, focus events occur in the following order:</source>
          <target state="translated">호출 하 여 키보드 (TAB, SHIFT + TAB 등)를 사용 하 여 포커스를 변경 하면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Select%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.SelectNextControl%2A&gt;</ph> 메서드를 설정 하거나는 <ph id="ph3">&lt;xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType&gt;</ph> 속성을 현재 폼으로 포커스 이벤트가 다음 순서 대로 발생:</target>       </trans-unit>
        <trans-unit id="3527" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validating">
          <source>When you change the focus by using the mouse or by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> method, focus events occur in the following order:</source>
          <target state="translated">마우스를 사용 하거나 호출 하 여 포커스를 변경 하면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Focus%2A&gt;</ph> 메서드, 포커스 이벤트가 다음 순서 대로 발생 합니다.</target>       </trans-unit>
        <trans-unit id="3528" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validating">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> events are suppressed.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.CausesValidation%2A&gt;</ph> 속성이 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> 이벤트는 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="3529" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validating">
          <source>If the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> is set to <ph id="ph3">`true`</ph> in the <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event delegate, all events that would usually occur after the <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event are suppressed.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> 속성은 <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> 로 설정 된 <ph id="ph3">`true`</ph> 에 <ph id="ph4">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> 후 일반적으로 발생 하는 모든 이벤트, 이벤트 대리자는 <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> 이벤트는 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="3530" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validating">
          <source>Do not attempt to set focus from within the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event handlers.</source>
          <target state="translated">내에서 포커스를 설정 하지 마십시오는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Control.GotFocus&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Leave&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.LostFocus&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>, 또는 <ph id="ph6">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="3531" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validating">
          <source>Doing so can cause your application or the operating system to stop responding.</source>
          <target state="translated">이렇게 하면 응용 프로그램 또는 운영 체제 응답 하지 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="3532" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validating">
          <source>For more information, see the <ph id="ph1">`WM_KILLFOCUS`</ph> topic in the "Keyboard Input Reference" section, and the "Message Deadlocks" section of the "About Messages and Message Queues" topic in the MSDN library at <ph id="ph2">http://msdn.microsoft.com/library</ph>.</source>
          <target state="translated">자세한 내용은 참조는 <ph id="ph1">`WM_KILLFOCUS`</ph> "키보드 입력 참조" 섹션과 MSDN library에서 "에 대 한 메시지 및 메시지 큐" 항목의 "메시지 교착 상태" 섹션의 항목을 <ph id="ph2">http://msdn.microsoft.com/library</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3533" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validating">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3534" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validating">
          <source>The following code example uses the derived class <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> and validates an email address that the user enters.</source>
          <target state="translated">다음 코드 예제에서는 파생된 클래스를 사용 하 여 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 고 사용자가 입력 하는 전자 메일 주소 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="3535" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validating">
          <source>If the email address is not in the standard format (containing "<ph id="ph1">@" and "</ph>."), the validation fails, an <ph id="ph2">&lt;xref:System.Windows.Forms.ErrorProvider&gt;</ph> icon is displayed, and the event is canceled.</source>
          <target state="translated">표준 형식으로 전자 메일 주소가 없으면 (포함 된 "<ph id="ph1">@" and "</ph>."), 유효성 검사에 실패는 <ph id="ph2">&lt;xref:System.Windows.Forms.ErrorProvider&gt;</ph> 이벤트가 취소 되 고 아이콘이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="3536" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.Validating">
          <source>This example requires that a <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.ErrorProvider&gt;</ph> control have been created on a form.</source>
          <target state="translated">이 예제에서는 한 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.ErrorProvider&gt;</ph> 폼에 컨트롤을 만들었습니다.</target>       </trans-unit>
        <trans-unit id="3537" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Visible">
          <source>Gets or sets a value indicating whether the control and all its child controls are displayed.</source>
          <target state="translated">컨트롤과 모든 해당 자식 컨트롤이 표시되는지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3538" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Visible">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the control and all its child controls are displayed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">컨트롤과 모든 해당 자식 컨트롤이 표시되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Visible">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Visible">
          <source>Note that even if <ph id="ph1">`Visible`</ph> is set to <ph id="ph2">`true`</ph>, the control might not be visible to the user if it is obscured behind other controls.</source>
          <target state="translated">경우에 해당 <ph id="ph1">`Visible`</ph> 로 설정 된 <ph id="ph2">`true`</ph>, 다른 컨트롤 뒤에 가려져 경우 컨트롤 사용자에 게 표시 되지 않을 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="3541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Visible">
          <source>The following code example uses the derived classes <ph id="ph1">&lt;xref:System.Windows.Forms.VScrollBar&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.HScrollBar&gt;</ph> and sets their <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property values, based on the size of an <ph id="ph4">&lt;xref:System.Drawing.Image&gt;</ph> being displayed in a <ph id="ph5">&lt;xref:System.Windows.Forms.PictureBox&gt;</ph> control.</source>
          <target state="translated">다음 코드 예제에서는 파생된 클래스를 사용 하 여 <ph id="ph1">&lt;xref:System.Windows.Forms.VScrollBar&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.HScrollBar&gt;</ph> 설정 및 해당 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> 속성 값의 크기에 따라는 <ph id="ph4">&lt;xref:System.Drawing.Image&gt;</ph> 에 표시 되는 <ph id="ph5">&lt;xref:System.Windows.Forms.PictureBox&gt;</ph> 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="3542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Visible">
          <source>This example requires that a <ph id="ph1">&lt;xref:System.Windows.Forms.PictureBox&gt;</ph> has been created on a form and that <ph id="ph2">&lt;xref:System.Windows.Forms.HScrollBar&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.VScrollBar&gt;</ph> controls have been created on the <ph id="ph4">&lt;xref:System.Windows.Forms.PictureBox&gt;</ph>.</source>
          <target state="translated">이 예제에서는 한 <ph id="ph1">&lt;xref:System.Windows.Forms.PictureBox&gt;</ph> 폼에 만든 <ph id="ph2">&lt;xref:System.Windows.Forms.HScrollBar&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.VScrollBar&gt;</ph> 폼에 <ph id="ph4">&lt;xref:System.Windows.Forms.PictureBox&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="3543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Visible">
          <source>This code should be called when the image is loaded into the picture box and by the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Resize&gt;</ph> event of the form.</source>
          <target state="translated">이 코드를 호출 해야 이미지가 로드 될 때 및 그림 상자에는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Resize&gt;</ph> 폼의 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="3544" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Control.VisibleChanged">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Visible" /&gt;</ph> property value changes.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="P:System.Windows.Forms.Control.Visible" /&gt;</ph> 속성 값이 변경될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="3545" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.VisibleChanged">
          <source>This event is raised if the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property is changed by either a programmatic modification or user interaction.</source>
          <target state="translated">이 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> 프로그래밍 방식으로 수정 되거나 사용자 상호 작용 하 여 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="3546" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.VisibleChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3547" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Control.VisibleChanged">
          <source>The following code example raises the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.VisibleChanged&gt;</ph> event when the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> property value of the <ph id="ph3">&lt;xref:System.Windows.Forms.Label&gt;</ph> control has changed.</source>
          <target state="translated">다음 코드 예제에서는 발생은 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.VisibleChanged&gt;</ph> 이벤트 때는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Visible%2A&gt;</ph> 의 속성 값은 <ph id="ph3">&lt;xref:System.Windows.Forms.Label&gt;</ph> 컨트롤이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="3548" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.Width">
          <source>Gets or sets the width of the control.</source>
          <target state="translated">컨트롤의 너비를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="3549" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Width">
          <source>The width of the control in pixels.</source>
          <target state="translated">컨트롤의 너비(픽셀)입니다.</target>       </trans-unit>
        <trans-unit id="3550" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Width">
          <source>Changes made to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph> property values cause the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Right%2A&gt;</ph> property value of the control to change.</source>
          <target state="translated">변경 내용을 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Left%2A&gt;</ph> 속성 값은 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Right%2A&gt;</ph> 변경 하려면 컨트롤의 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="3551" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Width">
          <source>The following code example creates three <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls on a form and sets their size and location by using the various size-related and location-related properties.</source>
          <target state="translated">다음 코드 예제에서는 세 개를 만들며 <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 폼에서 제어 하 고 다양 한 크기 및 위치 관련 속성을 사용 하 여 해당 크기와 위치를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="3552" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.Width">
          <source>This example requires that you have a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> that has a width and height of at least 300 pixels.</source>
          <target state="translated">이 예제를 실행 하려면는 <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> 하에 너비와 높이가 이상 300 픽셀입니다.</target>       </trans-unit>
        <trans-unit id="3553" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Control.WindowTarget">
          <source>This property is not relevant for this class.</source>
          <target state="translated">이 속성은 이 클래스와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="3554" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.WindowTarget">
          <source>The NativeWindow contained within the control.</source>
          <target state="translated">컨트롤에 포함된 NativeWindow입니다.</target>       </trans-unit>
        <trans-unit id="3555" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Control.WindowTarget">
          <source>This property is not relevant for this class.</source>
          <target state="translated">이 속성은 이 클래스와 관련이 없습니다.</target>       </trans-unit>
        <trans-unit id="3556" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">
          <source>The Windows <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph> to process.</source>
          <target state="translated">처리할 Windows <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="3557" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">
          <source>Processes Windows messages.</source>
          <target state="translated">Windows 메시지를 처리합니다.</target>       </trans-unit>
        <trans-unit id="3558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">
          <source>All messages are sent to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph> method after getting filtered through the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A&gt;</ph> method.</source>
          <target state="translated">모든 메시지는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph> 메서드를 통해 필터링 된 후의 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="3559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph> method corresponds exactly to the Windows <ph id="ph2">`WindowProc`</ph> function.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph> 메서드는 Windows <ph id="ph2">`WindowProc`</ph> 함수와 같습니다.</target>       </trans-unit>
        <trans-unit id="3560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">
          <source>For more information about processing Windows messages, see the <bpt id="p1">[</bpt>WindowProc function<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=181565)</ept>.</source>
          <target state="translated">Windows 메시지를 처리 하는 방법에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>WindowProc 함수<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=181565)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="3561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">
          <source>The following code example demonstrates overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph> method to handle operating system messages identified in the <ph id="ph2">&lt;xref:System.Windows.Forms.Message&gt;</ph> structure.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.WndProc%2A&gt;</ph> 에서 식별 된 운영 체제 메시지를 처리 하는 메서드는 <ph id="ph2">&lt;xref:System.Windows.Forms.Message&gt;</ph> 구조입니다.</target>       </trans-unit>
        <trans-unit id="3562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">
          <source>The<bpt id="p1">[</bpt>WM_ACTIVATEAPP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx)</ept>operating system message is handled in this example to know when another application is becoming active.</source>
          <target state="translated"><bpt id="p1">[</bpt>WM_ACTIVATEAPP<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx)</ept>다른 응용 프로그램이 활성화 되 면 알아야이 예에서 운영 체제 메시지를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="3563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">
          <source>See the following topics to understand the available <ph id="ph1">&lt;xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Message.LParam%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Forms.Message.WParam%2A?displayProperty=nameWithType&gt;</ph> values.</source>
          <target state="translated">사용 가능한 이해 하려면 다음 항목을 참조 <ph id="ph1">&lt;xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.Message.LParam%2A?displayProperty=nameWithType&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Message.WParam%2A?displayProperty=nameWithType&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="3564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">
          <source>Actual constant values can be found in the Windows.h header file.</source>
          <target state="translated">상수 값을 실제 Windows.h 헤더 파일에 있습니다.</target>       </trans-unit>
        <trans-unit id="3565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">
          <source>for the immediate caller to call unmanaged code.</source>
          <target state="translated">비관리 코드를 호출할 직접 실행 호출자입니다.</target>       </trans-unit>
        <trans-unit id="3566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="3567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">
          <source>Inheriting controls should call the base class's <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" /&gt;</ph> method to process any messages that they do not handle.</source>
          <target state="translated">상속 하는 컨트롤의 기본 클래스를 호출 해야 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" /&gt;</ph> 메서드를 처리 하지 않는 메시지를 처리 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>