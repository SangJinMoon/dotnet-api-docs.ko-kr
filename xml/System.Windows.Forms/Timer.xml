<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Timer.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5edf81ff72ec14a0a499608d1879749fafd6f668b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">edf81ff72ec14a0a499608d1879749fafd6f668b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Timer">
          <source>Implements a timer that raises an event at user-defined intervals.</source>
          <target state="translated">사용자가 정의한 간격마다 이벤트를 발생시키는 타이머를 구현합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Timer">
          <source>This timer is optimized for use in Windows Forms applications and must be used in a window.</source>
          <target state="translated">이 타이머는 Windows Forms 응용 프로그램에서 사용할 수 있도록 최적화되었으며 창에서 사용해야 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Timer">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph> is used to raise an event at user-defined intervals.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph> 는 사용자가 정의한 간격 이벤트를 발생 시키는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Timer">
          <source>This Windows timer is designed for a single-threaded environment where UI threads are used to perform processing.</source>
          <target state="translated">이 Windows 타이머는 처리를 수행 하 여 UI 스레드를 사용 하는 단일 스레드 환경을 위해 설계 되었습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Timer">
          <source>It requires that the user code have a UI message pump available and always operate from the same thread, or marshal the call onto another thread.</source>
          <target state="translated">사용자 코드는 UI 메시지 펌프 하 고 항상 동일한 스레드에서 작동 했거나 다른 스레드로 호출을 마샬링하 필요 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Timer">
          <source>When you use this timer, use the <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph> event to perform a polling operation or to display a splash screen for a specified period of time.</source>
          <target state="translated">이 타이머를 사용 하 여 사용 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph> 폴링 작업을 수행 하거나 지정 된 기간에 대 한 시작 화면을 표시 하려는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Timer">
          <source>Whenever the <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph> and the <ph id="ph3">&lt;xref:System.Windows.Forms.Timer.Interval%2A&gt;</ph> property is greater than zero, the <ph id="ph4">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph> event is raised at intervals based on the <ph id="ph5">&lt;xref:System.Windows.Forms.Timer.Interval%2A&gt;</ph> property setting.</source>
          <target state="translated">때마다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> 속성이로 설정 되어 <ph id="ph2">`true`</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Timer.Interval%2A&gt;</ph> 속성이 0 보다 크면는 <ph id="ph4">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph> 기반으로 하는 간격 이벤트는 <ph id="ph5">&lt;xref:System.Windows.Forms.Timer.Interval%2A&gt;</ph> 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Timer">
          <source>This class provides methods to set the interval, and to start and stop the timer.</source>
          <target state="translated">이 클래스는 간격을 설정 하 고 시작 하 고 타이머를 중지 하는 메서드를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Timer">
          <source>The Windows Forms Timer component is single-threaded, and is limited to an accuracy of 55 milliseconds.</source>
          <target state="translated">Windows Forms Timer 구성 요소는 단일 스레드 고 55 밀리초의 정확도 제한 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Timer">
          <source>If you require a multithreaded timer with greater accuracy, use the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> class in the <ph id="ph2">&lt;xref:System.Timers&gt;</ph> namespace.</source>
          <target state="translated">더욱 정확해 다중 스레드 타이머를 필요한 경우 사용 된 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 클래스에 <ph id="ph2">&lt;xref:System.Timers&gt;</ph> 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Timer">
          <source>The following example implements a simple interval timer, which sets off an alarm every five seconds.</source>
          <target state="translated">다음 예제에서는 간단한 간격 타이머를 설정 하는 경보 오프 5 초 마다을 구현 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.Timer">
          <source>When the alarm occurs, a <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph> displays a count of the number of times the alarm has started and prompts the user as to whether the timer should continue to run.</source>
          <target state="translated">경보가 발생 한 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph> 경보를 시작 하 고 타이머를 계속 실행할 것인지 여부에 대 한 사용자 요청 횟수의 수를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.Timer">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Timer" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Timer" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Timer.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Timer" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Timer" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.#ctor">
          <source>When a new timer is created, it is disabled; that is, <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> is set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">새 타이머를 만들면 비활성화 됩니다. 즉, <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> 로 설정 된 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.#ctor">
          <source>To enable the timer, call the <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Start%2A&gt;</ph> method or set <ph id="ph2">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">타이머를 사용 하도록 설정 하려면 호출는 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Start%2A&gt;</ph> 메서드 또는 집합 <ph id="ph2">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> 를 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.#ctor">
          <source>If the timer is disabled and the timer is out of scope, the timer will be disposed when garbage collection occurs.</source>
          <target state="translated">타이머를 사용 하지 않도록 설정 하는 경우 사용 되는 타이머의 범위를 벗어납니다 가비지 수집이 발생할 때 사용 되는 타이머 삭제 됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.#ctor">
          <source>If the timer is enabled, even if it is out of scope, it is not subject to garbage collection.</source>
          <target state="translated">범위에 속하지 않은 경우에 타이머가 활성화 되는지, 하는 경우 가비지 수집의 대상이 아닙니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.IContainer" /&gt;</ph> that represents the container for the timer.</source>
          <target state="translated">타이머의 컨테이너를 나타내는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.IContainer" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Timer" /&gt;</ph> class together with the specified container.</source>
          <target state="translated">지정된 컨테이너를 사용하여 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Timer" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph> constructor enables you to associate a <ph id="ph2">&lt;xref:System.Windows.Forms.Timer&gt;</ph> with any <ph id="ph3">&lt;xref:System.ComponentModel.Container&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph> 생성자를 사용 하면 연결할 수는 <ph id="ph2">&lt;xref:System.Windows.Forms.Timer&gt;</ph> 함께 <ph id="ph3">&lt;xref:System.ComponentModel.Container&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)">
          <source>By associating the <ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph> like this, you hand over control of the lifetime of the <ph id="ph2">&lt;xref:System.Windows.Forms.Timer&gt;</ph> to the <ph id="ph3">&lt;xref:System.ComponentModel.Container&gt;</ph>.</source>
          <target state="translated">연결 하 여는 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph> 의 수명 제어 전달이 <ph id="ph2">&lt;xref:System.Windows.Forms.Timer&gt;</ph> 에 <ph id="ph3">&lt;xref:System.ComponentModel.Container&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)">
          <source>This can be useful if you use a number of components in your application and want to dispose of all of them simultaneously.</source>
          <target state="translated">응용 프로그램에서 다양 한 구성 요소를 사용 하 고 동시에 모두 삭제 하려고 할 경우에 유용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)">
          <source>For example, if you associate a <ph id="ph1">&lt;xref:System.Windows.Forms.ToolTip&gt;</ph>, an <ph id="ph2">&lt;xref:System.Windows.Forms.ImageList&gt;</ph>, and a <ph id="ph3">&lt;xref:System.Windows.Forms.Timer&gt;</ph> with a <ph id="ph4">&lt;xref:System.ComponentModel.Container&gt;</ph>, calling <ph id="ph5">&lt;xref:System.ComponentModel.Container.Dispose%2A&gt;</ph> on the <ph id="ph6">&lt;xref:System.ComponentModel.Container&gt;</ph> will force disposal of all of these components as well.</source>
          <target state="translated">예를 들어, 연결 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.ToolTip&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Forms.ImageList&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Timer&gt;</ph> 와 <ph id="ph4">&lt;xref:System.ComponentModel.Container&gt;</ph>호출, <ph id="ph5">&lt;xref:System.ComponentModel.Container.Dispose%2A&gt;</ph> 에 <ph id="ph6">&lt;xref:System.ComponentModel.Container&gt;</ph> 을 강제로 이러한 구성 요소를 모두 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)">
          <source>When a new timer is created, it is disabled; that is, <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> is set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">새 타이머를 만들면 비활성화 됩니다. 즉, <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> 로 설정 된 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)">
          <source>To enable the timer, call the <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Start%2A&gt;</ph> method or set <ph id="ph2">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">타이머를 사용 하도록 설정 하려면 호출는 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Start%2A&gt;</ph> 메서드 또는 집합 <ph id="ph2">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> 를 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)">
          <source>This instance will exist until its container releases it to garbage collection.</source>
          <target state="translated">이 인스턴스는 해당 컨테이너 가비지 수집을 해제할 때까지 존재 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Timer.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고,</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Timer.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> to release only the unmanaged resources.</source>
          <target state="translated">관리되지 않는 리소스만 해제하려면 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Timer.Dispose(System.Boolean)">
          <source>Disposes of the resources, other than memory, used by the timer.</source>
          <target state="translated">타이머에서 사용하는 리소스(메모리 제외)를 삭제합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Dispose(System.Boolean)">
          <source>Call <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Dispose%2A&gt;</ph> when you are finished using the timer.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Dispose%2A&gt;</ph> 타이머를 사용 하 여 작업을 마쳤으면 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Dispose(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Dispose%2A&gt;</ph> method leaves the timer in an unusable state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Dispose%2A&gt;</ph> 메서드 타이머 사용할 수 없는 상태로 둡니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Dispose(System.Boolean)">
          <source>After you call <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Dispose%2A&gt;</ph>, you must release all references to the timer so the memory it was occupying can be reclaimed by garbage collection.</source>
          <target state="translated">호출한 후 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Dispose%2A&gt;</ph>, 가비지 수집에 의해 차지 했던 메모리를 회수 될 수 있도록 타이머에 대 한 모든 참조를 해제 해야 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Dispose(System.Boolean)">
          <source>Always call <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Dispose%2A&gt;</ph> before you release your last reference to the timer.</source>
          <target state="translated">항상 호출 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Dispose%2A&gt;</ph> 타이머에 대 한 마지막 참조를 해제 하기 전에.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Dispose(System.Boolean)">
          <source>Otherwise, the resources the timer is using will not be freed until garbage collection calls the destructor of the timer object.</source>
          <target state="translated">그렇지 않은 경우 가비지 수집 타이머 개체의 소멸자를 호출할 때까지 타이머에서 사용 중인 리소스가 해제 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Timer.Enabled">
          <source>Gets or sets whether the timer is running.</source>
          <target state="translated">타이머가 실행 중인지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Timer.Enabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the timer is currently enabled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">타이머를 현재 사용할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Timer.Enabled">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Timer.Enabled">
          <source>The timer is not subject to garbage collection when the value is <ph id="ph1">`true`</ph>.</source>
          <target state="translated">값은 가비지 수집의 대상이 타이머 하지는 <ph id="ph1">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Timer.Enabled">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Start%2A&gt;</ph> method is the same as setting <ph id="ph2">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">호출 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Start%2A&gt;</ph> 메서드는 설정과 동일 <ph id="ph2">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> 를 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Timer.Enabled">
          <source>Likewise, calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Stop%2A&gt;</ph> method is the same as setting <ph id="ph2">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">마찬가지로, 호출의 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Stop%2A&gt;</ph> 메서드는 설정과 동일 <ph id="ph2">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> 를 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Timer.Enabled">
          <source>The following example implements a simple interval timer, which sets off an alarm every five seconds.</source>
          <target state="translated">다음 예제에서는 간단한 간격 타이머를 설정 하는 경보 오프 5 초 마다을 구현 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Timer.Enabled">
          <source>When the alarm occurs, a <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</source>
          <target state="translated">경보가 발생 한 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph> 경보를 시작 하 고 타이머 계속 실행 되어야 하는지 여부를 묻는 횟수의 수를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Timer.Interval">
          <source>Gets or sets the time, in milliseconds, before the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Timer.Tick" /&gt;</ph> event is raised relative to the last occurrence of the <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Timer.Tick" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Timer.Tick" /&gt;</ph> 이벤트의 마지막 발생을 기준으로 <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Timer.Tick" /&gt;</ph> 이벤트를 발생시킬 시간(밀리초)을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Timer.Interval">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> specifying the number of milliseconds before the <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Timer.Tick" /&gt;</ph> event is raised relative to the last occurrence of the <ph id="ph3">&lt;see cref="E:System.Windows.Forms.Timer.Tick" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 이벤트의 마지막 발생을 기준으로 <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Timer.Tick" /&gt;</ph> 이벤트를 발생시킬 시간(밀리초)을 지정하는 <ph id="ph3">&lt;see cref="E:System.Windows.Forms.Timer.Tick" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Timer.Interval">
          <source>The value cannot be less than one.</source>
          <target state="translated">이 값이 1보다 작을 수 없는 경우</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Timer.Interval">
          <source>To get the number of seconds in the interval, divide this number by 1,000.</source>
          <target state="translated">간격 (초)을 가져오려면이 수를 1000으로 나눕니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Timer.Interval">
          <source>The following code example implements a simple interval timer, which sets off an alarm every five seconds.</source>
          <target state="translated">다음 코드 예제에서는 간단한 간격 타이머를 설정 하는 경보 오프 5 초 마다을 구현 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Timer.Interval">
          <source>When the alarm occurs, a <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</source>
          <target state="translated">경보가 발생 한 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph> 경보를 시작 하 고 타이머 계속 실행 되어야 하는지 여부를 묻는 횟수의 수를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">이벤트 데이터를 포함하는 <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)">
          <source>This is always <ph id="ph1">&lt;see cref="F:System.EventArgs.Empty" /&gt;</ph>.</source>
          <target state="translated">이것은 항상 <ph id="ph1">&lt;see cref="F:System.EventArgs.Empty" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Forms.Timer.Tick" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Forms.Timer.Tick" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)">
          <source>This method is called for each timer tick.</source>
          <target state="translated">이 메서드는 각 타이머 틱에 대해 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)">
          <source>It calls any methods that are added through <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph>.</source>
          <target state="translated">클래스를 통해 추가 된 모든 메서드를 호출 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)">
          <source>If you are inheriting from <ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph>, you can override this method.</source>
          <target state="translated">상속 하는 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph>,이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /&gt;</ph> in a derived class, make sure that you call the base class's <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /&gt;</ph> method.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /&gt;</ph> 파생된 클래스에서 기본 클래스를 호출 하 고 있는지 확인 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Timer.Start">
          <source>Starts the timer.</source>
          <target state="translated">타이머를 시작합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Start">
          <source>You can also start the timer by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">설정 하 여 타이머를 시작할 수도 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> 속성을 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Start">
          <source>The following code example implements a simple interval timer, which sets off an alarm every five seconds.</source>
          <target state="translated">다음 코드 예제에서는 간단한 간격 타이머를 설정 하는 경보 오프 5 초 마다을 구현 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Start">
          <source>When the alarm occurs, a <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</source>
          <target state="translated">경보가 발생 한 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph> 경보를 시작 하 고 타이머 계속 실행 되어야 하는지 여부를 묻는 횟수의 수를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Timer.Stop">
          <source>Stops the timer.</source>
          <target state="translated">타이머를 중지합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Stop">
          <source>You can also stop the timer by setting the <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">설정 하 여 타이머를 중지할 수도 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Enabled%2A&gt;</ph> 속성을 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Stop">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph> object may be enabled and disabled multiple times within the same application session.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph> 개체를 활성화 하 고 동일한 응용 프로그램 세션 내에서 여러 번 사용 하지 않도록 설정 수 있습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Stop">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Start%2A&gt;</ph> after you have disabled a <ph id="ph2">&lt;xref:System.Windows.Forms.Timer&gt;</ph> by calling <ph id="ph3">&lt;xref:System.Windows.Forms.Timer.Stop%2A&gt;</ph> will cause the <ph id="ph4">&lt;xref:System.Windows.Forms.Timer&gt;</ph> to restart the interrupted interval.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Start%2A&gt;</ph> 비활성화 한 후 한 <ph id="ph2">&lt;xref:System.Windows.Forms.Timer&gt;</ph> 호출 하 여 <ph id="ph3">&lt;xref:System.Windows.Forms.Timer.Stop%2A&gt;</ph> 하면는 <ph id="ph4">&lt;xref:System.Windows.Forms.Timer&gt;</ph> 중단된 된 시간을 다시 시작 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Stop">
          <source>If your <ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph> is set for a 5000-millisecond interval, and you call <ph id="ph2">&lt;xref:System.Windows.Forms.Timer.Stop%2A&gt;</ph> at around 3000 milliseconds, calling <ph id="ph3">&lt;xref:System.Windows.Forms.Timer.Start%2A&gt;</ph> will cause the <ph id="ph4">&lt;xref:System.Windows.Forms.Timer&gt;</ph> to wait 5000 milliseconds before raising the <ph id="ph5">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph> event.</source>
          <target state="translated">경우 프로그램 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph> 5000 밀리초 간격에 대 한 설정 호출 하면 <ph id="ph2">&lt;xref:System.Windows.Forms.Timer.Stop%2A&gt;</ph> 약 3000 밀리초, 호출에 <ph id="ph3">&lt;xref:System.Windows.Forms.Timer.Start%2A&gt;</ph> 하면는 <ph id="ph4">&lt;xref:System.Windows.Forms.Timer&gt;</ph> 5000 밀리초 발생 하기 전에 대기 하는 <ph id="ph5">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph> 이벤트.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Stop">
          <source>Calling Stop on any <ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph> within a Windows Forms application can cause messages from other <ph id="ph2">&lt;xref:System.Windows.Forms.Timer&gt;</ph> components in the application to be processed immediately, because all <ph id="ph3">&lt;xref:System.Windows.Forms.Timer&gt;</ph> components operate on the main application thread.</source>
          <target state="translated">중지를 호출 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph> 내 Windows Forms 응용 프로그램 수에서 생성 된 메시지가 다른 <ph id="ph2">&lt;xref:System.Windows.Forms.Timer&gt;</ph> 때문에 즉시 처리 하면 응용 프로그램의 모든 <ph id="ph3">&lt;xref:System.Windows.Forms.Timer&gt;</ph> 구성 요소는 주 응용 프로그램 스레드에서 작동 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Stop">
          <source>If you have two <ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph> components, one set to 700 milliseconds and one set to 500 milliseconds, and you call <ph id="ph2">&lt;xref:System.Windows.Forms.Timer.Stop%2A&gt;</ph> on the first <ph id="ph3">&lt;xref:System.Windows.Forms.Timer&gt;</ph>, your application may receive an event callback for the second component first.</source>
          <target state="translated">두 개 있는 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.Timer&gt;</ph> 구성 요소, 700 밀리초와 500 밀리초로 하나의 집합 하나를 설정 하 고 호출 하면 <ph id="ph2">&lt;xref:System.Windows.Forms.Timer.Stop%2A&gt;</ph> 첫 <ph id="ph3">&lt;xref:System.Windows.Forms.Timer&gt;</ph>, 응용 프로그램은 두 번째 구성 요소는 이벤트 콜백을 먼저 표시 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Stop">
          <source>If this proves problematic, consider using the <ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph> class in the <ph id="ph2">&lt;xref:System.Threading&gt;</ph> namespace instead.</source>
          <target state="translated">문제가 있는 입증 하는 경우를 사용해는 <ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph> 클래스에 <ph id="ph2">&lt;xref:System.Threading&gt;</ph> 네임 스페이스 대신 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Stop">
          <source>The following code example implements a simple interval timer, which sets off an alarm every five seconds.</source>
          <target state="translated">다음 코드 예제에서는 간단한 간격 타이머를 설정 하는 경보 오프 5 초 마다을 구현 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.Stop">
          <source>When the alarm occurs, a <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</source>
          <target state="translated">경보가 발생 한 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph> 경보를 시작 하 고 타이머 계속 실행 되어야 하는지 여부를 묻는 횟수의 수를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.Timer.Tag">
          <source>Gets or sets an arbitrary string representing some type of user state.</source>
          <target state="translated">사용자 상태의 일부 형식을 나타내는 임의의 문자열을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.Timer.Tag">
          <source>An arbitrary string representing some type of user state.</source>
          <target state="translated">사용자 상태의 일부 형식을 나타내는 임의의 문자열입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="E:System.Windows.Forms.Timer.Tick">
          <source>Occurs when the specified timer interval has elapsed and the timer is enabled.</source>
          <target state="translated">지정된 타이머 간격이 경과되고 타이머를 사용할 수 있을 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Timer.Tick">
          <source>Calling the <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Assert%2A&gt;</ph> method on the <ph id="ph2">&lt;xref:System.Diagnostics.Debug&gt;</ph> class from within the <ph id="ph3">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph> event may not behave as expected, as displaying the assertion dialog box may cause Windows to raise the <ph id="ph4">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph> event repeatedly.</source>
          <target state="translated">호출는 <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Assert%2A&gt;</ph> 에서 메서드는 <ph id="ph2">&lt;xref:System.Diagnostics.Debug&gt;</ph> 클래스 내에서 <ph id="ph3">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph> 이벤트 예상 대로 동작 하지 않을 수, 어설션 대화 상자를 표시와 상자를 발생 시키는 Windows를 일으킬 수 있습니다는 <ph id="ph4">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph> 이벤트 반복 해 서 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Timer.Tick">
          <source>We recommend that you refrain from testing assertions within this event, and use the <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Write%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Debug.WriteIf%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Diagnostics.Debug.WriteLine%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Diagnostics.Debug.WriteLineIf%2A&gt;</ph> methods instead.</source>
          <target state="translated">이 이벤트에서 어설션을 테스트 하지 않는 사용 하는 것이 좋습니다는 <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Write%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Debug.WriteIf%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Diagnostics.Debug.WriteLine%2A&gt;</ph>, 또는 <ph id="ph4">&lt;xref:System.Diagnostics.Debug.WriteLineIf%2A&gt;</ph> 메서드 대신 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Timer.Tick">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.</source>
          <target state="translated">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Timer.Tick">
          <source>The following code example implements a simple interval timer, which sets off an alarm every five seconds.</source>
          <target state="translated">다음 코드 예제에서는 간단한 간격 타이머를 설정 하는 경보 오프 5 초 마다을 구현 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Forms.Timer.Tick">
          <source>When the alarm occurs, a <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</source>
          <target state="translated">경보가 발생 한 <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph> 경보를 시작 하 고 타이머 계속 실행 되어야 하는지 여부를 묻는 횟수의 수를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Timer.ToString">
          <source>Returns a string that represents the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Timer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Forms.Timer" /&gt;</ph>를 나타내는 문자열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.Timer.ToString">
          <source>A string that represents the current <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Timer" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Timer" /&gt;</ph>을(를) 나타내는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.Timer.ToString">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.ToString%2A&gt;</ph> method returns a string that includes the value of the <ph id="ph2">&lt;xref:System.Windows.Forms.Timer.Interval%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Timer.ToString%2A&gt;</ph> 값이 포함 된 문자열을 반환 하는 메서드는 <ph id="ph2">&lt;xref:System.Windows.Forms.Timer.Interval%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>