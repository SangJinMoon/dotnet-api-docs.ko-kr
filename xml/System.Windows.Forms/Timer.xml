<Type Name="Timer" FullName="System.Windows.Forms.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="40a2cccedc77420d9f12114c1bbb35ea3866d05b" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33659340" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Tick")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>사용자가 정의한 간격마다 이벤트를 발생시키는 타이머를 구현합니다. 이 타이머는 Windows Forms 응용 프로그램에서 사용할 수 있도록 최적화되었으며 창에서 사용해야 합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.Timer> 는 사용자가 정의한 간격 이벤트를 발생 시키는 데 사용 됩니다. 이 Windows 타이머는 처리를 수행 하 여 UI 스레드를 사용 하는 단일 스레드 환경을 위해 설계 되었습니다. 사용자 코드는 UI 메시지 펌프 하 고 항상 동일한 스레드에서 작동 했거나 다른 스레드로 호출을 마샬링하 필요 합니다.  
  
 이 타이머를 사용 하 여 사용 된 <xref:System.Windows.Forms.Timer.Tick> 폴링 작업을 수행 하거나 지정 된 기간에 대 한 시작 화면을 표시 하려는 이벤트입니다. 때마다는 <xref:System.Windows.Forms.Timer.Enabled%2A> 속성이로 설정 되어 `true` 및 <xref:System.Windows.Forms.Timer.Interval%2A> 속성이 0 보다 크면는 <xref:System.Windows.Forms.Timer.Tick> 기반으로 하는 간격 이벤트는 <xref:System.Windows.Forms.Timer.Interval%2A> 속성을 설정 합니다.  
  
 이 클래스는 간격을 설정 하 고 시작 하 고 타이머를 중지 하는 메서드를 제공 합니다.  
  
> [!NOTE]
>  Windows Forms Timer 구성 요소는 단일 스레드 고 55 밀리초의 정확도 제한 됩니다. 더욱 정확해 다중 스레드 타이머를 필요한 경우 사용 된 <xref:System.Timers.Timer> 클래스에 <xref:System.Timers> 네임 스페이스입니다.  
  
   
  
## Examples  
 다음 예제에서는 간단한 간격 타이머를 설정 하는 경보 오프 5 초 마다을 구현 합니다. 경보가 발생 한 <xref:System.Windows.Forms.MessageBox> 경보를 시작 하 고 타이머를 계속 실행할 것인지 여부에 대 한 사용자 요청 횟수의 수를 표시 합니다.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.Timer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.Timer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 새 타이머를 만들면 비활성화 됩니다. 즉, <xref:System.Windows.Forms.Timer.Enabled%2A> 로 설정 된 `false`합니다. 타이머를 사용 하도록 설정 하려면 호출는 <xref:System.Windows.Forms.Timer.Start%2A> 메서드 또는 집합 <xref:System.Windows.Forms.Timer.Enabled%2A> 를 `true`합니다.  
  
 타이머를 사용 하지 않도록 설정 하는 경우 사용 되는 타이머의 범위를 벗어납니다 가비지 수집이 발생할 때 사용 되는 타이머 삭제 됩니다. 범위에 속하지 않은 경우에 타이머가 활성화 되는지, 하는 경우 가비지 수집의 대상이 아닙니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::ComponentModel::IContainer ^ container);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">타이머의 컨테이너를 나타내는 <see cref="T:System.ComponentModel.IContainer" />입니다.</param>
        <summary>지정된 컨테이너를 사용하여 <see cref="T:System.Windows.Forms.Timer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Timer> 생성자를 사용 하면 연결할 수는 <xref:System.Windows.Forms.Timer> 함께 <xref:System.ComponentModel.Container> 개체입니다. 연결 하 여는 <xref:System.Windows.Forms.Timer> 의 수명 제어 전달이 <xref:System.Windows.Forms.Timer> 에 <xref:System.ComponentModel.Container>합니다. 응용 프로그램에서 다양 한 구성 요소를 사용 하 고 동시에 모두 삭제 하려고 할 경우에 유용할 수 있습니다. 예를 들어, 연결 하는 경우는 <xref:System.Windows.Forms.ToolTip>, <xref:System.Windows.Forms.ImageList>, 및 <xref:System.Windows.Forms.Timer> 와 <xref:System.ComponentModel.Container>호출, <xref:System.ComponentModel.Container.Dispose%2A> 에 <xref:System.ComponentModel.Container> 을 강제로 이러한 구성 요소를 모두 삭제 합니다.  
  
 새 타이머를 만들면 비활성화 됩니다. 즉, <xref:System.Windows.Forms.Timer.Enabled%2A> 로 설정 된 `false`합니다. 타이머를 사용 하도록 설정 하려면 호출는 <xref:System.Windows.Forms.Timer.Start%2A> 메서드 또는 집합 <xref:System.Windows.Forms.Timer.Enabled%2A> 를 `true`합니다.  
  
 이 인스턴스는 해당 컨테이너 가비지 수집을 해제할 때까지 존재 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />이고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />입니다.</param>
        <summary>타이머에서 사용하는 리소스(메모리 제외)를 삭제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 <xref:System.Windows.Forms.Timer.Dispose%2A> 타이머를 사용 하 여 작업을 마쳤으면 합니다. <xref:System.Windows.Forms.Timer.Dispose%2A> 메서드 타이머 사용할 수 없는 상태로 둡니다. 호출한 후 <xref:System.Windows.Forms.Timer.Dispose%2A>, 가비지 수집에 의해 차지 했던 메모리를 회수 될 수 있도록 타이머에 대 한 모든 참조를 해제 해야 합니다.  
  
> [!NOTE]
>  항상 호출 <xref:System.Windows.Forms.Timer.Dispose%2A> 타이머에 대 한 마지막 참조를 해제 하기 전에. 그렇지 않은 경우 가비지 수집 타이머 개체의 소멸자를 호출할 때까지 타이머에서 사용 중인 리소스가 해제 되지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>타이머가 실행 중인지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          타이머를 현재 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값은 가비지 수집의 대상이 타이머 하지는 `true`합니다.  
  
 호출 된 <xref:System.Windows.Forms.Timer.Start%2A> 메서드는 설정과 동일 <xref:System.Windows.Forms.Timer.Enabled%2A> 를 `true`합니다. 마찬가지로, 호출의 <xref:System.Windows.Forms.Timer.Stop%2A> 메서드는 설정과 동일 <xref:System.Windows.Forms.Timer.Enabled%2A> 를 `false`합니다.  
  
   
  
## Examples  
 다음 예제에서는 간단한 간격 타이머를 설정 하는 경보 오프 5 초 마다을 구현 합니다. 경보가 발생 한 <xref:System.Windows.Forms.MessageBox> 경보를 시작 하 고 타이머 계속 실행 되어야 하는지 여부를 묻는 횟수의 수를 표시 합니다.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public int Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Interval { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.Forms.Timer.Tick" /> 이벤트의 마지막 발생을 기준으로 <see cref="E:System.Windows.Forms.Timer.Tick" /> 이벤트를 발생시킬 시간(밀리초)을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Int32" /> 이벤트의 마지막 발생을 기준으로 <see cref="E:System.Windows.Forms.Timer.Tick" /> 이벤트를 발생시킬 시간(밀리초)을 지정하는 <see cref="E:System.Windows.Forms.Timer.Tick" />입니다. 이 값이 1보다 작을 수 없는 경우</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 간격 (초)을 가져오려면이 수를 1000으로 나눕니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 간단한 간격 타이머를 설정 하는 경보 오프 5 초 마다을 구현 합니다. 경보가 발생 한 <xref:System.Windows.Forms.MessageBox> 경보를 시작 하 고 타이머 계속 실행 되어야 하는지 여부를 묻는 횟수의 수를 표시 합니다.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTick">
      <MemberSignature Language="C#" Value="protected virtual void OnTick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTick(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다. 이것은 항상 <see cref="F:System.EventArgs.Empty" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.Timer.Tick" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 각 타이머 틱에 대해 호출 됩니다. 클래스를 통해 추가 된 모든 메서드를 호출 <xref:System.Windows.Forms.Timer.Tick>합니다. 상속 하는 경우 <xref:System.Windows.Forms.Timer>,이 메서드를 재정의할 수 있습니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> 파생된 클래스에서 기본 클래스를 호출 하 고 있는지 확인 <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> 메서드.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>타이머를 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 하 여 타이머를 시작할 수도 있습니다는 <xref:System.Windows.Forms.Timer.Enabled%2A> 속성을 `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 간단한 간격 타이머를 설정 하는 경보 오프 5 초 마다을 구현 합니다. 경보가 발생 한 <xref:System.Windows.Forms.MessageBox> 경보를 시작 하 고 타이머 계속 실행 되어야 하는지 여부를 묻는 횟수의 수를 표시 합니다.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>타이머를 중지합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 하 여 타이머를 중지할 수도 있습니다는 <xref:System.Windows.Forms.Timer.Enabled%2A> 속성을 `false`합니다. A <xref:System.Windows.Forms.Timer> 개체를 활성화 하 고 동일한 응용 프로그램 세션 내에서 여러 번 사용 하지 않도록 설정 수 있습니다.  
  
 호출 <xref:System.Windows.Forms.Timer.Start%2A> 비활성화 한 후 한 <xref:System.Windows.Forms.Timer> 호출 하 여 <xref:System.Windows.Forms.Timer.Stop%2A> 하면는 <xref:System.Windows.Forms.Timer> 중단된 된 시간을 다시 시작 합니다. 경우 프로그램 <xref:System.Windows.Forms.Timer> 5000 밀리초 간격에 대 한 설정 호출 하면 <xref:System.Windows.Forms.Timer.Stop%2A> 약 3000 밀리초, 호출에 <xref:System.Windows.Forms.Timer.Start%2A> 하면는 <xref:System.Windows.Forms.Timer> 5000 밀리초 발생 하기 전에 대기 하는 <xref:System.Windows.Forms.Timer.Tick> 이벤트.  
  
> [!NOTE]
>  중지를 호출 <xref:System.Windows.Forms.Timer> 내 Windows Forms 응용 프로그램 수에서 생성 된 메시지가 다른 <xref:System.Windows.Forms.Timer> 때문에 즉시 처리 하면 응용 프로그램의 모든 <xref:System.Windows.Forms.Timer> 구성 요소는 주 응용 프로그램 스레드에서 작동 합니다. 두 개 있는 경우 <xref:System.Windows.Forms.Timer> 구성 요소, 700 밀리초와 500 밀리초로 하나의 집합 하나를 설정 하 고 호출 하면 <xref:System.Windows.Forms.Timer.Stop%2A> 첫 <xref:System.Windows.Forms.Timer>, 응용 프로그램은 두 번째 구성 요소는 이벤트 콜백을 먼저 표시 될 수 있습니다. 문제가 있는 입증 하는 경우를 사용해는 <xref:System.Threading.Timer> 클래스에 <xref:System.Threading> 네임 스페이스 대신 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 간단한 간격 타이머를 설정 하는 경보 오프 5 초 마다을 구현 합니다. 경보가 발생 한 <xref:System.Windows.Forms.MessageBox> 경보를 시작 하 고 타이머 계속 실행 되어야 하는지 여부를 묻는 횟수의 수를 표시 합니다.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자 상태의 일부 형식을 나타내는 임의의 문자열을 가져오거나 설정합니다.</summary>
        <value>사용자 상태의 일부 형식을 나타내는 임의의 문자열입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Timer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>지정된 타이머 간격이 경과되고 타이머를 사용할 수 있을 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출는 <xref:System.Diagnostics.Debug.Assert%2A> 에서 메서드는 <xref:System.Diagnostics.Debug> 클래스 내에서 <xref:System.Windows.Forms.Timer.Tick> 이벤트 예상 대로 동작 하지 않을 수, 어설션 대화 상자를 표시와 상자를 발생 시키는 Windows를 일으킬 수 있습니다는 <xref:System.Windows.Forms.Timer.Tick> 이벤트 반복 해 서 합니다. 이 이벤트에서 어설션을 테스트 하지 않는 사용 하는 것이 좋습니다는 <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, 또는 <xref:System.Diagnostics.Debug.WriteLineIf%2A> 메서드 대신 합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 간단한 간격 타이머를 설정 하는 경보 오프 5 초 마다을 구현 합니다. 경보가 발생 한 <xref:System.Windows.Forms.MessageBox> 경보를 시작 하 고 타이머 계속 실행 되어야 하는지 여부를 묻는 횟수의 수를 표시 합니다.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.Timer" />를 나타내는 문자열을 반환합니다.</summary>
        <returns>현재 <see cref="T:System.Windows.Forms.Timer" />을(를) 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Timer.ToString%2A> 값이 포함 된 문자열을 반환 하는 메서드는 <xref:System.Windows.Forms.Timer.Interval%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>