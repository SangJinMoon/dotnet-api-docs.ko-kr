<Type Name="MaskedTextBox" FullName="System.Windows.Forms.MaskedTextBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="24e38e05d0c7c80d1a179add901f5793853879d8" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
    <Meta Name="ms.locfileid" Value="32089880" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MaskedTextBox : System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MaskedTextBox extends System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MaskedTextBox" />
  <TypeSignature Language="VB.NET" Value="Public Class MaskedTextBox&#xA;Inherits TextBoxBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class MaskedTextBox : System::Windows::Forms::TextBoxBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.TextBoxBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("MaskInputRejected")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Mask")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.MaskedTextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>올바른 사용자 입력과 잘못된 사용자 입력을 구분하기 위해 마스크를 사용합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> 클래스는 향상 된 <xref:System.Windows.Forms.TextBox> 수락 하거나 거부 하는 사용자 입력에 대 한 선언적 구문을 지 원하는 컨트롤입니다. 사용 하 여 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> 속성을 다음 응용 프로그램에 사용자 지정 유효성 검사 논리를 작성 하지 않고 입력을 지정할 수 있습니다.  
  
-   입력된 문자 필요합니다.  
  
-   선택적 입력된 문자  
  
-   / / 마스크;에서 지정된 된 위치에 필요한 입력 형식 예를 들어 숫자 또는 영문자나 영숫자입니다.  
  
-   마스크 리터럴 또는 직접 나타나야 하는 문자는 <xref:System.Windows.Forms.MaskedTextBox>예: 전화 번호 또는 가격의 통화 기호에 하이픈 (-).  
  
-   입력된 문자에 대 한 특수 한 처리 예를 들어 영문자가 대문자로 변환 합니다.  
  
 경우는 <xref:System.Windows.Forms.MaskedTextBox> 컨트롤 런타임 시 표시 되 면 일련의 프롬프트 문자 및 선택적인 리터럴 문자 마스크를 나타냅니다. 필수 또는 선택적 입력을 나타내는 각 편집 가능한 마스크 위치 단일 프롬프트 문자가 표시 됩니다. 예를 들어 숫자 기호 (#)는 종종 숫자 문자 입력에 대 한 자리 표시자로 사용 됩니다. 사용할 수는 <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> 속성을 통해 사용자 지정 프롬프트 문자를 지정 합니다. <xref:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave%2A> 속성 프롬프트 문자를 표시 하는 경우 컨트롤이 잃을 때 입력 포커스를 결정 합니다.  
  
 마스킹된 텍스트 상자에 사용자가 입력을 사용할 수 있는 입력된 문자 해당 각 프롬프트 문자를 순차적으로 대체 합니다. 바뀌지 않고 되지만 경우 경고음은 발생 하는 대신 잘못 된 입력된 문자를 입력 하는 경우는 <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A> 속성이 `true`, 및 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 이벤트가 발생 합니다. 이 이벤트를 처리 하 여 고유의 사용자 지정 오류 논리를 제공할 수 있습니다.  
  
 현재 삽입 지점 리터럴 문자 이면 사용자가 다양 한 옵션:  
  
-   프롬프트 문자가 아닌 문자를 입력 하 고 리터럴 건너뜁니다 자동으로 입력된 문자를 편집 가능한 다음 위치에 적용 됩니다, 하는 경우 다음 프롬프트 문자가으로 나타납니다.  
  
-   프롬프트 문자가 입력 된 경우와 <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> 속성이 true 이면 프롬프트 문자 및 삽입 입력은 겹쳐 쓸 지점 마스크의 다음 위치로 이동 됩니다.  
  
-   경우 처럼 항상, 화살표 키 이전 또는 다음 위치로 이동 하려면 사용할 수 있습니다.  
  
 사용할 수는 <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A> 여부는 사용자가 입력 한 모든 필수 입력을 확인 하는 속성입니다. <xref:System.Windows.Forms.MaskedTextBox.Text%2A> 속성 마스크에 따라 형식을 지정 하는 사용자의 입력 항상 검색 됩니다와 <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> 속성입니다.  
  
 <xref:System.Windows.Forms.MaskedTextBox> 컨트롤은 실제로 모든 마스크 처리가 지연 된 <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> 에서 지정 된 클래스는 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> 속성입니다. 이 표준 공급자 서로게이트가 제외한 모든 유니코드 문자를 지원 하며 세로로 결합 된 문자입니다. 그러나는 <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> 속성을 사용 하 여 문자 집합 a-z, A-Z, 0-9에 대 한 입력 제한할 수 있습니다.  
  
 마스크는 사용자의 입력 없음과 같은 형식이;에 대 한 유효한 값 나타낸다고 반드시 보장 하지 않습니다. 예를 들어 한 나이에 대 한-9는 입력할 수 있었습니다. 사용자의 입력에 해당 값 형식의 인스턴스를 할당 하 여 올바른 값을 나타냄을 확인할 수 있습니다는 <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> 속성입니다. 사용자에서 포커스가 제거 되는지 여부를 감지할 수 <xref:System.Windows.Forms.MaskedTextBox> 모니터링 하 여 잘못 된 값이 포함 된 경우는 <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> 이벤트입니다. 값을 나타내는 개체를 통해 사용할 수 있습니다 유형 유효성 검사에 성공 하면는 <xref:System.Windows.Forms.TypeValidationEventArgs.ReturnValue%2A> 의 속성은 <xref:System.Windows.Forms.TypeValidationEventArgs> 매개 변수입니다.  
  
 과 마찬가지로 <xref:System.Windows.Forms.TextBox> 컨트롤을 몇 가지 일반적인 바로 가기 키에서 작동 하지 않는 <xref:System.Windows.Forms.MaskedTextBox>합니다. 특히, CTRL-R (오른쪽 맞춤 텍스트) CTRL-L (왼쪽 맞춤 텍스트), CTRL 키를 누른 채 L (센터 텍스트) 해도 영향을 미치지 합니다.  
  
## <a name="compatibility-with-visual-basic-60"></a>Visual Basic 6.0와의 호환성  
 <xref:System.Windows.Forms.MaskedTextBox> 대부분의 Visual Basic 6.0에서 마스킹된 편집 컨트롤의 기능을 유지 하도록 설계 되었습니다. 다음 표에서 마스킹된 편집 컨트롤의 공용 속성을 나열 하 고 해당 형식에 제공 <xref:System.Windows.Forms.MaskedTextBox>합니다.  
  
|마스킹된 편집 컨트롤 (Visual Basic 6.0) 속성|해당 MaskedTextBox ([!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]) 속성|  
|-------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------|  
|`AllowPrompt` 속성|<xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>|  
|`AutoTab` 속성|없음|  
|`ClipMode` 속성|<xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>|  
|`ClipText` 속성|<xref:System.Windows.Forms.MaskedTextBox.Text%2A> (때 <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> 로 설정 된 <xref:System.Windows.Forms.MaskFormat.ExcludePromptAndLiterals>)|  
|`Format` 속성|없음|  
|`FormattedText` 속성|<xref:System.Windows.Forms.MaskedTextBox.Text%2A> (때 <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> 로 설정 된 <xref:System.Windows.Forms.MaskFormat.IncludePromptAndLiterals>)|  
|`Mask` 속성|<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>|  
|`PromptChar` 속성|<xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>|  
|`PromptInclude` 속성|<xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>|  
|`ValidationError` 이벤트|<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>|  
  
> [!CAUTION]
>  <xref:System.Windows.Forms.MaskedTextBox> 컨트롤이 여러 줄 구성 또는 실행 취소 기능을 지원 하지 않습니다. 그러나 이러한 기능과 관련 된 멤버는 동안 보존 호환성을 위해는 <xref:System.Windows.Forms.TextBoxBase> 기본 클래스 구현 사항을 아무런 작업도 수행 합니다.  
  
   
  
## Examples  
 다음 코드 예제를 초기화 하는 <xref:System.Windows.Forms.MaskedTextBox> 날짜를 사용 하 여 모두 허용 하도록는 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 및 <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> 하도록 잘못 된 입력에 알리는 이벤트입니다.  
  
 [!code-csharp[MaskInputRejectedSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MaskInputRejectedSample/CS/form1.cs#1)]
 [!code-vb[MaskInputRejectedSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MaskInputRejectedSample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
    <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.MaskedTextBox" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>기본값을 사용하여 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 <xref:System.Windows.Forms.MaskedTextBox.%23ctor> 생성자는 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> 속성을 "<>" 문자열로 표현 된 null 마스크입니다. Null 마스크는 모든 문자 조합을 입력으로 수락 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox (System.ComponentModel.MaskedTextProvider maskedTextProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.MaskedTextProvider maskedTextProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor(System.ComponentModel.MaskedTextProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox(System::ComponentModel::MaskedTextProvider ^ maskedTextProvider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="maskedTextProvider" Type="System.ComponentModel.MaskedTextProvider" />
      </Parameters>
      <Docs>
        <param name="maskedTextProvider">
          <see cref="T:System.ComponentModel.MaskedTextProvider" /> 클래스에서 파생된 사용자 지정 마스크 언어 공급자입니다.</param>
        <summary>지정된 사용자 지정 마스크 언어 공급자를 사용하여 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `maskedTextProvider` 매개 변수 정의에서 사용 하는 마스킹 언어 <xref:System.Windows.Forms.MaskedTextBox>합니다. / / 마스크를 구문 분석 하 고 사용자 입력 마스크 현재 위치에 맞는지 여부를 결정 하는 것이 담당. 새 클래스를 파생 시킬 수 있습니다 <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> 사용자 고유의 사용자 지정 마스킹 언어 정의 및 사용 하는 <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.ComponentModel.MaskedTextProvider%29> 표준 바꾸려면 생성자 <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>합니다.  
  
 기본 마스킹 언어를 사용 하 고 사용자가 직접 입력된 마스크를 제공 하려는 경우이 생성자를 사용할 필요가 없습니다. 사용할 수 있습니다는 대신,는 <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.String%29> 생성자 또는 사용 하 여 기본 생성자가 다음 설정의 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="maskedTextProvider" />가 <see langword="null" />인 경우</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox (string mask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mask As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox(System::String ^ mask);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mask">입력 마스크를 나타내는 <see cref="T:System.String" />입니다. <see cref="P:System.Windows.Forms.MaskedTextBox.Mask" /> 속성의 초기 값입니다.</param>
        <summary>지정된 입력 마스크를 사용하여 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.String%29> 생성자는 표준을 사용 하 여 <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> 입력으로 `mask` 에 대 한 사용자 입력을 구문 분석 하는 <xref:System.Windows.Forms.MaskedTextBox>합니다.  
  
 새 마스크를 할당 하는 경우는 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> 속성을이 생성자에 의해 설정 값을 재정의 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="mask" />가 <see langword="null" />인 경우</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="AcceptsTab">
      <MemberSignature Language="C#" Value="public bool AcceptsTab { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptsTab" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptsTab As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptsTab { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>여러 줄 구성에서 Tab 키가 처리되는 방법을 결정하는 값을 가져오거나 설정합니다. 이 속성은 <see cref="T:System.Windows.Forms.MaskedTextBox" />에서 지원되지 않습니다.</summary>
        <value>
          모든 경우에 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.AcceptsTab%2A> 속성은 기본에서 상속 <xref:System.Windows.Forms.TextBoxBase> 클래스입니다. 그러나 때문에 <xref:System.Windows.Forms.MaskedTextBox> 컨트롤이 여러 줄 구성을 지원 하지 않는,이 속성이 지원 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="AcceptsTabChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AcceptsTabChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AcceptsTabChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AcceptsTabChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AcceptsTabChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" /> 속성 값이 변경되면 발생합니다. 이 이벤트는 <see cref="T:System.Windows.Forms.MaskedTextBox" />에서 발생하지 않습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged> 이벤트 기본에서 상속 된 <xref:System.Windows.Forms.TextBoxBase> 클래스입니다. 그러나 때문에 <xref:System.Windows.Forms.MaskedTextBox> 컨트롤이 여러 줄 구성을 지원 하지 않는,이 이벤트는 지원 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="AllowPromptAsInput">
      <MemberSignature Language="C#" Value="public bool AllowPromptAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowPromptAsInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowPromptAsInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowPromptAsInput { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />을 올바른 데이터로 입력할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          사용자가 컨트롤에 프롬프트 문자를 입력할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우에 <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> 은 `true`를 수락 하려면 프롬프트 문자가 마스크의 현재 위치에 대해 유효 해야 합니다. 예를 들어 경우 <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> 은 "*", 마스크의 현재 위치에서 요구 하는 사용자 입력 \d 별표를 입력 하 고 (\*)는 실패 하 고 발생는 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 이벤트를 발생 합니다.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> 속성 보다 우선 <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="AsciiOnly">
      <MemberSignature Language="C#" Value="public bool AsciiOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsciiOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property AsciiOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AsciiOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.MaskedTextBox" /> 컨트롤이 ASCII 문자 집합 외부의 문자를 받아들이는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          ASCII 문자만 받아들이면 <see langword="true" />이고, <see cref="T:System.Windows.Forms.MaskedTextBox" /> 컨트롤이 임의의 유니코드 문자를 받아들일 수 있으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `true`, <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> 문자 a-z 및 A-z에 사용자 입력을 제한 합니다. : ASCII 제어 문자는 허용 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      </Docs>
    </Member>
    <Member MemberName="BeepOnError">
      <MemberSignature Language="C#" Value="public bool BeepOnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BeepOnError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.BeepOnError" />
      <MemberSignature Language="VB.NET" Value="Public Property BeepOnError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BeepOnError { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>거부되는 각 사용자 키 입력에 대해 마스킹된 텍스트 상자 컨트롤에서 시스템 경고음을 울리는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Forms.MaskedTextBox" /> 컨트롤에서 잘못된 입력에 대해 경고음을 울리면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 경우 이벤트는 계속 발생는 <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A> 속성이 `true`합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      </Docs>
    </Member>
    <Member MemberName="CanUndo">
      <MemberSignature Language="C#" Value="public bool CanUndo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUndo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanUndo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanUndo { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이전 작업을 실행 취소할 수 있는지를 나타내는 값을 가져옵니다. 이 속성은 <see cref="T:System.Windows.Forms.MaskedTextBox" />에서 지원되지 않습니다.</summary>
        <value>
          모든 경우에 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.CanUndo%2A> 속성은 기본에서 상속 <xref:System.Windows.Forms.TextBoxBase> 클래스입니다. 그러나 때문에 <xref:System.Windows.Forms.MaskedTextBox> 하지 지원 실행 취소 기능을 항상이 속성의 값은 `false`합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.Undo" />
      </Docs>
    </Member>
    <Member MemberName="ClearUndo">
      <MemberSignature Language="C#" Value="public void ClearUndo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearUndo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearUndo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearUndo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>텍스트 상자의 실행 취소 버퍼에서 가장 최근 작업에 대한 정보를 삭제합니다. 이 메서드는 <see cref="T:System.Windows.Forms.MaskedTextBox" />에서 지원되지 않습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.ClearUndo%2A> 메서드는 기본에서 상속 된 <xref:System.Windows.Forms.TextBoxBase> 클래스입니다. 그러나 <xref:System.Windows.Forms.MaskedTextBox> 실행 취소 기능을 지원 하지 않습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.Undo" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>컨트롤의 핸들을 만듭니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤 핸들이 만들어지는 경우 필요한 작성 매개 변수를 가져옵니다.</summary>
        <value>컨트롤을 만들 때 필요한 정보를 표시하는 <see cref="T:System.Windows.Forms.CreateParams" />입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.CreateParams" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마스킹된 텍스트 상자와 관련된 문화권 정보를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Globalization.CultureInfo" />에서 지원하는 문화권을 나타내는 <see cref="T:System.Windows.Forms.MaskedTextBox" />입니다.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Windows.Forms.MaskedTextBox.Culture" />가 <see langword="null" />로 설정된 경우</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="CutCopyMaskFormat">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MaskFormat CutCopyMaskFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MaskFormat CutCopyMaskFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property CutCopyMaskFormat As MaskFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MaskFormat CutCopyMaskFormat { System::Windows::Forms::MaskFormat get(); void set(System::Windows::Forms::MaskFormat value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>리터럴 및 프롬프트 문자를 클립보드로 복사할지를 결정하는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Forms.MaskFormat" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A> 속성 결정 내에서 텍스트를 선택 하는 방법을 <xref:System.Windows.Forms.MaskedTextBox> 제어 하 고, 클립보드에 복사 되거나 통해 검색 될 때 해석 되는 <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A> 속성입니다. 특히, 선택한 텍스트에 액세스할 때 리터럴 문자, 프롬프트 문자 중 하나 또는 둘 다 포함 된 지를 확인 합니다. 프롬프트 문자를 제외 하면 복사 된 문자열의 공백은 변환 됩니다.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> 속성 방법과 관련 하 여 비슷한 용도로 사용 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> 속성을 해석 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">속성을 올바르지 않은 <see cref="T:System.Windows.Forms.MaskFormat" /> 값으로 설정했습니다.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ToString" />
      </Docs>
    </Member>
    <Member MemberName="FormatProvider">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatProvider" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatProvider As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatProvider { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식 유효성 검사를 수행할 때 사용할 <see cref="T:System.IFormatProvider" />를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.IFormatProvider" /> 인터페이스를 구현하는 개체</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> 유효성 검사 형식 발생 하 고 컨트롤에 null이 아닌 기호는 통화, 날짜 및 다른 culture 별 마스크 자리 표시자에 대 한 사용 되는지 결정 <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
      </Docs>
    </Member>
    <Member MemberName="GetCharFromPosition">
      <MemberSignature Language="C#" Value="public override char GetCharFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance char GetCharFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetCharFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharFromPosition (pt As Point) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override char GetCharFromPosition(System::Drawing::Point pt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">가장 가까운 문자를 검색할 위치입니다.</param>
        <summary>컨트롤 내의 지정된 위치에서 가장 가까운 문자를 검색합니다.</summary>
        <returns>지정된 위치의 문자입니다.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetCharFromPosition(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetCharIndexFromPosition">
      <MemberSignature Language="C#" Value="public override int GetCharIndexFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharIndexFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharIndexFromPosition (pt As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharIndexFromPosition(System::Drawing::Point pt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">검색할 위치입니다.</param>
        <summary>지정된 위치에 가장 가까운 문자의 인덱스를 검색합니다.</summary>
        <returns>지정된 위치의 0부터 시작하는 문자 인덱스입니다.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetFirstCharIndexFromLine">
      <MemberSignature Language="C#" Value="public int GetFirstCharIndexFromLine (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFirstCharIndexFromLine(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstCharIndexFromLine (lineNumber As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFirstCharIndexFromLine(int lineNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">이 매개 변수는 사용되지 않습니다.</param>
        <summary>지정된 줄에 있는 첫 번째 문자의 인덱스를 검색합니다. 이 메서드는 <see cref="T:System.Windows.Forms.MaskedTextBox" />에서 지원되지 않습니다.</summary>
        <returns>이 메서드는 항상 0을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine%2A> 메서드는 기본에서 상속 된 <xref:System.Windows.Forms.TextBoxBase> 클래스입니다. 그러나 때문에 <xref:System.Windows.Forms.MaskedTextBox> 컨트롤이 여러 줄 구성을 지원 하지 않는,이 메서드가 지원 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetFirstCharIndexOfCurrentLine">
      <MemberSignature Language="C#" Value="public int GetFirstCharIndexOfCurrentLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFirstCharIndexOfCurrentLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstCharIndexOfCurrentLine () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFirstCharIndexOfCurrentLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 줄에서 첫 번째 문자의 인덱스를 검색합니다. 이 메서드는 <see cref="T:System.Windows.Forms.MaskedTextBox" />에서 지원되지 않습니다.</summary>
        <returns>이 메서드는 항상 0을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine%2A> 메서드는 기본에서 상속 된 <xref:System.Windows.Forms.TextBoxBase> 클래스입니다. 그러나 때문에 <xref:System.Windows.Forms.MaskedTextBox> 컨트롤이 여러 줄 구성을 지원 하지 않는,이 메서드가 지원 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetLineFromCharIndex">
      <MemberSignature Language="C#" Value="public override int GetLineFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetLineFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLineFromCharIndex (index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetLineFromCharIndex(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">이 매개 변수는 사용되지 않습니다.</param>
        <summary>컨트롤의 텍스트 내에서 지정된 문자 위치의 줄 번호를 검색합니다. 이 메서드는 <see cref="T:System.Windows.Forms.MaskedTextBox" />에서 지원되지 않습니다.</summary>
        <returns>이 메서드는 항상 0을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex%2A> 메서드는 기본에서 상속 된 <xref:System.Windows.Forms.TextBoxBase> 클래스입니다. 그러나 때문에 <xref:System.Windows.Forms.MaskedTextBox> 컨트롤이 여러 줄 구성을 지원 하지 않는,이 메서드가 지원 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionFromCharIndex">
      <MemberSignature Language="C#" Value="public override System.Drawing.Point GetPositionFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Drawing.Point GetPositionFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPositionFromCharIndex (index As Integer) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Drawing::Point GetPositionFromCharIndex(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">위치를 검색할 문자의 인덱스입니다.</param>
        <summary>컨트롤 내에서 지정된 문자 인덱스의 위치를 검색합니다.</summary>
        <returns>컨트롤의 클라이언트 영역 내에서 지정된 문자의 위치입니다.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HidePromptOnLeave">
      <MemberSignature Language="C#" Value="public bool HidePromptOnLeave { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HidePromptOnLeave" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      <MemberSignature Language="VB.NET" Value="Public Property HidePromptOnLeave As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HidePromptOnLeave { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마스킹된 텍스트 상자가 포커스를 잃으면 입력 마스크의 프롬프트 문자가 숨겨지는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />에 포커스가 없을 때 <see cref="T:System.Windows.Forms.MaskedTextBox" />가 숨겨지면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="InsertKeyMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.InsertKeyMode InsertKeyMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.InsertKeyMode InsertKeyMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertKeyMode As InsertKeyMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::InsertKeyMode InsertKeyMode { System::Windows::Forms::InsertKeyMode get(); void set(System::Windows::Forms::InsertKeyMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InsertKeyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마스킹된 텍스트 상자 컨트롤의 텍스트 삽입 모드를 가져오거나 설정합니다.</summary>
        <value>현재 삽입 모드를 나타내는 <see cref="T:System.Windows.Forms.InsertKeyMode" /> 값입니다. 기본값은 <see cref="F:System.Windows.Forms.InsertKeyMode.Default" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> 문자 삽입 동작을 제어 하는 속성은 <xref:System.Windows.Forms.MaskedTextBox> 제어 합니다. 이 속성의 상태가 정의한는 <xref:System.Windows.Forms.InsertKeyMode> 항상 열거형 될 수 있는 always on, off 또는 사용자의 키보드 설정을 준수 하도록 설정 합니다. 이 속성의 키보드 삽입 모드에 우선 합니다. 예를 들어, 키보드 덮어쓰기로 설정 되어 있지만 <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> 로 설정 되어 `Insert`, <xref:System.Windows.Forms.MaskedTextBox> 삽입 모드에서 작동 합니다. <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> 속성의 실제 삽입 모드에 액세스할는 <xref:System.Windows.Forms.MaskedTextBox>합니다.  
  
 변경 하는 경우 <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> 의 값이 변경 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>, <xref:System.Windows.Forms.MaskedTextBox> 시킵니다는 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> 이벤트입니다.  
  
 없는 마스크 설정 된 경우 효과가 없습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">이 속성을 설정할 때 잘못된 <see cref="T:System.Windows.Forms.InsertKeyMode" /> 값을 제공한 경우</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">
          <see cref="T:System.Windows.Forms.Keys" /> 값 중 하나입니다.</param>
        <summary>지정된 키가 입력 키인지 또는 전처리가 필요한 특수 키인지를 확인합니다.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOverwriteMode">
      <MemberSignature Language="C#" Value="public bool IsOverwriteMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOverwriteMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOverwriteMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOverwriteMode { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>새 사용자 입력이 기존 입력을 덮어쓰는지를 지정하는 값을 가져옵니다.</summary>
        <value>
          사용자가 새 문자를 입력할 때 <see cref="T:System.Windows.Forms.MaskedTextBox" />가 기존 문자를 덮어쓰면 <see langword="true" />이고, <see cref="T:System.Windows.Forms.MaskedTextBox" />가 기존 문자를 앞으로 옮기면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> 값을 고려는 <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> 속성 및 사용자의 키보드의 상태입니다. 경우 <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> 로 설정 된 <xref:System.Windows.Forms.InsertKeyMode.Insert> 또는 <xref:System.Windows.Forms.InsertKeyMode.Overwrite>, <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> 돌아갑니다 `false` 또는 `true`각각. 경우 <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> 로 설정 된 <xref:System.Windows.Forms.InsertKeyMode.Default>, INSERT 키의 상태를 반환 합니다.  
  
 때 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> 은 `false`, <xref:System.Windows.Forms.MaskedTextBox> 마스크의 아무 곳 이나 위반이 발생 하는 모든 문자 항목이 잘못 된 것으로 거부 합니다. 에서 문자 위치 됩니다 유효 마스크 위치로 이동할 수를 발생 시킬 문자를 삽입 합니다. 문자 삽입 거부 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="IsOverwriteModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler IsOverwriteModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler IsOverwriteModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsOverwriteModeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ IsOverwriteModeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>삽입 모드가 변경된 후 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> 값 후에 이벤트가 발생는 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> 속성을 변경 합니다.  
  
 이 이벤트는 데이터를 바인딩하는 제대로 해야는 <xref:System.Windows.Forms.MaskedTextBox> 제어 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.MaskedTextBox> 라는 `MaskedTextBox1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#484](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#484)]
 [!code-vb[System.Windows.Forms.EventExamples#484](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#484)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Lines">
      <MemberSignature Language="C#" Value="public string[] Lines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Lines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Lines" />
      <MemberSignature Language="VB.NET" Value="Public Property Lines As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Lines { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>여러 줄 구성에서 텍스트 줄을 가져오거나 설정합니다. 이 속성은 <see cref="T:System.Windows.Forms.MaskedTextBox" />에서 지원되지 않습니다.</summary>
        <value>한 줄이 들어 있는 <see cref="T:System.String" /> 형식의 배열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Lines%2A> 속성은 기본에서 상속 <xref:System.Windows.Forms.TextBoxBase> 클래스입니다. 그러나 때문에 <xref:System.Windows.Forms.MaskedTextBox> 컨트롤이 여러 줄 구성을 지원 하지 않는,이 속성이 지원 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="Mask">
      <MemberSignature Language="C#" Value="public string Mask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Mask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Mask" />
      <MemberSignature Language="VB.NET" Value="Public Property Mask As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Mask { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskPropertyEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>런타임에 사용할 입력 마스크를 가져오거나 설정합니다.</summary>
        <value>현재 마스크를 나타내는 <see cref="T:System.String" />입니다. 기본값은 모든 입력을 허용하는 빈 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> 기본 속성에 대 한는 <xref:System.Windows.Forms.MaskedTextBox> 클래스입니다.  
  
 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> 문자열로 구성 되어야 하나 이상의 마스킹 요소는 다음 표에 나와 있는 것 처럼 합니다. 사용 하는 마스킹 언어 <xref:System.Windows.Forms.MaskedTextBox> 정의 연결 하 여 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>합니다. 표준 공급자 기반 Visual Basic 6.0에서 마스킹된 편집 컨트롤에서 사용 하는 마스킹 언어를 지정 하 고 해당 플랫폼에서 마이그레이션하는 사용자에 게 친숙 하 게 나타내야 합니다.  
  
|요소를 마스킹|설명|  
|---------------------|-----------------|  
|0|자 여야 합니다. 이 요소는 0에서 9 사이의 임의의 단일 숫자를 수락 합니다.|  
|10|숫자 또는 공간을 선택 합니다.|  
|#|숫자 또는 공간을 선택 합니다. 렌더링에서 공백으로 됩니다이 위치는 마스크에서 빈 경우는 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> 속성입니다. 더하기 (+) 및 빼기 (-) 기호를 사용할 수 있습니다.|  
|L|문자 이며 필수입니다. ASCII 문자 a ~ z 및 A-Z에 대 한 입력을 제한합니다. 이 마스크 요소 [zA-A-z]에 해당 하는 정규식에서입니다.|  
|?|선택적 문자입니다. ASCII 문자 a ~ z 및 A-Z에 대 한 입력을 제한합니다. 이 마스크 요소 [zA-A-z] 하는 것과 같습니다. 정규식에서.|  
|&|문자 필요 합니다. 경우는 <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> 속성이 true 이면이 요소 처럼 동작 "L" 요소입니다.|  
|C|선택적 문자입니다. 모든 컨트롤이 아닌 문자. 경우는 <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> 속성이 `true`, 처럼 작동 하며이 요소는 "?" 요소입니다.|  
|A|영숫자이 고, 필요 합니다. 경우는 <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> 속성이 `true`, 수락할 유일한 문자는 ASCII 문자 a ~ z 및 A-Z. 이 마스크 요소는 "a" 요소 처럼 동작 합니다.|  
|a|영숫자이 고, 선택 사항입니다. 경우는 <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> 속성이 `true`, 수락할 유일한 문자는 ASCII 문자 a ~ z 및 A-Z. 이 마스크 요소는 "A" 요소 처럼 동작 합니다.|  
|입니다.|10 진수 자리 표시자입니다. 컨트롤의 기준으로 사용 되는 실제 표시 문자 형식 공급자에 적합 한 소수점 기호 됩니다 <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> 속성입니다.|  
|,|천 단위 자리 표시자입니다. 사용 되는 실제 표시 문자 1000 됩니다 자리 표시자 컨트롤의 기준으로 형식 공급자에 적합 한 <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> 속성입니다.|  
|:|시간 구분 기호입니다. 컨트롤의 기준으로 사용 되는 실제 표시 문자 형식 공급자에 적합 한 시간 기호가 됩니다 <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> 속성입니다.|  
|/|날짜 구분 기호입니다. 컨트롤의 기준으로 사용 되는 실제 표시 문자 형식 공급자에 적합 한 날짜 기호가 됩니다 <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> 속성입니다.|  
|$|통화 기호입니다. 컨트롤의 기준으로 표시 되는 실제 문자 형식 공급자에 적합 한 통화 기호가 됩니다 <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> 속성입니다.|  
|\<|이동 합니다. 모든 뒤에 있는 문자를 소문자로 변환 합니다.|  
|>|위로 이동 합니다. 모든 뒤에 있는 문자를 대문자로 변환 합니다.|  
|&#124;|이전 shift를 사용 하지 않도록 설정 하거나 아래쪽으로 이동 합니다.|  
|\|이스케이프 처리 합니다. 클래스는 리터럴으로 변환 마스크 문자를 이스케이프 합니다. "\\\\" 백슬래시 이스케이프 시퀀스입니다.|  
|다른 모든 문자|리터럴입니다. 모든 비 마스크 요소가 내에 그대로 표시 되는 <xref:System.Windows.Forms.MaskedTextBox>합니다. 리터럴 항상 실행 시 마스크에 정적 위치를 차지 하 고 이동 하거나 삭제할 수 사용자가 합니다.|  
  
 마스크를 변경 하면 때 <xref:System.Windows.Forms.MaskedTextBox> 이미 이전 마스크에 의해 필터링 하는 사용자 입력이 포함 된 <xref:System.Windows.Forms.MaskedTextBox> 마이그레이션 새 마스크 정의에 해당 입력 하려고 합니다. 실패 한 경우 기존 입력을 지워집니다. / / 마스크와 길이가 0 인 문자열을 할당 컨트롤의 기존 데이터가 유지 됩니다. 길이가 0 인 마스크와 함께 사용할 경우 <xref:System.Windows.Forms.MaskedTextBox> 줄의 처럼 동작 <xref:System.Windows.Forms.TextBox> 제어 합니다.  
  
 소수점 (.), 1/1000 (,), (:) 시간, 날짜 (/) 및 ($) 통화 기호 기본 응용 프로그램의 culture에 정의 된 대로 해당 기호를 표시 하도록 합니다. 다른 문화권에 대 한 기호를 사용 하 여 표시 되도록 할 수 있습니다는 <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> 속성입니다.  
  
 런타임 시 마스크에 문자 삽입에 의해 제어 됩니다는 <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> 속성입니다. 사용자가 왼쪽 및 오른쪽 화살표 키 또는 마우스 커서를 사용 하 여 마스크 탐색할 수 있습니다 및 공백을 입력 하 여 마스크의 선택적 위치를 건너뛸 수 있습니다.  
  
> [!IMPORTANT]
>  <xref:System.Windows.Forms.MaskedTextBox> 세로로 결합 된 문자와 서로게이트를 제외한 모든 유니코드 문자를 지원합니다.  
  
 다음 표에서 예제 마스크를 보여 줍니다.  
  
|마스크|동작|  
|----------|--------------|  
|`00/00/0000`|날짜 (day, 숫자 월, 년) 국가별 날짜 형식입니다. "/" 문자는 논리 날짜 구분 기호 이며 응용 프로그램의 현재 문화권에 적합 한 날짜 구분 기호로 사용자에 게 표시 됩니다.|  
|`00->L<LL-0000`|날짜 (예: 일, 월의 약어 및 연도) 미국 형식 뒤에 두 문자는 소문자 초기 대문자로 표시 되는 세 자리 월의 약어입니다.|  
|`(999)-000-0000`|미국 전화 번호, 지역 번호 선택 사항입니다. 사용자는 필요에 따라 문자를 입력 하지 않으려는, 공백을 입력 또는 마우스 포인터를 첫 번째 0이 나타나는 마스크의 위치에 직접 수 있습니다.|  
|`$999,999.00`|범위 0-999999에에서 통화 값입니다. 통화, 1/1000, 및 10 진수 문자 바뀝니다 런타임 시 문화권별 상응 합니다.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Windows.Forms.MaskedTextBox.Mask" /> 속성에 제공된 문자열이 올바른 마스크가 아닌 경우. 잘못된 마스크에는 인쇄할 수 없는 문자가 들어 있는 마스크가 포함됩니다.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="MaskChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MaskChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MaskChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MaskChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MaskChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>입력 마스크가 변경된 후 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskChanged> 값 후에 이벤트가 발생는 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> 속성을 변경 합니다. 경우에이 이벤트는 발생 된 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> 은 간접적으로 변경 된 구성원이 같은 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>, <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>, 및 <xref:System.Windows.Forms.MaskedTextBox.Culture%2A>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.MaskedTextBox.MaskChanged> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.MaskedTextBox> 라는 `MaskedTextBox1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.MaskedTextBox.MaskChanged> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#485](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#485)]
 [!code-vb[System.Windows.Forms.EventExamples#485](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#485)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="MaskCompleted">
      <MemberSignature Language="C#" Value="public bool MaskCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaskCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>입력 마스크에 모든 필수 입력 사항이 입력되었는지를 나타내는 값을 가져옵니다.</summary>
        <value>
          모든 필수 입력이 마스크에 입력되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> 필수 입력된 요소만 확인합니다. 모든 필수 및 선택적 입력된 요소 채워졌는지 여부를 확인 하려면는 <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A> 속성 대신 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      </Docs>
    </Member>
    <Member MemberName="MaskedTextProvider">
      <MemberSignature Language="C#" Value="public System.ComponentModel.MaskedTextProvider MaskedTextProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.MaskedTextProvider MaskedTextProvider" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskedTextProvider As MaskedTextProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::MaskedTextProvider ^ MaskedTextProvider { System::ComponentModel::MaskedTextProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.MaskedTextProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마스킹된 텍스트 상자 컨트롤의 이 인스턴스와 관련된 마스크 공급자의 복제본을 가져옵니다.</summary>
        <value>
          <see cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" /> 형식의 마스킹 언어 공급자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> 마스크 구문 분석 엔진과 마스킹 언어에서 사용 하는 속성 정의 <xref:System.Windows.Forms.MaskedTextBox> 제어 합니다. 하지만 기본 공급자는 <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> 클래스; 사용 하 여 사용자 지정 공급자 수 지정는 <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.ComponentModel.MaskedTextProvider%29> 생성자입니다.  
  
 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> 직접 설정할 수 없습니다. 그러나 속성 중 일부를 설정 <xref:System.Windows.Forms.MaskedTextBox>-와 같은 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>, <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>, 및 <xref:System.Windows.Forms.MaskedTextBox.Culture%2A>-가 새로 생성 내부적으로 않을 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
      </Docs>
    </Member>
    <Member MemberName="MaskFull">
      <MemberSignature Language="C#" Value="public bool MaskFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskFull" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskFull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaskFull { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>입력 마스크에 모든 필수 및 선택적 입력 사항이 입력되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          모든 필수 입력과 선택적 입력이 입력되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 수 있습니다는 <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A> 내의 속성에서 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 경우 사용자 입력을 확인 하려면 이벤트 처리기는 남아 있는 입력 마스크에 있기 때문에 거부 되었습니다. 필수 입력된 요소에만 입력 되었는지 여부를 확인 하려면는 <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 핸들의 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 이벤트를 사용 하 여 한 <xref:System.Windows.Forms.ToolTip> 마스크의 위치가 사용 될 모든 데이터를 입력 하려고 시도 하는 경우 사용자에 게 알리도록 하려면.  
  
 [!code-csharp[MaskInputRejectedSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MaskInputRejectedSample/CS/form1.cs#1)]
 [!code-vb[MaskInputRejectedSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MaskInputRejectedSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="MaskInputRejected">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MaskInputRejectedEventHandler MaskInputRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MaskInputRejectedEventHandler MaskInputRejected" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MaskInputRejected As MaskInputRejectedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MaskInputRejectedEventHandler ^ MaskInputRejected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskInputRejectedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자 입력 또는 할당된 문자가 입력 마스크의 해당 서식 요소와 일치하지 않으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 에 대 한 기본 이벤트는 <xref:System.Windows.Forms.MaskedTextBox> 클래스입니다.  
  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 이벤트 입력된 마스크에서 문자를 거부할 때 발생 합니다. 가 나타내는 입력된 마스크는 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> 속성을 통해 컨트롤과 연결 된 마스킹된 텍스트 공급자에 의해 해석 되는 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> 속성입니다. <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 다음과 같은 경우에 발생 합니다.  
  
-   입력된 문자에 해당 서식 요소를 일치 하지 않습니다. 예를 들어 사용자가 숫자 필요할 때 알파벳 문자를 입력 합니다. 이 이벤트는 발생 하는 이유는 가장 일반적인 이유 때문일 수 있습니다.  
  
-   사용자가 마스크의 끝을 넘어 추가로 문자를 입력 하려는 때문에 / / 마스크 이미 채워진 또는 현재 캐럿 위치에서 표시 된 입력된 마스크 문자열의 맨 끝으로 이동 되었습니다.  
  
-   붙여넣기 작업의 연결 된 형식 요소와 일치 하지 않는 문자를 삽입 하거나 또는 경우에는 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> 속성은 `false`, 기존 문자 해당 서식 요소 일치 하지 않습니다 새 위치로 이동 합니다.  
  
-   잘라내기 작업은 기존 문자를 왼쪽으로 이동 하 고 하나 이상의 문자 새로 연결 된 서식 요소와 일치 하지 않습니다.  
  
-   에 할당 했습니다는 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> 속성 및 할당된 된 문자열에는 하나 이상의 마스크 위반 발생 했습니다.  
  
 문자열을 발생 시키는 컨트롤에 할당 된 경우 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 가 발생 하는 문자열의 어떠한 부분도에 나타납니다 <xref:System.Windows.Forms.MaskedTextBox>합니다.  
  
 에 대 한 처리 하는 기본 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 사운드 경우에는 경고음을 재생 됩니다는 <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A> 속성이 `true`합니다. 이 이벤트는 사용자 지정 오류 처리를 구현, / / 마스크 꽉 차면 다음 사용자 입력된 컨트롤을 이동 또는 입력된 문자가 유효 하지 않을 경우 사용자 지정 오류 대화 상자 또는 도구 설명을 표시 하려면 대개 처리 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.MaskedTextBox> 라는 `MaskedTextBox1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#486](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#486)]
 [!code-vb[System.Windows.Forms.EventExamples#486](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#486)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="T:System.Windows.Forms.MaskInputRejectedEventArgs" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.BeepOnError" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public override int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>TextBox 컨트롤에 입력하거나 붙여넣을 수 있는 최대 문자 수를 가져오거나 설정합니다. 이 속성은 <see cref="T:System.Windows.Forms.MaskedTextBox" />에서 지원되지 않습니다.</summary>
        <value>이 속성은 항상 0을 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 참조는 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> 속성 및 <xref:System.Windows.Forms.MaskInputRejectedEventArgs.Position%2A> 속성에는 <xref:System.Windows.Forms.MaskInputRejectedEventArgs> 에 문자열의 최대 길이 확인 하는 방법에 대 한 정보에 대 한 클래스는 <xref:System.Windows.Forms.MaskedTextBox>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskInputRejectedEventArgs.Position" />
      </Docs>
    </Member>
    <Member MemberName="Multiline">
      <MemberSignature Language="C#" Value="public override bool Multiline { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Multiline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Multiline { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 컨트롤이 여러 줄을 입력할 수 있는 TextBox 컨트롤인지를 나타내는 값을 가져오거나 설정합니다. 이 속성은 <see cref="T:System.Windows.Forms.MaskedTextBox" />에서 완벽하게 지원되지 않습니다.</summary>
        <value>이 속성은 항상 <see langword="false" />를 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.AcceptsTab%2A> 속성은 기본에서 상속 <xref:System.Windows.Forms.TextBoxBase> 클래스입니다. 그러나 때문에 <xref:System.Windows.Forms.MaskedTextBox> 컨트롤이 여러 줄 구성을 지원 하지 않는,이 속성은 완벽 하 게 지원 하지 않으면 설정할 수 없습니다 및으로 항상 확인 `false`합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="MultilineChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MultilineChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MultilineChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MultilineChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MultilineChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>일반적으로 <see cref="P:System.Windows.Forms.MaskedTextBox.Multiline" /> 속성 값이 변경되면 발생합니다. 그러나 이 이벤트는 <see cref="T:System.Windows.Forms.MaskedTextBox" />에서 발생하지 않습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MultilineChanged> 이벤트 기본에서 상속 된 <xref:System.Windows.Forms.TextBoxBase> 클래스입니다. 그러나 때문에 <xref:System.Windows.Forms.MaskedTextBox> 컨트롤이 여러 줄 구성을 지원 하지 않는,이 이벤트에서 구현 되지 않은 <xref:System.Windows.Forms.MaskedTextBox>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackColorChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="P:System.Windows.Forms.Control.BackColor" /> 속성 값이 변경되면 발생합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.HandleCreated" /> 이벤트를 발생시킵니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsOverwriteModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsOverwriteModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsOverwriteModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsOverwriteModeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsOverwriteModeChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.KeyEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.KeyDown" /> 이벤트를 발생시킵니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyPress (e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.KeyPressEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.KeyPress" /> 이벤트를 발생시킵니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.KeyEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.KeyUp" /> 이벤트를 발생시킵니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMaskChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMaskChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMaskChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMaskChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMaskChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.MaskedTextBox.OnMaskChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnMultilineChanged">
      <MemberSignature Language="C#" Value="protected override void OnMultilineChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMultilineChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMultilineChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMultilineChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>일반적으로 <see cref="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" /> 이벤트를 발생시키지만 <see cref="T:System.Windows.Forms.MaskedTextBox" />에 대해 비활성화되어 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.OnMultilineChanged%2A> 메서드는 기본에서 상속 된 <xref:System.Windows.Forms.TextBoxBase> 클래스입니다. 그러나 때문에 <xref:System.Windows.Forms.MaskedTextBox> 컨트롤이 여러 줄 구성을 지원 하지 않는, 아무런 작업도 수행 하려면이 메서드를 재정의 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextAlignChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextAlignChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextAlignChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextAlignChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextAlignChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected override void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.TextChanged" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.MaskedTextBox.OnTextChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.Control.TextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected override void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnValidating (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnValidating(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.ComponentModel.CancelEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Validating" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.OnValidating%2A> 메서드를 사용 하면 입력된 문자열의 유효성을 검사 하는 <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> 속성을 하는 경우는 <xref:System.Type> 이 속성에 지정 되었습니다. 또한 발생 한 다음는 <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> 이벤트입니다.  
  
> [!NOTE]
>  텍스트 기반 컨트롤과 일관성을 유지 하려면 유효성 검사를 실시할 경우에는 <xref:System.Windows.Forms.MaskedTextBox> 읽기 전용입니다 (해당 <xref:System.Windows.Forms.MaskedTextBox.ReadOnly%2A> 속성이 `true`).  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.MaskedTextBox.OnValidating%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">입력 문자열을 구문 분석하는 동안 치명적인 예외가 발생한 경우</exception>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="PasswordChar">
      <MemberSignature Language="C#" Value="public char PasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PasswordChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PasswordChar { char get(); void set(char value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('\0')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자 입력 대신 표시되는 문자를 가져오거나 설정합니다.</summary>
        <value>암호 문자로 사용되는 <see cref="T:System.Char" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 중요 한 사용자 입력에 대 한 것이 일반적을 사용자가 입력 한 실제 정보를 숨깁니다. 경우는 <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> 속성을 설정 하는 null이 아닌 문자로, <xref:System.Windows.Forms.MaskedTextBox> 컨트롤에 대 한 모든 입력에 대 한이 문자를 표시 합니다. 이 속성을 설정 `null` 이 기능이 사용 되지 것입니다.  
  
 COMCTL32.dll를 사용 하 여에 정의 된 운영 체제에서 제공한 암호 문자를 사용 하려는 경우는 <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> 속성 대신 합니다. 모두는 <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> 및 <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> 속성 활성화 된 경우 두 번째 우선 합니다.  
  
> [!IMPORTANT]
>  보안 고려 사항으로는 <xref:System.Windows.Forms.MaskedTextBox> 컨트롤 암호로 보호 된 문자열에 대 한 잘라내기 및 복사 작업을 사용 하지 않도록 설정 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">이 속성을 설정할 때 지정된 문자가 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 클래스의 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 메서드에서 확인해 주는 올바른 암호 문자가 아닌 경우</exception>
        <exception cref="T:System.InvalidOperationException">지정된 암호 문자가 현재 프롬프트 문자 <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />와 같은 경우. 둘은 달라야 합니다.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg">처리할 창 메시지를 나타내며 참조에 의해 전달되는 <see cref="T:System.Windows.Forms.Message" />입니다.</param>
        <param name="keyData">처리할 바로 가기 키를 나타내는 <see cref="T:System.Windows.Forms.Keys" /> 값 중 하나입니다.</param>
        <summary>명령 키를 처리합니다.</summary>
        <returns>
          컨트롤이 명령 키를 처리하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyMessage">
      <MemberSignature Language="C#" Value="protected internal override bool ProcessKeyMessage (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool ProcessKeyMessage(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ProcessKeyMessage (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool ProcessKeyMessage(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">처리할 창 메시지를 나타내며 참조에 의해 전달되는 <see cref="T:System.Windows.Forms.Message" />입니다.</param>
        <summary>입력 언어 변경 내용을 처리하도록 이 메서드의 기본 구현을 재정의합니다.</summary>
        <returns>
          컨트롤이 메시지를 처리하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> 해당 기본 컨트롤의 구현을 재정의 <xref:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage%2A> 사용자 문자를 입력할 때 문자 이벤트를 올바르게 처리 하려면 일본어, 중국어 및 기타 복잡 한 비 라틴 스크립트 입력에 사용 되는 Ime (입력기)를 사용 하 여과 같은 합니다. <xref:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage%2A> WM_IME_CHAR 메시지를 수신 하 고 이러한 문자는 컨트롤에 표시 되지 않도록 하기 위해이 표시 되지 않습니다 후 발생 하는 WM_CHAR 메시지를 검색 합니다. 이 컨트롤에서 파생 하 고이 메시지를 재정의 하는 경우 새 컨트롤 Ime와 작동 하도록 하려는 경우이 동작을 복제 해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PromptChar">
      <MemberSignature Language="C#" Value="public char PromptChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PromptChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PromptChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PromptChar { char get(); void set(char value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('_')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.MaskedTextBox" />에 사용자 입력이 없음을 나타내는 데 사용되는 문자를 가져오거나 설정합니다.</summary>
        <value>사용자에게 입력하라고 요청하는 데 사용되는 문자입니다. 기본값은 밑줄(_)입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> 에 표시 되도록 <xref:System.Windows.Forms.MaskedTextBox> 에 사용자가 아직 입력 하지 않은 모든 마스크 위치에 대 한 합니다.  
  
 사용 하 여는 <xref:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave%2A> 프롬프트 표시 되는지 여부를 지정 하려면 속성 때 <xref:System.Windows.Forms.MaskedTextBox> 포커스가 없는 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">이 속성을 설정할 때 지정된 문자가 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 클래스의 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 메서드에서 확인해 주는 올바른 프롬프트 문자가 아닌 경우</exception>
        <exception cref="T:System.InvalidOperationException">지정된 프롬프트 문자가 현재 암호 문자 <see cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />와 같은 경우. 둘은 달라야 합니다.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>텍스트 상자의 텍스트가 읽기 전용인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          텍스트가 읽기 전용임을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectInputOnFirstFailure">
      <MemberSignature Language="C#" Value="public bool RejectInputOnFirstFailure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RejectInputOnFirstFailure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
      <MemberSignature Language="VB.NET" Value="Public Property RejectInputOnFirstFailure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RejectInputOnFirstFailure { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>첫 번째 잘못된 문자에 도달하면 사용자 입력의 구문 분석을 중지해야 하는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          첫 번째 구문 분석 오류에서 입력 문자열 처리를 종료하면 <see langword="true" />이고, 모든 오류를 무시하고 처리하면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자가으로 여러 문자를 입력할 경우에 따라 한 <xref:System.Windows.Forms.MaskedTextBox> 문자열로 복사 하 여 일반적으로 단일 입력 작업에서 합니다. 전체 문자열 붙여넣기 위치 입력된 마스크에 따라 올바른 문자만 포함 하는 경우 전체 작업이 성공 합니다. 그러나 구문 분석 오류가 발생의 동작 <xref:System.Windows.Forms.MaskedTextBox> 의 값에 따라 <xref:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure%2A>다음과 같이 합니다.  
  
-   이 속성이 `true`, 잘못 된 문자에서 입력된 문자열의 다음 처리가 중지 합니다. 모든 후속 문자는 무시 됩니다. 단일 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 이벤트가 발생 합니다.  
  
-   이 속성이 `false`, 잘못 된 문자는 거부 다음 되지만 입력된 문자열의 다음 문자가 구문 분석이 계속 합니다. A <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 이벤트는 입력된 문자열에서 모든 잘못 된 문자에 대해 발생 합니다.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>, <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A> 및 <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> 속성 수의 사용자 입력 해석에 영향을 줄 수도 있습니다.  
  
 경우는 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> 속성은 `false`, 다음 삽입 지점의 오른쪽에 입력된 마스크에 이미 있는 문자가 허용 되는 문자 수에 의해 치환 수 됩니다. 이 변화 하는 추가 구문 분석 오류가 발생할 수 있습니다.  
  
 붙여넣기 작업을 설정 하 여 프로그래밍 방식으로 모방할 수는 <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnPrompt">
      <MemberSignature Language="C#" Value="public bool ResetOnPrompt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnPrompt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetOnPrompt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ResetOnPrompt { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>프롬프트 문자와 일치하는 입력 문자가 처리되는 방법을 결정하는 값을 가져오거나 설정합니다.</summary>
        <value>
          입력 문자로 입력된 프롬프트 문자 때문에 마스크의 현재 편집 가능한 위치가 다시 설정되면 <see langword="true" />이고, 프롬프트 문자가 일반 입력 문자로 처리됨을 나타내면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> 두 가지 범주의 문자를 처리할 수-공간 및 프롬프트 문자-특별 하 게 합니다. / / 마스크 및 중 하나에 대해 각 입력된 문자는 테스트 하는 일반적으로 승인 또는 거부 합니다. 있다고 가정할 경우는 <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> 속성이 설정 되어 이외`null`, 다음 설정의 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> 속성을 `true` 프롬프트 문자에 대 한 특수 한 처리 됩니다. / / 마스크에 프롬프트 문자를 입력할 때 삭제 된 현재 마스크 문자 위치와 현재 위치가 다음 편집 가능한 문자 하면 합니다.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> 우선는 <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> 속성을 다음 표와 같이 합니다.  
  
|ResetOnPrompt 값|AllowPromptAsInput 값|결과 동작|  
|-------------------------|------------------------------|------------------------|  
|`true`|`true`|프롬프트 문자를 입력할 수 있으며 다시 설정 될 현재 마스크 위치가 있습니다. 이 값이 기본값입니다.|  
|`true`|`false`|프롬프트 문자를 입력할 수 있으며 다시 설정 될 현재 마스크 위치가 있습니다.|  
|`false`|`true`|프롬프트 문자가 표준 입력 문자로 처리 됩니다.|  
|`false`|`false`|프롬프트 문자가 잘못 되었으며 발생 한 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 이벤트입니다.|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnSpace">
      <MemberSignature Language="C#" Value="public bool ResetOnSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnSpace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetOnSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ResetOnSpace { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>공백 입력 문자가 처리되는 방법을 결정하는 값을 가져오거나 설정합니다.</summary>
        <value>
          공백 입력 문자 때문에 마스크의 현재 편집 가능한 위치가 다시 설정되면 <see langword="true" />이고, 공백 입력 문자가 일반 입력 문자로 처리됨을 나타내면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> 두 가지 범주의 문자를 처리할 수-공간 및 프롬프트 문자-특별 하 게 합니다. / / 마스크 및 중 하나에 대해 각 입력된 문자는 테스트 하는 일반적으로 승인 또는 거부 합니다. 설정의 <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A> 속성을 `true` 지울 현재 마스크 문자 위치 및 편집 가능한 다음 문자에 대 한 고급 수를 현재 위치에서 발생 합니다.  
  
 마스킹 엔진 마스크의 다음 문자를 앞으로 이동 현재 위치에 유지 되며, 일치 하는 문자에 대 한 대기 문자는 입력의 유형 결정 됩니다. 입력된 문자가 공백, 고 마스크에 현재 편집할 수 없는 문자는 일치 하지 않습니다 마스킹 엔진이 / / 마스크의 다음 문자가으로 바로 이동 합니다. 입력된 문자가 공백, 고 마스크에 현재 편집할 수 없는 문자는 일치 하지 않습니다, 마스킹 엔진이 현재 마스크 위치에 유지 되 고 그 다음 입력된 문자를 일치 시키는 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="ScrollToCaret">
      <MemberSignature Language="C#" Value="public void ScrollToCaret ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollToCaret() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ScrollToCaret" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollToCaret ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollToCaret();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>컨트롤의 내용을 현재 캐럿 위치까지 스크롤합니다. 이 메서드는 <see cref="T:System.Windows.Forms.MaskedTextBox" />에서 지원되지 않습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.ScrollToCaret%2A> 메서드는 기본에서 상속 된 <xref:System.Windows.Forms.TextBoxBase> 클래스입니다. 그러나 때문에 <xref:System.Windows.Forms.MaskedTextBox> 컨트롤이 여러 줄 구성을 지원 하지 않는, 아무런 작업도 수행 하려면이 메서드를 재정의 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="SelectedText">
      <MemberSignature Language="C#" Value="public override string SelectedText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SelectedText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.MaskedTextBox" /> 컨트롤에서 현재 선택된 텍스트를 가져오거나 설정합니다.</summary>
        <value>현재 선택된 텍스트인 <see cref="T:System.String" />입니다. 현재 선택된 텍스트가 없으면 이 속성은 빈 문자열로 확인됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 사용 하 여 검색 하는 선택 항목을 같은 컨트롤의 서식 속성을 따라 지정 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>, <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> 및 <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>합니다. 붙여넣기 작업 처럼 작동 합니다.이 속성을 사용 하 여 설정 된 선택: 각 문자가 마스크에 대해 일치 및 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 잘못 된 문자에 대 한 이벤트가 발생 합니다. 경우 <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A> 은 `true`, 설정할 때 허용 되는 리터럴 및 프롬프트 문자 <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A>, / / 마스크를 위반 하지 않으면 자동으로 제거 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SkipLiterals">
      <MemberSignature Language="C#" Value="public bool SkipLiterals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipLiterals" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipLiterals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipLiterals { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 리터럴 값을 다시 입력할 수 있는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          리터럴을 다시 입력할 수 있게 하려면 <see langword="true" />이고, 사용자가 리터럴 문자를 덮어쓰지 못하게 하려면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 입력된 마스크에는 일반적으로 리터럴을 포함 합니다. 사용자가 까지의 문자를 입력 하는 경우는 <xref:System.Windows.Forms.MaskedTextBox> 런타임에 현재 문자 위치에는 리터럴 놓이는 경우가 있습니다. <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> 방법을 다음과 같이 처리 해야 다음 문자에 대 한 사용자 입력이 속성에 설명 합니다.  
  
-   이 속성이 `true`, 사용자가 현재 위치에 같은 문자를 리터럴로 다시 입력할 수 있습니다 또는 편집 가능한 다음 문자를 입력 하 여 해당 위치에 현재 위치를 이동할 수 있습니다.  
  
-   이 속성이 `false`, 사용자 편집 가능한 다음 문자는 입력할 수 있습니다. / / 마스크의 다음 위치로 리터럴 문자를 허용 하지 하는 경우 (예를 들어 사용자가 "/" 및 다음 위치에 숫자만 사용할), 컨트롤 발생시킬지는 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> 이벤트입니다.  
  
 예를 들어, "90/90/0000" 날짜 입력 마스크의 슬래시 문자는 리터럴입니다. 사용자가 처음 두 자리 숫자를 "11"를 입력, 마스크는 첫 번째 슬래시 (/) 리터럴에서 현재 위치에 있다고 가정 합니다. 경우 <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> 은 `true`, 사용자는 다음과 같은 올바른 선택:  
  
-   "/" 문자를 입력할 수 있습니다. 이 인해 위치는이 예에서 요소를 마스킹 9, 네 번째 위치를 다음 문자로 이동 합니다.  
  
-   이 예제는 숫자는 편집 가능한 다음 문자를 입력할 수 있습니다. 숫자의 유효성을 검사할 수는 하 고 현재 위치 마스킹 요소 0 5 번째 위치에 자동으로 이동 합니다.  
  
 경우 <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> 은 `false`, 다음 올바른 데이터 입력만 허용 되는 경우이 예제는 숫자 그렇게 할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskedTextBoxTextEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 사용자에게 표시되는 대로 텍스트를 가져오거나 설정합니다.</summary>
        <value>컨트롤에서 현재 표시되는 텍스트가 들어 있는 <see cref="T:System.String" />입니다. 기본값은 빈 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> 에 대 한 기본 바인딩 속성은는 <xref:System.Windows.Forms.MaskedTextBox> 클래스입니다.  
  
 이 속성을 사용 하 여 검색할 문자열을와 같은 컨트롤의 서식 속성에 따라 지정 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> 및 <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>합니다.  
  
 문자열 리터럴 문자를 유무를 지정할 수 있습니다 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> 의 값에 따라 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>, <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A>, 및 <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>합니다.  
  
 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> 에 대 한 기본 바인딩 속성은 <xref:System.Windows.Forms.MaskedTextBox>합니다.  
  
 <xref:System.Windows.Forms.MaskedTextBox> 발생 된 <xref:System.Windows.Forms.Control.TextChanged> 서식 있는 텍스트 값이 변경 될 때마다 이벤트입니다. 다른 속성이 그렇지 변경 하려면이 값이 발생 하지 않을 수 있습니다. 예를 들어 변경는 <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> 속성 발생 하지 것입니다는 <xref:System.Windows.Forms.Control.TextChanged> 변경 않고 이벤트에는 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> 속성은 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> 속성입니다.  
  
 [!code-vb[TestMaskedTextBox#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TestMaskedTextBox/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      </Docs>
    </Member>
    <Member MemberName="TextAlign">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HorizontalAlignment TextAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.HorizontalAlignment TextAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
      <MemberSignature Language="VB.NET" Value="Public Property TextAlign As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HorizontalAlignment TextAlign { System::Windows::Forms::HorizontalAlignment get(); void set(System::Windows::Forms::HorizontalAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마스킹된 텍스트 상자 컨트롤에 텍스트를 정렬하는 방법을 가져오거나 설정합니다.</summary>
        <value>컨트롤에 상대적으로 텍스트를 정렬하는 방식을 지정하는 <see cref="T:System.Windows.Forms.HorizontalAlignment" /> 열거형 값 중 하나입니다. 기본값은 <see cref="F:System.Windows.Forms.HorizontalAlignment.Left" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 수는 <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A> 속성에 표시 된 텍스트 맞춤을 <xref:System.Windows.Forms.MaskedTextBox> 양식에서 시각적 요소의 레이아웃이 일치 하도록 합니다. 예를 들어 폼의 오른쪽에 있는 경우 설정할 수 있습니다는 <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A> 속성을 <xref:System.Windows.Forms.HorizontalAlignment.Right>, 기본 왼쪽된 맞춤 하는 대신 해당 컨트롤의 오른쪽으로 텍스트 맞춤으로 설정 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">이 속성에 할당된 값이 <see cref="T:System.Windows.Forms.HorizontalAlignment" /> 형식이 아닌 경우</exception>
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.TextLength" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.AutoSize" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextAlignChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextAlignChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextAlignChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextAlignChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>텍스트 정렬이 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged> 후에 이벤트가 발생는 <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A> 속성을 변경 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.MaskedTextBox> 라는 `MaskedTextBox1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#487](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#487)]
 [!code-vb[System.Windows.Forms.EventExamples#487](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#487)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public override int TextLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TextLength { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>표시된 텍스트의 길이를 가져옵니다.</summary>
        <value>
          <see cref="P:System.Windows.Forms.MaskedTextBox.Text" /> 속성의 문자 수를 나타내는 Int32입니다. <see cref="P:System.Windows.Forms.MaskedTextBox.TextLength" />는 <see cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" /> 등의 속성을 무시하지 않으므로 컨트롤에 포커스가 있는지 여부에 따라 반환 결과가 다를 수 있습니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextMaskFormat">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MaskFormat TextMaskFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MaskFormat TextMaskFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property TextMaskFormat As MaskFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MaskFormat TextMaskFormat { System::Windows::Forms::MaskFormat get(); void set(System::Windows::Forms::MaskFormat value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>리터럴 및 프롬프트 문자를 서식이 지정된 문자열에 포함할지를 결정하는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Forms.MaskFormat" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> 속성 마스크에 리터럴 및 프롬프트 문자를 처리 하는 방법을 결정 때 서식이 지정 된 문자열을 생성 합니다. 리터럴 문자, 프롬프트 문자 중 하나 또는 둘 다에 포함 되는지 여부를 결정 보다 구체적으로 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> 속성입니다. 프롬프트 문자를 제외 하면 형식이 지정 된 문자열에서 공백으로 변환 됩니다.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A> 속성 방법과 관련 하 여 비슷한 용도로 사용 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> 속성을 해석 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">속성을 올바르지 않은 <see cref="T:System.Windows.Forms.MaskFormat" /> 값으로 설정했습니다.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 마스킹된 텍스트 상자를 나타내는 문자열을 반환합니다. 이 메서드는 <see cref="M:System.Windows.Forms.TextBoxBase.ToString" />를 재정의합니다.</summary>
        <returns>현재 <see cref="T:System.String" />에 대한 정보가 포함된 <see cref="T:System.Windows.Forms.MaskedTextBox" />입니다. 문자열에는 형식, 입력 문자열의 단순화된 보기 및 서식이 지정된 입력 문자열이 포함됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 버전의는 <xref:System.Windows.Forms.MaskedTextBox.ToString%2A> 메서드는이 메서드의 기본 클래스 구현을 호출 <xref:System.Windows.Forms.TextBoxBase.ToString%2A?displayProperty=nameWithType>, 마스크에 의해 처리 후 입력된 문자열을 추가 합니다. 이 메서드는 다음과 같은 예외가 서식이 지정 된 문자열의 모양을 변경 하는 속성을 사용 하지만:  
  
-   반환 된 문자열의 값에 관계 없이 프롬프트 및 리터럴 문자를 항상 포함는 <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> 속성입니다.  
  
-   실제 사용자가 입력 문자가 반환 되도록 암호 문자는 무시 됩니다. 값 즉,는 <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> 및 <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> 속성은 무시 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="TypeValidationCompleted">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TypeValidationEventHandler TypeValidationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TypeValidationEventHandler TypeValidationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TypeValidationCompleted As TypeValidationEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TypeValidationEventHandler ^ TypeValidationCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TypeValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.MaskedTextBox" />에서 <see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" /> 속성을 사용하여 현재 값의 구문 분석을 완료하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> 컨트롤은 사용자 입력에 정의 된 형식에 대해 유효성을 검사 필요에 따라 해당 <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A?displayProperty=nameWithType> 속성입니다. 이 속성이 없는 경우 `null`, 다음과 같은 일련의 이벤트가 발생 합니다.  
  
1.  유효성 검사 시퀀스에는 다음 중 하나가 발생할 때 시작 됩니다.  
  
    -   <xref:System.Windows.Forms.MaskedTextBox> 컨트롤이 포커스를 잃을 합니다.  
  
    -   <xref:System.Windows.Forms.MaskedTextBox.Text%2A> 속성을 검색 합니다.  
  
    -   <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> 메서드가 호출됩니다.  
  
2.  이러한 이벤트 중 하나에 대 한 호출에서 발생 된 `Parse` 지정 된 형식의 메서드는 <xref:System.Windows.Forms.TypeValidationEventArgs.ValidatingType%2A> 속성입니다. `Parse` 대상 형식으로 형식화 된 입력된 문자열의 변환을 담당 합니다. 성공적인 변환 유효성 검사를 수행한 것과 같습니다.  
  
3.  후 `Parse` 반환 된 <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> 이벤트가 발생 합니다. 이 이벤트에 대 한 이벤트 처리기는 형식 또는 마스크 유효성 검사 처리를 수행 하려면 가장 일반적으로 구현 됩니다. 수신한는 <xref:System.Windows.Forms.TypeValidationEventArgs> ; 변환에 대 한 정보를 포함 하는 매개 변수 예를 들어는 <xref:System.Windows.Forms.TypeValidationEventArgs.IsValidInput%2A> 멤버는 변환이 성공 했는지 여부를 나타냅니다.  
  
4.  이벤트 처리기에 대 한 이후에 <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> 이벤트가 반환 되 면 표준 유효성 검사 이벤트 <xref:System.Windows.Forms.Control.Validating>, 발생 합니다. 취소 이벤트를 포함 한 표준 유효성 검사를 수행 하는 처리기를 구현할 수 있습니다.  
  
5.  3 단계에서 이벤트를 취소 되지 않은 경우 표준 유효성 검사 이벤트를 제어 하는 <xref:System.Windows.Forms.Control.Validated> 발생 합니다.  
  
 경우는 <xref:System.Windows.Forms.TypeValidationEventArgs.Cancel%2A> 속성이로 설정 되어 `true` 에 <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> 이벤트 처리기 이벤트를 취소 및 <xref:System.Windows.Forms.MaskedTextBox> 컨트롤에 포커스가 유지 하지 않는 한 후속 <xref:System.Windows.Forms.Control.Validating> 의 해당 버전을 설정 하는 이벤트는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A?displayProperty=nameWithType> 속성 돌아가기 `false`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용자의 입력을 올바른를 구문 분석을 시도 <xref:System.DateTime> 개체입니다. 실패 한 경우는 <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> 이벤트 처리기는 사용자에 게 오류 메시지를 표시 합니다. 값이 올바른 <xref:System.DateTime>, 코드 지정 된 날짜 오늘 날짜 아닌지 확인 합니다. 이 코드 예제에서는 Windows Forms 프로젝트를 포함 하는 <xref:System.Windows.Forms.MaskedTextBox> 라는 컨트롤 `MaskedTextBox1` 및 <xref:System.Windows.Forms.ToolTip> 라는 컨트롤 `ToolTip1`합니다.  
  
 [!code-csharp[ValidatingTypeSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidatingTypeSample/CS/form1.cs#1)]
 [!code-vb[ValidatingTypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidatingTypeSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="T:System.Windows.Forms.TypeValidationEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Undo">
      <MemberSignature Language="C#" Value="public void Undo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Undo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.Undo" />
      <MemberSignature Language="VB.NET" Value="Public Sub Undo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Undo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>텍스트 상자의 마지막 편집 작업을 실행 취소합니다. 이 메서드는 <see cref="T:System.Windows.Forms.MaskedTextBox" />에서 지원되지 않습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Undo%2A> 메서드는 기본에서 상속 된 <xref:System.Windows.Forms.TextBoxBase> 클래스입니다. 그러나 <xref:System.Windows.Forms.MaskedTextBox> 실행 취소 기능을 지원 하지 않습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
      </Docs>
    </Member>
    <Member MemberName="UseSystemPasswordChar">
      <MemberSignature Language="C#" Value="public bool UseSystemPasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSystemPasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property UseSystemPasswordChar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSystemPasswordChar { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>운영 체제에서 제공하는 암호 문자를 사용할지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          시스템 암호를 프롬프트 문자로 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> 속성에 사용자가 제공한 입력을 표시 해야 하는지를 결정는 <xref:System.Windows.Forms.MaskedTextBox> 운영 체제에서 정의 하는 암호 문자를 여러 번으로 합니다. <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> 기능이 비슷한는 <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> 속성 하지만 프롬프트에서 프로그래머 제공 문자를 사용 하는 대신 <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> 운영 체제에 의해 정의 된 프롬프트를 사용 합니다. 이 속성 보다 우선 <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>합니다.  
  
> [!IMPORTANT]
>  보안 고려 사항으로는 <xref:System.Windows.Forms.MaskedTextBox> 컨트롤 암호로 보호 된 문자열에 대 한 잘라내기 및 복사 작업을 사용 하지 않도록 설정 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">지정된 암호 문자가 현재 프롬프트 문자 <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />와 같은 경우. 둘은 달라야 합니다.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      </Docs>
    </Member>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public object ValidateText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateText () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateText();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>사용자 입력 문자열을 유효성 검사 형식의 인스턴스로 변환합니다.</summary>
        <returns>성공하면 <see cref="T:System.Object" /> 속성에서 지정한 형식의 <see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />이고, 변환이 실패하면 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> 메서드에 포함 된 형식이 지정 된 문자열을 변환 하려고 시도 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> 속성을 지정 된 형식의 인스턴스는 <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> 속성입니다. 서식이 지정 된 문자열에서 프롬프트 문자는 무시 되지만 리터럴의 현재 값에 따라 처리 됩니다는 <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> 속성입니다.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> 발생는 <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> 변환이 시도 되는 성공 여부에 관계 없이 후 이벤트입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">입력 문자열을 구문 분석하는 동안 치명적인 예외가 발생한 경우</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="ValidatingType">
      <MemberSignature Language="C#" Value="public Type ValidatingType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ValidatingType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatingType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ValidatingType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자의 데이터 입력을 확인하는 데 사용되는 데이터 형식을 가져오거나 설정합니다.</summary>
        <value>유효성 검사에 사용되는 데이터 형식을 나타내는 <see cref="T:System.Type" />입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 마스크 자체에 없는 사용 하더라도 사용자의 입력 지정된 된 형식에 대 한 올바른 값을 나타내는 됩니다. 다음 C# 코드에서는 마스크를 보여 줍니다.  
  
```  
maskedTextBox1.Mask = "99/99/9999";  
```  
  
 다음 Visual Basic 코드에서는 마스크를 보여 줍니다.  
  
 `MaskedTextBox1.Mask = "99/99/9999"`  
  
 이 마스크는 사용자 8 자리를 입력 했지만 있는지에 입력 한 날짜, 월, 연도 값; 올바른 범위를 확인할 수 없는 요구할 수 있습니다. "12/20/2003"와 "70/90/0000"은 관련해 서 / / 마스크는 동일 하 게 유효 합니다.  
  
 사용할 수 있습니다 <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> 사용자가 입력 한 데이터가 올바른 범위에 속하는지 여부를 확인 하려면-의 인스턴스를 할당 하 여 앞에서 언급 한 경우에는 <xref:System.DateTime> 유형입니다. 현재 텍스트 컨트롤에 사용자 컨트롤을 벗어나면 하거나 유효성을 검사 합니다. 데이터에 대 한 모니터링 하 여 유효성 검사에 실패 여부를 확인할 수 있습니다는 <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> 이벤트입니다. <xref:System.Windows.Forms.MaskedTextBox> 에 대 한 확인만 수행 <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> 경우 <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> 은 `true`합니다.  
  
 으로 사용자 고유의 사용자 지정 데이터 형식을 사용 하려는 경우 <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>, 정적을 구현 해야 `Parse` 매개 변수로 문자열을 사용 하는 메서드. 이 메서드는 다음 서명을 중 하나 또는 모두를 구현 합니다.  
  
 `public static Object Parse(string)`  
  
 `public static Object Parse(string, IFormatProvider)`  
  
   
  
## Examples  
 다음 코드 예제에서는 사용자의 입력을 올바른를 구문 분석을 시도 <xref:System.DateTime>합니다. 실패 한 경우는 <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> 이벤트 처리기는 사용자에 게 오류 메시지를 표시 합니다. 값이 올바른 <xref:System.DateTime>, 코드를 지정 된 날짜 오늘 날짜 아닌지 확인 추가 확인을 수행 합니다. 이 코드 예제에서는 Windows Forms 프로젝트를 포함 하는 <xref:System.Windows.Forms.MaskedTextBox> 라는 컨트롤 `MaskedTextBox1` 및 <xref:System.Windows.Forms.ToolTip> 라는 컨트롤 `ToolTip1`합니다.  
  
 [!code-csharp[ValidatingTypeSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidatingTypeSample/CS/form1.cs#1)]
 [!code-vb[ValidatingTypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidatingTypeSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">처리할 Windows <see cref="T:System.Windows.Forms.Message" />입니다.</param>
        <summary>Windows 메시지를 처리합니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="WordWrap">
      <MemberSignature Language="C#" Value="public bool WordWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WordWrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.WordWrap" />
      <MemberSignature Language="VB.NET" Value="Public Property WordWrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WordWrap { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>필요한 경우 여러 줄을 입력할 수 있는 TextBox 컨트롤이 다음 줄의 처음 부분으로 줄 바꿈하는지를 나타내는 값을 가져오거나 설정합니다. 이 속성은 <see cref="T:System.Windows.Forms.MaskedTextBox" />에서 지원되지 않습니다.</summary>
        <value>
          <see cref="P:System.Windows.Forms.MaskedTextBox.WordWrap" /> 속성은 항상 <see langword="false" />를 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때문에 <xref:System.Windows.Forms.MaskedTextBox> 여러 줄의 입력을 지원 하지 않습니다는 <xref:System.Windows.Forms.MaskedTextBox.WordWrap%2A> 속성은 무시 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
  </Members>
</Type>