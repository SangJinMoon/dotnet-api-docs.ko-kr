<Type Name="TreeView" FullName="System.Windows.Forms.TreeView">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0367625515be462bb1113f18a5a917eeaecb6881" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33660321" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TreeView : System.Windows.Forms.Control" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TreeView extends System.Windows.Forms.Control" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.TreeView" />
  <TypeSignature Language="VB.NET" Value="Public Class TreeView&#xA;Inherits Control" />
  <TypeSignature Language="C++ CLI" Value="public ref class TreeView : System::Windows::Forms::Control" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("AfterSelect")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Nodes")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.TreeViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>각각 <see cref="T:System.Windows.Forms.TreeNode" />로 표시되는 레이블이 붙은 항목의 계층적 컬렉션을 표시합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeView.Nodes%2A> 컬렉션 보관 모든는 <xref:System.Windows.Forms.TreeNode> 에 할당 된 개체는 <xref:System.Windows.Forms.TreeView> 제어 합니다. 이 컬렉션의 트리 노드는 루트 트리 노드 라고 합니다. 트리 루트 노드에 이후에 추가 된 트리 노드를 자식 노드 라고 합니다. 때문에 각 <xref:System.Windows.Forms.TreeNode> 다른 컬렉션을 포함할 수 <xref:System.Windows.Forms.TreeNode> 개체 하기 어려울 수 위치를 확인할 트리 구조의 컬렉션을 반복 하는 경우. 구문 분석할 수 있습니다는 <xref:System.Windows.Forms.TreeNode.FullPath%2A?displayProperty=nameWithType> 사용 하 여 문자열은 <xref:System.Windows.Forms.TreeView.PathSeparator%2A> 문자열 값 위치를 결정 한 <xref:System.Windows.Forms.TreeNode> 레이블의 시작 및 끝입니다.  
  
 할당 하 여 트리 노드 옆에 이미지를 표시할 수는 <xref:System.Windows.Forms.ImageList> 에 <xref:System.Windows.Forms.TreeView.ImageList%2A> 속성과 인덱스 값을 참조 하는 <xref:System.Drawing.Image> 에 <xref:System.Windows.Forms.ImageList> 를 할당 하려면 <xref:System.Drawing.Image>합니다. 다음 속성을 사용 하 여 이미지를 할당 하려면:  
  
-   설정의 <xref:System.Windows.Forms.TreeView.ImageIndex%2A> 속성의 인덱스 값을는 <xref:System.Drawing.Image> 트리 노드가 선택 되지 않은 경우 표시를 합니다.  
  
-   설정의 <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> 속성의 인덱스 값을는 <xref:System.Drawing.Image> 트리 노드가 선택 된 경우 표시를 합니다.  
  
 참조 하는 이미지는 <xref:System.Windows.Forms.TreeView.ImageIndex%2A> 및 <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> 속성 값은에 할당 된 모든 트리 노드에 표시 되는 기본 이미지는 <xref:System.Windows.Forms.TreeView.Nodes%2A> 컬렉션입니다. 개별 트리 노드 기본 이미지를 설정 하 여 재정의할 수는 <xref:System.Windows.Forms.TreeNode.ImageIndex%2A?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.TreeNode.SelectedImageIndex%2A?displayProperty=nameWithType> 속성입니다.  
  
 상태 이미지에 표시 되는 <xref:System.Windows.Forms.TreeView> 는 기본적으로 16 x 16 픽셀입니다. 설정의 <xref:System.Windows.Forms.ImageList.ImageSize%2A> 의 속성은 <xref:System.Windows.Forms.TreeView.StateImageList%2A> 이미지 표시 되는 방식에 영향을 미치지 것입니다. 그러나 상태 이미지 크기를 조정할 시스템 DPI 설정에 따라 app.config 파일에 다음 항목이 포함 되어 있는 경우:  
  
```  
<appSettings>  
  <add key="EnableWindowsFormsHighDpiAutoResizing" value="true" />  
</appSettings>  
  
```  
  
 다음 수준의 자식 트리 노드를 표시 하려면 트리 노드를 확장할 수 있습니다. 사용자를 확장할 수는 <xref:System.Windows.Forms.TreeNode> 옆에 표시 되 면 더하기 기호 (+) 단추를 클릭 하 여는 <xref:System.Windows.Forms.TreeNode>, 하거나 확장할 수는 <xref:System.Windows.Forms.TreeNode> 호출 하 여는 <xref:System.Windows.Forms.TreeNode.Expand%2A?displayProperty=nameWithType> 메서드. 모든 자식 트리 노드 수준을 확장 하 고 <xref:System.Windows.Forms.TreeNode.Nodes%2A> 컬렉션, 호출의 <xref:System.Windows.Forms.TreeNode.ExpandAll%2A> 메서드. 자식 축소할 수 <xref:System.Windows.Forms.TreeNode> 호출 하 여 수준는 <xref:System.Windows.Forms.TreeNode.Collapse%2A?displayProperty=nameWithType> 메서드 또는 사용자 옆에 표시 되 면 빼기 기호 (-) 단추를 누를 수 있습니다는 <xref:System.Windows.Forms.TreeNode>합니다. 호출할 수도 있습니다는 <xref:System.Windows.Forms.TreeNode.Toggle%2A?displayProperty=nameWithType> 메서드를 확장 및 축소 된 상태로 대체 합니다.  
  
 트리 노드 확인란 표시할 수 있습니다. 확인란을 표시 하려면 설정는 <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> 의 속성은 <xref:System.Windows.Forms.TreeView> 를 `true`합니다. <xref:System.Windows.Forms.TreeNode.Checked%2A> 속성이 `true` 선택된 된 상태에 있는 트리 노드에 대 한 합니다.  
  
> [!NOTE]
>  설정의 <xref:System.Windows.Forms.TreeNode.Checked%2A?displayProperty=nameWithType> 속성 내에서 <xref:System.Windows.Forms.TreeView.BeforeCheck> 또는 <xref:System.Windows.Forms.TreeView.AfterCheck> 이벤트는 이벤트를 여러 번 발생 시키고 유효성 검사 예기치 않은 동작이 발생할 수 있습니다. 예를 들어 설정할 수 있습니다는 <xref:System.Windows.Forms.TreeNode.Checked%2A> 재귀적으로 사용자를 확장 하 여 각각을 개별적으로 확인 보유 하지 않도록 자식 노드를 업데이트할 경우 이벤트 처리기에는 속성입니다. 이벤트를 여러 번 발생 하지 않으려면 논리를 추가 하는 경우에 재귀 코드를 실행 하는 이벤트 처리기에는 <xref:System.Windows.Forms.TreeViewEventArgs.Action%2A> 의 속성은 <xref:System.Windows.Forms.TreeViewEventArgs> 로 설정 되지 않은 <xref:System.Windows.Forms.TreeViewAction.Unknown?displayProperty=nameWithType>합니다. 이 작업을 수행 하는 방법의 예를 들어의 예 섹션을 참조 하십시오.는 <xref:System.Windows.Forms.TreeView.AfterCheck> 또는 <xref:System.Windows.Forms.TreeView.BeforeCheck> 이벤트입니다.  
  
 모양을 변경할 수 있습니다는 <xref:System.Windows.Forms.TreeView> 표시 및 스타일 속성 중 일부를 설정 하 여 제어 합니다. 설정 <xref:System.Windows.Forms.TreeView.ShowPlusMinus%2A> 를 `true` 각 옆의 더하기 기호나 빼기 기호가 단추를 표시 <xref:System.Windows.Forms.TreeNode> 확장 되거나 축소 각각 수입니다. 설정의 <xref:System.Windows.Forms.TreeView.ShowRootLines%2A> 속성을 `true` 하면는 <xref:System.Windows.Forms.TreeView> 모든 루트 트리 노드를 함께 조인 하는 줄을 표시 합니다. 해당 루트 노드를 설정 하 여 자식 트리 노드를 연결 하는 선을 표시할 수 있습니다는 <xref:System.Windows.Forms.TreeView.ShowLines%2A> 속성을 `true`합니다. 설정의 <xref:System.Windows.Forms.TreeView.HotTracking%2A> 속성을 `true` 위로 가져갈 마우스 포인터가 트리 노드 레이블의 모양을 변경 합니다. 핫 트랙는 트리 노드 레이블이 하이퍼링크 모양을 적용 됩니다. 모양을 완전히 사용자 지정할 수 있습니다는 <xref:System.Windows.Forms.TreeView> 제어 합니다. 이 작업을 수행 하려면 설정는 <xref:System.Windows.Forms.TreeView.DrawMode%2A> 속성 이외의 값을 <xref:System.Windows.Forms.TreeViewDrawMode.Normal?displayProperty=nameWithType> 처리는 <xref:System.Windows.Forms.TreeView.DrawNode> 이벤트입니다.  
  
> [!NOTE]
>  설정할 때의 <xref:System.Windows.Forms.TreeView.CheckBoxes%2A>, <xref:System.Windows.Forms.TreeView.Scrollable%2A>, <xref:System.Windows.Forms.TreeView.ImageIndex%2A>, 및 <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> 실행 시 속성은 <xref:System.Windows.Forms.TreeView> 핸들을 다시 만드는 (참조 <xref:System.Windows.Forms.Control.RecreateHandle%2A?displayProperty=nameWithType>) 컨트롤의 모양을 업데이트 합니다. 이 인해 모든 트리 노드가 선택 된 제외 하 고 축소 <xref:System.Windows.Forms.TreeNode>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.TreeView> 제어 합니다.  
  
 [!code-csharp[TreeViewMisc#10](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewMisc/cs/form1.cs#10)]
 [!code-vb[TreeViewMisc#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewMisc/vb/form1.vb#10)]  
  
 에 고객 정보를 표시 하는 다음의 더 복잡 한 코드 예제는 <xref:System.Windows.Forms.TreeView> 제어 합니다. 트리 루트 노드는 고객 이름이 표시 하 고 자식 트리 노드를 각 고객에 게 할당 된 주문 번호를 표시 합니다. 이 예제에서는 1000 명의 고객이 15 주문이 표시 됩니다. 다시는 <xref:System.Windows.Forms.TreeView> 를 사용 하 여 표시 되지 않는지는 <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> 및 <xref:System.Windows.Forms.TreeView.EndUpdate%2A> 메서드 및 대기 <xref:System.Windows.Forms.Cursor> 표시 됩니다는 동안는 <xref:System.Windows.Forms.TreeView> 만들고 그리는 <xref:System.Windows.Forms.TreeNode> 개체입니다. 이 예제를 실행 하려면는 `Customer` 개체의 컬렉션을 저장할 수 있는 `Order` 개체입니다. 또한 커서 파일 이라는 있어야 `MyWait.cur` 의 인스턴스를 생성 한에 해당 하며 응용 프로그램 디렉터리는 <xref:System.Windows.Forms.TreeView> 컨트롤에 <xref:System.Windows.Forms.Form>합니다.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.TreeNode" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeView();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.TreeView" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는의 축소 상태를 변경 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.TreeView> 선택된 된 노드가 모두 표시 되도록 합니다. 먼저 모든 노드가 확장 되 고에 대 한 처리기가 추가 된 <xref:System.Windows.Forms.TreeView.BeforeCollapse> 이벤트입니다. 다음에는 모든 노드가 축소 됩니다. <xref:System.Windows.Forms.TreeView.BeforeCollapse> 있는지 여부 지정된 된 노드에 자식 노드가 선택 된 이벤트 처리기를 확인 합니다. 노드가 선택 된 자식 노드에 대 한 축소 취소 됩니다. 노드 옆에 빼기 기호를 클릭 하면 표준 노드 축소를 허용 하기 위해는 <xref:System.Windows.Forms.TreeView.BeforeCollapse> 이벤트 처리기가 제거 합니다.  
  
 이 문제를 처리 하 여 구현할 수도 있습니다는 <xref:System.Windows.Forms.TreeView.BeforeExpand> 이벤트, 해당 항목에 대 한 예제와 같이 합니다.  
  
 [!code-cpp[TreeViewShowCheckedNodes2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewShowCheckedNodes2/CPP/treeviewshowcheckednodes2.cpp#1)]
 [!code-csharp[TreeViewShowCheckedNodes2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewShowCheckedNodes2/CS/treeviewshowcheckednodes2.cs#1)]
 [!code-vb[TreeViewShowCheckedNodes2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewShowCheckedNodes2/VB/treeviewshowcheckednodes2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.TreeView" />
      </Docs>
    </Member>
    <Member MemberName="AfterCheck">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeViewEventHandler AfterCheck;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeViewEventHandler AfterCheck" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.AfterCheck" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AfterCheck As TreeViewEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TreeViewEventHandler ^ AfterCheck;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 노드 확인란이 선택된 후에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정의 <xref:System.Windows.Forms.TreeNode.Checked%2A?displayProperty=nameWithType> 속성 내에서 한 <xref:System.Windows.Forms.TreeView.BeforeCheck> 또는 <xref:System.Windows.Forms.TreeView.AfterCheck> 이벤트 처리기를 여러 번 발생 이벤트를 발생 하 고 예기치 않은 동작이 발생할 수 있습니다. 이벤트를 여러 번 발생 하지 않으려면 논리를 추가 하는 경우에 재귀 코드를 실행 하는 이벤트 처리기에는 <xref:System.Windows.Forms.TreeViewEventArgs.Action%2A> 의 속성은 <xref:System.Windows.Forms.TreeViewEventArgs> 로 설정 되지 않은 <xref:System.Windows.Forms.TreeViewAction.Unknown?displayProperty=nameWithType>합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 모든 자식 트리 노드를 업데이트 하는 다음 코드 예제는 <xref:System.Windows.Forms.TreeNode> 사용자의 선택된 상태가 변경 될 때입니다. 이 코드를 실행 하려면는 <xref:System.Windows.Forms.Form> 와 <xref:System.Windows.Forms.TreeView> 올려진 <xref:System.Windows.Forms.TreeNode> 개체에 해당 <xref:System.Windows.Forms.TreeNodeCollection>합니다. <xref:System.Windows.Forms.TreeNodeCollection> 트리 노드가 자식 노드와 함께 있어야 합니다.  
  
 [!code-cpp[TreeView.AfterCheck_BeforeCheck#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView.AfterCheck_BeforeCheck/CPP/tn_checked.cpp#1)]
 [!code-csharp[TreeView.AfterCheck_BeforeCheck#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView.AfterCheck_BeforeCheck/CS/tn_checked.cs#1)]
 [!code-vb[TreeView.AfterCheck_BeforeCheck#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView.AfterCheck_BeforeCheck/VB/tn_checked.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TreeView.CheckBoxes" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnAfterCheck(System.Windows.Forms.TreeViewEventArgs)" />
        <altmember cref="E:System.Windows.Forms.TreeView.BeforeCheck" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnBeforeCheck(System.Windows.Forms.TreeViewCancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="AfterCollapse">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeViewEventHandler AfterCollapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeViewEventHandler AfterCollapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.AfterCollapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AfterCollapse As TreeViewEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TreeViewEventHandler ^ AfterCollapse;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 노드가 축소된 후에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 모든 자식 트리 노드를 업데이트 하는 다음 코드 예제는 <xref:System.Windows.Forms.TreeNode> 사용자의 선택된 상태가 변경 될 때입니다. 이 코드를 실행 하려면는 <xref:System.Windows.Forms.Form> 와 <xref:System.Windows.Forms.TreeView> 올려진 <xref:System.Windows.Forms.TreeNode> 개체에 해당 <xref:System.Windows.Forms.TreeNodeCollection>합니다. <xref:System.Windows.Forms.TreeNodeCollection> 트리 노드가 자식 노드와 함께 있어야 합니다.  
  
 [!code-cpp[TreeView.AfterCheck_BeforeCheck#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView.AfterCheck_BeforeCheck/CPP/tn_checked.cpp#1)]
 [!code-csharp[TreeView.AfterCheck_BeforeCheck#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView.AfterCheck_BeforeCheck/CS/tn_checked.cs#1)]
 [!code-vb[TreeView.AfterCheck_BeforeCheck#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView.AfterCheck_BeforeCheck/VB/tn_checked.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeView.OnAfterCollapse(System.Windows.Forms.TreeViewEventArgs)" />
        <altmember cref="E:System.Windows.Forms.TreeView.BeforeCollapse" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnBeforeCollapse(System.Windows.Forms.TreeViewCancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="AfterExpand">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeViewEventHandler AfterExpand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeViewEventHandler AfterExpand" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.AfterExpand" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AfterExpand As TreeViewEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TreeViewEventHandler ^ AfterExpand;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 노드가 확장된 후에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.TreeView.AfterExpand> 이벤트입니다. 이 보고서를 사용 하면 이벤트 발생 하 고 디버깅 시 활용할 수 하는 경우는 방법을 배웁니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.TreeView> 라는 `TreeView1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.TreeView.AfterExpand> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#631](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#631)]
 [!code-vb[System.Windows.Forms.EventExamples#631](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#631)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeView.OnAfterExpand(System.Windows.Forms.TreeViewEventArgs)" />
        <altmember cref="E:System.Windows.Forms.TreeView.BeforeExpand" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnBeforeExpand(System.Windows.Forms.TreeViewCancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="AfterLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.NodeLabelEditEventHandler AfterLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.NodeLabelEditEventHandler AfterLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.AfterLabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AfterLabelEdit As NodeLabelEditEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::NodeLabelEditEventHandler ^ AfterLabelEdit;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NodeLabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 노드 레이블 텍스트가 편집된 후에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용자가 사용 하 여 루트가 아닌 트리 노드를 편집할 수 있습니다는 <xref:System.Windows.Forms.ContextMenu>합니다. 마우스를 마우스 오른쪽 단추로 클릭할 때는 <xref:System.Windows.Forms.TreeNode> 해당 위치가 결정 하 고 이라는 변수에 저장 `mySelectedNode`합니다. 루트가 아닌 트리 노드를 선택 하 여 노드 편집을 사용 하면 편집 가능한 상태에 놓입니다. 사용자가 트리 노드 레이블 편집을 후 새 레이블 텍스트 평가 되 고 저장 합니다. 이 예에서는 여러 문자 레이블 텍스트에서 유효 간주 됩니다. 잘못 된 문자 중 하나에 레이블 문자열이 있거나 문자열이 비어, 사용자가 오류의 알림을 하 고 레이블을 이전 텍스트에 반환 됩니다.  
  
 [!code-cpp[classic treenode.beginedit example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic TreeNode.BeginEdit Example/CPP/source.cpp#1)]
 [!code-csharp[classic treenode.beginedit example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic TreeNode.BeginEdit Example/CS/source.cs#1)]
 [!code-vb[classic treenode.beginedit example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic TreeNode.BeginEdit Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeView.OnAfterLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.TreeView.BeforeLabelEdit" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnBeforeLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="AfterSelect">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeViewEventHandler AfterSelect;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeViewEventHandler AfterSelect" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.AfterSelect" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AfterSelect As TreeViewEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TreeViewEventHandler ^ AfterSelect;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 노드가 선택된 후에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 노드를 선택 하지 않은 경우에이 이벤트가 발생 하지 않습니다. 선택 영역을 지웠습니다 여부를 검색 하려면 테스트할 수 있습니다는 <xref:System.Windows.Forms.TreeNode.IsSelected%2A?displayProperty=nameWithType> 속성입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.TreeViewAction> 열거형입니다. 이 예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여넣습니다는 <xref:System.Windows.Forms.TreeView> 라는 컨트롤 `TreeView1`합니다. 이 예제에서는 `TreeView1` 항목으로 채워집니다 및 <xref:System.Windows.Forms.TreeView.AfterSelect> 이벤트가 샘플에 정의 된 이벤트 처리기에 연결 되어 있습니다.  
  
 [!code-cpp[System.Windows.Forms.TreeViewAndPrintPreview#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewAndPrintPreview/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.TreeViewAndPrintPreview#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewAndPrintPreview/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.TreeViewAndPrintPreview#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TreeViewAndPrintPreview/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeView.OnAfterSelect(System.Windows.Forms.TreeViewEventArgs)" />
        <altmember cref="E:System.Windows.Forms.TreeView.BeforeSelect" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnBeforeSelect(System.Windows.Forms.TreeViewCancelEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
        <altmember cref="P:System.Windows.Forms.TreeNode.IsSelected" />
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤의 배경색을 가져오거나 설정합니다.</summary>
        <value>컨트롤의 배경색을 나타내는 <see cref="T:System.Drawing.Color" />입니다. 기본값은 <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> 속성 값입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.BackgroundImage" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Image ^ BackgroundImage { System::Drawing::Image ^ get(); void set(System::Drawing::Image ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.TreeView" /> 컨트롤의 배경 이미지를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Forms.TreeView" /> 컨트롤의 배경 이미지인 <see cref="T:System.Drawing.Image" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 이 클래스와 관련이 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.BackgroundImageChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.TreeView.BackgroundImage" /> 속성이 변경되면 발생합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.TreeView" /> 컨트롤의 배경 이미지 레이아웃을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageLayout" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Windows.Forms.ImageLayout.Tile" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성/메서드/이벤트는이 클래스와 관련이 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.TreeView.BackgroundImageLayout" /> 속성이 변경되면 발생합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeCheck">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeViewCancelEventHandler BeforeCheck;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeViewCancelEventHandler BeforeCheck" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.BeforeCheck" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BeforeCheck As TreeViewCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TreeViewCancelEventHandler ^ BeforeCheck;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 노드 확인란이 선택되기 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  설정의 <xref:System.Windows.Forms.TreeNode.Checked%2A?displayProperty=nameWithType> 속성 내에서 <xref:System.Windows.Forms.TreeView.BeforeCheck> 또는 <xref:System.Windows.Forms.TreeView.AfterCheck> 이벤트는 이벤트를 여러 번 발생 시키고 유효성 검사 예기치 않은 동작이 발생할 수 있습니다. 예를 들어 설정할 수 있습니다는 <xref:System.Windows.Forms.TreeNode.Checked%2A> 사용자를 확장 하 여 각각을 개별적으로 확인 보유 하지 않는 재귀적으로 자식 노드를 업데이트할 수 있을 때는 이벤트 처리기에는 속성입니다. 이벤트를 여러 번 발생 하지 않으려면 논리를 추가 하는 경우에 재귀 코드를 실행 하는 이벤트 처리기에는 <xref:System.Windows.Forms.TreeViewEventArgs.Action%2A> 의 속성은 <xref:System.Windows.Forms.TreeViewEventArgs> 로 설정 되지 않은 <xref:System.Windows.Forms.TreeViewAction.Unknown?displayProperty=nameWithType>합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 모든 자식 트리 노드를 업데이트 하는 다음 코드 예제는 <xref:System.Windows.Forms.TreeNode> 사용자의 선택된 상태가 변경 될 때입니다. 이 코드를 실행 하려면는 <xref:System.Windows.Forms.Form> 와 <xref:System.Windows.Forms.TreeView> 올려진 <xref:System.Windows.Forms.TreeNode> 개체에 해당 <xref:System.Windows.Forms.TreeNodeCollection>합니다. <xref:System.Windows.Forms.TreeNodeCollection> 트리 노드가 자식 노드와 함께 있어야 합니다.  
  
 [!code-cpp[TreeView.AfterCheck_BeforeCheck#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView.AfterCheck_BeforeCheck/CPP/tn_checked.cpp#1)]
 [!code-csharp[TreeView.AfterCheck_BeforeCheck#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView.AfterCheck_BeforeCheck/CS/tn_checked.cs#1)]
 [!code-vb[TreeView.AfterCheck_BeforeCheck#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView.AfterCheck_BeforeCheck/VB/tn_checked.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TreeView.CheckBoxes" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnBeforeCheck(System.Windows.Forms.TreeViewCancelEventArgs)" />
        <altmember cref="E:System.Windows.Forms.TreeView.AfterCheck" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnAfterCheck(System.Windows.Forms.TreeViewEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BeforeCollapse">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeViewCancelEventHandler BeforeCollapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeViewCancelEventHandler BeforeCollapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.BeforeCollapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BeforeCollapse As TreeViewCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TreeViewCancelEventHandler ^ BeforeCollapse;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 노드가 축소되기 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는의 축소 상태를 변경 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.TreeView> 선택된 된 노드가 모두 표시 되도록 합니다. 먼저 모든 노드가 확장 되 고에 대 한 처리기가 추가 된 <xref:System.Windows.Forms.TreeView.BeforeCollapse> 이벤트입니다. 다음에는 모든 노드가 축소 됩니다. <xref:System.Windows.Forms.TreeView.BeforeCollapse> 있는지 여부 지정된 된 노드에 자식 노드가 선택 된 이벤트 처리기를 확인 합니다. 노드가 선택 된 자식 노드에 대 한 축소 취소 됩니다. 노드 옆에 빼기 기호를 클릭 하면 표준 노드 축소를 허용 하기 위해는 <xref:System.Windows.Forms.TreeView.BeforeCollapse> 이벤트 처리기가 제거 합니다.  
  
 이 문제를 처리 하 여 구현할 수도 있습니다는 <xref:System.Windows.Forms.TreeView.BeforeExpand> 이벤트, 해당 항목에 대 한 예제와 같이 합니다.  
  
 전체 예제를 참조 하십시오.는 <xref:System.Windows.Forms.TreeView.%23ctor%2A> 생성자 참조 항목입니다.  
  
 [!code-cpp[TreeViewShowCheckedNodes2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewShowCheckedNodes2/CPP/treeviewshowcheckednodes2.cpp#2)]
 [!code-csharp[TreeViewShowCheckedNodes2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewShowCheckedNodes2/CS/treeviewshowcheckednodes2.cs#2)]
 [!code-vb[TreeViewShowCheckedNodes2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewShowCheckedNodes2/VB/treeviewshowcheckednodes2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeView.OnBeforeCollapse(System.Windows.Forms.TreeViewCancelEventArgs)" />
        <altmember cref="E:System.Windows.Forms.TreeView.AfterCollapse" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnAfterCollapse(System.Windows.Forms.TreeViewEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BeforeExpand">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeViewCancelEventHandler BeforeExpand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeViewCancelEventHandler BeforeExpand" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.BeforeExpand" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BeforeExpand As TreeViewCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TreeViewCancelEventHandler ^ BeforeExpand;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 노드가 확장되기 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는의 축소 상태를 변경 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.TreeView> 선택된 된 노드가 모두 표시 되도록 합니다. 먼저 모든 노드가 축소 되 고 처리기에 대 한 추가 됩니다는 <xref:System.Windows.Forms.TreeView.BeforeExpand> 이벤트입니다. 다음에는 모든 노드가 확장 됩니다. <xref:System.Windows.Forms.TreeView.BeforeExpand> 있는지 여부 지정된 된 노드에 자식 노드가 선택 된 이벤트 처리기를 확인 합니다. 노드가 선택 된 자식이 없는 경우 해당 노드에 대 한 확장 취소 됩니다. 노드 옆의 더하기 기호를 클릭 하면 표준 노드 확장을 허용 하기 위해는 <xref:System.Windows.Forms.TreeView.BeforeExpand> 이벤트 처리기가 제거 합니다.  
  
 이 문제를 처리 하 여 구현할 수도 있습니다는 <xref:System.Windows.Forms.TreeView.BeforeCollapse> 이벤트, 해당 항목에 대 한 예제와 같이 합니다.  
  
 전체 예제를 참조 하십시오.는 <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> 참조 항목입니다.  
  
 [!code-cpp[TreeViewShowCheckedNodes1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewShowCheckedNodes1/CPP/treeviewshowcheckednodes1.cpp#2)]
 [!code-csharp[TreeViewShowCheckedNodes1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewShowCheckedNodes1/CS/treeviewshowcheckednodes1.cs#2)]
 [!code-vb[TreeViewShowCheckedNodes1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewShowCheckedNodes1/VB/treeviewshowcheckednodes1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeView.OnBeforeExpand(System.Windows.Forms.TreeViewCancelEventArgs)" />
        <altmember cref="E:System.Windows.Forms.TreeView.AfterExpand" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnAfterExpand(System.Windows.Forms.TreeViewEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BeforeLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.NodeLabelEditEventHandler BeforeLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.NodeLabelEditEventHandler BeforeLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.BeforeLabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BeforeLabelEdit As NodeLabelEditEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::NodeLabelEditEventHandler ^ BeforeLabelEdit;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NodeLabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 노드 레이블 텍스트가 편집되기 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.TreeView.BeforeLabelEdit> <xref:System.Windows.Forms.TreeView.AfterSelect> 및 <xref:System.Windows.Forms.TreeView.TopNode%2A> 멤버입니다. 이 예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여넣습니다는 `TreeView` 라는 컨트롤을 `TreeView1`합니다. 호출 된 `InitializeTreeView` 폼의 생성자 또는 `Load` 메서드.  
  
 [!code-cpp[System.Windows.Forms.TreeViewAndPrintPreview#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewAndPrintPreview/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.TreeViewAndPrintPreview#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewAndPrintPreview/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.TreeViewAndPrintPreview#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TreeViewAndPrintPreview/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.TreeViewAndPrintPreview#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewAndPrintPreview/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.TreeViewAndPrintPreview#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewAndPrintPreview/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.TreeViewAndPrintPreview#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TreeViewAndPrintPreview/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeView.OnBeforeLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.TreeView.AfterLabelEdit" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnAfterLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BeforeSelect">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeViewCancelEventHandler BeforeSelect;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeViewCancelEventHandler BeforeSelect" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.BeforeSelect" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BeforeSelect As TreeViewCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TreeViewCancelEventHandler ^ BeforeSelect;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 노드가 선택되기 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.TreeView.BeforeSelect> 이벤트입니다. 이 보고서를 사용 하면 이벤트 발생 하 고 디버깅 시 활용할 수 하는 경우는 방법을 배웁니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.TreeView> 라는 `TreeView1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.TreeView.BeforeSelect> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#635](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#635)]
 [!code-vb[System.Windows.Forms.EventExamples#635](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#635)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeView.OnBeforeSelect(System.Windows.Forms.TreeViewCancelEventArgs)" />
        <altmember cref="E:System.Windows.Forms.TreeView.AfterSelect" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnAfterSelect(System.Windows.Forms.TreeViewEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.BeginUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>트리 뷰의 다시 그리기를 비활성화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 성능을 유지 하기 위해 항목을 한 번에 하나씩 추가 되는 동안는 <xref:System.Windows.Forms.TreeView>, 호출 된 <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> 메서드. <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> 메서드 때까지에서 컨트롤 않도록는 <xref:System.Windows.Forms.TreeView.EndUpdate%2A> 메서드를 호출 합니다.  
  
 트리 뷰 컨트롤에 항목을 추가 하는 기본 방법은 사용 하는 것은 <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> 메서드 트리 뷰를 트리 노드 항목의 배열입니다. 그러나 한 번에 한 항목을 추가 하려는 경우 사용 된 <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> 방지 하기 위해는 <xref:System.Windows.Forms.TreeView> 컨트롤이 추가 작업 동안 그려지지 합니다. 컨트롤 그리기를 다시 시작 하려면를 호출 하는 <xref:System.Windows.Forms.TreeView.EndUpdate%2A> 모든 트리 노드 트리 뷰에 추가 되 면 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서 고객 정보를 표시 한 <xref:System.Windows.Forms.TreeView> 제어 합니다. 트리 루트 노드는 고객 이름이 표시 하 고 자식 트리 노드를 각 고객에 게 할당 된 주문 번호를 표시 합니다. 이 예제에서는 1000 명의 고객이 15 주문이 표시 됩니다. 다시는 <xref:System.Windows.Forms.TreeView> 를 사용 하 여 표시 되지 않는지는 <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> 및 <xref:System.Windows.Forms.TreeView.EndUpdate%2A> 메서드 및 대기 <xref:System.Windows.Forms.Cursor> 표시 됩니다는 동안는 <xref:System.Windows.Forms.TreeView> 만들고 그리는 <xref:System.Windows.Forms.TreeNode> 개체입니다. 이 예제를 실행 하려면는 `Customer` 개체의 컬렉션을 저장할 수 있는 `Order` 개체입니다. 또한 커서 파일 이라는 있어야 `MyWait.cur` 의 인스턴스를 생성 한에 해당 하며 응용 프로그램 디렉터리는 <xref:System.Windows.Forms.TreeView> 컨트롤에 <xref:System.Windows.Forms.Form>합니다.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeView.EndUpdate" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.BorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderStyle As BorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BorderStyle BorderStyle { System::Windows::Forms::BorderStyle get(); void set(System::Windows::Forms::BorderStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 뷰 컨트롤의 테두리 스타일을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Forms.BorderStyle" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Forms.TreeView.BorderStyle%2A> 속성이 <xref:System.Windows.Forms.BorderStyle.Fixed3D>, <xref:System.Windows.Forms.TreeView> 는 오목한, 3 차원 표시 합니다. 평면에 테두리를 표시 하는 <xref:System.Windows.Forms.TreeView> 제어, 설정는 <xref:System.Windows.Forms.BorderStyle> 속성을 <xref:System.Windows.Forms.BorderStyle.FixedSingle>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.BorderStyle> 열거형 및 <xref:System.Windows.Forms.TreeView.BorderStyle%2A>, <xref:System.Windows.Forms.TreeView.ShowLines%2A>, <xref:System.Windows.Forms.TreeView.Scrollable%2A>, <xref:System.Windows.Forms.TreeView.HideSelection%2A> 및 <xref:System.Windows.Forms.TreeView.ShowRootLines%2A> 속성입니다. 이 예제를 실행 하려면 호출 폼에 다음 코드를 붙여넣습니다는 `InitializeTreeView` 폼의 생성자 또는 `Load` 메서드.  
  
 [!code-cpp[System.Windows.Forms.TreeViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.TreeViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.TreeViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TreeViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">할당된 값이 <see cref="T:System.Windows.Forms.BorderStyle" /> 값 중 하나가 아닌 경우</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="CheckBoxes">
      <MemberSignature Language="C#" Value="public bool CheckBoxes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckBoxes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.CheckBoxes" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckBoxes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckBoxes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 뷰 컨트롤의 트리 노드 옆에 확인란이 표시되는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          tree view 컨트롤의 각 트리 노드 옆에 확인란이 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 왼쪽의 트리 노드 레이블이 트리 노드 확인란이 표시는 <xref:System.Drawing.Image>있는 경우. 확인란을 한 번에 여러 개의 트리 노드를 선택할 수 있습니다.  
  
 경우는 <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> 속성의는 <xref:System.Windows.Forms.TreeView> 로 설정 된 `true`, 및 <xref:System.Windows.Forms.TreeView.StateImageList%2A> 속성이 설정 되어 각 <xref:System.Windows.Forms.TreeNode> 에 포함 되어 있는 <xref:System.Windows.Forms.TreeView> 첫 번째와 두 번째 이미지를 표시는 <xref:System.Windows.Forms.TreeView.StateImageList%2A> 나타내기 위해는 검사 되지 않은 상태 또는 선택 된, 각각. 그러나 표시 된 이미지 다음과 같은 상황이 발생 하는 경우 달라질 수 있습니다: 경우는 <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> 0 이나 1이 아닌 값으로 설정 되어 있는 노드의 있습니다 및 <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> 부모 <xref:System.Windows.Forms.TreeView> 로 설정 된 `false`, <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> 되지 것입니다 속성이 설정 되지 않은 나타내는-1을 자동으로 다시 설정 합니다. 이 경우 지정 된 인덱스 위치의 상태 이미지 표시 됩니다. 경우 <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> 로 설정 된 `true` 다시 첫 번째 및 두 번째 등의 이미지는 <xref:System.Windows.Forms.TreeView.StateImageList%2A> 각각 checked 또는 unchecked 상태를 나타내기 위해 표시 됩니다.  
  
> [!NOTE]
>  설정할 때의 <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> 실행 시 속성은 <xref:System.Windows.Forms.TreeView> 핸들을 다시 만드는 (참조 <xref:System.Windows.Forms.Control.RecreateHandle%2A?displayProperty=nameWithType>) 컨트롤의 모양을 업데이트 합니다. 이 인해 모든 트리 노드가 선택 된 제외 하 고 축소 <xref:System.Windows.Forms.TreeNode>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는의 축소 상태를 변경 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.TreeView> 선택된 된 노드가 모두 표시 되도록 합니다. 먼저 모든 노드가 축소 되 고 처리기에 대 한 추가 됩니다는 <xref:System.Windows.Forms.TreeView.BeforeExpand> 이벤트입니다. 다음에는 모든 노드가 확장 됩니다. <xref:System.Windows.Forms.TreeView.BeforeExpand> 있는지 여부 지정된 된 노드에 자식 노드가 선택 된 이벤트 처리기를 확인 합니다. 노드가 선택 된 자식이 없는 경우 해당 노드에 대 한 확장 취소 됩니다. 노드 옆의 더하기 기호를 클릭 하면 표준 노드 확장을 허용 하기 위해는 <xref:System.Windows.Forms.TreeView.BeforeExpand> 이벤트 처리기가 제거 합니다.  
  
 이 문제를 처리 하 여 구현할 수도 있습니다는 <xref:System.Windows.Forms.TreeView.BeforeCollapse> 이벤트, 해당 항목에 대 한 예제와 같이 합니다.  
  
 [!code-cpp[TreeViewShowCheckedNodes1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewShowCheckedNodes1/CPP/treeviewshowcheckednodes1.cpp#1)]
 [!code-csharp[TreeViewShowCheckedNodes1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewShowCheckedNodes1/CS/treeviewshowcheckednodes1.cs#1)]
 [!code-vb[TreeViewShowCheckedNodes1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewShowCheckedNodes1/VB/treeviewshowcheckednodes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TreeNode.Checked" />
      </Docs>
    </Member>
    <Member MemberName="CollapseAll">
      <MemberSignature Language="C#" Value="public void CollapseAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CollapseAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.CollapseAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub CollapseAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CollapseAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>모든 트리 노드를 축소합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeView.CollapseAll%2A> 메서드 모두 축소는 <xref:System.Windows.Forms.TreeNode> 개체에 있는 모든 자식 트리 노드를 포함 하는 <xref:System.Windows.Forms.TreeView> 제어 합니다.  
  
> [!NOTE]
>  상태는 <xref:System.Windows.Forms.TreeNode> 계속 발생 합니다. 예를 들어,를 호출 하는 <xref:System.Windows.Forms.TreeNode.Expand%2A> 루트 트리 노드에 대 한 메서드. 자식 트리 노드를 이전에 축소 되어 표시 되지 않은 경우 예 전에 확장 된 상태로 표시 됩니다. 호출 된 <xref:System.Windows.Forms.TreeView.CollapseAll%2A> 메서드는 모든 트리 노드 축소 된 상태로 표시 되는지 확인 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는의 축소 상태를 변경 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.TreeView> 선택된 된 노드가 모두 표시 되도록 합니다. 먼저 모든 노드가 축소 되 고 처리기에 대 한 추가 됩니다는 <xref:System.Windows.Forms.TreeView.BeforeExpand> 이벤트입니다. 다음에는 모든 노드가 확장 됩니다. <xref:System.Windows.Forms.TreeView.BeforeExpand> 있는지 여부 지정된 된 노드에 자식 노드가 선택 된 이벤트 처리기를 확인 합니다. 노드가 선택 된 자식이 없는 경우 해당 노드에 대 한 확장 취소 됩니다. 노드 옆의 더하기 기호를 클릭 하면 표준 노드 확장을 허용 하기 위해는 <xref:System.Windows.Forms.TreeView.BeforeExpand> 이벤트 처리기가 제거 합니다.  
  
 이 문제를 처리 하 여 구현할 수도 있습니다는 <xref:System.Windows.Forms.TreeView.BeforeCollapse> 이벤트, 해당 항목에 대 한 예제와 같이 합니다.  
  
 전체 예제를 참조 하십시오.는 <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> 참조 항목입니다.  
  
 [!code-cpp[TreeViewShowCheckedNodes1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewShowCheckedNodes1/CPP/treeviewshowcheckednodes1.cpp#2)]
 [!code-csharp[TreeViewShowCheckedNodes1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewShowCheckedNodes1/CS/treeviewshowcheckednodes1.cs#2)]
 [!code-vb[TreeViewShowCheckedNodes1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewShowCheckedNodes1/VB/treeviewshowcheckednodes1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNode.Collapse" />
        <altmember cref="M:System.Windows.Forms.TreeView.ExpandAll" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>컨트롤의 핸들을 만듭니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤 핸들이 만들어지는 경우 필요한 작성 매개 변수를 가져옵니다.</summary>
        <value>만들기 매개 변수입니다.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermissionFlag">속성 값을 가져올 때 관리 되지 않는 코드에 액세스 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤의 기본 크기를 가져옵니다.</summary>
        <value>컨트롤의 기본 <see cref="T:System.Drawing.Size" />입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.DefaultSize" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
        <summary>
          <see cref="T:System.Windows.Forms.TreeView" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 public `Dispose` 메서드 및 <xref:System.Object.Finalize%2A> 메서드. `Dispose` 보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다. <xref:System.Object.Finalize%2A> 호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.  
  
 경우는 `disposing` 매개 변수가 true 이면이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <xref:System.Windows.Forms.TreeView> 참조 합니다. 이 메서드는 참조되는 각 개체의 `Dispose` 메서드를 호출합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다. 재정의 하는 경우 <see langword="Dispose(Boolean)" /> 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 <see langword="Dispose" />합니다. 구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose(Boolean)" />, 참조 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.  
  
 에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see cref="M:System.Object.Finalize" />, 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Finalize 메서드를 재정의](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected override bool DoubleBuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.DoubleBuffered" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Property DoubleBuffered As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool DoubleBuffered { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤에서 보조 버퍼를 사용하여 화면을 다시 그릴 것인지를 나타내는 값을 가져오거나 설정합니다. <see cref="P:System.Windows.Forms.TreeView.DoubleBuffered" /> 속성은 <see cref="T:System.Windows.Forms.TreeView" /> 컨트롤에 영향을 주지 않습니다.</summary>
        <value>
          컨트롤에서 보조 버퍼를 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정의 <xref:System.Windows.Forms.TreeView.DoubleBuffered%2A> 속성에 영향을 주지 않습니다는 <xref:System.Windows.Forms.TreeView> 제어 합니다. 깜빡임 줄이기 하려는 경우 때는 <xref:System.Windows.Forms.TreeView> 가 사용 하 여 그려져는 <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> 및 <xref:System.Windows.Forms.TreeView.EndUpdate%2A> 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeViewDrawMode DrawMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.TreeViewDrawMode DrawMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.DrawMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DrawMode As TreeViewDrawMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TreeViewDrawMode DrawMode { System::Windows::Forms::TreeViewDrawMode get(); void set(System::Windows::Forms::TreeViewDrawMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewDrawMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤을 그리는 모드를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Forms.TreeViewDrawMode" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Windows.Forms.TreeViewDrawMode.Normal" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 노드는 <xref:System.Windows.Forms.TreeView> 운영 체제에서 일반적으로 그려집니다. <xref:System.Windows.Forms.TreeView.DrawMode%2A> 속성을 사용 하면 노드 모양을 사용자 지정할 수 있습니다. 이 작업을 수행 하려면 설정 <xref:System.Windows.Forms.TreeView.DrawMode%2A> 를 <xref:System.Windows.Forms.TreeViewDrawMode.OwnerDrawAll?displayProperty=nameWithType> 또는 <xref:System.Windows.Forms.TreeViewDrawMode.OwnerDrawText?displayProperty=nameWithType> 에 대 한 처리기를 제공 하 고는 <xref:System.Windows.Forms.TreeView.DrawNode> 이벤트입니다. 이 소유자 그리기 호출 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에는 사용자 지정 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.TreeView> 소유자 그리기를 사용 하 여 제어 합니다. <xref:System.Windows.Forms.TreeView> 예제에서 컨트롤 표준 노드 레이블 함께 선택적 노드 태그를 표시 합니다. 사용 하 여 지정 된 노드 태그는 <xref:System.Windows.Forms.TreeNode.Tag%2A?displayProperty=nameWithType> 속성입니다. <xref:System.Windows.Forms.TreeView> 또한 사용 하 여 사용자 지정 강조 색을 포함 하는 사용자 지정 색을 제어 합니다.  
  
 대부분의 사용자 지정할 수 있습니다는 <xref:System.Windows.Forms.TreeView> 색 설정에 따라 색 속성을 하지만 선택의 강조 색을 속성으로 사용할 수 없습니다. 또한 노드 레이블 주위에 기본 선택 항목 강조 표시 사각형을 확장합니다. 소유자 그리기 노드 태그 수 있을 만큼 큰 사용자 지정된 강조 표시 사각형을 그리는 및 노드 태그를 그리는 데 사용 되어야 합니다.  
  
 전체 예제를 참조 하십시오.는 <xref:System.Windows.Forms.TreeView.DrawNode> 참조 항목입니다.  
  
 [!code-cpp[TreeViewOwnerDraw#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewOwnerDraw/CPP/treeviewownerdraw.cpp#2)]
 [!code-csharp[TreeViewOwnerDraw#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewOwnerDraw/CS/treeviewownerdraw.cs#2)]
 [!code-vb[TreeViewOwnerDraw#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewOwnerDraw/VB/treeviewownerdraw.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">속성 값이 올바른 <see cref="T:System.Windows.Forms.TreeViewDrawMode" /> 값이 아닌 경우</exception>
        <altmember cref="T:System.Windows.Forms.TreeViewDrawMode" />
        <altmember cref="E:System.Windows.Forms.TreeView.DrawNode" />
      </Docs>
    </Member>
    <Member MemberName="DrawNode">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawTreeNodeEventHandler DrawNode;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawTreeNodeEventHandler DrawNode" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.DrawNode" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawNode As DrawTreeNodeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawTreeNodeEventHandler ^ DrawNode;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawTreeNodeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.TreeView" />가 그려지고 <see cref="P:System.Windows.Forms.TreeView.DrawMode" /> 속성이 <see cref="F:System.Windows.Forms.TreeViewDrawMode.Normal" />이 아닌 <see cref="T:System.Windows.Forms.TreeViewDrawMode" /> 값으로 설정되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트를 사용 하 여 노드 모양을 사용자 지정 하는 <xref:System.Windows.Forms.TreeView> 소유자 그리기를 사용 하 여 제어 합니다.  
  
 이 이벤트는 경우에만 <xref:System.Windows.Forms.TreeView.DrawMode%2A> 속성이 <xref:System.Windows.Forms.TreeViewDrawMode> 값 <xref:System.Windows.Forms.TreeViewDrawMode.OwnerDrawAll> 또는 <xref:System.Windows.Forms.TreeViewDrawMode.OwnerDrawText>합니다. 다음 표에서 방법을 <xref:System.Windows.Forms.TreeNode> 때 사용자 지정할 수는 <xref:System.Windows.Forms.TreeView.DrawMode%2A> 속성이 이러한 값으로 설정 되어 있습니다.  
  
|DrawMode 속성 값|TreeNode 사용자 지정|  
|-----------------------------|----------------------------|  
|<xref:System.Windows.Forms.TreeViewDrawMode.OwnerDrawText>|<xref:System.Windows.Forms.TreeNode> 레이블 영역을 사용자 지정할 수 있습니다. 다른 모든 <xref:System.Windows.Forms.TreeNode> 요소는 자동으로 그려집니다.|  
|<xref:System.Windows.Forms.TreeViewDrawMode.OwnerDrawAll>|전체 모양을 <xref:System.Windows.Forms.TreeNode> 사용자 지정할 수 있습니다. 아이콘, 확인란, 더하기 및 빼기 기호, 및 노드를 연결 하는 선을 그려야 수동으로 필요한 경우.|  
  
 지역 하는 <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=nameWithType> 값이 지정 된 글꼴을 사용 하 여 그린 경우 차지는 <xref:System.Windows.Forms.TreeView> 컨트롤의 <xref:System.Windows.Forms.Control.Font%2A> 속성은 선택 하는 노드를 클릭할 수 있는 영역입니다. 이 적중 횟수 테스트 영역을 이라고 합니다. 이 영역 외부에 그리면 가시 영역을 클릭할 때 노드를 선택 하는 사용자 고유의 코드를 제공 해야 합니다.  
  
 적중 횟수 테스트 영역에 해당 하는 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.Bounds%2A?displayProperty=nameWithType> 사용할 경우이 속성 <xref:System.Windows.Forms.TreeViewDrawMode.OwnerDrawText>합니다. 사용 하는 경우 <xref:System.Windows.Forms.TreeViewDrawMode.OwnerDrawAll>그러나는 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.Bounds%2A?displayProperty=nameWithType> 속성의 전체 너비를 포함 합니다.는 <xref:System.Windows.Forms.TreeView>합니다. 이 경우 가져와서 적중 횟수 테스트 영역에 액세스할 수 있습니다는 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.Node%2A?displayProperty=nameWithType> 값에 액세스 하 고 해당 <xref:System.Windows.Forms.TreeNode.Bounds%2A?displayProperty=nameWithType> 속성입니다. 그런 다음이 경계 내에서 노드의 적중 횟수 테스트 영역 그리거나 적중 횟수 테스트 코드에 직접 제공할 수 있습니다. 설정 하는 <xref:System.Windows.Forms.TreeNode.NodeFont%2A?displayProperty=nameWithType> 속성의 전체에 대해 지정 된 글꼴을 사용 하 여 계산 된 적중 횟수 테스트 영역 크기를 변경 되지 않습니다 <xref:System.Windows.Forms.TreeView>합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에는 사용자 지정 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.TreeView> 소유자 그리기를 사용 하 여 제어 합니다. <xref:System.Windows.Forms.TreeView> 예제에서 컨트롤 표준 노드 레이블 함께 선택적 노드 태그를 표시 합니다. 사용 하 여 지정 된 노드 태그는 <xref:System.Windows.Forms.TreeNode.Tag%2A?displayProperty=nameWithType> 속성입니다. <xref:System.Windows.Forms.TreeView> 또한 사용 하 여 사용자 지정 강조 색을 포함 하는 사용자 지정 색을 제어 합니다.  
  
 대부분의 사용자 지정할 수 있습니다는 <xref:System.Windows.Forms.TreeView> 색 설정에 따라 색 속성을 하지만 선택의 강조 색을 속성으로 사용할 수 없습니다. 또한 노드 레이블 주위에 기본 선택 항목 강조 표시 사각형을 확장합니다. 소유자 그리기 노드 태그 수 있을 만큼 큰 사용자 지정된 강조 표시 사각형을 그리는 및 노드 태그를 그리는 데 사용 되어야 합니다.  
  
 예제에 대 한 처리기는 <xref:System.Windows.Forms.TreeView.DrawNode> 노드 태그와 사용자 지정 선택 수동으로 강조 표시 하는 이벤트 그립니다. 선택 되지 않은 노드는 사용자 지정이 필요 하지 않습니다. 이러한 경우는 <xref:System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault%2A?displayProperty=nameWithType> 속성이 `true` 운영 체제에서 그려질 수 있도록 합니다.  
  
 또한에 대 한 처리기는 <xref:System.Windows.Forms.Control.MouseDown> 이벤트 적중 테스트를 제공 합니다. 기본적으로는 레이블 주위의 영역을 클릭 해 서만 노드를 선택할 수 있습니다. <xref:System.Windows.Forms.Control.MouseDown> 이벤트 처리기가 있는 경우이 지역 내에서 또는 노드 태그 주변 지역 내에서 아무 곳 이나 클릭 된 노드를 선택 합니다.  
  
 [!code-cpp[TreeViewOwnerDraw#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewOwnerDraw/CPP/treeviewownerdraw.cpp#1)]
 [!code-csharp[TreeViewOwnerDraw#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewOwnerDraw/CS/treeviewownerdraw.cs#1)]
 [!code-vb[TreeViewOwnerDraw#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewOwnerDraw/VB/treeviewownerdraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TreeView.DrawMode" />
        <altmember cref="T:System.Windows.Forms.DrawTreeNodeEventArgs" />
        <altmember cref="T:System.Windows.Forms.TreeNode" />
        <altmember cref="T:System.Windows.Forms.TreeViewDrawMode" />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.EndUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>트리 뷰의 다시 그리기를 활성화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 성능을 유지 하기 위해 항목을 한 번에 하나씩 추가 되는 동안는 <xref:System.Windows.Forms.TreeView>, 호출 된 <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> 메서드. <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> 메서드 때까지에서 컨트롤 않도록는 <xref:System.Windows.Forms.TreeView.EndUpdate%2A> 메서드를 호출 합니다.  
  
 트리 뷰 컨트롤에 항목을 추가 하는 기본 방법은 사용 하는 것은 <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> 메서드 트리 뷰를 트리 노드 항목의 배열입니다. 그러나 한 번에 한 항목을 추가 하려는 경우 사용 된 <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> 방지 하기 위해는 <xref:System.Windows.Forms.TreeView> 컨트롤이 추가 작업 동안 그려지지 합니다. 컨트롤 그리기를 다시 시작 하려면을 호출 하 여 <xref:System.Windows.Forms.TreeView.EndUpdate%2A> 모든 트리 노드 트리 뷰에 추가 되 면 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서 고객 정보를 표시 한 <xref:System.Windows.Forms.TreeView> 제어 합니다. 트리 루트 노드는 고객 이름이 표시 하 고 자식 트리 노드를 각 고객에 게 할당 된 주문 번호를 표시 합니다. 이 예제에서는 1000 명의 고객이 15 주문이 표시 됩니다. 다시는 <xref:System.Windows.Forms.TreeView> 를 사용 하 여 표시 되지 않는지는 <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> 및 <xref:System.Windows.Forms.TreeView.EndUpdate%2A> 메서드 및 대기 <xref:System.Windows.Forms.Cursor> 표시 됩니다는 동안는 <xref:System.Windows.Forms.TreeView> 만들고 그리는 <xref:System.Windows.Forms.TreeNode> 개체입니다. 이 예제를 실행 하려면는 `Customer` 개체의 컬렉션을 저장할 수 있는 `Order` 개체입니다. 또한 커서 파일 이라는 있어야 `MyWait.cur` 의 인스턴스를 생성 한에 해당 하며 응용 프로그램 디렉터리는 <xref:System.Windows.Forms.TreeView> 컨트롤에 <xref:System.Windows.Forms.Form>합니다.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeView.BeginUpdate" />
      </Docs>
    </Member>
    <Member MemberName="ExpandAll">
      <MemberSignature Language="C#" Value="public void ExpandAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExpandAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.ExpandAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExpandAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExpandAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>모든 트리 노드를 확장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeView.ExpandAll%2A> 메서드는 모든 확장는 <xref:System.Windows.Forms.TreeNode> 개체에 있는 모든 자식 트리 노드를 포함 하는 <xref:System.Windows.Forms.TreeView> 제어 합니다.  
  
> [!NOTE]
>  상태는 <xref:System.Windows.Forms.TreeNode> 계속 발생 합니다. 예를 들어,를 호출 하 여 <xref:System.Windows.Forms.TreeNode.ExpandAll%2A> 메서드 및 개별 루트 트리 노드가 축소 됩니다. 자식 트리 노드 축소 되지 하 고 루트 트리 노드를 다시 확장 되 면 이전에 확장 상태로 표시 됩니다. 호출 된 <xref:System.Windows.Forms.TreeView.CollapseAll%2A> 메서드는 모든 트리 노드 축소 된 상태로 표시 되는지 확인 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 확장의 모든 트리 노드는 <xref:System.Windows.Forms.TreeView> 시점을 제어할는 <xref:System.Windows.Forms.CheckBox> 선택 되 고 축소는 <xref:System.Windows.Forms.TreeNode.FirstNode%2A> 때는 <xref:System.Windows.Forms.CheckBox> 지워집니다. 이 예제를 실행 하려면는 <xref:System.Windows.Forms.Form> 와 <xref:System.Windows.Forms.CheckBox>, 및 <xref:System.Windows.Forms.TreeView> 보호로 <xref:System.Windows.Forms.TreeNodeCollection> 에 여러 개의 <xref:System.Windows.Forms.TreeNode> 개체 (가급적 3 개 이상의 수준).  
  
 [!code-cpp[TreeNode_ForeColor#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNode_ForeColor/CPP/treenode_forecolor.cpp#1)]
 [!code-csharp[TreeNode_ForeColor#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNode_ForeColor/CS/treenode_forecolor.cs#1)]
 [!code-vb[TreeNode_ForeColor#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNode_ForeColor/VB/treenode_forecolor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNode.Expand" />
        <altmember cref="M:System.Windows.Forms.TreeView.CollapseAll" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤의 전경색을 가져오거나 설정합니다.</summary>
        <value>컨트롤의 전경 <see cref="T:System.Drawing.Color" />입니다. 기본값은 <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> 속성 값입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.ForeColor" />
      </Docs>
    </Member>
    <Member MemberName="FullRowSelect">
      <MemberSignature Language="C#" Value="public bool FullRowSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FullRowSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.FullRowSelect" />
      <MemberSignature Language="VB.NET" Value="Public Property FullRowSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FullRowSelect { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>강조 표시 선택 영역이 트리 뷰 컨트롤의 너비로 확장되는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          강조 표시 선택 영역이 tree view 컨트롤의 너비로 확장되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때 <xref:System.Windows.Forms.TreeView.FullRowSelect%2A> 은 `true`강조 표시 선택 영역이 트리 보기의 전체 너비로 확장, 트리 노드 레이블이 방금 너비 대신 표시 합니다. <xref:System.Windows.Forms.TreeView.FullRowSelect%2A> 속성은 무시 <xref:System.Windows.Forms.TreeView.ShowLines%2A> 로 설정 된 `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용자 지정 <xref:System.Windows.Forms.TreeView>합니다. 상속 하 여는 <xref:System.Windows.Forms.TreeView> 클래스,이 사용자 지정 버전에는 일반적인의 모든 기능 <xref:System.Windows.Forms.TreeView>합니다. 고유한 모양을 제공 생성자에서 다양 한 속성 값을 변경 합니다. 때문에 <xref:System.Windows.Forms.TreeView.ShowPlusMinus%2A> 속성이 `false`, 사용자 지정 된 컨트롤 재정의 <xref:System.Windows.Forms.TreeView.OnAfterSelect%2A> 메서드 노드를 확장 하 고 클릭할 때 축소할 수 있습니다.  
  
 컨트롤을 이러한 방식으로 사용자 지정 된 컨트롤 속성을 개별 프로젝트 각각에 지정할 필요 없이 일관 된 인터페이스를 제공 하기 쉽게 만들어 조직 전체에서 사용할 수 있습니다.  
  
 [!code-cpp[TreeViewCustomization#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewCustomization/CPP/treeviewcustomization.cpp#2)]
 [!code-csharp[TreeViewCustomization#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewCustomization/CS/treeviewcustomization.cs#2)]
 [!code-vb[TreeViewCustomization#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewCustomization/VB/treeviewcustomization.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemRenderStyles">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.OwnerDrawPropertyBag GetItemRenderStyles (System.Windows.Forms.TreeNode node, int state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Windows.Forms.OwnerDrawPropertyBag GetItemRenderStyles(class System.Windows.Forms.TreeNode node, int32 state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.GetItemRenderStyles(System.Windows.Forms.TreeNode,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetItemRenderStyles (node As TreeNode, state As Integer) As OwnerDrawPropertyBag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::OwnerDrawPropertyBag ^ GetItemRenderStyles(System::Windows::Forms::TreeNode ^ node, int state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.OwnerDrawPropertyBag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
        <Parameter Name="state" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" />를 반환할 <see cref="T:System.Windows.Forms.OwnerDrawPropertyBag" />입니다.</param>
        <param name="state">
          <see cref="T:System.Windows.Forms.TreeNode" />의 표시 상태입니다.</param>
        <summary>지정된 <see cref="T:System.Windows.Forms.OwnerDrawPropertyBag" />에 대한 <see cref="T:System.Windows.Forms.TreeNode" />를 반환합니다.</summary>
        <returns>지정된 <see cref="T:System.Windows.Forms.TreeNode" />에 대한 <see cref="T:System.Windows.Forms.OwnerDrawPropertyBag" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNodeAt">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 위치에 있는 트리 노드를 검색합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNodeAt">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode GetNodeAt (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.TreeNode GetNodeAt(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.GetNodeAt(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNodeAt (pt As Point) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::TreeNode ^ GetNodeAt(System::Drawing::Point pt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">노드를 평가하고 검색할 <see cref="T:System.Drawing.Point" />입니다.</param>
        <summary>지정된 지점에 있는 트리 노드를 검색합니다.</summary>
        <returns>트리 뷰(클라이언트) 좌표에서 지정된 지점에 있는 <see cref="T:System.Windows.Forms.TreeNode" />이고, 해당 위치에 노드가 없는 경우에는 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 전달할 수 있습니다는 <xref:System.Windows.Forms.MouseEventArgs.X%2A?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.MouseEventArgs.Y%2A?displayProperty=nameWithType> 좌표는 <xref:System.Windows.Forms.Control.MouseDown> 이벤트로는 <xref:System.Drawing.Point.X%2A> 및 <xref:System.Drawing.Point.Y%2A> 의 새 값 <xref:System.Drawing.Point>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
      </Docs>
    </Member>
    <Member MemberName="GetNodeAt">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode GetNodeAt (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.TreeNode GetNodeAt(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.GetNodeAt(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNodeAt (x As Integer, y As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::TreeNode ^ GetNodeAt(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">노드를 평가하고 검색할 <see cref="P:System.Drawing.Point.X" /> 위치입니다.</param>
        <param name="y">노드를 평가하고 검색할 <see cref="P:System.Drawing.Point.Y" /> 위치입니다.</param>
        <summary>지정된 좌표의 지점에서 트리 노드를 검색합니다.</summary>
        <returns>트리 뷰(클라이언트) 좌표에서 지정된 위치에 있는 <see cref="T:System.Windows.Forms.TreeNode" />이고, 해당 위치에 노드가 없는 경우에는 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 전달할 수 있습니다는 <xref:System.Windows.Forms.MouseEventArgs.X%2A?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.MouseEventArgs.Y%2A?displayProperty=nameWithType> 좌표는 <xref:System.Windows.Forms.Control.MouseDown> 이벤트로는 `x` 및 `y` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용자가 사용 하 여 루트가 아닌 트리 노드를 편집할 수 있습니다는 <xref:System.Windows.Forms.ContextMenu>합니다. 마우스를 마우스 오른쪽 단추로 클릭할 때는 <xref:System.Windows.Forms.TreeNode> 해당 위치가 결정 하 고 이라는 변수에 저장 `mySelectedNode`합니다. 루트가 아닌 트리 노드를 선택 하 여 노드 편집을 사용 하면 편집 가능한 상태에 놓입니다. 사용자가 트리 노드 레이블 편집을 후 새 레이블 텍스트 평가 되 고 저장 합니다. 이 예에서는 여러 문자 레이블 텍스트에서 유효 간주 됩니다. 잘못 된 문자 중 하나에 레이블 문자열이 있거나 문자열이 비어, 사용자가 오류의 알림을 하 고 레이블을 이전 텍스트에 반환 됩니다.  
  
 [!code-cpp[classic treenode.beginedit example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic TreeNode.BeginEdit Example/CPP/source.cpp#1)]
 [!code-csharp[classic treenode.beginedit example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic TreeNode.BeginEdit Example/CS/source.cs#1)]
 [!code-vb[classic treenode.beginedit example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic TreeNode.BeginEdit Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
      </Docs>
    </Member>
    <Member MemberName="GetNodeCount">
      <MemberSignature Language="C#" Value="public int GetNodeCount (bool includeSubTrees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetNodeCount(bool includeSubTrees) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.GetNodeCount(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNodeCount (includeSubTrees As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNodeCount(bool includeSubTrees);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeSubTrees" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includeSubTrees">
          하위 트리에 포함되는 <see cref="T:System.Windows.Forms.TreeNode" /> 항목을 세면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>경우에 따라 모든 하위 트리에 있는 트리 노드를 포함하여 트리 뷰 컨트롤에 할당된 트리 노드의 수를 검색합니다.</summary>
        <returns>경우에 따라 모든 하위 트리에 있는 트리 노드를 포함하여 트리 뷰 컨트롤에 할당된 트리 노드의 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `includeSubTrees` 은 `true`, 결과 전체 형식 트리 구조에서 모든 트리 노드의 수입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.TreeView.PathSeparator%2A> 속성은 <xref:System.Windows.Forms.TreeView> 에 포함 된 자식 트리 노드 수를 표시 하 고는 <xref:System.Windows.Forms.TreeNodeCollection> 의 <xref:System.Windows.Forms.TreeView.SelectedNode%2A>합니다. 자식 트리 노드 트리 뷰 컨트롤의 전체 트리 노드를 백분율로 표시 됩니다. 이 예제를 실행 하려면는 <xref:System.Windows.Forms.Form> 와 <xref:System.Windows.Forms.Button>, 및 <xref:System.Windows.Forms.TreeView> 보호로 <xref:System.Windows.Forms.TreeNodeCollection> 에 여러 개의 <xref:System.Windows.Forms.TreeNode> 개체 (가급적 3 개 이상의 수준).  
  
 [!code-cpp[TreeNode_ForeColor#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNode_ForeColor/CPP/treenode_forecolor.cpp#2)]
 [!code-csharp[TreeNode_ForeColor#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNode_ForeColor/CS/treenode_forecolor.cs#2)]
 [!code-vb[TreeNode_ForeColor#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNode_ForeColor/VB/treenode_forecolor.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.TreeNode" />
      </Docs>
    </Member>
    <Member MemberName="HideSelection">
      <MemberSignature Language="C#" Value="public bool HideSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HideSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.HideSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property HideSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HideSelection { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 뷰에서 포커스가 사라질 때에도 선택된 트리 노드에서 강조 표시된 상태를 유지할지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          tree view에서 포커스가 사라질 때 선택된 트리 노드의 강조 표시가 해제되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성이로 설정 된 경우 `false`에서 선택 된 노드는 <xref:System.Windows.Forms.TreeView> 컨트롤이 유지 현재 선택 영역와는 다른 색으로 강조 표시 된 경우 색는 <xref:System.Windows.Forms.TreeView> 컨트롤이 포커스를 잃을 합니다. 폼에서 다른 컨트롤을 클릭 하거나 다른 컨트롤을 이동할 때 표시 되는 사용자가 선택한 항목을 변경 하지 않으려면이 속성을 사용할 수 있습니다.  
  
> [!NOTE]
>  경우 응용 프로그램의 액세스 고려 하는 것이 좋습니다 설정 하는 <xref:System.Windows.Forms.TreeView.HideSelection%2A> 속성을 `false`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.TreeView.HideSelection%2A> 속성입니다. 이 예제를 실행 하려면 호출 폼에 다음 코드를 붙여넣습니다는 `InitializeSelectedTreeView` 폼의 생성자 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리기입니다.  
  
 [!code-cpp[System.Windows.Forms.TreeViewExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewExample/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.TreeViewExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewExample/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.TreeViewExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TreeViewExample/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TreeView.SelectedNode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTest">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>점이 있을 경우 노드 정보를 제공합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeViewHitTestInfo HitTest (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.TreeViewHitTestInfo HitTest(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.HitTest(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function HitTest (pt As Point) As TreeViewHitTestInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::TreeViewHitTestInfo ^ HitTest(System::Drawing::Point pt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">노드 정보를 검색할 <see cref="T:System.Drawing.Point" />입니다.</param>
        <summary>점이 있을 경우 노드 정보를 제공합니다.</summary>
        <returns>노드 정보입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하 여 지점에 있는지 여부를 결정 하는 <xref:System.Windows.Forms.TreeNode> 노드 내에서 포인터가 있는 같이 레이블 또는 이미지 영역 및 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeViewHitTestInfo HitTest (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.TreeViewHitTestInfo HitTest(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.HitTest(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function HitTest (x As Integer, y As Integer) As TreeViewHitTestInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::TreeViewHitTestInfo ^ HitTest(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">노드 정보를 검색할 X 좌표입니다.</param>
        <param name="y">노드 정보를 검색할 Y 좌표입니다.</param>
        <summary>지정된 X, Y 좌표의 노드 정보를 제공합니다.</summary>
        <returns>노드 정보입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하 여 x 및 y 좌표 집합에 있는지 여부를 결정 하는 <xref:System.Windows.Forms.TreeNode> 노드 내에서 포인터가 있는 같이 레이블 또는 이미지 영역 및 합니다.  
  
   
  
## Examples  
 다음 코드를 사용 하는 방법을 보여 주는 코드 예제는 <xref:System.Windows.Forms.TreeNode.Level%2A>, <xref:System.Windows.Forms.TreeViewHitTestInfo.Node%2A>, 및 <xref:System.Windows.Forms.TreeView.HitTest%2A> 멤버입니다. 이 예제를 실행 하려면 포함 된 Windows Form을 만듭니다는 <xref:System.Windows.Forms.TreeView> 라는 `treeView1` 여러 수준의 노드를 채웁니다. 폼에 다음 코드를 붙여 넣고 연결할는 <xref:System.Windows.Forms.Control.MouseDown> 이벤트의 `treeView1` 와 `treeView1_MouseDown` 이 예제의 메서드.  
  
 [!code-cpp[System.Windows.Forms.TreeViewWhidbeyMembers#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/cpp/Form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.TreeViewWhidbeyMembers#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.TreeViewWhidbeyMembers#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HotTracking">
      <MemberSignature Language="C#" Value="public bool HotTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HotTracking" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.HotTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property HotTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HotTracking { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 지나갈 때 트리 노드 레이블이 하이퍼링크 모양을 취할지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          마우스 포인터가 지나갈 때 트리 노드 레이블이 하이퍼링크 모양을 취하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> 속성이 `true`, <xref:System.Windows.Forms.TreeView.HotTracking%2A> 속성이 적용 되지 않습니다.  
  
> [!NOTE]
>  경우는 <xref:System.Windows.Forms.TreeView.HotTracking%2A> 속성이 `true`, 각 위로 마우스 포인터 지나면서 하이퍼링크 모양 노드 레이블 취합니다 트리 합니다. <xref:System.Drawing.FontStyle.Underline> 글꼴 스타일에 적용 되는 <xref:System.Drawing.Font> 및 <xref:System.Windows.Forms.Control.ForeColor%2A> 파랑 링크로 표시 레이블으로 설정 됩니다. 사용자의 운영 체제의 인터넷 설정에 따라 모양을 제어 되지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용자 지정 <xref:System.Windows.Forms.TreeView>합니다. 상속 하 여는 <xref:System.Windows.Forms.TreeView> 클래스,이 사용자 지정 버전에는 일반적인의 모든 기능 <xref:System.Windows.Forms.TreeView>합니다. 고유한 모양을 제공 생성자에서 다양 한 속성 값을 변경 합니다. 때문에 <xref:System.Windows.Forms.TreeView.ShowPlusMinus%2A> 속성이 `false`, 사용자 지정 된 컨트롤 재정의 <xref:System.Windows.Forms.TreeView.OnAfterSelect%2A> 메서드 노드를 확장 하 고 클릭할 때 축소할 수 있도록 합니다.  
  
 컨트롤을 이러한 방식으로 사용자 지정 된 컨트롤 속성을 개별 프로젝트 각각에 지정할 필요 없이 일관 된 인터페이스를 제공 하기 쉽게 만들어 조직 전체에서 사용할 수 있습니다.  
  
 [!code-cpp[TreeViewCustomization#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewCustomization/CPP/treeviewcustomization.cpp#2)]
 [!code-csharp[TreeViewCustomization#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewCustomization/CS/treeviewcustomization.cs#2)]
 [!code-vb[TreeViewCustomization#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewCustomization/VB/treeviewcustomization.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageIndex">
      <MemberSignature Language="C#" Value="public int ImageIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ImageIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.ImageIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property ImageIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ImageIndex { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.NoneExcludedImageIndexConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Forms.RelatedImageList("ImageList")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 노드에 표시되는 기본 이미지의 이미지 목록 인덱스 값을 가져오거나 설정합니다.</summary>
        <value>0부터 시작하는 인덱스로, <see cref="T:System.Drawing.Image" />에서 <see cref="T:System.Windows.Forms.ImageList" />의 위치를 나타냅니다. 기본값은 0입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeView.ImageIndex%2A> 값은 인덱스의 한 <xref:System.Drawing.Image> 에 저장 된는 <xref:System.Windows.Forms.ImageList> 에 할당 된는 <xref:System.Windows.Forms.TreeView.ImageList%2A> 속성입니다.  
  
 <xref:System.Windows.Forms.TreeView.ImageKey%2A> 및 <xref:System.Windows.Forms.TreeView.ImageIndex%2A> 속성은 함께; 설정 된 다른는 무시 됩니다. 설정한 경우 <xref:System.Windows.Forms.TreeView.ImageKey%2A>, <xref:System.Windows.Forms.TreeView.ImageIndex%2A> -1로 자동 설정 됩니다. 또는 설정한 경우 <xref:System.Windows.Forms.TreeView.ImageIndex%2A>, <xref:System.Windows.Forms.TreeView.ImageKey%2A> 빈 문자열을 자동으로 설정 됩니다 ("").  
  
> [!NOTE]
>  설정할 때의 <xref:System.Windows.Forms.TreeView.ImageIndex%2A> 실행 시 속성은 <xref:System.Windows.Forms.TreeView> 핸들을 다시 만드는 (참조 <xref:System.Windows.Forms.Control.RecreateHandle%2A?displayProperty=nameWithType>) 컨트롤의 모양을 업데이트 합니다. 이 인해 모든 트리 노드가 선택 된 제외 하 고 축소 <xref:System.Windows.Forms.TreeNode>합니다.  
  
   
  
## Examples  
 다음 코드 예제를 만들고 할당는 <xref:System.Windows.Forms.ImageList> 에 <xref:System.Windows.Forms.TreeView> 컨트롤과 채우기는 <xref:System.Windows.Forms.TreeView> 보호로 <xref:System.Windows.Forms.TreeNode> 개체입니다. 트리 노드 이미지에서 할당 되는 <xref:System.Windows.Forms.ImageList> 선택 되거나 선택 하지 않은 상태에 있을 때 표시 되는 합니다. 이 예제를 실행 하려면는 <xref:System.Windows.Forms.Form> 를 포함 하는 <xref:System.Windows.Forms.TreeView>, 및 <xref:System.Collections.ArrayList> 포함 된 `Customer` 각각 포함 된 개체 `Order` 개체입니다. 가정 하는 `Customer` 및 `Order` 개체를 정의 합니다.  
  
 [!code-cpp[TreeNode_TreeNode#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNode_TreeNode/CPP/treenode_treenode.cpp#1)]
 [!code-csharp[TreeNode_TreeNode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNode_TreeNode/CS/treenode_treenode.cs#1)]
 [!code-vb[TreeNode_TreeNode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNode_TreeNode/VB/treenode_treenode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">지정된 인덱스가 0보다 작습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="ImageKey">
      <MemberSignature Language="C#" Value="public string ImageKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImageKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.ImageKey" />
      <MemberSignature Language="VB.NET" Value="Public Property ImageKey As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ImageKey { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ImageKeyConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Forms.RelatedImageList("ImageList")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>선택되지 않은 상태일 때 <see cref="T:System.Windows.Forms.TreeView" /> 컨트롤에서 각 노드의 기본 이미지 키를 가져오거나 설정합니다.</summary>
        <value>노드가 선택되지 않은 상태일 때 각 노드 <see cref="T:System.Windows.Forms.TreeView" /> 컨트롤에 대해 표시되는 기본 이미지 키입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeView.ImageKey%2A> 속성은 대/소문자 구분 합니다.  
  
 경우는 <xref:System.Windows.Forms.TreeNode> 이미지 집합에서 지정 된 이미지에 없는 <xref:System.Windows.Forms.TreeView.ImageKey%2A> 노드 선택 하지 않으면 속성이 표시 됩니다. 노드를 선택 하는 경우, 첫 번째 항목은 <xref:System.Windows.Forms.ImageList> 표시 됩니다.  
  
 <xref:System.Windows.Forms.TreeView.ImageKey%2A> 및 <xref:System.Windows.Forms.TreeView.ImageIndex%2A> 속성은 함께 다른 무시가 설정 된 경우를 의미 합니다. 설정 하는 경우는 <xref:System.Windows.Forms.TreeView.ImageKey%2A> 속성에는 <xref:System.Windows.Forms.TreeView.ImageIndex%2A> 속성이-1로 자동 설정 됩니다. 또는 설정 하는 경우는 <xref:System.Windows.Forms.TreeView.ImageIndex%2A> 속성에는 <xref:System.Windows.Forms.TreeView.ImageKey%2A> 빈 문자열을 자동으로 설정 됩니다 ("").  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList ImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList ImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.ImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property ImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ ImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 노드에서 사용하는 <see cref="T:System.Windows.Forms.ImageList" /> 개체가 들어 있는 <see cref="T:System.Drawing.Image" />를 가져오거나 설정합니다.</summary>
        <value>트리 노드에서 사용하는 <see cref="T:System.Windows.Forms.ImageList" /> 개체가 들어 있는 <see cref="T:System.Drawing.Image" />입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Forms.ImageList> 속성 값 이외의 다른 모든 항목은 `null`, 첫 번째를 표시 하는 모든 트리 노드 <xref:System.Drawing.Image> 에 저장 된는 <xref:System.Windows.Forms.ImageList>합니다. 목록에서 이미지를 설정 하 여 또는 선택 하지 않은 노드에 대 한 표시는 지정할 수는 <xref:System.Windows.Forms.TreeView.ImageIndex%2A> 및 <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> 속성입니다. 개별 <xref:System.Windows.Forms.TreeNode> 개체에서 설정 하 여 표시 되는 이미지를 지정할 수는 <xref:System.Windows.Forms.TreeNode.ImageIndex%2A> 및 <xref:System.Windows.Forms.TreeNode.SelectedImageIndex%2A> 속성입니다. 이러한 각 설정은 해당 설정을 무시 합니다 <xref:System.Windows.Forms.TreeView> 속성입니다.  
  
> [!NOTE]
>  .NET Framework 버전 1.1에에서는 이미지에 표시 되지 않도록 방지 하는 문제 <xref:System.Windows.Forms.TreeView> 노드 응용 프로그램 호출 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>합니다. 이 문제를 해결 하려면 <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> 에 프로그램 `Main` 메서드를 호출한 후에 즉시 <xref:System.Windows.Forms.Application.EnableVisualStyles%2A>합니다. 이 문제는 해결 된 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]합니다.  
  
   
  
## Examples  
 다음 코드 예제를 만들고 할당는 <xref:System.Windows.Forms.ImageList> 에 <xref:System.Windows.Forms.TreeView> 컨트롤과 채우기는 <xref:System.Windows.Forms.TreeView> 보호로 <xref:System.Windows.Forms.TreeNode> 개체입니다. 트리 노드 이미지에서 할당 되는 <xref:System.Windows.Forms.ImageList> 선택 되거나 선택 하지 않은 상태에 있을 때 표시 되는 합니다. 이 예제를 실행 하려면는 <xref:System.Windows.Forms.Form> 를 포함 하는 <xref:System.Windows.Forms.TreeView>, 및 <xref:System.Collections.ArrayList> 포함 된 `Customer` 각각 포함 된 개체 `Order` 개체입니다.  
  
 [!code-cpp[TreeNode_TreeNode#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNode_TreeNode/CPP/treenode_treenode.cpp#1)]
 [!code-csharp[TreeNode_TreeNode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNode_TreeNode/CS/treenode_treenode.cs#1)]
 [!code-vb[TreeNode_TreeNode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNode_TreeNode/VB/treenode_treenode.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Indent { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>각 자식 트리 노드 수준을 들여 쓸 간격을 가져오거나 설정합니다.</summary>
        <value>각 자식 트리 노드 수준을 들여 쓸 간격(픽셀)입니다. 기본값은 19입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성 값이-1 기본값에서 아직 변경 되지 않은 경우 예외를 throw 하지 않습니다. 컨트롤 핸들이 생성 되기 전에 컨트롤 내부 기본값으로 값이-1 사용 하기 때문에입니다. 이 내부 기본값 컨트롤이 래핑된 19의 자체 기본값을 반환 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용자 지정 <xref:System.Windows.Forms.TreeView>합니다. 상속 하 여는 <xref:System.Windows.Forms.TreeView> 클래스,이 사용자 지정 버전에는 일반적인의 모든 기능 <xref:System.Windows.Forms.TreeView>합니다. 고유한 모양을 제공 생성자에서 다양 한 속성 값을 변경 합니다. 때문에 <xref:System.Windows.Forms.TreeView.ShowPlusMinus%2A> 속성이 false로 설정 되어, 사용자 지정 된 컨트롤 재정의 <xref:System.Windows.Forms.TreeView.OnAfterSelect%2A> 메서드 노드를 확장 하 고 클릭할 때 축소할 수 있도록 합니다.  
  
 컨트롤을 이러한 방식으로 사용자 지정 된 컨트롤 속성을 개별 프로젝트 각각에 지정할 필요 없이 일관 된 인터페이스를 제공 하기 쉽게 만들어 조직 전체에서 사용할 수 있습니다.  
  
 [!code-cpp[TreeViewCustomization#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewCustomization/CPP/treeviewcustomization.cpp#2)]
 [!code-csharp[TreeViewCustomization#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewCustomization/CS/treeviewcustomization.cs#2)]
 [!code-vb[TreeViewCustomization#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewCustomization/VB/treeviewcustomization.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">할당된 값이 0보다 작은 경우  
  
 또는  
  
 할당된 값이 32,000보다 큰 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">키 값 중 하나입니다.</param>
        <summary>지정된 키가 일반 입력 키인지 또는 전처리가 필요한 특수 키인지를 확인합니다.</summary>
        <returns>
          지정된 키가 일반 입력 키이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자가 트리 노드를 편집 하는 경우는 <xref:System.Windows.Forms.TreeView> 컨트롤 ENTER를 시작과 같은 키를 입력된 키로 취급 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemDragEventHandler ItemDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemDragEventHandler ItemDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.ItemDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemDrag As ItemDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemDragEventHandler ^ ItemDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 노드를 끌 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 내에서 끌어서 놓기 작업을 사용 하도록 설정 하는 방법은 다음 코드 예제는 <xref:System.Windows.Forms.TreeView> 제어 합니다. 이 예제에서는 노드 드래그 노드의 하위 하지 않은 다른 노드를 끌어 올 수 있습니다. 모든 하위 노드를 포함 하는 끌어 오는 노드는 대상 노드의 자식 노드가 됩니다. 마우스 왼쪽된 단추를 사용할 경우 노드가 대상 노드로 이동 합니다. 마우스 오른쪽 단추를 사용할 경우 노드가 대상 노드로 복사 됩니다.  
  
 [!code-cpp[TreeViewDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewDragDrop/CPP/treeviewdragdrop.cpp#1)]
 [!code-csharp[TreeViewDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewDragDrop/CS/treeviewdragdrop.cs#1)]
 [!code-vb[TreeViewDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewDragDrop/VB/treeviewdragdrop.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemHeight">
      <MemberSignature Language="C#" Value="public int ItemHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ItemHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.ItemHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ItemHeight { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 뷰 컨트롤에서 각 트리 노드의 높이를 가져오거나 설정합니다.</summary>
        <value>트리 뷰에 있는 각 트리 노드의 높이(픽셀)입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 항목 높이 트리 뷰 컨트롤의 높이 보다 큰 값으로 설정 되는 경우는 <xref:System.Windows.Forms.TreeNode.EnsureVisible%2A?displayProperty=nameWithType> 메서드를 갖습니다. 예기치 않은 결과입니다.  
  
   
  
## Examples  
 크기를 변경 하는 다음 코드 예제에서는 <xref:System.Windows.Forms.TreeNode.NodeFont%2A> 지정된 된 크기를 조정 하 고는 <xref:System.Windows.Forms.TreeView.ItemHeight%2A> 트리 노드의 부모 <xref:System.Windows.Forms.TreeView> 제어 합니다. 이 예제를 실행 하려면는 <xref:System.Windows.Forms.Form> 와 <xref:System.Windows.Forms.TreeView> 컨트롤의 컬렉션을 <xref:System.Windows.Forms.TreeNode> 개체 및 <xref:System.Windows.Forms.ComboBox> 글꼴 크기를 포함 하는 합니다.  
  
 [!code-cpp[TreeNode_Bounds#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNode_Bounds/CPP/treenode_bounds.cpp#2)]
 [!code-csharp[TreeNode_Bounds#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNode_Bounds/CS/treenode_bounds.cs#2)]
 [!code-vb[TreeNode_Bounds#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNode_Bounds/VB/treenode_bounds.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">할당된 값이 1보다 작은 경우  
  
 또는  
  
 할당된 값이 <see cref="F:System.Int16.MaxValue" /> 값보다 큰 경우</exception>
        <altmember cref="F:System.Int16.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="LabelEdit">
      <MemberSignature Language="C#" Value="public bool LabelEdit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.LabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Property LabelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LabelEdit { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 노드의 레이블 텍스트를 편집할 수 있는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          트리 노드의 레이블 텍스트를 편집할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.BeginEdit%2A> 경우에 사용할 수 있는 방법의 <xref:System.Windows.Forms.TreeView.LabelEdit%2A> 속성은 `true`합니다. 경우 <xref:System.Windows.Forms.TreeView.LabelEdit%2A> 은 `false` 레이블을 편집 하려고 하면 예외가 throw 되 고 트리 노드가 포함 되지 것입니다 수 편집 가능한 상태에 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용자가 사용 하 여 루트가 아닌 트리 노드를 편집할 수 있습니다는 <xref:System.Windows.Forms.ContextMenu>합니다. 마우스를 마우스 오른쪽 단추로 클릭할 때는 <xref:System.Windows.Forms.TreeNode> 해당 위치가 결정 하 고 이라는 변수에 저장 `mySelectedNode`합니다. 루트가 아닌 트리 노드를 선택 하 여 노드 편집을 사용 하면 편집 가능한 상태에 놓입니다. 사용자가 트리 노드 레이블 편집을 후 새 레이블 텍스트 평가 되 고 저장 합니다. 이 예에서는 여러 문자 레이블 텍스트에서 유효 간주 됩니다. 잘못 된 문자 중 하나에 레이블 문자열이 있거나 문자열이 비어, 사용자가 오류의 알림을 하 고 레이블을 이전 텍스트에 반환 됩니다.  
  
 [!code-cpp[classic treenode.beginedit example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic TreeNode.BeginEdit Example/CPP/source.cpp#1)]
 [!code-csharp[classic treenode.beginedit example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic TreeNode.BeginEdit Example/CS/source.cs#1)]
 [!code-vb[classic treenode.beginedit example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic TreeNode.BeginEdit Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNode.BeginEdit" />
        <altmember cref="M:System.Windows.Forms.TreeNode.EndEdit(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="LineColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LineColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LineColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.LineColor" />
      <MemberSignature Language="VB.NET" Value="Public Property LineColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color LineColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Black")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.TreeView" /> 컨트롤의 노드를 연결하는 선의 색을 가져오거나 설정합니다.</summary>
        <value>트리 노드를 연결하는 선의 <see cref="T:System.Drawing.Color" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는 설정 된 <xref:System.Windows.Forms.TreeNode> 선 색입니다. 이 예제를 실행 하려면 Windows Form에 코드를 붙여 넣습니다. 호출 `InitializeLineTreeView` 폼의 생성자 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리기입니다.  
  
 [!code-cpp[System.Windows.Forms.TreeViewWhidbeyMembers#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/cpp/Form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.TreeViewWhidbeyMembers#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.TreeViewWhidbeyMembers#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeMouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeNodeMouseClickEventHandler NodeMouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeNodeMouseClickEventHandler NodeMouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.NodeMouseClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NodeMouseClick As TreeNodeMouseClickEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TreeNodeMouseClickEventHandler ^ NodeMouseClick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNodeMouseClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 마우스로 <see cref="T:System.Windows.Forms.TreeNode" />를 클릭할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트는 사용자가 더하기 기호를 포함 하 여 마우스 트리 노드의 일부를 클릭할 때 발생 (**+**) 또는 빼기 기호 (**-**) 노드를 축소할지 여부를 나타내는 또는 확장.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 처리 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.TreeView.NodeMouseClick> 이벤트입니다.  
  
 [!code-cpp[System.Windows.Forms.TreeViewWhidbeyMembers#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/cpp/Form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.TreeViewWhidbeyMembers#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.TreeViewWhidbeyMembers#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.TreeNodeMouseClickEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="NodeMouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeNodeMouseClickEventHandler NodeMouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeNodeMouseClickEventHandler NodeMouseDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.NodeMouseDoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NodeMouseDoubleClick As TreeNodeMouseClickEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TreeNodeMouseClickEventHandler ^ NodeMouseDoubleClick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNodeMouseClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 마우스로 <see cref="T:System.Windows.Forms.TreeNode" />를 두 번 클릭할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에는 더하기 기호 (+)를 포함 하 여 마우스 또는 빼기 기호 (-) 노드를 축소 또는 확장할 수 있는지 여부를 나타내는 트리 노드의 모든 부분을 두 번 클릭할 때 발생 합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 처리 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.TreeView.NodeMouseDoubleClick> 이벤트 및 사용 하는 방법의 <xref:System.Windows.Forms.TreeNodeMouseClickEventArgs>합니다. 이 예제를 실행 하려면 포함 된 Windows Form에 코드를 붙여넣습니다는 <xref:System.Windows.Forms.TreeView> 라는 `treeView1`합니다. 채울 `treeView1` 에 있는 파일의 이름으로는 `c:\` 샘플 실행 중인 시스템의 디렉터리 및 연결는 <xref:System.Windows.Forms.TreeView.NodeMouseDoubleClick> 이벤트의 `treeView1` 와 `treeView1_NodeMouseDoubleClick` 이 예제의 메서드.  이 예제에서는 사용자에 게는 예제를 실행 하는 컴퓨터에 대 한 관리자 권한이 필요 합니다.  
  
 [!code-cpp[System.Windows.Forms.TreeViewWhidbeyMembers#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/cpp/Form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.TreeViewWhidbeyMembers#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.TreeViewWhidbeyMembers#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.TreeNodeMouseClickEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="NodeMouseHover">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TreeNodeMouseHoverEventHandler NodeMouseHover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TreeNodeMouseHoverEventHandler NodeMouseHover" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.NodeMouseHover" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NodeMouseHover As TreeNodeMouseHoverEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TreeNodeMouseHoverEventHandler ^ NodeMouseHover;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNodeMouseHoverEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스로 <see cref="T:System.Windows.Forms.TreeNode" />를 가리킬 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 위에 있는 경우는 <xref:System.Windows.Forms.TreeNode>, <xref:System.Windows.Forms.TreeView.NodeMouseHover> 이벤트가 발생 하기 전에 <xref:System.Windows.Forms.Control.MouseHover> 이벤트입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.TreeView.NodeMouseHover> 이벤트입니다. 이 보고서를 사용 하면 이벤트 발생 하 고 디버깅 시 활용할 수 하는 경우는 방법을 배웁니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.TreeView> 라는 `TreeView1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.TreeView.NodeMouseHover> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#634](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#634)]
 [!code-vb[System.Windows.Forms.EventExamples#634](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#634)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nodes">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNodeCollection Nodes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNodeCollection Nodes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.Nodes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Nodes As TreeNodeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TreeNodeCollection ^ Nodes { System::Windows::Forms::TreeNodeCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNodeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 뷰 컨트롤에 할당된 트리 노드의 컬렉션을 가져옵니다.</summary>
        <value>tree view 컨트롤에 할당된 트리 노드를 나타내는 <see cref="T:System.Windows.Forms.TreeNodeCollection" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeView.Nodes%2A> 속성의 컬렉션을 보유 <xref:System.Windows.Forms.TreeNode> 하며 각각의 개체는 <xref:System.Windows.Forms.TreeNode.Nodes%2A> 포함할 수 있는 속성 자체 <xref:System.Windows.Forms.TreeNodeCollection>합니다. 트리 노드가이 중첩이 어려울 수 있습니다는 트리 구조를 탐색 하기 되지만 <xref:System.Windows.Forms.TreeNode.FullPath%2A> 속성을 사용 하면 더 쉽게 트리 구조 내 사용자의 위치를 확인할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서 고객 정보를 표시 한 <xref:System.Windows.Forms.TreeView> 제어 합니다. 트리 루트 노드는 고객 이름이 표시 하 고 자식 트리 노드를 각 고객에 게 할당 된 주문 번호를 표시 합니다. 이 예제에서는 1000 명의 고객이 15 주문이 표시 됩니다. 다시는 <xref:System.Windows.Forms.TreeView> 를 사용 하 여 표시 되지 않는지는 <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> 및 <xref:System.Windows.Forms.TreeView.EndUpdate%2A> 메서드 및 대기 <xref:System.Windows.Forms.Cursor> 표시 됩니다는 동안는 <xref:System.Windows.Forms.TreeView> 만들고 그리는 <xref:System.Windows.Forms.TreeNode> 개체입니다. 이 예제를 실행 하려면는 `Customer` 개체의 컬렉션을 저장할 수 있는 `Order` 개체입니다. 인스턴스를 만든 위해서는 <xref:System.Windows.Forms.TreeView> 컨트롤에 <xref:System.Windows.Forms.Form>합니다.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.TreeNodeCollection" />
        <altmember cref="P:System.Windows.Forms.TreeView.Nodes" />
      </Docs>
    </Member>
    <Member MemberName="OnAfterCheck">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterCheck (System.Windows.Forms.TreeViewEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterCheck(class System.Windows.Forms.TreeViewEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnAfterCheck(System.Windows.Forms.TreeViewEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterCheck (e As TreeViewEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterCheck(System::Windows::Forms::TreeViewEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeViewEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.TreeViewEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.TreeView.AfterCheck" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnAfterCheck%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnAfterCheck(System.Windows.Forms.TreeViewEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnAfterCheck(System.Windows.Forms.TreeViewEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.TreeView.AfterCheck" />
        <altmember cref="E:System.Windows.Forms.TreeView.BeforeCheck" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnBeforeCheck(System.Windows.Forms.TreeViewCancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnAfterCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnAfterCollapse (System.Windows.Forms.TreeViewEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnAfterCollapse(class System.Windows.Forms.TreeViewEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnAfterCollapse(System.Windows.Forms.TreeViewEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnAfterCollapse (e As TreeViewEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnAfterCollapse(System::Windows::Forms::TreeViewEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeViewEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.TreeViewEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.TreeView.AfterCollapse" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnAfterCollapse%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnAfterCollapse(System.Windows.Forms.TreeViewEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnAfterCollapse(System.Windows.Forms.TreeViewEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.TreeView.AfterCollapse" />
        <altmember cref="E:System.Windows.Forms.TreeView.BeforeCollapse" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnBeforeCollapse(System.Windows.Forms.TreeViewCancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnAfterExpand">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterExpand (System.Windows.Forms.TreeViewEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterExpand(class System.Windows.Forms.TreeViewEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnAfterExpand(System.Windows.Forms.TreeViewEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterExpand (e As TreeViewEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterExpand(System::Windows::Forms::TreeViewEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeViewEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.TreeViewEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.TreeView.AfterExpand" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnAfterExpand%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnAfterExpand(System.Windows.Forms.TreeViewEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnAfterExpand(System.Windows.Forms.TreeViewEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.TreeView.AfterExpand" />
        <altmember cref="E:System.Windows.Forms.TreeView.BeforeExpand" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnBeforeExpand(System.Windows.Forms.TreeViewCancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnAfterLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterLabelEdit (System.Windows.Forms.NodeLabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterLabelEdit(class System.Windows.Forms.NodeLabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnAfterLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterLabelEdit (e As NodeLabelEditEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterLabelEdit(System::Windows::Forms::NodeLabelEditEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.NodeLabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.NodeLabelEditEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.TreeView.AfterLabelEdit" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnAfterLabelEdit%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnAfterLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnAfterLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.TreeView.AfterLabelEdit" />
        <altmember cref="E:System.Windows.Forms.TreeView.BeforeLabelEdit" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnBeforeLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnAfterSelect">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterSelect (System.Windows.Forms.TreeViewEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterSelect(class System.Windows.Forms.TreeViewEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnAfterSelect(System.Windows.Forms.TreeViewEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterSelect (e As TreeViewEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterSelect(System::Windows::Forms::TreeViewEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeViewEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.TreeViewEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.TreeView.AfterSelect" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnAfterSelect%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnAfterSelect(System.Windows.Forms.TreeViewEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnAfterSelect(System.Windows.Forms.TreeViewEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.TreeView.AfterSelect" />
        <altmember cref="E:System.Windows.Forms.TreeView.BeforeSelect" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnBeforeSelect(System.Windows.Forms.TreeViewCancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnBeforeCheck">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeCheck (System.Windows.Forms.TreeViewCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeCheck(class System.Windows.Forms.TreeViewCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnBeforeCheck(System.Windows.Forms.TreeViewCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeCheck (e As TreeViewCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeCheck(System::Windows::Forms::TreeViewCancelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeViewCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.TreeView.BeforeCheck" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnBeforeCheck%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnBeforeCheck(System.Windows.Forms.TreeViewCancelEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnBeforeCheck(System.Windows.Forms.TreeViewCancelEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.TreeView.BeforeCheck" />
        <altmember cref="E:System.Windows.Forms.TreeView.AfterCheck" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnAfterCheck(System.Windows.Forms.TreeViewEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnBeforeCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnBeforeCollapse (System.Windows.Forms.TreeViewCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnBeforeCollapse(class System.Windows.Forms.TreeViewCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnBeforeCollapse(System.Windows.Forms.TreeViewCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnBeforeCollapse (e As TreeViewCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnBeforeCollapse(System::Windows::Forms::TreeViewCancelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeViewCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.TreeView.BeforeCollapse" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnBeforeCollapse%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnBeforeCollapse(System.Windows.Forms.TreeViewCancelEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnBeforeCollapse(System.Windows.Forms.TreeViewCancelEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.TreeView.BeforeCollapse" />
        <altmember cref="E:System.Windows.Forms.TreeView.AfterCollapse" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnAfterCollapse(System.Windows.Forms.TreeViewEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnBeforeExpand">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeExpand (System.Windows.Forms.TreeViewCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeExpand(class System.Windows.Forms.TreeViewCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnBeforeExpand(System.Windows.Forms.TreeViewCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeExpand (e As TreeViewCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeExpand(System::Windows::Forms::TreeViewCancelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeViewCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.TreeView.BeforeExpand" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnBeforeExpand%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnBeforeExpand(System.Windows.Forms.TreeViewCancelEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnBeforeExpand(System.Windows.Forms.TreeViewCancelEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.TreeView.BeforeExpand" />
        <altmember cref="E:System.Windows.Forms.TreeView.AfterExpand" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnAfterExpand(System.Windows.Forms.TreeViewEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnBeforeLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeLabelEdit (System.Windows.Forms.NodeLabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeLabelEdit(class System.Windows.Forms.NodeLabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnBeforeLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeLabelEdit (e As NodeLabelEditEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeLabelEdit(System::Windows::Forms::NodeLabelEditEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.NodeLabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.NodeLabelEditEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.TreeView.BeforeLabelEdit" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnBeforeLabelEdit%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnBeforeLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnBeforeLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.TreeView.BeforeLabelEdit" />
        <altmember cref="E:System.Windows.Forms.TreeView.AfterLabelEdit" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnAfterLabelEdit(System.Windows.Forms.NodeLabelEditEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnBeforeSelect">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeSelect (System.Windows.Forms.TreeViewCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeSelect(class System.Windows.Forms.TreeViewCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnBeforeSelect(System.Windows.Forms.TreeViewCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeSelect (e As TreeViewCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeSelect(System::Windows::Forms::TreeViewCancelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeViewCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.TreeViewCancelEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.TreeView.BeforeSelect" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnBeforeSelect%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnBeforeSelect(System.Windows.Forms.TreeViewCancelEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnBeforeSelect(System.Windows.Forms.TreeViewCancelEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.TreeView.BeforeSelect" />
        <altmember cref="E:System.Windows.Forms.TreeView.AfterSelect" />
        <altmember cref="M:System.Windows.Forms.TreeView.OnAfterSelect(System.Windows.Forms.TreeViewEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnDrawNode">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawNode (System.Windows.Forms.DrawTreeNodeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawNode(class System.Windows.Forms.DrawTreeNodeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnDrawNode(System.Windows.Forms.DrawTreeNodeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawNode (e As DrawTreeNodeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawNode(System::Windows::Forms::DrawTreeNodeEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawTreeNodeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.DrawTreeNodeEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.TreeView.DrawNode" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnDrawNode%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnDrawNode(System.Windows.Forms.DrawTreeNodeEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnDrawNode(System.Windows.Forms.DrawTreeNodeEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.TreeView.DrawNode" />
        <altmember cref="T:System.Windows.Forms.DrawTreeNodeEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />를 재정의합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnHandleCreated%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.TreeView.OnHandleCreated(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnHandleCreated(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" />를 재정의합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnHandleDestroyed%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.TreeView.OnHandleDestroyed(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnHandleDestroyed(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDrag (System.Windows.Forms.ItemDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDrag(class System.Windows.Forms.ItemDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemDrag (e As ItemDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemDrag(System::Windows::Forms::ItemDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.ItemDragEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.TreeView.ItemDrag" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnItemDrag%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.TreeView.ItemDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.KeyEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.KeyDown" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> 속성이 `true` 및 <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> 속성이로 설정 되어 `false`, <xref:System.Windows.Forms.TreeView.OnKeyDown%2A> 메서드 전환 선택 하 고 스페이스바를 누르면 확인란의 선택을 취소 합니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnKeyDown%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyPress (e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.KeyPressEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.KeyPress" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> 속성이 `false`, <xref:System.Windows.Forms.TreeView> 컨트롤의 값으로 시작 하는 첫 번째 항목을 선택 합니다는 <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> 속성 `e`합니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnKeyPress%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.KeyEventArgs" />입니다.</param>
        <summary>
          <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />를 재정의합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnKeyUp%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.TreeView.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected override void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnMouseHover(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseHover (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseHover(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseHover" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeView.OnMouseHover%2A> 마우스를 위에 있는지 여부를 적중 횟수 테스트를 수행 하는 메서드는 <xref:System.Windows.Forms.TreeNode>, 인 경우에 발생 하 고는 <xref:System.Windows.Forms.TreeView.NodeMouseHover> 이벤트입니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnMouseHover%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnMouseHover(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnMouseHover(System.EventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.MouseLeave" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnMouseLeave%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnMouseLeave(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnMouseLeave(System.EventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnNodeMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnNodeMouseClick (System.Windows.Forms.TreeNodeMouseClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNodeMouseClick(class System.Windows.Forms.TreeNodeMouseClickEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnNodeMouseClick(System.Windows.Forms.TreeNodeMouseClickEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnNodeMouseClick (e As TreeNodeMouseClickEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnNodeMouseClick(System::Windows::Forms::TreeNodeMouseClickEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeNodeMouseClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.TreeNodeMouseClickEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.TreeView.NodeMouseClick" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnNodeMouseClick%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnNodeMouseClick(System.Windows.Forms.TreeNodeMouseClickEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnNodeMouseClick(System.Windows.Forms.TreeNodeMouseClickEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnNodeMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnNodeMouseDoubleClick (System.Windows.Forms.TreeNodeMouseClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNodeMouseDoubleClick(class System.Windows.Forms.TreeNodeMouseClickEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnNodeMouseDoubleClick(System.Windows.Forms.TreeNodeMouseClickEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnNodeMouseDoubleClick (e As TreeNodeMouseClickEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnNodeMouseDoubleClick(System::Windows::Forms::TreeNodeMouseClickEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeNodeMouseClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.TreeNodeMouseClickEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.TreeView.NodeMouseDoubleClick" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnNodeMouseDoubleClick%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnNodeMouseDoubleClick(System.Windows.Forms.TreeNodeMouseClickEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnNodeMouseDoubleClick(System.Windows.Forms.TreeNodeMouseClickEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnNodeMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnNodeMouseHover (System.Windows.Forms.TreeNodeMouseHoverEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNodeMouseHover(class System.Windows.Forms.TreeNodeMouseHoverEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnNodeMouseHover(System.Windows.Forms.TreeNodeMouseHoverEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnNodeMouseHover (e As TreeNodeMouseHoverEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnNodeMouseHover(System::Windows::Forms::TreeNodeMouseHoverEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.TreeNodeMouseHoverEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.TreeNodeMouseHoverEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.TreeView.NodeMouseHover" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnNodeMouseHover%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnNodeMouseHover(System.Windows.Forms.TreeNodeMouseHoverEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnNodeMouseHover(System.Windows.Forms.TreeNodeMouseHoverEventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftLayoutChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRightToLeftLayoutChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.OnRightToLeftLayoutChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRightToLeftLayoutChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRightToLeftLayoutChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.TreeView.RightToLeftLayoutChanged" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.TreeView.OnRightToLeftLayoutChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생 클래스에서 <see cref="M:System.Windows.Forms.TreeView.OnRightToLeftLayoutChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.TreeView.OnRightToLeftLayoutChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.TreeView" /> 컨트롤의 내용과 가장자리 사이의 간격을 가져오거나 설정합니다.</summary>
        <value>컨트롤의 가장자리와 내용 사이의 간격을 나타내는 <see cref="T:System.Windows.Forms.Padding" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 이 클래스와 관련이 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.TreeView.Padding" /> 속성 값이 변경되면 발생합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.TreeView" />를 그리면 발생합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PathSeparator">
      <MemberSignature Language="C#" Value="public string PathSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PathSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.PathSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PathSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PathSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("\")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 노드 경로에서 사용하는 구분 기호 문자열을 가져오거나 설정합니다.</summary>
        <value>트리 노드 <see cref="P:System.Windows.Forms.TreeNode.FullPath" /> 속성에서 사용하는 구분 기호 문자열입니다. 기본값은 백슬래시 문자 (\\).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 트리 노드 경로 구분 하 여 트리 노드 레이블의 집합으로 구성 된 <xref:System.Windows.Forms.TreeView.PathSeparator%2A> 구분 기호 문자열입니다. 원하는 트리 노드에 루트 트리 노드에서 레이블 범위입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.TreeView.PathSeparator%2A> 속성은 <xref:System.Windows.Forms.TreeView> 에 포함 된 자식 트리 노드 수를 표시 하 고는 <xref:System.Windows.Forms.TreeNodeCollection> 의 <xref:System.Windows.Forms.TreeView.SelectedNode%2A>합니다. 자식 트리 노드 트리 뷰 컨트롤의 전체 트리 노드를 백분율로 표시 됩니다. 이 예제를 실행 하려면는 <xref:System.Windows.Forms.Form> 와 <xref:System.Windows.Forms.Button>, 및 <xref:System.Windows.Forms.TreeView> 보호로 <xref:System.Windows.Forms.TreeNodeCollection> 에 여러 개의 <xref:System.Windows.Forms.TreeNode> 개체 (가급적 3 개 이상의 수준).  
  
 [!code-cpp[TreeNode_ForeColor#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNode_ForeColor/CPP/treenode_forecolor.cpp#2)]
 [!code-csharp[TreeNode_ForeColor#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNode_ForeColor/CS/treenode_forecolor.cs#2)]
 [!code-vb[TreeNode_ForeColor#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNode_ForeColor/VB/treenode_forecolor.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TreeNode.FullPath" />
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayout">
      <MemberSignature Language="C#" Value="public virtual bool RightToLeftLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeftLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.RightToLeftLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeftLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool RightToLeftLayout { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.TreeView" />를 오른쪽에서 왼쪽으로 배치해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          컨트롤을 오른쪽에서 왼쪽으로 배치해야 하는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeView.RightToLeftLayout%2A> 에서 오른쪽에서 왼쪽으로 읽는 언어를 여기서 속성 국가별 응용 프로그램에서 사용 됩니다. 설정한 경우 <xref:System.Windows.Forms.TreeView.RightToLeftLayout%2A> 및 <xref:System.Windows.Forms.Control.RightToLeft%2A> 를 `true` 컨트롤의 내용 및 텍스트는 오른쪽에서 왼쪽에서으로 배치 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RightToLeftLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.RightToLeftLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RightToLeftLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RightToLeftLayoutChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.TreeView.RightToLeftLayout" /> 속성 값이 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.TreeView.RightToLeftLayoutChanged> 이벤트입니다. 이 보고서를 사용 하면 이벤트 발생 하 고 디버깅 시 활용할 수 하는 경우는 방법을 배웁니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.TreeView> 라는 `TreeView1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.TreeView.RightToLeftLayoutChanged> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#639](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#639)]
 [!code-vb[System.Windows.Forms.EventExamples#639](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#639)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scrollable">
      <MemberSignature Language="C#" Value="public bool Scrollable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Scrollable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.Scrollable" />
      <MemberSignature Language="VB.NET" Value="Public Property Scrollable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Scrollable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 뷰 컨트롤에서 필요할 때 스크롤 막대를 표시할지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          tree view 컨트롤에서 필요할 때 스크롤 막대를 표시하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은로 설정 하는 경우 `true`에 스크롤 막대가 표시 됩니다는 <xref:System.Windows.Forms.TreeView> 경우 <xref:System.Windows.Forms.TreeNode> 컨트롤의 클라이언트 영역 외부에 있는 합니다.  
  
> [!NOTE]
>  설정할 때의 <xref:System.Windows.Forms.TreeView.Scrollable%2A> 실행 시 속성은 <xref:System.Windows.Forms.TreeView> 핸들을 다시 만드는 (참조 <xref:System.Windows.Forms.Control.RecreateHandle%2A?displayProperty=nameWithType>) 컨트롤의 모양을 업데이트 합니다. 이 인해 모든 트리 노드가 선택 된 제외 하 고 축소 <xref:System.Windows.Forms.TreeNode>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.BorderStyle> 열거형 및 <xref:System.Windows.Forms.TreeView.BorderStyle%2A>, <xref:System.Windows.Forms.TreeView.ShowLines%2A>, <xref:System.Windows.Forms.TreeView.Scrollable%2A>, <xref:System.Windows.Forms.TreeView.HideSelection%2A> 및 <xref:System.Windows.Forms.TreeView.ShowRootLines%2A> 속성입니다. 이 예제를 실행 하려면 호출 폼에 다음 코드를 붙여넣습니다는 `InitializeTreeView` 폼의 생성자 또는 `Load` 메서드.  
  
 [!code-cpp[System.Windows.Forms.TreeViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.TreeViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.TreeViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TreeViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedImageIndex">
      <MemberSignature Language="C#" Value="public int SelectedImageIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedImageIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.SelectedImageIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedImageIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SelectedImageIndex { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.NoneExcludedImageIndexConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Forms.RelatedImageList("ImageList")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 노드가 선택될 때 표시되는 이미지의 이미지 목록 인덱스 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Drawing.Image" />에서 <see cref="T:System.Windows.Forms.ImageList" />의 위치를 나타내는 0부터 시작하는 인덱스 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> 값은 인덱스의 한 <xref:System.Drawing.Image> 에 저장 된는 <xref:System.Windows.Forms.ImageList> 에 할당 된는 <xref:System.Windows.Forms.TreeView.ImageList%2A> 속성입니다.  
  
> [!NOTE]
>  설정할 때의 <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> 실행 시 속성은 <xref:System.Windows.Forms.TreeView> 핸들을 다시 만드는 (참조 <xref:System.Windows.Forms.Control.RecreateHandle%2A?displayProperty=nameWithType>) 컨트롤의 모양을 업데이트 합니다. 이 인해 모든 트리 노드가 선택 된 제외 하 고 축소 <xref:System.Windows.Forms.TreeNode>합니다.  
  
   
  
## Examples  
 다음 코드 예제를 만들고 할당는 <xref:System.Windows.Forms.ImageList> 에 <xref:System.Windows.Forms.TreeView> 컨트롤과 채우기는 <xref:System.Windows.Forms.TreeView> 보호로 <xref:System.Windows.Forms.TreeNode> 개체입니다. 트리 노드 이미지에서 할당 되는 <xref:System.Windows.Forms.ImageList> 선택 되거나 선택 하지 않은 상태에 있을 때 표시 되는 합니다. 이 예제를 실행 하려면는 <xref:System.Windows.Forms.Form> 를 포함 하는 <xref:System.Windows.Forms.TreeView>, 및 <xref:System.Collections.ArrayList> 포함 된 `Customer` 각각 포함 된 개체 `Order` 개체입니다. 가정 하는 `Customer` 및 `Order` 개체를 정의 합니다.  
  
 [!code-cpp[TreeNode_TreeNode#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNode_TreeNode/CPP/treenode_treenode.cpp#1)]
 [!code-csharp[TreeNode_TreeNode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNode_TreeNode/CS/treenode_treenode.cs#1)]
 [!code-vb[TreeNode_TreeNode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNode_TreeNode/VB/treenode_treenode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">인덱스에 할당된 값이 0보다 작은 경우</exception>
        <altmember cref="P:System.Windows.Forms.TreeView.ImageList" />
        <altmember cref="P:System.Windows.Forms.TreeView.ImageIndex" />
      </Docs>
    </Member>
    <Member MemberName="SelectedImageKey">
      <MemberSignature Language="C#" Value="public string SelectedImageKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedImageKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.SelectedImageKey" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedImageKey As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectedImageKey { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ImageKeyConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Forms.RelatedImageList("ImageList")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.TreeNode" />가 선택된 상태일 때 표시되는 기본 이미지 키를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Forms.TreeNode" />가 선택된 상태일 때 표시되는 기본 이미지 키입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Forms.TreeNode> 로 지정 된 이미지를 설정 하는 선택한 이미지에 없는 <xref:System.Windows.Forms.TreeView.SelectedImageKey%2A> 노드 선택 하지 않으면 속성이 표시 됩니다.  
  
 <xref:System.Windows.Forms.TreeView.SelectedImageKey%2A> 및 <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> 속성은 함께; 설정 된 다른는 무시 됩니다. 설정 하는 경우는 <xref:System.Windows.Forms.TreeView.SelectedImageKey%2A> 속성에는 <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> 속성이-1로 자동 설정 됩니다. 또는 설정 하는 경우는 <xref:System.Windows.Forms.TreeView.SelectedImageIndex%2A> 속성에는 <xref:System.Windows.Forms.TreeView.SelectedImageKey%2A> 빈 문자열을 자동으로 설정 됩니다 ("").  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedNode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode SelectedNode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode SelectedNode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.SelectedNode" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedNode As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TreeNode ^ SelectedNode { System::Windows::Forms::TreeNode ^ get(); void set(System::Windows::Forms::TreeNode ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 뷰 컨트롤에 현재 선택되어 있는 트리 노드를 가져오거나 설정합니다.</summary>
        <value>tree view 컨트롤에 현재 선택되어 있는 <see cref="T:System.Windows.Forms.TreeNode" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 없는 경우 <xref:System.Windows.Forms.TreeNode> 현재 선택 된 <xref:System.Windows.Forms.TreeView.SelectedNode%2A> 속성은 `null`합니다.  
  
 이 속성을 설정 하는 경우 지정된 된 노드 보기와 모든 부모 노드가 지정된 된 노드를 볼 수 있도록 확장 되어으로 스크롤됩니다.  
  
 사용자 작업을 통해 또는 부모 노드 또는 선택 된 노드의 상위 노드를 축소 하거나 프로그래밍 방식으로 축소 된 노드는 선택 된 노드를 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.TreeView.PathSeparator%2A> 속성은 <xref:System.Windows.Forms.TreeView> 에 포함 된 자식 트리 노드 수를 표시 하 고는 <xref:System.Windows.Forms.TreeNodeCollection> 의 <xref:System.Windows.Forms.TreeView.SelectedNode%2A>합니다. 자식 트리 노드 트리 뷰 컨트롤의 전체 트리 노드를 백분율로 표시 됩니다. 이 예제를 실행 하려면는 <xref:System.Windows.Forms.Form> 와 <xref:System.Windows.Forms.Button>, 및 <xref:System.Windows.Forms.TreeView> 보호로 <xref:System.Windows.Forms.TreeNodeCollection> 에 여러 개의 <xref:System.Windows.Forms.TreeNode> 개체 (가급적 3 개 이상의 수준).  
  
 [!code-cpp[TreeNode_ForeColor#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNode_ForeColor/CPP/treenode_forecolor.cpp#2)]
 [!code-csharp[TreeNode_ForeColor#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNode_ForeColor/CS/treenode_forecolor.cs#2)]
 [!code-vb[TreeNode_ForeColor#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNode_ForeColor/VB/treenode_forecolor.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.TreeNode" />
      </Docs>
    </Member>
    <Member MemberName="ShowLines">
      <MemberSignature Language="C#" Value="public bool ShowLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowLines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.ShowLines" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowLines As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowLines { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 뷰 컨트롤의 트리 노드 사이에 선이 그려졌는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          tree view 컨트롤의 트리 노드 사이에 선이 그려졌으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 <xref:System.Windows.Forms.TreeView.ShowLines%2A> 로 설정 된 `true`, <xref:System.Windows.Forms.TreeView.FullRowSelect%2A> 속성은 무시 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용자 지정 <xref:System.Windows.Forms.TreeView>합니다. 상속 하 여는 <xref:System.Windows.Forms.TreeView> 클래스,이 사용자 지정 버전에는 일반적인의 모든 기능 <xref:System.Windows.Forms.TreeView>합니다. 고유한 모양을 제공 생성자에서 다양 한 속성 값을 변경 합니다. 때문에 <xref:System.Windows.Forms.TreeView.ShowPlusMinus%2A> 속성이 false로 설정 되어, 사용자 지정 된 컨트롤 재정의 <xref:System.Windows.Forms.TreeView.OnAfterSelect%2A> 메서드 노드를 확장 하 고 클릭할 때 축소할 수 있도록 합니다.  
  
 컨트롤을 이러한 방식으로 사용자 지정 된 컨트롤 속성을 개별 프로젝트 각각에 지정할 필요 없이 일관 된 인터페이스를 제공 하기 쉽게 만들어 조직 전체에서 사용할 수 있습니다.  
  
 [!code-cpp[TreeViewCustomization#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewCustomization/CPP/treeviewcustomization.cpp#2)]
 [!code-csharp[TreeViewCustomization#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewCustomization/CS/treeviewcustomization.cs#2)]
 [!code-vb[TreeViewCustomization#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewCustomization/VB/treeviewcustomization.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowNodeToolTips">
      <MemberSignature Language="C#" Value="public bool ShowNodeToolTips { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowNodeToolTips" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.ShowNodeToolTips" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowNodeToolTips As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowNodeToolTips { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 <see cref="T:System.Windows.Forms.TreeNode" />를 가리킬 때 표시되는 도구 설명을 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          마우스 포인터가 <see cref="T:System.Windows.Forms.TreeNode" />를 가리킬 때 도구 설명이 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 도구 설명 표시를 설정 해야 합니다는 <xref:System.Windows.Forms.TreeNode.ToolTipText%2A> 에 대 한는 <xref:System.Windows.Forms.TreeNode>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.TreeNode.ToolTipText%2A> 및 <xref:System.Windows.Forms.TreeView.ShowNodeToolTips%2A> 속성입니다. 이 예제를 실행 하려면 Windows Form과 호출에 다음 코드를 붙여 `InitializeTreeViewWithToolTips` 폼의 생성자 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리기입니다.  
  
 [!code-csharp[System.Windows.Forms.TreeViewWhidbeyMembers#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.TreeViewWhidbeyMembers#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TreeNode.ToolTipText" />
      </Docs>
    </Member>
    <Member MemberName="ShowPlusMinus">
      <MemberSignature Language="C#" Value="public bool ShowPlusMinus { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowPlusMinus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.ShowPlusMinus" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowPlusMinus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowPlusMinus { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>자식 트리 노드를 포함하는 트리 노드 옆에 더하기 기호(+) 및 빼기 기호(-) 단추가 표시되는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          자식 트리 노드를 포함하는 트리 노드 옆에 더하기 기호 및 빼기 기호 단추가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우에만 루트 트리 노드 옆에 더하기 및 빼기 기호 단추가 표시는 <xref:System.Windows.Forms.TreeView.ShowRootLines%2A> 속성 값은 `true`합니다. 더하기 및 빼기 기호 단추가 표시 되지 않으면 시각적 표시가 없습니다 트리 노드가 자식 트리 노드를 포함 하 고 확장 가능한 나타내기 위해 존재 합니다. 사용자 다음 두 번 클릭 해야 트리 노드를 자식 트리 노드를 확장 하거나 축소할 수 포함 되어 있는지 확인 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용자 지정 <xref:System.Windows.Forms.TreeView>합니다. 상속 하 여는 <xref:System.Windows.Forms.TreeView> 클래스,이 사용자 지정 버전에는 일반적인의 모든 기능 <xref:System.Windows.Forms.TreeView>합니다. 고유한 모양을 제공 생성자에서 다양 한 속성 값을 변경 합니다. 때문에 <xref:System.Windows.Forms.TreeView.ShowPlusMinus%2A> 속성이 false로 설정 되어, 사용자 지정 된 컨트롤 재정의 <xref:System.Windows.Forms.TreeView.OnAfterSelect%2A> 메서드 노드를 확장 하 고 클릭할 때 축소할 수 있도록 합니다.  
  
 컨트롤을 이러한 방식으로 사용자 지정 된 컨트롤 속성을 개별 프로젝트 각각에 지정할 필요 없이 일관 된 인터페이스를 제공 하기 쉽게 만들어 조직 전체에서 사용할 수 있습니다.  
  
 [!code-cpp[TreeViewCustomization#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeViewCustomization/CPP/treeviewcustomization.cpp#2)]
 [!code-csharp[TreeViewCustomization#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeViewCustomization/CS/treeviewcustomization.cs#2)]
 [!code-vb[TreeViewCustomization#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeViewCustomization/VB/treeviewcustomization.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TreeView.ShowRootLines" />
      </Docs>
    </Member>
    <Member MemberName="ShowRootLines">
      <MemberSignature Language="C#" Value="public bool ShowRootLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowRootLines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.ShowRootLines" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowRootLines As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowRootLines { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 뷰의 루트에 있는 트리 노드 사이에 선이 그려졌는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          tree view의 루트에 있는 트리 노드 사이에 선이 그려졌으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Forms.TreeView.ShowRootLines%2A> 속성은 `false`, 루트 트리 노드 옆에 더하기 및 빼기 기호 단추가 나타나지 것입니다 및 <xref:System.Windows.Forms.TreeView.ShowPlusMinus%2A> 속성 아무런 효과가 없습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.BorderStyle> 열거형 및 <xref:System.Windows.Forms.TreeView.BorderStyle%2A>, <xref:System.Windows.Forms.TreeView.ShowLines%2A>, <xref:System.Windows.Forms.TreeView.Scrollable%2A>, <xref:System.Windows.Forms.TreeView.HideSelection%2A> 및 <xref:System.Windows.Forms.TreeView.ShowRootLines%2A> 속성입니다. 이 예제를 실행 하려면 호출 폼에 다음 코드를 붙여넣습니다는 `InitializeTreeView` 폼의 생성자 또는 `Load` 메서드.  
  
 [!code-cpp[System.Windows.Forms.TreeViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.TreeViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.TreeViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TreeViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TreeView.ShowPlusMinus" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.TreeView" /> 컨트롤의 항목을 정렬합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 정렬 또는 지정 된 사용자 지정 정렬을 다시 적용는 <xref:System.Windows.Forms.TreeView.TreeViewNodeSorter%2A> 속성입니다. 기존 노드에 텍스트가 변경 될 노드를 이동 하는 사용자가 항목을 다시 정렬 하려는 경우이 메서드를 사용할 수 있습니다.  
  
> [!NOTE]
>  기본 정렬는 <xref:System.Globalization.CompareInfo.Compare%2A> 기반 메서드는 <xref:System.Windows.Forms.Application.CurrentCulture%2A> 응용 프로그램에서 지정 합니다. 즉 <xref:System.Windows.Forms.TreeNode> 동일 값을 사용 하 여 개체에 추가 된 순서에 보관 되는 <xref:System.Windows.Forms.TreeView> 제어 합니다. 이 문제는 사용자 지정 정렬이 적용 될 경우 달라질 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public bool Sorted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Sorted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.Sorted" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Sorted { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 뷰의 트리 노드가 정렬되어 있는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          tree view의 트리 노드가 정렬되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때 <xref:System.Windows.Forms.TreeView.Sorted%2A> 로 설정 된 `true`, <xref:System.Windows.Forms.TreeNode> 사전순으로 정렬 되는 개체의 <xref:System.Windows.Forms.TreeNode.Text%2A> 속성 값입니다. 항상 사용 해야 <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> 및 <xref:System.Windows.Forms.TreeView.EndUpdate%2A> 성능을 유지 하기 위해 많은 양의 항목 정렬에 추가할 때 <xref:System.Windows.Forms.TreeView>합니다. 호출 해야 하는 기존 노드의 텍스트 변경 되 면 <xref:System.Windows.Forms.TreeView.Sort%2A> 텍스트가 있습니다.  
  
> [!NOTE]
>  기본 정렬는 <xref:System.Globalization.CompareInfo.Compare%2A> 기반 메서드는 <xref:System.Windows.Forms.Application.CurrentCulture%2A> 응용 프로그램에서 지정 합니다. 즉 <xref:System.Windows.Forms.TreeNode> 동일 값을 사용 하 여 개체에 추가 된 순서에 보관 되는 <xref:System.Windows.Forms.TreeView> 제어 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList StateImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList StateImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.StateImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property StateImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ StateImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.TreeView" /> 및 해당 노드의 상태를 나타내는 데 사용되는 이미지 목록을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" /> 및 해당 노드의 상태를 나타내는 데 사용되는 <see cref="T:System.Windows.Forms.TreeView" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 상태를 표시 하는 <xref:System.Windows.Forms.TreeNode>설정는 <xref:System.Windows.Forms.TreeView.StateImageList%2A> 속성 설정 및는 <xref:System.Windows.Forms.TreeNode.StateImageKey%2A> 또는 <xref:System.Windows.Forms.TreeNode.StateImageIndex%2A> 각 속성 <xref:System.Windows.Forms.TreeNode>합니다.  
  
 상태 이미지에 표시 되는 <xref:System.Windows.Forms.TreeView> 는 기본적으로 16 x 16 픽셀입니다. 설정의 <xref:System.Windows.Forms.ImageList.ImageSize%2A> 의 속성은 <xref:System.Windows.Forms.TreeView.StateImageList%2A> 이미지 표시 되는 방식에 영향을 미치지 것입니다. 그러나 상태 이미지 크기를 조정할 시스템 DPI 설정에 따라 app.config 파일에 다음 항목이 포함 되어 있는 경우:  
  
```  
<appSettings>  
  <add key="EnableWindowsFormsHighDpiAutoResizing" value="true" />  
</appSettings>  
  
```  
  
 경우는 <xref:System.Windows.Forms.TreeView.CheckBoxes%2A> 속성의는 <xref:System.Windows.Forms.TreeView> 로 설정 된 `true` 및 <xref:System.Windows.Forms.TreeView.StateImageList%2A> 속성이 설정 되어 각 <xref:System.Windows.Forms.TreeNode> 에 포함 되어 있는 <xref:System.Windows.Forms.TreeView> 첫 번째와 두 번째 이미지를 표시는 <xref:System.Windows.Forms.TreeView.StateImageList%2A> 나타내기 위해는 검사 되지 않은 상태 또는 선택 된, 각각. 설정 해야는 <xref:System.Windows.Forms.TreeView.StateImageList%2A> 속성 노드를 추가 하기 전에 <xref:System.Windows.Forms.TreeView> 상태 이미지가 상태 이미지를 갖지 않는 노드에 대 한 디자인 타임에 표시 되지 않도록 설정 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Windows.Forms.TreeView.StateImageList%2A> 속성입니다. 이 예제를 실행 하려면 Windows Form과 호출에 코드를 붙여 `InitializeCheckTreeView` 폼의 생성자 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리기입니다.  
  
 [!code-cpp[System.Windows.Forms.TreeViewWhidbeyMembers#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/cpp/Form1.cpp#8)]
 [!code-csharp[System.Windows.Forms.TreeViewWhidbeyMembers#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.TreeViewWhidbeyMembers#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.TreeView" />의 텍스트를 가져오거나 설정합니다.</summary>
        <value>
          모든 경우에 <see langword="Null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 이 클래스와 관련이 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TreeView.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.TreeView.Text" /> 속성이 변경되면 발생합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopNode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode TopNode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode TopNode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.TopNode" />
      <MemberSignature Language="VB.NET" Value="Public Property TopNode As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::TreeNode ^ TopNode { System::Windows::Forms::TreeNode ^ get(); void set(System::Windows::Forms::TreeNode ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 뷰 컨트롤에서 완전히 표시되는 첫 번째 트리 노드를 가져오거나 설정합니다.</summary>
        <value>tree view 컨트롤에서 완전히 표시되는 첫 번째 트리 노드를 나타내는 <see cref="T:System.Windows.Forms.TreeNode" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처음에 <xref:System.Windows.Forms.TreeView.TopNode%2A> 의 위쪽에 있는 첫 번째 루트 트리 노드를 반환 하는 <xref:System.Windows.Forms.TreeView>합니다. 그러나 사용자 콘텐츠를 스크롤 하는 경우 다른 트리 노드 맨 위에 해질 수 있습니다.  
  
> [!NOTE]
>  이 속성을 설정 하는 것이 없는 때 적용 된 <xref:System.Windows.Forms.TreeView.Scrollable%2A> 속성 값은 `false`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.TreeView.BeforeLabelEdit> <xref:System.Windows.Forms.TreeView.AfterSelect> 및 <xref:System.Windows.Forms.TreeView.TopNode%2A> 멤버입니다. 이 예제를 실행 하려면 포함 된 폼에 다음 코드를 붙여넣습니다는 `TreeView` 라는 컨트롤을 `TreeView1`합니다. 호출 된 `InitializeTreeView` 폼의 생성자 또는 `Load` 메서드.  
  
 [!code-cpp[System.Windows.Forms.TreeViewAndPrintPreview#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewAndPrintPreview/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.TreeViewAndPrintPreview#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewAndPrintPreview/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.TreeViewAndPrintPreview#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TreeViewAndPrintPreview/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.TreeViewAndPrintPreview#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewAndPrintPreview/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.TreeViewAndPrintPreview#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewAndPrintPreview/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.TreeViewAndPrintPreview#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TreeViewAndPrintPreview/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TreeNode.IsVisible" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.Component" />의 이름이 포함된 <see cref="T:System.String" />을 반환합니다(있는 경우). 이 메서드는 재정의할 수 없습니다.</summary>
        <returns>
          <see cref="T:System.ComponentModel.Component" />의 이름이 포함된 <see cref="T:System.String" />(있는 경우) 또는 <see cref="T:System.ComponentModel.Component" />가 명명되지 않은 경우 <see langword="null" />입니다.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.ComponentModel.Component.ToString" />
      </Docs>
    </Member>
    <Member MemberName="TreeViewNodeSorter">
      <MemberSignature Language="C#" Value="public System.Collections.IComparer TreeViewNodeSorter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IComparer TreeViewNodeSorter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.TreeViewNodeSorter" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeViewNodeSorter As IComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IComparer ^ TreeViewNodeSorter { System::Collections::IComparer ^ get(); void set(System::Collections::IComparer ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.IComparer" /> 노드의 사용자 지정 정렬을 수행하는 <see cref="T:System.Windows.Forms.TreeView" /> 구현을 가져오거나 설정합니다.</summary>
        <value>사용자 지정 정렬을 수행할 <see cref="T:System.Collections.IComparer" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 지정 정렬이 적용 될 때는 <xref:System.Windows.Forms.TreeView.TreeViewNodeSorter%2A> 설정 됩니다.  
  
 경우는 <xref:System.Windows.Forms.TreeNode> 레이블이 변경 된, 호출할 수는 <xref:System.Windows.Forms.TreeView.Sort%2A> 로 지정 된 사용자 지정 정렬 된 항목을 다시 정렬 하는 메서드는 <xref:System.Windows.Forms.TreeView.TreeViewNodeSorter%2A> 속성입니다.  
  
> [!NOTE]
>  기본 정렬는 <xref:System.Globalization.CompareInfo.Compare%2A> 기반 메서드는 <xref:System.Windows.Forms.Application.CurrentCulture%2A> 응용 프로그램에서 지정 합니다. 즉 <xref:System.Windows.Forms.TreeNode> 동일 값을 사용 하 여 개체에 추가 된 순서에 보관 되는 <xref:System.Windows.Forms.TreeView> 제어 합니다. 이 문제는 사용자 지정 정렬이 적용 될 경우 달라질 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.TreeView.TreeViewNodeSorter%2A> 노드를 오름차순으로 정렬 하는 속성입니다. 이 예제를 실행 하려면 Windows Form과 호출에 다음 코드를 붙여 `InitializeTreeView1` 폼의 생성자 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리기입니다.  
  
 [!code-cpp[System.Windows.Forms.TreeViewWhidbeyMembers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/cpp/Form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.TreeViewWhidbeyMembers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.TreeViewWhidbeyMembers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TreeViewWhidbeyMembers/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
      </Docs>
    </Member>
    <Member MemberName="VisibleCount">
      <MemberSignature Language="C#" Value="public int VisibleCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisibleCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeView.VisibleCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisibleCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int VisibleCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트리 뷰 컨트롤에 완전히 표시되는 트리 노드의 수를 가져옵니다.</summary>
        <value>
          <see cref="T:System.Windows.Forms.TreeNode" /> 컨트롤에 완전히 표시되는 <see cref="T:System.Windows.Forms.TreeView" /> 항목의 수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeView.VisibleCount%2A> 값 트리 뷰의 트리 노드가 개수 보다 클 수 있습니다. 값은 트리 노드 항목의 높이 클라이언트 창의 높이 분할 하 여 계산 됩니다. 결과의 총 수는 <xref:System.Windows.Forms.TreeNode> 개체는 <xref:System.Windows.Forms.TreeView> 크기로 내에서 표시할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TreeNode.IsVisible" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeView.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">처리할 Windows <see cref="T:System.Windows.Forms.Message" />입니다.</param>
        <summary>
          <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />를 재정의합니다.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermissionFlag">속성 값을 가져올 때 관리 되지 않는 코드에 액세스 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>