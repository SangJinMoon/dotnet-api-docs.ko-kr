<Type Name="LinkLabel" FullName="System.Windows.Forms.LinkLabel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="34aa104d6f8a7e322b568c0f33421023608ef36c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36519234" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinkLabel : System.Windows.Forms.Label, System.Windows.Forms.IButtonControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinkLabel extends System.Windows.Forms.Label implements class System.Windows.Forms.IButtonControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.LinkLabel" />
  <TypeSignature Language="VB.NET" Value="Public Class LinkLabel&#xA;Inherits Label&#xA;Implements IButtonControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinkLabel : System::Windows::Forms::Label, System::Windows::Forms::IButtonControl" />
  <TypeSignature Language="F#" Value="type LinkLabel = class&#xA;    inherit Label&#xA;    interface IButtonControl" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Label</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IButtonControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("LinkClicked")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem("System.Windows.Forms.Design.AutoSizeToolboxItem,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a Windows label control that can display hyperlinks.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ToolStripLabel> 대체 하 고 여기에 새로운 기능이 추가 된 <xref:System.Windows.Forms.Label> 및 <xref:System.Windows.Forms.LinkLabel> 컨트롤입니다. 그러나는 <xref:System.Windows.Forms.Label> 및 <xref:System.Windows.Forms.LinkLabel> 선택 하는 경우 컨트롤의 이전 버전과 호환성 및 이후 사용 유지 됩니다.  
  
 <xref:System.Windows.Forms.LinkLabel> 제어는 비슷합니다는 <xref:System.Windows.Forms.Label> 컨트롤 하이퍼링크를 표시 하려면 예외를 사용 합니다. 여러 개의 하이퍼링크를 컨트롤의 텍스트에 지정할 수 있습니다. 각 하이퍼링크 응용 프로그램 내에서 다른 작업을 수행할 수 있습니다. 예를 들어 Microsoft Internet Explorer에서 웹 사이트를 표시 하거나는 응용 프로그램과 관련 된 로그 파일을 로드 하는 하이퍼링크를 사용할 수 있습니다.  
  
 에 표시 되는 각 하이퍼링크는 <xref:System.Windows.Forms.LinkLabel> 컨트롤은의 인스턴스는 <xref:System.Windows.Forms.LinkLabel.Link> 클래스입니다. <xref:System.Windows.Forms.LinkLabel.Link> 클래스 표시 정보, 상태 및 하이퍼링크의 위치를 정의 합니다. 또한는 <xref:System.Windows.Forms.LinkLabel.Link.LinkData%2A> 속성은 <xref:System.Windows.Forms.LinkLabel.Link> 클래스를 사용 하면 하이퍼링크를 표시 하려면 URL 등의 정보를 연결할 수 있습니다. 컨트롤 내에서 하이퍼링크를 클릭할 때는 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 이벤트가 및 <xref:System.Windows.Forms.LinkLabel.Link> 의 일부로 전달 되는 클릭 된 하이퍼링크를 나타내는 개체는 <xref:System.Windows.Forms.LinkLabelLinkClickedEventArgs> 이벤트 처리기에 매개 변수로 전달 되는 개체입니다. 이 개체를 사용 하 여 가져올 수는 <xref:System.Windows.Forms.LinkLabel.Link> 사용자가 클릭 된 하이퍼링크와 연결 된 개체입니다. 내에 포함 된 모든 하이퍼링크는 <xref:System.Windows.Forms.LinkLabel> 제어에 저장 되는 <xref:System.Windows.Forms.LinkLabel.LinkCollection> 컨트롤에 대 한 클래스 인스턴스.  
  
 에 대 한 하이퍼링크를 추가 하는 방법은 두 가지가 <xref:System.Windows.Forms.LinkLabel> 제어 합니다. 가장 빠른 방법을 지정 하는 것을 <xref:System.Windows.Forms.LinkArea> 에 할당 하는 <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> 속성입니다. 그러면 컨트롤의 텍스트 내에서 하이퍼링크를 하나만 지정할 수 있습니다. 여러 개의 하이퍼링크를 추가 하려면 사용할 수 있습니다는 <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A> 의 메서드는 <xref:System.Windows.Forms.LinkLabel.LinkCollection> 클래스를 통해 컬렉션에 액세스 하 여는 <xref:System.Windows.Forms.LinkLabel.Links%2A> 속성입니다.  
  
 경우는 <xref:System.Windows.Forms.LinkLabel> 컨트롤을 만들 내에서 모든 텍스트를 포함 하는 기본 하이퍼링크는 <xref:System.Windows.Forms.LinkLabel> 에 컨트롤이 추가 되는 <xref:System.Windows.Forms.LinkLabel.LinkCollection>합니다. 이 기본 링크 된 새 링크 영역을 지정 하 여 재정의할 수 있습니다는 <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> 속성을 사용 하 여 링크 지정 하거나는 <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A> 의 메서드는 <xref:System.Windows.Forms.LinkLabel.LinkCollection>합니다. 사용 하 여 기본 하이퍼링크를 제거할 수도 있습니다는 <xref:System.Windows.Forms.LinkLabel.LinkCollection.Remove%2A> 의 메서드는 <xref:System.Windows.Forms.LinkLabel.LinkCollection> 클래스입니다.  
  
 <xref:System.Windows.Forms.Label.TabStop%2A> 속성은 `true` 기본적으로 하나 이상의 링크가의 길이 0 보다 큰 만큼는 <xref:System.Windows.Forms.LinkLabel.Links%2A> 컬렉션입니다. <xref:System.Windows.Forms.LinkLabel> 컨트롤에는 단일 <xref:System.Windows.Forms.Control.TabIndex%2A> 값입니다. 그러나 각 링크의 길이 0 보다 큰 왼쪽에서 오른쪽 순서로 자체 탭 정지를 가져옵니다. 탭 탐색을 방지 하려면는 <xref:System.Windows.Forms.LinkLabel> 제어, 설정 된 <xref:System.Windows.Forms.Label.TabStop%2A> 속성을 `false`합니다. 그러나에 새 링크를 추가 <xref:System.Windows.Forms.LinkLabel.Links%2A> 컬렉션은 자동으로 설정 된 <xref:System.Windows.Forms.Label.TabStop%2A> 속성을 `true` 다시 합니다.  
  
 <xref:System.Windows.Forms.LinkLabel> 컨트롤에 대 한 하이퍼링크의 표시 모양을 정의할 수 있도록 하는 속성의 수를 제공 합니다. <xref:System.Windows.Forms.LinkLabel.ActiveLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, 및 <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> 속성 다양 한 상태에서 하이퍼링크를 표시할 때 사용 되는 색을 정의 합니다. <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A> 속성의 하이퍼링크와 연결 된 밑줄 표시를 정의 합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.Windows.Forms.LinkLabel> 클래스입니다. 예제 핸들의 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 웹 사이트를 열어 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.LinkLabelSimple#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelSimple/CS/form.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabelSimple#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelSimple/VB/form.vb#1)]  
  
 다음 예제는 <xref:System.Windows.Forms.LinkLabel> 여러 클래스 <xref:System.Windows.Forms.LinkArea> 양식에 레이블을 표시 하는 정의 된 섹션입니다. 예제 설정에는 <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, 및 <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> 속성의 모양을 사용자 지정할 수는 <xref:System.Windows.Forms.LinkLabel>합니다. 첫 번째 <xref:System.Windows.Forms.LinkArea> 를 사용 하 여 지정 된 <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> 속성입니다. 추가 링크에 추가 되는 <xref:System.Windows.Forms.LinkLabel> 를 사용 하는 <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> 메서드. 예제 핸들의 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 하이퍼링크에 대 한 웹 브라우저를 시작 하 고 표시 하 여 이벤트는 <xref:System.Windows.Forms.MessageBox> 다른 링크에 대 한 합니다.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Label" />
    <altmember cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs" />
    <altmember cref="T:System.Windows.Forms.LinkLabel.Link" />
    <altmember cref="T:System.Windows.Forms.LinkLabel.LinkCollection" />
    <altmember cref="T:System.Windows.Forms.ToolStripLabel" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinkLabel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinkLabel();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new default instance of the <see cref="T:System.Windows.Forms.LinkLabel" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제는 <xref:System.Windows.Forms.LinkLabel> 여러 클래스 <xref:System.Windows.Forms.LinkArea> 양식에 레이블을 표시 하는 정의 된 섹션입니다. 예제 설정에는 <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, 및 <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> 속성의 모양을 사용자 지정할 수는 <xref:System.Windows.Forms.LinkLabel>합니다. 첫 번째 <xref:System.Windows.Forms.LinkArea> 를 사용 하 여 지정 된 <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> 속성입니다. 추가 링크에 추가 되는 <xref:System.Windows.Forms.LinkLabel> 를 사용 하는 <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> 메서드. 예제 핸들의 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 하이퍼링크에 대 한 웹 브라우저를 시작 하 고 표시 하 여 이벤트는 <xref:System.Windows.Forms.MessageBox> 다른 링크에 대 한 합니다.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ActiveLinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ActiveLinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.ActiveLinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property ActiveLinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color ActiveLinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ActiveLinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.LinkLabel.ActiveLinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color used to display an active link.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> 표시할 활성 링크 색을 나타내는입니다. 기본 색은 시스템에서 지정, 일반적으로이 색은 <see langword="Color.Red" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 활성 링크는 클릭 하 고 있는 링크입니다. 이것은 낮아진된 상태 비슷합니다는 <xref:System.Windows.Forms.Button> 제어 합니다. 링크 눌려져 때 링크에 표시 되는 색을 지정 하려면이 속성을 사용할 수 있습니다.  
  
 링크와 관련 된 색의 여러 가지가 있습니다. <xref:System.Windows.Forms.LinkLabel.LinkColor%2A> 에 표시 된 모든 링크의 색을 지정 된 <xref:System.Windows.Forms.LinkLabel> 제어 합니다. <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> 속성을 사용 하면 사용자가 방문한 후에 링크의 색을 지정할 수 있습니다. 비활성화 된 링크는 <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A> 사용할 수 없는 상태에 링크를 표시 하는 데 사용 됩니다.  
  
> [!NOTE]
>  이 속성을 설정할 때 확인 색 속성 충돌 하지 않는 컨트롤의 배경색을 설정 하는 또는 텍스트가 제대로 표시 되지 않습니다. 예를 들어, 컨트롤의 배경색은 `Color.Red` 이 속성을 설정 하 고 `Color.Red`때 링크 눌려져 텍스트 올바르게 보여지지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 설정 된 <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A> 사용 하 여 속성의 <xref:System.Windows.Forms.LinkBehavior> 열거형입니다. 설정에 대해서도 설명는 <xref:System.Windows.Forms.LinkLabel.ActiveLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A> 및 <xref:System.Windows.Forms.LinkLabel.LinkVisited%2A> 속성입니다. 실행 하려면이 샘플에 붙여 빈 폼과 호출 `InitializeLinkLabel` 폼의 생성자 또는 `Load` 메서드.  
  
 [!code-cpp[System.Windows.Forms.LinkLabelExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabelExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabelExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.DisabledLinkColor" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.LinkColor" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.VisitedLinkColor" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberSignature Language="F#" Value="override this.CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject" Usage="linkLabel.CreateAccessibilityInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new accessibility object for the <see cref="T:System.Windows.Forms.LinkLabel" /> control.</summary>
        <returns>A new <see cref="T:System.Windows.Forms.AccessibleObject" /> for the control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.LinkLabel.CreateAccessibilityInstance%2A> 메서드를 명시적으로 호출하지 않으면 <xref:System.Windows.Forms.Control.AccessibilityObject%2A> 속성을 참조할 때 이 메서드가 호출됩니다.  
  
 참고: get 또는 set에는 <xref:System.Windows.Forms.Control.AccessibilityObject%2A> 속성을.NET Framework와 함께 설치 된 액세스 가능성 어셈블리에 대 한 참조를 추가 해야 합니다.  
  
 상속자 참고 사항: 재정의 하는 경우 <xref:System.Windows.Forms.LinkLabel.CreateAccessibilityInstance%2A> 파생된 클래스에서 직접 호출 하지 않도록 기본 클래스의 <xref:System.Windows.Forms.LinkLabel.CreateAccessibilityInstance%2A> 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberSignature Language="F#" Value="override this.CreateHandle : unit -&gt; unit" Usage="linkLabel.CreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a handle for this control. This method is called by the .NET Framework, this should not be called. Inheriting classes should always call <see langword="base.createHandle" /> when overriding this method.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisabledLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color DisabledLinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color DisabledLinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.DisabledLinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property DisabledLinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color DisabledLinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.DisabledLinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.LinkLabel.DisabledLinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color used when displaying a disabled link.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> 비활성화 된 링크를 표시할 때 색을 나타내는입니다. 기본값은 <see langword="Empty" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 사용 하면에서 비활성화 된 링크에 대 한 색을 지정 하는 <xref:System.Windows.Forms.LinkLabel>합니다. 비활성화 된 링크 하지 않게 된 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 이벤트를 발생 합니다.  
  
 링크와 관련 된 색의 여러 가지가 있습니다. 에 있는 모든 링크는 <xref:System.Windows.Forms.LinkLabel> 에 정의 된 색으로 처음 표시 되는 <xref:System.Windows.Forms.LinkLabel.LinkColor%2A> 속성입니다. <xref:System.Windows.Forms.LinkLabel.ActiveLinkColor%2A> 속성을 사용 하면이 눌려져 때 링크의 색을 지정할 수 있습니다. <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> 속성을 사용 하면 사용자가 방문한 후에 링크의 색을 지정할 수 있습니다.  
  
> [!NOTE]
>  이 속성을 설정할 때 확인 색 속성 충돌 하지 않는 컨트롤의 배경색을 설정 하는 또는 텍스트가 제대로 표시 되지 않습니다. 예를 들어, 컨트롤의 배경색은 `Color.Red` 이 속성을 설정 하 고 `Color.Red`, 텍스트 표시 되지 않습니다 제대로 링크 사용할 수 없습니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.Windows.Forms.LinkLabel> 여러 클래스 <xref:System.Windows.Forms.LinkArea> 양식에 레이블을 표시 하는 정의 된 섹션입니다. 예제 설정에는 <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, 및 <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> 속성의 모양을 사용자 지정할 수는 <xref:System.Windows.Forms.LinkLabel>합니다. 첫 번째 <xref:System.Windows.Forms.LinkArea> 를 사용 하 여 지정 된 <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> 속성입니다. 추가 링크에 추가 되는 <xref:System.Windows.Forms.LinkLabel> 를 사용 하는 <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> 메서드. 예제 핸들의 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 하이퍼링크에 대 한 웹 브라우저를 시작 하 고 표시 하 여 이벤트는 <xref:System.Windows.Forms.MessageBox> 다른 링크에 대 한 합니다.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.LinkColor" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.ActiveLinkColor" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.VisitedLinkColor" />
      </Docs>
    </Member>
    <Member MemberName="FlatStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FlatStyle FlatStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.FlatStyle FlatStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.FlatStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FlatStyle As FlatStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FlatStyle FlatStyle { System::Windows::Forms::FlatStyle get(); void set(System::Windows::Forms::FlatStyle value); };" />
      <MemberSignature Language="F#" Value="member this.FlatStyle : System.Windows.Forms.FlatStyle with get, set" Usage="System.Windows.Forms.LinkLabel.FlatStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FlatStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the flat style appearance of the <see cref="T:System.Windows.Forms.LinkLabel" />.</summary>
        <value>
          <see cref="T:System.Windows.Forms.FlatStyle" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 이 클래스와 관련이 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkArea">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.LinkArea LinkArea { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.LinkArea LinkArea" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.LinkArea" />
      <MemberSignature Language="VB.NET" Value="Public Property LinkArea As LinkArea" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::LinkArea LinkArea { System::Windows::Forms::LinkArea get(); void set(System::Windows::Forms::LinkArea value); };" />
      <MemberSignature Language="F#" Value="member this.LinkArea : System.Windows.Forms.LinkArea with get, set" Usage="System.Windows.Forms.LinkLabel.LinkArea" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.LinkAreaEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LinkArea</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the range in the text to treat as a link.</summary>
        <value>A <see cref="T:System.Windows.Forms.LinkArea" /> 링크로 처리 된 영역을 나타내는입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> 속성은 단일 하이퍼링크의 텍스트에 표시를 지정 하는 빠른 방법을 제공는 <xref:System.Windows.Forms.LinkLabel> 제어 합니다. <xref:System.Windows.Forms.LinkArea> 개체 컨트롤의 텍스트 및 하이퍼링크에 대 한 텍스트의 길이 내에서 링크의 시작 위치를 지정 하는 속성을 제공 합니다. 하이퍼링크를 사용 하 여 지정 된 경우는 <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> 속성이, 하이퍼링크에 추가 되는 <xref:System.Windows.Forms.LinkLabel.LinkCollection> 컨트롤의 합니다. <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> 속성 변환은 <xref:System.Windows.Forms.LinkArea> 항목을 할당 하는 개체는 <xref:System.Windows.Forms.LinkLabel.Link> 컬렉션 내에 저장 된 개체입니다.  
  
 컨트롤의 텍스트를 여러 개의 하이퍼링크를 추가 하려면 사용할 수 있습니다는 <xref:System.Windows.Forms.LinkLabel.Links%2A> 속성입니다. <xref:System.Windows.Forms.LinkLabel.Links%2A> 속성의 메서드와 속성에 액세스할 수 있습니다는 <xref:System.Windows.Forms.LinkLabel.LinkCollection>, 컨트롤에 대해 지정 된 링크를 저장 하는 합니다. 에 대 한 링크를 추가 하는이 메서드는 <xref:System.Windows.Forms.LinkLabel> 에 데이터를 지정할 수 있습니다는 <xref:System.Windows.Forms.LinkLabel.Link.LinkData%2A> 만들어지는 링크와 연결 된 속성입니다. 값은 <xref:System.Windows.Forms.LinkLabel.Link.LinkData%2A> 속성을 표시 하는 파일의 위치 또는 웹 사이트의 주소를 저장 하려면 사용할 수 있습니다.  
  
 경우는 <xref:System.Windows.Forms.LinkLabel> 컨트롤을 만들 내에서 모든 텍스트를 포함 하는 기본 하이퍼링크는 <xref:System.Windows.Forms.LinkLabel> 에 컨트롤이 추가 되는 <xref:System.Windows.Forms.LinkLabel.LinkCollection>합니다. 이 기본 링크 된 새 링크 영역을 지정 하 여 재정의할 수 있습니다는 <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> 속성을 사용 하 여 링크 지정 하거나는 <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A> 의 메서드는 <xref:System.Windows.Forms.LinkLabel.LinkCollection>합니다. 사용 하 여 기본 하이퍼링크를 제거할 수도 있습니다는 <xref:System.Windows.Forms.LinkLabel.LinkCollection.Remove%2A> 의 메서드는 <xref:System.Windows.Forms.LinkLabel.LinkCollection> 클래스입니다.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> 속성에서 첫 번째 항목은 항상 반환 된 <xref:System.Windows.Forms.LinkLabel.LinkCollection>컬렉션에 추가 된 하이퍼링크에 관계 없이 합니다.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.LinkArea.Length%2A> 속성 <xref:System.Windows.Forms.LinkArea> 호출 하는 경우이 다릅니다 <xref:System.Windows.Forms.LinkLabel.UseCompatibleTextRendering%2A>, 및 <xref:System.Windows.Forms.LinkLabel.Text%2A> 속성 더블 바이트 문자를 포함 합니다. 호출 하는 경우 <xref:System.Windows.Forms.LinkLabel.UseCompatibleTextRendering%2A>, 문자열의 바이트 수를 반환 합니다. 그렇지 않은 경우 실제 문자 수를 반환 합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.Windows.Forms.LinkLabel> 여러 클래스 <xref:System.Windows.Forms.LinkArea> 양식에 레이블을 표시 하는 정의 된 섹션입니다. 예제 설정에는 <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, 및 <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> 속성의 모양을 사용자 지정할 수는 <xref:System.Windows.Forms.LinkLabel>합니다. 첫 번째 <xref:System.Windows.Forms.LinkArea> 를 사용 하 여 지정 된 <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> 속성입니다. 추가 링크에 추가 되는 <xref:System.Windows.Forms.LinkLabel> 를 사용 하는 <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> 메서드. 예제 핸들의 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 하이퍼링크에 대 한 웹 브라우저를 시작 하 고 표시 하 여 이벤트는 <xref:System.Windows.Forms.MessageBox> 다른 링크에 대 한 합니다.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Windows.Forms.LinkArea.Start" /> property of the <see cref="T:System.Windows.Forms.LinkArea" /> object is less than zero.  -or-  The <see cref="P:System.Windows.Forms.LinkArea.Length" /> property of the <see cref="T:System.Windows.Forms.LinkArea" /> object is less than -1.</exception>
        <altmember cref="T:System.Drawing.Point" />
      </Docs>
    </Member>
    <Member MemberName="LinkBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.LinkBehavior LinkBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.LinkBehavior LinkBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.LinkBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property LinkBehavior As LinkBehavior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::LinkBehavior LinkBehavior { System::Windows::Forms::LinkBehavior get(); void set(System::Windows::Forms::LinkBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.LinkBehavior : System.Windows.Forms.LinkBehavior with get, set" Usage="System.Windows.Forms.LinkLabel.LinkBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LinkBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that represents the behavior of a link.</summary>
        <value>
          <see cref="T:System.Windows.Forms.LinkBehavior" /> 값 중 하나입니다. 기본값은 <see langword="LinkBehavior.SystemDefault" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 사용 하면 컨트롤에 표시 되는 링크의 동작을 지정할 수 있습니다. 예를 들어 마우스 포인터가 링크 하는 경우에에 밑줄 표시에 대 한 링크를 사용 하도록 하려는 경우 설정할 수 있습니다이 속성 `LinkBehavior.HoverUnderline`합니다. 링크와 관련 될 수 있는 동작의 형식에 대 한 자세한 내용은 참조 하십시오. <xref:System.Windows.Forms.LinkBehavior>합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.Windows.Forms.LinkLabel> 여러 클래스 <xref:System.Windows.Forms.LinkArea> 양식에 레이블을 표시 하는 정의 된 섹션입니다. 예제 설정에는 <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, 및 <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> 속성의 모양을 사용자 지정할 수는 <xref:System.Windows.Forms.LinkLabel>합니다. 첫 번째 <xref:System.Windows.Forms.LinkArea> 를 사용 하 여 지정 된 <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> 속성입니다. 추가 링크에 추가 되는 <xref:System.Windows.Forms.LinkLabel> 를 사용 하는 <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> 메서드. 예제 핸들의 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 하이퍼링크에 대 한 웹 브라우저를 시작 하 고 표시 하 여 이벤트는 <xref:System.Windows.Forms.MessageBox> 다른 링크에 대 한 합니다.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">A value is assigned that is not one of the <see cref="T:System.Windows.Forms.LinkBehavior" /> values.</exception>
        <altmember cref="T:System.Windows.Forms.LinkBehavior" />
      </Docs>
    </Member>
    <Member MemberName="LinkClicked">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LinkLabelLinkClickedEventHandler LinkClicked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LinkLabelLinkClickedEventHandler LinkClicked" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.LinkLabel.LinkClicked" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LinkClicked As LinkLabelLinkClickedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LinkLabelLinkClickedEventHandler ^ LinkClicked;" />
      <MemberSignature Language="F#" Value="member this.LinkClicked : System.Windows.Forms.LinkLabelLinkClickedEventHandler " Usage="member this.LinkClicked : System.Windows.Forms.LinkLabelLinkClickedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LinkLabelLinkClickedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a link is clicked within the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 컨트롤에서 링크를 클릭할 때 작업을 수행 하려는 이벤트가 처리 됩니다. 에 대 한 이벤트 처리기는 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 이벤트의 인스턴스를 전달 되는 <xref:System.Windows.Forms.LinkLabelLinkClickedEventArgs> 클래스를 포함 하는 <xref:System.Windows.Forms.LinkLabel.Link> 클릭 된 링크와 연결 된 개체입니다. 에 지정 된 정보를 사용할 수는 <xref:System.Windows.Forms.LinkLabel.Link.LinkData%2A> 속성 <xref:System.Windows.Forms.LinkLabel.Link> 연결을 확인 하려면 클래스를 클릭 한 또는 어떤 유형의 때 수행할 작업 링크를 클릭 합니다. 예를 들어 경우는 <xref:System.Windows.Forms.LinkLabel> 컨트롤에는 <xref:System.Windows.Forms.LinkLabel.Link> 으로 정의 된 개체의 <xref:System.Windows.Forms.LinkLabel.Link.LinkData%2A> 문자열 www.microsoft.com로 설정 하는 속성에 대 한 이벤트 처리기에서이 정보를 사용할 수 있습니다는 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 웹 사이트를 표시 하는 이벤트입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.Windows.Forms.LinkLabel> 클래스입니다. 예제 핸들의 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 웹 사이트를 열어 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.LinkLabelSimple#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelSimple/CS/form.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabelSimple#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelSimple/VB/form.vb#1)]  
  
 다음 예제는 <xref:System.Windows.Forms.LinkLabel> 여러 클래스 <xref:System.Windows.Forms.LinkArea> 양식에 레이블을 표시 하는 정의 된 섹션입니다. 예제 설정에는 <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, 및 <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> 속성의 모양을 사용자 지정할 수는 <xref:System.Windows.Forms.LinkLabel>합니다. 첫 번째 <xref:System.Windows.Forms.LinkArea> 를 사용 하 여 지정 된 <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> 속성입니다. 추가 링크에 추가 되는 <xref:System.Windows.Forms.LinkLabel> 를 사용 하는 <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> 메서드. 예제 핸들의 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 하이퍼링크에 대 한 웹 브라우저를 시작 하 고 표시 하 여 이벤트는 <xref:System.Windows.Forms.MessageBox> 다른 링크에 대 한 합니다.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.LinkLabelLinkClickedEventHandler" />
        <altmember cref="M:System.Windows.Forms.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="LinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.LinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property LinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color LinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.LinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.LinkLabel.LinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color used when displaying a normal link.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> 기본 링크를 표시 하는 데 사용할 색을 나타내는입니다. 기본 색은 시스템에서 지정, 일반적으로이 색은 <see langword="Color.Blue" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에 있는 모든 연결에 대 한 처음 표시 되는 색을 지정할 수 있습니다는 <xref:System.Windows.Forms.LinkLabel>합니다.  
  
 링크와 관련 된 색의 여러 가지가 있습니다. <xref:System.Windows.Forms.LinkLabel.ActiveLinkColor%2A> 속성을 사용 하면이 눌려져 때 링크의 색을 지정할 수 있습니다. <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> 속성을 사용 하면 사용자가 방문한 후에 링크의 색을 지정할 수 있습니다. 비활성화 된 링크는 <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A> 사용할 수 없는 상태에 링크를 표시 하는 데 사용 됩니다.  
  
> [!NOTE]
>  이 속성을 설정할 때 확인 색 속성 충돌 하지 않는 컨트롤의 배경색을 설정 하는 또는 텍스트가 제대로 표시 되지 않습니다. 예를 들어, 컨트롤의 배경색은 `Color.Red` 이 속성을 설정 하 고 `Color.Red`, 링크의 텍스트가 제대로 표시 되지 않습니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.Windows.Forms.LinkLabel> 여러 클래스 <xref:System.Windows.Forms.LinkArea> 양식에 레이블을 표시 하는 정의 된 섹션입니다. 예제 설정에는 <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, 및 <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> 속성의 모양을 사용자 지정할 수는 <xref:System.Windows.Forms.LinkLabel>합니다. 첫 번째 <xref:System.Windows.Forms.LinkArea> 를 사용 하 여 지정 된 <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> 속성입니다. 추가 링크에 추가 되는 <xref:System.Windows.Forms.LinkLabel> 를 사용 하는 <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> 메서드. 예제 핸들의 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 하이퍼링크에 대 한 웹 브라우저를 시작 하 고 표시 하 여 이벤트는 <xref:System.Windows.Forms.MessageBox> 다른 링크에 대 한 합니다.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.ActiveLinkColor" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.DisabledLinkColor" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.VisitedLinkColor" />
      </Docs>
    </Member>
    <Member MemberName="Links">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.LinkLabel.LinkCollection Links { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.LinkLabel/LinkCollection Links" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.Links" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Links As LinkLabel.LinkCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::LinkLabel::LinkCollection ^ Links { System::Windows::Forms::LinkLabel::LinkCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Links : System.Windows.Forms.LinkLabel.LinkCollection" Usage="System.Windows.Forms.LinkLabel.Links" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LinkLabel+LinkCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of links contained within the <see cref="T:System.Windows.Forms.LinkLabel" />.</summary>
        <value>A <see cref="T:System.Windows.Forms.LinkLabel.LinkCollection" /> 내에 포함 된 링크를 표시 하는 <see cref="T:System.Windows.Forms.LinkLabel" /> 제어 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.LinkLabel> 컨트롤 개수에 관계 없이 컨트롤의 텍스트 내에서 링크를 표시할 수 있습니다. 이 속성을 사용 하면에 액세스 하는 <xref:System.Windows.Forms.LinkLabel.LinkCollection> 와 연결 된 인스턴스는 <xref:System.Windows.Forms.LinkLabel> 컨트롤에 표시 되는 링크의 컬렉션을 나타내는입니다. 멤버를 사용할 수 있습니다는 <xref:System.Windows.Forms.LinkLabel.LinkCollection> 클래스를 추가, 제거 및 컬렉션에 유용할 수 있습니다. 참조 링크 컬렉션 수행할 수 있는 작업의 형식에 자세한 내용은 <xref:System.Windows.Forms.LinkLabel.LinkCollection>합니다.  
  
 경우는 <xref:System.Windows.Forms.LinkLabel> 컨트롤을 만들 내에서 모든 텍스트를 포함 하는 기본 하이퍼링크는 <xref:System.Windows.Forms.LinkLabel> 에 컨트롤이 추가 되는 <xref:System.Windows.Forms.LinkLabel.LinkCollection>합니다. 이 기본 링크 된 새 링크 영역을 지정 하 여 재정의할 수 있습니다는 <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> 속성을 사용 하 여 링크 지정 하거나는 <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A> 의 메서드는 <xref:System.Windows.Forms.LinkLabel.LinkCollection>합니다. 사용 하 여 기본 하이퍼링크를 제거할 수도 있습니다는 <xref:System.Windows.Forms.LinkLabel.LinkCollection.Remove%2A> 의 메서드는 <xref:System.Windows.Forms.LinkLabel.LinkCollection> 클래스입니다.  
  
 내에 표시할 여러 개의 링크를 지정 하지 필요가 <xref:System.Windows.Forms.LinkLabel>를 사용할 수 있습니다는 <xref:System.Windows.Forms.LinkLabel.LinkArea%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.Windows.Forms.LinkLabel> 여러 클래스 <xref:System.Windows.Forms.LinkArea> 양식에 레이블을 표시 하는 정의 된 섹션입니다. 예제 설정에는 <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, 및 <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> 속성의 모양을 사용자 지정할 수는 <xref:System.Windows.Forms.LinkLabel>합니다. 첫 번째 <xref:System.Windows.Forms.LinkArea> 를 사용 하 여 지정 된 <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> 속성입니다. 추가 링크에 추가 되는 <xref:System.Windows.Forms.LinkLabel> 를 사용 하는 <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> 메서드. 예제 핸들의 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 하이퍼링크에 대 한 웹 브라우저를 시작 하 고 표시 하 여 이벤트는 <xref:System.Windows.Forms.MessageBox> 다른 링크에 대 한 합니다.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.LinkLabel.LinkCollection" />
      </Docs>
    </Member>
    <Member MemberName="LinkVisited">
      <MemberSignature Language="C#" Value="public bool LinkVisited { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LinkVisited" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.LinkVisited" />
      <MemberSignature Language="VB.NET" Value="Public Property LinkVisited As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LinkVisited { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.LinkVisited : bool with get, set" Usage="System.Windows.Forms.LinkLabel.LinkVisited" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether a link should be displayed as though it were visited.</summary>
        <value>
          <see langword="true" /> 링크가; 열어 본 것 처럼 표시 되 면 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.LinkLabel> 컨트롤 열어 본된 링크를 자동으로 표시 하지 않습니다. 링크를 열어 본 링크로 표시 하려면이 속성의 값을 설정할 수 `true` 에 대 한 이벤트 처리기에는 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 의 이벤트는 <xref:System.Windows.Forms.LinkLabel>합니다. 열어 본된 링크에 지정 된 색을 사용 하 여 표시 되는 <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> 의 속성은 <xref:System.Windows.Forms.LinkLabel> 컨트롤입니다. 포함 된 폼은 <xref:System.Windows.Forms.LinkLabel> 컨트롤이 닫혀, 링크와 관련 된 "모든 표시" 상태가 삭제 됩니다. 링크의 표시 상태를 유지 하기 위해서는 응용 프로그램과 연결 된 레지스트리 설정에 링크의 표시 상태를 저장 해야 합니다.  
  
> [!NOTE]
>  이 속성에 정의 된 첫 번째 링크에만 영향을 미칩니다는 <xref:System.Windows.Forms.LinkLabel> 제어 합니다. 컨트롤에 지정 된 여러 개의 링크를 설정한 경우 사용 하 여는 <xref:System.Windows.Forms.LinkLabel.Link.Visited%2A> 의 속성은 <xref:System.Windows.Forms.LinkLabel.Link> 클래스입니다. 에 정의 된 모든 링크에 액세스할 수 있습니다는 <xref:System.Windows.Forms.LinkLabel> 를 사용 하 여는 <xref:System.Windows.Forms.LinkLabel.Links%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 설정 된 <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A> 사용 하 여 속성의 <xref:System.Windows.Forms.LinkBehavior> 열거형입니다. 설정에 대해서도 설명는 <xref:System.Windows.Forms.LinkLabel.ActiveLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A> 및 <xref:System.Windows.Forms.LinkLabel.LinkVisited%2A> 속성입니다. 실행 하려면이 샘플에 붙여 빈 폼과 호출 `InitializeLinkLabel` 폼의 생성자 또는 `Load` 메서드.  
  
 [!code-cpp[System.Windows.Forms.LinkLabelExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabelExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabelExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabelExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeChanged">
      <MemberSignature Language="C#" Value="protected override void OnAutoSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnAutoSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnAutoSizeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnAutoSizeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnAutoSizeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnAutoSizeChanged : EventArgs -&gt; unit" Usage="linkLabel.OnAutoSizeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Label.AutoSizeChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.LinkLabel.OnAutoSizeChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.LinkLabel.OnAutoSizeChanged(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.LinkLabel.OnAutoSizeChanged(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnEnabledChanged">
      <MemberSignature Language="C#" Value="protected override void OnEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnEnabledChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnEnabledChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnEnabledChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnEnabledChanged : EventArgs -&gt; unit" Usage="linkLabel.OnEnabledChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Provides handling for the <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.LinkLabel.OnEnabledChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.LinkLabel.OnEnabledChanged(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.LinkLabel.OnEnabledChanged(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnFontChanged : EventArgs -&gt; unit" Usage="linkLabel.OnFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnGotFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : EventArgs -&gt; unit" Usage="linkLabel.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.GotFocus" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.LinkLabel.OnGotFocus(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> 메서드.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="T:System.EventArgs" />
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
        <altmember cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="linkLabel.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.LinkLabel.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> 메서드.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnLinkClicked">
      <MemberSignature Language="C#" Value="protected virtual void OnLinkClicked (System.Windows.Forms.LinkLabelLinkClickedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLinkClicked(class System.Windows.Forms.LinkLabelLinkClickedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLinkClicked (e As LinkLabelLinkClickedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLinkClicked(System::Windows::Forms::LinkLabelLinkClickedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLinkClicked : System.Windows.Forms.LinkLabelLinkClickedEventArgs -&gt; unit&#xA;override this.OnLinkClicked : System.Windows.Forms.LinkLabelLinkClickedEventArgs -&gt; unit" Usage="linkLabel.OnLinkClicked e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LinkLabelLinkClickedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.LinkLabel.LinkClicked" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.LinkLabel.OnLinkClicked%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs" />
        <altmember cref="E:System.Windows.Forms.LinkLabel.LinkClicked" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected override void OnLostFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLostFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnLostFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnLostFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnLostFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnLostFocus : EventArgs -&gt; unit" Usage="linkLabel.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.LostFocus" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.LinkLabel.OnLostFocus(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> 메서드.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="T:System.EventArgs" />
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
        <altmember cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected override void OnMouseDown (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseDown(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseDown (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseDown(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseDown : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="linkLabel.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.LinkLabel.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> 메서드.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseLeave : EventArgs -&gt; unit" Usage="linkLabel.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.LinkLabel.OnMouseLeave(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> 메서드.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="T:System.EventArgs" />
        <altmember cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected override void OnMouseMove (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseMove(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseMove(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseMove : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="linkLabel.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.LinkLabel.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> 메서드.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
        <altmember cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected override void OnMouseUp (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseUp (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseUp(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseUp : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="linkLabel.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.LinkLabel.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> 메서드.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Control" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
        <altmember cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnPaddingChanged">
      <MemberSignature Language="C#" Value="protected override void OnPaddingChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPaddingChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnPaddingChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPaddingChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPaddingChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPaddingChanged : EventArgs -&gt; unit" Usage="linkLabel.OnPaddingChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Control.PaddingChanged" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.LinkLabel.OnPaddingChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.LinkLabel.OnPaddingChanged(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.LinkLabel.OnPaddingChanged(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected override void OnPaint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPaint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnPaint(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPaint (e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPaint(System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPaint : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="linkLabel.OnPaint e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.LinkLabel.OnPaint(System.Windows.Forms.PaintEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> 메서드.</para>
        </block>
        <altmember cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
        <altmember cref="T:System.Windows.Forms.PaintEventArgs" />
        <altmember cref="T:System.Windows.Forms.Control" />
      </Docs>
    </Member>
    <Member MemberName="OnPaintBackground">
      <MemberSignature Language="C#" Value="protected override void OnPaintBackground (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPaintBackground(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPaintBackground (e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPaintBackground(System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPaintBackground : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="linkLabel.OnPaintBackground e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
        <summary>Paints the background of the control.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTextAlignChanged">
      <MemberSignature Language="C#" Value="protected override void OnTextAlignChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextAlignChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnTextAlignChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextAlignChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextAlignChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnTextAlignChanged : EventArgs -&gt; unit" Usage="linkLabel.OnTextAlignChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Windows.Forms.Label.TextAlignChanged" /> event.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Label.OnTextAlignChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected override void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnTextChanged : EventArgs -&gt; unit" Usage="linkLabel.OnTextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Provides handling for the <see cref="E:System.Windows.Forms.Control.TextChanged" /> event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideCursor">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.Cursor OverrideCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor OverrideCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.OverrideCursor" />
      <MemberSignature Language="VB.NET" Value="Protected Property OverrideCursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Forms::Cursor ^ OverrideCursor { System::Windows::Forms::Cursor ^ get(); void set(System::Windows::Forms::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OverrideCursor : System.Windows.Forms.Cursor with get, set" Usage="System.Windows.Forms.LinkLabel.OverrideCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the mouse pointer to use when the mouse pointer is within the bounds of the <see cref="T:System.Windows.Forms.LinkLabel" />.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Cursor" /> 마우스 포인터가 내에 있을 때 사용 하는 <see cref="T:System.Windows.Forms.LinkLabel" /> 범위입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.LinkLabel.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the interior spacing, in pixels, between the edges of a <see cref="T:System.Windows.Forms.LinkLabel" /> and its contents.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Padding" /> 내부 간격 (픽셀)을 나타내는 값입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PointInLink">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.LinkLabel.Link PointInLink (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Windows.Forms.LinkLabel/Link PointInLink(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.PointInLink(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function PointInLink (x As Integer, y As Integer) As LinkLabel.Link" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::LinkLabel::Link ^ PointInLink(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.PointInLink : int * int -&gt; System.Windows.Forms.LinkLabel.Link" Usage="linkLabel.PointInLink (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LinkLabel+Link</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">The horizontal coordinate of the point to search for a link.</param>
        <param name="y">The vertical coordinate of the point to search for a link.</param>
        <summary>Gets the link located at the specified client coordinates.</summary>
        <returns>A <see cref="T:System.Windows.Forms.LinkLabel.Link" /> representing the link located at the specified coordinates. If the point does not contain a link, <see langword="null" /> is returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하면 링크 내에서 특정 한 시점에 있는지 여부를 결정 하는 <xref:System.Windows.Forms.LinkLabel> 제어 합니다. 이 메서드를 사용 하 여에 대 한 이벤트 처리기에는 <xref:System.Windows.Forms.Control.MouseEnter> 마우스 포인터가 컨트롤에 대 한 링크를 올려 있는지 여부를 확인 하기 위해 컨트롤의 이벤트입니다. 마우스 포인터가 링크를 통해 결정 한 다음 표시할 수 있습니다는 링크에 대 한 추가 정보를 통해 사용자에 게 <xref:System.Windows.Forms.StatusBar> 텍스트 또는 <xref:System.Windows.Forms.ToolTip>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessDialogKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessDialogKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.ProcessDialogKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessDialogKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessDialogKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.ProcessDialogKey : System.Windows.Forms.Keys -&gt; bool" Usage="linkLabel.ProcessDialogKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">Key code and modifier flags.</param>
        <summary>Processes a dialog key.</summary>
        <returns>
          <see langword="true" /> to consume the key; <see langword="false" /> to allow further processing.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 탭, 리턴, 이스케이프 문자인 및 화살표 키 같은 대화 상자 문자를 처리 하는 메시지 사전 처리 동안 호출 됩니다. 이 메서드는 경우에는 `isInputKey` 메서드 컨트롤이 키에 관심이 있는지를 나타냅니다. `processDialogKey` 문자를 부모의 보내고 `processDialogKey` 메서드 또는 컨트롤에 부모가 없으면 false를 반환 합니다. `Form` 클래스 대화 상자 키의 실제 처리를 수행 하려면이 메서드를 재정의 합니다. 재정의 하는 경우 `processDialogKey`, 컨트롤은 반환 `true` 키가 처리 되었는지 나타냅니다. 컨트롤의 결과 의해 처리 되지 않은 키에 대 한 `base.processDialogChar` 반환 되어야 합니다. 컨트롤 거의 얻어지는 경우 할이 메서드를 재정의할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="protected override void Select (bool directed, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Select(bool directed, bool forward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.Select(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Select (directed As Boolean, forward As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Select(bool directed, bool forward);" />
      <MemberSignature Language="F#" Value="override this.Select : bool * bool -&gt; unit" Usage="linkLabel.Select (directed, forward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directed" Type="System.Boolean" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="directed">
          <see langword="true" /> to specify the direction of the control to select; otherwise, <see langword="false" />.</param>
        <param name="forward">
          <see langword="true" /> to move forward in the tab order; <see langword="false" /> to move backward in the tab order.</param>
        <summary>Activates a child control. Optionally specifies the direction in the tab order to select the control from.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected override void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetBoundsCore (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetBoundsCore(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="override this.SetBoundsCore : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="linkLabel.SetBoundsCore (x, y, width, height, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">New left of the control.</param>
        <param name="y">New right of the control.</param>
        <param name="width">New width of the control.</param>
        <param name="height">New height of the control.</param>
        <param name="specified">Which values were specified. This parameter reflects user intent, not which values have changed.</param>
        <summary>Performs the work of setting the bounds of this control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클래스 상속 크기 제한을 추가 하려면이 함수를 재정의할 수 있습니다. 상속 하는 클래스를 호출 해야 `base.setBoundsCore` 실제로 변경 하려면 컨트롤의 범위를 발생할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IButtonControl.DialogResult">
      <MemberSignature Language="C#" Value="System.Windows.Forms.DialogResult System.Windows.Forms.IButtonControl.DialogResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DialogResult System.Windows.Forms.IButtonControl.DialogResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.System#Windows#Forms#IButtonControl#DialogResult" />
      <MemberSignature Language="VB.NET" Value=" Property DialogResult As DialogResult Implements IButtonControl.DialogResult" />
      <MemberSignature Language="C++ CLI" Value="property System::Windows::Forms::DialogResult System.Windows.Forms.IButtonControl.DialogResult { System::Windows::Forms::DialogResult get(); void set(System::Windows::Forms::DialogResult value); };" />
      <MemberSignature Language="F#" Usage="System.Windows.Forms.LinkLabel.System.Windows.Forms.IButtonControl.DialogResult" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IButtonControl.DialogResult</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For a description of this member, see <see cref="P:System.Windows.Forms.IButtonControl.DialogResult" />.</summary>
        <value>
          <see cref="T:System.Windows.Forms.DialogResult" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Windows.Forms.LinkLabel> 인스턴스가 <xref:System.Windows.Forms.IButtonControl> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IButtonControl.NotifyDefault">
      <MemberSignature Language="C#" Value="void IButtonControl.NotifyDefault (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IButtonControl.NotifyDefault(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.System#Windows#Forms#IButtonControl#NotifyDefault(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub NotifyDefault (value As Boolean) Implements IButtonControl.NotifyDefault" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IButtonControl.NotifyDefault(bool value) = System::Windows::Forms::IButtonControl::NotifyDefault;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IButtonControl.NotifyDefault(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <see langword="true" /> if the control should behave as a default button; otherwise, <see langword="false" />.</param>
        <summary>Notifies the <see cref="T:System.Windows.Forms.LinkLabel" /> control that it is the default button.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.LinkLabel> 컨트롤이 기본 단추 인지에 관계 없이 동일 하 게 표시 되 고, 모양이 나 동작의이 메서드를 호출 하므로 변경 되지 것입니다는 <xref:System.Windows.Forms.LinkLabel>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IButtonControl.PerformClick">
      <MemberSignature Language="C#" Value="void IButtonControl.PerformClick ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IButtonControl.PerformClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.System#Windows#Forms#IButtonControl#PerformClick" />
      <MemberSignature Language="VB.NET" Value="Sub PerformClick () Implements IButtonControl.PerformClick" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IButtonControl.PerformClick() = System::Windows::Forms::IButtonControl::PerformClick;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IButtonControl.PerformClick</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generates a <see cref="E:System.Windows.Forms.Control.Click" /> event for the <see cref="T:System.Windows.Forms.LinkLabel" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하면 첫 번째 링크는 <xref:System.Windows.Forms.LinkLabel.LinkCollection> 클릭 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabStop">
      <MemberSignature Language="C#" Value="public bool TabStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TabStop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.TabStop" />
      <MemberSignature Language="VB.NET" Value="Public Property TabStop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TabStop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TabStop : bool with get, set" Usage="System.Windows.Forms.LinkLabel.TabStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the user can tab to the <see cref="T:System.Windows.Forms.LinkLabel" />.</summary>
        <value>
          <see langword="true" /> 사용자 수를 탭 하는 경우는 <see cref="T:System.Windows.Forms.LinkLabel" />, 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.LinkLabel.TabStop%2A> 속성은 `true` 기본적으로 하나 이상의 링크가의 길이 0 보다 큰 만큼는 <xref:System.Windows.Forms.LinkLabel.Links%2A> 컬렉션입니다. <xref:System.Windows.Forms.LinkLabel> 컨트롤에는 단일 <xref:System.Windows.Forms.Control.TabIndex%2A> 값입니다. 그러나 각 링크의 길이 0 보다 큰 왼쪽에서 오른쪽 순서로 자체 탭 정지를 가져옵니다. 탭 탐색을 방지 하려면는 <xref:System.Windows.Forms.LinkLabel> 제어, 설정 된 <xref:System.Windows.Forms.LinkLabel.TabStop%2A> 속성을 `false`합니다. 그러나에 새 링크를 추가 <xref:System.Windows.Forms.LinkLabel.Links%2A> 컬렉션은 자동으로 설정 된 <xref:System.Windows.Forms.LinkLabel.TabStop%2A> 속성을 `true` 다시 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabStopChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TabStopChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TabStopChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.LinkLabel.TabStopChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TabStopChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TabStopChanged;" />
      <MemberSignature Language="F#" Value="member this.TabStopChanged : EventHandler " Usage="member this.TabStopChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the value of the <see cref="P:System.Windows.Forms.Label.TabStop" /> property changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.LinkLabel.TabStopChanged> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.LinkLabel> 라는 `LinkLabel1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.LinkLabel.TabStopChanged> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#460](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#460)]
 [!code-vb[System.Windows.Forms.EventExamples#460](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#460)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.LinkLabel.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text displayed by the <see cref="T:System.Windows.Forms.LinkLabel" />.</summary>
        <value>표시 되는 텍스트는 <see cref="T:System.Windows.Forms.LinkLabel" />합니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleTextRendering">
      <MemberSignature Language="C#" Value="public bool UseCompatibleTextRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCompatibleTextRendering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.UseCompatibleTextRendering" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCompatibleTextRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCompatibleTextRendering { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseCompatibleTextRendering : bool with get, set" Usage="System.Windows.Forms.LinkLabel.UseCompatibleTextRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that determines whether to use the <see cref="T:System.Drawing.Graphics" /> class ([!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]) or the <see cref="T:System.Windows.Forms.TextRenderer" /> class ([!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]) to render text.</summary>
        <value>
          <see langword="true" /> 경우는 <see cref="T:System.Drawing.Graphics" /> 버전 1.0 및 1.1 호환을 위해 텍스트 렌더링을 수행 하려면 클래스를 사용 해야 합니다. .NET framework; 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Forms.LinkLabel.UseCompatibleTextRendering%2A> 속성이 `false`, <xref:System.Windows.Forms.LinkArea> 전체 텍스트에 설명 합니다. 예를 들어 "abcd" 등의 텍스트에 밑줄이 표시 되는 후행 공간으로 렌더링 됩니다.  
  
 경우는 <xref:System.Windows.Forms.LinkLabel.UseCompatibleTextRendering%2A> 속성이 `true`, <xref:System.Windows.Forms.LinkArea> 전체 텍스트를 처리 하지 않습니다.  
  
 `UseCompatibleTextRendering` 속성은 해당 렌더링 텍스트를 사용 하 여 Windows Forms 컨트롤 간의 시각적 호환성을 제공 하기 위한는 <xref:System.Windows.Forms.TextRenderer> 클래스 및 [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)] 및 [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)] 는 를사용하여사용자지정텍스트렌더링을수행하는응용프로그램<xref:System.Drawing.Graphics>클래스입니다. 대부분의 경우에서 응용 프로그램을 업그레이드 하는 경우 [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)] 또는 [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]를 그대로 사용 하는 것이 좋습니다. `UseCompatibleTextRendering` 의 기본값으로 설정 `false`합니다.  
  
 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 기반 <xref:System.Windows.Forms.TextRenderer> 클래스에 도입 된는 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] 성능 향상을 위해 텍스트를 더 보기 좋게 및 국가별 글꼴에 대 한 지원 향상을 확인 합니다. 이전 버전의 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 기반 <xref:System.Drawing.Graphics> 클래스는 모든 텍스트 렌더링을 수행 하는 데 사용 되었습니다. [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 문자 간격 및 줄 바꿈 다르게에서 계산 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]합니다. 사용 하는 Windows Forms 응용 프로그램에는 <xref:System.Drawing.Graphics> 텍스트를 렌더링 하는 클래스를 사용 하는 컨트롤에 대 한 텍스트 될 수 <xref:System.Windows.Forms.TextRenderer> 다른 응용 프로그램에 다른 텍스트를 표시 합니다. 이러한 호환성 문제를 해결 하려면 설정할 수 있습니다는 `UseCompatibleTextRendering` 속성을 `true` 특정 컨트롤에 대 한 합니다. 설정 하려면 `UseCompatibleTextRendering` 를 `true` 응용 프로그램에서 지원 되는 모든 컨트롤에 대 한 호출의 <xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A?displayProperty=nameWithType> 의 매개 변수를 사용 하 여 메서드 `true`합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.LinkArea" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.LinkArea" />
        <altmember cref="M:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault(System.Boolean)" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      </Docs>
    </Member>
    <Member MemberName="VisitedLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color VisitedLinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color VisitedLinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LinkLabel.VisitedLinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property VisitedLinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color VisitedLinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.VisitedLinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.LinkLabel.VisitedLinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color used when displaying a link that that has been previously visited.</summary>
        <value>A <see cref="T:System.Drawing.Color" /> 열어 본 링크를 표시 하는 데 사용할 색을 나타내는입니다. 기본 색은 시스템에서 지정, 일반적으로이 색은 <see langword="Color.Purple" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 사용 하면 모든 링크에 대해 표시 되는 색을 지정할 수는 `LinkLabel` <xref:System.Windows.Forms> 사용자가 방문 않은입니다.  
  
 링크와 관련 된 색의 여러 가지가 있습니다. 에 있는 모든 링크는 <xref:System.Windows.Forms.LinkLabel> 에 정의 된 색으로 처음 표시 되는 <xref:System.Windows.Forms.LinkLabel.LinkColor%2A> 속성입니다. <xref:System.Windows.Forms.LinkLabel.ActiveLinkColor%2A> 속성을 사용 하면이 눌려져 때 링크의 색을 지정할 수 있습니다. 비활성화 된 링크는 <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A> 사용할 수 없는 상태에 링크를 표시 하는 데 사용 됩니다.  
  
> [!NOTE]
>  이 속성을 설정할 때 확인 색 속성 충돌 하지 않는 컨트롤의 배경색을 설정 하는 또는 텍스트가 제대로 표시 되지 않습니다. 예를 들어, 컨트롤의 배경색은 `Color.Red` 이 속성을 설정 하 고 `Color.Red`, 링크를 방문한 링크로 표시 되 면 텍스트 올바르게 보여지지 않습니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.Windows.Forms.LinkLabel> 여러 클래스 <xref:System.Windows.Forms.LinkArea> 양식에 레이블을 표시 하는 정의 된 섹션입니다. 예제 설정에는 <xref:System.Windows.Forms.Label.AutoSize%2A>, <xref:System.Windows.Forms.LinkLabel.LinkBehavior%2A>, <xref:System.Windows.Forms.LinkLabel.DisabledLinkColor%2A>, <xref:System.Windows.Forms.LinkLabel.LinkColor%2A>, 및 <xref:System.Windows.Forms.LinkLabel.VisitedLinkColor%2A> 속성의 모양을 사용자 지정할 수는 <xref:System.Windows.Forms.LinkLabel>합니다. 첫 번째 <xref:System.Windows.Forms.LinkArea> 를 사용 하 여 지정 된 <xref:System.Windows.Forms.LinkLabel.LinkArea%2A?displayProperty=nameWithType> 속성입니다. 추가 링크에 추가 되는 <xref:System.Windows.Forms.LinkLabel> 를 사용 하는 <xref:System.Windows.Forms.LinkLabel.LinkCollection.Add%2A?displayProperty=nameWithType> 메서드. 예제 핸들의 <xref:System.Windows.Forms.LinkLabel.LinkClicked> 하이퍼링크에 대 한 웹 브라우저를 시작 하 고 표시 하 여 이벤트는 <xref:System.Windows.Forms.MessageBox> 다른 링크에 대 한 합니다.  
  
 [!code-cpp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CPP/linklabel.cpp#1)]
 [!code-csharp[System.Windows.Forms.LinkLabel#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/CS/linklabel.cs#1)]
 [!code-vb[System.Windows.Forms.LinkLabel#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LinkLabel/VB/linklabel.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.ActiveLinkColor" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.DisabledLinkColor" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.LinkColor" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message msg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LinkLabel.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef msg As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % msg);" />
      <MemberSignature Language="F#" Value="override this.WndProc :  -&gt; unit" Usage="linkLabel.WndProc msg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="msg">The message to process.</param>
        <summary>Processes the specified Windows message.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">에 비관리 코드와 작동 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>