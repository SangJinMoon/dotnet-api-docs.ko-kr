<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="547a0fa86ff2ce303d6c98e4bb8cd3b372c52847" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36517316" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>창 핸들과 창 프로시저의 저급 캡슐화를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 클래스는 창 클래스 만들기 및 등록에 자동으로 관리합니다.  
  
 창의 창 핸들와 연결 된 경우 가비지 수집을 수행할 수지 않습니다. 을 보장 하기 위해 적절 한 가비지 수집 핸들 해야 소멸 하거나 사용 하 여 수동으로 <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> 사용 하 여 <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>합니다.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> WM_NCDESTROY 메시지를 처리할 때 메서드를 호출 합니다. 즉, 되는 필요가 없습니다를 직접 호출 하도록 하는 경우도 있습니다. <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, 있지만 이렇게 하려면 것이 좋습니다.  
  
 <xref:System.Windows.Forms.NativeWindow> 클래스는 다음과 같은 속성 및 핸들을 관리 하는 메서드를 제공: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, 및 <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 창 프로시저 및 특정 운영 체제 창 클래스 이름으로 창을 만드는 운영 체제 창 메시지를 가로채는 방법을 보여 줍니다. 이 예에서는 두 개의 클래스에서 상속 하는 만듭니다 <xref:System.Windows.Forms.NativeWindow> 이 위해.  
  
 `MyNativeWindowListener` 클래스 생성자에 전달 되는 폼의 창 프로시저에 후크하고 및 재정의 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 메서드를 가로채는 `WM_ACTIVATEAPP` 창 메시지입니다. 클래스의 사용법을 보여 줍니다.는 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> 및 <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> 창 핸들을 식별 하는 메서드는 <xref:System.Windows.Forms.NativeWindow> 사용 합니다. 이 핸들은 기반으로 할당 된 <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> 이벤트입니다. 경우는 `WM_ACTIVATEAPP` 창 메시지를 받으면 클래스 호출은 `form1.ApplicationActivated` 메서드.  
  
 `MyNativeWindow` 클래스가 생성 된 새 창을 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 로 설정 `BUTTON`합니다. 클래스를 사용 하 여 보여 줍니다.는 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> 메서드와 재정의 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 수신 창 메시지를 가로채 메서드.  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 직접 실행 호출자입니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.NativeWindow" /> 클래스의 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이것이 기본 <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> 는 컴파일러에서 제공 하는 생성자입니다. <xref:System.Windows.Forms.NativeWindow> 클래스 응용 프로그램 도메인 전체 메시지 처리기 및 해시 테이블을 초기화 하는 정적 생성자에 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">이 창에 할당할 핸들입니다.</param>
        <summary>이 창에 핸들을 할당합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 창에 전송 된 메시지를 가로채는 `handle` 매개 변수입니다. 사용 하 여 <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> 기본 창 프로시저로 핸들의 창 프로시저를 다시 설정 합니다.  
  
 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> 메서드 호출은 <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 메서드를 나타내는 값을는 <xref:System.Windows.Forms.NativeWindow.Handle%2A> 속성이 변경 합니다.  
  
> [!NOTE]
>  다른 응용 프로그램 프로세스에서 할당에 대 한 일 수 없습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 창 프로시저에서 운영 체제 창 메시지를 가로채는 방법을 보여 줍니다. 이 예에서는에서 상속 되는 클래스를 만듭니다 <xref:System.Windows.Forms.NativeWindow> 이를 위해.  
  
 `MyNativeWindowListener` 클래스 생성자에 전달 되는 폼의 창 프로시저에 후크하고 및 재정의 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 를 가로챕니다 메서드는 `WM_ACTIVATEAPP` 창 메시지입니다. 클래스의 사용을 보여 줍니다.는 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> 및 <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> 창을 식별 하는 메서드를 처리는 <xref:System.Windows.Forms.NativeWindow> 사용 합니다. 핸들에 따라 할당 되는 <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> 이벤트입니다. 경우는 `WM_ACTIVATEAPP` 창 메시지를 받으면 클래스 호출은 `form1.ApplicationActivated` 메서드.  
  
 이 코드에 표시 된 예의 일부는는 <xref:System.Windows.Forms.NativeWindow> 클래스 개요입니다. 일부 코드는 간단 하 게 나타내기 위해 표시 되지 않습니다. 참조 <xref:System.Windows.Forms.NativeWindow> 전체 코드 목록에 대 한 합니다.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">이 창에 이미 핸들이 있는 경우</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">연결된 네이티브 창의 창 프로시저를 검색할 수 없는 경우</exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">이 창의 생성 매개 변수를 지정하는 <see cref="T:System.Windows.Forms.CreateParams" />입니다.</param>
        <summary>지정된 생성 매개 변수로 창 및 해당 핸들을 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `cp` 네이티브 Win32에 전달 되는 값을 지정 하는 매개 변수 `CreateWindowEx` 방법을 창과 해당 핸들을 만들 수 있습니다.  
  
 경우는 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 필드가 없으면 `null`, 새로 만든된 창 핸들을 지정된 된 클래스에서 상속 합니다. 예를 들어 경우 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 로 설정 된 `BUTTON`, Win32를 기반으로 하는 새로 만든된 창을 `BUTTON` 창 클래스입니다. <xref:System.Windows.Forms.CreateParams.Param%2A> 속성은 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 개체 같아야 `null` 또는 구조로 선언 된 클래스의 인스턴스를 참조 합니다.  
  
 이 코드에 표시 된 예의 일부는는 <xref:System.Windows.Forms.NativeWindow> 클래스 개요입니다. 일부 코드는 간단 하 게 나타내기 위해 표시 되지 않습니다. 참조 <xref:System.Windows.Forms.NativeWindow> 전체 코드 목록에 대 한 합니다.  
  
> [!NOTE]
>  제공 된 클래스 이름은 운영 체제에 등록 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 특정 운영 체제 창 클래스 이름으로 창을 만드는 하는 방법을 보여 줍니다. 이 예에서는에서 상속 되는 클래스를 만듭니다 <xref:System.Windows.Forms.NativeWindow> 이를 위해.  
  
 `MyNativeWindow` 클래스가 생성 된 새 창을 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 로 설정 `BUTTON`합니다. 이렇게 하면 Win32 단추 창을 만들어집니다. 단추의 크기와 위치 설정 되 고 추가 창 스타일을 지정 합니다. 클래스 사용 방법을 보여 줍니다.는 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> 메서드와 재정의 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 수신 창 메시지를 가로채 메서드. 이 예제에서는, WM_ACTIVATEAPP 메시지에 대 한 사용 되지만이 바꿀 수 있습니다 실제 프로그램에서 만든 형식과 관련 된 창 메시지.  
  
> [!NOTE]
>  일부 컨트롤 형식은 컨트롤은 창 부모 창 대신 창 메시지를 보냅니다. 자세한 내용은 Windows 플랫폼 SDK를 참조 하십시오.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">네이티브 창을 만들려고 할 때 운영 체제의 리소스가 부족한 경우</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">네이티브 Win32 API로 지정된 창을 만들 수 없는 경우</exception>
        <exception cref="T:System.InvalidOperationException">현재 네이티브 창의 핸들이 이미 할당된 경우. 즉 <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> 속성이 <see cref="F:System.IntPtr.Zero" />와 같지 않은 경우</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">최상위 창 만들기 이 사용 권한은 부모 창에 없는 경우 또는 창 스타일 자식인 경우에 필요 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">현재 처리 중인 메시지입니다.</param>
        <summary>이 창과 연결된 기본 창 프로시저를 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 만 호출 일반적으로 <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> 메서드 창 메시지를 가로채 고 메시지를 처리 하기를 기본 창 프로시저로 있을 것입니다. <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> 창에 창 메시지를 보내려고 호출할 수 없습니다. Win32 호출 `SendMessage` 함수를 대신 합니다.  
  
 호출 하면 오류가 발생 <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> 때는 <xref:System.Windows.Forms.NativeWindow.Handle%2A> 속성은 0입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>일반화 된 사용자 지정 메시지는 특정 기본 창 또는.NET Windows Forms에 대 한 처리를 구현 하려면 파생된 클래스에서이 메서드를 재정의 <see cref="T:System.Windows.Forms.Control" />합니다. 이전 이나 이후 또는 표준 메시지 처리를 수행 하는이 메서드의 기본 클래스 구현 호출 하는 대신 사용자 지정 처리를 수행할 수 있습니다.  반면, 추가 사용자 지정 메시지 처리 응용 프로그램을 통해 수행할 수에 대해는 <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> 의 메서드는 <see cref="T:System.Windows.Forms.Application" /> 클래스입니다.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>창 및 해당 핸들을 소멸시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 연결 된 창을 삭제는 <xref:System.Windows.Forms.NativeWindow.Handle%2A>, 설정는 <xref:System.Windows.Forms.NativeWindow.Handle%2A> 속성을 0이 고, 호출의 <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 메서드 변경 사항을 반영 합니다. 일반적으로 호출 하면 <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> 네이티브 창으로 완료 한 경우.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow> 클래스 자동으로 연결 된 창을 삭제 되며 WM_DESTROY 메시지에 대 한 응답으로 해당 리소스를 해제 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 창과 연결된 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.Finalize%2A> 메서드는 현재와 관련 된 Win32 파생 클래스를 제거 <xref:System.Windows.Forms.NativeWindow> 인스턴스 핸들을 해제 및 연결된 된 창이 WM_CLOSE 메시지에 게시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">창에 대한 핸들입니다.</param>
        <summary>지정된 핸들과 연결된 창을 검색합니다.</summary>
        <returns>지정된 핸들과 연결된 <see cref="T:System.Windows.Forms.NativeWindow" />입니다. 핸들이 창과 연결되어 있지 않을 경우 이 메서드는 <see langword="null" />을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 또 다른 방법은의 핸들을 수신 하면이 메서드를 사용 검색 핸들에 연결 된 창. 이미 다른 핸들을 소유 해야 <xref:System.Windows.Forms.NativeWindow> 현재에서 고, 그렇지 않으면 프로세스 `null` 반환 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 창의 핸들을 가져옵니다.</summary>
        <value>이 작업에 성공하면 연결된 네이티브 Win32 창에 대한 핸들을 나타내는 <see cref="T:System.IntPtr" />이고, 창과 연결된 핸들이 없으면 0입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 창 또는 컨트롤에 대 한 핸들을 필요로 하는 Windows API 메서드를 호출할 때이 메서드를 사용 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 특정 운영 체제 창 클래스 이름으로 창을 만드는 하는 방법을 보여 줍니다. 이 예에서는에서 상속 되는 클래스를 만듭니다 <xref:System.Windows.Forms.NativeWindow> 이를 위해. 예제에 나오는 재정의 <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 때 알림을 받을 수 있는 메서드는 <xref:System.Windows.Forms.NativeWindow.Handle%2A> 변경 합니다.  
  
 `MyNativeWindow` 클래스가 생성 된 새 창을 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 단추로 설정 합니다. 이렇게 하면 Win32 단추 창을 만들어집니다. 단추의 크기와 위치 설정 되 고 추가 창 스타일을 지정 합니다. 클래스 사용 방법을 보여 줍니다.는 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> 메서드와 재정의 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 수신 창 메시지를 가로채 메서드. 예, WM_ACTIVATEAPP 메시지에 대 한 사용 되지만이 수로 교체할 수 실제 프로그램에서 창 메시지를 만든 형식에 따라 다릅니다.  
  
> [!NOTE]
>  일부 컨트롤 형식은 컨트롤은 창 부모 창 대신 창 메시지를 보냅니다. 자세한 내용은 Windows 플랫폼 SDK를 참조 하십시오.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>창의 핸들이 변경될 때 호출되는 알림 메서드를 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드가 호출 되는 경우의 값은 <xref:System.Windows.Forms.NativeWindow.Handle%2A> 속성이 변경 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 특정 운영 체제 창 클래스 이름으로 창을 만드는 하는 방법을 보여 줍니다. 이 예에서는에서 상속 되는 클래스를 만듭니다 <xref:System.Windows.Forms.NativeWindow> 이를 위해. 예제에 나오는 재정의 <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 때 알림을 받을 수 있는 메서드는 <xref:System.Windows.Forms.NativeWindow.Handle%2A> 변경 합니다.  
  
 `MyNativeWindow` 클래스가 생성 된 새 창을 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 로 설정 `BUTTON`합니다. 이렇게 하면 Win32 단추 창을 만들어집니다. 단추의 크기와 위치 설정 되 고 추가 창 스타일을 지정 합니다. 클래스 사용 방법을 보여 줍니다.는 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> 메서드와 재정의 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 수신 창 메시지를 가로채 메서드. 이 예제에서는, WM_ACTIVATEAPP 메시지에 대 한 사용 되지만이 바꿀 수 있습니다 실제 프로그램에서 만든 형식과 관련 된 창 메시지.  
  
 이 코드에 표시 된 예의 일부는는 <xref:System.Windows.Forms.NativeWindow> 클래스 개요입니다. 일부 코드는 간단 하 게 나타내기 위해 표시 되지 않습니다. 참조 <xref:System.Windows.Forms.NativeWindow> 전체 코드 목록에 대 한 합니다.  
  
> [!NOTE]
>  일부 컨트롤 형식은 컨트롤은 창 부모 창 대신 창 메시지를 보냅니다. 자세한 내용은 Windows 플랫폼 SDK를 참조 하십시오.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>창 핸들에 대 한 변경 내용을 추적 하려면이 메서드를 재정의 합니다.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">처리되지 않은 스레드 예외를 지정하는 <see cref="T:System.Exception" />입니다.</param>
        <summary>파생된 클래스에서 재정의될 때 해당 메서드는 처리되지 않은 스레드 예외를 관리합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 <xref:System.Windows.Forms.Application.OnThreadException%2A> 스레드 예외를 처리 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 창과 연결된 핸들을 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 창 핸들을 제거 하지 않습니다. 대신, 기본 창 프로시저를 핸들의 창 프로시저를 설정합니다. 설정의 <xref:System.Windows.Forms.NativeWindow.Handle%2A> 속성을 0 호출 <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 변경 사항을 반영 합니다.  
  
 창은 Windows 핸들을 소멸 있는지를 나타내는 네이티브 Win32 WM_NCDESTROY 메시지를 수신 하는 경우 자동으로이 메서드를 호출 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 창 프로시저에서 운영 체제 창 메시지를 가로채는 방법을 보여 줍니다. 이 예에서는에서 상속 되는 클래스를 만듭니다 <xref:System.Windows.Forms.NativeWindow> 이를 위해.  
  
 `MyNativeWindowListener` 클래스 생성자에 전달 되는 폼의 창 프로시저에 후크하고 및 재정의 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 를 가로챕니다 메서드는 `WM_ACTIVATEAPP` 창 메시지입니다. 클래스의 사용을 보여 줍니다.는 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> 및 <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> 창 핸들을 식별 하는 메서드는 <xref:System.Windows.Forms.NativeWindow> 사용 합니다. 이 핸들은 기반으로 할당 된 <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> 이벤트입니다. 경우는 `WM_ACTIVATEAPP` 창 메시지를 받으면 클래스 호출은 `form1.ApplicationActivated` 메서드.  
  
 이 코드에 표시 된 예의 일부는는 <xref:System.Windows.Forms.NativeWindow> 클래스 개요입니다. 일부 코드는 간단 하 게 나타내기 위해 표시 되지 않습니다. 참조 <xref:System.Windows.Forms.NativeWindow> 전체 코드 목록에 대 한 합니다.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">현재 Windows 메시지와 연결된 <see cref="T:System.Windows.Forms.Message" />입니다.</param>
        <summary>이 창과 연결된 기본 창 프로시저를 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 창 핸들에는 창 메시지를 보낼 때 호출 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 창 프로시저에서 운영 체제 창 메시지를 가로채는 방법을 보여 줍니다. 이 예에서는에서 상속 되는 클래스를 만듭니다 <xref:System.Windows.Forms.NativeWindow> 이를 위해.  
  
 `MyNativeWindowListener` 클래스 생성자에 전달 되는 폼의 창 프로시저에 후크하고 및 재정의 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 메서드를 가로채는 `WM_ACTIVATEAPP` 창 메시지입니다. 클래스의 사용을 보여 줍니다.는 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> 및 <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> 창 핸들을 식별 하는 메서드는 <xref:System.Windows.Forms.NativeWindow> 사용 합니다. 핸들에 따라 할당 되는 <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> 이벤트입니다. 경우는 `WM_ACTIVATEAPP` 창 메시지를 받으면 클래스 호출은 `form1.ApplicationActivated` 메서드.  
  
 이 코드에 표시 된 예의 일부는는 <xref:System.Windows.Forms.NativeWindow> 클래스 개요입니다. 일부 코드는 간단 하 게 나타내기 위해 표시 되지 않습니다. 참조 <xref:System.Windows.Forms.NativeWindow> 전체 코드 목록에 대 한 합니다.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>특정 메시지 처리를 구현 하려면이 메서드를 재정의 합니다. 호출 <c>기본 합니다. WndProc</c> 처리 되지 않은 메시지에 대 한 합니다.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>