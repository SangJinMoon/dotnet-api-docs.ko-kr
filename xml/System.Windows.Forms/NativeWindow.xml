<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="547a0fa86ff2ce303d6c98e4bb8cd3b372c52847" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36517316" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="71b8b-101">창 핸들과 창 프로시저의 저급 캡슐화를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="71b8b-101">Provides a low-level encapsulation of a window handle and a window procedure.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71b8b-102">이 클래스는 창 클래스 만들기 및 등록에 자동으로 관리합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-102">This class automatically manages window class creation and registration.</span></span>  
  
 <span data-ttu-id="71b8b-103">창의 창 핸들와 연결 된 경우 가비지 수집을 수행할 수지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-103">A window is not eligible for garbage collection when it is associated with a window handle.</span></span> <span data-ttu-id="71b8b-104">을 보장 하기 위해 적절 한 가비지 수집 핸들 해야 소멸 하거나 사용 하 여 수동으로 <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> 사용 하 여 <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-104">To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71b8b-105"><xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> WM_NCDESTROY 메시지를 처리할 때 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-105">The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed.</span></span> <span data-ttu-id="71b8b-106">즉, 되는 필요가 없습니다를 직접 호출 하도록 하는 경우도 있습니다. <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, 있지만 이렇게 하려면 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-106">This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so.</span></span>  
  
 <span data-ttu-id="71b8b-107"><xref:System.Windows.Forms.NativeWindow> 클래스는 다음과 같은 속성 및 핸들을 관리 하는 메서드를 제공: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, 및 <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-107">The <xref:System.Windows.Forms.NativeWindow> class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71b8b-108">다음 코드 예제에서는 창 프로시저 및 특정 운영 체제 창 클래스 이름으로 창을 만드는 운영 체제 창 메시지를 가로채는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-108">The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="71b8b-109">이 예에서는 두 개의 클래스에서 상속 하는 만듭니다 <xref:System.Windows.Forms.NativeWindow> 이 위해.</span><span class="sxs-lookup"><span data-stu-id="71b8b-109">The example creates two classes that inherit from <xref:System.Windows.Forms.NativeWindow> that accomplish this.</span></span>  
  
 <span data-ttu-id="71b8b-110">`MyNativeWindowListener` 클래스 생성자에 전달 되는 폼의 창 프로시저에 후크하고 및 재정의 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 메서드를 가로채는 `WM_ACTIVATEAPP` 창 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-110">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="71b8b-111">클래스의 사용법을 보여 줍니다.는 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> 및 <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> 창 핸들을 식별 하는 메서드는 <xref:System.Windows.Forms.NativeWindow> 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-111">The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="71b8b-112">이 핸들은 기반으로 할당 된 <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-112">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="71b8b-113">경우는 `WM_ACTIVATEAPP` 창 메시지를 받으면 클래스 호출은 `form1.ApplicationActivated` 메서드.</span><span class="sxs-lookup"><span data-stu-id="71b8b-113">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="71b8b-114">`MyNativeWindow` 클래스가 생성 된 새 창을 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 로 설정 `BUTTON`합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-114">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="71b8b-115">클래스를 사용 하 여 보여 줍니다.는 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> 메서드와 재정의 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 수신 창 메시지를 가로채 메서드.</span><span class="sxs-lookup"><span data-stu-id="71b8b-115">The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span>  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">
      <span data-ttu-id="71b8b-116">비관리 코드를 호출할 직접 실행 호출자입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="71b8b-116">for the immediate caller to call unmanaged code.</span>
      </span>
      <span data-ttu-id="71b8b-117">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
      <span class="sxs-lookup">
        <span data-stu-id="71b8b-117">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
      </span>
    </permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71b8b-118">
            <see cref="T:System.Windows.Forms.NativeWindow" /> 클래스의 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-118">Initializes an instance of the <see cref="T:System.Windows.Forms.NativeWindow" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71b8b-119">이것이 기본 <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> 는 컴파일러에서 제공 하는 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-119">This is the default <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor provided by the compiler.</span></span> <span data-ttu-id="71b8b-120"><xref:System.Windows.Forms.NativeWindow> 클래스 응용 프로그램 도메인 전체 메시지 처리기 및 해시 테이블을 초기화 하는 정적 생성자에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-120">The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="71b8b-121">이 창에 할당할 핸들입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-121">The handle to assign to this window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71b8b-122">이 창에 핸들을 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-122">Assigns a handle to this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71b8b-123"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> 창에 전송 된 메시지를 가로채는 `handle` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-123"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter.</span></span> <span data-ttu-id="71b8b-124">사용 하 여 <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> 기본 창 프로시저로 핸들의 창 프로시저를 다시 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-124">Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure.</span></span>  
  
 <span data-ttu-id="71b8b-125"><xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> 메서드 호출은 <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 메서드를 나타내는 값을는 <xref:System.Windows.Forms.NativeWindow.Handle%2A> 속성이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-125">The <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71b8b-126">다른 응용 프로그램 프로세스에서 할당에 대 한 일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-126">The handle to assign cannot be in a different application process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71b8b-127">다음 코드 예제에서는 창 프로시저에서 운영 체제 창 메시지를 가로채는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-127">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="71b8b-128">이 예에서는에서 상속 되는 클래스를 만듭니다 <xref:System.Windows.Forms.NativeWindow> 이를 위해.</span><span class="sxs-lookup"><span data-stu-id="71b8b-128">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="71b8b-129">`MyNativeWindowListener` 클래스 생성자에 전달 되는 폼의 창 프로시저에 후크하고 및 재정의 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 를 가로챕니다 메서드는 `WM_ACTIVATEAPP` 창 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-129">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="71b8b-130">클래스의 사용을 보여 줍니다.는 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> 및 <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> 창을 식별 하는 메서드를 처리는 <xref:System.Windows.Forms.NativeWindow> 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-130">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="71b8b-131">핸들에 따라 할당 되는 <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-131">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="71b8b-132">경우는 `WM_ACTIVATEAPP` 창 메시지를 받으면 클래스 호출은 `form1.ApplicationActivated` 메서드.</span><span class="sxs-lookup"><span data-stu-id="71b8b-132">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="71b8b-133">이 코드에 표시 된 예의 일부는는 <xref:System.Windows.Forms.NativeWindow> 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-133">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="71b8b-134">일부 코드는 간단 하 게 나타내기 위해 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-134">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="71b8b-135">참조 <xref:System.Windows.Forms.NativeWindow> 전체 코드 목록에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-135">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="71b8b-136">이 창에 이미 핸들이 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-136">This window already has a handle.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="71b8b-137">연결된 네이티브 창의 창 프로시저를 검색할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-137">The windows procedure for the associated native window could not be retrieved.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">
          <span data-ttu-id="71b8b-138">이 창의 생성 매개 변수를 지정하는 <see cref="T:System.Windows.Forms.CreateParams" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-138">A <see cref="T:System.Windows.Forms.CreateParams" /> that specifies the creation parameters for this window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71b8b-139">지정된 생성 매개 변수로 창 및 해당 핸들을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-139">Creates a window and its handle with the specified creation parameters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71b8b-140">`cp` 네이티브 Win32에 전달 되는 값을 지정 하는 매개 변수 `CreateWindowEx` 방법을 창과 해당 핸들을 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-140">The `cp` parameter specifies the values that are passed to the native Win32 `CreateWindowEx` method to create a window and its handle.</span></span>  
  
 <span data-ttu-id="71b8b-141">경우는 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 필드가 없으면 `null`, 새로 만든된 창 핸들을 지정된 된 클래스에서 상속 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-141">When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class.</span></span> <span data-ttu-id="71b8b-142">예를 들어 경우 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 로 설정 된 `BUTTON`, Win32를 기반으로 하는 새로 만든된 창을 `BUTTON` 창 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-142">For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class.</span></span> <span data-ttu-id="71b8b-143"><xref:System.Windows.Forms.CreateParams.Param%2A> 속성은 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 개체 같아야 `null` 또는 구조로 선언 된 클래스의 인스턴스를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-143">The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure.</span></span>  
  
 <span data-ttu-id="71b8b-144">이 코드에 표시 된 예의 일부는는 <xref:System.Windows.Forms.NativeWindow> 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-144">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="71b8b-145">일부 코드는 간단 하 게 나타내기 위해 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-145">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="71b8b-146">참조 <xref:System.Windows.Forms.NativeWindow> 전체 코드 목록에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-146">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71b8b-147">제공 된 클래스 이름은 운영 체제에 등록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-147">The class name provided is registered with the operating system.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71b8b-148">다음 코드 예제에서는 특정 운영 체제 창 클래스 이름으로 창을 만드는 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-148">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="71b8b-149">이 예에서는에서 상속 되는 클래스를 만듭니다 <xref:System.Windows.Forms.NativeWindow> 이를 위해.</span><span class="sxs-lookup"><span data-stu-id="71b8b-149">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="71b8b-150">`MyNativeWindow` 클래스가 생성 된 새 창을 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 로 설정 `BUTTON`합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-150">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="71b8b-151">이렇게 하면 Win32 단추 창을 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-151">This creates a Win32 button window.</span></span> <span data-ttu-id="71b8b-152">단추의 크기와 위치 설정 되 고 추가 창 스타일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-152">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="71b8b-153">클래스 사용 방법을 보여 줍니다.는 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> 메서드와 재정의 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 수신 창 메시지를 가로채 메서드.</span><span class="sxs-lookup"><span data-stu-id="71b8b-153">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="71b8b-154">이 예제에서는, WM_ACTIVATEAPP 메시지에 대 한 사용 되지만이 바꿀 수 있습니다 실제 프로그램에서 만든 형식과 관련 된 창 메시지.</span><span class="sxs-lookup"><span data-stu-id="71b8b-154">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71b8b-155">일부 컨트롤 형식은 컨트롤은 창 부모 창 대신 창 메시지를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-155">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="71b8b-156">자세한 내용은 Windows 플랫폼 SDK를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="71b8b-156">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="71b8b-157">네이티브 창을 만들려고 할 때 운영 체제의 리소스가 부족한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-157">The operating system ran out of resources when trying to create the native window.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="71b8b-158">네이티브 Win32 API로 지정된 창을 만들 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-158">The native Win32 API could not create the specified window.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="71b8b-159">현재 네이티브 창의 핸들이 이미 할당된 경우. 즉 <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> 속성이 <see cref="F:System.IntPtr.Zero" />와 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-159">The handle of the current native window is already assigned; in explanation, the <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> property is not equal to <see cref="F:System.IntPtr.Zero" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="71b8b-160">최상위 창 만들기</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-160">to create a top-level window.</span>
          </span>
          <span data-ttu-id="71b8b-161">이 사용 권한은 부모 창에 없는 경우 또는 창 스타일 자식인 경우에 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-161">This permission is only demanded if the window style is not a child or if the window does not have a parent.</span>
          </span>
          <span data-ttu-id="71b8b-162">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-162">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <span data-ttu-id="71b8b-163">현재 처리 중인 메시지입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-163">The message that is currently being processed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71b8b-164">이 창과 연결된 기본 창 프로시저를 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-164">Invokes the default window procedure associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71b8b-165">만 호출 일반적으로 <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> 메서드 창 메시지를 가로채 고 메시지를 처리 하기를 기본 창 프로시저로 있을 것입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-165">Typically, you only call the <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> method when you are intercepting window messages and would like the default window procedure to handle the message.</span></span> <span data-ttu-id="71b8b-166"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> 창에 창 메시지를 보내려고 호출할 수 없습니다. Win32 호출 `SendMessage` 함수를 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-166"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> should not be called to send a window message to the window; call the Win32 `SendMessage` function instead.</span></span>  
  
 <span data-ttu-id="71b8b-167">호출 하면 오류가 발생 <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> 때는 <xref:System.Windows.Forms.NativeWindow.Handle%2A> 속성은 0입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-167">It is an error to call <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="71b8b-168">
            <para>일반화 된 사용자 지정 메시지는 특정 기본 창 또는.NET Windows Forms에 대 한 처리를 구현 하려면 파생된 클래스에서이 메서드를 재정의 <see cref="T:System.Windows.Forms.Control" />합니다. 이전 이나 이후 또는 표준 메시지 처리를 수행 하는이 메서드의 기본 클래스 구현 호출 하는 대신 사용자 지정 처리를 수행할 수 있습니다.  반면, 추가 사용자 지정 메시지 처리 응용 프로그램을 통해 수행할 수에 대해는 <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> 의 메서드는 <see cref="T:System.Windows.Forms.Application" /> 클래스입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-168">
              <para>Override this method in a derived class to implement generalized custom message handling for a specific native window or .NET Windows Forms <see cref="T:System.Windows.Forms.Control" />. Custom processing can be performed before, after, or instead of a call to the base class implementation of this method, which performs standard message processing.  In contrast, adding customized message handling for an application can be accomplished through the <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> method of the <see cref="T:System.Windows.Forms.Application" /> class.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71b8b-169">창 및 해당 핸들을 소멸시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-169">Destroys the window and its handle.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71b8b-170">이 메서드는 연결 된 창을 삭제는 <xref:System.Windows.Forms.NativeWindow.Handle%2A>, 설정는 <xref:System.Windows.Forms.NativeWindow.Handle%2A> 속성을 0이 고, 호출의 <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 메서드 변경 사항을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-170">This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change.</span></span> <span data-ttu-id="71b8b-171">일반적으로 호출 하면 <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> 네이티브 창으로 완료 한 경우.</span><span class="sxs-lookup"><span data-stu-id="71b8b-171">Typically, you only call <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> when you are done with the native window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71b8b-172"><xref:System.Windows.Forms.NativeWindow> 클래스 자동으로 연결 된 창을 삭제 되며 WM_DESTROY 메시지에 대 한 응답으로 해당 리소스를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-172">The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71b8b-173">이 창과 연결된 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-173">Releases the resources associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71b8b-174"><xref:System.Windows.Forms.NativeWindow.Finalize%2A> 메서드는 현재와 관련 된 Win32 파생 클래스를 제거 <xref:System.Windows.Forms.NativeWindow> 인스턴스 핸들을 해제 및 연결된 된 창이 WM_CLOSE 메시지에 게시 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-174">The <xref:System.Windows.Forms.NativeWindow.Finalize%2A> method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="71b8b-175">창에 대한 핸들입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-175">A handle to a window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71b8b-176">지정된 핸들과 연결된 창을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-176">Retrieves the window associated with the specified handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71b8b-177">지정된 핸들과 연결된 <see cref="T:System.Windows.Forms.NativeWindow" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-177">The <see cref="T:System.Windows.Forms.NativeWindow" /> associated with the specified handle.</span>
          </span>
          <span data-ttu-id="71b8b-178">핸들이 창과 연결되어 있지 않을 경우 이 메서드는 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-178">This method returns <see langword="null" /> when the handle does not have an associated window.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71b8b-179">또 다른 방법은의 핸들을 수신 하면이 메서드를 사용 검색 핸들에 연결 된 창.</span><span class="sxs-lookup"><span data-stu-id="71b8b-179">If you receive a handle from another method, use this method to retrieve the window associated with the handle.</span></span> <span data-ttu-id="71b8b-180">이미 다른 핸들을 소유 해야 <xref:System.Windows.Forms.NativeWindow> 현재에서 고, 그렇지 않으면 프로세스 `null` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-180">The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="71b8b-181">이 창의 핸들을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-181">Gets the handle for this window.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="71b8b-182">이 작업에 성공하면 연결된 네이티브 Win32 창에 대한 핸들을 나타내는 <see cref="T:System.IntPtr" />이고, 창과 연결된 핸들이 없으면 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-182">If successful, an <see cref="T:System.IntPtr" /> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71b8b-183">창 또는 컨트롤에 대 한 핸들을 필요로 하는 Windows API 메서드를 호출할 때이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-183">Use this method when calling Windows API methods that require a handle for a window or control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71b8b-184">다음 코드 예제에서는 특정 운영 체제 창 클래스 이름으로 창을 만드는 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-184">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="71b8b-185">이 예에서는에서 상속 되는 클래스를 만듭니다 <xref:System.Windows.Forms.NativeWindow> 이를 위해.</span><span class="sxs-lookup"><span data-stu-id="71b8b-185">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="71b8b-186">예제에 나오는 재정의 <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 때 알림을 받을 수 있는 메서드는 <xref:System.Windows.Forms.NativeWindow.Handle%2A> 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-186">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="71b8b-187">`MyNativeWindow` 클래스가 생성 된 새 창을 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 단추로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-187">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON.</span></span> <span data-ttu-id="71b8b-188">이렇게 하면 Win32 단추 창을 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-188">This creates a Win32 button window.</span></span> <span data-ttu-id="71b8b-189">단추의 크기와 위치 설정 되 고 추가 창 스타일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-189">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="71b8b-190">클래스 사용 방법을 보여 줍니다.는 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> 메서드와 재정의 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 수신 창 메시지를 가로채 메서드.</span><span class="sxs-lookup"><span data-stu-id="71b8b-190">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="71b8b-191">예, WM_ACTIVATEAPP 메시지에 대 한 사용 되지만이 수로 교체할 수 실제 프로그램에서 창 메시지를 만든 형식에 따라 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-191">Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71b8b-192">일부 컨트롤 형식은 컨트롤은 창 부모 창 대신 창 메시지를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-192">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="71b8b-193">자세한 내용은 Windows 플랫폼 SDK를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="71b8b-193">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71b8b-194">창의 핸들이 변경될 때 호출되는 알림 메서드를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-194">Specifies a notification method that is called when the handle for a window is changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71b8b-195">이 메서드가 호출 되는 경우의 값은 <xref:System.Windows.Forms.NativeWindow.Handle%2A> 속성이 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-195">This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71b8b-196">다음 코드 예제에서는 특정 운영 체제 창 클래스 이름으로 창을 만드는 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-196">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="71b8b-197">이 예에서는에서 상속 되는 클래스를 만듭니다 <xref:System.Windows.Forms.NativeWindow> 이를 위해.</span><span class="sxs-lookup"><span data-stu-id="71b8b-197">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="71b8b-198">예제에 나오는 재정의 <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 때 알림을 받을 수 있는 메서드는 <xref:System.Windows.Forms.NativeWindow.Handle%2A> 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-198">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="71b8b-199">`MyNativeWindow` 클래스가 생성 된 새 창을 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 로 설정 `BUTTON`합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-199">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="71b8b-200">이렇게 하면 Win32 단추 창을 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-200">This creates a Win32 button window.</span></span> <span data-ttu-id="71b8b-201">단추의 크기와 위치 설정 되 고 추가 창 스타일을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-201">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="71b8b-202">클래스 사용 방법을 보여 줍니다.는 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> 메서드와 재정의 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 수신 창 메시지를 가로채 메서드.</span><span class="sxs-lookup"><span data-stu-id="71b8b-202">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="71b8b-203">이 예제에서는, WM_ACTIVATEAPP 메시지에 대 한 사용 되지만이 바꿀 수 있습니다 실제 프로그램에서 만든 형식과 관련 된 창 메시지.</span><span class="sxs-lookup"><span data-stu-id="71b8b-203">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
 <span data-ttu-id="71b8b-204">이 코드에 표시 된 예의 일부는는 <xref:System.Windows.Forms.NativeWindow> 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-204">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="71b8b-205">일부 코드는 간단 하 게 나타내기 위해 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-205">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="71b8b-206">참조 <xref:System.Windows.Forms.NativeWindow> 전체 코드 목록에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-206">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="71b8b-207">일부 컨트롤 형식은 컨트롤은 창 부모 창 대신 창 메시지를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-207">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="71b8b-208">자세한 내용은 Windows 플랫폼 SDK를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="71b8b-208">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="71b8b-209">
            <para>창 핸들에 대 한 변경 내용을 추적 하려면이 메서드를 재정의 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-209">
              <para>Override this method to track changes that are made to the window handle.</para>
            </span>
          </span>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="71b8b-210">처리되지 않은 스레드 예외를 지정하는 <see cref="T:System.Exception" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-210">An <see cref="T:System.Exception" /> that specifies the unhandled thread exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71b8b-211">파생된 클래스에서 재정의될 때 해당 메서드는 처리되지 않은 스레드 예외를 관리합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-211">When overridden in a derived class, manages an unhandled thread exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71b8b-212">일반적으로 <xref:System.Windows.Forms.Application.OnThreadException%2A> 스레드 예외를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-212">Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71b8b-213">이 창과 연결된 핸들을 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-213">Releases the handle associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71b8b-214">이 메서드는 창 핸들을 제거 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-214">This method does not destroy the window handle.</span></span> <span data-ttu-id="71b8b-215">대신, 기본 창 프로시저를 핸들의 창 프로시저를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-215">Instead, it sets the handle's window procedure to the default window procedure.</span></span> <span data-ttu-id="71b8b-216">설정의 <xref:System.Windows.Forms.NativeWindow.Handle%2A> 속성을 0 호출 <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 변경 사항을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-216">It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.</span></span>  
  
 <span data-ttu-id="71b8b-217">창은 Windows 핸들을 소멸 있는지를 나타내는 네이티브 Win32 WM_NCDESTROY 메시지를 수신 하는 경우 자동으로이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-217">A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71b8b-218">다음 코드 예제에서는 창 프로시저에서 운영 체제 창 메시지를 가로채는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-218">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="71b8b-219">이 예에서는에서 상속 되는 클래스를 만듭니다 <xref:System.Windows.Forms.NativeWindow> 이를 위해.</span><span class="sxs-lookup"><span data-stu-id="71b8b-219">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="71b8b-220">`MyNativeWindowListener` 클래스 생성자에 전달 되는 폼의 창 프로시저에 후크하고 및 재정의 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 를 가로챕니다 메서드는 `WM_ACTIVATEAPP` 창 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-220">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="71b8b-221">클래스의 사용을 보여 줍니다.는 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> 및 <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> 창 핸들을 식별 하는 메서드는 <xref:System.Windows.Forms.NativeWindow> 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-221">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="71b8b-222">이 핸들은 기반으로 할당 된 <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-222">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="71b8b-223">경우는 `WM_ACTIVATEAPP` 창 메시지를 받으면 클래스 호출은 `form1.ApplicationActivated` 메서드.</span><span class="sxs-lookup"><span data-stu-id="71b8b-223">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="71b8b-224">이 코드에 표시 된 예의 일부는는 <xref:System.Windows.Forms.NativeWindow> 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-224">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="71b8b-225">일부 코드는 간단 하 게 나타내기 위해 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-225">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="71b8b-226">참조 <xref:System.Windows.Forms.NativeWindow> 전체 코드 목록에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-226">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <span data-ttu-id="71b8b-227">현재 Windows 메시지와 연결된 <see cref="T:System.Windows.Forms.Message" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-227">A <see cref="T:System.Windows.Forms.Message" /> that is associated with the current Windows message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71b8b-228">이 창과 연결된 기본 창 프로시저를 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-228">Invokes the default window procedure associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="71b8b-229">이 메서드는 창 핸들에는 창 메시지를 보낼 때 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-229">This method is called when a window message is sent to the handle of the window.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="71b8b-230">다음 코드 예제에서는 창 프로시저에서 운영 체제 창 메시지를 가로채는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-230">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="71b8b-231">이 예에서는에서 상속 되는 클래스를 만듭니다 <xref:System.Windows.Forms.NativeWindow> 이를 위해.</span><span class="sxs-lookup"><span data-stu-id="71b8b-231">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="71b8b-232">`MyNativeWindowListener` 클래스 생성자에 전달 되는 폼의 창 프로시저에 후크하고 및 재정의 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 메서드를 가로채는 `WM_ACTIVATEAPP` 창 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-232">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="71b8b-233">클래스의 사용을 보여 줍니다.는 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> 및 <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> 창 핸들을 식별 하는 메서드는 <xref:System.Windows.Forms.NativeWindow> 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-233">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="71b8b-234">핸들에 따라 할당 되는 <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-234">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="71b8b-235">경우는 `WM_ACTIVATEAPP` 창 메시지를 받으면 클래스 호출은 `form1.ApplicationActivated` 메서드.</span><span class="sxs-lookup"><span data-stu-id="71b8b-235">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="71b8b-236">이 코드에 표시 된 예의 일부는는 <xref:System.Windows.Forms.NativeWindow> 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-236">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="71b8b-237">일부 코드는 간단 하 게 나타내기 위해 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-237">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="71b8b-238">참조 <xref:System.Windows.Forms.NativeWindow> 전체 코드 목록에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="71b8b-238">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="71b8b-239">
            <para>특정 메시지 처리를 구현 하려면이 메서드를 재정의 합니다. 호출 <c>기본 합니다. WndProc</c> 처리 되지 않은 메시지에 대 한 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="71b8b-239">
              <para>Override this method to implement specific message processing. Call <c>base.WndProc</c> for unhandled messages.</para>
            </span>
          </span>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>