<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="NativeWindow.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d4a3ca7cdea7a8179f3cad217bcd84e9c7f3aad2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d4a3ca7cdea7a8179f3cad217bcd84e9c7f3aad2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.NativeWindow">
          <source>Provides a low-level encapsulation of a window handle and a window procedure.</source>
          <target state="translated">창 핸들과 창 프로시저의 저급 캡슐화를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>This class automatically manages window class creation and registration.</source>
          <target state="translated">이 클래스는 창 클래스 만들기 및 등록에 자동으로 관리합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>A window is not eligible for garbage collection when it is associated with a window handle.</source>
          <target state="translated">창의 창 핸들와 연결 된 경우 가비지 수집을 수행할 수지 않습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>To ensure proper garbage collection, handles must either be destroyed manually using <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph> or released using <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>.</source>
          <target state="translated">을 보장 하기 위해 적절 한 가비지 수집 핸들 해야 소멸 하거나 사용 하 여 수동으로 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph> 사용 하 여 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> method is called when the WM_NCDESTROY message is processed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> WM_NCDESTROY 메시지를 처리할 때 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>This means there are cases in which when you do not need to manually call <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>, but it is good practice to do so.</source>
          <target state="translated">즉, 되는 필요가 없습니다를 직접 호출 하도록 하는 경우도 있습니다. <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>, 있지만 이렇게 하려면 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class provides the following properties and methods to manage handles: <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 클래스는 다음과 같은 속성 및 핸들을 관리 하는 메서드를 제공: <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph>, 및 <ph id="ph6">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name.</source>
          <target state="translated">다음 코드 예제에서는 창 프로시저 및 특정 운영 체제 창 클래스 이름으로 창을 만드는 운영 체제 창 메시지를 가로채는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The example creates two classes that inherit from <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> that accomplish this.</source>
          <target state="translated">이 예에서는 두 개의 클래스에서 상속 하는 만듭니다 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 이 위해.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The <ph id="ph1">`MyNativeWindowListener`</ph> class hooks into the window procedure of the form passed into the constructor, and overrides the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> method to intercept the <ph id="ph3">`WM_ACTIVATEAPP`</ph> window message.</source>
          <target state="translated"><ph id="ph1">`MyNativeWindowListener`</ph> 클래스 생성자에 전달 되는 폼의 창 프로시저에 후크하고 및 재정의 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> 메서드를 가로채는 <ph id="ph3">`WM_ACTIVATEAPP`</ph> 창 메시지입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The class demonstrates the usage of the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> methods to identify the window handle the <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> will use.</source>
          <target state="translated">클래스의 사용법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> 창 핸들을 식별 하는 메서드는 <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 사용 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The handle is assign based upon the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType&gt;</ph> events.</source>
          <target state="translated">이 핸들은 기반으로 할당 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>When the <ph id="ph1">`WM_ACTIVATEAPP`</ph> window message is received, the class calls the <ph id="ph2">`form1.ApplicationActivated`</ph> method.</source>
          <target state="translated">경우는 <ph id="ph1">`WM_ACTIVATEAPP`</ph> 창 메시지를 받으면 클래스 호출은 <ph id="ph2">`form1.ApplicationActivated`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The <ph id="ph1">`MyNativeWindow`</ph> class creates a new window with the <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> set to <ph id="ph3">`BUTTON`</ph>.</source>
          <target state="translated"><ph id="ph1">`MyNativeWindow`</ph> 클래스가 생성 된 새 창을 <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> 로 설정 <ph id="ph3">`BUTTON`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The class demonstrates using the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph> method and overriding the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> method to intercept window messages that are received.</source>
          <target state="translated">클래스를 사용 하 여 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph> 메서드와 재정의 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> 수신 창 메시지를 가로채 메서드.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>for the immediate caller to call unmanaged code.</source>
          <target state="translated">비관리 코드를 호출할 직접 실행 호출자입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.#ctor">
          <source>Initializes an instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.NativeWindow" /&gt;</ph> class.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Windows.Forms.NativeWindow" /&gt;</ph> 클래스의 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.#ctor">
          <source>This is the default <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.%23ctor%2A&gt;</ph> constructor provided by the compiler.</source>
          <target state="translated">이것이 기본 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.%23ctor%2A&gt;</ph> 는 컴파일러에서 제공 하는 생성자입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class also has a static constructor that initializes application domain-wide message handlers and hash tables.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 클래스 응용 프로그램 도메인 전체 메시지 처리기 및 해시 테이블을 초기화 하는 정적 생성자에 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The handle to assign to this window.</source>
          <target state="translated">이 창에 할당할 핸들입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>Assigns a handle to this window.</source>
          <target state="translated">이 창에 핸들을 할당합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> intercepts window messages sent to the <ph id="ph2">`handle`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> 창에 전송 된 메시지를 가로채는 <ph id="ph2">`handle`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> to reset the handle's window procedure to the default window procedure.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> 기본 창 프로시저로 핸들의 창 프로시저를 다시 설정 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> method to indicate that the value of the <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property has changed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> 메서드 호출은 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> 메서드를 나타내는 값을는 <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The handle to assign cannot be in a different application process.</source>
          <target state="translated">다른 응용 프로그램 프로세스에서 할당에 대 한 일 수 없습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The following code example demonstrates intercepting operating system window messages in a window procedure.</source>
          <target state="translated">다음 코드 예제에서는 창 프로시저에서 운영 체제 창 메시지를 가로채는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The example creates a class that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> to accomplish this.</source>
          <target state="translated">이 예에서는에서 상속 되는 클래스를 만듭니다 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 이를 위해.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The <ph id="ph1">`MyNativeWindowListener`</ph> class hooks into the window procedure of the form passed into the constructor, and overrides the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> method to intercepts the <ph id="ph3">`WM_ACTIVATEAPP`</ph> window message.</source>
          <target state="translated"><ph id="ph1">`MyNativeWindowListener`</ph> 클래스 생성자에 전달 되는 폼의 창 프로시저에 후크하고 및 재정의 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> 를 가로챕니다 메서드는 <ph id="ph3">`WM_ACTIVATEAPP`</ph> 창 메시지입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The class demonstrates the use of the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> methods to identify which window handle the <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> will use.</source>
          <target state="translated">클래스의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> 창을 식별 하는 메서드를 처리는 <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 사용 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The handle is assigned based upon the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType&gt;</ph> events.</source>
          <target state="translated">핸들에 따라 할당 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>When the <ph id="ph1">`WM_ACTIVATEAPP`</ph> window message is received, the class calls the <ph id="ph2">`form1.ApplicationActivated`</ph> method.</source>
          <target state="translated">경우는 <ph id="ph1">`WM_ACTIVATEAPP`</ph> 창 메시지를 받으면 클래스 호출은 <ph id="ph2">`form1.ApplicationActivated`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>This code is an excerpt from the example shown in the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class overview.</source>
          <target state="translated">이 코드에 표시 된 예의 일부는는 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 클래스 개요입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>Some code is not shown for the purpose of brevity.</source>
          <target state="translated">일부 코드는 간단 하 게 나타내기 위해 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> for the whole code listing.</source>
          <target state="translated">참조 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 전체 코드 목록에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>This window already has a handle.</source>
          <target state="translated">이 창에 이미 핸들이 있는 경우</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The windows procedure for the associated native window could not be retrieved.</source>
          <target state="translated">연결된 네이티브 창의 창 프로시저를 검색할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.CreateParams" /&gt;</ph> that specifies the creation parameters for this window.</source>
          <target state="translated">이 창의 생성 매개 변수를 지정하는 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.CreateParams" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>Creates a window and its handle with the specified creation parameters.</source>
          <target state="translated">지정된 생성 매개 변수로 창 및 해당 핸들을 만듭니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The <ph id="ph1">`cp`</ph> parameter specifies the values that are passed to the native Win32 <ph id="ph2">`CreateWindowEx`</ph> method to create a window and its handle.</source>
          <target state="translated"><ph id="ph1">`cp`</ph> 네이티브 Win32에 전달 되는 값을 지정 하는 매개 변수 <ph id="ph2">`CreateWindowEx`</ph> 방법을 창과 해당 핸들을 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> field is not <ph id="ph2">`null`</ph>, the newly created window handle inherits from the specified class.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> 필드가 없으면 <ph id="ph2">`null`</ph>, 새로 만든된 창 핸들을 지정된 된 클래스에서 상속 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>For example, if <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> is set to <ph id="ph2">`BUTTON`</ph>, the newly created window is based on the Win32 <ph id="ph3">`BUTTON`</ph> window class.</source>
          <target state="translated">예를 들어 경우 <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> 로 설정 된 <ph id="ph2">`BUTTON`</ph>, Win32를 기반으로 하는 새로 만든된 창을 <ph id="ph3">`BUTTON`</ph> 창 클래스입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.Param%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> object must either be <ph id="ph3">`null`</ph> or reference an instance of a class that was declared as a structure.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.Param%2A&gt;</ph> 속성은 <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> 개체 같아야 <ph id="ph3">`null`</ph> 또는 구조로 선언 된 클래스의 인스턴스를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>This code is an excerpt from the example shown in the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class overview.</source>
          <target state="translated">이 코드에 표시 된 예의 일부는는 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 클래스 개요입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>Some code is not shown for the purpose of brevity.</source>
          <target state="translated">일부 코드는 간단 하 게 나타내기 위해 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> for the whole code listing.</source>
          <target state="translated">참조 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 전체 코드 목록에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The class name provided is registered with the operating system.</source>
          <target state="translated">제공 된 클래스 이름은 운영 체제에 등록 됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The following code example demonstrates creating a window with a specific operating system window class name.</source>
          <target state="translated">다음 코드 예제에서는 특정 운영 체제 창 클래스 이름으로 창을 만드는 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The example creates a class that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> to accomplish this.</source>
          <target state="translated">이 예에서는에서 상속 되는 클래스를 만듭니다 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 이를 위해.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The <ph id="ph1">`MyNativeWindow`</ph> class creates a new window with the <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> set to <ph id="ph3">`BUTTON`</ph>.</source>
          <target state="translated"><ph id="ph1">`MyNativeWindow`</ph> 클래스가 생성 된 새 창을 <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> 로 설정 <ph id="ph3">`BUTTON`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>This creates a Win32 button window.</source>
          <target state="translated">이렇게 하면 Win32 단추 창을 만들어집니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The location and size of the button is set, along with specifying additional window styles.</source>
          <target state="translated">단추의 크기와 위치 설정 되 고 추가 창 스타일을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The class demonstrates how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph> method and override the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> method to intercept window messages that are received.</source>
          <target state="translated">클래스 사용 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph> 메서드와 재정의 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> 수신 창 메시지를 가로채 메서드.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</source>
          <target state="translated">이 예제에서는, WM_ACTIVATEAPP 메시지에 대 한 사용 되지만이 바꿀 수 있습니다 실제 프로그램에서 만든 형식과 관련 된 창 메시지.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>Some control types send their window messages to the window parent instead of the window.</source>
          <target state="translated">일부 컨트롤 형식은 컨트롤은 창 부모 창 대신 창 메시지를 보냅니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>See the Windows Platform SDK for more information.</source>
          <target state="translated">자세한 내용은 Windows 플랫폼 SDK를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The operating system ran out of resources when trying to create the native window.</source>
          <target state="translated">네이티브 창을 만들려고 할 때 운영 체제의 리소스가 부족한 경우</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The native Win32 API could not create the specified window.</source>
          <target state="translated">네이티브 Win32 API로 지정된 창을 만들 수 없는 경우</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The handle of the current native window is already assigned; in explanation, the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.NativeWindow.Handle" /&gt;</ph> property is not equal to <ph id="ph2">&lt;see cref="F:System.IntPtr.Zero" /&gt;</ph>.</source>
          <target state="translated">현재 네이티브 창의 핸들이 이미 할당된 경우. 즉 <ph id="ph1">&lt;see cref="P:System.Windows.Forms.NativeWindow.Handle" /&gt;</ph> 속성이 <ph id="ph2">&lt;see cref="F:System.IntPtr.Zero" /&gt;</ph>와 같지 않은 경우</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>to create a top-level window.</source>
          <target state="translated">최상위 창 만들기</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>This permission is only demanded if the window style is not a child or if the window does not have a parent.</source>
          <target state="translated">이 사용 권한은 부모 창에 없는 경우 또는 창 스타일 자식인 경우에 필요 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
          <source>The message that is currently being processed.</source>
          <target state="translated">현재 처리 중인 메시지입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
          <source>Invokes the default window procedure associated with this window.</source>
          <target state="translated">이 창과 연결된 기본 창 프로시저를 호출합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
          <source>Typically, you only call the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph> method when you are intercepting window messages and would like the default window procedure to handle the message.</source>
          <target state="translated">만 호출 일반적으로 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph> 메서드 창 메시지를 가로채 고 메시지를 처리 하기를 기본 창 프로시저로 있을 것입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph> should not be called to send a window message to the window; call the Win32 <ph id="ph2">`SendMessage`</ph> function instead.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph> 창에 창 메시지를 보내려고 호출할 수 없습니다. Win32 호출 <ph id="ph2">`SendMessage`</ph> 함수를 대신 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
          <source>It is an error to call <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph> when the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property is 0.</source>
          <target state="translated">호출 하면 오류가 발생 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph> 때는 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> 속성은 0입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
          <source>Override this method in a derived class to implement generalized custom message handling for a specific native window or .NET Windows Forms <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>.</source>
          <target state="translated">일반화 된 사용자 지정 메시지는 특정 기본 창 또는.NET Windows Forms에 대 한 처리를 구현 하려면 파생된 클래스에서이 메서드를 재정의 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
          <source>Custom processing can be performed before, after, or instead of a call to the base class implementation of this method, which performs standard message processing.</source>
          <target state="translated">이전 이나 이후 또는 표준 메시지 처리를 수행 하는이 메서드의 기본 클래스 구현 호출 하는 대신 사용자 지정 처리를 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
          <source>In contrast, adding customized message handling for an application can be accomplished through the <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /&gt;</ph> method of the <ph id="ph2">&lt;see cref="T:System.Windows.Forms.Application" /&gt;</ph> class.</source>
          <target state="translated">반면, 추가 사용자 지정 메시지 처리 응용 프로그램을 통해 수행할 수에 대해는 <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /&gt;</ph> 의 메서드는 <ph id="ph2">&lt;see cref="T:System.Windows.Forms.Application" /&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.DestroyHandle">
          <source>Destroys the window and its handle.</source>
          <target state="translated">창 및 해당 핸들을 소멸시킵니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DestroyHandle">
          <source>This method destroys the window associated with the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>, sets the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property to 0, and calls the <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> method to reflect the change.</source>
          <target state="translated">이 메서드는 연결 된 창을 삭제는 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>, 설정는 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> 속성을 0이 고, 호출의 <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> 메서드 변경 사항을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DestroyHandle">
          <source>Typically, you only call <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph> when you are done with the native window.</source>
          <target state="translated">일반적으로 호출 하면 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph> 네이티브 창으로 완료 한 경우.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DestroyHandle">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 클래스 자동으로 연결 된 창을 삭제 되며 WM_DESTROY 메시지에 대 한 응답으로 해당 리소스를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.Finalize">
          <source>Releases the resources associated with this window.</source>
          <target state="translated">이 창과 연결된 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.Finalize">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Finalize%2A&gt;</ph> method removes the Win32 derived class associated with the current <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> instance, releases the handle, and posts a WM_CLOSE message to the associated window.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Finalize%2A&gt;</ph> 메서드는 현재와 관련 된 Win32 파생 클래스를 제거 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 인스턴스 핸들을 해제 및 연결된 된 창이 WM_CLOSE 메시지에 게시 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)">
          <source>A handle to a window.</source>
          <target state="translated">창에 대한 핸들입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)">
          <source>Retrieves the window associated with the specified handle.</source>
          <target state="translated">지정된 핸들과 연결된 창을 검색합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.NativeWindow" /&gt;</ph> associated with the specified handle.</source>
          <target state="translated">지정된 핸들과 연결된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.NativeWindow" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)">
          <source>This method returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> when the handle does not have an associated window.</source>
          <target state="translated">핸들이 창과 연결되어 있지 않을 경우 이 메서드는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)">
          <source>If you receive a handle from another method, use this method to retrieve the window associated with the handle.</source>
          <target state="translated">또 다른 방법은의 핸들을 수신 하면이 메서드를 사용 검색 핸들에 연결 된 창.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)">
          <source>The handle must already be owned by another <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> in the current process; otherwise, <ph id="ph2">`null`</ph> is returned.</source>
          <target state="translated">이미 다른 핸들을 소유 해야 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 현재에서 고, 그렇지 않으면 프로세스 <ph id="ph2">`null`</ph> 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>Gets the handle for this window.</source>
          <target state="translated">이 창의 핸들을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>If successful, an <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.</source>
          <target state="translated">이 작업에 성공하면 연결된 네이티브 Win32 창에 대한 핸들을 나타내는 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>이고, 창과 연결된 핸들이 없으면 0입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>Use this method when calling Windows API methods that require a handle for a window or control.</source>
          <target state="translated">창 또는 컨트롤에 대 한 핸들을 필요로 하는 Windows API 메서드를 호출할 때이 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>The following code example demonstrates creating a window with a specific operating system window class name.</source>
          <target state="translated">다음 코드 예제에서는 특정 운영 체제 창 클래스 이름으로 창을 만드는 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>The example creates a class that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> to accomplish this.</source>
          <target state="translated">이 예에서는에서 상속 되는 클래스를 만듭니다 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 이를 위해.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>The example also demonstrates overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> method to be notified when the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> changes.</source>
          <target state="translated">예제에 나오는 재정의 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> 때 알림을 받을 수 있는 메서드는 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> 변경 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>The <ph id="ph1">`MyNativeWindow`</ph> class creates a new window with the <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> set to BUTTON.</source>
          <target state="translated"><ph id="ph1">`MyNativeWindow`</ph> 클래스가 생성 된 새 창을 <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> 단추로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>This creates a Win32 button window.</source>
          <target state="translated">이렇게 하면 Win32 단추 창을 만들어집니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>The location and size of the button is set, along with specifying additional window styles.</source>
          <target state="translated">단추의 크기와 위치 설정 되 고 추가 창 스타일을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>The class demonstrates how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph> method and override the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> method to intercept window messages that are received.</source>
          <target state="translated">클래스 사용 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph> 메서드와 재정의 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> 수신 창 메시지를 가로채 메서드.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.</source>
          <target state="translated">예, WM_ACTIVATEAPP 메시지에 대 한 사용 되지만이 수로 교체할 수 실제 프로그램에서 창 메시지를 만든 형식에 따라 다릅니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>Some control types send their window messages to the window parent instead of the window.</source>
          <target state="translated">일부 컨트롤 형식은 컨트롤은 창 부모 창 대신 창 메시지를 보냅니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>See the Windows Platform SDK for more information.</source>
          <target state="translated">자세한 내용은 Windows 플랫폼 SDK를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>Specifies a notification method that is called when the handle for a window is changed.</source>
          <target state="translated">창의 핸들이 변경될 때 호출되는 알림 메서드를 지정합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>This method is invoked when the value of the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property has changed.</source>
          <target state="translated">이 메서드가 호출 되는 경우의 값은 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> 속성이 변경 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>The following code example demonstrates creating a window with a specific operating system window class name.</source>
          <target state="translated">다음 코드 예제에서는 특정 운영 체제 창 클래스 이름으로 창을 만드는 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>The example creates a class that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> to accomplish this.</source>
          <target state="translated">이 예에서는에서 상속 되는 클래스를 만듭니다 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 이를 위해.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>The example also demonstrates overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> method to be notified when the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> changes.</source>
          <target state="translated">예제에 나오는 재정의 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> 때 알림을 받을 수 있는 메서드는 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> 변경 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>The <ph id="ph1">`MyNativeWindow`</ph> class creates a new window with the <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> set to <ph id="ph3">`BUTTON`</ph>.</source>
          <target state="translated"><ph id="ph1">`MyNativeWindow`</ph> 클래스가 생성 된 새 창을 <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> 로 설정 <ph id="ph3">`BUTTON`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>This creates a Win32 button window.</source>
          <target state="translated">이렇게 하면 Win32 단추 창을 만들어집니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>The location and size of the button is set, along with specifying additional window styles.</source>
          <target state="translated">단추의 크기와 위치 설정 되 고 추가 창 스타일을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>The class demonstrates how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph> method and override the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> method to intercept window messages that are received.</source>
          <target state="translated">클래스 사용 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph> 메서드와 재정의 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> 수신 창 메시지를 가로채 메서드.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</source>
          <target state="translated">이 예제에서는, WM_ACTIVATEAPP 메시지에 대 한 사용 되지만이 바꿀 수 있습니다 실제 프로그램에서 만든 형식과 관련 된 창 메시지.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>This code is an excerpt from the example shown in the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class overview.</source>
          <target state="translated">이 코드에 표시 된 예의 일부는는 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 클래스 개요입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>Some code is not shown for the purpose of brevity.</source>
          <target state="translated">일부 코드는 간단 하 게 나타내기 위해 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> for the whole code listing.</source>
          <target state="translated">참조 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 전체 코드 목록에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>Some control types send their window messages to the window parent instead of the window.</source>
          <target state="translated">일부 컨트롤 형식은 컨트롤은 창 부모 창 대신 창 메시지를 보냅니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>See the Windows Platform SDK for more information.</source>
          <target state="translated">자세한 내용은 Windows 플랫폼 SDK를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>Override this method to track changes that are made to the window handle.</source>
          <target state="translated">창 핸들에 대 한 변경 내용을 추적 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> that specifies the unhandled thread exception.</source>
          <target state="translated">처리되지 않은 스레드 예외를 지정하는 <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)">
          <source>When overridden in a derived class, manages an unhandled thread exception.</source>
          <target state="translated">파생된 클래스에서 재정의될 때 해당 메서드는 처리되지 않은 스레드 예외를 관리합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)">
          <source>Typically, <ph id="ph1">&lt;xref:System.Windows.Forms.Application.OnThreadException%2A&gt;</ph> handles thread exceptions.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.Windows.Forms.Application.OnThreadException%2A&gt;</ph> 스레드 예외를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>Releases the handle associated with this window.</source>
          <target state="translated">이 창과 연결된 핸들을 해제합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>This method does not destroy the window handle.</source>
          <target state="translated">이 메서드는 창 핸들을 제거 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>Instead, it sets the handle's window procedure to the default window procedure.</source>
          <target state="translated">대신, 기본 창 프로시저를 핸들의 창 프로시저를 설정합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>It sets the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property to 0 and calls <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> to reflect the change.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> 속성을 0 호출 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> 변경 사항을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.</source>
          <target state="translated">창은 Windows 핸들을 소멸 있는지를 나타내는 네이티브 Win32 WM_NCDESTROY 메시지를 수신 하는 경우 자동으로이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>The following code example demonstrates intercepting operating system window messages in a window procedure.</source>
          <target state="translated">다음 코드 예제에서는 창 프로시저에서 운영 체제 창 메시지를 가로채는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>The example creates a class that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> to accomplish this.</source>
          <target state="translated">이 예에서는에서 상속 되는 클래스를 만듭니다 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 이를 위해.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>The <ph id="ph1">`MyNativeWindowListener`</ph> class hooks into the window procedure of the form passed into the constructor, and overrides the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> method to intercepts the <ph id="ph3">`WM_ACTIVATEAPP`</ph> window message.</source>
          <target state="translated"><ph id="ph1">`MyNativeWindowListener`</ph> 클래스 생성자에 전달 되는 폼의 창 프로시저에 후크하고 및 재정의 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> 를 가로챕니다 메서드는 <ph id="ph3">`WM_ACTIVATEAPP`</ph> 창 메시지입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>The class demonstrates the use of the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> methods to identify the window handle the <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> will use.</source>
          <target state="translated">클래스의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> 창 핸들을 식별 하는 메서드는 <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 사용 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>The handle is assign based upon the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType&gt;</ph> events.</source>
          <target state="translated">이 핸들은 기반으로 할당 된 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>When the <ph id="ph1">`WM_ACTIVATEAPP`</ph> window message is received, the class calls the <ph id="ph2">`form1.ApplicationActivated`</ph> method.</source>
          <target state="translated">경우는 <ph id="ph1">`WM_ACTIVATEAPP`</ph> 창 메시지를 받으면 클래스 호출은 <ph id="ph2">`form1.ApplicationActivated`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>This code is an excerpt from the example shown in the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class overview.</source>
          <target state="translated">이 코드에 표시 된 예의 일부는는 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 클래스 개요입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>Some code is not shown for the purpose of brevity.</source>
          <target state="translated">일부 코드는 간단 하 게 나타내기 위해 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> for the whole code listing.</source>
          <target state="translated">참조 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 전체 코드 목록에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph> that is associated with the current Windows message.</source>
          <target state="translated">현재 Windows 메시지와 연결된 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>Invokes the default window procedure associated with this window.</source>
          <target state="translated">이 창과 연결된 기본 창 프로시저를 호출합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>This method is called when a window message is sent to the handle of the window.</source>
          <target state="translated">이 메서드는 창 핸들에는 창 메시지를 보낼 때 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>The following code example demonstrates intercepting operating system window messages in a window procedure.</source>
          <target state="translated">다음 코드 예제에서는 창 프로시저에서 운영 체제 창 메시지를 가로채는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>The example creates a class that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> to accomplish this.</source>
          <target state="translated">이 예에서는에서 상속 되는 클래스를 만듭니다 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 이를 위해.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>The <ph id="ph1">`MyNativeWindowListener`</ph> class hooks into the window procedure of the form passed into the constructor, and overrides the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> method to intercept the <ph id="ph3">`WM_ACTIVATEAPP`</ph> window message.</source>
          <target state="translated"><ph id="ph1">`MyNativeWindowListener`</ph> 클래스 생성자에 전달 되는 폼의 창 프로시저에 후크하고 및 재정의 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> 메서드를 가로채는 <ph id="ph3">`WM_ACTIVATEAPP`</ph> 창 메시지입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>The class demonstrates the use of the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> methods to identify the window handle the <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> will use.</source>
          <target state="translated">클래스의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> 창 핸들을 식별 하는 메서드는 <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 사용 합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>The handle is assigned based upon the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType&gt;</ph> events.</source>
          <target state="translated">핸들에 따라 할당 되는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>When the <ph id="ph1">`WM_ACTIVATEAPP`</ph> window message is received, the class calls the <ph id="ph2">`form1.ApplicationActivated`</ph> method.</source>
          <target state="translated">경우는 <ph id="ph1">`WM_ACTIVATEAPP`</ph> 창 메시지를 받으면 클래스 호출은 <ph id="ph2">`form1.ApplicationActivated`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>This code is an excerpt from the example shown in the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class overview.</source>
          <target state="translated">이 코드에 표시 된 예의 일부는는 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 클래스 개요입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>Some code is not shown for the purpose of brevity.</source>
          <target state="translated">일부 코드는 간단 하 게 나타내기 위해 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> for the whole code listing.</source>
          <target state="translated">참조 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> 전체 코드 목록에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>Override this method to implement specific message processing.</source>
          <target state="translated">특정 메시지 처리를 구현 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>Call <bpt id="p1">&lt;c&gt;</bpt>base.WndProc<ept id="p1">&lt;/c&gt;</ept> for unhandled messages.</source>
          <target state="translated">호출 <bpt id="p1">&lt;c&gt;</bpt>기본 합니다. WndProc<ept id="p1">&lt;/c&gt;</ept> 처리 되지 않은 메시지에 대 한 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>