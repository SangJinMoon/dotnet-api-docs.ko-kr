<Type Name="CurrencyManager" FullName="System.Windows.Forms.CurrencyManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="422e723168d87108e21aa8c478d92c1e9a7270f9" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30640467" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CurrencyManager : System.Windows.Forms.BindingManagerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CurrencyManager extends System.Windows.Forms.BindingManagerBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.CurrencyManager" />
  <TypeSignature Language="VB.NET" Value="Public Class CurrencyManager&#xA;Inherits BindingManagerBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class CurrencyManager : System::Windows::Forms::BindingManagerBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.BindingManagerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.Windows.Forms.Binding" /> 개체의 목록을 관리합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CurrencyManager> 에서 파생 되는 <xref:System.Windows.Forms.BindingManagerBase> 클래스입니다. 사용 하 여는 <xref:System.Windows.Forms.BindingContext> 반환 하는 <xref:System.Windows.Forms.CurrencyManager> 또는 <xref:System.Windows.Forms.PropertyManager>합니다. 반환 되는 실제 개체 데이터 소스에 따라 다르며 데이터 멤버에 전달 된는 <xref:System.Windows.Forms.BindingContext.Item%2A> 의 속성은 <xref:System.Windows.Forms.BindingContext>합니다. 형식이 됩니다 (개체의 목록) 하는 대신 하나의 속성만 반환할 수 있는 개체 데이터 원본이 사용 하는 경우는 <xref:System.Windows.Forms.PropertyManager>합니다. 예를 들어, 지정 하는 경우는 <xref:System.Windows.Forms.TextBox> 데이터 원본으로는 <xref:System.Windows.Forms.PropertyManager> 반환 됩니다. 반면에 데이터 원본이 개체를 구현 하는 경우는 <xref:System.Collections.IList>, <xref:System.ComponentModel.IListSource>, 또는 <xref:System.ComponentModel.IBindingList> 인터페이스는 <xref:System.Windows.Forms.CurrencyManager> 반환 됩니다.  
  
 <xref:System.Windows.Forms.BindingManagerBase.Current%2A> 속성 기본 목록의 현재 항목을 반환 합니다. 현재 항목을 변경 하려면는 <xref:System.Windows.Forms.BindingManagerBase.Position%2A> 속성을 새 값입니다. 값 0 보다 커야 하며의 값 보다 작아야 합니다.는 <xref:System.Windows.Forms.BindingManagerBase.Count%2A> 속성입니다.  
  
 기본 데이터 원본 구현 하는 경우는 <xref:System.ComponentModel.IBindingList> 인터페이스 및 <xref:System.ComponentModel.IBindingList.AllowNew%2A> 속성이로 설정 되어 `true`를 사용할 수 있습니다는 <xref:System.Windows.Forms.CurrencyManager.AddNew%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 바인딩에 <xref:System.Windows.Forms.TextBox> 컨트롤의 열에 <xref:System.Data.DataTable>, 가져옵니다는 <xref:System.Windows.Forms.CurrencyManager> 바인딩에 대의 위치를 가져오거나 설정 합니다.  
  
 [!code-cpp[Classic CurrencyManager Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.BindingsCollection" />
    <altmember cref="T:System.Windows.Forms.BindingContext" />
    <altmember cref="T:System.Windows.Forms.Binding" />
  </Docs>
  <Members>
    <Member MemberName="AddNew">
      <MemberSignature Language="C#" Value="public override void AddNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AddNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.AddNew" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub AddNew ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void AddNew();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>내부 목록에 새 항목을 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터 원본 구현 하는 경우에이 메서드는 지원의 <xref:System.ComponentModel.IBindingList> 인터페이스와 데이터 소스 행을 추가할 수 있습니다 (<xref:System.ComponentModel.IBindingList.AllowNew%2A> 은 `true`).  
  
> [!NOTE]
>  이 속성은 복합 바인딩된 컨트롤을와 같은 허용 하도록 설계 된는 <xref:System.Windows.Forms.DataGrid> 컨트롤 목록에 새 항목을 추가 합니다.  
  
 이 속성을 통합 하는 사용자 고유의 컨트롤을 만드는 경우에 사용 일반적으로 <xref:System.Windows.Forms.CurrencyManager>합니다. 데이터 원본이 경우 항목을 추가 하 고, 그렇지는 <xref:System.Data.DataView>를 사용 하 여는 <xref:System.Data.DataView.AddNew%2A?displayProperty=nameWithType> 의 메서드는 <xref:System.Data.DataView> 클래스입니다. 데이터 원본이 있으면는 <xref:System.Data.DataTable>를 사용 하 여는 <xref:System.Data.DataTable.NewRow%2A> 메서드 행을 추가 하 고는 <xref:System.Data.DataRowCollection>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하 여 목록에 새 항목 추가 <xref:System.Windows.Forms.CurrencyManager.AddNew%2A> 메서드.  
  
 [!code-cpp[Classic CurrencyManager.AddNew Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.AddNew Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.AddNew Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.AddNew Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.AddNew Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.AddNew Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">내부 데이터 소스에서 <see cref="T:System.ComponentModel.IBindingList" />를 구현하지 않거나, 사용자가 읽기 전용 또는 고정 크기 <see cref="T:System.Data.DataView" />에 행을 추가하려고 하여 데이터 소스에서 예외를 throw한 경우</exception>
        <altmember cref="P:System.ComponentModel.IBindingList.AllowNew" />
        <altmember cref="M:System.Data.DataView.AddNew" />
        <altmember cref="M:System.Data.DataTable.NewRow" />
      </Docs>
    </Member>
    <Member MemberName="CancelCurrentEdit">
      <MemberSignature Language="C#" Value="public override void CancelCurrentEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CancelCurrentEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.CancelCurrentEdit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CancelCurrentEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CancelCurrentEdit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 편집 작업을 취소합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터 소스에 포함 된 개체를 구현 하는 경우에이 메서드는 지원의 <xref:System.ComponentModel.IEditableObject> 인터페이스입니다. 데이터 원본에 포함 된 개체를 구현 하지 않는 경우는 <xref:System.ComponentModel.IEditableObject> 인터페이스에는 데이터 변경 내용이 삭제 되지 것입니다.  
  
> [!NOTE]
>  이 속성은 같은 복잡 한 데이터 바인딩된 컨트롤에서 사용 하도록 설계 된는 <xref:System.Windows.Forms.DataGrid> 편집 취소를 제어 합니다. 예를 들어 사용자가 누르면 ESC 키를는 <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> 메서드가 호출 되는 <xref:System.Windows.Forms.CurrencyManager> 에 대 한는 <xref:System.Windows.Forms.DataGrid>합니다. 이 기능을 필요로 하는 컨트롤을 만드는 경우가 아니면에이 메서드를 사용 해야 합니다. 대신를 사용 하 여는 <xref:System.Data.DataRowView.CancelEdit%2A> 의 메서드는 <xref:System.Data.DataRowView> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> ESC 키를 누를 때.  
  
 [!code-cpp[Classic CurrencyManager.CancelCurrentEdit Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.CancelCurrentEdit Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.CancelCurrentEdit Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.CancelCurrentEdit Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.CancelCurrentEdit Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.CancelCurrentEdit Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.CurrencyManager.EndCurrentEdit" />
      </Docs>
    </Member>
    <Member MemberName="CheckEmpty">
      <MemberSignature Language="C#" Value="protected void CheckEmpty ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckEmpty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.CheckEmpty" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CheckEmpty ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CheckEmpty();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>목록이 없거나 비어 있는 경우 예외를 throw합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Exception">목록이 없거나 비어 있는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public override int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CurrencyManager.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>목록의 항목 수를 가져옵니다.</summary>
        <value>목록의 항목 수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 목록의 끝에 도달한 경우를 확인 하려면 count 속성을 사용 합니다. 때문에 <xref:System.Windows.Forms.CurrencyManager> 항목을 목록의 끝의 0부터 시작 배열은 항상 유지 <xref:System.Windows.Forms.CurrencyManager.Count%2A> 1을 뺀 값입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 최종 항목에 의해 결정 될 때까지 목록에서 반복는 <xref:System.Windows.Forms.CurrencyManager.Count%2A> 속성에 도달 했습니다.  
  
 [!code-cpp[Classic CurrencyManager.Count Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.Count Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.Count Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.Count Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.Count Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.Count Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CurrencyManager.List" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Position" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Current" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public override object Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CurrencyManager.Current" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Current As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>목록의 현재 항목을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Object" /> 형식의 목록 항목입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 항목을 얻으려면 잘못 캐스팅 하기 위해 해당 데이터 형식을 알아야 합니다. 예를 들어 데이터 소스는 <xref:System.Data.DataView> 또는 <xref:System.Data.DataTable>, 현재 항목으로 캐스팅 해야는 <xref:System.Data.DataRowView> 개체입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.CurrencyManager.Current%2A> 인쇄 하기는 `ContactName` 목록의 현재 항목에 대 한 필드입니다.  
  
 [!code-cpp[Classic CurrencyManager.Current Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.Current Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.Current Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.Current Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.Current Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.Current Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowView" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.List" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Position" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Count" />
      </Docs>
    </Member>
    <Member MemberName="EndCurrentEdit">
      <MemberSignature Language="C#" Value="public override void EndCurrentEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndCurrentEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.EndCurrentEdit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndCurrentEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndCurrentEdit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>지금 하고 있는 편집 작업을 종료합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터 소스에 포함 된 개체를 구현 하는 경우에이 메서드는 지원의 <xref:System.ComponentModel.IEditableObject> 또는 <xref:System.ComponentModel.ICancelAddNew> 인터페이스입니다.  
  
> [!NOTE]
>  이 속성은 같은 복잡 한 데이터 바인딩된 컨트롤에서 사용 하도록 설계 된는 <xref:System.Windows.Forms.DataGridView> 제어 합니다. 이 기능을 필요로 하는 컨트롤을 만드는 경우가 아니면에이 메서드를 사용 해야 합니다. 대신, 데이터 소스가 하는 경우는 <xref:System.Data.DataView> 또는 <xref:System.Data.DataTable>를 사용 하 여는 <xref:System.Data.DataRowView.EndEdit%2A> 의 메서드는 <xref:System.Data.DataRowView> 클래스.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A> 메서드를 사용하는 방법을 보여 줍니다.  
  
 [!code-cpp[Classic CurrencyManager.EndCurrentEdit Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.EndCurrentEdit Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.EndCurrentEdit Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.EndCurrentEdit Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.EndCurrentEdit Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.EndCurrentEdit Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.CurrencyManager.CancelCurrentEdit" />
        <altmember cref="T:System.ComponentModel.IEditableObject" />
        <altmember cref="T:System.ComponentModel.ICancelAddNew" />
      </Docs>
    </Member>
    <Member MemberName="finalType">
      <MemberSignature Language="C#" Value="protected Type finalType;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Type finalType" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.CurrencyManager.finalType" />
      <MemberSignature Language="VB.NET" Value="Protected finalType As Type " />
      <MemberSignature Language="C++ CLI" Value="protected: Type ^ finalType;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>목록의 데이터 형식을 지정합니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.PropertyDescriptorCollection" />
      </Docs>
    </Member>
    <Member MemberName="GetItemProperties">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.PropertyDescriptorCollection GetItemProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.PropertyDescriptorCollection GetItemProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.GetItemProperties" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetItemProperties () As PropertyDescriptorCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ComponentModel::PropertyDescriptorCollection ^ GetItemProperties();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>내부 목록의 속성 설명자 컬렉션을 가져옵니다.</summary>
        <returns>목록에 대한 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.PropertyDescriptorCollection> 에 대 한는 <xref:System.Windows.Forms.CurrencyManager> 목록에서 열을 지정 하는 데 사용 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.CurrencyManager.GetItemProperties%2A> 반환 하는 메서드는 <xref:System.ComponentModel.PropertyDescriptorCollection> 에 대 한는 <xref:System.Windows.Forms.BindingManagerBase>합니다. 예제에서는 다음 출력는 <xref:System.ComponentModel.MemberDescriptor.Name%2A> 및 <xref:System.ComponentModel.PropertyDescriptor.PropertyType%2A> 각 <xref:System.ComponentModel.PropertyDescriptor> 컬렉션에 있습니다.  
  
 [!code-cpp[Classic CurrencyManager.GetItemProperties Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.GetItemProperties Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.GetItemProperties Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.GetItemProperties Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.GetItemProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.GetItemProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CurrencyManager.List" />
        <altmember cref="M:System.Windows.Forms.CurrencyManager.GetListName(System.Collections.ArrayList)" />
        <altmember cref="M:System.Windows.Forms.CurrencyManager.GetItemProperties" />
      </Docs>
    </Member>
    <Member MemberName="GetListName">
      <MemberSignature Language="C#" Value="protected internal override string GetListName (System.Collections.ArrayList listAccessors);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance string GetListName(class System.Collections.ArrayList listAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.GetListName(System.Collections.ArrayList)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetListName (listAccessors As ArrayList) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::String ^ GetListName(System::Collections::ArrayList ^ listAccessors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listAccessors" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="listAccessors">데이터 소스에서 찾을 속성의 <see cref="T:System.Collections.ArrayList" />입니다.</param>
        <summary>지정한 바인딩된 속성 집합을 사용하여 바인딩에 대한 데이터를 제공하는 목록 이름을 가져옵니다.</summary>
        <returns>해당 속성을 찾은 경우 바인딩에 대한 데이터를 제공하는 목록 이름이 들어 있는 <see cref="T:System.String" />이고, 그렇지 않으면 <see cref="F:System.String.Empty" /> 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한는 <xref:System.Windows.Forms.CurrencyManager.GetListName%2A> 성공적으로 수행 하려면 기본 목록 형식 이어야 합니다 <xref:System.ComponentModel.ITypedList>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.CurrencyManager.GetItemProperties" />
      </Docs>
    </Member>
    <Member MemberName="ItemChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemChangedEventHandler ItemChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemChangedEventHandler ItemChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CurrencyManager.ItemChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemChanged As ItemChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemChangedEventHandler ^ ItemChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 항목이 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CurrencyManager.ItemChanged> 호출할 때 이벤트가 발생 합니다는 <xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A> 또는 <xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A> 메서드.  
  
 <xref:System.Windows.Forms.CurrencyManager.ItemChanged> 만 항목 자체가 변경 된 경우 다른 방법으로 이벤트 발생 합니다. 예를 들어 항목의 값 42 10에서 변경 되 면 이벤트가 발생 합니다. 와 일치 하지 않습니다이 <xref:System.Windows.Forms.BindingManagerBase.PositionChanged> 새 항목에는 항목이 변경 되어 있는 이벤트입니다.  
  
 이 이벤트는 기본 데이터가 변경 하는 경우에 발생 합니다. 예를 들어, 값을 변경 하는 경우는 <xref:System.Data.DataRowView>, <xref:System.Windows.Forms.CurrencyManager.ItemChanged> 이벤트가 발생 합니다.  
  
> [!NOTE]
>  사용 하는 사용자 고유의 컨트롤을 만들려는 경우에 <xref:System.Windows.Forms.CurrencyManager>를 사용 해야는 <xref:System.ComponentModel.IBindingList.ListChanged?displayProperty=nameWithType> 대신는 <xref:System.Windows.Forms.CurrencyManager.ItemChanged?displayProperty=nameWithType> 이벤트입니다. <xref:System.ComponentModel.ListChangedEventArgs.ListChangedType%2A> 의 속성은 <xref:System.ComponentModel.ListChangedEventArgs> 발생 한 동작의 유형을 확인할 수 있습니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 에 대 한 이벤트 처리기를 추가 하는 다음 코드 예제는 <xref:System.Windows.Forms.CurrencyManager.ItemChanged> 및 <xref:System.Windows.Forms.BindingManagerBase.PositionChanged> 이벤트입니다.  
  
 [!code-cpp[Classic CurrencyManager.ItemChanged Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.ItemChanged Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.ItemChanged Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.ItemChanged Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.ItemChanged Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.ItemChanged Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="C#" Value="public System.Collections.IList List { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList List" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CurrencyManager.List" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property List As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ List { System::Collections::IList ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.Forms.CurrencyManager" />의 목록을 가져옵니다.</summary>
        <value>목록이 들어 있는 <see cref="T:System.Collections.IList" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 되는 개체는 <xref:System.Windows.Forms.CurrencyManager.List%2A> 속성을 구현 하는 형식으로 캐스팅 될 수는 <xref:System.Collections.IList> 인터페이스입니다. 이 일반적으로 사용 됩니다 기본 목록의 형식을 확인할 수 있습니다. 예를 들어 사용자는 데이터 바인딩된은 <xref:System.Data.DataSet>, 기본 목록이 <xref:System.Data.DataView> (구현 하는 <xref:System.Collections.IList>). (이것은 전체 목록이 아님) 인터페이스를 구현 하는 다른 클래스에는 <xref:System.Array>, <xref:System.Collections.ArrayList>, 및 <xref:System.Collections.CollectionBase>합니다.  
  
 사용 하는 방법의 <xref:System.Windows.Forms.CurrencyManager.List%2A> 속성 구현 하는 클래스에 따라 달라 집니다는 <xref:System.Collections.IList> 인터페이스입니다. 예를 들어 사용할 수 있습니다는 <xref:System.Windows.Forms.CurrencyManager.List%2A> 속성 목록의 이름을 확인할 수 있습니다. 데이터 원본 구현 하는 경우는 <xref:System.ComponentModel.ITypedList> 사용할 수 있습니다 인터페이스는 <xref:System.ComponentModel.ITypedList.GetListName%2A> 현재 테이블의 이름을 반환 하는 메서드. 이 C# 코드 아래에 표시 됩니다.  
  
```csharp  
private void PrintCurrentListName(DataGrid myDataGrid){   
   CurrencyManager myCM = (CurrencyManager)   
   BindingContext[myDataGrid.DataSource, myDataGrid.DataMember];   
   IList myList = myCM.List;   
   ITypedList thisList = (ITypedList) myList;   
   Console.WriteLine(thisList.GetListName(null));   
}  
```  
  
   
  
## Examples  
 다음 코드 예제에서는 레코드 집합을 편집 하지만 추가 하지는 새 사용자 수 있습니다. <xref:System.Windows.Forms.DataGrid.Navigate> 의 이벤트는 <xref:System.Windows.Forms.DataGrid> 컨트롤을는 <xref:System.Collections.IList> 에서 반환 되는 <xref:System.Windows.Forms.CurrencyManager.List%2A> 속성으로 캐스팅 되는 <xref:System.Data.DataView> 변수입니다. <xref:System.Data.DataView.AllowNew%2A>의 <xref:System.Data.DataView> 속성은 `false`로 설정됩니다.  
  
 [!code-cpp[CurrencyManager.List Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/CurrencyManager.List Example/CPP/list.cpp#1)]
 [!code-csharp[CurrencyManager.List Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/CurrencyManager.List Example/CS/list.cs#1)]
 [!code-vb[CurrencyManager.List Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CurrencyManager.List Example/VB/list.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Position" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Current" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Count" />
      </Docs>
    </Member>
    <Member MemberName="ListChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.ListChangedEventHandler ListChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.ListChangedEventHandler ListChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CurrencyManager.ListChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ListChanged As ListChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::ListChangedEventHandler ^ ListChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ListChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>목록 또는 목록의 항목이 변경될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CurrencyManager.ListChanged> 이벤트에 의해 throw 되는 <xref:System.Windows.Forms.CurrencyManager> 항목에 변경 될 때와 같은 방법을 사용 하 여 클래스 <xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A>, <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A>, 및 <xref:System.Windows.Forms.CurrencyManager.Refresh%2A>합니다. 이 이벤트는 구현 하는 경우 데이터 원본을 직접 편집 되는 경우에 발생할 수 있습니다는 <xref:System.ComponentModel.IBindingListView> 인터페이스입니다.  
  
 연결 된 `OnListChanged` 메서드는이 클래스의 private 메서드가 있습니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.CurrencyManager.ListChanged> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.CurrencyManager> 라는 `CurrencyManager1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.CurrencyManager.ListChanged> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#192](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#192)]
 [!code-vb[System.Windows.Forms.EventExamples#192](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#192)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.CurrencyManager.ItemChanged" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
      </Docs>
    </Member>
    <Member MemberName="listposition">
      <MemberSignature Language="C#" Value="protected int listposition;" />
      <MemberSignature Language="ILAsm" Value=".field family int32 listposition" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.CurrencyManager.listposition" />
      <MemberSignature Language="VB.NET" Value="Protected listposition As Integer " />
      <MemberSignature Language="C++ CLI" Value="protected: int listposition;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>목록에 있는 <see cref="T:System.Windows.Forms.CurrencyManager" />의 현재 위치를 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하는 경우의 값은 <xref:System.Windows.Forms.CurrencyManager.Count%2A> 속성은 0 보다 큰는 <xref:System.Windows.Forms.CurrencyManager.listposition> 필드는 0 사이의 숫자 및 <xref:System.Windows.Forms.CurrencyManager.Count%2A> 1을 뺀 값입니다. 경우 <xref:System.Windows.Forms.CurrencyManager.Count%2A> 은 0으로, <xref:System.Windows.Forms.CurrencyManager.listposition> 은-1입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Position" />
      </Docs>
    </Member>
    <Member MemberName="MetaDataChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MetaDataChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MetaDataChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CurrencyManager.MetaDataChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MetaDataChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MetaDataChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.CurrencyManager.List" />의 메타데이터가 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메타 데이터는 <xref:System.Windows.Forms.CurrencyManager.List%2A> 은 기본 스키마 이루어져 <xref:System.Windows.Forms.Binding.DataSource%2A?displayProperty=nameWithType>합니다. <xref:System.Windows.Forms.CurrencyManager.MetaDataChanged> 이벤트는 해당 스키마가 변경 된 때 발생 합니다. 예를 들어는 <xref:System.Windows.Forms.CurrencyManager.MetaDataChanged> 이벤트가 때는 <xref:System.Data.DataColumn> 에 프로그래밍 방식으로 추가 되는 <xref:System.Data.DataTable>합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.CurrencyManager.MetaDataChanged> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.CurrencyManager> 라는 `CurrencyManager1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.CurrencyManager.MetaDataChanged> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#193](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#193)]
 [!code-vb[System.Windows.Forms.EventExamples#193](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#193)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="OnCurrentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnCurrentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnCurrentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.OnCurrentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnCurrentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnCurrentChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" /> 이벤트를 발생시킵니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.OnCurrentChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnCurrentItemChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnCurrentItemChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnCurrentItemChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.OnCurrentItemChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnCurrentItemChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnCurrentItemChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.BindingManagerBase.CurrentItemChanged" /> 이벤트를 발생시킵니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.OnCurrentItemChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnItemChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnItemChanged (System.Windows.Forms.ItemChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemChanged(class System.Windows.Forms.ItemChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.OnItemChanged(System.Windows.Forms.ItemChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemChanged (e As ItemChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemChanged(System::Windows::Forms::ItemChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.ItemChangedEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.CurrencyManager.ItemChanged" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.CurrencyManager.OnItemChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.CurrencyManager.OnItemChanged(System.Windows.Forms.ItemChangedEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.CurrencyManager.OnItemChanged(System.Windows.Forms.ItemChangedEventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.CurrencyManager.ItemChanged" />
        <altmember cref="M:System.Windows.Forms.CurrencyManager.OnCurrentItemChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMetaDataChanged">
      <MemberSignature Language="C#" Value="protected internal void OnMetaDataChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void OnMetaDataChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.OnMetaDataChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub OnMetaDataChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void OnMetaDataChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.CurrencyManager.MetaDataChanged" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.CurrencyManager.OnMetaDataChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.CurrencyManager.OnMetaDataChanged(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.CurrencyManager.OnMetaDataChanged(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPositionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPositionChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPositionChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.OnPositionChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPositionChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPositionChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Windows.Forms.CurrencyManager.OnPositionChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Forms.CurrencyManager.OnPositionChanged(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.CurrencyManager.OnPositionChanged(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
        <altmember cref="M:System.Windows.Forms.CurrencyManager.OnPositionChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.CurrencyManager.OnCurrentChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override int Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CurrencyManager.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Position { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>목록 내에서의 위치를 가져오거나 설정합니다.</summary>
        <value>0과 <see cref="P:System.Windows.Forms.CurrencyManager.Count" />에서 1을 뺀 값 사이의 숫자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 중요 한 속성은 <xref:System.Windows.Forms.CurrencyManager> 클래스는는 <xref:System.Windows.Forms.CurrencyManager.Position%2A> 속성입니다. 항목의 목록에서 전체 목록에서 하나의 항목을 볼 수 있습니다. 어떤 항목을 볼를 확인 하려면 설정는 <xref:System.Windows.Forms.CurrencyManager.Position%2A> 를 0 (목록의 시작 부분) 사이의 숫자로 및 <xref:System.Windows.Forms.CurrencyManager.Count%2A> 값-1 (목록의 끝).  
  
 따라서는 <xref:System.Windows.Forms.CurrencyManager.Position%2A> 통화 또는 동일에 바인딩된 모든 컨트롤의 목록에서 해당 위치가 결정 <xref:System.Windows.Forms.CurrencyManager>합니다. 예를 들어 "FirstName" 및 "LastName" 이라는 두 개의 열으로 구성 된 목록을 한다고 가정 합니다. 두 개의 <xref:System.Windows.Forms.TextBox> 컨트롤이 같은 목록에 연결 되 고 첫 번째 컨트롤이 첫 번째 열에 바인딩된 두 번째 컨트롤 두 번째 열에 바인딩되어 있습니다. 경우는 <xref:System.Windows.Forms.CurrencyManager.Position%2A> 일반 <xref:System.Windows.Forms.CurrencyManager> 설정 된 세 번째 위치로 두 컨트롤 목록에서 해당 위치에 대 한 적절 한 값을 표시 합니다. 즉, 세 위치에 있는 항목으로 구성 된 경우 "John" 첫 번째 이름 및 성 "Smith"에 "John" 및 "Smith" 바인딩된 컨트롤 표시 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서 사용 된 <xref:System.Windows.Forms.CurrencyManager.Position%2A> 속성을 목록으로 탐색할 수 있도록 합니다.  
  
 [!code-cpp[Classic CurrencyManager.Position Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.Position Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.Position Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.Position Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.Position Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.Position Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CurrencyManager.List" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Count" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Current" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>데이터 바인딩된 목록을 강제로 다시 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Windows.Forms.CurrencyManager.Refresh%2A> 데이터 원본이 변경 되 면 알림을 지원 하지 않을 때 메서드 (이 경우에 예를 들어는 <xref:System.Array>).  
  
   
  
## Examples  
 다음 코드 예제에서는 배열을 만들고에 바인딩합니다는 <xref:System.Windows.Forms.TextBox> 컨트롤과 다음 값을 변경 합니다. <xref:System.Windows.Forms.CurrencyManager.Refresh%2A> 표시 하는 값을 업데이트 하는 메서드를 호출할 수 있습니다는 <xref:System.Windows.Forms.TextBox> 제어 합니다.  
  
 [!code-cpp[Classic CurrencyManager.Refresh Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.Refresh Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.Refresh Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.Refresh Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.Refresh Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.Refresh Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CurrencyManager.List" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public override void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">목록에서 제거할 항목의 인덱스입니다.</param>
        <summary>지정한 인덱스에서 해당 항목을 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CurrencyManager.RemoveAt%2A> 메서드는와 같은 복잡 한 제어를 허용 하도록 설계 된는 <xref:System.Windows.Forms.DataGrid> 컨트롤 목록에서 항목을 제거 합니다. 하지 실제로 항목을 제거 하려면이 메서드를 사용 해야 합니다. 대신를 사용 하 여는 <xref:System.Data.DataView.Delete%2A> 의 메서드는 <xref:System.Data.DataView> 항목을 삭제 하는 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.CurrencyManager.RemoveAt%2A> 메서드 목록에서 위치 0에 항목을 제거 합니다.  
  
 [!code-cpp[Classic CurrencyManager.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.RemoveAt Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.RemoveAt Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.RemoveAt Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">지정된 <paramref name="index" />에 행이 없는 경우</exception>
        <altmember cref="M:System.Windows.Forms.CurrencyManager.AddNew" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Count" />
      </Docs>
    </Member>
    <Member MemberName="ResumeBinding">
      <MemberSignature Language="C#" Value="public override void ResumeBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResumeBinding() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.ResumeBinding" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResumeBinding ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResumeBinding();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>데이터 바인딩을 다시 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> 및 <xref:System.Windows.Forms.CurrencyManager.ResumeBinding%2A> 는 단순 데이터 바인딩 시나리오에는 일시 중단 했다가 사용할 수 있는 두 개의 메서드가 있습니다. 데이터 바인딩 사용자 유효성 검사를 수행 하기 전에 데이터 필드에 몇 가지 편집 하도록 허용 해야 하는 경우에 일반적으로 일시 합니다. 예를 들어 하지만 유효성을 검사 하는 두 번째에 따라 한 필드를 변경 해야 하는 경우 첫 번째 필드에 오류에 포함 되도록 두 번째 필드를 리라 예상 되었습니다.  
  
> [!NOTE]
>  사용 하 여 <xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> 변경 내용이 될 때까지 데이터 원본에 반영 되지 않도록 <xref:System.Windows.Forms.CurrencyManager.ResumeBinding%2A> 이라고 하지만 바인딩된 컨트롤에 영향을 미치는 데이터 원본 변경 하지 않는 합니다. 와 같은 복잡 한 데이터 바인딩을 사용 하는 컨트롤의 <xref:System.Windows.Forms.DataGridView> 제어와 같은 변경 이벤트에 따라 해당 값을 업데이트는 <xref:System.Windows.Forms.CurrencyManager.ListChanged> 이벤트입니다. 이 메서드를 호출 해도 이러한 이벤트가 발생 합니다. 이러한 이유로 <xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> 및 <xref:System.Windows.Forms.CurrencyManager.ResumeBinding%2A> 와 같은 단순 바인딩된 컨트롤을 사용 하도록 설계 되는 <xref:System.Windows.Forms.TextBox>합니다. 또는 경우 사용할 수 있습니다 이러한 메서드는 복합 바인딩 시나리오에 표시 하지 않으려면 <xref:System.Windows.Forms.BindingSource.ListChanged> 설정 하 여 이벤트는 <xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A> 속성을 `false`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.CurrencyManager.ResumeBinding%2A> 메서드를 사용하는 방법을 보여 줍니다.  
  
 [!code-cpp[BindingManagerBase_Suspend_Resume_Binding#2](~/samples/snippets/cpp/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/CPP/bindingmanagerbase_suspend_resume_binding.cpp#2)]
 [!code-csharp[BindingManagerBase_Suspend_Resume_Binding#2](~/samples/snippets/csharp/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/CS/bindingmanagerbase_suspend_resume_binding.cs#2)]
 [!code-vb[BindingManagerBase_Suspend_Resume_Binding#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/VB/bindingmanagerbase_suspend_resume_binding.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.RaiseListChangedEvents" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.BindingComplete" />
        <altmember cref="M:System.Windows.Forms.CurrencyManager.SuspendBinding" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.UpdateIsBinding" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Bindings" />
      </Docs>
    </Member>
    <Member MemberName="SuspendBinding">
      <MemberSignature Language="C#" Value="public override void SuspendBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SuspendBinding() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.SuspendBinding" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SuspendBinding ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SuspendBinding();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>데이터 바인딩을 일시 중단하여 바인딩된 데이터 소스가 변경 내용으로 업데이트되지 않도록 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> 및 <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> 단순 바인딩 시나리오에는 일시 중단 했다가 데이터 바인딩 메서드를 사용 합니다. 데이터 바인딩 유효성 검사를 수행 하기 전에 사용자를 데이터 필드에 몇 가지 편집 내용을 확인 해야 하는 경우에 일반적으로 일시 합니다. 예를 들어 하지만 유효성을 검사 하는 두 번째에 따라 한 필드를 변경 해야 하는 경우 첫 번째 필드에 오류에 포함 되도록 두 번째 필드를 리라 예상 되었습니다.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> 변경 될 때까지 데이터 원본에 적용 되지 않도록 방지 <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> 호출 되지만 실제로 발생 이벤트를 억제 하지 않습니다. 와 같은 복잡 한 데이터 바인딩을 사용 하는 컨트롤의 <xref:System.Windows.Forms.DataGridView> 제어, 예: 변경 이벤트에 따라 해당 값을 업데이트는 <xref:System.Windows.Forms.CurrencyManager.ListChanged> 이벤트입니다. 따라서 호출 <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> 되더라도 복합 바인딩된 컨트롤에서 데이터 소스를 업데이트 하는 이벤트를 수신 합니다. 이러한 이유로 <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> 및 <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> 와 같은 단순 바인딩된 컨트롤을 사용 하도록 설계 되는 <xref:System.Windows.Forms.TextBox> 제어 합니다. 또는 경우 사용할 수 있습니다 이러한 메서드는 복합 바인딩 시나리오에 표시 하지 않으려면 <xref:System.Windows.Forms.BindingSource.ListChanged> 설정 하 여 이벤트는 <xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A> 속성을 `false`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> 메서드를 사용하는 방법을 보여 줍니다.  
  
 [!code-cpp[BindingManagerBase_Suspend_Resume_Binding#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/CPP/bindingmanagerbase_suspend_resume_binding.cpp#1)]
 [!code-csharp[BindingManagerBase_Suspend_Resume_Binding#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/CS/bindingmanagerbase_suspend_resume_binding.cs#1)]
 [!code-vb[BindingManagerBase_Suspend_Resume_Binding#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/VB/bindingmanagerbase_suspend_resume_binding.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.RaiseListChangedEvents" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.BindingComplete" />
        <altmember cref="M:System.Windows.Forms.CurrencyManager.ResumeBinding" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.UpdateIsBinding" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Bindings" />
      </Docs>
    </Member>
    <Member MemberName="UpdateIsBinding">
      <MemberSignature Language="C#" Value="protected override void UpdateIsBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void UpdateIsBinding() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.UpdateIsBinding" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub UpdateIsBinding ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void UpdateIsBinding();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>바인딩 상태를 업데이트합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>