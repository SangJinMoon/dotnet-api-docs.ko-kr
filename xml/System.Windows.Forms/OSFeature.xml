<Type Name="OSFeature" FullName="System.Windows.Forms.OSFeature">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8363cf2a442982932cb4b0ef8839abf1433fef58" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30649147" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class OSFeature : System.Windows.Forms.FeatureSupport" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OSFeature extends System.Windows.Forms.FeatureSupport" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.OSFeature" />
  <TypeSignature Language="VB.NET" Value="Public Class OSFeature&#xA;Inherits FeatureSupport" />
  <TypeSignature Language="C++ CLI" Value="public ref class OSFeature : System::Windows::Forms::FeatureSupport" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.FeatureSupport</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>운영 체제별 기능 쿼리를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 `static` 에 제공 된이 클래스의 인스턴스는 <xref:System.Windows.Forms.OSFeature.Feature%2A> 운영 체제 기능에 대 한 쿼리의 속성입니다. 이 클래스의 인스턴스를 만들 수 없습니다.  
  
 기능 버전을 확인 하려면 호출 된 <xref:System.Windows.Forms.OSFeature.GetVersionPresent%2A> 메서드. 호출 하는 기능 또는 특정 버전이 있는지를 확인 하려면는 <xref:System.Windows.Forms.FeatureSupport.IsPresent%2A> 메서드가이 클래스에서 제공 하는 기능 식별자를 찾고에 기능을 지정 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.Forms.OSFeature> 여부를 확인 하려면 운영 체제를 쿼리 하는 <xref:System.Windows.Forms.OSFeature.LayeredWindows> 기능을 설치 합니다. 이 예제에서는 두 가지 방법으로 확인 하 여 기능이 설치 되어 있는지 여부를 확인 하려면를 표시 합니다. 첫 번째 방법은 `myVersion` 있는지를 확인해 이름이 `null`합니다. 버전이 `null`, 기능이 설치 되어 있지 않습니다. 이 예에서는 두 번째 방법은 기본 클래스 메서드를 호출 <xref:System.Windows.Forms.FeatureSupport.IsPresent%2A> 기능이 설치 되어 있는지 확인 합니다. 결과 텍스트 상자에 표시 됩니다.  
  
 이 코드에서는 가정 `textBox1` 이 되어 폼에 배치 합니다.  
  
 [!code-cpp[Classic OSFeature Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OSFeature Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OSFeature Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OSFeature Example/CS/source.cs#1)]
 [!code-vb[Classic OSFeature Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OSFeature Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.AppDomain" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Environment" />
    <altmember cref="T:System.Windows.Forms.SystemInformation" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OSFeature ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.OSFeature.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OSFeature();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.OSFeature" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 클래스는 인스턴스화할 수 없습니다. 운영 체제 기능에 대 한 쿼리를 사용 하 여는 `static` 인스턴스의 <xref:System.Windows.Forms.OSFeature> 이 클래스에 제공 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.OSFeature" />
      </Docs>
    </Member>
    <Member MemberName="Feature">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.OSFeature Feature { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.OSFeature Feature" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.OSFeature.Feature" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Feature As OSFeature" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::OSFeature ^ Feature { System::Windows::Forms::OSFeature ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.OSFeature</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>기능 쿼리에 사용할 <see cref="T:System.Windows.Forms.OSFeature" /> 클래스의 <see langword="static" /> 인스턴스를 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
        <value>
          <see cref="T:System.Windows.Forms.OSFeature" /> 클래스의 인스턴스입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 사용 하 여 `static` 운영 체제 기능에 대 한 쿼리의 속성입니다. 이 클래스의 인스턴스를 만들 수 없습니다.  
  
 기능 버전을 확인 하려면 호출 된 <xref:System.Windows.Forms.OSFeature.GetVersionPresent%2A> 메서드. 호출 하는 기능 또는 특정 버전이 있는지를 확인 하려면는 <xref:System.Windows.Forms.FeatureSupport.IsPresent%2A> 메서드가이 클래스에서 제공 하는 기능 식별자를 찾고에 기능을 지정 합니다.  
  
   
  
## Examples  
 다음 예제 쿼리에서 <xref:System.Windows.Forms.OSFeature> 에 대 한는 <xref:System.Windows.Forms.OSFeature.LayeredWindows> 기능입니다. 버전을 확인 하는 경우 확인 `null`, 기능이 설치 되어 있는지 여부를 확인 하려면. 결과 텍스트 상자에 표시 됩니다. 이 코드에서는 가정 `textBox1` 이 되어 폼에 배치 합니다.  
  
 [!code-cpp[Classic OSFeature.GetVersionPresent Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OSFeature.GetVersionPresent Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OSFeature.GetVersionPresent Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OSFeature.GetVersionPresent Example/CS/source.cs#1)]
 [!code-vb[Classic OSFeature.GetVersionPresent Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OSFeature.GetVersionPresent Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.OSFeature.#ctor" />
        <altmember cref="T:System.Version" />
        <altmember cref="T:System.Windows.Forms.FeatureSupport" />
        <altmember cref="F:System.Windows.Forms.OSFeature.LayeredWindows" />
      </Docs>
    </Member>
    <Member MemberName="GetVersionPresent">
      <MemberSignature Language="C#" Value="public override Version GetVersionPresent (object feature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Version GetVersionPresent(object feature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.OSFeature.GetVersionPresent(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetVersionPresent (feature As Object) As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Version ^ GetVersionPresent(System::Object ^ feature);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="feature" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="feature">버전을 요청할 기능으로, <see cref="F:System.Windows.Forms.OSFeature.LayeredWindows" /> 또는 <see cref="F:System.Windows.Forms.OSFeature.Themes" />입니다.</param>
        <summary>현재 시스템에서 사용할 수 있는 지정된 기능의 버전을 검색합니다.</summary>
        <returns>현재 시스템에서 사용할 수 있는 지정된 운영 체제 기능의 버전을 나타내는 <see cref="T:System.Version" />이거나 기능이 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Windows.Forms.OSFeature.Feature%2A> 속성을는 `static` 인스턴스의 <xref:System.Windows.Forms.OSFeature> 에서이 클래스는 기능의 버전 번호에 대 한 쿼리를 제공 합니다.  
  
   
  
## Examples  
 다음 예제 쿼리에서 <xref:System.Windows.Forms.OSFeature> 에 대 한는 <xref:System.Windows.Forms.OSFeature.LayeredWindows> 기능입니다. 버전을 확인 하는 경우 확인 `null`, 기능이 설치 되어 있는지 여부를 확인 하려면. 결과 텍스트 상자에 표시 됩니다. 이 코드에서는 가정 `textBox1` 이 되어 폼에 배치 합니다.  
  
 [!code-cpp[Classic OSFeature.GetVersionPresent Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OSFeature.GetVersionPresent Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OSFeature.GetVersionPresent Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OSFeature.GetVersionPresent Example/CS/source.cs#1)]
 [!code-vb[Classic OSFeature.GetVersionPresent Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OSFeature.GetVersionPresent Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Version" />
        <altmember cref="P:System.Windows.Forms.OSFeature.Feature" />
        <altmember cref="T:System.Windows.Forms.FeatureSupport" />
        <altmember cref="F:System.Windows.Forms.OSFeature.LayeredWindows" />
      </Docs>
    </Member>
    <Member MemberName="IsPresent">
      <MemberSignature Language="C#" Value="public static bool IsPresent (System.Windows.Forms.SystemParameter enumVal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPresent(valuetype System.Windows.Forms.SystemParameter enumVal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.OSFeature.IsPresent(System.Windows.Forms.SystemParameter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPresent (enumVal As SystemParameter) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPresent(System::Windows::Forms::SystemParameter enumVal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumVal" Type="System.Windows.Forms.SystemParameter" />
      </Parameters>
      <Docs>
        <param name="enumVal">검색할 기능을 나타내는 <see cref="T:System.Windows.Forms.SystemParameter" />입니다.</param>
        <summary>운영 체제에서 지정된 기능 또는 메트릭을 지원하는지 여부를 나타내는 값을 검색합니다.</summary>
        <returns>
          시스템에서 해당 기능을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 사용 된 <xref:System.Windows.Forms.OSFeature.IsPresent%2A> 특정 기능이 나 메트릭을로 식별 되는 운영 체제를 지원 하는지 확인 하는 메서드 `enumValue`합니다. 반환 된 값에 따라 <xref:System.Windows.Forms.OSFeature.IsPresent%2A>, 사용자 코드에서 조건부 작업을 수행 합니다. 예를 들어, 매개 변수 값으로이 메서드를 호출 하는 경우 <xref:System.Windows.Forms.SystemParameter.FlatMenu> 반환 `true`를 평면 스타일의 응용 프로그램에 소유자가 그린 메뉴를 만들 수 있습니다.  
  
 일부 시스템 기능 또는 메트릭에 액세스 하는 특정 운영 체제 버전에서 사용할 수 없는 경우 예외가 발생 합니다. 이 경우 먼저 사용 하 여 해당 <xref:System.Windows.Forms.SystemParameter> 열거형 값을 함께와 <xref:System.Windows.Forms.OSFeature.IsPresent%2A>에 대 한 메트릭을 지원 여부를 확인 합니다. 예를 들어 호출 <xref:System.Windows.Forms.OSFeature.IsPresent%2A> 와 <xref:System.Windows.Forms.SystemInformation.CaretWidth%2A> 을 가져오기 전에 <xref:System.Windows.Forms.SystemInformation.CaretWidth%2A?displayProperty=nameWithType> 속성 값입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.OSFeature.IsPresent%2A> 메서드는 <xref:System.Windows.Forms.SystemParameter> 열거형입니다. 예제에서는 운영 체제를 지원 하는지 확인 하 고 `CaretWidth` 호출 하기 전에 메트릭는 <xref:System.Windows.Forms.SystemInformation.CaretWidth%2A?displayProperty=nameWithType> 속성입니다.  
  
 [!code-cpp[System.Windows.Forms.OSFeature.IsPresent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.OSFeature.IsPresent/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.OSFeature.IsPresent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.OSFeature.IsPresent/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.OSFeature.IsPresent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.OSFeature.IsPresent/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.OSFeature.IsPresent#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.OSFeature.IsPresent/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.OSFeature.IsPresent#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.OSFeature.IsPresent/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.OSFeature.IsPresent#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.OSFeature.IsPresent/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.SystemParameter" />
        <altmember cref="M:System.Windows.Forms.OSFeature.GetVersionPresent(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LayeredWindows">
      <MemberSignature Language="C#" Value="public static readonly object LayeredWindows;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object LayeredWindows" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.OSFeature.LayeredWindows" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LayeredWindows As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ LayeredWindows;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>최상위 계층 창의 기능을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 계층적된 창의 운영 체제에서 투명 하 게 또는 반투명 만들 수 있습니다. 계층된 창에 대 한 지원 Windows 2000에서 처음 도입 되었습니다. 자세한 내용은 "계층화 된 Windows:: A 새로운 방식으로를 사용 하 여 투명도 및 투명도 효과에 Windows" 응용 프로그램 참조의 Platform SDK 설명서에 http://msdn.microsoft.com합니다.  
  
 계층된 창 기능이 설치 되어 있는지 확인 하려면는 <xref:System.Windows.Forms.OSFeature.Feature%2A> 기본 클래스 메서드를 호출 하는 속성 <xref:System.Windows.Forms.FeatureSupport.IsPresent%2A> 와 <xref:System.Windows.Forms.OSFeature.LayeredWindows> 찾으려는 기능으로 합니다.  
  
 또는 호출 하 여 기능이 설치 되어 있는지를 확인할 수 있습니다는 <xref:System.Windows.Forms.OSFeature.GetVersionPresent%2A> 메서드 <xref:System.Windows.Forms.OSFeature.LayeredWindows> 찾으려고 기능으로 합니다.  
  
   
  
## Examples  
 다음 예제에서는 현재 시스템의 계층된 창을 지원 하는지 여부를 결정 합니다. 기본 클래스 메서드 <xref:System.Windows.Forms.FeatureSupport.IsPresent%2A> 사용 하 여 호출 <xref:System.Windows.Forms.OSFeature.LayeredWindows> 찾으려는 기능으로 합니다. 결과 텍스트 상자에 표시 됩니다. 이 코드에서는 가정 `textBox1` 인스턴스화 되었으며 폼에 배치 합니다.  
  
 [!code-cpp[Classic OSFeature.LayeredWindows Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OSFeature.LayeredWindows Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OSFeature.LayeredWindows Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OSFeature.LayeredWindows Example/CS/source.cs#1)]
 [!code-vb[Classic OSFeature.LayeredWindows Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OSFeature.LayeredWindows Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Forms.OSFeature.IsPresent" />
        <altmember cref="M:System.Windows.Forms.OSFeature.GetVersionPresent(System.Object)" />
        <altmember cref="P:System.Windows.Forms.OSFeature.Feature" />
      </Docs>
    </Member>
    <Member MemberName="Themes">
      <MemberSignature Language="C#" Value="public static readonly object Themes;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object Themes" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.OSFeature.Themes" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Themes As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ Themes;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>운영 체제 테마 기능을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 테마는 Microsoft Plus의 배경, 커서, 글꼴, 소리, 및 처음 도입 된 아이콘을 포함 하는 시각적 인터페이스 설정 모음입니다. for Windows 95. 필요에서 비주얼 스타일에 대 한 광범위 한 지원을.NET Framework 직접 테마 조작을 지원 하지는 않습니다는 <xref:System.Windows.Forms.VisualStyles?displayProperty=nameWithType> 네임 스페이스입니다. Windows 테마에 대 한 자세한 내용은 테마 및 비주얼 스타일 및 Win32 SDK의 비주얼 스타일 참조 항목을 참조 합니다.  
  
 테마 기능이 설치 되어 있는지를 확인 하려면 기본 클래스 메서드를 호출 <xref:System.Windows.Forms.FeatureSupport.IsPresent%2A> 와 <xref:System.Windows.Forms.OSFeature.Themes> 찾으려는 기능으로 합니다.  
  
 또는 호출 하 여 기능이 설치 되어 있는지를 확인할 수 있습니다는 <xref:System.Windows.Forms.OSFeature.GetVersionPresent%2A> 메서드 <xref:System.Windows.Forms.OSFeature.Themes> 찾으려고 기능으로 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Forms.OSFeature.IsPresent" />
        <altmember cref="M:System.Windows.Forms.OSFeature.GetVersionPresent(System.Object)" />
        <altmember cref="P:System.Windows.Forms.OSFeature.Feature" />
      </Docs>
    </Member>
  </Members>
</Type>