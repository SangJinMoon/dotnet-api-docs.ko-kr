<Type Name="HtmlElement" FullName="System.Windows.Forms.HtmlElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a86d3c0b0580ad13ab92f6f2399771049ddd054c" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34452387" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HtmlElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlElement extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlElement sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>웹 페이지 내의 HTML 요소를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement> 모든 가능한 형식의 HTML 문서에서 요소를 같은 나타냅니다 `BODY`, `TABLE`, 및 `FORM`, 다른 규칙 으로부터 합니다. 클래스에서 모든 요소를 찾을 예상할 수 있는 가장 일반적인 속성을 노출 합니다.  
  
 대부분의 요소를 가질 수 있습니다 *자식 요소*:는 아래에 위치 하는 다른 HTML 요소입니다. 사용 하 여는 <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> 지정된 된 요소에 자식 개체가 있는지 여부를 테스트 하는 속성 및 <xref:System.Windows.Forms.HtmlElement.Children%2A> 반복 하는 컬렉션입니다. <xref:System.Windows.Forms.HtmlElement.Parent%2A> 속성에서 반환 된 <xref:System.Windows.Forms.HtmlElement> 현재 요소가 중첩 되어에 합니다.  
  
 특성, 속성 및 메서드에 의해 직접 노출 되지 않는 내부 요소에 액세스 해야 할 수 <xref:System.Windows.Forms.HtmlElement>와 같은 `SRC` 특성에 `IMG` 요소 또는 `Submit` 에서 메서드는 `FORM`합니다. <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 및 <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> 메서드를 사용 하면 검색 한 특성이 나 특정 요소에 속성을 변경 하는 동안 <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> 액세스에는 관리 되는 DOM 문서 개체 모델 ()를 노출 되지 않는 모든 메서드를 제공 합니다. 노출 되지 않은 속성 및 메서드를 액세스할 경우 응용 프로그램에 비관리 코드 권한는 <xref:System.Windows.Forms.HtmlElement.DomElement%2A> 특성입니다.  
  
 사용 하 여는 <xref:System.Windows.Forms.HtmlElement.TagName%2A> 요소가 특정 유형 인지를 테스트 하는 속성입니다.  
  
 실행 시 모든 HTML 문서를 수정할 수 있습니다. 새로 만들 수 있습니다 <xref:System.Windows.Forms.HtmlElement> 개체와 <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> 방식의 <xref:System.Windows.Forms.HtmlDocument>, 사용 하 여 다른 요소에 추가 하는 <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> 또는 <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> 메서드. HTML 태그로 요소를 만들 수 있고 기존 요소에 할당 하면 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 임의의 HTML 문서를 검토 하 고 오목한 부분이 있는 HTML 요소를 설명 하는 문자열을 파생 하는 방법을 보여 줍니다. 중첩 및 수준 번호 수준을 나타내는 데 사용 되는 요소는 문서에 있습니다. 이 코드 예제에서는 응용 프로그램 호스트는 <xref:System.Windows.Forms.WebBrowser> 라는 컨트롤 `WebBrowser1`합니다.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.HtmlElement#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection All { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection All" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.All" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property All As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ All { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 요소의 아래에 있는 모든 요소의 <see cref="T:System.Windows.Forms.HtmlElementCollection" />을 가져옵니다.</summary>
        <value>현재 요소의 직계 또는 비직계 자식인 모든 요소의 컬렉션입니다. 현재 요소가 <c>테이블</c>, 예를 들어 <see cref="P:System.Windows.Forms.HtmlElement.All" /> 돌아갑니다 모든 <c>번째</c>, <c>TR</c>, 및 <c>TD</c> 아니라 테이블, 와 같은 다른 요소 외에 <c>DIV</c> 및 <c>범위</c> 셀 내에 포함 된 요소입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 직계 부모 요소가 현재 요소에만 액세스는 <xref:System.Windows.Forms.HtmlElement.Children%2A> 컬렉션 대신 합니다.  
  
 이 컬렉션의 요소 소스 순서 대로 반드시 반환 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.Children" />
      </Docs>
    </Member>
    <Member MemberName="AppendChild">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement AppendChild (System.Windows.Forms.HtmlElement newElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement AppendChild(class System.Windows.Forms.HtmlElement newElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function AppendChild (newElement As HtmlElement) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ AppendChild(System::Windows::Forms::HtmlElement ^ newElement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newElement" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="newElement">트리의 이 위치 뒤에 추가할 <see cref="T:System.Windows.Forms.HtmlElement" />입니다.</param>
        <summary>요소를 다른 요소의 하위 트리에 추가합니다.</summary>
        <returns>트리에 추가된 후의 요소입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 문서 개체 모델 (DOM)을 사용 하면 다양 한 방법으로 HTML 파일의 실행 시간 내용을 변경할 수 있습니다. 사용 하 여 <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> 기존 문서에 새 요소를 추가 하거나 페이지에서 요소를 이동할 수 있습니다.  
  
 요소가 이미 부모가 있으면, 요소가 다른 요소에 추가 됩니다 자동으로 제거 해당 요소 이전 부모에서.  
  
 런타임에 사용 하 여 문서에 대 한 추가 <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> 를 호출할 때 유지 되지 것입니다는 <xref:System.Windows.Forms.WebBrowser.ShowSaveAsDialog%2A> 에서 메서드는 <xref:System.Windows.Forms.WebBrowser> 제어 합니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하 여 새 하이퍼링크 만듭니다는 <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> 메서드 끝에 추가 하 고 사용 하 여 페이지의 `AppendChild` 에 `BODY` 요소입니다. 이 예제에서는 응용 프로그램에 <xref:System.Windows.Forms.WebBrowser> 라는 컨트롤 `WebBrowser1`합니다.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlElement#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.CreateElement(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">처리할 이벤트의 이름입니다.</param>
        <param name="eventHandler">이벤트를 처리하는 관리 코드입니다.</param>
        <summary>HTML DOM(문서 개체 모델)의 명명된 이벤트에 대한 이벤트 처리기를 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 관리 되는 문서 개체 모델 (DOM) 선택 된 수의 이벤트를 노출합니다. 대부분의 이벤트를 노출 되지 않은 특정 형식의 요소에 대해서만 정의 됩니다. 와 같은 `submit` 이벤트에 대해서만 사용할 수 있는 `FORM` 요소입니다. 사용 하 여 <xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A> 에 노출 되지 않는 이러한 이벤트에 이벤트 처리기를 추가 합니다.  
  
 문서 로드가 완료 될 때까지 문서 또는 해당 개체 중 하나에 이벤트를 연결 해야 합니다. 이 메서드를 호출 해야 가장 빠른는 <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> 의 이벤트는 <xref:System.Windows.Forms.WebBrowser> 제어 합니다.  
  
 사용 가능한 관리 되지 않는 이벤트에 대 한 자세한 내용은 참조 [관리 되는 HTML 문서 개체 모델에서 노출 되지 않은 멤버에 액세스](~/docs/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model.md) 및 주어진 인터페이스: [주어진](http://go.microsoft.com/fwlink/?LinkId=104876), [IHTMLElement2](http://go.microsoft.com/fwlink/?LinkId=104877), [IHTMLElement3](http://go.microsoft.com/fwlink/?LinkId=104878), [IHTMLElement4](http://go.microsoft.com/fwlink/?LinkId=104879)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanHaveChildren">
      <MemberSignature Language="C#" Value="public bool CanHaveChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHaveChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.CanHaveChildren" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanHaveChildren As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHaveChildren { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소가 자식 요소를 가질 수 있는지를 나타내는 값을 가져옵니다.</summary>
        <value>요소가 자식 요소를 가질 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일부 요소와 같은 `IMG` 및 `SCRIPT`, 감추어진 자식을 가질 수 없습니다. 호출 하기 전에이 속성을 사용 하 여 <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> 또는 <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> 임의 요소에 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 핸들의 <xref:System.Windows.Forms.HtmlElement.Click> 에 이벤트 <xref:System.Windows.Forms.HtmlDocument>합니다. 코드 요소 라는 전용 클래스 변수에 할당 요소에 이전 마우스 클릭을 사용 하 여 선택 하지 않은 경우 `MoveElement`합니다. 요소를 선택한 경우 코드는 방금 클릭 하는 요소에 추가 하려고 시도 합니다. 이 코드 예제에서는 응용 프로그램 호스트는 <xref:System.Windows.Forms.WebBrowser> 라는 컨트롤 `WebBrowser1`, 이미 있는 및 추가 대 한 이벤트 처리기는 <xref:System.Windows.Forms.HtmlElement.Click> 이벤트에 <xref:System.Windows.Forms.HtmlDocument>합니다.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlElement#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Children" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Children" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Children As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Children { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 요소에 대한 모든 자식의 <see cref="T:System.Windows.Forms.HtmlElementCollection" />을 가져옵니다.</summary>
        <value>현재 요소가 부모인 모든 <see cref="T:System.Windows.Forms.HtmlElement" /> 개체의 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다양 한 HTML 파일 요소 별로 다른 HTML 요소를 가질 수 있습니다. <xref:System.Windows.Forms.HtmlElement.Children%2A> 컬렉션의 문서 트리 구조를 탐색 하기 위한 간단한 메커니즘을 제공 합니다.  
  
 <xref:System.Windows.Forms.HtmlElement.Children%2A> 현재 요소의 직계 부모가 요소를 노출 합니다. 있는 경우는 <xref:System.Windows.Forms.HtmlElement> 에 대 한는 `TABLE` 요소인 <xref:System.Windows.Forms.HtmlElement.Children%2A> 하면 모든는 `TR` (행) 요소 내에 `TABLE`합니다. 검색 하는 `TD` 내에 포함 된 (셀) 요소는 `TR` 요소를 사용 하 여 해야 합니다는 <xref:System.Windows.Forms.HtmlElement.Children%2A> 각 개별 컬렉션 `TR` 요소 또는 사용 하 여는 <xref:System.Windows.Forms.HtmlElement.All%2A> 컬렉션에 <xref:System.Windows.Forms.HtmlElement>합니다.  
  
 이 컬렉션의 요소는 원본 순서에 포함 되도록 보장 되지 않습니다.  
  
 경우 <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> 은 `false`, `Children` 항상 비어 있게 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 임의의 HTML 문서를 검사 하 고 오목한 부분이 있는 요소를 설명 하는 문자열을 파생 수준 중첩 및 번호 수준을 나타내는 데 사용 되는 요소는 문서에 합니다. 검색 하 여 수행 된 `Children` 문서 맨 위에 있는 HTML 요소부터 재귀적으로 모든 요소의 컬렉션입니다. 이 코드 예제에서는 응용 프로그램에 <xref:System.Windows.Forms.WebBrowser> 라는 컨트롤 `WebBrowser1`합니다.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.HtmlElement#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.All" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Click;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 왼쪽 단추로 요소를 클릭할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 동작을 취소할 수는 <xref:System.Windows.Forms.HtmlElement.Click> 설정 하 여 요소에는 이벤트는 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
 A <xref:System.Windows.Forms.HtmlElement.Click> 요소에는 이벤트는 해당 요소의 부모 요소와에 발생할는 <xref:System.Windows.Forms.HtmlDocument> 설정 하지 않으면 클래스 자체는 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> 의 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
 사용자가 하지 현재 입력 포커스가 없는 하는 요소를 클릭할 경우는 <xref:System.Windows.Forms.HtmlElement.Click> 이벤트 후에 수행 됩니다는 <xref:System.Windows.Forms.HtmlElement.Focusing> 이벤트를 하기 전에 <xref:System.Windows.Forms.HtmlElement.LostFocus> 해당 요소에 대 한 이벤트입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.Click> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.Click> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#432](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#432)]
 [!code-vb[System.Windows.Forms.EventExamples#432](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#432)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ClientRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ClientRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ClientRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ClientRectangle { System::Drawing::Rectangle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTML 문서에 있는 요소의 클라이언트 영역 경계를 가져옵니다.</summary>
        <value>요소가 차지하는 클라이언트 영역 중 경계와 스크롤 막대가 차지하는 영역을 제외한 영역입니다. 장식을 포함한 요소의 위치와 크기를 가져오려면 대신 <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />을 사용합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.ClientRectangle%2A> 명시적 높이 너비를 지정 된 요소 또는 절대 위치를 사용 하는 요소에 대해서만 위치 데이터를 반환 합니다. 위치 스타일으로 설정 된 경우 문서는 절대 위치로 지정 `absolute`, 이후에 배치할 수 있습니다는 HTML 페이지에 어느 좌표입니다.  
  
   
  
## Examples  
 다음 HTML 페이지의 호스트 인스턴스로 로드 했다고 가정은 <xref:System.Windows.Forms.WebBrowser> 제어 합니다.  
  
```  
<HTML>  
  
    <BODY>  
  
        <DIV id="div1" style="position:absolute;top:100px;left:100px;border-      style:solid;border-width:1px;">  
            Edit this text.  
        </DIV>  
  
    </BODY>  
  
</HTML>  
```  
  
 다음 코드 예제에서는이 요소를 검색 클라이언트 영역 보다 작은 400 x 50 픽셀인 이며도 설정 하는 경우 크기를 확장 하는 `DIV` 에 `contentEditable` 사용자 텍스트를 입력할 수 있도록 상태입니다.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlElement#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">처리할 이벤트의 이름입니다.</param>
        <param name="eventHandler">이벤트를 처리하는 관리 코드입니다.</param>
        <summary>HTML DOM(문서 개체 모델)의 명명된 이벤트에서 이벤트 처리기를 제거합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlDocument ^ Document { System::Windows::Forms::HtmlDocument ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소가 속한 <see cref="T:System.Windows.Forms.HtmlDocument" />를 가져옵니다.</summary>
        <value>이 요소의 부모 문서입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일부 HTML 페이지를 사용 하 여 프레임을 호스트할 수는 `FRAMESET` 태그입니다. 이 경우, 각 개별 `FRAME` 요소 자체의 인스턴스를 포함 합니다 <xref:System.Windows.Forms.HtmlDocument>합니다. 이 속성은 요소에 대 한 참조에서 이벤트 처리기에서 받은 경우 가장 유용는 <xref:System.Windows.Forms.HtmlElementEventArgs>, 요소가 있는 문서에 작업을 수행 해야 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.HtmlDocument" />
      </Docs>
    </Member>
    <Member MemberName="DomElement">
      <MemberSignature Language="C#" Value="public object DomElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.DomElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomElement As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomElement { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 대한 비관리 인터페이스 포인터를 가져옵니다.</summary>
        <value>COM <c>IUnknown</c> HTML 요소 중 하나로 캐스팅할 수 있는 요소에 대 한 포인터와 같은 인터페이스 <c>주어진</c>합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement> 래퍼에 대 한는 Internet Explorer DOM 문서 개체 모델 (), 구성 요소 개체 모델 (COM)를 사용 하 여 작성 됩니다. 와 같은 내부 COM 인터페이스에서 노출 되지 않은 속성이 나 메서드에 액세스 해야 할 경우 `IHTMLElement`를 쿼리 하기 위해이 개체에 사용할 수 있습니다.  
  
 관리 되지 않는 인터페이스를 사용 하려면 응용 프로그램에 MSHTML 라이브러리 (mshtml.dll)를 가져올 해야 합니다. 그러나 실행할 수도 있습니다 노출 되지 않은 속성 및 메서드를 사용 하 여 `Invoke` 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 관리 되지 않는 인터페이스를 사용 하 여 현재 선택한 텍스트를 사용자가 선택한 URL로 하이퍼링크를로 변환 합니다. 폼에 있다는 가정 아래에서이 코드를 작성 한 <xref:System.Windows.Forms.WebBrowser> 라는 컨트롤 `WebBrowser1`, 프로젝트에 대 한 참조로 관리 되지 않는 MSHTML 라이브러리를 추가 합니다.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.HtmlElement#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.DomDocument" />
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoubleClick As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DoubleClick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소를 마우스 왼쪽 단추로 연속하여 두 번 빠르게 클릭할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 번 클릭은 운영 체제의 마우스 설정에 따라 결정 됩니다. 천천히 두 번 클릭하는 것이 아닌 두 번 클릭(double-click)으로 간주될 수 있도록 마우스 단추 클릭 간격을 설정할 수 있습니다.  
  
 에 대 한 기본 동작을 취소할 수는 <xref:System.Windows.Forms.HtmlElement.DoubleClick> 설정 하 여 요소에는 이벤트는 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
 A <xref:System.Windows.Forms.HtmlElement.DoubleClick> 요소에는 이벤트는 해당 요소의 부모 요소와에 발생할는 <xref:System.Windows.Forms.HtmlDocument> 설정 하지 않으면 클래스 자체는 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> 의 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.DoubleClick> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.DoubleClick> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#433](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#433)]
 [!code-vb[System.Windows.Forms.EventExamples#433](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#433)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Drag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Drag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.Drag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drag As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Drag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 텍스트를 여러 위치로 끌 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트는 다음 위치에 텍스트를 끌 때 발생 합니다.  
  
-   내 또는 저장소에서 호스팅되는 HTML 페이지 간에 <xref:System.Windows.Forms.WebBrowser> 컨트롤 또는 Internet Explorer  
  
-   다른 응용 프로그램  
  
-   Windows 바탕 화면에  
  
 에 대 한 기본 동작을 취소할 수는 <xref:System.Windows.Forms.HtmlElement.Drag> 설정 하 여 요소에는 이벤트는 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
 A <xref:System.Windows.Forms.HtmlElement.Drag> 요소에는 이벤트는 해당 요소의 부모 요소와에 발생할는 <xref:System.Windows.Forms.HtmlDocument> 설정 하지 않으면 클래스 자체는 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> 의 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.Drag> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.Drag> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#434](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#434)]
 [!code-vb[System.Windows.Forms.EventExamples#434](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#434)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragEnd">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DragEnd;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DragEnd" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DragEnd" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnd As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DragEnd;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 끌기 작업을 완료할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 동작을 취소할 수는 <xref:System.Windows.Forms.HtmlElement.DragEnd> 설정 하 여 요소에는 이벤트는 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
 A <xref:System.Windows.Forms.HtmlElement.DragEnd> 요소에는 이벤트는 해당 요소의 부모 요소와에 발생할는 <xref:System.Windows.Forms.HtmlDocument> 설정 하지 않으면 클래스 자체는 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> 의 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.DragEnd> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.DragEnd> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#435](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#435)]
 [!code-vb[System.Windows.Forms.EventExamples#435](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#435)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 이 요소 위로 항목을 더 이상 끌지 않을 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.DragLeave> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.DragLeave> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#436](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#436)]
 [!code-vb[System.Windows.Forms.EventExamples#436](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#436)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ DragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 텍스트를 요소 위로 끌 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 동작을 취소할 수는 <xref:System.Windows.Forms.HtmlElement.DragOver> 설정 하 여 요소에는 이벤트는 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
 A <xref:System.Windows.Forms.HtmlElement.DragOver> 요소에는 이벤트는 해당 요소의 부모 요소와에 발생할는 <xref:System.Windows.Forms.HtmlDocument> 설정 하지 않으면 클래스 자체는 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> 의 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.DragOver> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.DragOver> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#437](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#437)]
 [!code-vb[System.Windows.Forms.EventExamples#437](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#437)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 이 요소에 데이터를 입력할 수 있는지를 가져오거나 설정합니다.</summary>
        <value>사용자가 요소에 입력할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 `FORM` 텍스트 상자 및 라디오 단추, 설정 등의 요소 <xref:System.Windows.Forms.HtmlElement.Enabled%2A> 를 `false` 이러한 양식 필드를 사용 하 여 사용자를 방지 합니다. 다른 요소에 대해와 같은 `DIV` 또는 `SPAN`설정 <xref:System.Windows.Forms.HtmlElement.Enabled%2A> 를 `false` 회색으로 표시 요소에서 모든 텍스트를 발생 합니다; 그러나 텍스트를 여전히 선택할 수 있습니다. 선택 영역을 취소 하려면 노출 되지 않은 항목에 대 한 이벤트 처리기를 추가 `onselectstart` 사용 하 여 이벤트는 <xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A> 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">같은지를 테스트할 개체입니다.</param>
        <summary>제공된 개체가 현재 요소와 같은지 테스트합니다.</summary>
        <returns>
          <paramref name="obj" />가 <see cref="T:System.Windows.Forms.HtmlElement" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstChild">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement FirstChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement FirstChild" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.FirstChild" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstChild As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ FirstChild { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문서 트리에서 이 요소의 아래에 있는 다음 요소를 가져옵니다.</summary>
        <value>원본 순서에서 현재 요소의 아래에 포함된 첫 번째 요소를 나타내는 <see cref="T:System.Windows.Forms.HtmlElement" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 <xref:System.Windows.Forms.HtmlElement.FirstChild%2A> 함께에서 <xref:System.Windows.Forms.HtmlElement.NextSibling%2A> HTML 문서에 대 한 문서 트리를 탐색 하 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 요소에 사용자 입력 포커스를 놓습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요소에 포커스를 설정 합니다. 해당 요소가 포커스를 제공 하면는 활성 요소가 됩니다. 포커스가 있는 요소에서 반환할 예를 들어는 <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A> 속성 <xref:System.Windows.Forms.HtmlDocument>합니다.  
  
 모든 키 입력 한 후 사용자가 입력 한 <xref:System.Windows.Forms.HtmlElement.Focus%2A> 가 호출 된 해당 요소에 보낼 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Focusing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Focusing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.Focusing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Focusing As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Focusing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소에서 사용자 입력 포커스를 처음 받을 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 작업 표시줄 또는 ALT + TAB 키를 사용 하 여 다른 응용 프로그램으로 전환 하는 사용자에 게 전에 포커스가 있던 하는 요소는 <xref:System.Windows.Forms.HtmlElement.Focusing> 및 <xref:System.Windows.Forms.HtmlElement.GotFocus> 이벤트 다시 전환한 경우에 사용자 응용 프로그램으로 다시 합니다.  
  
 이 이벤트의 기본 동작을 취소할 수 없습니다. 요소에서 포커스를 제거 하려면 호출 <xref:System.Windows.Forms.HtmlElement.Focus%2A> 내에서 다른 요소에는 <xref:System.Windows.Forms.HtmlElement.GotFocus> 이벤트입니다.  
  
 A <xref:System.Windows.Forms.HtmlElement.Focusing> 요소에는 이벤트는 해당 요소의 부모 및에 발생할는 <xref:System.Windows.Forms.HtmlDocument> 설정 하지 않으면 클래스 자체는 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> 의 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.Focusing> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.Focusing> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#438](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#438)]
 [!code-vb[System.Windows.Forms.EventExamples#438](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#438)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public string GetAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttribute (attributeName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAttribute(System::String ^ attributeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">특성 이름입니다. 이 인수는 대/소문자를 구분하지 않습니다.</param>
        <summary>요소에서 명명된 특성의 값을 검색합니다.</summary>
        <returns>
          <see cref="T:System.String" /> 값으로서 요소에 대한 이 특성의 값입니다. 지정된 특성이 이 요소에 없으면 빈 문자열이 반환됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Html에서 특성에 해당 요소에 대 한 모든 유효한 이름/값 쌍입니다. <xref:System.Windows.Forms.HtmlElement> 특정 유형의 요소에만 적용 되는 모든 요소에 공통 되는 특성에만 노출 `SRC` 에 대 한 미리 정의 된 특성이 `IMG` 예를 들어 태그에 대 한는 `DIV` 태그입니다. 사용 하 여 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 및 <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> 에 관리 되는 DOM 문서 개체 모델 ()를 노출 되지 않은 특성을 조작할 수 있습니다.  
  
 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 및 <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> 대/소문자 구분 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 모든 검색는 `META` 태그는 HTML 내에서 문서를 사용 하 여 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 찾을 수는 `META` 태그 이름의 `Description`합니다. 이 예제에서는 응용 프로그램에 <xref:System.Windows.Forms.WebBrowser> 라는 컨트롤 `WebBrowser1`합니다.  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElementCollection GetElementsByTagName(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementsByTagName (tagName As String) As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElementCollection ^ GetElementsByTagName(System::String ^ tagName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">검색할 <see cref="T:System.Windows.Forms.HtmlElement" /> 개체의 태그 이름입니다.</param>
        <summary>HTML에서 지정된 <c>HTML</c> 태그로 표시되는 요소의 컬렉션을 검색합니다.</summary>
        <returns>
          <c>HTML</c> 태그 이름이 <paramref name="tagName" />과 동일한 모든 요소가 포함된 <see cref="T:System.Windows.Forms.HtmlElementCollection" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
        <returns>현재 <see cref="T:System.Object" />의 해시 코드입니다.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ GotFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소에서 사용자 입력 포커스를 받았을 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트의 기본 동작을 취소 하거나 버블링에서 방지할 수 있습니다. 요소에서 포커스를 제거 하려면 호출 <xref:System.Windows.Forms.HtmlElement.Focus%2A> 내에서 다른 요소에는 <xref:System.Windows.Forms.HtmlElement.GotFocus> 이벤트입니다.  
  
   
  
## Examples  
 파일에 다음 HTML 코드를 저장 하 고 해당 파일을 로드 한 <xref:System.Windows.Forms.WebBrowser> Windows Forms 프로젝트에서 제어 합니다.  
  
```  
<HTML>  
    <BODY>  
        <FORM name="form1">  
            <INPUT type="text" size=20 name="text1">  
            <INPUT type="text" size=20 name="text2">  
            <INPUT type="text" size=20 name="text3">  
        </FORM>  
    </BODY>  
</HTML>  
```  
  
 다음 코드 예제에서는 다음 방지 `INPUT` 이전 요소 보다 작거나 5 개 문자를 포함 하는 경우 사용자 입력된 포커스를 받지 못하도록 탭 순서에 대 한 요소입니다. 이 예제에서는 앞에서 언급 한 HTML 파일이의 인스턴스로 로드 되는 <xref:System.Windows.Forms.WebBrowser> 라는 컨트롤 `WebBrowser1`합니다.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlElement#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Id" />
      <MemberSignature Language="VB.NET" Value="Public Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소를 식별하는 기준이 되는 레이블을 가져오거나 설정합니다.</summary>
        <value>요소에 대한 고유 식별자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.Id%2A> 달라 야 합니다. 동일한 두 개의 요소를 사용할 수 없습니다 <xref:System.Windows.Forms.HtmlElement.Id%2A> 같은 문서 내에서. 사용 하 여는 <xref:System.Windows.Forms.HtmlElement.Name%2A> 속성을 논리적으로 관련 된 요소 그룹에 동일한 식별자를 지정 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="InnerHtml">
      <MemberSignature Language="C#" Value="public string InnerHtml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerHtml" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.InnerHtml" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerHtml As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InnerHtml { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소 아래에 있는 HTML 태그를 가져오거나 설정합니다.</summary>
        <value>현재 요소의 자식 요소를 정의하는 HTML 태그입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 와 같은 기존 HTML 페이지에 새 요소를 추가 하는 방법은 여러 가지가 <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> 및 <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> 메서드. 사용 하 여 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 새 요소에 많은 특성 또는 스타일을 설정 하는 경우 새 콘텐츠를 추가 하는 가장 빠른 방법은 방식은 합니다.  
  
 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 와 다른 <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> 한다는 점에서 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 호출 하는 개체를 나타내는 HTML에 포함 되지 것입니다. 참조 <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> 이러한 두 속성의 차이 대 한 자세한 내용은 합니다.  
  
 설정 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 요소에 이전에 추가 된 모든 자식을 제거 합니다. DOM에서 요소를 검색 하 고 다음이 요소를 부모 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 에서 참조를 해당 요소는 쓸모 없게 됩니다 속성과 해당 속성 및 메서드를 호출할 때 해당 동작은 정의 되지 않습니다.  
  
 일부 요소 설정에 대 한 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 은 올바른 작업이 아닙니다. 일부 HTML 태그 등 닫는 태그가 포함 되어는 `IMG` 태그와 때문에 중첩 된 요소가 포함 될 수 없습니다. 와 같은 일부 태그는 `SCRIPT` 태그, 텍스트 콘텐츠 설정;만 포함할 수 있습니다 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 에서 오류가 발생 합니다. 두 가지 유형의 태그는 <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> 속성은 반환 `false`합니다. 그러나도 설정할 수 없습니다 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 에 `TABLE` 및 `TR` 이러한 요소에 잘못 된 HTML 할당 요소는 문서의 렌더링 손상 될 수 있습니다. 사용 하 여 <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> 또는 `insertRow` 및 `insertCell` 에서 관리 되지 않는 메서드 `IHTMLTable` 추가할 인터페이스 행과 셀을 `TABLE`합니다.  
  
 텍스트를 요소와 HTML 태그 되지 할당에 필요한 경우 사용 된 <xref:System.Windows.Forms.HtmlElement.InnerText%2A> 속성 대신 합니다.  
  
 값을 할당 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 이전에 사용 하 여 할당 된 모든 텍스트 값을 삭제 합니다 <xref:System.Windows.Forms.HtmlElement.InnerText%2A>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">이 요소에 대해 자식 요소를 만드는 작업은 허용되지 않습니다.</exception>
        <altmember cref="M:System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)" />
        <altmember cref="M:System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)" />
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerText" />
      </Docs>
    </Member>
    <Member MemberName="InnerText">
      <MemberSignature Language="C#" Value="public string InnerText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.InnerText" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InnerText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소에 할당된 텍스트를 가져오거나 설정합니다.</summary>
        <value>HTML 태그를 제외한 요소의 텍스트입니다. 요소에 자식 요소가 있으면 자식 요소에 있는 텍스트만 보존됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 요소에 할당 하려고 하면 <xref:System.Windows.Forms.HtmlElement.InnerText%2A>, 한 경우 처럼 텍스트 파일 내에서 HTML을 보는 HTML 코드는 문서에 리터럴로 표시 됩니다. HTML을 할당 하면 사용 하 여 요소는 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 속성 <xref:System.Windows.Forms.HtmlElement.InnerText%2A> HTML 태그를 제거 하는 텍스트를 모두 반환 합니다.  
  
 값을 할당 <xref:System.Windows.Forms.HtmlElement.InnerText%2A> 요소에 속하는 모든 자식 요소를 삭제 합니다.  
  
   
  
## Examples  
 다음 코드에서는 사용 하 여 새 하이퍼링크 <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>, 텍스트를 사용 하 여 링크 할당은 <xref:System.Windows.Forms.HtmlElement.InnerText%2A> 속성입니다.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlElement#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">지정된 요소에는 텍스트가 포함될 수 없습니다(예: <c>IMG</c> 요소).</exception>
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerHtml" />
      </Docs>
    </Member>
    <Member MemberName="InsertAdjacentElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement InsertAdjacentElement (System.Windows.Forms.HtmlElementInsertionOrientation orient, System.Windows.Forms.HtmlElement newElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement InsertAdjacentElement(valuetype System.Windows.Forms.HtmlElementInsertionOrientation orient, class System.Windows.Forms.HtmlElement newElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertAdjacentElement (orient As HtmlElementInsertionOrientation, newElement As HtmlElement) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ InsertAdjacentElement(System::Windows::Forms::HtmlElementInsertionOrientation orient, System::Windows::Forms::HtmlElement ^ newElement);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orient" Type="System.Windows.Forms.HtmlElementInsertionOrientation" />
        <Parameter Name="newElement" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="orient">현재 요소를 기준으로 이 요소를 삽입할 위치입니다.</param>
        <param name="newElement">삽입할 새 요소입니다.</param>
        <summary>새 요소를 DOM(문서 개체 모델)에 삽입합니다.</summary>
        <returns>방금 삽입한 <see cref="T:System.Windows.Forms.HtmlElement" />입니다. 삽입이 실패한 경우 <see langword="null" />이 반환됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 후 때까지이 메서드를 호출 하지 마십시오는 <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> 이벤트에는 <xref:System.Windows.Forms.WebBrowser> 컨트롤에서 발생 했습니다. 그 전에이 메서드를 호출 처럼 문서 로드가 완료 되지 것입니다 예외가 발생할 수 있습니다.  
  
 값이 있는지 여부를 <xref:System.Windows.Forms.HtmlElementInsertionOrientation> 유효한 요소 형식에 따라 달라 집니다. 예를 들어 <xref:System.Windows.Forms.HtmlElementInsertionOrientation.AfterBegin> 요소가 유효는 `DIV`, 하지만 하지는 `SCRIPT` 또는 `IMG` 요소, 자식 요소를 포함할 수 있으며 둘 다 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 삽입 된 `DIV` ADatum.com 서버 외부에서 볼 수 있는 모든 페이지의 맨 위에 있는 요소입니다. 이 예제에서는 폼에는 <xref:System.Windows.Forms.WebBrowser> 라는 컨트롤 `WebBrowser1`합니다. 샘플 네임 스페이스를 가져와야도 <xref:System.Text.RegularExpressions>합니다.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlElement#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>현재 요소에 고유한 메서드를 실행합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string methodName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeMember(string methodName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.InvokeMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeMember (methodName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ methodName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="methodName">호출할 속성이나 메서드의 이름입니다.</param>
        <summary>이 요소의 내부 DOM 요소에 대해 노출되지 않은 메서드를 실행합니다.</summary>
        <returns>이 메서드에서 반환된 요소이며 <see cref="T:System.Object" />로 표시됩니다. <see cref="T:System.Object" />가 다른 HTML 요소이고 관리되지 않는 MSHTML 라이브러리의 참조를 프로젝트에 추가한 경우 이 요소를 관리되지 않는 해당 인터페이스로 캐스팅할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 DOM 문서 개체 모델 ()가 없는 해당 하는 관리 코드에서 메서드를 호출 하이 메서드를 사용할 수 있습니다. 이 버전의를 사용 하 여 <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> 인수를 사용 하는 노출 되지 않은 메서드를 실행할 수 있습니다. 예제를 보려면 <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string methodName, params object[] parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeMember(string methodName, object[] parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeMember (methodName As String, ParamArray parameter As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ methodName, ... cli::array &lt;System::Object ^&gt; ^ parameter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameter" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="methodName">호출할 속성이나 메서드의 이름입니다.</param>
        <param name="parameter">전달할 매개 변수 목록입니다.</param>
        <summary>스크립트 언어로 현재 HTML 페이지에 정의된 함수를 실행합니다.</summary>
        <returns>함수에서 반환한 요소이며, <see cref="T:System.Object" />로 표시됩니다. <see cref="T:System.Object" />가 다른 HTML 요소이고 관리되지 않는 MSHTML 라이브러리의 참조를 프로젝트에 추가한 경우 이 요소를 관리되지 않는 해당 인터페이스로 캐스팅할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 DOM 문서 개체 모델 ()가 없는 해당 하는 관리 코드에서 메서드를 호출 하이 메서드를 사용할 수 있습니다. 모든 인수에 제공 된 <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> Win32로 변환 됩니다 `VARIANT` 명명 된 스크립팅 함수에 전달 하기 전에 데이터 형식입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 `TABLE` 호출 `dataTable` 노출 되지 않은 사용 하 여 `moveRow` 메서드를 처음으로 테이블의 끝에서 한 행을 이동 합니다.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.HtmlElement#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ KeyDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 키보드의 키를 누를 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.KeyDown> 앞에 오는 <xref:System.Windows.Forms.HtmlElement.KeyPress>, 결과적으로 발생 하기 전에 <xref:System.Windows.Forms.HtmlElement.KeyUp>합니다.  
  
 에 대 한 기본 동작을 취소할 수는 <xref:System.Windows.Forms.HtmlElement.KeyDown> 설정 하 여 요소에는 이벤트는 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
 A <xref:System.Windows.Forms.HtmlElement.KeyDown> 요소에는 이벤트는 해당 요소의 부모 요소와에 발생할는 <xref:System.Windows.Forms.HtmlDocument> 설정 하지 않으면 클래스 자체는 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> 의 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.KeyDown> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.KeyDown> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#442](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#442)]
 [!code-vb[System.Windows.Forms.EventExamples#442](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#442)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyPress">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler KeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler KeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.KeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyPress As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ KeyPress;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 키보드의 키를 눌렀다가 놓을 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.KeyPress> 뒤에 오는 <xref:System.Windows.Forms.HtmlElement.KeyDown> 하기 전에 <xref:System.Windows.Forms.HtmlElement.KeyUp>합니다.  
  
 에 대 한 기본 동작을 취소할 수는 <xref:System.Windows.Forms.HtmlElement.KeyPress> 설정 하 여 요소에는 이벤트는 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
 A <xref:System.Windows.Forms.HtmlElement.KeyPress> 요소에는 이벤트는 해당 요소의 부모 요소와에 발생할는 <xref:System.Windows.Forms.HtmlDocument> 설정 하지 않으면 클래스 자체는 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> 의 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.KeyPress> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.KeyPress> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#443](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#443)]
 [!code-vb[System.Windows.Forms.EventExamples#443](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#443)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ KeyUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 키보드의 키를 놓을 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.KeyUp> 뒤에 오는 <xref:System.Windows.Forms.HtmlElement.KeyPress>, 후 발생 하 <xref:System.Windows.Forms.HtmlElement.KeyDown>합니다.  
  
 이 이벤트를 취소할 수 없습니다.  
  
 A <xref:System.Windows.Forms.HtmlElement.KeyUp> 요소에는 이벤트는 해당 요소의 부모 요소와에 발생할는 <xref:System.Windows.Forms.HtmlDocument> 설정 하지 않으면 클래스 자체는 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> 의 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.KeyUp> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.KeyUp> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#444](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#444)]
 [!code-vb[System.Windows.Forms.EventExamples#444](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#444)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LosingFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LosingFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.LosingFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LosingFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LosingFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소에서 사용자 입력 포커스를 잃을 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.LosingFocus> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.LosingFocus> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#440](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#440)]
 [!code-vb[System.Windows.Forms.EventExamples#440](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#440)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LostFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소에서 사용자 입력 포커스를 잃었을 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요소 키 입력 이벤트 후에 더 이상 받지 것입니다 <xref:System.Windows.Forms.HtmlElement.LostFocus> 지정 포커스 다시 페이지에서 선택 하는 사용자 또는 응용 프로그램 호출 될 때까지 발생는 <xref:System.Windows.Forms.HtmlElement.Focus%2A> 해당 요소에 대해 메서드.  
  
 이 이벤트를 취소할 수 없습니다.  
  
 <xref:System.Windows.Forms.HtmlElement.LostFocus> 요소에는 이벤트는 해당 요소의 부모 및에 발생할는 <xref:System.Windows.Forms.HtmlDocument> 설정 하지 않으면 클래스 자체는 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> 의 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.LostFocus> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.LostFocus> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#441](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#441)]
 [!code-vb[System.Windows.Forms.EventExamples#441](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#441)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 마우스 단추를 누를 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 동작을 취소할 수는 <xref:System.Windows.Forms.HtmlElement.MouseDown> 설정 하 여 요소에는 이벤트는 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
 A <xref:System.Windows.Forms.HtmlElement.MouseDown> 요소에는 이벤트는 해당 요소의 부모 요소와에 발생할는 <xref:System.Windows.Forms.HtmlDocument> 설정 하지 않으면 클래스 자체는 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> 의 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.MouseDown> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.MouseDown> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#446](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#446)]
 [!code-vb[System.Windows.Forms.EventExamples#446](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#446)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 커서가 현재 요소 위를 처음 이동할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.MouseEnter> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.MouseEnter> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#449](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#449)]
 [!code-vb[System.Windows.Forms.EventExamples#449](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#449)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 커서가 현재 요소를 벗어나 이동할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.MouseLeave> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.MouseLeave> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#450](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#450)]
 [!code-vb[System.Windows.Forms.EventExamples#450](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#450)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 커서가 요소에서 이동할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트를 취소할 수 없습니다.  
  
 A <xref:System.Windows.Forms.HtmlElement.MouseMove> 요소에는 이벤트는 해당 요소의 부모 요소와에 발생할는 <xref:System.Windows.Forms.HtmlDocument> 설정 하지 않으면 클래스 자체는 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> 의 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.MouseMove> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.MouseMove> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#445](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#445)]
 [!code-vb[System.Windows.Forms.EventExamples#445](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#445)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseOver As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 커서가 요소의 경계 내로 들어올 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 동작을 취소할 수는 <xref:System.Windows.Forms.HtmlElement.MouseOver> 설정 하 여 요소에는 이벤트는 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
 A <xref:System.Windows.Forms.HtmlElement.MouseOver> 요소에는 이벤트는 해당 요소의 부모 요소와에 발생할는 <xref:System.Windows.Forms.HtmlDocument> 설정 하지 않으면 클래스 자체는 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> 의 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.MouseOver> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.MouseOver> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#447](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#447)]
 [!code-vb[System.Windows.Forms.EventExamples#447](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#447)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 마우스 단추를 놓을 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 동작을 취소할 수는 <xref:System.Windows.Forms.HtmlElement.MouseUp> 설정 하 여 요소에는 이벤트는 <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
 A <xref:System.Windows.Forms.HtmlElement.MouseUp> 요소에는 이벤트는 해당 요소의 부모 요소와에 발생할는 <xref:System.Windows.Forms.HtmlDocument> 설정 하지 않으면 클래스 자체는 <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> 의 속성은 <xref:System.Windows.Forms.HtmlElementEventArgs> 클래스를 `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.HtmlElement.MouseUp> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.HtmlElement> 라는 `HtmlElement1`합니다. 그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.HtmlElement.MouseUp> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#448](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#448)]
 [!code-vb[System.Windows.Forms.EventExamples#448](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#448)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소의 이름을 가져오거나 설정합니다.</summary>
        <value>요소의 이름을 나타내는 <see cref="T:System.String" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Windows.Forms.HtmlElement.Name%2A> 속성을 사용 하 여 문서에서 요소를 검색할는 <xref:System.Windows.Forms.HtmlElementCollection.GetElementsByName%2A> 에서 메서드는 <xref:System.Windows.Forms.HtmlElement.All%2A> 속성 <xref:System.Windows.Forms.HtmlDocument>합니다.  
  
 에 적용 될 때 `INPUT` 요소 <xref:System.Windows.Forms.HtmlElement.Name%2A> 형태의 서버에 전송 될 때 해당 요소의 데이터에 대 한 변수 이름을 정의 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSibling">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement NextSibling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement NextSibling" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.NextSibling" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextSibling As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ NextSibling { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문서 트리에서 이 요소와 같은 수준에 있는 다음 요소를 가져옵니다.</summary>
        <value>현재 요소의 오른쪽에 있는 요소를 나타내는 <see cref="T:System.Windows.Forms.HtmlElement" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 <xref:System.Windows.Forms.HtmlElement.NextSibling%2A> 함께에서 <xref:System.Windows.Forms.HtmlElement.FirstChild%2A> HTML 요소에 대 한 문서 트리를 탐색 하 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OffsetParent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement OffsetParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement OffsetParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OffsetParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OffsetParent As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ OffsetParent { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />이 계산된 요소를 가져옵니다.</summary>
        <value>오프셋이 계산된 요소입니다.  요소의 계층에 있는 요소의 부모 또는 다른 요소가 상대 또는 절대 위치를 사용하는 경우 <see langword="OffsetParent" />는 현재 요소가 중첩된 첫 번째 상대 위치 또는 절대 위치에 배치된 요소가 됩니다. 현재 요소 위에 요소는 절대적 또는 상대적으로 배치 되 면, <see langword="OffsetParent" /> 됩니다는 <c>본문</c> 문서 태그입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요소는 다음 세 가지 방법 중 하나에서 HTML 페이지에 배치 될 수 있습니다: 기본 흐름 위치; 상대 위치 일정량; 부모에 상대적인 오프셋 되는 요소에 및 절대 위치는 요소가 지정 되는 고정 문서의 왼쪽 위 모퉁이 기준으로 위치를 조정 합니다.  
  
 문서 요소가 상대 또는 절대 위치를 사용 하는 경우 사용할 수 있습니다 `OffsetParent` 클라이언트 영역 내에서 요소의 좌표 위치를 계산 하 합니다.  
  
 요소에 대 한 자세한 내용은 참조 HTML의 위치 지정 [요소 위치 지정에 대 한](http://msdn.microsoft.com/library/ms533005.aspx)합니다.  
  
   
  
## Examples  
 다음 코드 예제와 방법을 <xref:System.Windows.Forms.HtmlElement.OffsetParent%2A> 및 <xref:System.Windows.Forms.HtmlElement.OffsetRectangle%2A> 마다 다르지만 `span1`, `span2` 및 `span3`:  
  
```  
<HTML>  
    <BODY id="documentBody">  
  
        <DIV id="div1">  
            <SPAN id="span1">Placeholder text 1.</SPAN>  
        </DIV>  
  
        <DIV id="div2" style="position:relative;top:100px;left:100px;">  
            <SPAN id="span2">Placeholder text 2.</SPAN>  
        </DIV>  
  
        <DIV id="div3" style="position:absolute;top:200px;left:200px;">  
            <DIV id="div4" style="position:relative;top:100px;left:100px;">  
                <SPAN id="span3">Placeholder text 3.</SPAN>  
            </DIV>  
        </DIV>  
  
    </BODY>  
</HTML>  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlElement#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OffsetRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle OffsetRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle OffsetRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OffsetRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle OffsetRectangle { System::Drawing::Rectangle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>부모 요소를 기준으로 요소의 위치를 가져옵니다.</summary>
        <value>부모 요소를 기준으로 한 요소의 X 좌표 및 Y 좌표 위치와 요소의 너비 및 높이입니다.  요소의 부모가 상대 위치 또는 절대 위치에 배치된 경우 <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />은 부모 요소의 오프셋을 반환합니다. 요소 자체가 부모 요소를 기준으로 상대 위치에 배치된 경우 <see cref="P:System.Windows.Forms.HtmlElement.OffsetRectangle" />은 부모 요소의 오프셋을 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요소는 다음 세 가지 방법 중 하나에서 HTML 페이지에 배치 될 수 있습니다.  
  
-   기본 흐름 위치입니다.  
  
-   상대 위치 일정량 부모에 상대적인 오프셋 되는 요소에 있습니다.  
  
-   절대 위치는 요소가 지정 되는 고정 문서의 왼쪽 위 모퉁이 기준으로 위치를 조정 합니다.  
  
 요소에 대 한 자세한 내용은 참조 HTML의 위치 지정 [요소 위치 지정에 대 한](http://msdn.microsoft.com/library/ms533005.aspx)합니다.  
  
   
  
## Examples  
 다음 코드 예제와 방법을 <xref:System.Windows.Forms.HtmlElement.OffsetParent%2A> 및 <xref:System.Windows.Forms.HtmlElement.OffsetRectangle%2A> 마다 다르지만 `span1`, `span2` 및 `span3`:  
  
```  
<HTML>  
    <BODY id="documentBody">  
  
        <DIV id="div1">  
            <SPAN id="span1">Placeholder text 1.</SPAN>  
        </DIV>  
  
        <DIV id="div2" style="position:relative;top:100px;left:100px;">  
            <SPAN id="span2">Placeholder text 2.</SPAN>  
        </DIV>  
  
        <DIV id="div3" style="position:absolute;top:200px;left:200px;">  
            <DIV id="div4" style="position:relative;top:100px;left:100px;">  
                <SPAN id="span3">Placeholder text 3.</SPAN>  
            </DIV>  
        </DIV>  
  
    </BODY>  
</HTML>  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlElement#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.OffsetParent" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlElement left, class System.Windows.Forms.HtmlElement right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlElement, right As HtmlElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlElement ^ left, System::Windows::Forms::HtmlElement ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlElement" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="left">첫 번째 <see cref="T:System.Windows.Forms.HtmlElement" />입니다.</param>
        <param name="right">두 번째 <see cref="T:System.Windows.Forms.HtmlElement" />입니다.</param>
        <summary>두 요소가 같은지 비교합니다.</summary>
        <returns>두 매개 변수가 모두 <see langword="null" />이거나 두 요소 모두에 같은 내부 COM 인터페이스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 같음 연산자 테스트는 `IUnknown` 제공 된로 래핑된 내부 COM 개체의 포인터 <xref:System.Windows.Forms.HtmlElement> 클래스입니다.  
  
 이 연산자는 해당 하는 방법은 <xref:System.Windows.Forms.HtmlElement.Equals%2A?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlElement left, class System.Windows.Forms.HtmlElement right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlElement, right As HtmlElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlElement ^ left, System::Windows::Forms::HtmlElement ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlElement" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlElement" />
      </Parameters>
      <Docs>
        <param name="left">첫 번째 <see cref="T:System.Windows.Forms.HtmlElement" />입니다.</param>
        <param name="right">두 번째 <see cref="T:System.Windows.Forms.HtmlElement" />입니다.</param>
        <summary>두 <see cref="T:System.Windows.Forms.HtmlElement" /> 개체가 다른지 비교합니다.</summary>
        <returns>한 요소만 <see langword="null" />이거나 두 개체가 같지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[이 연산자에 대해 해당 하는 방법은의 부정 <xref:System.Windows.Forms.HtmlElement.Equals%2A?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OuterHtml">
      <MemberSignature Language="C#" Value="public string OuterHtml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OuterHtml" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OuterHtml" />
      <MemberSignature Language="VB.NET" Value="Public Property OuterHtml As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OuterHtml { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 요소의 HTML 코드를 가져오거나 설정합니다.</summary>
        <value>현재 요소 및 자식 요소의 HTML 코드입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반면 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 현재 요소의 주변 태그를 제외 하 고 현재 요소에 포함 된 모든 HTML을 반환 합니다 <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> 태그가 포함 된 HTML 뿐만 아니라 현재 요소의 태그 포함 되어 있습니다.  
  
 `<HTML>`  
  
 `<BODY>`  
  
 `<DIV id="div1">`  
  
 `Hello`  
  
 `<DIV id="div2">`  
  
 `World`  
  
 `<DIV id="div3">`  
  
 `How are you?`  
  
 `</DIV>`  
  
 `</DIV>`  
  
 `</DIV>`  
  
 `</BODY>`  
  
 `</HTML>`  
  
 이 예제에서는 호출 <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> 에 `div2` 반환 합니다.  
  
 `<DIV id="div2">`  
  
 `World`  
  
 `<DIV id="div3">`  
  
 `How are you?`  
  
 `</DIV>`  
  
 `</DIV>`  
  
 호출 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 반환 합니다.  
  
 `World`  
  
 `<DIV id="div3">`  
  
 `How are you?`  
  
 `</DIV>`  
  
 새 값을 할당 하는 경우 <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>, 현재 요소 참조는 유효 하지 않게 됩니다; 이름을 반영 되지 것입니다, 속성 및 자식 콘텐츠를 html 할당 했습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerHtml" />
      </Docs>
    </Member>
    <Member MemberName="OuterText">
      <MemberSignature Language="C#" Value="public string OuterText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OuterText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.OuterText" />
      <MemberSignature Language="VB.NET" Value="Public Property OuterText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OuterText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 요소의 텍스트를 가져오거나 설정합니다.</summary>
        <value>현재 요소와 자식 요소에 들어 있는 텍스트입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 요소에 할당 하려고 하면 <xref:System.Windows.Forms.HtmlElement.OuterText%2A>, 한 경우 처럼 텍스트 파일 내에서 HTML을 보는 HTML 코드는 문서에 리터럴로 표시 됩니다. HTML을 할당 하면 사용 하 여 요소는 <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> 속성 <xref:System.Windows.Forms.HtmlElement.OuterText%2A> HTML 태그를 제거 하는 텍스트를 모두 반환 합니다.  
  
 값을 할당 <xref:System.Windows.Forms.HtmlElement.OuterText%2A> 요소에 속하는 모든 자식 요소를 삭제 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">이 요소 외부에서 텍스트를 설정할 수 없습니다.</exception>
        <altmember cref="P:System.Windows.Forms.HtmlElement.InnerText" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ Parent { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 요소의 부모 요소를 가져옵니다.</summary>
        <value>HTML 문서의 계층에서 현재 요소의 위에 있는 요소입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.Parent%2A> 속성 요소의 컨텍스트를 검색할 수 있도록 합니다. 가장 유용 이벤트 처리기 내에서 같은 <xref:System.Windows.Forms.HtmlElement.Click>, 문서의 개체 계층 구조에 있는 모든 요소에 대해 발생할 수 있는 합니다.  
  
 <xref:System.Windows.Forms.HtmlElement.Parent%2A> 의 HTML 요소 (HTML 문서의 최상위) 속성 자신에 게 다시 가리킵니다. 호출 하는 경우 <xref:System.Windows.Forms.HtmlElement.Parent%2A> 루프 내부 루프의 중단 조건 비교의 형식과 현재 요소의 형식이 있는지 확인은 `Parent` 코드 속성, 그렇지 않으면 무한 루프가 실행 될 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 모두 찾습니다는 `IMG` 문서에서 태그를 삽입 하 고 사용 하 여는 <xref:System.Windows.Forms.HtmlElement.Parent%2A> 속성을 테스트 여부는 `IMG` 다른 페이지에 대 한 하이퍼링크는 코드에 URL 할당 인 경우는 `ALT` 는 의특성`IMG`있도록에 태그, 사용자가 위치에 걸립니다 표시 하려면 이미지 위에 마우스를 놓습니다.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlElement#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (string eventName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RaiseEvent(string eventName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.RaiseEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (eventName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseEvent(System::String ^ eventName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventName">발생할 이벤트의 이름입니다.</param>
        <summary>명명된 이벤트에서 등록된 이벤트 처리기를 모두 호출하게 됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 HTML 문서 개체 모델 (DOM) 이벤트에 액세스 하는 합니다. 직접 호출 된 [IHTMLElement3::fireEvent](http://go.microsoft.com/fwlink/?LinkId=103189) 메서드. 통해 DOM을 사용 하는 방법에 대 한 자세한 내용은 <xref:System.Windows.Forms.HtmlElement> 클래스를 참조 하십시오. [관리 되는 HTML 문서 개체 모델에서 노출 되지 않은 멤버에 액세스](~/docs/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model.md)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.RemoveFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFocus();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 요소에 포커스가 있으면 현재 요소에서 포커스를 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드 호출의 <xref:System.Windows.Forms.HtmlElement.LostFocus> 요소에 대 한 이벤트입니다.  
  
 이 메서드를 사용 하 여 요소에서 포커스를 지우면 하지를 탭 순서의 다음 요소로 요소를 포함 하는 문서에 제공 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (bool alignWithTop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollIntoView(bool alignWithTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollIntoView (alignWithTop As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollIntoView(bool alignWithTop);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignWithTop" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="alignWithTop">
          <see langword="true" />이면 개체의 위쪽이 창의 위쪽에 표시됩니다. <see langword="false" />이면 개체의 아래쪽이 창의 아래쪽에 표시됩니다.</param>
        <summary>이 요소의 위쪽 또는 아래쪽 가장자리가 문서 창과 맞춰질 때까지 이 요소가 들어 있는 문서를 스크롤합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는 이름으로는 요소를 찾아 선택한 페이지 요소의 맨 위에 표시 되는 페이지 맨 아래에 정렬 되도록입니다.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#12)]
 [!code-vb[System.Windows.Forms.HtmlElement#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollLeft">
      <MemberSignature Language="C#" Value="public int ScrollLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScrollLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ScrollLeft" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ScrollLeft { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소의 가장자리와 요소 내용의 왼쪽 가장자리 사이의 거리를 가져오거나 설정합니다.</summary>
        <value>요소의 왼쪽 가장자리와 요소 내용의 왼쪽 가장자리 사이의 거리(픽셀)입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 전체 크기 스크롤 영역에는 사용할 수 있는 사용 하 여 <xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>; `ScrollLeft` 및 <xref:System.Windows.Forms.HtmlElement.ScrollTop%2A> 노출 됩니다 하지 독립적으로 이러한은 개발자가 설정할 수 있는 스크롤 영역의 두 개의 속성이 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ScrollRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ScrollRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ScrollRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScrollRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ScrollRectangle { System::Drawing::Rectangle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소의 스크롤 가능한 영역의 크기를 가져옵니다.</summary>
        <value>요소의 스크롤 가능한 영역의 크기 및 좌표 위치입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요소는 요소에 대해 오버플로 스타일 렌더링 스크롤 막대를 금지 하지 않는 한 해당 차원의 크기를 초과 스크롤 가능한 영역을 포함할 합니다.  
  
 를 직접 스크롤 영역 크기를 수정할 수는 없지만 요소의 가장자리와 스크롤 영역 가장자리 사이의 거리를 수정할 수 있습니다. 사용 하 여는 <xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A> 및 <xref:System.Windows.Forms.HtmlElement.ScrollTop%2A> 이 작업을 수행할 속성입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollTop">
      <MemberSignature Language="C#" Value="public int ScrollTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScrollTop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.ScrollTop" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ScrollTop { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소의 가장자리와 요소 내용의 위쪽 가장자리 사이의 거리를 가져오거나 설정합니다.</summary>
        <value>요소의 위쪽 가장자리와 요소 내용의 위쪽 가장자리 사이의 거리(픽셀)입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 전체 크기 스크롤 영역에는 사용할 수 있는 사용 하 여 <xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>; <xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A> 및 `ScrollTop` 노출 됩니다 하지 독립적으로 이러한은 개발자가 설정할 수 있는 스크롤 영역의 두 개의 속성이 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttribute">
      <MemberSignature Language="C#" Value="public void SetAttribute (string attributeName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAttribute(string attributeName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttribute (attributeName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAttribute(System::String ^ attributeName, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">설정할 특성의 이름입니다.</param>
        <param name="value">이 특성의 새 값입니다.</param>
        <summary>요소에서 명명된 특성의 값을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Html에서 특성에 해당 요소에 대 한 올바른 이름-값 쌍입니다. <xref:System.Windows.Forms.HtmlElement> 특정 유형의 요소에만 적용 되는 모든 요소에 공통 되는 특성에만 노출 `SRC` 에 대 한 미리 정의 된 특성이 `IMG` 예를 들어 태그에 대 한는 `DIV` 태그입니다. 사용 하 여 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 및 <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> 에 관리 되는 DOM 문서 개체 모델 ()를 노출 되지 않은 특성을 조작할 수 있습니다.  
  
 경우 `attributeName` 요소에 정의 된 특성이 아니므로 <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> 새로운 특성으로 요소에 정의 합니다.  
  
 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 및 <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> 대/소문자 구분 합니다.  
  
 설정 하는 `class` 특성에 <xref:System.Windows.Forms.HtmlElement> , 특성으로 참조 해야 `className` 첫 번째 인수를 지정 하는 경우 <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>  
  
   
  
## Examples  
 다음 코드 예제에서는 새 `IMG` 요소를 현재 문서에 사용 하 여 <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> 설정 하 여 `SRC` 이미지에 대 한 특성입니다.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlElement#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public string Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Style { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 요소에 대한 세미콜론으로 구분된 스타일 목록을 가져오거나 설정합니다.</summary>
        <value>요소의 모든 스타일로 구성된 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 문서 개체 모델 (DOM)를 사용 하 여 스타일 World Wide Web 협회 연계 스타일 시트 사양에 정의 된 대로 요소의 표시를 제어 합니다. 스타일을 <xref:System.Windows.Forms.HtmlElement.Style%2A> 속성 콜론으로 구분 된 이름-값 쌍을 다음과 같이 세미콜론으로 구분 하는 각 쌍의 형태로 사용 합니다.  
  
 `style-name1:value1;...;[style-nameN:valueN;]`  
  
 에 대 한 글꼴을 설정 하는 `DIV` 14pt 바탕으로 굵게 표시 된 요소, 예를 들어 할당할 때 다음과 같은 문자열:  
  
 `font-face:Times New Roman;font-size:14px;font-weight:bold;`  
  
 HTML DOM에서 모든 사용 가능한 스타일의 전체 목록을 참조 하십시오. [스타일 특성](http://msdn.microsoft.com/library/ms534651.aspx)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public short TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 TabIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.TabIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TabIndex As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short TabIndex { short get(); void set(short value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>탭 순서에서 이 요소의 위치를 가져오거나 설정합니다.</summary>
        <value>탭 순서에 있는 요소의 숫자 인덱스입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlElement.TabIndex%2A> HTML 문서에서 요소는 TAB 키를 누를 때 포커스를 받을 다음 결정 합니다. 탭 순서에 포함 된 요소만 기본적으로 `INPUT` 요소는 `SELECT` 제어 및 모든 요소를 `contentEditable` 속성이로 설정 되어 `true`합니다. 탭 순서에서 같은 HTML 요소를 포함할 수는 `DIV`를 명시적으로 할당 하 여 <xref:System.Windows.Forms.HtmlElement.TabIndex%2A>합니다.  
  
 유효한 값에 대 한 <xref:System.Windows.Forms.HtmlElement.TabIndex%2A> 32767에서 32767 까지입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="public string TagName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlElement.TagName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TagName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTML 태그의 이름을 가져옵니다.</summary>
        <value>HTML 태그를 사용하여 이 요소를 만드는 데 사용되는 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 문서 개체 모델의 많은 요소에는 특성, 속성 및 해당 요소에 고유한 메서드 와 같은 `HREF` 특성에 `A` 요소 또는 `Submit` 메서드를 `FORM`합니다. 사용 하 여 <xref:System.Windows.Forms.HtmlElement.TagName%2A> 잠재적으로 임의 형식의 요소가 있어야 하 고 형식 관련 작업을 수행 해야 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 모두 찾습니다는 `IMG` 문서에서 태그를 삽입 하 고 사용 하 여는 `TagName` 속성을 테스트 여부는 `IMG` 다른 페이지에 대 한 하이퍼링크는 코드에 URL 할당 인 경우는 `ALT` 는 의특성`IMG`있도록에 태그, 사용자가 위치에 걸립니다 표시 하려면 이미지 위에 마우스를 놓습니다.  
  
 [!code-csharp[System.Windows.Forms.HtmlElement#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlElement#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlElement/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.GetElementsByTagName(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>