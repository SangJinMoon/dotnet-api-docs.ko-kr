<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ControlStyles.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5cc33f394b9675cc633b116b6039a1f3d0d639c2f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc33f394b9675cc633b116b6039a1f3d0d639c2f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.ControlStyles">
          <source>Specifies the style and behavior of a control.</source>
          <target state="translated">컨트롤의 스타일 및 동작을 지정합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>Controls use this enumeration in various properties and methods to specify functionality.</source>
          <target state="translated">컨트롤이이 열거형에 다양 한 속성과 메서드를 사용 하 여 기능을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>A control can enable a style by calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph> method and passing in the appropriate <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> bit (or bits) and the Boolean value to set the bit(s) to.</source>
          <target state="translated">컨트롤을 호출 하 여 스타일을 사용 하도록 설정할 수는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph> 메서드와 적절 한 전달 <ph id="ph2">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> 비트 (또는 비트) 및 비트가 설정 되도록는 부울 값입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>For example, the following line of Visual Basic code would enable double-buffering.</source>
          <target state="translated">예를 들어 Visual Basic 코드의 다음 줄은 이중 버퍼링을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>If the AllPaintingInWmPaint bit is set to <ph id="ph1">`true`</ph>, the window message WM_ERASEBKGND is ignored, and both <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> methods are called directly from the window message WM_PAINT.</source>
          <target state="translated">AllPaintingInWmPaint 비트가 설정 되 면 <ph id="ph1">`true`</ph>, WM_ERASEBKGND 무시 되는 창 메시지 및 둘 다 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> WM_PAINT 창 메시지에서 직접 호출 되어 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>This generally reduces flicker unless other controls send the window message WM_ERASEBKGND to the control.</source>
          <target state="translated">이 일반적으로 다른 컨트롤 컨트롤에 WM_ERASEBKGND 창 메시지를 전송 하지 않는 한 깜박임을 줄입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>You might send the window message WM_ERASEBKGRND to achieve a pseudo-transparent effect similar to SupportsTransparentBackColor; for example, a <ph id="ph1">&lt;xref:System.Windows.Forms.ToolBar&gt;</ph> with flat appearance does this.</source>
          <target state="translated">창 메시지 WM_ERASEBKGRND SupportsTransparentBackColor; 비슷합니다 의사 (pseudo) 투명 효과 얻을를 보낼 수 있습니다. 예를 들어 한 <ph id="ph1">&lt;xref:System.Windows.Forms.ToolBar&gt;</ph> 평면 모양으로이 작업을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>To fully enable double-buffering, you can set the OptimizedDoubleBuffer and AllPaintingInWmPaint bits to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">이중 버퍼링을 완전히 사용 하려면 OptimizedDoubleBuffer 및 AllPaintingInWmPaint 비트를 설정할 수 있습니다 <ph id="ph1">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>However the preferred method for enabling double buffering, which yields the same result, is to set the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleBuffered%2A&gt;</ph> property for the control to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">그러나는 이중 버퍼링을 사용 하도록 설정 하는 것에 대 한 동일한 결과 생성 하는 설정의 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.DoubleBuffered%2A&gt;</ph> 속성을 컨트롤에 대 한 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>If the SupportsTransparentBackColor bit is set to <ph id="ph1">`true`</ph>, and the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> is set to a color whose alpha component is less than 255, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> will simulate transparency by asking its parent control to paint the background.</source>
          <target state="translated">SupportsTransparentBackColor 비트가 설정 되 면 <ph id="ph1">`true`</ph>, 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> 알파 구성 요소가 255 보다 작은 색으로 설정 되어 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.OnPaintBackground%2A&gt;</ph> 배경을 칠하는 데 부모 컨트롤을 요청 하 여 투명도 시뮬레이트합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>This is not true transparency.</source>
          <target state="translated">이것은 진정한 투명성 아닙니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>If there is another control between the control and its parent, the current control will not show the control in the middle.</source>
          <target state="translated">다른 컨트롤이 컨트롤 및 해당 부모 간의 없으면 현재 컨트롤은 컨트롤이 중간에 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>When the UserMouse bit is set to <ph id="ph1">`true`</ph>, the following methods are still called: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnMouseDown%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.OnMouseUp%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.OnMouseEnter%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.OnMouseMove%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.OnMouseHover%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.OnMouseLeave%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph8">&lt;xref:System.Windows.Forms.Control.OnMouseWheel%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">UserMouse 비트로 설정 되 면 <ph id="ph1">`true`</ph>, 다음 메서드는 계속 호출: <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnMouseDown%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.Control.OnMouseUp%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.Control.OnMouseEnter%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.Control.OnMouseMove%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Forms.Control.OnMouseHover%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Forms.Control.OnMouseLeave%2A?displayProperty=nameWithType&gt;</ph>, 및 <ph id="ph8">&lt;xref:System.Windows.Forms.Control.OnMouseWheel%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>When the control is clicked, if the StandardClick bit is set to <ph id="ph1">`true`</ph> the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnClick%2A?displayProperty=nameWithType&gt;</ph> method is called and it raises the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Click?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">컨트롤을 클릭 하십시오 시키려면 비트가 설정 되 면 때 <ph id="ph1">`true`</ph> 는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnClick%2A?displayProperty=nameWithType&gt;</ph> 메서드가 호출 되 고 발생는 <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Click?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>When the control is double-clicked, and both the StandardClick and StandardDoubleClick bits are set to <ph id="ph1">`true`</ph>, the click is passed on to the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> event.</source>
          <target state="translated">컨트롤을 두 번 클릭 하 고 시키려면와 StandardDoubleClick 상위 비트가 설정 되 있을 때 <ph id="ph1">`true`</ph>, 클릭으로 전달 됩니다는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDoubleClick%2A?displayProperty=nameWithType&gt;</ph> method is called and it raises the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DoubleClick?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnDoubleClick%2A?displayProperty=nameWithType&gt;</ph> 메서드가 호출 되 고 발생는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DoubleClick?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>However, the control can call <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnClick%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnDoubleClick%2A&gt;</ph> directly regardless of the StandardClick and StandardDoubleClick bit values.</source>
          <target state="translated">그러나 컨트롤을 호출할 수 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnClick%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.OnDoubleClick%2A&gt;</ph> 직접 시키려면 및 StandardDoubleClick에 관계 없이 비트 값입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>For more information on control click and double click behaviors, see the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DoubleClick?displayProperty=nameWithType&gt;</ph> topics.</source>
          <target state="translated">컨트롤에 대 한 자세한 내용은 클릭 하 고 두 번 클릭 동작, 참조는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.DoubleClick?displayProperty=nameWithType&gt;</ph> 항목입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>When the UseTextForAccessibility bit is set and there is a value in the control's <ph id="ph1">`Text`</ph> property, the value of that control's <ph id="ph2">`Text`</ph> property determines the control's default Active Accessibility name and shortcut key.</source>
          <target state="translated">UseTextForAccessibility 비트가 설정 되 고 컨트롤의 값이 있는지 시점과 <ph id="ph1">`Text`</ph> 속성, 값이 해당 컨트롤의 <ph id="ph2">`Text`</ph> 속성 컨트롤의 기본 Active Accessibility 이름 및 바로 가기 키를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>Otherwise, the text of the preceding <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> control will be used instead.</source>
          <target state="translated">그렇지 않으면 이전 텍스트 <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> 컨트롤을 대신 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>This style is set by default.</source>
          <target state="translated">이 스타일은 기본적으로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>Certain built-in control types, such as <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>, reset this style so that the <ph id="ph3">`Text`</ph> property of those controls will not be used by Active Accessibility.</source>
          <target state="translated">와 같은 특정 기본 제공 컨트롤 형식 <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>,이 스타일을 다시 설정 하는 <ph id="ph3">`Text`</ph> Active Accessibility 하 여 해당 컨트롤의 속성이 사용 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>The following example demonstrates a use of <ph id="ph1">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> with the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.StyleChanged&gt;</ph> event.</source>
          <target state="translated">다음 예제에서는 사용 하는 <ph id="ph1">&lt;xref:System.Windows.Forms.ControlStyles&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.StyleChanged&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.ControlStyles">
          <source>Inheriting from a standard Windows Forms control and changing the <ph id="ph1">&lt;see cref="F:System.Windows.Forms.ControlStyles.StandardClick" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Windows.Forms.ControlStyles.StandardDoubleClick" /&gt;</ph> bit values to <ph id="ph3">&lt;see langword="true" /&gt;</ph> can cause unexpected behavior or can have no effect at all if the control does not support the <ph id="ph4">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> or <ph id="ph5">&lt;see cref="E:System.Windows.Forms.Control.DoubleClick" /&gt;</ph> events.</source>
          <target state="translated">표준 Windows Forms 컨트롤에서 상속 하 고 변경 된 <ph id="ph1">&lt;see cref="F:System.Windows.Forms.ControlStyles.StandardClick" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="F:System.Windows.Forms.ControlStyles.StandardDoubleClick" /&gt;</ph> 비트 값을 <ph id="ph3">&lt;see langword="true" /&gt;</ph> 예기치 않은 동작이 발생할 수 있습니다 또는 수 효과가 없습니다. 모든 컨트롤을 지원 하지 않는 경우는 <ph id="ph4">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> 또는 <ph id="ph5">&lt;see cref="E:System.Windows.Forms.Control.DoubleClick" /&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the control ignores the window message WM_ERASEBKGND to reduce flicker.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 컨트롤은 깜빡임을 줄이기 위해 WM_ERASEBKGND 창 메시지를 무시합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint">
          <source>This style should only be applied if the <ph id="ph1">&lt;see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /&gt;</ph> bit is set to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">이 스타일은 <ph id="ph1">&lt;see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /&gt;</ph> 비트가 <ph id="ph2">&lt;see langword="true" /&gt;</ph>로 설정된 경우에만 적용되어야 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.CacheText">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the control keeps a copy of the text rather than getting it from the <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Handle" /&gt;</ph> each time it is needed.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 컨트롤은 필요할 때마다 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Handle" /&gt;</ph>에서 텍스트를 가져오지 않고 텍스트 복사본을 유지합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.CacheText">
          <source>This style defaults to <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 스타일의 기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.CacheText">
          <source>This behavior improves performance, but makes it difficult to keep the text synchronized.</source>
          <target state="translated">이 동작에 의해 성능은 향상되지만 텍스트를 동기화 상태로 유지하기가 어렵습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.ContainerControl">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the control is a container-like control.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 컨트롤이 컨테이너와 유사한 컨트롤입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.DoubleBuffer">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, drawing is performed in a buffer, and after it completes, the result is output to the screen.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 그리기가 버퍼에서 수행되고 완료된 후에 결과가 화면에 출력됩니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.DoubleBuffer">
          <source>Double-buffering prevents flicker caused by the redrawing of the control.</source>
          <target state="translated">이중 버퍼링은 컨트롤을 다시 그릴 때 발생하는 깜박임을 방지합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.DoubleBuffer">
          <source>If you set <ph id="ph1">&lt;see cref="F:System.Windows.Forms.ControlStyles.DoubleBuffer" /&gt;</ph> to <ph id="ph2">&lt;see langword="true" /&gt;</ph>, you should also set <ph id="ph3">&lt;see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /&gt;</ph> and <ph id="ph4">&lt;see cref="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint" /&gt;</ph> to <ph id="ph5">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Windows.Forms.ControlStyles.DoubleBuffer" /&gt;</ph>를 <ph id="ph2">&lt;see langword="true" /&gt;</ph>로 설정한 경우 <ph id="ph3">&lt;see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /&gt;</ph> 및 <ph id="ph4">&lt;see cref="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint" /&gt;</ph>도 <ph id="ph5">&lt;see langword="true" /&gt;</ph>로 설정해야 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.EnableNotifyMessage">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /&gt;</ph> method is called for every message sent to the control's <ph id="ph3">&lt;see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 <ph id="ph3">&lt;see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" /&gt;</ph>로 전송되는 모든 메시지에 대해 <ph id="ph2">&lt;see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /&gt;</ph> 메서드가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.EnableNotifyMessage">
          <source>This style defaults to <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 스타일의 기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.EnableNotifyMessage">
          <source><ph id="ph1">&lt;see cref="F:System.Windows.Forms.ControlStyles.EnableNotifyMessage" /&gt;</ph> does not work in partial trust.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Windows.Forms.ControlStyles.EnableNotifyMessage" /&gt;</ph>는 부분 신뢰 환경에서 작동하지 않습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.FixedHeight">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the control has a fixed height when auto-scaled.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 컨트롤은 자동으로 크기가 조정될 때 높이가 고정됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.FixedHeight">
          <source>For example, if a layout operation attempts to rescale the control to accommodate a new <ph id="ph1">&lt;see cref="T:System.Drawing.Font" /&gt;</ph>, the control's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Height" /&gt;</ph> remains unchanged.</source>
          <target state="translated">예를 들어 레이아웃 작업이 새 <ph id="ph1">&lt;see cref="T:System.Drawing.Font" /&gt;</ph>를 수용하도록 컨트롤의 크기를 변경하려고 할 경우 컨트롤의 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Height" /&gt;</ph>는 그대로 유지됩니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.FixedWidth">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the control has a fixed width when auto-scaled.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 컨트롤은 자동으로 크기가 조정될 때 너비가 고정됩니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.FixedWidth">
          <source>For example, if a layout operation attempts to rescale the control to accommodate a new <ph id="ph1">&lt;see cref="T:System.Drawing.Font" /&gt;</ph>, the control's <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Width" /&gt;</ph> remains unchanged.</source>
          <target state="translated">예를 들어 레이아웃 작업이 새 <ph id="ph1">&lt;see cref="T:System.Drawing.Font" /&gt;</ph>를 수용하도록 컨트롤의 크기를 변경하려고 할 경우 컨트롤의 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.Width" /&gt;</ph>는 그대로 유지됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.Opaque">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the control is drawn opaque and the background is not painted.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 컨트롤은 불투명하게 그려지고 배경은 그려지지 않습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the control is first drawn to a buffer rather than directly to the screen, which can reduce flicker.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 컨트롤은 화면에 직접 그려지지 않고 먼저 버퍼에 그려지므로 깜빡임을 줄일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer">
          <source>If you set this property to <ph id="ph1">&lt;see langword="true" /&gt;</ph>, you should also set the <ph id="ph2">&lt;see cref="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint" /&gt;</ph> to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">이 속성을 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하는 경우 <ph id="ph2">&lt;see cref="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint" /&gt;</ph>도 <ph id="ph3">&lt;see langword="true" /&gt;</ph>로 설정해야 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.ResizeRedraw">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the control is redrawn when it is resized.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 컨트롤은 크기가 조정될 때 다시 그려집니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.Selectable">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the control can receive focus.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 컨트롤이 포커스를 받을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.StandardClick">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the control implements the standard <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> behavior.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 컨트롤은 표준 <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Control.Click" /&gt;</ph> 동작을 구현합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.StandardDoubleClick">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the control implements the standard <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Control.DoubleClick" /&gt;</ph> behavior.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 컨트롤은 표준 <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Control.DoubleClick" /&gt;</ph> 동작을 구현합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.StandardDoubleClick">
          <source>This style is ignored if the <ph id="ph1">&lt;see cref="F:System.Windows.Forms.ControlStyles.StandardClick" /&gt;</ph> bit is not set to <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">이 스타일은 <ph id="ph1">&lt;see cref="F:System.Windows.Forms.ControlStyles.StandardClick" /&gt;</ph> 비트가 <ph id="ph2">&lt;see langword="true" /&gt;</ph>로 설정되지 않으면 무시됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.SupportsTransparentBackColor">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the control accepts a <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.BackColor" /&gt;</ph> with an alpha component of less than 255 to simulate transparency.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 컨트롤은 투명도를 시뮬레이트하기 위해 알파 구성 요소가 255 미만인 <ph id="ph2">&lt;see cref="P:System.Windows.Forms.Control.BackColor" /&gt;</ph>를 수락합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.SupportsTransparentBackColor">
          <source>Transparency will be simulated only if the <ph id="ph1">&lt;see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /&gt;</ph> bit is set to <ph id="ph2">&lt;see langword="true" /&gt;</ph> and the parent control is derived from <ph id="ph3">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /&gt;</ph> 비트가 <ph id="ph2">&lt;see langword="true" /&gt;</ph>로 설정되고 부모 컨트롤이 <ph id="ph3">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>에서 파생될 경우에만 투명도가 시뮬레이트됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.UserMouse">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the control does its own mouse processing, and mouse events are not handled by the operating system.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 컨트롤은 자체 마우스 처리를 수행하고 마우스 이벤트가 운영 체제에 의해 처리되지 않습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.UserPaint">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the control paints itself rather than the operating system doing so.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 운영 체제에서 컨트롤을 그리지 않고 컨트롤이 자체적으로 그려집니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.UserPaint">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Control.Paint" /&gt;</ph> event is not raised.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph>이면 <ph id="ph2">&lt;see cref="E:System.Windows.Forms.Control.Paint" /&gt;</ph> 이벤트가 발생하지 않습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.UserPaint">
          <source>This style only applies to classes derived from <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>.</source>
          <target state="translated">이 스타일은 <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>에서 파생된 클래스에만 적용됩니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="F:System.Windows.Forms.ControlStyles.UseTextForAccessibility">
          <source>Specifies that the value of the control's <bpt id="p1">&lt;c&gt;</bpt>Text<ept id="p1">&lt;/c&gt;</ept> property, if set, determines the control's default Active Accessibility name and shortcut key.</source>
          <target state="translated">컨트롤의 <bpt id="p1">&lt;c&gt;</bpt>Text<ept id="p1">&lt;/c&gt;</ept> 속성 값을 설정한 경우 컨트롤의 기본 Active Accessibility 이름 및 바로 가기 키를 결정한다고 지정합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>