<Type Name="CommonDialog" FullName="System.Windows.Forms.CommonDialog">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f18578aa834eff3f8037feb0af84a5f009e69c6d" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33659161" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CommonDialog : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CommonDialog extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CommonDialog&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommonDialog abstract : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>화면에 대화 상자를 표시하는 데 사용되는 기본 클래스를 지정합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 상속 된 클래스를 구현 하는 데 필요한 <xref:System.Windows.Forms.CommonDialog.RunDialog%2A> 호출 하 여 <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> 특정 공용 대화 상자를 만듭니다. 상속 된 클래스는 필요에 따라 재정의 <xref:System.Windows.Forms.CommonDialog.HookProc%2A> 특정 대화 상자 후크 기능을 구현 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.ColorDialog> 구현의 <xref:System.Windows.Forms.CommonDialog> 만들기 및 표시 대화 상자를 보여 줍니다. 이 예제에 기존 폼 내에서 메서드가 호출 되도록 하려면는 <xref:System.Windows.Forms.TextBox> 및 <xref:System.Windows.Forms.Button> 배치 합니다.  
  
 [!code-cpp[Classic ColorDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ColorDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ColorDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ColorDialog Example/CS/source.cs#1)]
 [!code-vb[Classic ColorDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ColorDialog Example/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommonDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommonDialog();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.CommonDialog" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HelpRequest">
      <MemberSignature Language="C#" Value="public event EventHandler HelpRequest;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HelpRequest" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CommonDialog.HelpRequest" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HelpRequest As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ HelpRequest;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>일반 대화 상자의 도움말 단추를 클릭하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트를 처리 하는 방법에 대 한 정보를 참조 하십시오. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 초기화 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.ColorDialog> 개체 설정의 <xref:System.Windows.Forms.ColorDialog.AnyColor%2A>, <xref:System.Windows.Forms.ColorDialog.AllowFullOpen%2A> 속성입니다. <xref:System.Windows.Forms.ColorDialog> 개체는 사용자 지정 색을 설정 하려면 사용자를 허용 하지 없지만 전체 집합이 기본 색을 표시할 수 있습니다. 설정 하 여는 <xref:System.Windows.Forms.ColorDialog.SolidColorOnly%2A> 속성을 false로 색은 색이 256 또는 시스템에서 다른 색의 조합을 표시할 수 있습니다. 또한이 예제에서는 설정 된 <xref:System.Windows.Forms.ColorDialog.ShowHelp%2A> 속성 및 처리는 <xref:System.Windows.Forms.CommonDialog.HelpRequest> 대화 상자에 대 한 이벤트입니다. 예제를 실행 하려면 다음 코드를 붙여 폼 호출에는 `InitializeColorDialog` 폼의 생성자 또는 `Load` 메서드. 이 예제에서는 `Click` 단추의 이벤트가 예에서 정의 된 이벤트 처리기에 연결 되어 있습니다.  
  
 [!code-cpp[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.CommonDialog.OnHelpRequest(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="HookProc">
      <MemberSignature Language="C#" Value="protected virtual IntPtr HookProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance native int HookProc(native int hWnd, int32 msg, native int wparam, native int lparam) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function HookProc (hWnd As IntPtr, msg As Integer, wparam As IntPtr, lparam As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wparam" Type="System.IntPtr" />
        <Parameter Name="lparam" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWnd">대화 상자 창에 대한 핸들입니다.</param>
        <param name="msg">받는 메시지입니다.</param>
        <param name="wparam">메시지에 대한 추가 정보입니다.</param>
        <param name="lparam">메시지에 대한 추가 정보입니다.</param>
        <summary>일반 대화 상자에 특정 기능을 추가하도록 재정의된 일반 대화 상자의 후크 프로시저를 정의합니다.</summary>
        <returns>기본 대화 상자 프로시저가 메시지를 처리하면 0 값이고 메시지를 무시하면 0이 아닌 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 후크 프로시저에는 함수 응용 프로그램에 도달 하기 전에 이벤트를 가로챌 수 있는 메커니즘입니다. 재정의 하는 경우는 <xref:System.Windows.Forms.CommonDialog.HookProc%2A> 에 대 한 메서드는 <xref:System.Windows.Forms.CommonDialog> 클래스, 운영 체제의 운영 체제 메시지 창에 게시 하는 함수를 재정의 호출 합니다.  
  
 기본적으로 후크 프로시저 WM_INITDIALOG 메시지에 대 한 응답으로 화면에 대화 상자를 배치 합니다.  
  
> [!NOTE]
>  이 방법은 사용 하 여 <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> 신뢰할 수 없는 코드에서 호출 되 고 하지 못하도록; 직접 실행 호출자만 포함 해야 합니다. <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=nameWithType> 권한. 코드와 부분적으로 신뢰할 수 있는 코드에서 호출할 수 있는 경우 사용자 입력을 통과 하지 못한 <xref:System.Runtime.InteropServices.Marshal> 클래스 유효성 검사 없이 메서드. 사용 하는 중요 한 제한에 대 한는 `LinkDemand` 멤버 참조 [Demand 합니다. LinkDemand](http://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5)합니다.  
  
 이 속성 또한 사용 하 여는 <xref:System.Security.Permissions.SecurityAction.InheritanceDemand?displayProperty=nameWithType> ;이 멤버를 재정의 하려면 보안 특성을 파생된 클래스에 있어야는 `CustomPermission` 권한.  
  
   
  
## Examples  
 다음 코드 예제에서는 재정의 하는 방법을 보여 줍니다.는 <xref:System.Windows.Forms.CommonDialog.HookProc%2A> 메서드. 이 예제에서는 상속 하는 클래스 이루어져는 <xref:System.Windows.Forms.CommonDialog> 클래스입니다. 클래스의에서 <xref:System.Windows.Forms.CommonDialog.HookProc%2A> override,이 예제에서는 메서드를 평가 `msg` 특정 Windows 메시지에 대 한 상수 값에 대 한 매개 변수입니다. 경우는 `msg` 예제에 전달 된 Windows 메시지를 식별 하는 추적 출력을 작성 매개 변수가 지정된 된 상수와 같으면는 <xref:System.Windows.Forms.CommonDialog.HookProc%2A> 메서드. 이 예에서는 가정 하는 클래스는 <xref:System.Windows.Forms.CommonDialog.HookProc%2A> 메서드는 상속을 선언는 <xref:System.Windows.Forms.CommonDialog> 클래스.  
  
 [!code-cpp[HookProc Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/HookProc Example/CPP/fontdialogoverride.cpp#1)]
 [!code-csharp[HookProc Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/HookProc Example/CS/fontdialogoverride.cs#1)]
 [!code-vb[HookProc Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/HookProc Example/VB/fontdialogoverride.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 직접 실행 호출자입니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>클래스 상속 일반 대화 상자에 특정 기능을 추가 하려면이 메서드를 재정의할 수 있습니다. 재정의 하는 경우 <see cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> 메서드.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnHelpRequest">
      <MemberSignature Language="C#" Value="protected virtual void OnHelpRequest (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHelpRequest(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.OnHelpRequest(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHelpRequest (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHelpRequest(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 제공하는 <see cref="T:System.Windows.Forms.HelpEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Forms.CommonDialog.HelpRequest" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 도움말 단추를 클릭할 때 호출 됩니다. 클래스 상속 이벤트를 처리 하려면이 메서드를 재정의할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerWndProc">
      <MemberSignature Language="C#" Value="protected virtual IntPtr OwnerWndProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance native int OwnerWndProc(native int hWnd, int32 msg, native int wparam, native int lparam) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.OwnerWndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OwnerWndProc (hWnd As IntPtr, msg As Integer, wparam As IntPtr, lparam As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual IntPtr OwnerWndProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wparam" Type="System.IntPtr" />
        <Parameter Name="lparam" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWnd">보낼 메시지의 창 핸들입니다.</param>
        <param name="msg">보낼 Win32 메시지입니다.</param>
        <param name="wparam">메시지와 함께 보낼 <c>wparam</c>입니다.</param>
        <param name="lparam">메시지와 함께 보낼 <c>lparam</c>입니다.</param>
        <summary>일반 대화 상자에 특정 기능을 추가하도록 재정의된 소유자 창 프로시저를 정의합니다.</summary>
        <returns>메시지 처리의 결과로, 보낸 메시지에 따라 다릅니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반 대화 상자의 소유자 창에 메시지를 보내면이 제어가 전달 됩니다. 클래스 상속 일반 대화 상자에 특정 기능을 추가 하려면이 메서드를 재정의할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 직접 실행 호출자입니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public abstract void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.Reset" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 재정의되면 일반 대화 상자의 속성을 기본값으로 다시 설정합니다.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">이 메서드를 호출 하는 관리 되지 않는 코드입니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>클래스 상속 해당 속성을 다시 설정 하려면이 메서드를 재정의할 수 있습니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RunDialog">
      <MemberSignature Language="C#" Value="protected abstract bool RunDialog (IntPtr hwndOwner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool RunDialog(native int hwndOwner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.RunDialog(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function RunDialog (hwndOwner As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool RunDialog(IntPtr hwndOwner);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwndOwner" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwndOwner">일반 대화 상자에 대한 소유자 창의 창 핸들을 나타내는 값입니다.</param>
        <summary>파생 클래스에서 재정의된 경우 일반 대화 상자를 지정합니다.</summary>
        <returns>
          대화 상자가 성공적으로 실행되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 사용자의 일반 대화 상자를 호출할 때 <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A>의 상속 된 클래스에서 재정의 해야 <xref:System.Windows.Forms.CommonDialog> 특정 일반 대화 상자를 구현 하 합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">이 메서드를 호출 하는 관리 되지 않는 코드입니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="M:System.Windows.Forms.CommonDialog.ShowDialog" />
        <altmember cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ShowDialog">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>일반 대화 상자를 실행합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DialogResult ShowDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.DialogResult ShowDialog() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.ShowDialog" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowDialog () As DialogResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::DialogResult ShowDialog();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>기본 소유자로 일반 대화 상자를 실행합니다.</summary>
        <returns>
          사용자가 대화 상자에서 [확인]을 클릭하면 <see cref="F:System.Windows.Forms.DialogResult.OK" />이고, 그렇지 않으면 <see cref="F:System.Windows.Forms.DialogResult.Cancel" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 <xref:System.Windows.Forms.CommonDialog.RunDialog%2A>를 구현합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Windows.Forms.ColorDialog> 구현의 <xref:System.Windows.Forms.CommonDialog> 만들기 및 표시 대화 상자를 보여 줍니다. 이 예제에 기존 폼 내에서 메서드가 호출 되도록 하려면는 <xref:System.Windows.Forms.TextBox> 및 <xref:System.Windows.Forms.Button> 배치 합니다.  
  
 [!code-cpp[Classic ColorDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ColorDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ColorDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ColorDialog Example/CS/source.cs#1)]
 [!code-vb[Classic ColorDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ColorDialog Example/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">인쇄 하는 <see cref="T:System.Windows.Forms.PrintDialog" />합니다. 연결 된 열거형의 경우: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.SafePrinting" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">이 메서드를 호출할 하위 창에서 안전 하 게 보호 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="M:System.Windows.Forms.CommonDialog.RunDialog(System.IntPtr)" />
        <altmember cref="T:System.Windows.Forms.DialogResult" />
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DialogResult ShowDialog (System.Windows.Forms.IWin32Window owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.DialogResult ShowDialog(class System.Windows.Forms.IWin32Window owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CommonDialog.ShowDialog(System.Windows.Forms.IWin32Window)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowDialog (owner As IWin32Window) As DialogResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::DialogResult ShowDialog(System::Windows::Forms::IWin32Window ^ owner);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.IWin32Window" />
      </Parameters>
      <Docs>
        <param name="owner">모달 대화 상자를 소유할 최상위 창을 나타내는 <see cref="T:System.Windows.Forms.IWin32Window" />을(를) 구현하는 개체입니다.</param>
        <summary>지정된 소유자로 일반 대화 상자를 실행합니다.</summary>
        <returns>
          사용자가 대화 상자에서 **확인**을 클릭하면 <see cref="F:System.Windows.Forms.DialogResult.OK" />이고, 그렇지 않으면 <see cref="F:System.Windows.Forms.DialogResult.Cancel" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 버전의는 <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> 메서드를 사용 하면 특정 폼 이나 컨트롤 표시 되는 대화 상자를 소유할을 지정할 수 있습니다. 매개 변수가 없는이 메서드의 버전을 사용 하는 경우 응용 프로그램의 경우 현재 활성 창으로 표시 되는 대화 상자를 자동으로 소유 합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">인쇄 하는 <see cref="T:System.Windows.Forms.PrintDialog" />합니다. 연결 된 열거형의 경우: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.SafePrinting" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">이 메서드를 호출할 하위 창에서 안전 하 게 보호 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CommonDialog.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤에 대한 데이터가 들어 있는 개체를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Forms.CommonDialog" />에 대한 데이터가 들어 있는 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 사용 하 여 컨트롤에 대 한 임의의 정보를 저장 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>