<Type Name="Button" FullName="System.Windows.Forms.Button">
  <TypeSignature Language="C#" Value="public class Button : System.Windows.Forms.ButtonBase, System.Windows.Forms.IButtonControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Button extends System.Windows.Forms.ButtonBase implements class System.Windows.Forms.IButtonControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Button" />
  <TypeSignature Language="VB.NET" Value="Public Class Button&#xA;Inherits ButtonBase&#xA;Implements IButtonControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Button : System::Windows::Forms::ButtonBase, System::Windows::Forms::IButtonControl" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.ButtonBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IButtonControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ButtonBaseDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e0fe4-101">Windows 단추 컨트롤을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-101">Represents a Windows button control.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0fe4-102">A <xref:System.Windows.Forms.Button> 단추에 포커스가 있으면 마우스, ENTER 키 또는 스페이스바를 사용 하 여 클릭할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-102">A <xref:System.Windows.Forms.Button> can be clicked by using the mouse, ENTER key, or SPACEBAR if the button has focus.</span></span>  
  
 <span data-ttu-id="e0fe4-103">설정의 <xref:System.Windows.Forms.Form.AcceptButton%2A> 또는 <xref:System.Windows.Forms.Form.CancelButton%2A> 속성은 <xref:System.Windows.Forms.Form> 단추에 포커스가 없는 경우에 ENTER 또는 ESC 키를 누르거나 단추를 클릭 하 여 사용자가 허용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-103">Set the <xref:System.Windows.Forms.Form.AcceptButton%2A> or <xref:System.Windows.Forms.Form.CancelButton%2A> property of a <xref:System.Windows.Forms.Form> to allow users to click a button by pressing the ENTER or ESC keys even if the button does not have focus.</span></span> <span data-ttu-id="e0fe4-104">폼 대화 상자의 동작을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-104">This gives the form the behavior of a dialog box.</span></span>  
  
 <span data-ttu-id="e0fe4-105">사용 하 여 폼을 표시할 때는 <xref:System.Windows.Forms.Form.ShowDialog%2A> 사용할 수는 <xref:System.Windows.Forms.Button.DialogResult%2A> 속성의 반환 값을 지정할 수 있는 단추의 <xref:System.Windows.Forms.Form.ShowDialog%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-105">When you display a form using the <xref:System.Windows.Forms.Form.ShowDialog%2A> method, you can use the <xref:System.Windows.Forms.Button.DialogResult%2A> property of a button to specify the return value of <xref:System.Windows.Forms.Form.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="e0fe4-106">단추의 모양을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-106">You can change the button's appearance.</span></span> <span data-ttu-id="e0fe4-107">예를 들어, 웹 모양에 대 한 플랫 표시를 위해 설정 된 <xref:System.Windows.Forms.ButtonBase.FlatStyle%2A> 속성을 <xref:System.Windows.Forms.FlatStyle.Flat?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-107">For example, to make it appear flat for a Web look, set the <xref:System.Windows.Forms.ButtonBase.FlatStyle%2A> property to <xref:System.Windows.Forms.FlatStyle.Flat?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e0fe4-108"><xref:System.Windows.Forms.ButtonBase.FlatStyle%2A> 속성으로 설정할 수도 있습니다 <xref:System.Windows.Forms.FlatStyle.Popup?displayProperty=nameWithType>, 단추 위로 마우스 포인터를 움직이면 될 때까지 플랫 나타나는 다음 표준 Windows 단추 모양에 소요 되는 단추입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-108">The <xref:System.Windows.Forms.ButtonBase.FlatStyle%2A> property can also be set to <xref:System.Windows.Forms.FlatStyle.Popup?displayProperty=nameWithType>, which appears flat until the mouse pointer passes over the button; then the button takes on the standard Windows button appearance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e0fe4-109">포커스가 있는 컨트롤을 수락 및 ENTER 키 누름을 처리 하는 경우는 <xref:System.Windows.Forms.Button> 처리 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-109">If the control that has focus accepts and processes the ENTER key press, the <xref:System.Windows.Forms.Button> does not process it.</span></span> <span data-ttu-id="e0fe4-110">예를 들어 여러 줄 <xref:System.Windows.Forms.TextBox> 또는 다른 단추에 포커스를 처리 하는 대신 적용 단추로 ENTER 키 누름을 제어 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-110">For example, if a multiline <xref:System.Windows.Forms.TextBox> or another button has focus, that control processes the ENTER key press instead of the accept button.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0fe4-111">다음 코드 예제에서는 한 <xref:System.Windows.Forms.Button>를 설정 하는 해당 <xref:System.Windows.Forms.Button.DialogResult%2A> 속성을 <xref:System.Windows.Forms.DialogResult.OK?displayProperty=nameWithType>에 추가 <xref:System.Windows.Forms.Form>합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-111">The following code example creates a <xref:System.Windows.Forms.Button>, sets its <xref:System.Windows.Forms.Button.DialogResult%2A> property to <xref:System.Windows.Forms.DialogResult.OK?displayProperty=nameWithType>, and adds it to a <xref:System.Windows.Forms.Form>.</span></span>  
  
 [!code-cpp[Classic Button.Button Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Button.Button Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Button.Button Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Button.Button Example/CS/source.cs#1)]
 [!code-vb[Classic Button.Button Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Button.Button Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ButtonBase" />
    <altmember cref="T:System.Windows.Forms.RadioButton" />
    <altmember cref="T:System.Windows.Forms.CheckBox" />
    <altmember cref="T:System.Windows.Forms.IButtonControl" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Button ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Button.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Button();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e0fe4-112"><see cref="T:System.Windows.Forms.Button" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-112">Initializes a new instance of the <see cref="T:System.Windows.Forms.Button" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0fe4-113">기본적으로는 <xref:System.Windows.Forms.Button> 캡션을 표시 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-113">By default the <xref:System.Windows.Forms.Button> displays no caption.</span></span> <span data-ttu-id="e0fe4-114">캡션 텍스트를 지정 하려면 설정는 <xref:System.Windows.Forms.Control.Text%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-114">To specify the caption text, set the <xref:System.Windows.Forms.Control.Text%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0fe4-115">다음 코드 예제에서는 <xref:System.Windows.Forms.Button>를 설정 하는 해당 <xref:System.Windows.Forms.Button.DialogResult%2A> 속성을는 `OK` 값 <xref:System.Windows.Forms.DialogResult>에 추가 <xref:System.Windows.Forms.Form>합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-115">The following code example creates a <xref:System.Windows.Forms.Button>, sets its <xref:System.Windows.Forms.Button.DialogResult%2A> property to the `OK` value of <xref:System.Windows.Forms.DialogResult>, and adds it to a <xref:System.Windows.Forms.Form>.</span></span>  
  
 [!code-cpp[Classic Button.Button Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Button.Button Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Button.Button Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Button.Button Example/CS/source.cs#1)]
 [!code-vb[Classic Button.Button Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Button.Button Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Button" />
      </Docs>
    </Member>
    <Member MemberName="AutoSizeMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AutoSizeMode AutoSizeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AutoSizeMode AutoSizeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Button.AutoSizeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSizeMode As AutoSizeMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AutoSizeMode AutoSizeMode { System::Windows::Forms::AutoSizeMode get(); void set(System::Windows::Forms::AutoSizeMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoSizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0fe4-116"><see cref="T:System.Windows.Forms.Button" />에서 해당 크기를 자동 조정하는 모드를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-116">Gets or sets the mode by which the <see cref="T:System.Windows.Forms.Button" /> automatically resizes itself.</span></span></summary>
        <value><span data-ttu-id="e0fe4-117"><see cref="T:System.Windows.Forms.AutoSizeMode" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-117">One of the <see cref="T:System.Windows.Forms.AutoSizeMode" /> values.</span></span> <span data-ttu-id="e0fe4-118">기본값은 <see cref="F:System.Windows.Forms.AutoSizeMode.GrowOnly" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-118">The default value is <see cref="F:System.Windows.Forms.AutoSizeMode.GrowOnly" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Button.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0fe4-119">창을 만들 때 기본 클래스의 <see cref="T:System.Windows.Forms.CreateParams" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-119">Gets a <see cref="T:System.Windows.Forms.CreateParams" /> on the base class when creating a window.</span></span></summary>
        <value><span data-ttu-id="e0fe4-120">창을 만들 때 기본 클래스의 <see cref="T:System.Windows.Forms.CreateParams" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-120">A <see cref="T:System.Windows.Forms.CreateParams" /> object on the base class when creating a window.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0fe4-121">추가 기능을 추가 하려면이 속성을 재정의할 수 있지만 먼저 호출 해야 클래스 상속의 <xref:System.Windows.Forms.CreateParams> 컨트롤 계속 제대로 작동 하는지 확인 하기 위해 기본 클래스에 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-121">Inheriting classes can override this property to add extra functionality, but must first call the <xref:System.Windows.Forms.CreateParams> constructor on the base class to verify that the control continues to work correctly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DialogResult">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DialogResult DialogResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DialogResult DialogResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Button.DialogResult" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DialogResult As DialogResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::DialogResult DialogResult { System::Windows::Forms::DialogResult get(); void set(System::Windows::Forms::DialogResult value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IButtonControl.DialogResult</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0fe4-122">단추를 클릭할 때 부모 폼에 반환되는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-122">Gets or sets a value that is returned to the parent form when the button is clicked.</span></span></summary>
        <value><span data-ttu-id="e0fe4-123"><see cref="T:System.Windows.Forms.DialogResult" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-123">One of the <see cref="T:System.Windows.Forms.DialogResult" /> values.</span></span> <span data-ttu-id="e0fe4-124">기본값은 <see langword="None" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-124">The default value is <see langword="None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0fe4-125">경우는 <xref:System.Windows.Forms.DialogResult> 이 속성이 아닌 다른 값으로 설정 되어 `None`, 부모 폼을 통해 표시 된 경우 및는 <xref:System.Windows.Forms.Form.ShowDialog%2A> 메서드를 단추를 클릭 하면 모든 이벤트를 연결 하지 않고도 부모 폼을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-125">If the <xref:System.Windows.Forms.DialogResult> for this property is set to anything other than `None`, and if the parent form was displayed through the <xref:System.Windows.Forms.Form.ShowDialog%2A> method, clicking the button closes the parent form without your having to hook up any events.</span></span> <span data-ttu-id="e0fe4-126">폼의 <xref:System.Windows.Forms.Form.DialogResult%2A> 속성으로 설정 됩니다는 <xref:System.Windows.Forms.DialogResult> 단추는 단추를 클릭할 때입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-126">The form's <xref:System.Windows.Forms.Form.DialogResult%2A> property is then set to the <xref:System.Windows.Forms.DialogResult> of the button when the button is clicked.</span></span>  
  
 <span data-ttu-id="e0fe4-127">예를 들어 "예/아니요/취소" 대화 상자를 만들려면 단순히 세 개의 단추와 추가 설정의 <xref:System.Windows.Forms.DialogResult> 속성을 `Yes`, `No`, 및 `Cancel`합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-127">For example, to create a "Yes/No/Cancel" dialog box, simply add three buttons and set their <xref:System.Windows.Forms.DialogResult> properties to `Yes`, `No`, and `Cancel`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0fe4-128">다음 코드 예제에서는 한 <xref:System.Windows.Forms.Button>를 설정 하는 해당 <xref:System.Windows.Forms.DialogResult> 속성을 `OK`에 추가 <xref:System.Windows.Forms.Form>합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-128">The following code example creates a <xref:System.Windows.Forms.Button>, sets its <xref:System.Windows.Forms.DialogResult> property to `OK`, and adds it to a <xref:System.Windows.Forms.Form>.</span></span>  
  
 [!code-cpp[Classic Button.Button Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Button.Button Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Button.Button Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Button.Button Example/CS/source.cs#1)]
 [!code-vb[Classic Button.Button Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Button.Button Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="e0fe4-129">할당된 값이 <see cref="T:System.Windows.Forms.DialogResult" /> 값 중 하나가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="e0fe4-129">The value assigned is not one of the <see cref="T:System.Windows.Forms.DialogResult" /> values.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event EventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Button.DoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoubleClick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DoubleClick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0fe4-130">사용자가 <see cref="T:System.Windows.Forms.Button" /> 컨트롤을 두 번 클릭하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-130">Occurs when the user double-clicks the <see cref="T:System.Windows.Forms.Button" /> control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0fe4-131">기본적으로는 <xref:System.Windows.Forms.ControlStyles.StandardClick?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.ControlStyles.StandardDoubleClick?displayProperty=nameWithType> 스타일 비트가 `false` 에 대 한는 <xref:System.Windows.Forms.Button> 컨트롤 및 <xref:System.Windows.Forms.Button.DoubleClick> 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-131">By default, the <xref:System.Windows.Forms.ControlStyles.StandardClick?displayProperty=nameWithType> and <xref:System.Windows.Forms.ControlStyles.StandardDoubleClick?displayProperty=nameWithType> style bits are set to `false` for the <xref:System.Windows.Forms.Button> control, and the <xref:System.Windows.Forms.Button.DoubleClick> event is not raised.</span></span>  
  
 <span data-ttu-id="e0fe4-132">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-132">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0fe4-133">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-133">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="e0fe4-134">예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.Button.DoubleClick> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-134">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Button.DoubleClick> event.</span></span> <span data-ttu-id="e0fe4-135">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-135">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="e0fe4-136">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-136">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="e0fe4-137">예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.Button> 라는 `Button1`합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-137">To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.Button> named `Button1`.</span></span> <span data-ttu-id="e0fe4-138">그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.Button.DoubleClick> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-138">Then ensure that the event handler is associated with the <xref:System.Windows.Forms.Button.DoubleClick> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#137](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#137)]
 [!code-vb[System.Windows.Forms.EventExamples#137](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#137)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Button.MouseDoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDoubleClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseDoubleClick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e0fe4-139">사용자가 마우스로 <see cref="T:System.Windows.Forms.Button" /> 컨트롤을 두 번 클릭할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-139">Occurs when the user double-clicks the <see cref="T:System.Windows.Forms.Button" /> control with the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0fe4-140">기본적으로는 <xref:System.Windows.Forms.ControlStyles.StandardClick?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.ControlStyles.StandardDoubleClick?displayProperty=nameWithType> 스타일 비트가 `false` 에 대 한는 <xref:System.Windows.Forms.Button> 컨트롤 및 <xref:System.Windows.Forms.Button.MouseDoubleClick> 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-140">By default, the <xref:System.Windows.Forms.ControlStyles.StandardClick?displayProperty=nameWithType> and <xref:System.Windows.Forms.ControlStyles.StandardDoubleClick?displayProperty=nameWithType> style bits are set to `false` for the <xref:System.Windows.Forms.Button> control, and the <xref:System.Windows.Forms.Button.MouseDoubleClick> event is not raised.</span></span>  
  
 <span data-ttu-id="e0fe4-141">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-141">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0fe4-142">다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-142">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="e0fe4-143">예제에서는 이벤트 처리기에서 보고 된 <xref:System.Windows.Forms.Button.MouseDoubleClick> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-143">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Button.MouseDoubleClick> event.</span></span> <span data-ttu-id="e0fe4-144">이 보고서를 통해 이벤트 발생 하 고 디버깅 하는 데 도움이 수 때 배울 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-144">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="e0fe4-145">자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 와 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 여러 줄에 메시지를 추가 하거나 <xref:System.Windows.Forms.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-145">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="e0fe4-146">예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여 <xref:System.Windows.Forms.Button> 라는 `Button1`합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-146">To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.Button> named `Button1`.</span></span> <span data-ttu-id="e0fe4-147">그런 다음 이벤트 처리기가 연결을 확인는 <xref:System.Windows.Forms.Button.MouseDoubleClick> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-147">Then ensure that the event handler is associated with the <xref:System.Windows.Forms.Button.MouseDoubleClick> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#138](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#138)]
 [!code-vb[System.Windows.Forms.EventExamples#138](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#138)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyDefault">
      <MemberSignature Language="C#" Value="public virtual void NotifyDefault (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyDefault(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Button.NotifyDefault(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub NotifyDefault (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void NotifyDefault(bool value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IButtonControl.NotifyDefault(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="e0fe4-148">단추가 기본 단추의 모양을 가지면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-148"><see langword="true" /> if the button is to have the appearance of the default button; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e0fe4-149">기본 모양인지 여부를 <see cref="T:System.Windows.Forms.Button" />에 알려서 그에 맞게 모양을 조정할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-149">Notifies the <see cref="T:System.Windows.Forms.Button" /> whether it is the default button so that it can adjust its appearance accordingly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0fe4-150">이 메서드는 부모 폼에 알리기 위해는 <xref:System.Windows.Forms.Button> 를 설정 해야 것을 허용 하 고 기본 단추로 모양이 적절 하 게 조정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-150">This method is called by the parent form to notify the <xref:System.Windows.Forms.Button> that it should be set as the default button and to allow it to adjust its appearance accordingly.</span></span> <span data-ttu-id="e0fe4-151">일반적으로 폼에 대 한 기본 단추로 사용 되는 단추 폼에서 다른 단추 보다 두꺼운 테두리를 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-151">Typically, a button that is the default button for a form has a thicker border than other buttons on the form.</span></span>  
  
 <span data-ttu-id="e0fe4-152">호출 된 <xref:System.Windows.Forms.Button.NotifyDefault%2A> 메서드만을 기본 단추로 단추를 그립니다;의 동작 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-152">Calling the <xref:System.Windows.Forms.Button.NotifyDefault%2A> method only draws the button as a default button; it does not change its behavior.</span></span> <span data-ttu-id="e0fe4-153">기본 단추 처럼 동작 하도록에 할당 되어야 합니다는 <xref:System.Windows.Forms.Form.AcceptButton%2A> 의 속성은 <xref:System.Windows.Forms.Form>합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-153">To make the button behave like a default button, it must be assigned to the <xref:System.Windows.Forms.Form.AcceptButton%2A> property of the <xref:System.Windows.Forms.Form>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="e0fe4-154">재정의 하는 경우 <see cref="M:System.Windows.Forms.Button.NotifyDefault(System.Boolean)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.Button.NotifyDefault(System.Boolean)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-154">When overriding <see cref="M:System.Windows.Forms.Button.NotifyDefault(System.Boolean)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Button.NotifyDefault(System.Boolean)" /> method.</span></span></para>
        </block>
        <altmember cref="M:System.Windows.Forms.IButtonControl.NotifyDefault(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected override void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Button.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnClick(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e0fe4-155">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-155">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="e0fe4-156"><see cref="E:System.Windows.Forms.Control.Click" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-156">Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Button.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e0fe4-157">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-157">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="e0fe4-158"><see cref="E:System.Windows.Forms.Control.FontChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-158">Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0fe4-159">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-159">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="e0fe4-160">자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-160">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="e0fe4-161">또한 <xref:System.Windows.Forms.Button.OnFontChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-161">The <xref:System.Windows.Forms.Button.OnFontChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="e0fe4-162">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-162">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="e0fe4-163">파생 클래스에서 <see cref="M:System.Windows.Forms.Button.OnFontChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Button.OnFontChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-163">When overriding <see cref="M:System.Windows.Forms.Button.OnFontChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Button.OnFontChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected override void OnMouseEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Button.OnMouseEnter(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseEnter (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseEnter(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e0fe4-164">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-164">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="e0fe4-165"><see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-165">Raises the <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.ButtonBase.OnMouseEnter(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Button.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e0fe4-166">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-166">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="e0fe4-167"><see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-167">Raises the <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.ButtonBase.OnMouseLeave(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected override void OnMouseUp (System.Windows.Forms.MouseEventArgs mevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs mevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Button.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseUp (mevent As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseUp(System::Windows::Forms::MouseEventArgs ^ mevent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mevent" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="mevent"><span data-ttu-id="e0fe4-168">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.MouseEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-168">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="e0fe4-169"><see cref="M:System.Windows.Forms.ButtonBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-169">Raises the <see cref="M:System.Windows.Forms.ButtonBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0fe4-170">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-170">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="e0fe4-171">자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-171">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="e0fe4-172">또한 <xref:System.Windows.Forms.Button.OnMouseUp%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-172">The <xref:System.Windows.Forms.Button.OnMouseUp%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="e0fe4-173">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-173">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="e0fe4-174">파생 클래스에서 <see cref="M:System.Windows.Forms.Button.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Button.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-174">When overriding <see cref="M:System.Windows.Forms.Button.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Button.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para>
        </block>
        <altmember cref="M:System.Windows.Forms.ButtonBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected override void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Button.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e0fe4-175">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-175">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="e0fe4-176"><see cref="E:System.Windows.Forms.Control.TextChanged" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-176">Raises the <see cref="E:System.Windows.Forms.Control.TextChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0fe4-177">이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-177">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="e0fe4-178">자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-178">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="e0fe4-179">또한 <xref:System.Windows.Forms.Button.OnTextChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-179">The <xref:System.Windows.Forms.Button.OnTextChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="e0fe4-180">이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-180">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="e0fe4-181">파생 클래스에서 <see cref="M:System.Windows.Forms.Button.OnTextChanged(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Windows.Forms.Button.OnTextChanged(System.EventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-181">When overriding <see cref="M:System.Windows.Forms.Button.OnTextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Button.OnTextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PerformClick">
      <MemberSignature Language="C#" Value="public void PerformClick ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Button.PerformClick" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformClick ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PerformClick();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IButtonControl.PerformClick</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e0fe4-182">단추에 대해 <see cref="E:System.Windows.Forms.Control.Click" /> 이벤트를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-182">Generates a <see cref="E:System.Windows.Forms.Control.Click" /> event for a button.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0fe4-183">이 메서드를 발생 시키는 <xref:System.Windows.Forms.Control.Click> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-183">This method can be called to raise the <xref:System.Windows.Forms.Control.Click> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0fe4-184">다음 코드 예제에서는 생성 한 <xref:System.Windows.Forms.Control.Click> 의 이벤트는 <xref:System.Windows.Forms.Button> 에 교대로 반복 되는 <xref:System.Windows.Forms.Control.Click> 다른 단추의 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-184">The following code example generates a <xref:System.Windows.Forms.Control.Click> event of a <xref:System.Windows.Forms.Button> on alternating <xref:System.Windows.Forms.Control.Click> events of another button.</span></span> <span data-ttu-id="e0fe4-185">이 코드에서는 두 <xref:System.Windows.Forms.Button> 폼에서 컨트롤이 인스턴스화 되었으며 및 이라는 멤버 변수가 `myVar` 클래스 내에서 32 비트 부호 있는 정수로 선언 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-185">This code assumes that two <xref:System.Windows.Forms.Button> controls have been instantiated on a form and that a member variable named `myVar` has been declared as a 32-bit signed integer within the class.</span></span>  
  
 [!code-cpp[Classic Button.PerformClick Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Button.PerformClick Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Button.PerformClick Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Button.PerformClick Example/CS/source.cs#1)]
 [!code-vb[Classic Button.PerformClick Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Button.PerformClick Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.Click" />
      </Docs>
    </Member>
    <Member MemberName="ProcessMnemonic">
      <MemberSignature Language="C#" Value="protected internal override bool ProcessMnemonic (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool ProcessMnemonic(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Button.ProcessMnemonic(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ProcessMnemonic (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool ProcessMnemonic(char charCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="e0fe4-186">입력한 니모닉 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-186">The mnemonic character entered.</span></span></param>
        <summary><span data-ttu-id="e0fe4-187">니모닉 문자를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-187">Processes a mnemonic character.</span></span></summary>
        <returns>
          <span data-ttu-id="e0fe4-188">니모닉이 처리되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-188"><see langword="true" /> if the mnemonic was processed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0fe4-189">재정의 하는 경우 <xref:System.Windows.Forms.Button.ProcessMnemonic%2A> 파생된 클래스에서 호출 해야 기본 클래스의 <xref:System.Windows.Forms.Button.ProcessMnemonic%2A> 기본 기능 변경 되지 않은 상태로 유지 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-189">When overriding <xref:System.Windows.Forms.Button.ProcessMnemonic%2A> in a derived class, be sure to call the base class's <xref:System.Windows.Forms.Button.ProcessMnemonic%2A> to ensure that basic functionality remains unchanged.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Button.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e0fe4-190"><see cref="T:System.ComponentModel.Component" />의 이름이 포함된 <see cref="T:System.String" />을 반환합니다(있는 경우).</span><span class="sxs-lookup"><span data-stu-id="e0fe4-190">Returns a <see cref="T:System.String" /> containing the name of the <see cref="T:System.ComponentModel.Component" />, if any.</span></span> <span data-ttu-id="e0fe4-191">이 메서드는 재정의할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-191">This method should not be overridden.</span></span></summary>
        <returns><span data-ttu-id="e0fe4-192"><see cref="T:System.ComponentModel.Component" />의 이름이 포함된 <see cref="T:System.String" />(있는 경우) 또는 <see cref="T:System.ComponentModel.Component" />가 명명되지 않은 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-192">A <see cref="T:System.String" /> containing the name of the <see cref="T:System.ComponentModel.Component" />, if any, or <see langword="null" /> if the <see cref="T:System.ComponentModel.Component" /> is unnamed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Button.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="e0fe4-193">처리할 Windows <see cref="T:System.Windows.Forms.Message" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-193">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</span></span></param>
        <summary><span data-ttu-id="e0fe4-194">Windows 메시지를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="e0fe4-194">Processes Windows messages.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
  </Members>
</Type>