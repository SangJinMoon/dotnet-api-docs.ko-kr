<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TaskContinuationOptions.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a1c7a235951de4ea0250e610e035f8451c659154.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1c7a235951de4ea0250e610e035f8451c659154</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskContinuationOptions">
          <source>Specifies the behavior for a task that is created by using the <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)" /&gt;</ph> 메서드를 사용하여 만드는 작업의 동작을 지정합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>Specifies that the continuation, if it is a child task, is attached to a parent in the task hierarchy.</source>
          <target state="translated">연속 작업이 자식 작업인 경우 작업 계층 구조의 부모에 연결되도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>The continuation can be a child task only if its antecedent is also a child task.</source>
          <target state="translated">연속 작업은 선행 작업도 자식 작업인 경우에만 자식 작업이 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>By default, a child task (that is, an inner task created by an outer task) executes independently of its parent.</source>
          <target state="translated">기본적으로 자식 작업(즉, 외부 작업이 만든 내부 작업)은 부모와 독립적으로 실행됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>You can use the <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" /&gt;</ph> option so that the parent and child tasks are synchronized.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" /&gt;</ph> 옵션을 사용할 수 있어 부모와 자식 작업은 동기화됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>Note that if a parent task is configured with the <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" /&gt;</ph> option, the <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /&gt;</ph> option in the child task has no effect, and the child task will execute as a detached child task.</source>
          <target state="translated">부모 작업이 <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" /&gt;</ph> 옵션을 사용하여 구성된 경우 자식 작업의 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /&gt;</ph> 옵션은 영향을 받지 않으며, 자식 작업은 분리된 자식 작업으로 실행됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
          <source>For more information, see <bpt id="p1">[</bpt>Attached and Detached Child Tasks<ept id="p1">](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>연결된 자식 작업과 분리된 자식 작업<ept id="p1">](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach">
          <source>Specifies that any child task (that is, any nested inner task created by this continuation) that is created with the <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /&gt;</ph> option and attempts to execute as an attached child task will not be able to attach to the parent task and will execute instead as a detached child task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /&gt;</ph> 옵션으로 만들어지고 연결된 자식 작업으로 실행하려는 모든 자식 작업(이 연속 작업으로 만들어진 모든 중첩 내부 작업)은 부모 작업에 연결할 수 없고 대신 분리된 자식 작업으로 실행되도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach">
          <source>For more information, see <bpt id="p1">[</bpt>Attached and Detached Child Tasks<ept id="p1">](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>연결된 자식 작업과 분리된 자식 작업<ept id="p1">](~/docs/standard/parallel-programming/attached-and-detached-child-tasks.md)</ept>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>Specifies that the continuation task should be executed synchronously.</source>
          <target state="translated">연속 작업이 동기적으로 실행되도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>With this option specified, the continuation runs on the same thread that causes the antecedent task to transition into its final state.</source>
          <target state="translated">이 옵션을 지정하면 연속 작업이 같은 스레드에서 실행되어 선행 작업이 최종 상태로 전환됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>If the antecedent is already complete when the continuation is created, the continuation will run on the thread that creates the continuation.</source>
          <target state="translated">연속 작업이 만들어질 때 선행 작업이 이미 완료된 경우 연속 작업은 해당 작업을 만드는 스레드에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>If the antecedent's <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph> is disposed in a <ph id="ph2">&lt;see langword="finally" /&gt;</ph> block (<ph id="ph3">&lt;see langword="Finally" /&gt;</ph> in Visual Basic), a continuation with this option will run in that <ph id="ph4">&lt;see langword="finally" /&gt;</ph> block.</source>
          <target state="translated">선행 작업의 <ph id="ph1">&lt;see cref="T:System.Threading.CancellationTokenSource" /&gt;</ph>가 <ph id="ph2">&lt;see langword="finally" /&gt;</ph> 블록 (Visual Basic의 <ph id="ph3">&lt;see langword="Finally" /&gt;</ph>)에서 삭제된 경우 이 옵션이 지정되면 연속 작업이 해당 <ph id="ph4">&lt;see langword="finally" /&gt;</ph> 블록에서 계속 실행됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>Only very short-running continuations should be executed synchronously.</source>
          <target state="translated">매우 단기로 실행되는 연속 작업만 동기적으로 실행됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
          <source>Because the task executes synchronously, there is no need to call a method such as <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Wait" /&gt;</ph> to ensure that the calling thread waits for the task to complete.</source>
          <target state="translated">작업은 동기적으로 실행되므로, 호출 스레드가 작업이 완료되기를 기다리도록 하기 위해 <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Wait" /&gt;</ph>와 같은 메서드를 호출할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.HideScheduler">
          <source>Specifies that tasks created by the continuation by calling methods such as <ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Run(System.Action)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" /&gt;</ph> see the default scheduler (<ph id="ph3">&lt;see cref="P:System.Threading.Tasks.TaskScheduler.Default" /&gt;</ph>) rather than the scheduler on which this continuation is running as the current scheduler.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Threading.Tasks.Task.Run(System.Action)" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" /&gt;</ph>와 같은 메서드를 호출함으로써 연속 작업에 의해 만들어진 작업이 이 연속 작업이 실행되는 스케줄러가 아닌 기본 스케줄러(<ph id="ph3">&lt;see cref="P:System.Threading.Tasks.TaskScheduler.Default" /&gt;</ph>)를 현재 스케줄러로 인식하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.LazyCancellation">
          <source>In the case of continuation cancellation, prevents completion of the continuation until the antecedent has completed.</source>
          <target state="translated">연속 취소의 경우 선행이 완료되기 전에 연속이 완료되는 것을 방지합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
          <source>Specifies that a continuation will be a long-running, course-grained operation.</source>
          <target state="translated">연속 작업이 장기 실행되는 성긴 작업이 되도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
          <source>It provides a hint to the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> that oversubscription may be warranted.</source>
          <target state="translated">초과 구독을 보장할 수 있는 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph>에 대한 힌트를 제공합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.None">
          <source>When no continuation options are specified, specifies that default behavior should be used when executing a continuation.</source>
          <target state="translated">연속 작업 옵션이 지정되지 않은 경우, 연속 작업을 실행할 때 기본 동작을 사용하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.None">
          <source>The continuation runs asynchronously when the antecedent task completes, regardless of the antecedent's final <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property value.</source>
          <target state="translated">선행 작업의 최종 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> 속성 값에 관계없이 선행 작업이 완료되면 연속 작업이 비동기적으로 실행됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.None">
          <source>It the continuation is a child task, it is created as a detached nested task.</source>
          <target state="translated">연속 작업이 자식 작업인 경우 해당 작업은 분리된 상태의 중첩된 작업으로 만들어집니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
          <source>Specifies that the continuation task should not be scheduled if its antecedent was canceled.</source>
          <target state="translated">선행 작업이 취소된 경우 연속 작업이 예약되지 않도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
          <source>An antecedent is canceled if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</source>
          <target state="translated">완료 시 선행 작업의 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> 속성이 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>이면 작업이 취소됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">이 옵션은 다중 작업 연속에 유효하지 않습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
          <source>Specifies that the continuation task should not be scheduled if its antecedent threw an unhandled exception.</source>
          <target state="translated">선행 작업이 처리되지 않은 예외를 throw한 경우 연속 작업이 예약되지 않도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
          <source>An antecedent throws an unhandled exception if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>.</source>
          <target state="translated">완료 시 선행 작업의 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> 속성이 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>이면 처리되지 않은 예외가 발생합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">이 옵션은 다중 작업 연속에 유효하지 않습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
          <source>Specifies that the continuation task should not be scheduled if its antecedent ran to completion.</source>
          <target state="translated">선행 작업의 실행이 완료된 경우 연속 작업이 예약되지 않도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
          <source>An antecedent runs to completion if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>.</source>
          <target state="translated">완료 시 선행 작업의 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> 속성이 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>이면 작업이 끝까지 실행됩니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">이 옵션은 다중 작업 연속에 유효하지 않습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
          <source>Specifies that the continuation should be scheduled only if its antecedent was canceled.</source>
          <target state="translated">선행 작업이 취소된 경우에만 연속 작업이 예약되도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
          <source>An antecedent is canceled if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>.</source>
          <target state="translated">완료 시 선행 작업의 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> 속성이 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /&gt;</ph>이면 작업이 취소됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">이 옵션은 다중 작업 연속에 유효하지 않습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>Specifies that the continuation task should be scheduled only if its antecedent threw an unhandled exception.</source>
          <target state="translated">선행 작업이 처리되지 않은 예외를 throw한 경우에만 연속 작업이 예약되도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>An antecedent throws an unhandled exception if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>.</source>
          <target state="translated">완료 시 선행 작업의 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> 속성이 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph>이면 처리되지 않은 예외가 발생합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>The <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted" /&gt;</ph> option guarantees that the <ph id="ph2">&lt;see cref="P:System.Threading.Tasks.Task.Exception" /&gt;</ph> property in the antecedent is not <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted" /&gt;</ph> 옵션은 선행 작업의 <ph id="ph2">&lt;see cref="P:System.Threading.Tasks.Task.Exception" /&gt;</ph> 속성이 <ph id="ph3">&lt;see langword="null" /&gt;</ph>이 아니도록 보장합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>You can use that property to catch the exception and see which exception caused the task to fault.</source>
          <target state="translated">이 속성을 사용하여 예외를 catch하고 해당 작업에 오류를 발생시킨 예외를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>If you do not access the <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Exception" /&gt;</ph> property, the exception is unhandled.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Exception" /&gt;</ph> 속성에 액세스하지 않는 경우에는 예외가 처리되지 않습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>Also, if you attempt to access the <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property of a task that has been canceled or has faulted, a new exception is thrown.</source>
          <target state="translated">또한 취소되었거나 오류가 발생한 작업의 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> 속성에 액세스하려고 하면 새 예외가 발생합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">이 옵션은 다중 작업 연속에 유효하지 않습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
          <source>Specifies that the continuation should be scheduled only if its antecedent ran to completion.</source>
          <target state="translated">선행 작업의 실행이 완료된 경우에만 연속 작업이 예약되도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
          <source>An antecedent runs to completion if its <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> property upon completion is <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>.</source>
          <target state="translated">완료 시 선행 작업의 <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task.Status" /&gt;</ph> 속성이 <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /&gt;</ph>이면 작업이 끝까지 실행됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
          <source>This option is not valid for multi-task continuations.</source>
          <target state="translated">이 옵션은 다중 작업 연속에 유효하지 않습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.PreferFairness">
          <source>A hint to a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph> to schedule task in the order in which they were scheduled, so that tasks scheduled sooner are more likely to run sooner, and tasks scheduled later are more likely to run later.</source>
          <target state="translated">더 일찍 예약된 작업을 먼저 실행하고 나중에 예약된 작업을 나중에 실행할 수 있도록 예약된 순서대로 작업을 예약하도록 <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.TaskScheduler" /&gt;</ph>에 알려줍니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously">
          <source>Specifies that the continuation task should be run asynchronously.</source>
          <target state="translated">연속 작업이 비동기 방식으로 실행되도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously">
          <source>This option has precedence over <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>.</source>
          <target state="translated">이 옵션은 <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /&gt;</ph>보다 우선합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>