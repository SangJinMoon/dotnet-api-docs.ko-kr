<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TaskStatus.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50a2ca7ad7514f89eae0caf096423414b7d815e73.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a2ca7ad7514f89eae0caf096423414b7d815e73</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.TaskStatus">
          <source>Represents the current stage in the lifecycle of a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>의 수명 주기에서 현재 단계를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskStatus">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType&gt;</ph> property returns a member of the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> enumeration to indicate the task's current status.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType&gt;</ph> 의 멤버를 반환 하는 속성은 <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> 작업의 현재 상태를 나타내는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskStatus">
          <source>The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</source>
          <target state="translated">다음 예제에서는 반복 2 백만의 값에는 카운터가 증가 될 때까지 20 개의 작업을 만듭니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskStatus">
          <source>When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</source>
          <target state="translated">처음 10 개의 작업에 도달 하면 2 백만, 취소 토큰이 취소 되 고 해당 카운터 2 백만 도착 하지 않은 모든 작업이 취소 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskStatus">
          <source>The example then examines the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType&gt;</ph> property of each task to indicate whether the task has completed successfully or been cancelled.</source>
          <target state="translated">이 예제에서는 다음을 검사 하는 <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType&gt;</ph> 작업에 성공적으로 완료 또는 취소 되었습니다 사용할지를 나타내는 각 태스크의 속성입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.TaskStatus">
          <source>For those that have completed, it displays the value returned by the task.</source>
          <target state="translated">완료 된 것을 대 한 작업에 의해 반환 되는 값 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskStatus.Canceled">
          <source>The task acknowledged cancellation by throwing an OperationCanceledException with its own CancellationToken while the token was in signaled state, or the task's CancellationToken was already signaled before the task started executing.</source>
          <target state="translated">작업을 실행하기 전에 토큰이 신호를 받은 상태이거나 작업의 CancellationToken이 이미 신호를 받은 상태에서 자체 CancellationToken과 함께 OperationCanceledException을 throw하여 작업이 취소를 승인했습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskStatus.Canceled">
          <source>For more information, see <bpt id="p1">[</bpt>Task Cancellation<ept id="p1">](~/docs/standard/parallel-programming/task-cancellation.md)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>작업 취소<ept id="p1">](~/docs/standard/parallel-programming/task-cancellation.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskStatus.Created">
          <source>The task has been initialized but has not yet been scheduled.</source>
          <target state="translated">작업이 초기화되었지만 예약되지는 않았습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskStatus.Faulted">
          <source>The task completed due to an unhandled exception.</source>
          <target state="translated">작업이 처리되지 않은 예외 때문에 완료되었습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskStatus.RanToCompletion">
          <source>The task completed execution successfully.</source>
          <target state="translated">작업이 실행을 완료했습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskStatus.Running">
          <source>The task is running but has not yet completed.</source>
          <target state="translated">작업이 실행되고 있지만 완료되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskStatus.WaitingForActivation">
          <source>The task is waiting to be activated and scheduled internally by the .NET Framework infrastructure.</source>
          <target state="translated">작업이 .NET Framework 인프라를 통해 내부적으로 활성화되고 예약되기 위해 대기 중입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete">
          <source>The task has finished executing and is implicitly waiting for attached child tasks to complete.</source>
          <target state="translated">작업이 실행을 마쳤지만 연결된 자식 작업이 완료되기까지 암시적으로 대기 중입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Threading.Tasks.TaskStatus.WaitingToRun">
          <source>The task has been scheduled for execution but has not yet begun executing.</source>
          <target state="translated">작업이 실행되도록 예약되었지만 아직 실행되지 않았습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>