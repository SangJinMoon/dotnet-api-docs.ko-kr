<Type Name="Parallel" FullName="System.Threading.Tasks.Parallel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0ccd8e8796d91623d453ef299472d90582525e77" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407713" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Parallel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Parallel extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Parallel" />
  <TypeSignature Language="VB.NET" Value="Public Class Parallel" />
  <TypeSignature Language="C++ CLI" Value="public ref class Parallel abstract sealed" />
  <TypeSignature Language="F#" Value="type Parallel = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="6cc37-101">병렬 루프 및 영역에 대한 지원을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6cc37-101">Provides support for parallel loops and regions.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-102"><xref:System.Threading.Tasks.Parallel> 클래스는 각 루프 및 문 집합의 실행에 대 한 루프와 같은 일반적인 작업에 대 한 병렬 대체 라이브러리 기반 데이터를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-102">The <xref:System.Threading.Tasks.Parallel> class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cc37-103">이 예제에서는 여러 언어 구문을 사용 하 여 병렬 루프를 구현 하는 데 여러 가지 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-103">This example demonstrates several approaches to implementing a parallel loop using multiple language constructs.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#07](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelintro.cs#07)]
 [!code-vb[System.Threading.Tasks.Parallel#07](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelintro.vb#07)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="6cc37-104">모든 공용 및 보호 된 구성원 <see cref="T:System.Threading.Tasks.Parallel" /> 는 스레드로부터 안전 하 고 여러 스레드에서 동시에 사용할 수 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6cc37-104">All public and protected members of <see cref="T:System.Threading.Tasks.Parallel" /> are thread-safe and may be used concurrently from multiple threads.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="For">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cc37-105">반복이 병렬로 실행될 수 있는 <see langword="for" />(Visual Basic의 경우 <see langword="For" />) 루프를 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-105">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="6cc37-106">시작 인덱스(포함)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-106">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="6cc37-107">끝 인덱스(제외)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-107">The end index, exclusive.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-108">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-108">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-109">반복을 병렬로 실행할 수 있고 루프 상태를 모니터링 및 조작할 수 있는 <see langword="for" />(Visual Basic의 경우 <see langword="For" />) 루프를 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-109">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-110">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-110">A  structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-111">`body` 대리자가 반복 범위에서 각 값에 대해 한 번만 호출 (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="6cc37-111">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="6cc37-112">두 개의 인수로 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-112">It is provided with two arguments:</span></span>  
  
-   <span data-ttu-id="6cc37-113"><xref:System.Int32> 반복 횟수를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-113">An <xref:System.Int32> value that represents the iteration count.</span></span>  
  
-   <span data-ttu-id="6cc37-114">A <xref:System.Threading.Tasks.ParallelLoopState> 는 중간 루프를 중단 하는 데 사용할 수 있는 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="6cc37-114">A <xref:System.Threading.Tasks.ParallelLoopState> instance that can be used to break out of the loop prematurely.</span></span> <span data-ttu-id="6cc37-115"><xref:System.Threading.Tasks.ParallelLoopState> 개체 컴파일러에 의해 만들어집니다; 사용자 코드에서 인스턴스화할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-115">The <xref:System.Threading.Tasks.ParallelLoopState> object is created by the compiler; it cannot be instantiated in user code.</span></span>  
  
 <span data-ttu-id="6cc37-116">호출 된 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드 알립니다는 `for` 작업을 현재 반복을 실행할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-116">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to execute.</span></span> <span data-ttu-id="6cc37-117">그러나 현재 모든 반복 하나 여전히 할 것 이미 하지 않은 경우에 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-117">However, all iterations before the current one will still have to be executed if they haven't already.</span></span>  
  
 <span data-ttu-id="6cc37-118">따라서 호출 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 일반적인 내 중단 작업을 사용 하는 것과 비슷합니다 `for` 언어로 루프과 C#, 하지만 완벽 한 대체 하지 않습니다: 예를 들어,은 현재 반복은 확실 하 게 트리거하지 아닙니다 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-118">Therefore, calling <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="6cc37-119">현재 필요 하지 않습니다. 모든 반복 실행을 사용 하 여는 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드를 사용 하는 대신 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-119">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="6cc37-120">호출 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 알립니다는 `for` 루프 작업은 이미 완료 되어 필수 여부에 상관 앞 이나 뒤 현재 반복 하기 때문에 모든 나머지 모든 반복을 중단 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-120">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="6cc37-121">그러나와 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>에 대 한 다른 반복 실행 되지 것입니다 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-121">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="6cc37-122">루프 영구 종료 되는 경우는 <xref:System.Threading.Tasks.ParallelLoopResult> 반환 되는 구조에는 루프의 완료에 대 한 관련 정보가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-122">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="6cc37-123">경우 `fromInclusive` 보다 크거나 같으면 `toExclusive`, 메서드는 반복을 수행 하지 않고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-123">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cc37-124">다음 예제에서는 루프의 최대 100 개의 반복이 병렬로 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-124">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="6cc37-125">각 반복 1, 000 밀리초를 1에서 임의의 간격에 대 한 일시 중지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-125">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="6cc37-126">루프의 반복에 결정 하는 임의로 생성 된 값은 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-126">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="6cc37-127">인덱스 보다 크면 반복 하는 예제에서 출력으로의 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> 를 호출한 후 시작 하는 속성 값은 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="6cc37-127">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="6cc37-128">루프의 반복은 여전히 때 실행할 수 있기 때문에 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> 메서드가 호출 되 면 각 반복 호출는 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType> 다른 반복이 호출 되어 있는지 여부를 확인 하는 속성의 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="6cc37-128">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="6cc37-129">속성 값이 `true`, 반복의 값을 검사는 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> 속성을 현재 반복 인덱스 값 보다 큰 경우 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-129">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-130">
            <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-130">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-131">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-131">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.Tasks.ParallelLoopState" />
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="6cc37-132">시작 인덱스(포함)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-132">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="6cc37-133">끝 인덱스(제외)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-133">The end index, exclusive.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-134">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-134">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-135">반복이 병렬로 실행될 수 있는 <see langword="for" />(Visual Basic의 경우 <see langword="For" />) 루프를 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-135">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-136">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-136">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-137">`body` 대리자가 반복 범위에서 각 값에 대해 한 번만 호출 (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="6cc37-137">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="6cc37-138">반복 횟수 제공 됩니다 (<xref:System.Int32>) 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-138">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="6cc37-139">경우 `fromInclusive` 보다 크거나 같으면 `toExclusive`, 메서드는 반복을 수행 하지 않고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-139">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cc37-140">다음 예제에서는 <xref:System.Threading.Tasks.Parallel.For%2A> 임의 바이트를 생성 하는 대리자의 100 호출에 대해 메서드 값을 합계를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-140">The following example uses the <xref:System.Threading.Tasks.Parallel.For%2A> method for 100 invocations of a delegate that generates random byte values and computes their sum.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/cs/for1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/vb/for1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-141">
            <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-141">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-142">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-142">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="6cc37-143">시작 인덱스(포함)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-143">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="6cc37-144">끝 인덱스(제외)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-144">The end index, exclusive.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-145">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-145">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-146">64비트 인덱스를 사용하여 반복을 병렬로 실행할 수 있고 루프 상태를 모니터링 및 조작할 수 있는 <see langword="for" />(Visual Basic의 경우 <see langword="For" />) 루프를 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-146">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-147">완료된 루프의 부분에 대한 정보가 포함된 <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-147">A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-148">`body` 대리자가 반복 범위에서 각 값에 대해 한 번만 호출 (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="6cc37-148">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="6cc37-149">매개 변수가 제공 됩니다: 반복 횟수 (<xref:System.Int64>), 및 <xref:System.Threading.Tasks.ParallelLoopState> 중간 루프를 중단 하는 데 사용할 수 있는 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="6cc37-149">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="6cc37-150">호출 된 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드 알립니다는 `for` 현재 반복 실행 될 수 없지만 현재 하기 전에 모든 반복을 수행 하는 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-150">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don’t have to be executed, but all iterations before the current one do.</span></span>  
  
 <span data-ttu-id="6cc37-151">따라서 중단 호출은 비슷합니다 일반적인 내 중단 작업을 사용 하 여 `for` 언어로 루프과 C#, 하지만 완벽 한 대체 하지 않습니다: 예를 들어 않습니다 보장 되지 해당 현재는 확실 하 게 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-151">Therefore, calling Break is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="6cc37-152">현재 필요 하지 않습니다. 모든 반복 실행을 사용 하 여는 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드를 사용 하는 대신 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-152">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="6cc37-153">호출 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 알립니다는 `for` 루프 작업은 이미 완료 되어 필수 여부에 상관 앞 이나 뒤 현재 반복 하기 때문에 모든 나머지 모든 반복을 중단 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-153">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="6cc37-154">그러나와 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>에 대 한 다른 반복 실행 되지 것입니다 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-154">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="6cc37-155">루프 영구 종료 되는 경우는 <xref:System.Threading.Tasks.ParallelLoopResult> 반환 되는 구조에는 루프의 완료에 대 한 관련 정보가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-155">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="6cc37-156">경우 `fromInclusive` 보다 크거나 같으면 `toExclusive`, 메서드는 반복을 수행 하지 않고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-156">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-157">
            <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-157">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-158">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-158">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="6cc37-159">시작 인덱스(포함)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-159">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="6cc37-160">끝 인덱스(제외)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-160">The end index, exclusive.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-161">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-161">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-162">64비트 인덱스를 사용하여 반복을 병렬로 실행할 수 있는 <see langword="for" />(Visual Basic의 경우 <see langword="For" />) 루프를 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-162">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-163">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-163">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-164">`body` 대리자가 반복 범위에서 각 값에 대해 한 번만 호출 (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="6cc37-164">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="6cc37-165">반복 횟수 제공 됩니다 (<xref:System.Int64>) 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-165">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="6cc37-166">경우 `fromInclusive` 보다 크거나 같으면 `toExclusive`, 메서드는 반복을 수행 하지 않고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-166">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-167">
            <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-167">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-168">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-168">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="6cc37-169">시작 인덱스(포함)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-169">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="6cc37-170">끝 인덱스(제외)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-170">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-171">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-171">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-172">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-172">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-173">반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있으며 루프 상태를 모니터링 및 조작할 수 있는 <see langword="for" />(Visual Basic의 경우 <see langword="For" />) 작업을 루프를 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-173">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-174">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-174">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-175">`body` 대리자가 반복 범위에서 각 값에 대해 한 번만 호출 (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="6cc37-175">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="6cc37-176">매개 변수가 제공 됩니다: 반복 횟수 (<xref:System.Int32>), 및 <xref:System.Threading.Tasks.ParallelLoopState> 중간 루프를 중단 하는 데 사용할 수 있는 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="6cc37-176">It is provided with the following parameters: the iteration count (<xref:System.Int32>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="6cc37-177">경우 `fromInclusive` 보다 크거나 같으면 `toExclusive`, 메서드는 반복을 수행 하지 않고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-177">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-178">
            <paramref name="parallelOptions" /> 인수의 <see cref="T:System.Threading.CancellationToken" />이 취소된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-178">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-179">
            <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-179">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-180">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-180">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-181">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-181">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-182">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-182">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="6cc37-183">시작 인덱스(포함)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-183">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="6cc37-184">끝 인덱스(제외)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-184">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-185">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-185">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-186">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-186">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-187">반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있는 <see langword="for" />(Visual Basic에서는 <see langword="For" />) 루프를 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-187">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop in which iterations may run in parallel and loop options can be configured.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-188">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-188">A  structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-189">`body` 대리자가 반복 범위에서 각 값에 대해 한 번만 호출 (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="6cc37-189">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="6cc37-190">반복 횟수 제공 됩니다 (<xref:System.Int32>) 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-190">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="6cc37-191">경우 `fromInclusive` 보다 크거나 같으면 `toExclusive`, 메서드는 반복을 수행 하지 않고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-191">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cc37-192">다음 예제에서는 병렬 루프를 취소 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-192">The following example shows how to cancel a parallel loop:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforcancel.cs#05)]
 [!code-vb[System.Threading.Tasks.Parallel#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforcancel.vb#05)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-193">
            <paramref name="parallelOptions" /> 인수의 <see cref="T:System.Threading.CancellationToken" />이 취소된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-193">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-194">
            <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-194">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-195">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-195">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-196">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-196">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-197">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-197">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="6cc37-198">시작 인덱스(포함)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-198">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="6cc37-199">끝 인덱스(제외)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-199">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-200">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-200">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-201">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-201">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-202">64비트 인덱스를 사용하여 반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있으며 루프 상태를 모니터링 및 조작할 수 있는 <see langword="for" />(Visual Basic의 경우 <see langword="For" />) 루프를 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-202">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-203">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-203">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-204">`body` 대리자가 반복 범위에서 각 값에 대해 한 번만 호출 (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="6cc37-204">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="6cc37-205">매개 변수가 제공 됩니다: 반복 횟수 (<xref:System.Int64>), 및 <xref:System.Threading.Tasks.ParallelLoopState> 중간 루프를 중단 하는 데 사용할 수 있는 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="6cc37-205">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="6cc37-206">경우 `fromInclusive` 보다 크거나 같으면 `toExclusive`, 메서드는 반복을 수행 하지 않고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-206">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cc37-207">사용 하는 방법을 보여 주는 다음 예제는 <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> 메서드는 <xref:System.Threading.Tasks.ParallelOptions> 개체:</span><span class="sxs-lookup"><span data-stu-id="6cc37-207">The following example shows how to use the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method with a <xref:System.Threading.Tasks.ParallelOptions> object:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelfor.cs#03)]
 [!code-vb[System.Threading.Tasks.Parallel#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelfor.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-208">
            <paramref name="parallelOptions" /> 인수의 <see cref="T:System.Threading.CancellationToken" />이 취소된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-208">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-209">
            <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-209">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-210">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-210">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-211">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-211">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-212">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-212">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive">
          <span data-ttu-id="6cc37-213">시작 인덱스(포함)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-213">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="6cc37-214">끝 인덱스(제외)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-214">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-215">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-215">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-216">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-216">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-217">64비트 인덱스를 사용하여 반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있는 <see langword="for" />(Visual Basic의 경우 <see langword="For" />) 루프를 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-217">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-218">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-218">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-219">64 비트 인덱스를 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-219">Supports 64-bit indexes.</span></span> <span data-ttu-id="6cc37-220">`body` 대리자가 반복 범위에서 각 값에 대해 한 번만 호출 (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="6cc37-220">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="6cc37-221">반복 횟수 제공 됩니다 (<xref:System.Int64>) 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-221">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="6cc37-222">경우 `fromInclusive` 보다 크거나 같으면 `toExclusive`, 메서드는 반복을 수행 하지 않고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-222">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cc37-223">다음 예제에서는 사용 하는 방법을 보여 줍니다. <xref:System.Threading.Tasks.ParallelOptions> 사용자 지정 작업 스케줄러를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-223">The following example shows how to use <xref:System.Threading.Tasks.ParallelOptions> to specify a custom task scheduler:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#06](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforwithscheduler.cs#06)]
 [!code-vb[System.Threading.Tasks.Parallel#06](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforwithscheduler.vb#06)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-224">
            <paramref name="parallelOptions" /> 인수의 <see cref="T:System.Threading.CancellationToken" />이 취소된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-224">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-225">
            <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-225">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-226">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-226">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-227">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-227">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-228">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-228">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Integer, toExclusive As Integer, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">
          <span data-ttu-id="6cc37-229">스레드 로컬 데이터의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-229">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="fromInclusive">
          <span data-ttu-id="6cc37-230">시작 인덱스(포함)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-230">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="6cc37-231">끝 인덱스(제외)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-231">The end index, exclusive.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="6cc37-232">각 작업에 대한 로컬 데이터의 초기 상태를 반환하는 함수 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-232">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-233">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-233">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="6cc37-234">각 작업의 로컬 상태에 대해 최종 동작을 수행하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-234">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-235">스레드 로컬 데이터를 사용하여 반복을 병렬로 실행할 수 있고 루프 상태를 모니터링 및 조작할 수 있는 <see langword="for" />(Visual Basic의 경우 <see langword="For" />) 루프를 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-235">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-236">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-236">A  structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-237">`body` 대리자가 반복 범위에서 각 값에 대해 한 번만 호출 (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="6cc37-237">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="6cc37-238">매개 변수가 제공 됩니다: 반복 횟수 (<xref:System.Int32>), 즉 <xref:System.Threading.Tasks.ParallelLoopState> 갑자기 중단 루프를 중단 하는 데 사용할 수 있는 인스턴스 및 동일한 스레드에서 실행 하는 반복 간에 공유 될 수 있는 일부 로컬 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-238">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="6cc37-239">`localInit` 대리자 루프의 실행에 참가 하 고 각 작업에 대 한 초기 로컬 상태를 반환 하는 각 작업에 대해 한 번씩 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-239">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="6cc37-240">이러한 초기 상태는 첫 번째에 전달 되 `body` 각 작업에 대 한 호출입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-240">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="6cc37-241">그런 다음 모든 후속 본문 호출은 다음 본문 호출에 전달 되는 가능한 수정된 상태 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-241">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="6cc37-242">각 작업에 대해 마지막 본문 호출에 전달 되는 상태 값을 반환 하는 마지막으로 `localFinally` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-242">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="6cc37-243">`localFinally` 대리자 각 작업의 로컬 상태에 대해 최종 동작을 수행 하는 작업 당 한 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-243">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="6cc37-244">이 대리자는 여러 작업;에서 동시에 호출할 수 있습니다. 따라서 모든 공유 변수에 대 한 액세스를 동기화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-244">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="6cc37-245"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> 메서드 실행을 완료 하는 기존 작업으로의 수명 동안 스레드보다 더 많은 작업을 사용할 수 있습니다 및 새 작업으로 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-245">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="6cc37-246">이렇게 하면 기본 <xref:System.Threading.Tasks.TaskScheduler> 개체 수 있는 기회를 추가, 변경 또는 루프를 처리 하는 스레드를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-246">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="6cc37-247">경우 `fromInclusive` 보다 크거나 같으면 `toExclusive`, 메서드는 반복을 수행 하지 않고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-247">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="6cc37-248">이 메서드를 사용 하는 예제를 참조 하십시오. [하는 방법: 스레드 로컬 변수를 사용 하는 Parallel.For 루프 작성](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-248">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-249">
            <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-249">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-250">-또는- <paramref name="localInit" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-250">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-251">-또는- <paramref name="localFinally" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-251">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-252">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-252">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Long, toExclusive As Long, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">
          <span data-ttu-id="6cc37-253">스레드 로컬 데이터의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-253">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="fromInclusive">
          <span data-ttu-id="6cc37-254">시작 인덱스(포함)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-254">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="6cc37-255">끝 인덱스(제외)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-255">The end index, exclusive.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="6cc37-256">각 작업에 대한 로컬 데이터의 초기 상태를 반환하는 함수 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-256">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-257">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-257">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="6cc37-258">각 작업의 로컬 상태에 대해 최종 동작을 수행하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-258">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-259">64비트 인덱스와 스레드 로컬 데이터를 사용하여 반복을 병렬로 실행할 수 있고 루프 상태를 모니터링 및 조작할 수 있는 <see langword="for" />(Visual Basic의 경우 <see langword="For" />) 루프를 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-259">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic)  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-260">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-260">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-261">`body` 대리자가 반복 범위에서 각 값에 대해 한 번만 호출 (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="6cc37-261">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="6cc37-262">매개 변수가 제공 됩니다: 반복 횟수 (<xref:System.Int64>), 즉 <xref:System.Threading.Tasks.ParallelLoopState> 갑자기 중단 루프를 중단 하는 데 사용할 수 있는 인스턴스와 같은 작업을 실행 하는 반복 간에 공유 될 수 있는 몇 가지 로컬 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-262">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="6cc37-263">`localInit` 대리자 루프의 실행에 참가 하 고 각 작업에 대 한 초기 로컬 상태를 반환 하는 각 작업에 대해 한 번씩 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-263">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="6cc37-264">이러한 초기 상태는 첫 번째에 전달 되 `body` 각 작업에 대 한 호출입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-264">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="6cc37-265">그런 다음 모든 후속 본문 호출은 다음 본문 호출에 전달 되는 가능한 수정된 상태 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-265">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="6cc37-266">각 작업에 대해 마지막 본문 호출에 전달 되는 상태 값을 반환 하는 마지막으로 `localFinally` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-266">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="6cc37-267">`localFinally` 대리자 각 작업의 로컬 상태에 대해 최종 동작을 수행 하는 작업 당 한 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-267">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="6cc37-268">이 대리자는 여러 작업;에서 동시에 호출할 수 있습니다. 따라서 모든 공유 변수에 대 한 액세스를 동기화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-268">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="6cc37-269"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> 메서드 실행을 완료 하는 기존 작업으로의 수명 동안 스레드보다 더 많은 작업을 사용할 수 있습니다 및 새 작업으로 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-269">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="6cc37-270">이렇게 하면 기본 <xref:System.Threading.Tasks.TaskScheduler> 개체 수 있는 기회를 추가, 변경 또는 루프를 처리 하는 스레드를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-270">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="6cc37-271">경우 `fromInclusive` 보다 크거나 같으면 `toExclusive`, 메서드는 반복을 수행 하지 않고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-271">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="6cc37-272">이 메서드를 사용 하는 예제를 참조 하십시오. [하는 방법: 스레드 로컬 변수를 사용 하는 Parallel.For 루프 작성](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-272">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-273">
            <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-273">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-274">-또는- <paramref name="localInit" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-274">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-275">-또는- <paramref name="localFinally" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-275">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-276">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-276">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">
          <span data-ttu-id="6cc37-277">스레드 로컬 데이터의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-277">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="fromInclusive">
          <span data-ttu-id="6cc37-278">시작 인덱스(포함)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-278">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="6cc37-279">끝 인덱스(제외)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-279">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-280">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-280">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="6cc37-281">각 작업에 대한 로컬 데이터의 초기 상태를 반환하는 함수 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-281">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-282">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-282">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="6cc37-283">각 작업의 로컬 상태에 대해 최종 동작을 수행하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-283">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-284">스레드 로컬 데이터를 사용하여 반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있으며 루프 상태를 모니터링 및 조작할 수 있는 <see langword="for" />(Visual Basic의 경우 <see langword="For" />) 루프를 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-284">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic)  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-285">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-285">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-286">`body` 대리자가 반복 범위에서 각 값에 대해 한 번만 호출 (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="6cc37-286">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="6cc37-287">매개 변수가 제공 됩니다: 반복 횟수 (<xref:System.Int32>), 즉 <xref:System.Threading.Tasks.ParallelLoopState> 갑자기 중단 루프를 중단 하는 데 사용할 수 있는 인스턴스와 같은 작업을 실행 하는 반복 간에 공유 될 수 있는 몇 가지 로컬 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-287">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="6cc37-288">`localInit` 대리자 루프의 실행에 참가 하 고 각 작업에 대 한 초기 로컬 상태를 반환 하는 각 작업에 대해 한 번씩 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-288">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="6cc37-289">이러한 초기 상태는 첫 번째에 전달 되 `body` 각 작업에 대 한 호출입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-289">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="6cc37-290">그런 다음 모든 후속 본문 호출은 다음 본문 호출에 전달 되는 가능한 수정된 상태 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-290">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="6cc37-291">각 작업에 대해 마지막 본문 호출에 전달 되는 상태 값을 반환 하는 마지막으로 `localFinally` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-291">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="6cc37-292">`localFinally` 대리자 각 작업의 로컬 상태에 대해 최종 동작을 수행 하는 작업 당 한 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-292">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="6cc37-293">이 대리자는; 여러 스레드에서 동시에 호출할 수 있습니다. 따라서 모든 공유 변수에 대 한 액세스를 동기화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-293">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="6cc37-294"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> 메서드 실행을 완료 하는 기존 작업으로의 수명 동안 스레드보다 더 많은 작업을 사용할 수 있습니다 및 새 작업으로 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-294">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="6cc37-295">이렇게 하면 기본 <xref:System.Threading.Tasks.TaskScheduler> 개체 수 있는 기회를 추가, 변경 또는 루프를 처리 하는 스레드를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-295">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="6cc37-296">경우 `fromInclusive` 보다 크거나 같으면 `toExclusive`, 메서드는 반복을 수행 하지 않고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-296">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cc37-297">다음 예제에서는 스레드 로컬 변수를 사용 하 여 많은 긴 작업의 결과의 합을 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-297">The following example uses thread-local variables to compute the sum of the results of many lengthy operations.</span></span> <span data-ttu-id="6cc37-298">이 예제에서는 병렬 처리 수준-4 개로 제한합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-298">This example limits the degree of parallelism to four.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/threadlocalforwithoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Parallel#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/threadlocalforwithoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-299">
            <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-299">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-300">-또는- <paramref name="localInit" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-300">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-301">-또는- <paramref name="localFinally" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-301">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-302">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-302">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-303">
            <paramref name="parallelOptions" /> 인수의 <see cref="T:System.Threading.CancellationToken" />이 취소된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-303">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-304">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-304">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-305">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-305">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal">
          <span data-ttu-id="6cc37-306">스레드 로컬 데이터의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-306">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="fromInclusive">
          <span data-ttu-id="6cc37-307">시작 인덱스(포함)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-307">The start index, inclusive.</span>
          </span>
        </param>
        <param name="toExclusive">
          <span data-ttu-id="6cc37-308">끝 인덱스(제외)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-308">The end index, exclusive.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-309">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-309">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="6cc37-310">각 스레드에 대한 로컬 데이터의 초기 상태를 반환하는 함수 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-310">The function delegate that returns the initial state of the local data for each thread.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-311">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-311">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="6cc37-312">각 스레드의 로컬 상태에 대해 최종 동작을 수행하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-312">The delegate that performs a final action on the local state of each thread.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-313">64비트 인덱스와 스레드 로컬 데이터를 사용하여 반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있으며 루프 상태를 모니터링 및 조작할 수 있는 <see langword="for" />(Visual Basic의 경우 <see langword="For" />) 루프를 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-313">Executes a <see langword="for" /> (<see langword="For" /> in Visual Basic) loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-314">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-314">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-315">`body` 대리자가 반복 범위에서 각 값에 대해 한 번만 호출 (`fromInclusive`, `toExclusive`).</span><span class="sxs-lookup"><span data-stu-id="6cc37-315">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="6cc37-316">매개 변수가 제공 됩니다: 반복 횟수 (<xref:System.Int64>), 즉 <xref:System.Threading.Tasks.ParallelLoopState> 갑자기 중단 루프를 중단 하는 데 사용할 수 있는 인스턴스 및 동일한 스레드에서 실행 하는 반복 간에 공유 될 수 있는 일부 로컬 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-316">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="6cc37-317">`localInit` 루프의 실행에 참가 하 고 각 스레드에 대 한 초기 로컬 상태를 반환 하는 각 스레드에 대해 대리자를 한 번씩 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-317">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those threads.</span></span> <span data-ttu-id="6cc37-318">이러한 초기 상태는 첫 번째에 전달 되 `body` 각 스레드에 대 한 호출입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-318">These initial states are passed to the first `body` invocations on each thread.</span></span> <span data-ttu-id="6cc37-319">그런 다음 모든 후속 본문 호출은 다음 본문 호출에 전달 되는 가능한 수정된 상태 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-319">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="6cc37-320">각 스레드에 대해 마지막 본문 호출에 전달 되는 상태 값을 반환 하는 마지막으로 `localFinally` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-320">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="6cc37-321">`localFinally` 대리자 각 스레드의 로컬 상태에 대해 최종 동작을 수행 하는 스레드 당 한 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-321">The `localFinally` delegate is invoked once per thread to perform a final action on each thread's local state.</span></span> <span data-ttu-id="6cc37-322">이 대리자는; 여러 스레드에서 동시에 호출할 수 있습니다. 따라서 모든 공유 변수에 대 한 액세스를 동기화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-322">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="6cc37-323"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> 메서드 실행을 완료 하는 기존 작업으로의 수명 동안 스레드보다 더 많은 작업을 사용할 수 있습니다 및 새 작업으로 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-323">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="6cc37-324">이렇게 하면 기본 <xref:System.Threading.Tasks.TaskScheduler> 개체 수 있는 기회를 추가, 변경 또는 루프를 처리 하는 스레드를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-324">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="6cc37-325">경우 `fromInclusive` 보다 크거나 같으면 `toExclusive`, 메서드는 반복을 수행 하지 않고 즉시 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-325">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-326">
            <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-326">The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-327">-또는- <paramref name="localInit" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-327">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-328">-또는- <paramref name="localFinally" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-328">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-329">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-329">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-330">
            <paramref name="parallelOptions" /> 인수의 <see cref="T:System.Threading.CancellationToken" />이 취소된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-330">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-331">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-331">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-332">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-332">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ForEach&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cc37-333">반복이 병렬로 실행될 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each " />) 작업을 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-333">Executes a <see langword="foreach" /> (<see langword="For Each " /> in Visual Basic) operation in which iterations may run in parallel.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As OrderablePartitioner(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-334">에 있는 요소의 형식 <c>소스</c>합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-334">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-335">원래 데이터 소스가 포함된 정렬할 수 있는 파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-335">The orderable partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-336">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-336">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-337">반복을 병렬로 실행할 수 있고 루프 상태를 모니터링 및 조작할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-337">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-338">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-338">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-339">이 오버 로드는 기본 파티션 구조를 재정의 하려는 시나리오에 대 한 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-339">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="6cc37-340">예를 들어, 작은 루프 본문은 범위를 분할 향상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-340">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="6cc37-341"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드에 사용자 지정 파티 셔 너 동적 분할을 지 원하는 데 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-341">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="6cc37-342">자세한 내용은 참조 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 및 [하는 방법: 동적 파티션 구현](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-342">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-343">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-343">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-344">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-344">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cc37-345">
            <paramref name="source" />에서 정렬할 수 있는 파티셔너의 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 속성은 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-345">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6cc37-346">-또는- 소스에서 정렬할 수 있는 파티셔너의 <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> 속성은 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-346">-or-  The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the source orderable partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6cc37-347">-또는- 소스 정렬 가능 파티셔너의 모든 메서드는 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-347">-or-  Any methods in the source orderable partitioner return <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-348">에 있는 요소의 형식 <c>소스</c>합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-348">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-349">원래 데이터 소스가 포함된 파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-349">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-350">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-350">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-351">반복을 병렬로 실행할 수 있고 루프 상태를 모니터링 및 조작할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.Concurrent.Partitioner" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-351">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-352">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-352">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-353">이 오버 로드는 기본 파티션 구조를 재정의 하려는 시나리오에 대 한 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-353">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="6cc37-354">예를 들어, 작은 루프 본문은 범위를 분할 향상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-354">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="6cc37-355"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드에 사용자 지정 파티 셔 너 동적 분할을 지 원하는 데 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-355">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="6cc37-356">자세한 내용은 참조 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 및 [하는 방법: 동적 파티션 구현](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-356">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-357">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-357">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-358">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-358">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cc37-359">
            <paramref name="source" /> Partitioner의 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 속성은 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-359">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6cc37-360">-또는- <paramref name="source" /> 파티셔너의 메서드는 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-360">-or-  A method in the <paramref name="source" /> partitioner returns <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-361">-또는- <paramref name="source" /> 파티셔너의 <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> 메서드가 올바른 파티션 수를 반환하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-361">-or-  The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-362">에 있는 요소의 형식 <c>소스</c>합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-362">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-363">원래 데이터 소스가 포함된 파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-363">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-364">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-364">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-365">반복이 병렬로 실행될 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.Concurrent.Partitioner" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-365">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-366">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-366">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-367">이 오버 로드는 기본 파티션 구조를 재정의 하려는 시나리오에 대 한 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-367">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="6cc37-368">예를 들어, 작은 루프 본문은 범위를 분할 향상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-368">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="6cc37-369"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드에 사용자 지정 파티 셔 너 동적 분할을 지 원하는 데 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-369">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="6cc37-370">자세한 내용은 참조 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 및 [하는 방법: 동적 파티션 구현](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-370">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cc37-371">다음 예제와 함께 사용할 범위 파티 셔 너 구현 하는 방법을 보여 줍니다 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="6cc37-371">The following example shows how to implement a range partitioner for use with <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/cs/rangepartitioner.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/vb/rangepart.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-372">
            <paramref name="source" /> 인수가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-372">The <paramref name="source" /> argument is  <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-373">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-373">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cc37-374">
            <paramref name="source" /> Partitioner의 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 속성은 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-374">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6cc37-375">-또는- <paramref name="source" /> 파티셔너에 있는 모든 메서드가 <see langword="null" />을 반환할 때 throw되는 예외입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-375">-or-  The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-376">-또는- <paramref name="source" /> 파티셔너의 <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> 메서드가 올바른 파티션 수를 반환하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-376">-or-  The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-377">소스의 데이터 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-377">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-378">열거 가능한 데이터 소스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-378">An enumerable data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-379">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-379">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-380">64비트 인덱스를 사용하여 반복을 병렬로 실행할 수 있고 루프 상태를 모니터링 및 조작할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.IEnumerable" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-380">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-381">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-381">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-382">`body` 대리자 각 요소에 대해 한 번씩 호출 되는 `source` 열거 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-382">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="6cc37-383">매개 변수가 제공 됩니다: 현재 요소는 <xref:System.Threading.Tasks.ParallelLoopState> 갑자기 중단 루프를 중단 하는 데 사용할 수 있는 인스턴스 및 현재 요소의 인덱스 (<xref:System.Int64>).</span><span class="sxs-lookup"><span data-stu-id="6cc37-383">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-384">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-384">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-385">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-385">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-386">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-386">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-387">소스의 데이터 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-387">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-388">열거 가능한 데이터 소스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-388">An enumerable data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-389">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-389">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-390">반복을 병렬로 실행할 수 있고 루프 상태를 모니터링 및 조작할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.IEnumerable" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-390">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-391">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-391">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-392">`body` 대리자 각 요소에 대해 한 번씩 호출 되는 `source` 열거 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-392">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="6cc37-393">매개 변수가 제공 됩니다: 현재 요소와 <xref:System.Threading.Tasks.ParallelLoopState> 중간 루프를 중단 하는 데 사용할 수 있는 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="6cc37-393">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-394">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-394">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-395">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-395">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-396">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-396">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-397">소스의 데이터 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-397">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-398">열거 가능한 데이터 소스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-398">An enumerable data source.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-399">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-399">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-400">반복이 병렬로 실행될 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.IEnumerable" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-400">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-401">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-401">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-402">`body` 대리자 각 요소에 대해 한 번씩 호출 되는 `source` 열거 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-402">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="6cc37-403">현재 요소를 매개 변수로 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-403">It is provided with the current element as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cc37-404">다음 예제에서는 <xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29> 모음 및 텍스트 파일에 비 공백 문자 수를 계산 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="6cc37-404">The following example uses the <xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29> method to count the number of vowels and non-whitespace characters in a text file.</span></span> <span data-ttu-id="6cc37-405">이 경우에 <xref:System.Threading.Tasks.ParallelLoopResult> 메서드에서 반환 된 값은 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-405">In this case, the <xref:System.Threading.Tasks.ParallelLoopResult> value returned by the method is ignored.</span></span> <span data-ttu-id="6cc37-406">메모, 작업을 병렬로 실행할 수 있으므로 확인 해야 한다는 카운터 변수가 증가 원자성 작업을 하 고 여러 스레드에서 카운터 변수를 동시에 액세스 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="6cc37-406">Note that, because operations can run in parallel, you must ensure that incrementing the counter variables is an atomic operation, and that multiple threads do not attempt to access the counter variables simultaneously.</span></span> <span data-ttu-id="6cc37-407">이 예제에서는이 위해 사용 하 여는 `lock` 문 (C#) 및 `SyncLock` 문 (Visual Basic의 경우).</span><span class="sxs-lookup"><span data-stu-id="6cc37-407">For this purpose, the example uses the `lock` statement (in C#) and the `SyncLock` statement (in Visual Basic).</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/cs/foreach1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/vb/foreach1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-408">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-408">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-409">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-409">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-410">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-410">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-411">에 있는 요소의 형식 <c>소스</c>합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-411">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-412">원래 데이터 소스가 포함된 정렬할 수 있는 파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-412">The orderable partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-413">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-413">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-414">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-414">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-415">반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있으며 루프 상태를 모니터링 및 조작할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-415">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-416">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-416">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-417">이 오버 로드는 기본 파티션 구조를 재정의 하려는 시나리오에 대 한 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-417">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="6cc37-418">예를 들어, 작은 루프 본문은 범위를 분할 향상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-418">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="6cc37-419"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드에 사용자 지정 파티 셔 너 동적 분할을 지 원하는 데 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-419">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="6cc37-420">자세한 내용은 참조 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 및 [하는 방법: 동적 파티션 구현](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-420">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-421">
            <paramref name="parallelOptions" /> 인수의 <see cref="T:System.Threading.CancellationToken" />이 취소된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-421">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-422">
            <paramref name="source" /> 인수가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-422">The <paramref name="source" /> argument is  <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-423">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-423">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-424">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-424">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-425">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-425">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cc37-426">
            <paramref name="source" />에서 정렬할 수 있는 파티셔너의 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 속성은 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-426">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6cc37-427">-또는- <paramref name="source" />에서 정렬할 수 있는 파티셔너의 <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> 속성은 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-427">-or-  The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6cc37-428">-또는- <paramref name="source" /> 정렬할 수 있는 파티셔너에 있는 모든 메서드가 <see langword="null" />을 반환할 때 throw되는 예외입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-428">-or-  The exception that is thrown when any methods in the <paramref name="source" /> orderable partitioner return <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-429">에 있는 요소의 형식 <c>소스</c>합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-429">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-430">원래 데이터 소스가 포함된 파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-430">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-431">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-431">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-432">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-432">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-433">반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있으며 루프 상태를 모니터링 및 조작할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.Concurrent.Partitioner" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-433">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-434">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-434">A  structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-435">이 오버 로드는 기본 파티션 구조를 재정의 하려는 시나리오에 대 한 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-435">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="6cc37-436">예를 들어, 작은 루프 본문은 범위를 분할 향상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-436">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="6cc37-437"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드에 사용자 지정 파티 셔 너 동적 분할을 지 원하는 데 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-437">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="6cc37-438">자세한 내용은 참조 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 및 [하는 방법: 동적 파티션 구현](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-438">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-439">
            <paramref name="parallelOptions" /> 인수의 <see cref="T:System.Threading.CancellationToken" />이 취소된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-439">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-440">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-440">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-441">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-441">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-442">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-442">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-443">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-443">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cc37-444">
            <paramref name="source" /> Partitioner의 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 속성은 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-444">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6cc37-445">-또는- <paramref name="source" /> 파티셔너에 있는 모든 메서드가 <see langword="null" />을 반환할 때 throw되는 예외입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-445">-or-  The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-446">에 있는 요소의 형식 <c>소스</c>합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-446">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-447">원래 데이터 소스가 포함된 파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-447">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-448">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-448">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-449">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-449">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-450">반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.Concurrent.Partitioner" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-450">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and loop options can be configured.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-451">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-451">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-452">이 오버 로드는 기본 파티션 구조를 재정의 하려는 시나리오에 대 한 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-452">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="6cc37-453">예를 들어, 작은 루프 본문은 범위를 분할 향상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-453">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="6cc37-454"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드에 사용자 지정 파티 셔 너 동적 분할을 지 원하는 데 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-454">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="6cc37-455">자세한 내용은 참조 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 및 [하는 방법: 동적 파티션 구현](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-455">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-456">
            <paramref name="parallelOptions" /> 인수의 <see cref="T:System.Threading.CancellationToken" />이 취소된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-456">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-457">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-457">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-458">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-458">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-459">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-459">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-460">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-460">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cc37-461">
            <paramref name="source" /> Partitioner의 <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> 속성은 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-461">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="6cc37-462">-또는- <paramref name="source" /> 파티셔너에 있는 모든 메서드가 <see langword="null" />을 반환할 때 throw되는 예외입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-462">-or-  The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-463">소스의 데이터 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-463">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-464">열거 가능한 데이터 소스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-464">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-465">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-465">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-466">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-466">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-467">64비트 인덱스를 사용하여 반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있으며 루프 상태를 모니터링 및 조작할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.IEnumerable" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-467">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-468">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-468">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-469">`body` 대리자 각 요소에 대해 한 번씩 호출 되는 `source` 열거 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-469">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="6cc37-470">매개 변수가 제공 됩니다: 현재 요소는 <xref:System.Threading.Tasks.ParallelLoopState> 갑자기 중단 루프를 중단 하는 데 사용할 수 있는 인스턴스 및 현재 요소의 인덱스 (<xref:System.Int64>).</span><span class="sxs-lookup"><span data-stu-id="6cc37-470">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-471">
            <paramref name="parallelOptions" /> 인수의 <see cref="T:System.Threading.CancellationToken" />이 취소된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-471">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-472">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-472">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-473">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-473">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-474">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-474">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-475">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-475">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-476">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-476">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-477">소스의 데이터 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-477">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-478">열거 가능한 데이터 소스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-478">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-479">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-479">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-480">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-480">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-481">반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있으며 루프 상태를 모니터링 및 조작할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.IEnumerable" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-481">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-482">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-482">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-483">`body` 대리자 각 요소에 대해 한 번씩 호출 되는 `source` 열거 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-483">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="6cc37-484">매개 변수가 제공 됩니다: 현재 요소와 <xref:System.Threading.Tasks.ParallelLoopState> 중간 루프를 중단 하는 데 사용할 수 있는 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="6cc37-484">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-485">
            <paramref name="parallelOptions" /> 인수의 <see cref="T:System.Threading.CancellationToken" />이 취소된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-485">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-486">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-486">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-487">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-487">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-488">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-488">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-489">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-489">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-490">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-490">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-491">소스의 데이터 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-491">The type of the data in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-492">열거 가능한 데이터 소스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-492">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-493">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-493">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-494">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-494">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-495">반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.IEnumerable" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-495">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and loop options can be configured.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-496">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-496">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-497">`body` 대리자 각 요소에 대해 한 번씩 호출 되는 `source` 열거 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-497">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="6cc37-498">현재 요소를 매개 변수로 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-498">It is provided with the current element as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-499">
            <paramref name="parallelOptions" /> 인수의 <see cref="T:System.Threading.CancellationToken" />이 취소된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-499">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-500">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-500">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-501">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-501">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-502">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-502">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-503">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-503">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-504">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-504">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As OrderablePartitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-505">에 있는 요소의 형식 <c>소스</c>합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-505">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="6cc37-506">스레드 로컬 데이터의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-506">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-507">원래 데이터 소스가 포함된 정렬할 수 있는 파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-507">The orderable partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="6cc37-508">각 작업에 대한 로컬 데이터의 초기 상태를 반환하는 함수 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-508">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-509">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-509">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="6cc37-510">각 작업의 로컬 상태에 대해 최종 동작을 수행하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-510">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-511">스레드 로컬 데이터를 사용하여 반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있으며 루프 상태를 모니터링 및 조작할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-511">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-512">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-512">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-513">이 오버 로드는 기본 파티션 구조를 재정의 하려는 시나리오에 대 한 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-513">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="6cc37-514">예를 들어, 작은 루프 본문은 범위를 분할 향상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-514">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="6cc37-515"><xref:System.Threading.Tasks.Parallel.ForEach%2A> 메서드에 사용자 지정 파티 셔 너 동적 분할을 지 원하는 데 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-515">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="6cc37-516">자세한 내용은 참조 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 및 [하는 방법: 동적 파티션 구현](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-516">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="6cc37-517">`localInit` 대리자 루프의 실행에 참가 하 고 각 작업에 대 한 초기 로컬 상태를 반환 하는 각 작업에 대해 한 번씩 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-517">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="6cc37-518">이러한 초기 상태는 첫 번째에 전달 되 `body` 각 작업에 대 한 호출입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-518">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="6cc37-519">그런 다음 모든 후속 본문 호출은 다음 본문 호출에 전달 되는 가능한 수정된 상태 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-519">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="6cc37-520">각 작업에 대해 마지막 본문 호출에 전달 되는 상태 값을 반환 하는 마지막으로 `localFinally` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-520">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="6cc37-521">`localFinally` 대리자 각 작업의 로컬 상태에 대해 최종 동작을 수행 하는 작업 당 한 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-521">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="6cc37-522">이 대리자는 여러 작업;에서 동시에 호출할 수 있습니다. 따라서 모든 공유 변수에 대 한 액세스를 동기화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-522">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="6cc37-523"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드 실행을 완료 하는 기존 작업으로의 수명 동안 스레드보다 더 많은 작업을 사용할 수 있습니다 및 새 작업으로 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-523">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="6cc37-524">이렇게 하면 기본 <xref:System.Threading.Tasks.TaskScheduler> 개체 수 있는 기회를 추가, 변경 또는 루프를 처리 하는 스레드를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-524">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-525">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-525">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-526">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-526">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-527">-또는- <paramref name="localInit" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-527">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-528">-또는- <paramref name="localFinally" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-528">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cc37-529">
            <paramref name="source" />
            <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" />의 <see cref="T:System.Collections.Concurrent.Partitioner" /> 속성은 <see langword="false" />를 반환하거나 파티셔너가 <see langword="null" /> 파티션을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-529">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-530">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-530">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As Partitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-531">에 있는 요소의 형식 <c>소스</c>합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-531">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="6cc37-532">스레드 로컬 데이터의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-532">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-533">원래 데이터 소스가 포함된 파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-533">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="6cc37-534">각 작업에 대한 로컬 데이터의 초기 상태를 반환하는 함수 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-534">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-535">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-535">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="6cc37-536">각 작업의 로컬 상태에 대해 최종 동작을 수행하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-536">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-537">스레드 로컬 데이터를 사용하여 반복을 병렬로 실행할 수 있고 루프 상태를 모니터링 및 조작할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.Concurrent.Partitioner" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-537">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-538">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-538">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-539">이 오버 로드는 기본 파티션 구조를 재정의 하려는 시나리오에 대 한 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-539">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="6cc37-540">예를 들어, 작은 루프 본문은 범위를 분할 향상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-540">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="6cc37-541"><xref:System.Threading.Tasks.Parallel.ForEach%2A> 메서드에 사용자 지정 파티 셔 너 동적 분할을 지 원하는 데 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-541">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="6cc37-542">자세한 내용은 참조 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 및 [하는 방법: 동적 파티션 구현](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-542">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="6cc37-543">`localInit` 루프의 실행에 참가 하 고 각 작업에 대 한 초기 로컬 상태를 반환 하는 각 스레드에 대해 대리자를 한 번씩 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-543">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="6cc37-544">이러한 초기 상태는 첫 번째에 전달 되 `body` 각 작업에 대 한 호출입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-544">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="6cc37-545">그런 다음 모든 후속 본문 호출은 다음 본문 호출에 전달 되는 가능한 수정된 상태 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-545">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="6cc37-546">각 작업에 대해 마지막 본문 호출에 전달 되는 상태 값을 반환 하는 마지막으로 `localFinally` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-546">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="6cc37-547">`localFinally` 대리자 각 작업의 로컬 상태에 대해 최종 동작을 수행 하는 작업 당 한 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-547">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="6cc37-548">이 대리자는 여러 작업;에서 동시에 호출할 수 있습니다. 따라서 모든 공유 변수에 대 한 액세스를 동기화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-548">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="6cc37-549"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드 실행을 완료 하는 기존 작업으로의 수명 동안 스레드보다 더 많은 작업을 사용할 수 있습니다 및 새 작업으로 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-549">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="6cc37-550">이렇게 하면 기본 <xref:System.Threading.Tasks.TaskScheduler> 개체 수 있는 기회를 추가, 변경 또는 루프를 처리 하는 스레드를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-550">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-551">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-551">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-552">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-552">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-553">-또는- <paramref name="localInit" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-553">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-554">-또는- <paramref name="localFinally" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-554">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cc37-555">
            <paramref name="source" />
            <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" />의 <see cref="T:System.Collections.Concurrent.Partitioner" /> 속성은 <see langword="false" />를 반환하거나 파티셔너가 <see langword="null" /> 파티션을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-555">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-556">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-556">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-557">소스의 데이터 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-557">The type of the data in the source.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="6cc37-558">스레드 로컬 데이터의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-558">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-559">열거 가능한 데이터 소스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-559">An enumerable data source.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="6cc37-560">각 작업에 대한 로컬 데이터의 초기 상태를 반환하는 함수 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-560">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-561">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-561">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="6cc37-562">각 작업의 로컬 상태에 대해 최종 동작을 수행하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-562">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-563">스레드 로컬 데이터를 사용하여 반복을 병렬로 실행할 수 있고 루프 상태를 모니터링 및 조작할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.IEnumerable" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-563">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-564">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-564">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-565">`body` 대리자 각 요소에 대해 한 번씩 호출 되는 `source` 열거 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-565">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="6cc37-566">매개 변수가 제공 됩니다: 현재 요소는 <xref:System.Threading.Tasks.ParallelLoopState> 중간 루프를 중단 하는 데 사용할 수 있는 인스턴스, 현재 요소의 인덱스 (<xref:System.Int64>), 및 실행 하는 반복 간에 공유 될 수 있는 일부 로컬 상태 동일한 스레드에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-566">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="6cc37-567">`localInit` 대리자 루프의 실행에 참가 하 고 각 작업에 대 한 초기 로컬 상태를 반환 하는 각 작업에 대해 한 번씩 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-567">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="6cc37-568">이러한 초기 상태는 첫 번째에 전달 되 `body` 각 작업에 대 한 호출입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-568">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="6cc37-569">그런 다음 모든 후속 본문 호출은 다음 본문 호출에 전달 되는 가능한 수정된 상태 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-569">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="6cc37-570">각 작업에 대해 마지막 본문 호출에 전달 되는 상태 값을 반환 하는 마지막으로 `localFinally` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-570">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="6cc37-571">`localFinally` 대리자 각 작업의 로컬 상태에 대해 최종 동작을 수행 하는 작업 당 한 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-571">The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state.</span></span> <span data-ttu-id="6cc37-572">이 대리자는 여러 작업;에서 동시에 호출할 수 있습니다. 따라서 모든 공유 변수에 대 한 액세스를 동기화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-572">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="6cc37-573"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드 실행을 완료 하는 기존 작업으로의 수명 동안 스레드보다 더 많은 작업을 사용할 수 있습니다 및 새 작업으로 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-573">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="6cc37-574">이렇게 하면 기본 <xref:System.Threading.Tasks.TaskScheduler> 개체 수 있는 기회를 추가, 변경 또는 루프를 처리 하는 스레드를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-574">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-575">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-575">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-576">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-576">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-577">-또는- <paramref name="localInit" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-577">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-578">-또는- <paramref name="localFinally" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-578">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-579">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-579">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-580">소스의 데이터 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-580">The type of the data in the source.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="6cc37-581">스레드 로컬 데이터의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-581">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-582">열거 가능한 데이터 소스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-582">An enumerable data source.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="6cc37-583">각 작업에 대한 로컬 데이터의 초기 상태를 반환하는 함수 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-583">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-584">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-584">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="6cc37-585">각 작업의 로컬 상태에 대해 최종 동작을 수행하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-585">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-586">스레드 로컬 데이터를 사용하여 반복을 병렬로 실행할 수 있고 루프 상태를 모니터링 및 조작할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.IEnumerable" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-586">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-587">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-587">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-588">`body` 대리자 각 요소에 대해 한 번씩 호출 되는 `source` 열거 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-588">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="6cc37-589">매개 변수가 제공 됩니다: 현재 요소는 <xref:System.Threading.Tasks.ParallelLoopState> 갑자기 중단 루프를 중단 하는 데 사용할 수 있는 인스턴스 및 동일한 스레드에서 실행 하는 반복 간에 공유 될 수 있는 일부 로컬 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-589">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="6cc37-590">`localInit` 대리자 루프의 실행에 참가 하 고 각 작업에 대 한 초기 로컬 상태를 반환 하는 각 작업에 대해 한 번씩 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-590">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="6cc37-591">이러한 초기 상태는 첫 번째에 전달 되 `body` 각 작업에 대 한 호출입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-591">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="6cc37-592">그런 다음 모든 후속 본문 호출은 다음 본문 호출에 전달 되는 가능한 수정된 상태 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-592">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="6cc37-593">각 작업에 대해 마지막 본문 호출에 전달 되는 상태 값을 반환 하는 마지막으로 `localFinally` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-593">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="6cc37-594">`localFinally` 대리자 각 작업의 로컬 상태에 대해 최종 동작을 수행 하는 스레드 당 한 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-594">The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state.</span></span> <span data-ttu-id="6cc37-595">이 대리자는 여러 작업;에서 동시에 호출할 수 있습니다. 따라서 모든 공유 변수에 대 한 액세스를 동기화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-595">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="6cc37-596"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드 실행을 완료 하는 기존 작업으로의 수명 동안 스레드보다 더 많은 작업을 사용할 수 있습니다 및 새 작업으로 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-596">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="6cc37-597">이렇게 하면 기본 <xref:System.Threading.Tasks.TaskScheduler> 개체 수 있는 기회를 추가, 변경 또는 루프를 처리 하는 스레드를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-597">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cc37-598">사용 하는 방법을 보여 주는 다음 예제는 <xref:System.Threading.Tasks.Parallel.ForEach%2A> 로컬 상태 메서드:</span><span class="sxs-lookup"><span data-stu-id="6cc37-598">The following example shows how to use a <xref:System.Threading.Tasks.Parallel.ForEach%2A> method with local state:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforeach.cs#02)]
 [!code-vb[System.Threading.Tasks.Parallel#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforeach.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-599">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-599">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-600">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-600">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-601">-또는- <paramref name="localInit" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-601">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-602">-또는- <paramref name="localFinally" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-602">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-603">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-603">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-604">에 있는 요소의 형식 <c>소스</c>합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-604">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="6cc37-605">스레드 로컬 데이터의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-605">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-606">원래 데이터 소스가 포함된 정렬할 수 있는 파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-606">The orderable partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-607">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-607">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="6cc37-608">각 작업에 대한 로컬 데이터의 초기 상태를 반환하는 함수 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-608">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-609">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-609">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="6cc37-610">각 작업의 로컬 상태에 대해 최종 동작을 수행하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-610">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-611">64비트 인덱스와 스레드 로컬 데이터를 사용하여 반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있으며 루프 상태를 모니터링 및 조작할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-611">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-612">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-612">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-613">이 오버 로드는 기본 파티션 구조를 재정의 하려는 시나리오에 대 한 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-613">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="6cc37-614">예를 들어, 작은 루프 본문은 범위를 분할 향상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-614">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="6cc37-615"><xref:System.Threading.Tasks.Parallel.ForEach%2A> 메서드에 사용자 지정 파티 셔 너 동적 분할을 지 원하는 데 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-615">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="6cc37-616">자세한 내용은 참조 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 및 [하는 방법: 동적 파티션 구현](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-616">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="6cc37-617">`localInit` 대리자 루프의 실행에 참가 하 고 각 작업에 대 한 초기 로컬 상태를 반환 하는 각 작업에 대해 한 번씩 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-617">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="6cc37-618">이러한 초기 상태는 첫 번째에 전달 되 `body` 각 작업에 대 한 호출입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-618">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="6cc37-619">그런 다음 모든 후속 본문 호출은 다음 본문 호출에 전달 되는 가능한 수정된 상태 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-619">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="6cc37-620">각 스레드에 대해 마지막 본문 호출에 전달 되는 상태 값을 반환 하는 마지막으로 `localFinally` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-620">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="6cc37-621">`localFinally` 대리자 각 작업의 로컬 상태에 대해 최종 동작을 수행 하는 작업 당 한 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-621">The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state.</span></span> <span data-ttu-id="6cc37-622">이 대리자는 여러 작업;에서 동시에 호출할 수 있습니다. 따라서 모든 공유 변수에 대 한 액세스를 동기화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-622">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="6cc37-623"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드 실행을 완료 하는 기존 작업으로의 수명 동안 스레드보다 더 많은 작업을 사용할 수 있습니다 및 새 작업으로 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-623">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="6cc37-624">이렇게 하면 기본 <xref:System.Threading.Tasks.TaskScheduler> 개체 수 있는 기회를 추가, 변경 또는 루프를 처리 하는 스레드를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-624">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-625">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-625">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-626">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-626">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-627">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-627">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-628">-또는- <paramref name="localInit" /> 또는 <paramref name="localFinally" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-628">-or-  The <paramref name="localInit" /> or <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cc37-629">
            <paramref name="source" />
            <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" />의 <see cref="T:System.Collections.Concurrent.Partitioner" /> 속성은 <see langword="false" />를 반환하거나 파티셔너가 <see langword="null" /> 파티션을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-629">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-630">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-630">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-631">
            <paramref name="parallelOptions" /> 인수의 <see cref="T:System.Threading.CancellationToken" />이 취소된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-631">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-632">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-632">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-633">에 있는 요소의 형식 <c>소스</c>합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-633">The type of the elements in <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="6cc37-634">스레드 로컬 데이터의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-634">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-635">원래 데이터 소스가 포함된 파티셔너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-635">The partitioner that contains the original data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-636">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-636">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="6cc37-637">각 작업에 대한 로컬 데이터의 초기 상태를 반환하는 함수 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-637">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-638">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-638">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="6cc37-639">각 작업의 로컬 상태에 대해 최종 동작을 수행하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-639">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-640">스레드 로컬 데이터를 사용하여 반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있으며 루프 상태를 모니터링 및 조작할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.Concurrent.Partitioner" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-640">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation  with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-641">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-641">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-642">이 오버 로드는 기본 파티션 구조를 재정의 하려는 시나리오에 대 한 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-642">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="6cc37-643">예를 들어, 작은 루프 본문은 범위를 분할 향상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-643">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="6cc37-644"><xref:System.Threading.Tasks.Parallel.ForEach%2A> 메서드에 사용자 지정 파티 셔 너 동적 분할을 지 원하는 데 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-644">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="6cc37-645">이 오버 로드는 정적 범위 분할에 따른 이점을 얻을 수 있는 작은 루프 본문의 시나리오에 대해 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-645">This overload is provided for scenarios with small loop bodies that might benefit from static range partitioning.</span></span> <span data-ttu-id="6cc37-646">파티 셔 너 동적 파티션을 지원 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-646">Partitioners must support dynamic partitions.</span></span>  <span data-ttu-id="6cc37-647">자세한 내용은 참조 [PLINQ 및 TPL에 대 한 사용자 지정 파티 셔 너](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 및 [하는 방법: 동적 파티션 구현](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-647">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="6cc37-648">`localInit` 대리자 루프의 실행에 참가 하 고 각 작업에 대 한 초기 로컬 상태를 반환 하는 각 작업에 대해 한 번씩 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-648">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="6cc37-649">이러한 초기 상태는 첫 번째에 전달 되 `body` 각 작업에 대 한 호출입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-649">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="6cc37-650">그런 다음 모든 후속 본문 호출은 다음 본문 호출에 전달 되는 가능한 수정된 상태 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-650">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="6cc37-651">각 작업에 대해 마지막 본문 호출에 전달 되는 상태 값을 반환 하는 마지막으로 `localFinally` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-651">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="6cc37-652">`localFinally` 대리자 각 작업의 로컬 상태에 대해 최종 동작을 수행 하는 작업 당 한 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-652">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="6cc37-653">이 대리자는 여러 작업;에서 동시에 호출할 수 있습니다. 따라서 모든 공유 변수에 대 한 액세스를 동기화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-653">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="6cc37-654"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드 실행을 완료 하는 기존 작업으로의 수명 동안 스레드보다 더 많은 작업을 사용할 수 있습니다 및 새 작업으로 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-654">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="6cc37-655">이렇게 하면 기본 <xref:System.Threading.Tasks.TaskScheduler> 개체 수 있는 기회를 추가, 변경 또는 루프를 처리 하는 스레드를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-655">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-656">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-656">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-657">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-657">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-658">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-658">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-659">-또는- <paramref name="localInit" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-659">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-660">-또는- <paramref name="localFinally" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-660">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="6cc37-661">
            <paramref name="source" />
            <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" />의 <see cref="T:System.Collections.Concurrent.Partitioner" /> 속성은 <see langword="false" />를 반환하거나 파티셔너가 <see langword="null" /> 파티션을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-661">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-662">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-662">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-663">
            <paramref name="parallelOptions" /> 인수의 <see cref="T:System.Threading.CancellationToken" />이 취소된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-663">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-664">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-664">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-665">소스의 데이터 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-665">The type of the data in the source.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="6cc37-666">스레드 로컬 데이터의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-666">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-667">열거 가능한 데이터 소스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-667">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-668">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-668">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="6cc37-669">각 작업에 대한 로컬 데이터의 초기 상태를 반환하는 함수 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-669">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-670">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-670">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="6cc37-671">각 작업의 로컬 상태에 대해 최종 동작을 수행하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-671">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-672">스레드 로컬 데이터와 64비트 인덱스를 사용하여 반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있으며 루프 상태를 모니터링 및 조작할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.IEnumerable" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-672">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data and 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-673">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-673">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-674">`body` 대리자 각 요소에 대해 한 번씩 호출 되는 `source` 열거 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-674">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="6cc37-675">매개 변수가 제공 됩니다: 현재 요소는 <xref:System.Threading.Tasks.ParallelLoopState> 중간 루프를 중단 하는 데 사용할 수 있는 인스턴스, 현재 요소의 인덱스 (<xref:System.Int64>), 및 실행 하는 반복 간에 공유 될 수 있는 일부 로컬 상태 동일한 스레드에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-675">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="6cc37-676">`localInit` 대리자 루프의 실행에 참가 하 고 각 작업에 대 한 초기 로컬 상태를 반환 하는 각 작업에 대해 한 번씩 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-676">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="6cc37-677">이러한 초기 상태는 첫 번째에 전달 되 `body` 각 작업에 대 한 호출입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-677">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="6cc37-678">그런 다음 모든 후속 본문 호출은 다음 본문 호출에 전달 되는 가능한 수정된 상태 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-678">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="6cc37-679">각 작업에 대해 마지막 본문 호출에 전달 되는 상태 값을 반환 하는 마지막으로 `localFinally` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-679">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="6cc37-680">`localFinally` 대리자 각 작업의 로컬 상태에 대해 최종 동작을 수행 하는 스레드 당 한 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-680">The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state.</span></span> <span data-ttu-id="6cc37-681">이 대리자는 여러 작업;에서 동시에 호출할 수 있습니다. 따라서 모든 공유 변수에 대 한 액세스를 동기화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-681">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="6cc37-682"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드 실행을 완료 하는 기존 작업으로의 수명 동안 스레드보다 더 많은 작업을 사용할 수 있습니다 및 새 작업으로 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-682">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="6cc37-683">이렇게 하면 기본 <xref:System.Threading.Tasks.TaskScheduler> 개체 수 있는 기회를 추가, 변경 또는 루프를 처리 하는 스레드를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-683">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-684">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-684">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-685">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-685">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-686">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-686">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-687">-또는- <paramref name="localInit" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-687">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-688">-또는- <paramref name="localFinally" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-688">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-689">
            <paramref name="parallelOptions" /> 인수의 <see cref="T:System.Threading.CancellationToken" />이 취소된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-689">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-690">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-690">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-691">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-691">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="6cc37-692">소스의 데이터 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-692">The type of the data in the source.</span>
          </span>
        </typeparam>
        <typeparam name="TLocal">
          <span data-ttu-id="6cc37-693">스레드 로컬 데이터의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-693">The type of the thread-local data.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="6cc37-694">열거 가능한 데이터 소스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-694">An enumerable data source.</span>
          </span>
        </param>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-695">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-695">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="localInit">
          <span data-ttu-id="6cc37-696">각 작업에 대한 로컬 데이터의 초기 상태를 반환하는 함수 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-696">The function delegate that returns the initial state of the local data for each task.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="6cc37-697">반복당 한 번씩 호출되는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-697">The delegate that is invoked once per iteration.</span>
          </span>
        </param>
        <param name="localFinally">
          <span data-ttu-id="6cc37-698">각 작업의 로컬 상태에 대해 최종 동작을 수행하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-698">The delegate that performs a final action on the local state of each task.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-699">스레드 로컬 데이터를 사용하여 반복을 병렬로 실행할 수 있고 루프 옵션을 구성할 수 있으며 루프 상태를 모니터링 및 조작할 수 있는 <see langword="foreach" />(Visual Basic의 경우 <see langword="For Each" />) 작업을 <see cref="T:System.Collections.IEnumerable" />에 대해 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-699">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated..</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6cc37-700">완료된 루프의 부분에 대한 정보가 포함된 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-700">A structure that contains information about which portion of the loop completed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-701">`body` 대리자 각 요소에 대해 한 번씩 호출 되는 `source` 열거 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-701">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="6cc37-702">매개 변수가 제공 됩니다: 현재 요소는 <xref:System.Threading.Tasks.ParallelLoopState> 갑자기 중단 루프를 중단 하는 데 사용할 수 있는 인스턴스 및 동일한 스레드에서 실행 하는 반복 간에 공유 될 수 있는 일부 로컬 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-702">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="6cc37-703">`localInit` 대리자 루프의 실행에 참가 하 고 각 작업에 대 한 초기 로컬 상태를 반환 하는 각 작업에 대해 한 번씩 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-703">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="6cc37-704">이러한 초기 상태는 첫 번째에 전달 되 `body` 각 작업에 대 한 호출입니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-704">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="6cc37-705">그런 다음 모든 후속 본문 호출은 다음 본문 호출에 전달 되는 가능한 수정된 상태 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-705">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="6cc37-706">각 작업에 대해 마지막 본문 호출에 전달 되는 상태 값을 반환 하는 마지막으로 `localFinally` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-706">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="6cc37-707">`localFinally` 대리자 각 작업의 로컬 상태에 대해 최종 동작을 수행 하는 스레드 당 한 번 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-707">The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state.</span></span> <span data-ttu-id="6cc37-708">이 대리자는 여러 작업;에서 동시에 호출할 수 있습니다. 따라서 모든 공유 변수에 대 한 액세스를 동기화 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-708">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="6cc37-709"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드 실행을 완료 하는 기존 작업으로의 수명 동안 스레드보다 더 많은 작업을 사용할 수 있습니다 및 새 작업으로 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-709">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="6cc37-710">이렇게 하면 기본 <xref:System.Threading.Tasks.TaskScheduler> 개체 수 있는 기회를 추가, 변경 또는 루프를 처리 하는 스레드를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-710">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-711">
            <paramref name="source" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-711">The <paramref name="source" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-712">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-712">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-713">-또는- <paramref name="body" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-713">-or-  The <paramref name="body" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-714">-또는- <paramref name="localInit" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-714">-or-  The <paramref name="localInit" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-715">-또는- <paramref name="localFinally" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-715">-or-  The <paramref name="localFinally" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-716">
            <paramref name="parallelOptions" /> 인수의 <see cref="T:System.Threading.CancellationToken" />이 취소된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-716">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-717">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-717">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-718">모든 개별 예외를 포함하는 예외는 스레드에서 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-718">The exception that contains all the individual exceptions thrown on all threads.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6cc37-719">각각의 제공된 동작을 가능하면 병렬로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-719">Executes each of the provided actions, possibly in parallel.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Action[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Invoke (ParamArray actions As Action())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke actions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actions">
          <span data-ttu-id="6cc37-720">실행할 <see cref="T:System.Action" />의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-720">An array of <see cref="T:System.Action" /> to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-721">각각의 제공된 동작을 가능하면 병렬로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-721">Executes each of the provided actions, possibly in parallel.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-722">이 메서드는 작업 집합을 잠재적으로 병렬로 실행 데 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-722">This method can be used to execute a set of operations, potentially in parallel.</span></span>  
  
 <span data-ttu-id="6cc37-723">동시에 실행 되는지 여부 또는 작업이 실행 되는 순서는 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-723">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="6cc37-724">완료할 때까지 각각의 제공 된 작업, 완료 정상 또는 뛰어난 종료로 인해 발생 하는 여부에 관계 없이이 메서드를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-724">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="6cc37-725">자세한 내용은 [방법: Parallel.Invoke를 사용하여 병렬 작업 실행](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="6cc37-725">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6cc37-726">사용 하는 방법을 보여 주는이 예제는 <xref:System.Threading.Tasks.Parallel.Invoke%2A> 다른 메서드, 익명 대리자 및 람다 식을 사용 하 여 메서드.</span><span class="sxs-lookup"><span data-stu-id="6cc37-726">This example demonstrates how to use the <xref:System.Threading.Tasks.Parallel.Invoke%2A> method with other methods, anonymous delegates, and lambda expressions.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelinvoke.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelinvoke.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-727">
            <paramref name="actions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-727">The <paramref name="actions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-728">
            <paramref name="actions" /> 배열에 있는 모든 작업이 예외를 throw하는 경우 throw되는 예외입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-728">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cc37-729">
            <paramref name="actions" /> 배열에 <see langword="null" /> 요소가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-729">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (System.Threading.Tasks.ParallelOptions parallelOptions, params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(System::Threading::Tasks::ParallelOptions ^ parallelOptions, ... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Threading.Tasks.ParallelOptions * Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke (parallelOptions, actions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parallelOptions">
          <span data-ttu-id="6cc37-730">이 작업의 동작을 구성하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-730">An object that configures the behavior of this operation.</span>
          </span>
        </param>
        <param name="actions">
          <span data-ttu-id="6cc37-731">실행할 동작의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-731">An array of actions to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6cc37-732">사용자가 작업을 취소하지 않는다면 제공된 각 작업을 가능한 한 병렬로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-732">Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6cc37-733">이 메서드는 작업 집합을 잠재적으로 병렬로 실행 데 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-733">This method can be used to execute a set of operations, potentially in parallel.</span></span> <span data-ttu-id="6cc37-734">로 전달 된 취소 토큰은 <xref:System.Threading.Tasks.ParallelOptions> 구조에는 전체 작업을 취소 하려면 호출자 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-734">The cancellation token passed in with the <xref:System.Threading.Tasks.ParallelOptions> structure enables the caller to cancel the entire operation.</span></span> <span data-ttu-id="6cc37-735">자세한 내용은 [관리되는 스레드의 취소](~/docs/standard/threading/cancellation-in-managed-threads.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="6cc37-735">For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
 <span data-ttu-id="6cc37-736">동시에 실행 되는지 여부 또는 작업이 실행 되는 순서는 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-736">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="6cc37-737">완료할 때까지 각각의 제공 된 작업, 완료 정상 또는 뛰어난 종료로 인해 발생 하는 여부에 관계 없이이 메서드를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="6cc37-737">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="6cc37-738">자세한 내용은 [방법: Parallel.Invoke를 사용하여 병렬 작업 실행](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="6cc37-738">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="6cc37-739">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationToken" />이 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-739">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> is set.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="6cc37-740">
            <paramref name="actions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-740">The <paramref name="actions" /> argument is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="6cc37-741">-또는- <paramref name="parallelOptions" /> 인수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-741">-or-  The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AggregateException">
          <span data-ttu-id="6cc37-742">
            <paramref name="actions" /> 배열에 있는 모든 작업이 예외를 throw하는 경우 throw되는 예외입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-742">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="6cc37-743">
            <paramref name="actions" /> 배열에 <see langword="null" /> 요소가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-743">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="6cc37-744">
            <paramref name="parallelOptions" />의 <see cref="T:System.Threading.CancellationTokenSource" />과 연결된 <see cref="T:System.Threading.CancellationToken" />가 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6cc37-744">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>