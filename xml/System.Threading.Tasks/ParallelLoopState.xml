<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ce5700b68f4a6ba69f5224dd0dd9b977cbfc8288" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407492" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>병렬 루프의 반복이 다른 반복과 상호 작용하도록 합니다. 이 클래스의 인스턴스는 <see cref="T:System.Threading.Tasks.Parallel" /> 클래스에 의해 각 루프에 제공됩니다. 사용자 코드에 인스턴스를 만들 수는 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 참고가이 클래스의 인스턴스를 인스턴스화할 수 없습니다. 에 대 한 호출에서 인수로 컴파일러에서 자동으로 생성 되는 <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> 또는 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드. 예제에서는 그림을 제공합니다.  
  
 와 같은 생성 `for` 및 `foreach` (C#의) 및 `For` 및 `For Each` (Visual Basic)에서는 순차적으로 또는 집합에 있는 첫 번째 개체에서 가장 높은 최저 인덱스에서 마지막까지 실행 합니다. 반면,는 <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> 및 <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> 메서드는 그렇지 않습니다. 루프의 각 반복을 병렬로 실행할 때문에 시작 하 고 순서에 관계 없이 종료 수 있습니다. <xref:System.Threading.Tasks.ParallelLoopState> 서로 상호 작용 하 여 병렬 루프의 반복이 개별 클래스를 사용 합니다. <xref:System.Threading.Tasks.ParallelLoopState> 클래스 수 있습니다.  
  
-   현재 반복을 종료 하 고 호출 하 여 처음부터 모든 추가 반복을 방지는 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드. 이미 실행을 시작 하는 반복에는 영향을 주지 않습니다.  
  
-   현재 인덱스 보다 큰 인덱스를 포함 하는 반복 호출 하 여 실행할 수 없도록 방지는 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드. 이미 실행을 시작 하는 반복에는 영향을 주지 않습니다.  
  
-   값을 검색 하 여 루프 반복에서 예외가 발생 했는지 확인는 <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> 속성입니다.  
  
-   루프의 반복이 호출 하는지 여부를 결정는 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 값을 검색 하 여 메서드에 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 속성입니다. 이 속성을 사용 하 여 호출 하기 전에 시작 된 루프의 반복에서 반환할 수는 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드 하지만 계속 실행 됩니다.  
  
-   루프의 반복이 호출 하는지 여부를 결정은 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 또는 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드 값을 검색 하 여 예외를 throw 또는 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 속성입니다.  
  
-   인덱스의 값을 검색 하 여 Break가 호출 하는 반복의 인덱스 보다 큽니다. 장기 실행 반복에서 종료는 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 루프의 최대 100 개의 반복이 병렬로 실행합니다. 각 반복 1, 000 밀리초를 1에서 임의의 간격에 대 한 일시 중지 됩니다. 루프의 반복에 결정 하는 임의로 생성 된 값은 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드를 호출 합니다. 인덱스 보다 크면 반복 하는 예제에서 출력으로의 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 를 호출한 후 시작 하는 속성 값은 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 루프의 반복은 여전히 때 실행할 수 있기 때문에 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드가 호출 되 면 각 반복 호출는 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 다른 반복이 호출 되어 있는지 여부를 확인 하는 속성의 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드. 속성 값이 `true`, 반복의 값을 검사는 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성을 현재 반복 인덱스 값 보다 큰 경우 즉시 반환 합니다.  
  
 ]]></format>
    </remarks>
    <threadsafe>A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> 인스턴스는 인스턴스가 제공 된 루프의 본문 내 에서만 사용 될 것입니다.  제공 된 사용 하 여 안전 하지 않습니다 <see cref="T:System.Threading.Tasks.ParallelLoopState" /> 관련된 루프 후 인스턴스 종료 나 명시적으로 다른 스레드에서에 전달할 안전성 고 언제 든 지 액세스할 이러한 스레드에 있습니다.  다른 <see cref="T:System.Threading.Tasks.ParallelLoopState" /> 인스턴스 루프에 관련 된 각 스레드에 제공 됩니다.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 반복 이외에 시스템에서 편의상 빨리 수행하는 반복에서 <see cref="T:System.Threading.Tasks.Parallel" /> 루프의 반복 실행이 중단되도록 통신합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 현재 반복 후 반복을 실행 해야 함을 나타냅니다. 효과적으로 루프의 모든 추가 반복을 취소합니다. 그러나 모든 반복 실행을 이미 시작을 중지 하지 않습니다. 예를 들어 경우 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 반복 0에서 1, 000, 모든 반복을 100 보다 작은 해야 계속 실행 되지만 적용 되지 않은 아직 시작 되지 않습니다 1000 통해는 101부터 반복 실행 되어 병렬 루프의 100 번째 반복에서 호출 됩니다.  
  
 장기 실행 반복 실행 이미 수에 대 한 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 설정는 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성을 현재 인덱스의 현재 값 보다 작은 경우 현재 반복 인덱스 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>합니다. 인덱스 경쟁 실행에서 가장 낮은 중단 반복 보다 크면 반복을 중지 하려면 다음을 수행 해야 합니다.  
  
1.  확인 여부는 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 속성은 `true`합니다.  
  
2.  해당 항목이 있는 인덱스 보다 큰 경우 반복에서 종료는 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성 값입니다.  
  
 예제에서는 그림을 제공합니다.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 일반적으로 순서는 데이터 원본에는 검색 기반 알고리즘에서 사용 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 루프의 최대 100 개의 반복이 병렬로 실행합니다. 각 반복 1, 000 밀리초를 1에서 임의의 간격에 대 한 일시 중지 됩니다. 루프의 반복에 결정 하는 임의로 생성 된 값은 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드를 호출 합니다. 인덱스 보다 크면 반복 하는 예제에서 출력으로의 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 를 호출한 후 시작 하는 속성 값은 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 루프의 반복은 여전히 때 실행할 수 있기 때문에 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드가 호출 되 면 각 반복 호출는 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 다른 반복이 호출 되어 있는지 여부를 확인 하는 속성의 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드. 속성 값이 `true`, 반복의 값을 검사는 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성을 현재 반복 인덱스 값 보다 큰 경우 즉시 반환 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 메서드가 이미 호출된 경우 <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 및 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />은 동일한 루프의 반복을 조합하여 사용할 수 없습니다.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>루프 반복이 해당 반복에서 처리되지 않은 예외를 throw했는지 여부를 가져옵니다.</summary>
        <value>처리되지 않은 예외를 throw했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>루프 반복에서 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 메서드를 호출했는지 여부를 가져옵니다.</summary>
        <value>
          <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> 메서드를 호출하여 반복에서 루프를 중지했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 장기 실행 루프의 반복에 대 한 값을 검색할 수 있습니다는 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 여부 루프의 모든 반복 하는 호출 전에 실행을 시작한 속성 확인 하는 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드가 계속 실행 됩니다. 값을 사용할 수 있습니다는 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 즉시 반환 해야 하거나 정상적으로 실행 여부를 결정 하는 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 병렬에서 루프의 반복이 최대 10, 000를 실행합니다. 각 반복 1, 000 밀리초를 1에서 임의의 간격에 대 한 일시 중지 됩니다. 루프의 반복에 결정 하는 임의로 생성 된 값은 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드를 호출 합니다. 루프의 반복은 여전히 때 실행할 수 있기 때문에 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드가 호출 되는 람다 식 호출은 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 다른 반복이 호출 되어 있는지 여부를 확인 하는 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드. 반환 하는 경우 `true`, 반복 즉시 반환 합니다.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />이 호출된 루프의 가장 낮은 반복을 가져옵니다.</summary>
        <value>
          <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />이 호출된 가장 낮은 반복입니다. <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> 루프의 경우 값은 내부에서 생성된 인덱스를 기반으로 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 작업을 호출 하는 병렬 루프의 여러 번 반복 수는 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드. 이 값은 호출 하는 반복의 가장 작은 인덱스 그럴 경우 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>합니다. 루프의 반복이 없는 메서드를 호출 하면 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>,이 속성은 반환 `null`합니다. 속성 값에 대 한 호출의 영향을 받지 않습니다는 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드.  
  
 호출 하는 반복 후 모든 반복의 장기 실행 반복에는 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드를 실행할 필요가는 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성에 대 한 호출 하기 전에 실행을 시작 하는 반복을 종료 하는 데 사용 됩니다는 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드. 인덱스 경쟁 실행에서 가장 낮은 중단 반복 보다 크면 반복을 중지 하려면 다음을 수행 해야 합니다.  
  
1.  확인 여부는 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 속성은 `true`합니다.  
  
2.  해당 항목이 있는 인덱스 보다 큰 경우 반복에서 종료는 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성 값입니다.  
  
 예제에서는 그림을 제공합니다.  
  
   
  
## Examples  
 다음 예제에서는 루프의 최대 100 개의 반복이 병렬로 실행합니다. 각 반복 1, 000 밀리초를 1에서 임의의 간격에 대 한 일시 중지 됩니다. 루프의 반복에 결정 하는 임의로 생성 된 값은 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드를 호출 합니다. 이렇게 하면 인덱스 보다 큽니다. 반복 되지 않습니다.는 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성 값에 대 한 호출 후 시작을 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 하지만 메서드를 이미 아직 실행이 시작 하는 모든 반복에 영향을 주지 않습니다. 각 반복에서 완료를 방지 하기 위해 호출 된 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 다른 반복이 호출 되어 있는지 여부를 확인 하는 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드. 따라서 반복의 값을 확인 하는 경우는 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성을 현재 반복 인덱스 값 보다 큰 경우 즉시 반환 합니다.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 때문에 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 값 병렬 루프 외부에서 범위를 벗어나면 값을 유지 하려는 경우 루프 외부에서 볼 수 있는 변수에 할당 해야 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>루프의 현재 반복이 해당 반복 또는 다른 반복에서 수행한 요청에 따라 종료되어야 하는지 여부를 가져옵니다.</summary>
        <value>현재 반복이 종료되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 속성이 `true` 다음 조건에서:  
  
-   루프 호출의 반복 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 또는 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>합니다.  
  
-   루프의 반복 예외가 throw 됩니다.  
  
-   루프 취소 됩니다.  
  
 이 속성이 `true`, <xref:System.Threading.Tasks.Parallel> 클래스 추가 반복에서 루프의 실행을 시작 하지 못하게 하려면 사전에 시도 됩니다. 그러나 경우 처음부터 추가 반복을 방지 하기 위해 수 없으면 있을 수 있습니다.  
  
 장기 실행 반복 하는 이미 시작 되었음을 실행 하는 경우 수도 있습니다. 이러한 경우 반복 명시적으로 확인 된 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 속성 실행을 중지 속성이 반환 하는 경우 `true`합니다.  
  
   
  
## Examples  
 다음 예제에서는 루프의 최대 100 개의 반복이 병렬로 실행합니다. 각 반복 1, 000 밀리초를 1에서 임의의 간격에 대 한 일시 중지 됩니다. 루프의 반복에 결정 하는 임의로 생성 된 값은 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드를 호출 합니다. 이렇게 하면 인덱스 보다 큽니다. 반복 되지 않습니다.는 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성 값에 대 한 호출 후 시작을 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 하지만 메서드를 이미 아직 실행이 시작 하는 모든 반복에 영향을 주지 않습니다. 각 반복에서 완료를 방지 하기 위해 호출 된 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> 다른 반복이 호출 되어 있는지 여부를 확인 하는 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> 메서드. 따라서 반복의 값을 확인 하는 경우는 <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 속성을 현재 반복 인덱스 값 보다 큰 경우 즉시 반환 합니다.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>시스템에서 편의상 빨리 수행하는 반복에서 <see cref="T:System.Threading.Tasks.Parallel" /> 루프의 실행이 중단되도록 통신합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 된 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드가 나타내는 아직 시작 되지 않은 루프의 반복 실행할 필요가 없습니다. 효과적으로 루프의 모든 추가 반복을 취소합니다. 그러나 모든 반복 실행을 이미 시작을 중지 하지 않습니다.  
  
 호출의 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드를 사용 하면은 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 반환할 속성 `true` 아직 실행 되는 루프의 반복에 대 한 합니다. 이 확인할 수 있는 장기 실행 반복 하는 데 특히 유용는 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 속성과 해당 값이 있는 경우에 일찍 종료 `true`합니다.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 여기서 범위가 변경 되 면 있으면, 다른 반복을 실행할 필요가 검색 기반 알고리즘에서 일반적으로 사용 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 병렬에서 루프의 반복이 최대 10, 000를 실행합니다. 각 반복 1, 000 밀리초를 1에서 임의의 간격에 대 한 일시 중지 됩니다. 루프의 반복에 결정 하는 임의로 생성 된 값은 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드를 호출 합니다. 반복 실행에 대 한 호출 후 예제의 출력에서 볼 수 있듯이 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 루프의 반복은 여전히 때 실행할 수 있기 때문에 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드가 호출 되 면 호출 하는 각 반복에서 <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> 다른 반복이 호출 되어 있는지 여부를 확인 하는 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> 메서드. 반환 하는 경우 `true`, 반복 즉시 반환 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 메서드가 이미 호출되었습니다. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> 및 <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />은 동일한 루프의 반복을 조합하여 사용할 수 없습니다.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      </Docs>
    </Member>
  </Members>
</Type>