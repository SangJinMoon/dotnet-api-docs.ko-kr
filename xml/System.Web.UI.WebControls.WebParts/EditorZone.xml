<Type Name="EditorZone" FullName="System.Web.UI.WebControls.WebParts.EditorZone">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d73b7feab97c6fb4cc690149b10735e132759c91" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30590557" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EditorZone : System.Web.UI.WebControls.WebParts.EditorZoneBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EditorZone extends System.Web.UI.WebControls.WebParts.EditorZoneBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.EditorZone" />
  <TypeSignature Language="VB.NET" Value="Public Class EditorZone&#xA;Inherits EditorZoneBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class EditorZone : System::Web::UI::WebControls::WebParts::EditorZoneBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.EditorZoneBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.EditorZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>웹 페이지의 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> 컨트롤을 호스트하는 데 웹 파트 컨트롤 집합의 주 컨트롤로 사용됩니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 웹 파트 컨트롤 집합에서 영역에 웹 페이지에 정의 된 영역 및 서버 컨트롤을 포함 하는 복합 컨트롤입니다. 영역 기본 기능은 포함 된 컨트롤을 배치 하 고 해당 컨트롤에 대 한 공통 사용자 인터페이스 (UI)를 제공 합니다. 영역 및 웹 파트 응용 프로그램에서 사용 방법에 대 한 일반 정보에 대 한 기본에 대 한 참조 설명서를 참조 하십시오. <xref:System.Web.UI.WebControls.WebParts.WebZone> 클래스 및 [웹 파트 컨트롤 집합 개요](http://msdn.microsoft.com/library/ff0149e4-695a-401a-8cda-53df6d7d2668)합니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 컨트롤은 웹 파트 컨트롤 집합에 있는 기본 컨트롤 중 하나입니다. 웹 파트의 핵심 기능은 지원은의 기능 최종 사용자가 웹 페이지를 수정 (또는 개인 설정)를 개인된 설정을 저장 하 고, 필요에 따라 이후 브라우저 세션에 대 한 합니다. 웹 파트 페이지를 수정 하는의 한 가지 측면인 편집; 포함 됩니다. 모양, 레이아웃, 동작 및 기타 속성에서는 표시 되는 사용자가 편집할 수 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤입니다. 웹 파트 컨트롤 집합에서 여러 컨트롤 편집 기능을 포함 하 여 제공 된 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 제어 합니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 컨트롤이 표시 되는 웹 파트 페이지도 편집 모드로 전환 하 고 사용할 수 있는 다양 한 <xref:System.Web.UI.WebControls.WebParts.EditorPart> 개인 설정 하는 데 사용할 수 있는 컨트롤 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤입니다. <xref:System.Web.UI.WebControls.WebParts.EditorZone> 컨트롤은 해당 부모와 매우 비슷합니다는 <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> 주요 차이점 중 하나를 사용 하 여 클래스를:는 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 컨트롤에서 참조 되는 영역 템플릿을 제공 해당 <xref:System.Web.UI.WebControls.WebParts.EditorZone.ZoneTemplate%2A> 속성입니다. 영역 템플릿 콘텐츠 페이지 지 속성 형식으로 선언 하는 기능을 추가 합니다. 페이지 개발자 배치할 수는 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 자식을 추가할 웹 페이지의 선언적 태그에서 제어 `<zonetemplate>` 요소 내에서 `<zonetemplate>` 요소를 선언적 참조를 추가 <xref:System.Web.UI.WebControls.WebParts.EditorPart> 컨트롤입니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 컨트롤에는 메서드는 <xref:System.Web.UI.WebControls.WebParts.EditorZone.CreateEditorParts%2A>의 기본 메서드를 재정의 하는 <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> 클래스입니다. 이 메서드는 필요 있도록는 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 제어를 포함할 영역 템플릿을 만들 수 <xref:System.Web.UI.WebControls.WebParts.EditorPart> 선언적으로 영역에 추가 하는 컨트롤입니다.  
  
> [!NOTE]
>  에 있는 단추는 <xref:System.Web.UI.WebControls.WebParts.EditorZone> UI 올바르게 작동 하려면 클라이언트 쪽 스크립팅 필요 합니다. 사용자를 통해 작업을 수행할 수는 브라우저에서 스크립팅을 사용 하지 않으면는 <xref:System.Web.UI.WebControls.WebParts.EditorZone> UI입니다.  
  
## <a name="accessibility"></a>액세스 가능성  
 이 컨트롤에 대해 기본적으로 렌더링 되는 태그는 웹 콘텐츠 내게 필요한 옵션 지침 1.0 WCAG 우선 순위 1 지침 등의 내게 필요한 옵션 표준 준수 하지 않을 수 있습니다. 이 컨트롤에 대 한 내게 필요한 옵션 지원에 대 한 세부 정보를 참조 하십시오. [ASP.NET 컨트롤 및 내게 필요한 옵션](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 다양 한 선언적를 보여 줍니다의 프로그래밍 방식으로 사용 하 여 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 클래스입니다. 이 예에서는에서 상속 되는 사용자 지정 편집기 영역을 만듭니다는 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 클래스를 사용 하 여 웹 파트 페이지에 있습니다.  
  
 이 코드 예제는 세 부분으로 구성 합니다.  
  
-   웹 페이지에 디스플레이 모드를 변경할 수 있게 해 주는 사용자 정의 컨트롤입니다.  
  
-   사용자 지정을 참조 하는 웹 페이지 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 제어 합니다.  
  
-   이 예제에서는 작동 하는 방식에 대해 설명 합니다.  
  
 이 코드 예제는 첫 번째 부분에는 사용자가 웹 페이지에 대 한 디스플레이 모드를 변경할 수 있는 사용자 컨트롤입니다. 이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 방법에 대 한 자세한 내용은, 참조 [연습: 웹 파트 페이지에](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.  
  
 [!code-aspx-csharp[WebParts_EditorZone_Overview#4](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZone_Overview/CS/displaymodecs.ascx#4)]
 [!code-aspx-vb[WebParts_EditorZone_Overview#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZone_Overview/VB/displaymodevb.ascx#4)]  
  
 코드 예제에서는 두 번째 부분은 웹 페이지입니다. 페이지의 위쪽에는 `Register` 사용자 정의 컨트롤에 대 한 지시문입니다. 사용 하 여 페이지에서 사용자 정의 컨트롤 태그 선언 된 한 `uc1:` 요소에 대 한 접두사입니다. 공지 아래는 `<asp:WebPartZone>` 요소는는 `<asp:EditorZone>` 여러 포함 된 요소 <xref:System.Web.UI.WebControls.WebParts.EditorPart> 컨트롤 일부 태그 및 해당 모양 및 동작을 결정 하기 위해 설정 하는 속성을 사용 합니다. 다양 한의 다양 한 멤버에 액세스 하는 메서드는 또한는 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 프로그래밍 방식으로 제어 합니다.  
  
 [!code-aspx-csharp[WebParts_EditorZone_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZone_Overview/CS/editorzonecs.aspx#1)]
 [!code-aspx-vb[WebParts_EditorZone_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZone_Overview/VB/editorzonevb.aspx#1)]  
  
 브라우저에서 페이지를 로드할 때 선택할 수 있습니다 **편집 모드** 편집 모드로 전환 하려면 드롭다운 목록에 있습니다. 편집 UI를 표시 하려면 두 컨트롤 중 하나의 제목 표시줄에 있는 동사 메뉴 (아래쪽 화살표)를 클릭 한 클릭 수 **편집** 컨트롤을 편집 합니다. 편집 ui가 표시, 선언적 방법과 프로그래밍을 사용 하는의 효과 볼 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 클래스 멤버입니다.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>사용자 지정을 만들려고 할 경우 <see cref="T:System.Web.UI.WebControls.WebParts.EditorZone" /> 편집 UI 렌더링 보다 효율적으로 제어를 영역을에서 직접 상속할 수는 <see cref="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" /> 클래스 페이지 개발자가 추가 대 한 영역 템플릿 지원을 제공할 필요가 없습니다으로 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> 영역에 선언적으로 제어합니다. 이러한 경우에 추가한 모든 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> 영역에 프로그래밍 방식으로 제어 합니다. 상속 해야 영역 템플릿 지원을 제공 하려는 경우는 <see cref="T:System.Web.UI.WebControls.WebParts.EditorZone" /> 클래스입니다.</para>
    </block>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.EditorPart" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EditorZone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EditorZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.EditorZone" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEditorParts">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.WebParts.EditorPartCollection CreateEditorParts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.WebParts.EditorPartCollection CreateEditorParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZone.CreateEditorParts" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateEditorParts () As EditorPartCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::WebParts::EditorPartCollection ^ CreateEditorParts();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.EditorPartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>영역 템플릿 내에 선언된 모든 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> 컨트롤을 페이지에 일관된 형식으로 만듭니다.</summary>
        <returns>영역 템플릿 내에 선언된 모든 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection" /> 컨트롤에 대한 참조가 들어 있는 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.EditorZone.CreateEditorParts%2A> 만 만들려는 기본 메서드를 재정의 <xref:System.Web.UI.WebControls.WebParts.EditorPart> 영역 템플릿 내에 선언 된 컨트롤입니다. 다른 모든 <xref:System.Web.UI.WebControls.WebParts.EditorPart> 영역에 추가 된 컨트롤을 프로그래밍 방식으로 추가 해야 합니다. 이렇게, 예를 들어, 구현 하 여는 <xref:System.Web.UI.WebControls.WebParts.IWebEditable> 인터페이스는 <xref:System.Web.UI.WebControls.WebParts.WebPart> 제어 합니다. 그런 다음 재정의 된 <xref:System.Web.UI.WebControls.WebParts.IWebEditable.CreateEditorParts%2A> 메서드를 사용자 지정 컬렉션을 추가할 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.EditorPart> 영역에는 컨트롤입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">현재 <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> 컨트롤에 ID가 없는 경우</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.IWebEditable.CreateEditorParts" />
      </Docs>
    </Member>
    <Member MemberName="ZoneTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ZoneTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ZoneTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.EditorZone.ZoneTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ZoneTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ ZoneTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.WebParts.EditorZone))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateInstance(System.Web.UI.TemplateInstance.Single)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.EditorZone" /> 컨트롤 내의 자식 컨트롤을 페이지에 일관된 형식으로 포함하기 위한 템플릿을 제공합니다.</summary>
        <value>영역에서 자식 컨트롤의 컨테이너 역할을 하는 <see cref="T:System.Web.UI.ITemplate" /> 영역 템플릿입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.EditorZone.ZoneTemplate%2A> 속성의 주요 차이점은는 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 클래스와 기본 <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> 클래스입니다. 영역 서식 파일에 대 한 지원을 추가 하 여는 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 클래스를 사용 하면 페이지 개발자가 자식 배치를 <xref:System.Web.UI.WebControls.WebParts.EditorPart> 컨트롤 내는 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 웹 페이지의 선언적 태그에서 제어 합니다. 영역 템플릿 자식 컨트롤에 대 한 컨테이너 역할을 합니다.  
  
> [!NOTE]
>  에 대 한 set 접근자는 <xref:System.Web.UI.WebControls.WebParts.EditorZone.ZoneTemplate%2A> 속성 호출의 <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.InvalidateEditorParts%2A> 의 컬렉션을 강제로 <xref:System.Web.UI.WebControls.WebParts.EditorPart> 만들어야 서식 파일에 선언 된 컨트롤입니다. 이렇게 하면 인식할 수 있도록 서식 파일의 내용을 변경 됩니다.  
  
 영역 템플릿 내에 선언적으로 사용 하는 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 한 쌍의 추가 컨트롤을 `<zonetemplate>` 태그 및 참조 <xref:System.Web.UI.WebControls.WebParts.EditorPart> 컨트롤 태그 사이입니다. 인스턴스당 하나의 영역 템플릿 렌더링 되는 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 컨트롤 (따라서는 여러 개 추가할 이유가 없습니다 `<zonetemplate>` 요소를 사용 하는 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 컨트롤). 또한의 영역 템플릿에 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 컨트롤에서 파생 되는 부품 컨트롤만 포함할 수는 <xref:System.Web.UI.WebControls.WebParts.EditorPart> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 선언적으로 사용 하 여 <xref:System.Web.UI.WebControls.WebParts.EditorZone.ZoneTemplate%2A> 속성입니다. 이 예제에 대 한 전체 코드의 예 섹션에서 발견 되는 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 클래스 개요입니다.  
  
 코드 예제에서는 어떻게 <xref:System.Web.UI.WebControls.WebParts.EditorPart> 내에서 컨트롤을 배치할 수는 `<zonetemplate>` 요소에는 <xref:System.Web.UI.WebControls.WebParts.EditorZone> 제어 합니다.  
  
 [!code-aspx-csharp[WebParts_EditorZone_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZone_Overview/CS/editorzonecs.aspx#2)]
 [!code-aspx-vb[WebParts_EditorZone_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZone_Overview/VB/editorzonevb.aspx#2)]  
  
 브라우저에서 페이지를 로드할 때 선택할 수 있습니다 **편집 모드** 편집 모드로 전환 하려면 드롭다운 목록에 있습니다. 편집 사용자 인터페이스 (UI)을 표시 하려면 두 컨트롤 중 하나의 제목 표시줄에 있는 동사 메뉴 (아래쪽 화살표)를 클릭 한 클릭 수 **편집** 컨트롤을 편집 합니다. 편집 ui가 표시, 여러 가지 볼 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.EditorPart> 내에서 선언 된 컨트롤에는 `<zonetemplate>` 요소입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartZone.ZoneTemplate" />
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.InvalidateEditorParts" />
      </Docs>
    </Member>
  </Members>
</Type>