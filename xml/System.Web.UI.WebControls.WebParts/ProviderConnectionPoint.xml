<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b0446877e077410dd38d404d92e2614023a53094" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30590837" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>공급자 역할을 하는 서버 컨트롤에서 소비자와의 연결을 설정할 수 있도록 하는 연결 지점 개체를 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 개의 서버 컨트롤 간의 모든 웹 파트 연결에서 각 컨트롤 있어야 (간에 다른 요구 사항) 다른 컨트롤에 연결 하 고 제공 하거나 여부에 따라 데이터를 사용할 수 있도록 하는 관련 된 연결 지점 개체 컨트롤 공급자 또는 소비자 연결용으로 지정 됩니다. A <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 개체 일반적 공유할 수 있는 데이터의 형식과 다른 컨트롤에 컨트롤 연결 방법에 대 한 세부 정보를 포함 합니다. 연결에서 공급자 역할을 하는 컨트롤의 경우 연결 지점은 이어야 합니다는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체입니다. 웹 파트 연결 및 연결 지점에 대 한 자세한 내용은 아래 참고 항목 섹션에 나열 된 항목을 참조 하십시오.  
  
 만들려면는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체, 여러 단계를 수행 해야 합니다.  
  
1.  인터페이스를 만듭니다. 공급자는 소비자와 데이터를 공유 경우 인터페이스의 인스턴스를 얻는 하는 소비자에 게 해당 인스턴스를 반환 하 여 수행 합니다.  
  
2.  공급자에 인터페이스를 구현 합니다. A <xref:System.Web.UI.WebControls.WebParts.WebPart> 또는 기타 서버 컨트롤 (모든 형식의 서버 컨트롤에는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 영역을 사용할 수 있습니다) 공급자는 첫 번째 단계에서 만든 인터페이스를 구현 해야 사용 됩니다.  
  
3.  콜백 메서드를 식별 합니다. 공급자의 메서드는 연결을 설정 하는 콜백 메서드로 식별 되어야 합니다. 이 메서드는 구현된 된 인터페이스의 인스턴스는 소비자에 게 반환합니다. 공급자에서 콜백 메서드를 식별 하는 데 웹 파트 방법은 추가 하는 `ConnectionProvider` 메타 데이터 특성 (정의한는 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> 클래스) 인터페이스 인스턴스를 반환 하는 메서드를 합니다. 특성이 추가 되 면 필요한 유일한 매개 변수는 공급자 연결 지점에 사용할 표시 이름입니다. 선택적 매개 변수는 연결점에 대 한 ID 같은 추가할 수도 있습니다.  
  
 컨트롤 공급자 역할을 하도록 설정 된 후 컨트롤 (구비 하 고 사용 가능한 소비자 컨트롤 마찬가지로 라고 가정함) 연결에 참여할 수 있습니다. 웹 페이지의 태그에는 정적 선언적 연결을 만들려면 개발자가 사용할 수는 `<asp:webpartconnection>` 요소입니다. 경우는 `ConnectionProvider` 연결 지점에 대 한 ID를 지정 하는 콜백 메서드를 식별 하는 공급자 소스 코드에서 해당 값에 할당 되어야 합니다는 `ProviderConnectionPointID` 특성에 `<asp:webpartconnection>` 는 페이지입니다. 개발자가 공급자 연결 지점에 대 한 ID를 지정할 수 하나의 이유 공급자 컨트롤에 연결 지점이 여러 개 있기 때문입니다. 값 공급자 컨트롤의 공급자 연결 지점에 대 한 ID를 지정 하지 않으면에 할당할 필요가 없습니다는 `ProviderConnectionPointID` 만들어지므로 연결에서 가져온 기본값을 사용 하 여 페이지에서, 특성은 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> 필드입니다.  
  
 코드에서 연결을 만들려는 개발자는 새 만들어야 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 호출 하 여 개체는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> 메서드와 함께 ID 또는 인덱스의 정의 된 공급자 컨트롤의 ID를 전달 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 공급자 컨트롤에는 개체입니다. 반환 된 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체와 공급자 컨트롤에 대 한 참조는 해당 소비자 컨트롤에 대 한 참조 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 개체를 모두에 전달 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 만드는 새 메서드를 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체입니다.  
  
 개발자를 사용할 수 있지만 공급자 연결 지점 선언적으로 또는 프로그래밍 방식으로 연결 설정의 일부로 사용자가 사용자 인터페이스 (UI)를 통해 연결을 설정할 수 있는 공급자 연결 지점이 상호 작용할 수도 있습니다. 개발자가 선언 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 컨트롤이 웹 페이지에서 연결을 생성 하는 사용자를 위해 런타임에 UI를 제공 합니다. 사용자가 클릭 하 여 연결을 설정 하기 위한 시작 지점으로 소비자 컨트롤을 선택 하는 경우 해당 연결 동사 (공급자를 선택할 수도; 동일한 차이점이), UI에 있는 드롭다운 목록 컨트롤이 나타납니다는 사용 가능한 공급자 연결 지점 (또는 여러 세션에 있는 경우 지점)의 이름을 표시 합니다. 사용자가 연결을 만드는 공급자 연결 지점을 선택 해야 합니다.  
  
 A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 특정 공급자 컨트롤을 직접 연결 하 고 기본에서 상속 된 속성에 대 한 연결에 대 한 세부 정보를 저장 하는 개체 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 클래스입니다. 상속 된 예를 들어 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 속성 공급자 연결 지점 공급자가 반환 하는 인터페이스의 형식을 유지 합니다. 공급자와 같은 작업 둘 다 연결에서 소비자 인터페이스 형식, 해당 컨트롤은 호환 되며 직접 연결을 설정할 수 있습니다. 공급자 및 소비자 같은 인터페이스 형식을 사용할 수 없는, 경우 호환 되지 않는 하며 사용 해야 합니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 공급자 연결 지점 변환할 개체 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 소비자가 사용할 수 있는 형식으로 값입니다. 또 다른 중요 한 상속 된 속성은는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> 연결을 만들 때 공급자 연결을 선택 하는 사용자를 위해 UI에 표시 하는 식별 이름을 제공 하는 속성을 가리킵니다. 개발자는 추가 하는 경우 표시 이름은 필수 매개 변수를입니다는 `ConnectionProvider` 특성을 공급자 컨트롤에 콜백 메서드에 합니다. 상속 된 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> 공급자에 연결 지점이 여러 개 공급자 연결 지점에 대 한 고유 식별자를 제공 하기 때문에, 위에 표시 된 대로 속성 유용 이기도 합니다. 공급자가 여러 개 있을 수 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개발자가 추가 하는 경우에 있으며이 경우 정의 된 개체는 `ConnectionProvider` 특성 메서드에 각 연결점을 구별 하는 ID 값을 지정 해야 합니다. 다른 주목할 만한 상속 된 속성 중 하나는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 속성 공급자 연결 지점에서 동시에 여러 소비자에 연결할 수 있는지 여부를 나타냅니다. 이 속성 값은 `true` 공급자 연결 지점에 대해 기본적으로 (기본적으로 반면 `false` 소비자 연결 지점에 대 한).  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 몇 가지 고유한 메서드를 추가 하는 클래스에서 상속 된 멤버에는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 클래스입니다. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> 메서드 콜백 메서드는 소비자에 게 반환 하는 인터페이스의 인스턴스를 검색 합니다. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> 메서드는 기존 연결을의 일부인 추가 소비자 인터페이스를 검색 하지만 인터페이스가 아닌 고 연결을 사용 합니다.  
  
   
  
## Examples  
 다음 코드 예제에 대 한 연결을 선언적으로 만들고, 공급자 연결 지점을 사용 하 여 프로그래밍 방식으로 또는 각 사례 과정에서 UI를 통해 간단한 방법을 보여 줍니다.  
  
 예제는 네 부분으로 이루어져 있습니다.  
  
-   웹 파트를 변경할 수 있게 해 주는 사용자 정의 컨트롤 페이지에서 모드를 표시 합니다.  
  
-   소스 코드는 인터페이스 및 2에 대 한 <xref:System.Web.UI.WebControls.WebParts.WebPart> 으로 역할 공급자 및 연결에 대 한 소비자를 제어 합니다.  
  
-   모든 컨트롤 호스트 및 코드 예제를 실행 하는 웹 페이지입니다.  
  
-   예제 페이지를 실행 하는 방법에 대해 설명 합니다.  
  
 이 코드 예제는 첫 번째 부분에는 사용자가 웹 페이지에 대 한 디스플레이 모드를 변경할 수 있는 사용자 컨트롤입니다. 에 할당 된 파일 이름을 지정.ascx 파일에 다음 소스 코드를 저장 된 `Src` 특성에는 `Register` 호스팅 웹 페이지의 맨 위 근처에이 사용자 정의 컨트롤에 대 한 지시문을 합니다. 이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 대 한 세부 정보를 참조 [연습: 웹 파트 페이지에](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 코드 예제에서는 두 번째 부분에는 인터페이스 및 컨트롤에 대 한 원본 코드입니다. 소스 파일에 라는 간단한 인터페이스 `IZipCode`합니다. 또한 한 <xref:System.Web.UI.WebControls.WebParts.WebPart> 라는 클래스 `ZipCodeWebPart` 인터페이스를 구현 하 고 공급자 컨트롤의 역할을 합니다. 해당 `ProvideIZipCode` 메서드는 인터페이스의 유일한 멤버를 구현 하는 콜백 메서드입니다. 메서드는 인터페이스의 인스턴스를 반환합니다. 메서드가로 표시 되는 한 `ConnectionProvider` 는 메타 데이터에는 특성입니다. 공급자의 연결 지점에 대 한 콜백 메서드로 메서드를 식별 하기 위한 메커니즘입니다. 다른 <xref:System.Web.UI.WebControls.WebParts.WebPart> 클래스 이름은 `WeatherWebPart`, 연결에 대 한 소비자로 역할입니다. 이 클래스 라는 메서드가 `GetZipCode` 의 인스턴스를 가져오는 `IZipCode` 공급자 컨트롤에서 인터페이스입니다. 이 메서드는 소비자 연결 지점 메서드 사용으로 표시 되어는 `ConnectionConsumer` 는 메타 데이터에는 특성입니다. 소비자 컨트롤에 있는 연결 메서드를 식별 하기 위한 메커니즘입니다.  
  
 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 여기서 것 동적으로 컴파일되는 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제는 동적 컴파일과 사용합니다. 컴파일하는 방법을 보여 주는 연습을 참조 하십시오. [연습: 개발 및 사용자 지정 웹 서버 컨트롤을 사용 하 여](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 코드 예제에서는 세 번째 부분에는 웹 페이지입니다. 상단 `Register` 페이지에서 연결을 구성 하는 사용자 지정 컨트롤 및 사용자가 변경할 수 있는 사용자 정의 컨트롤을 등록 하는 지시문 디스플레이 모드입니다. 연결 자체 내에 선언적으로 만들어집니다는 `<staticconnections>` 페이지에서 요소입니다. 여기에서는 연결을 만드는 방법을 보여 줍니다.-참고는 `ProviderConnectionPointID` 특성에 `<asp:webpartconnection>` 요소입니다. 연결을 프로그래밍 방식으로 만들 수도 있습니다. 코드를 수행 하는 `Button1_Click` 메서드. 이 경우에 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체가 생성 되 고 실제 연결을 만드는 메서드로 전달 합니다. 프로그래밍 방식으로 또는 선언적으로 연결을 만들고 있는지 여부를 연결점 공급자와 소비자 모두에 대해 항상 지정 되어야 합니다. `Button2_Click` 메서드 액세스는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 는 공급자와 소비자에 대 한 개체 및 속성 값의 일부 페이지에서 레이블을 씁니다.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 브라우저에서 페이지를 로드 한 후 클릭는 **연결 지점 정보** 단추입니다. 선언적 연결에 설정 된 공급자 및 소비자 연결 지점에 대 한 정보가 표시 됩니다. 를 사용 하 여는 **디스플레이 모드** 드롭다운 컨트롤을 페이지에 연결 전환 모드입니다. 동사 메뉴에는 **우편 번호 소비자** <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 (제목 표시줄의 아래쪽 화살표로 표시 됨) 연결 동사를 클릭 합니다. UI가 표시 되는 연결에서 자동으로 만든는 `<asp:connectionszone>` 컨트롤이 페이지에 선언 합니다. 이 앞에서 설명한 선언적 방법과 프로그래밍 방법을 함께 (UI)를 통해 한 연결을 만드는 다른 방법. 클릭는 **연결 끊기** 단추 기존 정적 연결을 종료 합니다. 클릭는 **공급자에 대 한 연결을 만들** 링크 합니다. UI는 공급자 연결 지점 표시 이름이 나열 하는 드롭다운 목록 컨트롤에 표시 됩니다. 연결 지점 드롭 다운 목록에서 선택한 다음 클릭 **Connect** 연결을 완료 합니다. 그런 다음 클릭 **연결 끊기** 다시 합니다. 클릭는 **동적 연결** 단추를 프로그래밍 방식으로 연결을 만듭니다. 사용 하 여는 **디스플레이 모드** 찾아보기 모드로 페이지를 반환 하는 컨트롤입니다. 클릭는 **연결 지점 세부 정보** 단추를 다시 한 번 더 공급자 연결 지점 개체에 대 한 세부 정보를 나타냅니다.  
  
 이 예제에서는 연결을 설정 하 고 공급자 연결 지점을 사용 하 여 세 가지 방법으로 제시: 웹 페이지 태그;에 선언 된 정적 연결 사용 하는 코드에서 만든 연결 된 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체와 연결 UI 통해 사용자가 만든 연결 합니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">연결을 설정하기 위해 소비자에게 인터페이스 인스턴스를 반환하는 공급자 컨트롤의 메서드입니다.</param>
        <param name="interfaceType">공급자가 소비자에게 제공하는 인터페이스의 <see cref="T:System.Type" />입니다.</param>
        <param name="controlType">공급자 연결 지점과 관련된 공급자 컨트롤의 <see cref="T:System.Type" />입니다.</param>
        <param name="displayName">연결 UI(사용자 인터페이스)에서 사용자에게 표시되는 공급자 연결 지점의 표시 이름입니다.</param>
        <param name="id">공급자 연결 지점의 고유 식별자입니다.</param>
        <param name="allowsMultipleConnections">공급자 연결 지점에 소비자와의 연결이 동시에 여러 개 있을 수 있는지 여부를 나타내는 부울 값입니다.</param>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> 에 대 한 생성자는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 클래스는 다양 한 매개 변수를 전달 하 고 기본 클래스를 초기화 하 여 기본 생성자를 호출 합니다.  
  
 기본 클래스 생성자는 연결 지점에 대 한 매개 변수 개수를 확인 하 고 몇 가지 예외를 throw 할 수 있습니다. 가능한 예외 목록은 예외 섹션을 참조 하십시오.  
  
 호출할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> 의 고유한 인스턴스를 만드는 생성자는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 클래스입니다. 그러나 단순히 연결을 설정 하 고 클래스를 확장 하지 않는 경우에 호출 해야는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> 메서드를 공급자에서 기존 연결 지점 개체를 반환 합니다.  
  
   
  
## Examples  
 파생 하는 방법은 다음 코드 예제는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 클래스를 만드는 사용자 지정 공급자 연결 지점입니다.  
  
 이 코드 예제는 세 부분으로 구성 합니다.  
  
-   공급자를 포함 하는 원본 파일 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤, 소비자 <xref:System.Web.UI.WebControls.WebParts.WebPart> 제어 및 사용자 지정 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체입니다.  
  
-   정적 연결에서 컨트롤을 호스팅하는 웹 페이지입니다.  
  
-   예제 코드를 실행 하는 방법에 대해 설명 합니다.  
  
 코드 예제에서는 첫 번째 부분은 공급자와 소비자에 대 한 소스 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 및 사용자 지정 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 라는 클래스 `TableProviderConnectionPoint`합니다. 생성자는 `TableProviderConnectionPoint` 클래스에는 매개 변수 섹션에 표시 된 대로 필요한 매개 변수를 전달 하 여 기본 생성자를 호출 합니다. 또한는 `TableProviderWebPart` 클래스는 `GetConnectionInterface` 메서드가 연결에 대 한 콜백 메서드로 지정 된 및 `ConnectionProvider` 특성 선언 사용자 지정 `TableProviderConnectionPoint` 매개 변수로 합니다. 이 사용자 지정 공급자 연결 지점을 만들고 다음 공급자 컨트롤에 연결 하는 방법을 보여 줍니다. 이 예에서는 웹 응용 프로그램의 App_Code 하위 폴더에 소스 코드 파일을 배치 해야 하므로 소스 코드가 컴파일되면 동적으로 가정 합니다.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 코드 예제에서는 두 번째 부분에는 정적 웹 파트 연결에서 사용자 지정 컨트롤을 호스팅하는 웹 페이지입니다. 페이지의 맨 위에는 `Register` 접두사와 사용자 지정 컨트롤에 대 한 네임 스페이스를 선언 하는 지시문입니다. 사용 하 여 연결이 선언 되는 `<asp:webpartconnection>` 요소는 공급자 및 소비자 컨트롤 내에 선언 된는 `<asp:webpartzone>` 요소입니다.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 브라우저에서 페이지를 로드 합니다. 이미 컨트롤 간의 연결 있으며 페이지에서 정적 연결으로 선언 되어 있으므로 소비자는 공급자에서 데이터를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callbackMethod" />가 <see langword="null" />인 경우  
  
 \- 또는 -  
  
 <paramref name="interfaceType" />가 <see langword="null" />인 경우  
  
 \- 또는 -  
  
 <paramref name="controlType" />가 <see langword="null" />인 경우  
  
 \- 또는 -  
  
 <paramref name="displayName" />이 <see langword="null" /> 또는 빈 문자열("")인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="controlType" />이 공급자 컨트롤 또는 이 컨트롤에서 파생된 유효한 클래스의 형식과 동일하지 않은 경우</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">웹 파트 연결에서 공급자 역할을 하는 컨트롤입니다.</param>
        <summary>인터페이스 인스턴스를 가져와 소비자에게 반환하는 공급자 컨트롤의 콜백 메서드를 호출합니다.</summary>
        <returns>공급자가 연결을 설정하기 위해 소비자에게 반환하는 인터페이스의 인스턴스인 <see cref="T:System.Object" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 연결을 설정 하는 데 사용 하는 인터페이스의 인스턴스가 공급자 컨트롤에서 개체를 반환 합니다. 개체의 형식에 구현된 된 인터페이스의 형식이 됩니다. 예를 들어 두 개의 구현 되는 인터페이스는 웹 파트 컨트롤 집합에서에서 연결에 대해 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> 및 <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>합니다. 경우는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> 메서드가 호출 되는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체를 연결 된 공급자 이러한 인터페이스 중 하나를 구현 하는 반환 된 개체 동일한 형식의 됩니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체는 연결을 활성화 하는 중입니다. 이 실제로 한 연결을 시작 하 고 두 개의 컨트롤 데이터를 공유할 수 있도록 하는 프로세스를 시작 하는 중요 한 단계입니다.  
  
 연결의 소비자 컨트롤 공급자와 같은 유형의 인터페이스 작업할 수 있어야 합니다. 그렇지 않은 경우 컨트롤이 호환 되 고 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 개체 연결을 설정 하는 데 사용 해야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">웹 파트 연결에서 공급자 역할을 하는 컨트롤입니다.</param>
        <summary>공급자 연결 지점에서 지원할 수 있는 보조 인터페이스의 선택적 컬렉션을 가져옵니다.</summary>
        <returns>공급자 역할을 하는 컨트롤에서 제공하는 추가 인터페이스의 <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 공급자 연결 지점 개체는 항상 소비자와의 연결을 설정 하는 데 사용 되는 기본 인터페이스를 있습니다. 기본 인터페이스의 인스턴스를 호출 하 여 검색 되는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> 에서 메서드는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체입니다.  
  
 그러나 일부 공급자 컨트롤 소비자에 게는 연결의 일부로 제공 하는 여러 인터페이스를 구현 합니다. 이러한 인터페이스를 없는 경우 기본 연결을 설정 하는 데 사용 되는 보조 인터페이스를 호출 됩니다. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> 메서드와 마찬가지로 보조 인터페이스에 대 한 참조의 컬렉션을 반환 하는 방법을 제공는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> 메서드는 기본 인터페이스에 대 한 참조를 반환 합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> 에서 메서드는 <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> 클래스 구현이 없는 않으면 보조 인터페이스는 빈 컬렉션을 반환 합니다. 이 메서드를 구현 하려면에서 상속 해야 하는 <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> 클래스 하 고 보조 인터페이스의 특정 집합에서 반환이 메서드를 재정의 합니다.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>