<Type Name="CatalogZoneBase" FullName="System.Web.UI.WebControls.WebParts.CatalogZoneBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="645ec0e30341333218909acd3fe48761c8661849" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30591937" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CatalogZoneBase : System.Web.UI.WebControls.WebParts.ToolZone, System.Web.UI.IPostBackDataHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CatalogZoneBase extends System.Web.UI.WebControls.WebParts.ToolZone implements class System.Web.UI.IPostBackDataHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CatalogZoneBase&#xA;Inherits ToolZone&#xA;Implements IPostBackDataHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class CatalogZoneBase abstract : System::Web::UI::WebControls::WebParts::ToolZone, System::Web::UI::IPostBackDataHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ToolZone</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackDataHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>카탈로그 역할을 하는 모든 영역 컨트롤에 대한 기본 클래스로 사용됩니다. 카탈로그는 사용자가 웹 페이지에 추가할 수 있는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤의 목록을 포함합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스는 기본 클래스에서 상속 되는 <xref:System.Web.UI.WebControls.WebParts.ToolZone> 클래스입니다. 파생된 영역에 대 한 기본 동작 집합을 제공합니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스는 고유한 UI (사용자 인터페이스) 사용자가을 추가할 수 있도록 제공 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 및 기타 서버 컨트롤을 웹 페이지입니다. 파생 된 컨트롤의 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스 같은 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>, 컨트롤이 웹 페이지에 실제로 포함된 됩니다. 라고 하는 다른 컨트롤에 대 한 컨테이너 역할 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 페이지에 추가할 사용자에 대 한 서버 컨트롤 목록이 작성 하는 컨트롤입니다. 파생 되는 영역은 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스 페이지인 카탈로그 디스플레이 모드에 있을 경우에 나타날 수 있습니다.  
  
> [!NOTE]
>  A <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 영역만 포함 될 수 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤을 역으로 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤에만 상주할 수 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 영역입니다.  
  
 카탈로그에 서버 컨트롤을 추가 하기 위한 메커니즘은 기본에서 파생 되는 세 가지 컨트롤에는 다음과 같은 집합이 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 클래스입니다.  
  
|Control|설명|  
|-------------|-----------------|  
|<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>|페이지에서 닫혀 있는 컨트롤에 대 한 참조를 유지 관리 합니다. 이러한 제어는 사용자가 (페이지에 다시 추가할된) 다시 열을 수 있습니다.|  
|<xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>|웹 페이지의 태그는 웹 파트 카탈로그에 선언 된 컨트롤에 대 한 참조를 포함 합니다. 이러한 컨트롤은 사용자가 웹 페이지에 추가할 수 있습니다.|  
|<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>|웹 페이지에는 컨트롤을 추가할 수 있도록 카탈로그에 정의 파일을 업로드 하는 사용자에 대 한 UI를 제공 합니다. 정의 파일은 XML 파일을 한 합니다. 웹 파트 파일 이름 확장명을 컨트롤에 대 한 설정을 가져옵니다. 정의 파일을 가져올 수 전에 컨트롤이 서버에 있어야 합니다.|  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스에는 다양 한 속성의 카탈로그를 표시 하는 데 유용한 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤입니다. <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.AddVerb%2A> 속성 페이지에서 카탈로그에서 선택한 컨트롤을 추가 하는 동사를 참조 하는 동안는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CloseVerb%2A> 카탈로그를 닫습니다 찾아보기 모드로 페이지의 디스플레이 모드를 반환 하는 동사를 참조 하는 속성입니다. <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts%2A> 속성 참조의 모든 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 영역에서 컨트롤입니다. 여러 가지 텍스트 기반 속성 같은 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.EmptyZoneText%2A>, <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText%2A>, 및 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A>, 적절 한 카탈로그에 대 한 기본 텍스트를 제공 하는 기본 속성을 재정의 합니다. <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectTargetZoneText%2A> 속성에 추가할 컨트롤 영역을 선택할 수 있게 해 주는 드롭 다운 목록 컨트롤과 함께 텍스트를 포함 합니다.  
  
 에 포함 된 여러 다른 속성이 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스입니다. <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID%2A> 속성은 현재 선택 된 고유한 문자열 식별자 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 제어 합니다. <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.ShowCatalogIcons%2A> 속성을 설정 하 여 컨트롤에 연결할 수 있는 아이콘을 표시할지 여부를 나타냅니다는 <xref:System.Web.UI.WebControls.WebParts.WebPart.CatalogIconImageUrl%2A> 속성에는 <xref:System.Web.UI.WebControls.WebParts.WebPart> 제어 합니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle%2A> 속성에 대 한 링크에 대 한 스타일 특성 포함는 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 현재 영역에서 선택 되지 않은 컨트롤입니다. 반면,는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle%2A> 속성에 대 한 링크에 대 한 스타일 특성 포함는 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 사용자 현재 선택 영역에서 컨트롤입니다.  
  
 속성 외에 일부 메서드에서에 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 이벤트 표준 처리 외에도 클래스와의 카탈로그를 처리 하는 용도로 설계 된 고유 하 게 되는 다른 기본 컨트롤에서 상속 된 메서드를 렌더링 합니다. 제어 합니다. <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogPartChrome%2A> 메서드 각각 주위의 크롬 (테두리, 동사, 아이콘 및 제목을 같은 주변 UI 요소)를 만듭니다. <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤은 영역에서 컨트롤에 렌더링을 처리 합니다. <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts%2A> 메서드는 추상 메서드이며, 재정의의 모든 인스턴스를 만들 파생된 클래스는 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 영역에 포함 된 컨트롤입니다. <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InvalidateCatalogParts%2A> 경우 파생된 클래스에서 메서드를 호출할 수 있습니다 컬렉션을 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 영역 변경 내용 프로그래밍 방식으로 몇 가지 이유 및 파생된 클래스에서에서 컨트롤을 컬렉션을 다시 만들어야 합니다. <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.LoadPostData%2A> 메서드 옆에 확인란에 대 한 기존 상태를 로드는 <xref:System.Web.UI.WebControls.WebParts.WebPart> 페이지가; 서버에 다시 게시 될 때마다 카탈로그에서 컨트롤 반대로 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SaveControlState%2A> 메서드 확인란의 상태를 저장 합니다. 마지막으로 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderCatalogPartLinks%2A> 메서드를 각 링크에 대 한 모든 렌더링이 제공 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 영역에 포함 된 컨트롤입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 다양 한 선언적를 보여 줍니다의 프로그래밍 방식으로 사용 하 여 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스입니다. 코드 예제에서는 사용에서 파생 된 클래스가 추상 이므로 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 클래스에서 상속 하는 메서드와 속성을 보여 주는 웹 파트 컨트롤 집합을 함께 제공 되는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스입니다.  
  
 이 코드 예제는 4 개의 구성 됩니다.  
  
-   웹 페이지에 디스플레이 모드를 변경할 수 있게 해 주는 사용자 정의 컨트롤입니다.  
  
-   에 대 한 참조를 포함 하는 웹 페이지는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 컨트롤과 일부 키의 사용법을 보여 주는 몇 가지 코드 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스 멤버입니다.  
  
-   사용자 지정 <xref:System.Web.UI.WebControls.WebParts.WebPart> 을 사용자 지정 추가 컨트롤을 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 제어 합니다.  
  
-   이 예제에서는 브라우저에서 작동 하는 방법에 대 한 설명입니다.  
  
 이 코드 예제는 첫 번째 부분에 페이지 디스플레이 모드를 변경할 수 있도록 사용자 컨트롤입니다. 이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 대 한 세부 정보를 참조 [연습: 웹 파트 페이지에](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.  
  
 [!code-aspx-csharp[WebParts_CatalogZoneBase_Overview#8](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/displaymodemenucs.ascx#8)]
 [!code-aspx-vb[WebParts_CatalogZoneBase_Overview#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/displaymodemenuvb.ascx#8)]  
  
 코드 예제에서는 두 번째 부분은에 대 한 선언적 참조를 포함 하는 웹 페이지는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 제어 합니다. 페이지의 맨 위 근처에 있는 두 개의 `Register` 지시문과-사용자 정의 컨트롤에 대 한 사용자 지정에 대 한 <xref:System.Web.UI.WebControls.WebParts.WebPart> 제어 합니다. 공지 아래는 `<asp:WebPartZone>` 요소는는 `<asp: CatalogZone>` 사용자 지정에 대 한 선언적 참조를 포함 하는 요소 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 및 ASP.NET <xref:System.Web.UI.WebControls.Calendar> 제어 합니다. 영역 있는데 다양 한 태그 및 속성의 모양과 동작을 결정 하기 위해 설정 합니다. 사이 `<script>` 의 사용 하 여 가장는 방법을 보여 줍니다 다양 한 프로그래밍 방식, 페이지의 태그에에서는 다양 한 이벤트 처리 코드는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 멤버입니다.  
  
 [!code-aspx-csharp[WebParts_CatalogZoneBase_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#1)]
 [!code-aspx-vb[WebParts_CatalogZoneBase_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#1)]  
  
 코드 예제에서는 세 번째 부분은 사용자 지정 <xref:System.Web.UI.WebControls.WebParts.WebPart> 라는 컨트롤 `TextDisplayWebPart`합니다. 영역 내에 선언 하 고 최종 사용자에 추가할 수는 카탈로그에서 페이지. 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 여기서 것 동적으로 컴파일되는 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 컴파일의 두 방법의 데모를 보려면 참조 [연습: 개발 및 사용자 지정 웹 서버 컨트롤을 사용 하 여](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_CatalogZoneBase_Overview#9](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/textdisplaywebpart.cs#9)]
 [!code-vb[WebParts_CatalogZoneBase_Overview#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/textdisplaywebpart.vb#9)]  
  
 코드 예제가 작동 하려면, 웹 파트 설명 파일을 내보낼 수 있도록 Web.config 파일에 추가 해야 하는 설정을 나타냅니다. 이 코드 예제에 대 한 웹 페이지와 같은 디렉터리에 Web.config 파일이 있는지 확인 합니다. 내에서 `<system.web>` 섹션에서 없는지 확인 한 `<webParts>` 인 요소는 `enableExport` 특성이로 설정 `true`와 같이, 다음 태그입니다.  
  
 `<webParts enableExport="true">`  
  
 `...`  
  
 `</webParts>`  
  
 브라우저에서 페이지를 로드할 때 선택할 수 있습니다 **카탈로그** 카탈로그 디스플레이 모드를 전환할 수 있는 드롭다운 목록 상자에서. 선언적 방법과 프로그래밍의 사용 카탈로그가 표시 되 고 페이지로 카탈로그에서 추가할 수 있는 두 명의 서버 컨트롤을 볼 수 있습니다 하 고도 기록할 수 ui에서의 효과 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스 멤버입니다.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>호스팅에 대 한 사용자 지정 영역을 개발 하려면 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 컨트롤 영역 서식 파일 지원을 제공 하기 위해 사용할지를 결정 해야 있습니다. 영역 서식 파일을 구현 하는 형식에 의해 만들어집니다는 <see cref="T:System.Web.UI.ITemplate" /> 인터페이스, 이며 페이지 개발자가 사용자 지정 영역을 사용 하 여 참조할 수 있도록 하려는 경우 필요 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 영역 내에서 웹 페이지의 선언적 태그 컨트롤입니다. 영역 템플릿 지원이 필요에서 상속 해야 하는 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 클래스입니다. 반대로 하는 경우 사용자 지정 영역 및 해당 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 컨트롤 자체 포함 될 하려고 하 고 페이지 영역 서식 파일에서 선언적으로 제어를 지정 하는 개발자에 대 한 옵션 없이 프로그래밍 방식으로 만든 다음 직접 상속할 수 있습니다 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 클래스입니다. 상속 하는 경우는 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 재정의 해야 클래스는 <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts" /> 메서드를 추가 하 고는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 또는 기타 서버 컨트롤에 카탈로그에 포함 하려는 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> 개체입니다.</para>
    </block>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CatalogZoneBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CatalogZoneBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>상속된 클래스 인스턴스에 사용할 수 있도록 클래스를 초기화합니다. 이 생성자는 상속된 클래스에서만 호출될 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 생성자와 같은 파생된 클래스 초기화 될 때 호출 됩니다는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 웹 파트 컨트롤 집합와 함께 제공 되는 클래스입니다. 기본 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.%23ctor%2A> 생성자에 적절 한 전달 하 여 웹 파트 카탈로그 사용자 인터페이스 (UI)를 표시 하려면 페이지를 준비 하는 데 도움이 됩니다 <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> 개체는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 제어 합니다. 특히, 생성자 패스는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode> 개체입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddVerb">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.WebPartVerb AddVerb { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartVerb AddVerb" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.AddVerb" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AddVerb As WebPartVerb" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::WebParts::WebPartVerb ^ AddVerb { System::Web::UI::WebControls::WebParts::WebPartVerb ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartVerb</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>최종 사용자가 카탈로그의 컨트롤을 웹 파트 페이지에 추가하는 데 사용할 수 있는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" /> 개체에 대한 참조를 가져옵니다.</summary>
        <value>최종 사용자가 카탈로그의 컨트롤을 웹 페이지에 추가하는 데 사용할 수 있는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 추가 동사에서 참조 되는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.AddVerb%2A> 에서 파생 된 컨트롤의 속성에는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스입니다. 추가 동사 웹 페이지에는 카탈로그에서 최종 사용자가 선택한 컨트롤을 추가 합니다. 일반적으로 추가 동사 사용자 인터페이스 (UI)로 표시 한 <xref:System.Web.UI.WebControls.Button> 링크나 이미지 될 수도 수 있지만 제어 합니다.  
  
 추가 동사는 있을 수 있지만 몇 가지 즉 영역 수준 컨트롤 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 카탈로그에 컨트롤을 추가 동사 사용자가 선택한 모든 컨트롤에 적용 하 고 선택한 영역에 추가 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 액세스 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.AddVerb%2A> 속성 선언적 방법과 프로그래밍 방식으로 합니다. 예제를 실행 하는 데 필요한 전체 코드의 예 섹션을 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스 개요입니다.  
  
 코드 예제의 첫 번째 부분에서는 액세스 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.ApplyVerb%2A> 웹 페이지에서 선언적으로 속성입니다. 이 예제에서는 사용자의 동사에 대 한 텍스트를 지정합니다.  
  
 [!code-aspx-csharp[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-aspx-vb[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 예제의 두 번째 부분에 액세스 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.AddVerb%2A> 속성 활성화 또는 비활성화를 토글 단추를 사용 하 여 프로그래밍 방식으로 합니다.  
  
 [!code-csharp[WebParts_CatalogZoneBase_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#3)]
 [!code-vb[WebParts_CatalogZoneBase_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#3)]  
  
 브라우저에서 페이지를 로드할 때 선택할 수 있습니다 **카탈로그** 카탈로그 디스플레이 모드를 전환 하려면 드롭 다운 목록에서. 카탈로그 표시 되 면에서 사용자 지정된 텍스트를 검사할 수 있습니다는 <xref:System.Web.UI.WebControls.Button> 컨트롤을 추가 동사 하 고 클릭 수는 **사용 또는 사용 하지 않도록 설정 하는 동사** 단추를 적용 동사를 프로그래밍 방식으로 액세스할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" />
      </Docs>
    </Member>
    <Member MemberName="CatalogPartChrome">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.CatalogPartChrome CatalogPartChrome { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.CatalogPartChrome CatalogPartChrome" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogPartChrome" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CatalogPartChrome As CatalogPartChrome" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::CatalogPartChrome ^ CatalogPartChrome { System::Web::UI::WebControls::WebParts::CatalogPartChrome ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPartChrome</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartChrome" /> 영역과 연결된 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 클래스의 인스턴스에 대한 참조를 가져옵니다.</summary>
        <value>영역과 연결된 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartChrome" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogPartChrome%2A> 메서드는의 한 인스턴스를 만듭니다는 <xref:System.Web.UI.WebControls.WebParts.CatalogPartChrome> 클래스와이 인스턴스의 모든 주변 사용자 (크롬 라고도 함) 인터페이스 (UI) 요소를 렌더링 하는 데 사용 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 영역의 컨트롤입니다.  
  
 개인에 대 한 크롬 요소가 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤의 테두리 및 제목 텍스트를 포함 합니다. <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 웹 파트 컨트롤 집합와 함께 제공 되는 컨트롤 기본적으로 헤더 동사에는 없습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogPartChrome" />
      </Docs>
    </Member>
    <Member MemberName="CatalogParts">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.CatalogPartCollection CatalogParts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.CatalogPartCollection CatalogParts" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CatalogParts As CatalogPartCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::CatalogPartCollection ^ CatalogParts { System::Web::UI::WebControls::WebParts::CatalogPartCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPartCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 영역에 포함된 모든 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 컨트롤의 컬렉션을 가져옵니다.</summary>
        <value>영역의 모든 개별 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> 컨트롤이 포함된 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts%2A> 모든 컬렉션에 대 한 참조를 제공 하는 속성은 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 영역에서 컨트롤입니다. 모두 참조는 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 웹 파트 컨트롤 집합 및 사용자 지정 제공 되는 제어 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 영역에 추가 하는 컨트롤입니다.  
  
 에서는 컬렉션을 액세스 하는 또 다른 방법은 때 만든 처음는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts%2A> 속성 및 속성 호출의 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts%2A> 메서드.  
  
> [!NOTE]
>  모든 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 의 컬렉션에 추가 된 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤의 구현에는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts%2A> 메서드의 ID 속성에 할당 된 값이 있어야 합니다, 컬렉션의 에할당된경우예외가throw됩니다<xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 액세스 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts%2A> 속성 프로그래밍 방식으로 합니다. 예제를 실행 하는 데 필요한 전체 코드의 예 섹션을 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스 개요입니다.  
  
 이 코드 예제에서는 액세스 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts%2A> 속성, 컬렉션에서 반복 하 고 모든 Id를 나열는 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 영역에서 컨트롤입니다.  
  
 [!code-csharp[WebParts_CatalogZoneBase_Overview#4](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#4)]
 [!code-vb[WebParts_CatalogZoneBase_Overview#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#4)]  
  
 브라우저에서 페이지를 로드할 때 선택할 수 있습니다 **카탈로그** 카탈로그 디스플레이 모드를 전환 하려면 드롭 다운 목록에서. 카탈로그 표시 되 면 클릭할 수는 **목록 CatalogParts** 단추를 방법을 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts%2A> 속성에 액세스할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">컬렉션에 추가될 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />의 ID 속성에 할당된 값이 없는 경우</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="protected override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.Close" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>웹 페이지를 카탈로그 디스플레이 모드에서 표준 찾아보기 모드로 전환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.Close%2A> 메서드 카탈로그에 현재 선택된 된 컨트롤을 무시 합니다. 호출 하 여 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 찾아보기 모드로 웹 페이지를 반환 하는 컨트롤입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode" />
        <altmember cref="F:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode" />
      </Docs>
    </Member>
    <Member MemberName="CloseVerb">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.WebPartVerb CloseVerb { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartVerb CloseVerb" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CloseVerb" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CloseVerb As WebPartVerb" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::WebParts::WebPartVerb ^ CloseVerb { System::Web::UI::WebControls::WebParts::WebPartVerb ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartVerb</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>최종 사용자가 카탈로그 UI(사용자 인터페이스)를 닫고 페이지를 표준 찾아보기 모드로 되돌리는 데 사용할 수 있는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" /> 개체에 대한 참조를 가져옵니다.</summary>
        <value>최종 사용자가 웹 페이지에서 카탈로그 UI를 닫는 데 사용할 수 있는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 닫기 동사에서 참조 되는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CloseVerb%2A> 에서 파생 된 컨트롤의 속성에는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스입니다.  
  
 영역 바닥글에 있는 닫기 동사를 클릭할 수 있습니다. 사용자가 클릭할 때 닫기 동사 어떤 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 사용자가 선택한 컨트롤은 무시, 카탈로그 UI가 닫히고 페이지 표준 찾아보기 모드로 돌아갑니다.  
  
 닫기 동사는 영역 수준 컨트롤, 즉 해당 작업은 전체 영역 수준에서 적용 됩니다. 닫기 동사를 클릭 하면 선택 되었지만 페이지에 추가 되지 않은 모든 컨트롤은 무시 됩니다. 카탈로그 닫혀 및 페이지에서 찾아보기 모드로 돌아갑니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 액세스 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CloseVerb%2A> 속성 선언적 방법과 프로그래밍 방식으로 합니다. 예제를 실행 하는 데 필요한 전체 코드의 예 섹션을 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스 개요입니다.  
  
 코드 예제의 첫 번째 부분에서는 액세스 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CloseVerb%2A> 웹 페이지에서 선언적으로 속성입니다. 이 예제에서는 사용자 지정은 <xref:System.Web.UI.WebControls.WebParts.WebPartVerb.Description%2A> 동사에 대 한 속성입니다.  
  
 [!code-aspx-csharp[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-aspx-vb[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 예제의 두 번째 부분에 액세스 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CloseVerb%2A> 속성 활성화 또는 비활성화를 토글 단추를 사용 하 여 프로그래밍 방식으로 합니다.  
  
 [!code-csharp[WebParts_CatalogZoneBase_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#3)]
 [!code-vb[WebParts_CatalogZoneBase_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#3)]  
  
 브라우저에서 페이지를 로드할 때 선택할 수 있습니다 **카탈로그** 카탈로그 디스플레이 모드를 전환 하려면 드롭 다운 목록에서. 위에 마우스 포인터를 배치 하 여 카탈로그 표시 되는 경우는 **닫기** 단추를 도구 설명에 설명 텍스트를 볼 수 있습니다. 클릭할 수도 있습니다는 **사용 또는 사용 하지 않도록 설정 하는 동사** 단추를 닫기 동사를 프로그래밍 방식으로 액세스할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" />
      </Docs>
    </Member>
    <Member MemberName="CreateCatalogPartChrome">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.CatalogPartChrome CreateCatalogPartChrome ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.CatalogPartChrome CreateCatalogPartChrome() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogPartChrome" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateCatalogPartChrome () As CatalogPartChrome" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::WebParts::CatalogPartChrome ^ CreateCatalogPartChrome();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPartChrome</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>영역에 있는 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartChrome" /> 컨트롤의 주변 UI(사용자 인터페이스) 요소를 렌더링하는 데 사용되는 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 개체의 인스턴스를 만듭니다.</summary>
        <returns>영역에 대한 주변 UI 요소를 렌더링하는 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartChrome" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogPartChrome%2A> 메서드는 <xref:System.Web.UI.WebControls.WebParts.CatalogPartChrome> 개체를 반환합니다. 개인에 대 한 크롬 요소가 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤의 테두리 및 제목 텍스트를 포함 합니다. <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 웹 파트 컨트롤 집합와 함께 제공 되는 컨트롤 기본적으로 헤더 동사에는 없습니다. 그러나 설정 하 고는 <xref:System.Web.UI.WebControls.WebParts.Part.ChromeState%2A> 속성은 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 최소화 하 고 필요한 경우 컨트롤을 프로그래밍 방식으로 복원할 수 있도록 컨트롤입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartChrome" />
      </Docs>
    </Member>
    <Member MemberName="CreateCatalogParts">
      <MemberSignature Language="C#" Value="protected abstract System.Web.UI.WebControls.WebParts.CatalogPartCollection CreateCatalogParts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.CatalogPartCollection CreateCatalogParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateCatalogParts () As CatalogPartCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Web::UI::WebControls::WebParts::CatalogPartCollection ^ CreateCatalogParts();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>영역에 포함된 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 컨트롤 작성의 세부 사항을 처리하기 위해 파생 영역에서 재정의할 수 있는 기본 메서드 선언을 제공합니다.</summary>
        <returns>영역과 관련된 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> 컨트롤의 컬렉션이 포함된 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts%2A> 메서드 구현을 제공 합니다. 파생된 클래스에서 구현 하기 위한 용도가 하 고 컬렉션의 인스턴스를 만드는 데 사용할 수 해야 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 호스팅 웹 페이지에는 카탈로그 모드로 전환 될 때마다 영역에 포함 된 컨트롤입니다. <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A?displayProperty=nameWithType> 의 구현에 대 한 예제를 제공 하는 메서드는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts%2A> 메서드.  
  
> [!NOTE]
>  모든 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 의 컬렉션에 추가 된 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤의 구현에는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts%2A> 메서드의 ID 속성에 할당 된 값이 있어야 합니다, 컬렉션의 에할당된경우예외가throw됩니다<xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogParts%2A> 속성입니다.  
  
 메서드를 만들 수는 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 여러 원본에서 컨트롤: 내에서 일관 된 형식에 선언 된 컨트롤에는 <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart> 컨트롤 또는 XML 파일 또는 데이터베이스와 같은 다양 한 저장소 메커니즘에 유지 되는 컨트롤입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>사용자 지정을 만드는 개발자 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 컨트롤에서 상속 해야는 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 또는 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 클래스 및 사용자 지정을 만들려는 경우이 메서드를 재정의 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartChrome" /> 사용자 지정 렌더링 하는 개체 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 컨트롤입니다.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" />
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected internal override void CreateChildControls ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void CreateChildControls() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateChildControls" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub CreateChildControls ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void CreateChildControls();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 영역과 관련된 자식 컨트롤 집합을 만듭니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyZoneText">
      <MemberSignature Language="C#" Value="public override string EmptyZoneText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EmptyZoneText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.EmptyZoneText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property EmptyZoneText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EmptyZoneText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>영역에 컨트롤이 없는 경우 표시되는 메시지를 가져오거나 설정합니다.</summary>
        <value>빈 영역에 표시되는 메시지를 포함하는 문자열입니다. 기본 문화권별 문자열은 .NET Framework에서 제공합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 문자열 값은 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.EmptyZoneText%2A> 경우 속성은 웹 페이지에는 카탈로그 모드를 시작 하는 경우에 표시 됩니다는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> ' 아니요 ' 영역 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.EmptyZoneText%2A> 속성 선언적으로 합니다. 예제를 실행 하는 데 필요한 전체 코드의 예 섹션을 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스 개요입니다.  
  
 코드 예제에서는 두 개의 선언 `<asp:catalogzone>` 요소 및 두 번째 선언 하지 않는 모든 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 에 값을 할당가 있지만 제어는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.EmptyZoneText%2A> 속성입니다.  
  
 [!code-aspx-csharp[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-aspx-vb[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 브라우저에서 페이지를 로드할 때 선택할 수 있습니다 **카탈로그** 카탈로그 디스플레이 모드를 전환 하려면 드롭 다운 목록에서. 카탈로그 표시 되 면 첫 번째 영역 아래 있는 예를 들어 표시 두 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤을 두 번째 영역 나타나고의 내용을 표시는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.EmptyZoneText%2A> 속성 컨트롤이 없는 포함 하기 때문에 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebZone.EmptyZoneText" />
      </Docs>
    </Member>
    <Member MemberName="HeaderText">
      <MemberSignature Language="C#" Value="public override string HeaderText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property HeaderText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HeaderText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>영역의 머리글 영역에 대한 텍스트를 가져오거나 설정합니다.</summary>
        <value>영역에 대한 머리글 텍스트를 포함하는 문자열입니다. 기본 문화권별 문자열은 .NET Framework에서 제공합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 문자열 값은 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText%2A> 속성의 헤더 영역에 표시 됩니다는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 영역의 맨 위쪽에 있는 영역입니다. 텍스트는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText%2A> 속성 페이지 카탈로그 모드를 시작 하며 카탈로그 사용자 인터페이스 (UI)를 볼 때 표시 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText%2A> 속성 선언적 방법과 프로그래밍 방식으로 합니다. 예제를 실행 하는 데 필요한 전체 코드의 예 섹션을 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스 개요입니다.  
  
 코드 예제에서는 두 개의 선언 `<asp:catalogzone>` 요소입니다. 두 번째를 선언 하지 않는 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤 하지만 둘 다에 대 한 값을 선언 합니다.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText%2A> 속성입니다.  
  
 [!code-aspx-csharp[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-aspx-vb[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 코드 예제에서는 값의 두 번째 부분에는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText%2A> 첫 번째 영역에서 속성을 다른 값으로 프로그래밍 방식으로 할당 됩니다.  
  
 [!code-csharp[WebParts_CatalogZoneBase_Overview#5](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#5)]
 [!code-vb[WebParts_CatalogZoneBase_Overview#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#5)]  
  
 브라우저에서 페이지를 로드할 때 선택할 수 있습니다 **카탈로그** 카탈로그 디스플레이 모드를 전환 하려면 드롭 다운 목록에서. 카탈로그 표시 되 면 각 값에 유의 하세요 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText%2A> 각 영역의 머리글 영역에 표시 된 속성입니다. 클릭할 수 있는 **영역 텍스트 속성을 설정** 단추 및 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.HeaderText%2A> 위쪽 영역 속성 코드에서 할당 된 값으로 설정 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebZone.HeaderText" />
      </Docs>
    </Member>
    <Member MemberName="InstructionText">
      <MemberSignature Language="C#" Value="public override string InstructionText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InstructionText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property InstructionText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ InstructionText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>최종 사용자에 대한 지침을 제공하는 영역의 텍스트를 가져오거나 설정합니다.</summary>
        <value>최종 사용자를 위한 지침을 포함하는 문자열입니다. 기본값인 문화권별 문자열은 웹 파트 컨트롤 집합에서 제공합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 문자열 값은 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A> 속성의 헤더 영역 바로 아래에 표시 되는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 영역입니다. 텍스트는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A> 속성 페이지 카탈로그 모드를 시작 하며 카탈로그 사용자 인터페이스 (UI)를 볼 때 표시 됩니다.  
  
 용도 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A> 속성 카탈로그 UI를 표시할 때 수행할 작업에 대 한 일반 지침이 포함 된 사용자를 제공 하는 것입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A> 속성 선언적 방법과 프로그래밍 방식으로 합니다. 예제를 실행 하는 데 필요한 전체 코드의 예 섹션을 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스 개요입니다.  
  
 코드 예제에서는 두 개의 선언 `<asp:catalogzone>` 요소 및 첫 번째 선언에 대 한 값은 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A> 속성입니다.  
  
 [!code-aspx-csharp[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-aspx-vb[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 코드 예제에서는 값의 두 번째 부분에는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A> 첫 번째 영역에서 속성을 다른 값으로 프로그래밍 방식으로 할당 됩니다.  
  
 [!code-csharp[WebParts_CatalogZoneBase_Overview#5](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#5)]
 [!code-vb[WebParts_CatalogZoneBase_Overview#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#5)]  
  
 브라우저에서 페이지를 로드할 때 선택할 수 있습니다 **카탈로그** 카탈로그 디스플레이 모드를 전환 하려면 드롭 다운 목록에서. 표시 된 카탈로그의 값이 표시는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A> 각 영역의 머리글 영역에 표시 된 속성입니다. 클릭할 수 있는 **영역 텍스트 속성을 설정** 단추 및 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InstructionText%2A> 위쪽 영역 속성 코드에서 할당 된 값으로 설정 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ToolZone.InstructionText" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateCatalogParts">
      <MemberSignature Language="C#" Value="protected void InvalidateCatalogParts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvalidateCatalogParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InvalidateCatalogParts" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvalidateCatalogParts ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvalidateCatalogParts();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 영역과 관련된 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 컨트롤의 컬렉션을 소멸합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InvalidateCatalogParts%2A> 경우 파생된 클래스에서 메서드를 호출할 수 있습니다 목록이 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 와 연관 된 컨트롤을 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 시간대가 어떤 이유로 변경 하며 파생된 클래스의 업데이트 된 목록을 가져올 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤입니다. 파생된 클래스를 먼저 호출 해야 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InvalidateCatalogParts%2A> 현재 컬렉션 및 기본 클래스를 제거 하는 호출 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts%2A> 대로 업데이트 된 컬렉션을 만드는 데 필요 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts" />
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected internal override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.LoadControlState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub LoadControlState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void LoadControlState(System::Object ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">이전에 저장된 상태 데이터입니다.</param>
        <summary>이전 페이지 요청에서 포스트백할 때마다 항상 유지되어야 하는 컨트롤 속성의 상태를 로드합니다. 이는 컨트롤에 뷰 상태를 사용할 수 없도록 설정된 경우에도 해당됩니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="savedState" />가 잘못된 컨트롤 상태인 경우</exception>
        <altmember cref="M:System.Web.UI.Control.LoadControlState(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LoadPostData">
      <MemberSignature Language="C#" Value="protected virtual bool LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LoadPostData (postDataKey As String, postCollection As NameValueCollection) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LoadPostData(System::String ^ postDataKey, System::Collections::Specialized::NameValueCollection ^ postCollection);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">컨트롤의 키 식별자입니다.</param>
        <param name="postCollection">서버에 게시된 이름/값 쌍의 컬렉션입니다.</param>
        <summary>페이지가 서버에 포스트백될 때 카탈로그의 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤에 해당하는 확인란의 상태를 처리합니다.</summary>
        <returns>이 메서드는 재정의된 기본 메서드와 달리 해당 클래스에서 변경 이벤트를 노출하지 않으므로 항상 <see langword="false" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 컬렉션을 반복 <xref:System.Web.UI.WebControls.CheckBox> 여부를 확인 하는 컨트롤 <xref:System.Web.UI.WebControls.WebParts.WebPart> 하거나 사용자가 카탈로그에서 다른 서버 컨트롤 선택 했습니다. 선택한 항목을 웹 페이지에 해당 하는 컨트롤을 추가 하려면 다음 처리 내부 배열에 할당 됩니다.  
  
 메서드 코드에서 호출할 수 하도록 설계 되지 않았습니다. 웹 파트 컨트롤 집합에서 내부적으로 사용 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">이전에 저장된 상태 데이터입니다.</param>
        <summary>영역에 대해 이전에 저장된 상태 정보를 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는.NET Framework 인프라에서 주로 사용 하 고 사용자 코드에서 직접 사용할 수 없습니다. 그러나 사용자 지정 서버 컨트롤에서 해당 뷰 상태를 복원 하는 방법을 지정 하려면이 메서드를 재정의할 수 있습니다. 자세한 내용은 참조 [ASP.NET 상태 관리 개요](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce)합니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.LoadViewState%2A> 메서드 먼저 모든 기존 상태 정보를 로드 기본 메서드를 호출 합니다. 닫기 동사를 추가 동사에 대 한 상태 정보를 포함 하는 뷰 상태 데이터 개체를 추가 다음으로 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle%2A> 개체 및 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle%2A> 개체입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="savedState" /> 개체의 크기가 현재 뷰 상태 개체의 크기와 다른 경우</exception>
        <altmember cref="M:System.Web.UI.Control.LoadViewState(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>페이지 개체를 컨트롤 상태가 필요한 페이지로 등록합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Web.UI.Control.PreRender" /> 이벤트를 발생시키고 페이지 개체를 포스트백해야 하는 개체로 등록합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PartLinkStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Style PartLinkStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.Style PartLinkStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PartLinkStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::Style ^ PartLinkStyle { System::Web::UI::WebControls::Style ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>영역에서 현재 선택되지 않은 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 컨트롤에 적용할 스타일 특성이 포함된 개체를 가져옵니다.</summary>
        <value>현재 선택되지 않은 컨트롤에 적용할 스타일 특성이 포함된 <see cref="T:System.Web.UI.WebControls.Style" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 영역을의 각 형식에 대 한 링크가 표시 되도록 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 제어: <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>, <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>, 및 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>합니다. 클릭 하면 해당 링크 중 하나 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤은 선택한 컨트롤 및 선택한 컨트롤에 포함 된 자식 컨트롤이 표시 됩니다.  
  
 <xref:System.Web.UI.WebControls.Style> 에서 참조 하는 개체는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle%2A> 속성에 대 한 스타일 특성 포함는 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 현재 선택 되지 않은 컨트롤입니다. 속성에서 참조 하는 개체 읽기 전용 이지만, 사용할 수 있습니다 여전히에서는 선택 되지 않은 기본 스타일 특성을 설정 하려면 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle%2A> 속성 선언적 방법과 프로그래밍 방식으로 합니다. 예제를 실행 하는 데 필요한 전체 코드의 예 섹션을 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스 개요입니다.  
  
 첫 번째 부분 코드 예제에서는 두 개의 선언 `<asp:catalogzone>` 요소 및 첫 번째 선언에 대 한 값은 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle%2A> 속성입니다.  
  
 [!code-aspx-csharp[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-aspx-vb[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 코드 예제에서는 두 번째 부분에서 텍스트는 선택 되지 않은 항목에 대 한 색 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤을 다른 값으로 설정 됩니다.  
  
 [!code-csharp[WebParts_CatalogZoneBase_Overview#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#7)]
 [!code-vb[WebParts_CatalogZoneBase_Overview#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#7)]  
  
 브라우저에서 페이지를 로드할 때 선택할 수 있습니다 **카탈로그** 카탈로그 디스플레이 모드를 전환 하려면 드롭 다운 목록에서. 카탈로그 표시 되 면 확인 되지 않은의 스타일 특성 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 영역에 나열 된 컨트롤 (기본적으로 선택한 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤은는 <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart> 컨트롤). 클릭할 수는 **부분 링크 스타일 변경** 단추 선택 되지 않은 컨트롤의 텍스트 색을 변경 합니다. 컨트롤을 선택 하면 스타일 특성이 어떻게 변경 되는지 확인 하는 선택 되지 않은 컨트롤에 대 한 링크를 클릭할 수도 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected override void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RaisePostBackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RaisePostBackEvent(System::String ^ eventArgument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">이벤트에 대한 인수가 들어 있는 <see cref="T:System.String" />입니다.</param>
        <summary>영역 동사 하나와 관련된 작업을 수행하거나 서버에 다시 게시되는 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 `eventArgument` 매개 변수 데이터 추가 동사 또는 닫기 동사 클릭 되었는지 나타냅니다 하면 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RaisePostBackEvent%2A> 메서드 추가 하는 등 동사와 연결 된 작업을 수행 <xref:System.Web.UI.WebControls.WebParts.WebPart> 는 페이지 또는 카탈로그를 닫기 컨트롤입니다. 다른 이유로 메서드가 호출 되 고, 기본 메서드를 서버에 포스트백 이벤트를 발생 시키는 호출 됩니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>사용자 지정 동사를 추가 하려는 경우는 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 재정의 해야 하는 영역을는 <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RaisePostBackEvent(System.String)" /> 메서드를 이벤트를 처리 하 여 사용자가 사용자 지정 동사를 클릭 합니다.</para>
        </block>
        <altmember cref="M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">영역의 콘텐츠를 받는 <see cref="T:System.Web.UI.HtmlTextWriter" />입니다.</param>
        <summary>지정된 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체에 대해 영역을 렌더링합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.Render%2A> 에서 기본 메서드를 재정의 <xref:System.Web.UI.WebControls.WebControl> 호출 하는 클래스는 <xref:System.Web.UI.Page.VerifyRenderingInServerForm%2A> 런타임 시 HTML 양식 영역의 컨트롤에 대 한 렌더링 됨을 확인 하는 메서드. 검토 한 후, 메서드는 다음 영역의 나머지 내용을 렌더링합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartZoneBase.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderBody">
      <MemberSignature Language="C#" Value="protected override void RenderBody (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RenderBody(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderBody(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RenderBody (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RenderBody(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">영역의 본문 콘텐츠를 받는 <see cref="T:System.Web.UI.HtmlTextWriter" />입니다.</param>
        <summary>기본 메서드를 재정의하여 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 클래스에서 파생된 영역의 본문 부분을 렌더링합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderBody%2A> 메서드 본문 부분을 렌더링 한 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 영역을 포함 하는 머리글 및 바닥글 영역 사이의 주 콘텐츠 영역 부분인 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤입니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderBody%2A> 의 기본 메서드를 재정의 <xref:System.Web.UI.WebControls.WebParts.WebZone> 레이아웃과 스타일을 해결할 수 있는 특수 한 렌더링 되는 특성을 제공 하기 위해 클래스에만 적용 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 영역입니다. 메서드는 본문의 전체 내용을 포함 하는 테이블을 렌더링 하 고 해당 테이블 내에서 서로 다른 특성 값을 설정 등을 포함 한 다양 한 조건에 따라 개수 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤은 영역에 있습니다. 여러 개 있는 경우 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤 각 컨트롤에 대 한 링크가 만들어집니다 및 현재 선택 된 컨트롤의 내용이 표시 됩니다. 특별 한 스타일 특성에 설정 된는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CatalogPartChrome%2A> 선택한 속성 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 와 현재 선택 되지 않은 컨트롤입니다.  
  
 없는 경우 없는 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 는 영역에서 컨트롤의 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderBody%2A> 의 값을 렌더링 하는 메서드는 <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.EmptyZoneText%2A> 속성.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.RenderBody(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebZone.RenderBody(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderCatalogPartLinks">
      <MemberSignature Language="C#" Value="protected virtual void RenderCatalogPartLinks (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RenderCatalogPartLinks(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderCatalogPartLinks(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RenderCatalogPartLinks (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RenderCatalogPartLinks(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">영역의 컨트롤에 대한 링크 내용을 받는 <see cref="T:System.Web.UI.HtmlTextWriter" />입니다.</param>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 영역에 있는 개별 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 컨트롤에 대한 링크를 렌더링합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderCatalogPartLinks%2A> 메서드 개인에 대 한 링크를 렌더링 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 여러 개 있는 경우 영역에 제어 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤입니다.  
  
 현재 선택 된 링크 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 선택 되지 않은 컨트롤에서 구별 되도록 컨트롤이 다르게 렌더링 됩니다. 개발자가 사용 하 여 컨트롤 또는 선택 하지 않은 링크에 대 한 스타일 특성을 설정할 수는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle%2A> 및 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle%2A> 속성을 각각.  
  
 에 대 한 링크는 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 영역에는 컨트롤은 탐색 하기 위한 것 이므로 컨트롤의 사용자 인터페이스 (UI)를 표시 합니다. 사용자가 컨트롤에 대 한 링크를 클릭 하면 표시 된 다른 컨트롤에 대 한 UI가 표시 하 고 선택한 컨트롤에 대 한 UI 표시 됩니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>상속 되는 사용자 지정 클래스를 만드는 경우는 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 클래스, 필요에 따라을 재정의할 수 있습니다는 <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderCatalogPartLinks(System.Web.UI.HtmlTextWriter)" /> 메서드. 이 메서드는 프로그래밍 방식으로 제어할 방법 제공에 대 한 링크 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 시간대에서 컨트롤 렌더링 됩니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RenderFooter">
      <MemberSignature Language="C#" Value="protected override void RenderFooter (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RenderFooter(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderFooter(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RenderFooter (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RenderFooter(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">영역의 바닥글 부분을 렌더링하는 <see cref="T:System.Web.UI.HtmlTextWriter" />입니다.</param>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 영역의 바닥글 부분을 렌더링합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 바닥글에는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 영역은 아래쪽 영역의 추가 동사 및 닫기 동사와 같은 영역 수준 동사를 포함 하는 영역입니다. 기본 태그에서 바닥글은 HTML 테이블에는 셀에 단순히입니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderFooter%2A> 메서드가 먼저 바닥글에 대 한 스타일 특성을 생성 되 고 다음 호출는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderVerbs%2A> 메서드를 추가 렌더링 하 고 동사를 닫습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderVerbs(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebZone.RenderFooter(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderVerbs">
      <MemberSignature Language="C#" Value="protected override void RenderVerbs (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RenderVerbs(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderVerbs(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RenderVerbs (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RenderVerbs(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">영역의 동사를 렌더링하는 <see cref="T:System.Web.UI.HtmlTextWriter" />입니다.</param>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 영역의 바닥글 부분에 동사를 렌더링합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderVerbs%2A> 추가 동사와의 바닥글 영역 내 닫기 동사를 렌더링 하는 메서드는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 영역입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderVerbs(System.Web.UI.HtmlTextWriter)" /> 메서드는 사용자 지정에 대 한 렌더링을 처리 하지 않는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" /> 개발자는 사용자 지정을 추가 하는 개체 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 영역입니다. 에 사용자 지정 동사를 추가 하려는 경우는 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 클래스에서 상속 해야 합니다는 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 클래스를 재정의 하는 <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RenderVerbs(System.Web.UI.HtmlTextWriter)" /> 영역에 대 한 사용자 지정 동사를 렌더링 하는 데 사용할 수 있는 메서드. 도 재정의 해야 합니다는 <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RaisePostBackEvent(System.String)" /> 메서드는 사용자가 사용자 지정 동사를 클릭할 때 이벤트를 처리 합니다.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.ToolZone.RenderVerbs(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.RaisePostBackEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected internal override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SaveControlState" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function SaveControlState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Object ^ SaveControlState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>웹 페이지가 서버에 포스트백된 후에 발생하는 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 컨트롤 상태의 변경 내용을 저장합니다.</summary>
        <returns>컨트롤의 상태 데이터가 들어 있는 <see cref="T:System.Object" />입니다. 상태가 변경되지 않은 경우 이 메서드는 <see langword="null" />을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SaveControlState%2A> 메서드 (예: 인덱스 또는 키워드) 컨트롤의 작업에 필수적 이며 컨트롤의 뷰 상태 데이터와에서 별개의 상태 데이터와 관련 되어 있습니다.  
  
 메서드는 먼저 컨트롤에 대 한 기존 상태 데이터를 저장 하려면 기본 메서드를 호출 합니다. 그런 다음, 확인 여부를 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 는 영역의 컨트롤에에서 현재 선택 된 확인 하 여 있는지 여부를 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID%2A> 속성 값은 합니다. 선택한 컨트롤 이면 메서드는 선택한 컨트롤의 상태 데이터로 기존 상태 데이터를 업데이트 하 고 모든 상태 데이터를 반환 합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>선택적으로 재정의할 수 있습니다는 <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SaveControlState" /> 파생된 클래스에서 메서드 영역에 다른 사용자 지정 개체에 대 한 저장된 컨트롤 상태를 업데이트할 수 있도록 합니다.</para>
        </block>
        <altmember cref="M:System.Web.UI.Control.SaveControlState" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>페이지가 서버에 게시된 이후 발생한 뷰 상태의 변경을 저장합니다.</summary>
        <returns>영역 컨트롤의 현재 뷰 상태를 반환합니다. 영역과 관련된 뷰 상태가 없는 경우 이 메서드는 <see langword="null" />을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SaveViewState%2A> 와 관련 된 뷰 상태를 저장 하도록 기본 메서드를 호출 하는 메서드는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 영역입니다. Add 및 닫기 동사에 대 한 것은 물론 뷰 상태를 저장 하기는 다음으로 <xref:System.Web.UI.WebControls.Style> 와 연결 된 개체는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle%2A> 및 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Control.SaveViewState" />
      </Docs>
    </Member>
    <Member MemberName="SelectedCatalogPartID">
      <MemberSignature Language="C#" Value="public string SelectedCatalogPartID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedCatalogPartID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedCatalogPartID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectedCatalogPartID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>영역에서 현재 선택된 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 컨트롤의 식별자로 사용되는 문자열을 가져오거나 설정합니다.</summary>
        <value>현재 선택된 컨트롤의 식별자로 사용되는 문자열입니다. 기본값은 컨트롤의 <see cref="P:System.Web.UI.Control.ID" /> 속성 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID%2A> 속성을 사용 하면 현재 선택 된 사용자가 선택한 식별자를 설정할 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 제어 합니다. 이 컨트롤의 변경 되지 않습니다 <xref:System.Web.UI.Control.ID%2A> 속성 값을 프로그래밍 방식으로이 속성을 사용할 수 있도록 합니다. 예를 들어 항상 하려는 경우 수행 특정 프로그래밍 작업을 현재 선택 된 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤,이 속성을 사용 하면 미리 설정 된 알려진된 값을 통해 해당 컨트롤에 액세스할 수 있습니다.  
  
 이 속성은 테마 또는 스타일시트 테마에 의해 설정될 수 없습니다. 자세한 내용은 참조 <xref:System.Web.UI.ThemeableAttribute> 및 [ASP.NET 테마와 스킨](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID%2A> 속성 선언적 방법과 프로그래밍 방식으로 합니다. 예제를 실행 하는 데 필요한 전체 코드의 예 섹션을 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스 개요입니다.  
  
 첫 번째 부분 코드 예제에서는 두 개의 선언 `<asp:catalogzone>` 요소 및 첫 번째 선언에 대 한 값은 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID%2A> 속성입니다.  
  
 [!code-aspx-csharp[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-aspx-vb[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 코드 예제에서는 두 번째 부분에서 텍스트에 대 한 값은 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID%2A> 현재 선택 된 컨트롤의 속성이 표시 됩니다.  
  
 [!code-csharp[WebParts_CatalogZoneBase_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#6)]
 [!code-vb[WebParts_CatalogZoneBase_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#6)]  
  
 브라우저에서 페이지를 로드할 때 선택할 수 있습니다 **카탈로그** 카탈로그 디스플레이 모드를 전환 하려면 드롭 다운 목록에서. 표시 된 카탈로그에 대 한 링크 중 하나를 클릭 한 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤을 선택 합니다. 클릭는 **선택한 CatalogPart ID 표시** 속성 값을 표시 하는 단추입니다. 속성의 값 영역에 대 한 선언적으로 설정 된 값 임을 확인 합니다. 다른 선택 하는 경우 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 영역에서 컨트롤을 동일한 값의 값이 됩니다는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID%2A> 선택 된 경우 각 컨트롤에 대 한 속성입니다. 값을 설정 하지 않는 경우는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedCatalogPartID%2A> 속성, 기본값은 값을 항상는 <xref:System.Web.UI.Control.ID%2A> 현재 선택 된 컨트롤에 대 한 속성입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedPartLinkStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Style SelectedPartLinkStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.Style SelectedPartLinkStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedPartLinkStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::Style ^ SelectedPartLinkStyle { System::Web::UI::WebControls::Style ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>영역에서 현재 선택된 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 컨트롤에 적용할 스타일 특성이 포함된 개체를 가져옵니다.</summary>
        <value>현재 선택된 컨트롤에 적용할 스타일 특성이 포함된 <see cref="T:System.Web.UI.WebControls.Style" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 영역을의 각 형식에 대 한 링크가 표시 되도록 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 제어: <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>, <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>, 및 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>합니다. 클릭 하면 해당 링크 중 하나 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤은 선택한 컨트롤 및 선택한 컨트롤에 포함 된 자식 컨트롤이 표시 됩니다.  
  
 <xref:System.Web.UI.WebControls.Style> 에서 참조 하는 개체는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle%2A> 속성에 대 한 링크의 스타일 특성 포함는 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 현재 선택 된 컨트롤입니다. 속성에서 참조 하는 개체 읽기 전용 이지만, 사용할 수 있습니다 계속 하면 선택 된 기본 스타일 특성을 설정 하려면 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 제어 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle%2A> 속성 선언적 방법과 프로그래밍 방식으로 합니다. 예제를 실행 하는 데 필요한 전체 코드의 예 섹션을 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스 개요입니다.  
  
 첫 번째 부분 코드 예제에서는 두 개의 선언 `<asp:catalogzone>` 요소 및 첫 번째 선언에 대 한 값은 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle%2A> 속성입니다.  
  
 [!code-aspx-csharp[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-aspx-vb[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 코드 예제에서는 두 번째 부분에서 선택 된에 대 한 텍스트 색 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤을 다른 값으로 설정 합니다.  
  
 [!code-csharp[WebParts_CatalogZoneBase_Overview#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#7)]
 [!code-vb[WebParts_CatalogZoneBase_Overview#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#7)]  
  
 브라우저에서 페이지를 로드할 때 선택할 수 있습니다 **카탈로그** 카탈로그 디스플레이 모드를 전환 하려면 드롭 다운 목록에서. 카탈로그 표시 되 면는 나열 된에 대 한 링크를 클릭 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤과 선택한 컨트롤의 스타일 특성을 확인 합니다. 클릭할 수는 **부분 링크 스타일 변경** 단추를 선택한 컨트롤의 텍스트 색을 변경 합니다. 컨트롤을 선택 하면 스타일 특성이 어떻게 변경 되는지 확인 하는 선택 되지 않은 컨트롤에 대 한 링크를 클릭할 수도 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="SelectTargetZoneText">
      <MemberSignature Language="C#" Value="public virtual string SelectTargetZoneText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectTargetZoneText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectTargetZoneText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SelectTargetZoneText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SelectTargetZoneText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 선택된 컨트롤을 추가할 영역을 선택할 수 있는 카탈로그 UI(사용자 인터페이스)에 컨트롤과 함께 표시되는 텍스트를 가져오거나 설정합니다.</summary>
        <value>영역 선택 컨트롤과 함께 표시될 텍스트가 들어 있는 문자열입니다. 기본 문화권별 문자열은 .NET Framework에서 제공합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 카탈로그 UI 처음 나타날 때 사용자 중 하나를 선택는 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 와 같은 컨트롤 <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>, 포함 된 <xref:System.Web.UI.WebControls.WebParts.WebPart> 또는 웹 페이지에 추가할 수 있는 기타 서버 컨트롤입니다. 사용자가 하나 이상의 컨트롤을 선택한 다음 사용 하 여 수는 <xref:System.Web.UI.WebControls.DropDownList> 카탈로그의 바닥글 영역에 컨트롤을 마우스는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 선택한 서버 컨트롤을 배치 하는 페이지에 컨트롤입니다. 텍스트 값은 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectTargetZoneText%2A> 속성은 함께 표시 됩니다는 <xref:System.Web.UI.WebControls.DropDownList> 간단한 명령으로 제어 합니다.  
  
 이 속성의 값으로 설정 하면 디자이너 도구를 사용 하 여 리소스 파일에 자동으로 저장 될 수 있습니다. 자세한 내용은 참조 <xref:System.ComponentModel.LocalizableAttribute> 및 [전역화 및 지역화](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectTargetZoneText%2A> 속성 선언적 방법과 프로그래밍 방식으로 합니다. 예제를 실행 하는 데 필요한 전체 코드의 예 섹션을 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스 개요입니다.  
  
 첫 번째 부분 코드 예제에서는 두 개의 선언 `<asp:catalogzone>` 요소 및 첫 번째 선언에 대 한 값은 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectTargetZoneText%2A> 속성입니다.  
  
 [!code-aspx-csharp[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#2)]
 [!code-aspx-vb[WebParts_CatalogZoneBase_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#2)]  
  
 코드 예제에서는 값의 두 번째 부분에는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectTargetZoneText%2A> 속성을 프로그래밍 방식으로 변경 합니다.  
  
 [!code-csharp[WebParts_CatalogZoneBase_Overview#5](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/CS/catalogzonebasecs.aspx#5)]
 [!code-vb[WebParts_CatalogZoneBase_Overview#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZoneBase_Overview/VB/catalogzonebasevb.aspx#5)]  
  
 브라우저에서 페이지를 로드할 때 선택할 수 있습니다 **카탈로그** 카탈로그 디스플레이 모드를 전환 하려면 드롭 다운 목록에서. 카탈로그 표시 되 면 확인와 함께 표시 되는 텍스트는 <xref:System.Web.UI.WebControls.DropDownList> 카탈로그의 바닥글에는 컨트롤입니다. 클릭할 수는 **영역 텍스트 속성 설정** 속성의 텍스트 값을 변경 하는 단추입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCatalogIcons">
      <MemberSignature Language="C#" Value="public virtual bool ShowCatalogIcons { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowCatalogIcons" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZoneBase.ShowCatalogIcons" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ShowCatalogIcons As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ShowCatalogIcons { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>카탈로그의 서버 컨트롤이 관련 아이콘을 카탈로그에 표시하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          카탈로그의 서버 컨트롤과 연결된 아이콘이 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 및 기타 서버 컨트롤 래핑되고을 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> 런타임 시 컨트롤는 <xref:System.Web.UI.WebControls.WebParts.WebPart.CatalogIconImageUrl%2A> 속성입니다. 이 속성의 값은 컨트롤의 카탈로그에서 컨트롤을 나타내는 아이콘으로 사용 되는 이미지의 URL입니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.ShowCatalogIcons%2A> 속성 연결 된 아이콘이 있는지 여부를 나타냅니다. <xref:System.Web.UI.WebControls.WebParts.WebPart> 카탈로그에 다른 서버 컨트롤로 표시 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.CatalogIconImageUrl" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.LoadPostData">
      <MemberSignature Language="C#" Value="bool IPostBackDataHandler.LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Function LoadPostData (postDataKey As String, postCollection As NameValueCollection) As Boolean Implements IPostBackDataHandler.LoadPostData" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Web.UI.IPostBackDataHandler.LoadPostData(System::String ^ postDataKey, System::Collections::Specialized::NameValueCollection ^ postCollection) = System::Web::UI::IPostBackDataHandler::LoadPostData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">컨트롤의 키 식별자입니다.</param>
        <param name="postCollection">서버에 게시된 이름/값 쌍의 컬렉션입니다.</param>
        <summary>
          <see cref="M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" /> 클래스의 <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" /> 메서드를 호출하여 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 메서드를 구현합니다.</summary>
        <returns>
          데이터가 변경되었음을 나타내는 이벤트가 발생하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 인스턴스가 <xref:System.Web.UI.IPostBackDataHandler> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다. 메서드를 호출는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.LoadPostData%2A> 에서 메서드는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 카탈로그에 서버 컨트롤에 해당 하는 카탈로그에서 확인란의 상태를 처리 하는 클래스입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="void IPostBackDataHandler.RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostDataChangedEvent () Implements IPostBackDataHandler.RaisePostDataChangedEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() = System::Web::UI::IPostBackDataHandler::RaisePostDataChangedEvent;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 멤버에 대한 설명은 <see cref="M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent" />를 참조하세요.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 인스턴스가 <xref:System.Web.UI.IPostBackDataHandler> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>영역 컨트롤의 뷰 상태에 대한 변경 내용을 추적합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.TrackViewState%2A> 메서드 기본 메서드를 먼저 호출는 <xref:System.Web.UI.WebControls.WebParts.ToolZone> 와 관련 된 뷰 상태를 추적 하는 클래스는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 영역입니다. 메서드 추가 및 닫기 동사에 대 한 뷰 상태를 추적 하기 시작을 다음으로,으로 <xref:System.Web.UI.WebControls.Style> 와 연결 된 개체는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.PartLinkStyle%2A> 및 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.SelectedPartLinkStyle%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>