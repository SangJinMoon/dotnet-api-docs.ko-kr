<Type Name="CatalogZone" FullName="System.Web.UI.WebControls.WebParts.CatalogZone">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="37e85f2a562ac9e4c866a8070ae59f8dd1633f5d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36585576" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CatalogZone : System.Web.UI.WebControls.WebParts.CatalogZoneBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CatalogZone extends System.Web.UI.WebControls.WebParts.CatalogZoneBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.CatalogZone" />
  <TypeSignature Language="VB.NET" Value="Public Class CatalogZone&#xA;Inherits CatalogZoneBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class CatalogZone : System::Web::UI::WebControls::WebParts::CatalogZoneBase" />
  <TypeSignature Language="F#" Value="type CatalogZone = class&#xA;    inherit CatalogZoneBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.CatalogZoneBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.CatalogZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>웹 페이지의 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 컨트롤을 호스트하는 데 웹 파트 컨트롤 집합의 주 컨트롤로 사용됩니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 웹 파트 컨트롤 집합 내에서 웹 파트 컨트롤을 포함 하는 웹 페이지의 영역 됩니다. 웹 파트 영역 형식인 영역 컨트롤에 의해 만들어집니다의 <xref:System.Web.UI.WebControls.CompositeControl> 다른 컨트롤을 포함 하도록 디자인 되었습니다. 영역 기본 기능은 포함 된 컨트롤을 배치 하 고 해당 컨트롤에 대 한 공통 사용자 인터페이스 (UI)를 제공 합니다. 영역 및 웹 파트 응용 프로그램에서 사용 방법에 대 한 일반 정보에 대 한 기본 참조 <xref:System.Web.UI.WebControls.WebParts.WebZone> 클래스 및 [웹 파트 컨트롤 집합 개요](http://msdn.microsoft.com/library/ff0149e4-695a-401a-8cda-53df6d7d2668)합니다.  
  
 웹 파트 컨트롤의 주요 기능은 웹 페이지를 수정 (또는 개인 설정)를 최종 사용자가 해당 기본 설정에 따라 허용은 및 이후 브라우저 세션에 대 한 개인된 설정을 저장할입니다. 웹 파트 페이지를 수정 하는의 한 가지 측면에 추가 하는 기능이 포함 됩니다 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 또는 다른 서버 컨트롤을 웹 파트 페이지. <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 컨트롤은 목록 또는 사용자가 페이지에 추가할 수 있는 컨트롤의 카탈로그를 제공 합니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 컨트롤은 웹 파트 컨트롤 집합에 있는 기본 컨트롤 중 하나입니다. 파생 되는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스와 대부분의 동작의 해당 클래스에서 상속 됩니다. <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 클래스 기본적으로 추가 하는 기본 클래스를 구현 하는 영역 서식 파일의는 <xref:System.Web.UI.ITemplate> 인터페이스입니다. 영역 템플릿 통해 선언적으로 추가 하는 개발자 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 의 영역 페이지 지 속성 형식에는 컨트롤입니다.  
  
> [!IMPORTANT]
>  A <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 영역만 포함 될 수 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤을 역으로 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤에서 파생 되는 영역에만 상주할 수는 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> 클래스 같은 <xref:System.Web.UI.WebControls.WebParts.CatalogZone>합니다.  
  
 A <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 제어 전환한 경우에 사용자 웹 페이지 카탈로그 디스플레이 모드에 표시 됩니다 (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>). 카탈로그에는 몇 가지 유형의 포함 될 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤입니다. 각 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤은 사용자가 페이지에 추가할 수 있는 서버 컨트롤을 포함 하는 컨테이너의 형식입니다. <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤이 포함 된 서버 컨트롤에서 생성 되는 위치에 따라 다릅니다. 다음 표에서 요약의 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 웹 파트 컨트롤 집합으로, 각 컨트롤에 대 한를 제어 하는 어떤 유형의 서버 포함 된 제공을 제어 합니다.  
  
|컨트롤|설명|  
|-------------|-----------------|  
|<xref:System.Web.UI.WebControls.WebParts.PageCatalogPart>|페이지에서 닫혀 있는 컨트롤에 대 한 참조를 유지 관리 합니다. 이러한 제어는 사용자가 (페이지에 다시 추가할된) 다시 열을 수 있습니다.|  
|<xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart>|웹 페이지의 태그는 웹 파트 카탈로그에 선언 된 컨트롤에 대 한 참조를 포함 합니다. 이러한 컨트롤은 사용자가 웹 페이지에 추가할 수 있습니다.|  
|<xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>|사용자 정의 파일을 업로드 하는 UI를 제공 (에서 XML 파일을 한 합니다. 웹 파트 확장 및 포함 된 지정된 된 형식으로 상태 정보)는 카탈로그에 컨트롤에 대 한 웹 페이지에는 컨트롤을 추가할 수 있도록 합니다.|  
  
 때문에 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 영역 템플릿만 기본 클래스의 동작을 추가 하는 클래스, 몇 명의 멤버에 있습니다. <xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A> 의 새 인스턴스를 초기화할 수 있습니다, 생성자는 기본 생성자는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 클래스입니다. <xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A> 속성 대 한 참조를 설정 하거나 가져옵니다는 <xref:System.Web.UI.ITemplate> 영역에 대 한 컨트롤을 포함 하는 개체입니다. <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> 방법은 중요 합니다. 모든 컬렉션을 만드는 기본 메서드를 재정의 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 영역 서식 파일에 포함 된 컨트롤입니다.  
  
> [!NOTE]
>  에 있는 단추는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> UI 올바르게 작동 하려면 클라이언트 쪽 스크립팅 필요 합니다. 사용자를 통해 작업을 수행할 수는 브라우저에서 스크립팅을 사용 하지 않으면는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> UI입니다.  
  
## <a name="accessibility"></a>액세스 가능성  
 이 컨트롤에 대해 기본적으로 렌더링 되는 태그는 웹 콘텐츠 내게 필요한 옵션 지침 1.0 WCAG 우선 순위 1 지침 등의 내게 필요한 옵션 표준 준수 하지 않을 수 있습니다. 이 컨트롤에 대 한 내게 필요한 옵션 지원에 대 한 세부 정보를 참조 하십시오. [ASP.NET 컨트롤 및 내게 필요한 옵션](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 선언적 방법과 프로그래밍 방식으로 사용 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 제어 합니다. 이 코드 예제는 4 개의 구성 됩니다.  
  
-   웹 페이지에 디스플레이 모드를 변경할 수 있게 해 주는 사용자 정의 컨트롤입니다.  
  
-   사용자 지정에 대 한 원본 코드로 파일 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 제어 및 사용자 지정 <xref:System.Web.UI.WebControls.WebParts.WebPart> 카탈로그에서 가져온 되며 웹 페이지에 추가할 컨트롤입니다.  
  
-   사용자 정의 컨트롤 및 사용자 지정을 선언 하는 웹 페이지 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 제어 합니다.  
  
-   예를 실행 하는 방법에 대해 설명 합니다.  
  
 이 코드 예제는 첫 번째 부분에는 사용자가 웹 페이지에 대 한 디스플레이 모드를 변경할 수 있는 사용자 컨트롤입니다. 이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 대 한 세부 정보를 참조 [연습: 웹 파트 페이지에](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.  
  
 [!code-aspx-csharp[WebParts_CatalogZone_Overview#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/displaymodemenucs.ascx#7)]
 [!code-aspx-vb[WebParts_CatalogZone_Overview#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/displaymodemenuvb.ascx#7)]  
  
 사용자 지정 코드를 포함 하는 코드 예제에서는 두 번째 부분 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 및 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤입니다. 에 대 한 코드는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 컨트롤에서 상속 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 클래스 및 생성자에서 몇 가지 기본 속성 값을 설정 하 여 해당 속성을 사용자 지정 합니다. 소스 코드를 사용자 지정을 만드는 방법을 보여 줍니다 <xref:System.Web.UI.WebControls.WebParts.WebPart> 라는 클래스 `TextDisplayWebPart`합니다. 이 연결 된 컨트롤의 합니다. 이 코드 예제에서는의 일환으로 가져오려는 웹 파트 설명 파일 사용 하 여 설명 파일을 가져온 후의 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 컨트롤 웹 페이지에서 있습니다 수를 추가할 수는 `TextDisplayWebPart` 컨트롤을 완벽 하 게 구성 된 지정 된 대로 설명 파일 페이지입니다.  
  
 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 여기서 것 동적으로 컴파일되는 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제에서는 동적 컴파일, 이런 방식이으로 예제를 실행 하려면 소스 코드 파일 이름과 웹 응용 프로그램의 루트 디렉터리의 App_Code 하위 폴더에 추가 합니다. 두 컴파일 방법을 보여 주는 연습을 참조 [연습: 개발 및 사용자 지정 웹 서버 컨트롤을 사용 하 여](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_CatalogZone_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogSamples.cs#1)]
 [!code-vb[WebParts_CatalogZone_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogSamples.vb#1)]  
  
 코드 예제에서는 세 번째 부분에는 컨트롤이 포함 된 웹 페이지입니다. 포함 된 한 `Register` 사용자 정의 컨트롤 및 사용자 정의 컨트롤을 사용 하 여 소스 파일에 대 한 다른에 대 한 지시문입니다. 두 번째 지시문에 이름을 지정 하지 않습니다는 어셈블리 참고 예제에서는 어셈블리를 사용 하지 않는 App_Code 하위 폴더에 배치 하는 소스 코드와 동적 컴파일 사용 합니다. 웹 페이지를 선언는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 컨트롤 및 해당 자식 내 `<zonetemplate>` 선언 요소는 <xref:System.Web.UI.WebControls.BulletedList> 제어 합니다. 표준 ASP.NET 컨트롤 상태인 동안은 완전 한 웹 파트 기능 런타임 시 때문에 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 서버 컨트롤에 배치 래핑하고 제어는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 와 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> 개체, 다른 서버 컨트롤은 웹에 참여할 수 있도록 부분 응용 프로그램입니다. 사용자 지정에는이 영역에도 선언 <xref:System.Web.UI.WebControls.WebParts.WebPart> 라는 컨트롤 `TextDisplayWebPart`합니다. 이 컨트롤의 특성을 갖고 있음을 알게 `ExportMode="All"` 선언 되어 있습니다. 이렇게 하면 내보낼 수는 있습니다. 다른 사용자가 다른 웹 페이지에 미리 구성 된 컨트롤을 추가 하 여 가져올 수 있는 컨트롤의 속성 값이 포함 된 웹 파트 설명 파일  
  
> [!NOTE]
>  설명 파일을 내보낼 웹 파트 응용 프로그램의 사용자가 사용할 수 있도록 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤에도 추가 하 여 웹 응용 프로그램에서 내보내기 기능을 활성화 해야는 `enableExport="true"` 특성을 `<webParts>` 요소 (의 의자식인`<system.web>`요소)의 Web.config 파일에 있습니다. 내보내기는 기본적으로 비활성화 되어, 응용 프로그램에 대 한 내보내기 아직 설정한 경우 Web.config 파일을 편집한 지금 합니다.  
  
 웹 페이지 사용자 지정 선언 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 제어 및 그 안에 `<zonetemplate>` 요소를 포함 하는 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 제어 합니다. 사용자가 사용할이 컨트롤에서 런타임에 가져오려면는 합니다. 사용자 지정 웹 파트 설명 파일 <xref:System.Web.UI.WebControls.WebParts.WebPart> 제어 합니다.  
  
 [!code-aspx-csharp[WebParts_CatalogZone_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogzonecs.aspx#2)]
 [!code-aspx-vb[WebParts_CatalogZone_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogzonevb.aspx#2)]  
  
 이제이 코드 예제를 실행 합니다. 브라우저에서 웹 페이지를 로드 합니다. 첫 번째 단계는 내보내기는 합니다. 에 대 한 웹 파트 설명 파일은 `TextDisplayWebPart` 제어 합니다. 동사 메뉴 사용자 지정 컨트롤 (제목 표시줄의 아래쪽 화살표로 표시 됨)를 클릭 하 고 클릭 **내보내기**합니다. 컨트롤에 대 한 설명 파일을 저장 하는 지침을 따릅니다. 열기는 합니다. 웹 파트 설명 편집기, 파일 및 제목 속성 텍스트의 값을 편집 합니다. 찾을 `<property>` 요소는 특성이 있는 `name="Title"`, 열기 및 닫기 사이 포함 되는 제목 텍스트를 편집 하 고 `<property>` 태그입니다. 이제 웹 페이지를 닫고 편집기에서 페이지 소스를 편집 합니다. 삭제 된 `<aspSample:TextDisplayWebPart>` 컨트롤 선언 요소를 저장 하 고 파일을 닫습니다.  
  
 브라우저에서 다시 웹 페이지를 로드 합니다. `TextDisplayWebPart` 컨트롤 나타나지 않고 제거 했기 때문에 있습니다. 사용 하 여는 **디스플레이 모드** 드롭 다운 목록 컨트롤 및 선택 **카탈로그** 페이지 카탈로그 모드로 전환할 수 있습니다. 사용자 지정 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 나타납니다와 <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> 제어 합니다. 클릭는 **찾아보기** 를 찾습니다는 합니다. 웹 파트 설명 파일에 대 한 내보낸는 `TextDisplayWebPart` 제어 합니다. 클릭할 수 있는 **업로드**, 가져온된 컨트롤 옆의 확인란을 선택 하 고 클릭 **추가** 페이지에 추가 합니다. 클릭 **닫기 카탈로그** 페이지 표준 찾아보기 모드로 돌아갑니다. 가져온된 컨트롤이 이제 페이지에 표시 하 고 컨트롤의 제목 표시줄에 나타나는 제목을 제목 텍스트에 추가 해야 합니다.는 합니다. 웹 파트 설명 파일입니다.  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Web.AspNetHostingPermission">호스팅된 환경에서 작업하는 데 필요한 권한입니다. 요청 값: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />, 권한 값: <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" /></permission>
    <block subset="none" type="overrides">
      <para>사용자 지정을 만들 수 있습니다 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 렌더링 및 카탈로그 UI의 동작을 통해 더 많은 제어 하려는 경우 클래스입니다. 컨트롤 사용자가 추가 하는 기능에 제공 하려면 필요 하지 않은 경우 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 컨트롤에서 직접 상속할 수을 선언적으로 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 클래스입니다. 상속 하는 간단한 방법은 선언적으로 추가할 컨트롤을 사용할 수 있도록 않으려면는 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 필요한 영역 템플릿을 제공 하기 때문에 클래스입니다.  상속 하는 경우는 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 클래스를 재정의할 수 있습니다는 <see cref="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" /> 메서드 및 사용자 지정 메서드를 사용 하 여 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 컨트롤을 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" />큰 프로그래밍 방식으로 제어 하려는 추가 사용자 지정 하는 경우, <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 을 영역 컨트롤 .</para>
    </block>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CatalogZone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CatalogZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때문에 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 컨트롤은 영역 템플릿을 구현 하 고 선언적으로 사용 일반적으로 사용 하 여 클래스의 새 인스턴스를 만들어야 할 경우는 거의 없습니다는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A> 생성자입니다. 그러나에서 상속 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 클래스 사용자 지정 영역을 만들려면 생성자를 사용 하는 일부 속성 값을 초기화 하 고 해당 모양을 사용자 지정을 선택할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 프로그래밍 방식으로 사용 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.%23ctor%2A> 사용자 지정에서 생성자 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 제어 합니다. 컨트롤에 대 한 몇 가지 기본 속성 값을 초기화 하는 생성자 사용 됩니다. 다음 코드에서는 사용자 지정 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 위쪽에 선언 된 생성자를 사용 하 여 클래스입니다. 전체 코드와를 설정 하 고 예제를 실행 하는 데 필요한 지침의 예제 단원을 참조는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 클래스 개요입니다.  
  
 [!code-csharp[WebParts_CatalogZone_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/CS/catalogSamples.cs#1)]
 [!code-vb[WebParts_CatalogZone_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_CatalogZone_Overview/VB/catalogSamples.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCatalogParts">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.WebParts.CatalogPartCollection CreateCatalogParts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.WebParts.CatalogPartCollection CreateCatalogParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateCatalogParts () As CatalogPartCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::WebParts::CatalogPartCollection ^ CreateCatalogParts();" />
      <MemberSignature Language="F#" Value="override this.CreateCatalogParts : unit -&gt; System.Web.UI.WebControls.WebParts.CatalogPartCollection" Usage="catalogZone.CreateCatalogParts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.CatalogPartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>영역에 선언된 각 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 형식의 인스턴스를 만듭니다.</summary>
        <returns>영역의 모든 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection" /> 컨트롤에 대한 참조가 있는 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> 사용자 페이지 카탈로그 디스플레이 모드를 전환 되는 경우이 방법을 통해 모든 때문 메서드는 중요 한 메서드는 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 웹 파트 카탈로그 구성 하는 컨트롤입니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> 에서 메서드는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 클래스와 웹 파트 컨트롤 집합에서 상속 되는 모든 서버 컨트롤을 만들 수는 제공 된 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 클래스입니다. 따라서 사용자 정의 만들 경우 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 제어 하 고 페이지 내에 선언는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 컨트롤, 사용자 페이지 카탈로그 모드로 전환이 메서드가 컨트롤을 만들 수는 있습니다.  
  
 그러나 여러 가지 이유로 제어 원할 수도 있습니다를 통해는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> 메서드. 특정 것이 좋습니다 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 컨트롤입니다. 예를 들어, 사용자 지정 집합을 만들 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 일관 된 모양을 갖도록 하 고 단일 제품 또는 조직에 속해 있는 컨트롤입니다. 페이지 개발자가 카탈로그에 사용자 지정 컨트롤을 사용 하도록 제한 될 수를 원하는 경우에서 상속 해야는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone> 클래스, 재정의 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts%2A> 메서드를 하 고 메서드를 사용자 지정 컨트롤과 같은 형식의 컨트롤만 허용 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">현재 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 컨트롤에 ID가 없는 경우</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZoneBase.CreateCatalogParts" />
      </Docs>
    </Member>
    <Member MemberName="ZoneTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ZoneTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ZoneTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ZoneTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ ZoneTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ZoneTemplate : System.Web.UI.ITemplate with get, set" Usage="System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.WebParts.CatalogZone))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateInstance(System.Web.UI.TemplateInstance.Single)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 컨트롤 내의 자식 컨트롤을 페이지에 일관된 형식으로 포함할 템플릿을 가져오거나 설정합니다.</summary>
        <value>영역에서 자식 컨트롤의 컨테이너 역할을 하는 <see cref="T:System.Web.UI.ITemplate" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A> 유형의 서식 파일을 참조 하는 속성 <xref:System.Web.UI.ITemplate> 포함 하는 데 사용 되는 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 영역에서 컨트롤입니다. 영역 템플릿을 사용 하면 페이지 개발자를 선언에서 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 모든 컨트롤을 프로그래밍 방식으로 만들 필요 하지 않고 일관 된 형식에서 사용할 컨트롤입니다.  
  
 에 대 한 set 접근자는 <xref:System.Web.UI.WebControls.WebParts.CatalogZone.ZoneTemplate%2A> 속성 호출의 <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase.InvalidateCatalogParts%2A> 의 컬렉션을 강제로 <xref:System.Web.UI.WebControls.WebParts.CatalogPart> 페이지를 새로 고칠 수 영역 서식 파일에 선언 된 컨트롤에 합니다. 이렇게 하면 컬렉션 영역 내에서 참조 되는 컨트롤의 사용자 페이지에는 템플릿 내에서 선언 된 실제로 컨트롤 변경 될 때마다 현재 상태로 유지 됩니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>사용자 지정을 만들려고 할 경우 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZone" /> 만들려고 계획 하는 영역을 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart" /> 페이지 개발자가 선언 수를 허용 하면 수행 하지 영역 필요 템플릿 지원에서 직접 상속 하지 않고 프로그래밍 방식으로 컨트롤의 <see cref="T:System.Web.UI.WebControls.WebParts.CatalogZoneBase" /> 클래스입니다.</para>
        </block>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.CatalogZone.CreateCatalogParts" />
      </Docs>
    </Member>
  </Members>
</Type>