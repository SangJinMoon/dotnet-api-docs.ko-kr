<Type Name="WebPartZone" FullName="System.Web.UI.WebControls.WebParts.WebPartZone">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9952e166a40dfea2432d6c732d40f29c93123fa3" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30598617" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WebPartZone : System.Web.UI.WebControls.WebParts.WebPartZoneBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebPartZone extends System.Web.UI.WebControls.WebParts.WebPartZoneBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartZone" />
  <TypeSignature Language="VB.NET" Value="Public Class WebPartZone&#xA;Inherits WebPartZoneBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartZone : System::Web::UI::WebControls::WebParts::WebPartZoneBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.WebPartZoneBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.WebPartZoneDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>웹 페이지의 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤을 호스트하는 데 웹 파트 컨트롤 집합의 주 컨트롤로 사용됩니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 웹 파트 기능 웹 파트 컨트롤을 포함 하는 웹 페이지에 정의 된 영역 됩니다. 영역 기본 기능은 포함 된 컨트롤을 배치 하 고 해당 컨트롤에 대 한 공통 사용자 인터페이스 (UI)를 제공 합니다. 영역 및 웹 파트 응용 프로그램에서 사용 방법에 대 한 일반 정보에 대 한 기본에 대 한 참조 설명서를 참조 하십시오. <xref:System.Web.UI.WebControls.WebParts.WebZone> 및 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 클래스 및 항목 [웹 파트 컨트롤 집합 개요](http://msdn.microsoft.com/library/ff0149e4-695a-401a-8cda-53df6d7d2668)합니다.  
  
 특수 함수는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 컨트롤 포함 하는 것 <xref:System.Web.UI.WebControls.WebParts.WebPart> 주 UI의 웹 파트 응용 프로그램 구성 되는 제어 합니다. A <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 컨트롤 개발자가 템플릿으로 사용 하 고 내에서 다른 서버 컨트롤을 추가할 수 있도록 웹 페이지에 일관 된 형식에서 선언할 수는 `<asp:webpartzone>` 요소입니다. 모든 형식의 컨트롤이 서버에 추가 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 영역을 사용할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPart> 런타임 시 컨트롤입니다. 이 추가 된 컨트롤 인지에 관계 없이 true는 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤, 사용자 정의 컨트롤, 사용자 지정 컨트롤 또는 ASP.NET 컨트롤입니다. 자세한 내용은 대 한 항목을 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> 클래스입니다.  
  
 포함 된 것 외에도 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤은 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 컨트롤 포함 된 컨트롤에 대 한 일반적인 UI를 제공 합니다. 테두리, 제목, 머리글 및 바닥글, 스타일 특성 및 동사 (사용자가 컨트롤에서 수행할와 같은 닫습니다 하거나 최소화 하는 UI 작업) 등의 모든 컨트롤에 주변 UI 요소의 크롬을 통칭 하이 일반적인 UI 구성 됩니다.  
  
> [!NOTE]
>  Internet Explorer의 높이 렌더링할 수도 있습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 또는 영역의 방향에 따라 예기치 않은 방식으로 포함된 된 컨트롤입니다. 자세한 내용은 설명서를 참조 하십시오.는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase.LayoutOrientation%2A> 또는 <xref:System.Web.UI.WebControls.WebParts.WebPart.Height%2A> 속성입니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 클래스에서에서 대부분의 동작의 파생 <xref:System.Web.UI.WebControls.WebParts.WebZone> 및 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 클래스; 하나의 고유한 멤버를 추가 하는 것은 <xref:System.Web.UI.WebControls.WebParts.WebPartZone.ZoneTemplate%2A> 속성. 이 속성이 참조는 <xref:System.Web.UI.ITemplate> 페이지 개발자가 사용 하 여 컨트롤의 한 영역에서을 정적으로 정의를 허용 하는 템플릿 개체는 `<zonetemplate>` .aspx 페이지의 선언적 태그 요소에에서 있습니다.  
  
## <a name="accessibility"></a>액세스 가능성  
 이 컨트롤에 대해 기본적으로 렌더링 되는 태그는 웹 콘텐츠 내게 필요한 옵션 지침 1.0 WCAG 우선 순위 1 지침 등의 내게 필요한 옵션 표준 준수 하지 않을 수 있습니다. 이 컨트롤에 대 한 내게 필요한 옵션 지원에 대 한 세부 정보를 참조 하십시오. [ASP.NET 컨트롤 및 내게 필요한 옵션](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 웹 파트 페이지에 있는 컨트롤입니다. 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 여기서 것 동적으로 컴파일되는 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 두 컴파일 방법을 보여 주는 연습을 참조 [연습: 개발 및 사용자 지정 웹 서버 컨트롤을 사용 하 여](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 예제의 첫 번째 부분에서 상속 되는 사용자 지정 클래스를 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 클래스를 설정 하는 기본 영역 속성 중 두 생성자에서 합니다.  
  
 [!code-csharp[WebParts_WebPartZone_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartZone_Overview/CS/mywebpartzone.cs#3)]
 [!code-vb[WebParts_WebPartZone_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartZone_Overview/VB/mywebpartzone.vb#3)]  
  
 예제의 두 번째 부분은 사용자 지정을 포함 하는 페이지를 보여 줍니다. <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 제어 합니다. 페이지에는 특수 한 필요 하다는 알림이 `Register` 사용자 지정 영역을 포함 하는 어셈블리를 참조 하는 페이지의 맨 위 근처에 지시문입니다. 페이지는 `<asp:webpartmanager>` 모든 웹 파트 페이지에 필요한 요소입니다. `<cc1:MyWebPartZone>` 나타내는 사용자 지정 하는 요소를 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 제어 하 고, 표준 ASP.NET 포함 <xref:System.Web.UI.WebControls.Calendar> 제어 합니다. 내에 들어 있으므로 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 영역은 <xref:System.Web.UI.WebControls.Calendar> 컨트롤 래핑는 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> 제어 역할을 할 수 있도록 하는 런타임 시는 <xref:System.Web.UI.WebControls.WebParts.WebPart> 제어 합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartZone_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartZone_Overview/CS/webpartzonecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartZone_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartZone_Overview/VB/webpartzonevb.aspx#1)]  
  
 사용자 지정에 대 한 선언적 태그 검사 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 제어 합니다. 다음 코드 예제와 같이 태그에서 다양 한 영역 수준 속성을 설정할 수 있는 확인 합니다.  
  
> [!NOTE]
>  사용을 확인 해야는 `<zonetemplate>` 요소입니다. 이 요소를 설명 섹션에 설명 된 대로 내에 필요는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 를 래핑하는 정적 영역 <xref:System.Web.UI.WebControls.WebParts.WebPart> 페이지에 선언 된 컨트롤에 있습니다.  
  
 [!code-aspx-csharp[WebParts_WebPartZone_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartZone_Overview/CS/webpartzonecs.aspx#2)]
 [!code-aspx-vb[WebParts_WebPartZone_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartZone_Overview/VB/webpartzonevb.aspx#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebZone" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartZone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZone" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartZone.%23ctor%2A> 메서드는 기본 생성자를 호출 하 고 모든 값을 설정 하지 않습니다. 그러나 파생된 클래스를 만드는 표준 동작 및 모양을 사용자 지정 영역 컨트롤에 대 한 기본 영역 속성을 설정 하려면 생성자를 사용할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용자 지정 생성자를 사용 하는 방법을 보여 줍니다 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 영역에 대 한 여러 가지 기본 속성을 설정 하는 클래스입니다. 이러한 방식이를 만드는 사용자 지정 하려는 경우 유용할 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 된 특정 동작 및 모양 컨트롤을 합니다. 예를 들어 사용자 지정 클래스 및 컨트롤을 호스팅하려면.aspx 페이지를 모두 포함 한 전체 코드의 예 섹션에서 발견 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 클래스 개요 항목입니다.  
  
 [!code-csharp[WebParts_WebPartZone_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartZone_Overview/CS/mywebpartzone.cs#3)]
 [!code-vb[WebParts_WebPartZone_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartZone_Overview/VB/mywebpartzone.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInitialWebParts">
      <MemberSignature Language="C#" Value="protected internal override System.Web.UI.WebControls.WebParts.WebPartCollection GetInitialWebParts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Web.UI.WebControls.WebParts.WebPartCollection GetInitialWebParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartZone.GetInitialWebParts" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetInitialWebParts () As WebPartCollection" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Web::UI::WebControls::WebParts::WebPartCollection ^ GetInitialWebParts();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>추상 기본 메서드를 재정의하고 영역의 템플릿에 포함된 정적 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤의 초기 설정을 가져옵니다.</summary>
        <returns>영역의 템플릿에 포함된 모든 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCollection" /> 또는 기타 서버 컨트롤이 들어 있는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartZone.GetInitialWebParts%2A> 메서드는 추상 기본 열거형의 구현을 제공 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase.GetInitialWebParts%2A> 메서드. 기본 메서드 구현을 제공 하지만 방법을 받게 됩니다 속하는 컨트롤의 초기 집합 영역에 있는 개인 설정 계정 변경을 수행 하지 않고 파생 된 클래스를 사용자 지정할 수 있도록 메서드를 선언 합니다.  
  
 영역에 각 서버 컨트롤에 대 한는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> 메서드를 호출 합니다. 컨트롤에서 직접 상속 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPart> 클래스 영역의에 추가 되기만 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase.WebParts%2A> 컬렉션 (및 유사한 컬렉션에는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 컨트롤). 컨트롤에서 직접 상속 되지 않은 경우 <xref:System.Web.UI.WebControls.WebParts.WebPart>, 웹 파트 컨트롤 집합으로 컨트롤을 래핑하는 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> 개체를 컨트롤 동작을 사용 하는 <xref:System.Web.UI.WebControls.WebParts.WebPart> 런타임 시 컨트롤입니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 클래스가 구현 하는 기본 메서드 (있는 경우) 컨트롤 집합을 반환 하 여 집합에서 정적으로 선언 된 `<zonetemplate>` 웹 파트 페이지의 태그에는 태그입니다. 경우는 <xref:System.Web.UI.WebControls.PlaceHolder> 영역에서 컨트롤을 선언한는 컨트롤의 자식 컨트롤이 컨트롤 자체가 아니라 컨트롤이 추가 됩니다. 이 구현에서는 만들 수 있습니다, 예를 들어 한 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 마스터 페이지의 영역을 마우스 개별을 선언 <xref:System.Web.UI.WebControls.WebParts.WebPart> 콘텐츠 페이지에서 서버 컨트롤 또는 합니다. 선언 하는 경우 <xref:System.Web.UI.WebControls.Literal> 컨트롤에 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 영역은 무시 됩니다.  
  
> [!NOTE]
>  반환 되는 컨트롤의 초기 컬렉션은 <xref:System.Web.UI.WebControls.WebParts.WebPartZone.GetInitialWebParts%2A> 개인 설정 이루어진 후 메서드 영역에 있는 컨트롤의 실제 런타임 컬렉션에서 다를 수 있습니다. 예를 들어, 두 개의 웹 페이지가 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 컨트롤 및 첫 번째 이라는 사용자 정의 컨트롤 포함 `User1` 내에서 정적으로 선언 되어 있는 `<zonetemplate>` 태그입니다. 페이지 및 끌기 사용자 로드 되는 경우 `User1` 두 번째 영역으로 `User1` 호출 하 여 반환 되는 컬렉션의 일부분이 며는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone.GetInitialWebParts%2A> 첫 번째 영역에 대 한 메서드는 해당 영역에 선언 된 합니다. 하지만 런타임 시 때는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 개인 설정 데이터를 로드 하는 컨트롤 `User1` 실제로 사용자가 끌어 두 번째 영역에 나타납니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartZone.ZoneTemplate" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartZone.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> 컨트롤을 사용하여 영역이 성공적으로 등록되었음을 나타내기 위해 기본 메서드를 재정의합니니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoneTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ZoneTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ZoneTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartZone.ZoneTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ZoneTemplate As ITemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ITemplate ^ ZoneTemplate { System::Web::UI::ITemplate ^ get(); void set(System::Web::UI::ITemplate ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateInstance(System.Web.UI.TemplateInstance.Single)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>웹 페이지의 태그에 선언된 컨트롤이 들어 있는 <see cref="T:System.Web.UI.ITemplate" /> 인스턴스에 대한 참조를 가져오거나 설정합니다.</summary>
        <value>영역의 <see cref="T:System.Web.UI.ITemplate" /> 컨트롤이 포함된 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartZone.ZoneTemplate%2A> 속성은 참조는 <xref:System.Web.UI.ITemplate> 내 인스턴스는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 제어 합니다. 서식 파일 내에서 선언할 수 있는 정적 서버 컨트롤을 포함 한 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 컨트롤을 포함 하 여 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤, 사용자 정의 컨트롤, 사용자 지정 컨트롤 및 ASP.NET 컨트롤입니다.  
  
 정적을 추가 하는 경우 <xref:System.Web.UI.WebControls.WebParts.WebPart> 또는 기타 서버 컨트롤을 한 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 웹 페이지의 선언적 태그 쌍 내에서 컨트롤에 대 한 태그를 배치 해야 `<zonetemplate>` 태그입니다. 내에서 컨트롤을 선언 하지 않는 `<zonetemplate>` 태그, 예외가 throw 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone.ZoneTemplate%2A> 웹 파트 페이지의 선언적 태그에는 속성입니다. 예를 들어 사용자 지정 클래스와 컨트롤을 호스트 하는.aspx 페이지를 포함 하 여 전체 코드의 예 섹션에서 발견 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 클래스 개요 항목입니다.  
  
 에 대 한 태그의는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 제어, 즉 한 `<zonetemplate>` Calendar 컨트롤에 대 한 참조를 포함 하는 요소입니다. 추가 하려는 추가 하는 경우 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 또는 다른 서버 컨트롤 영역을 추가할 수도 있습니다 내에서 `<zonetemplate>` 태그입니다.  
  
 [!code-aspx-csharp[WebParts_WebPartZone_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartZone_Overview/CS/webpartzonecs.aspx#2)]
 [!code-aspx-vb[WebParts_WebPartZone_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartZone_Overview/VB/webpartzonevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">영역의 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤은 이미 등록되어 있습니다.</exception>
        <altmember cref="T:System.Web.UI.ITemplate" />
      </Docs>
    </Member>
  </Members>
</Type>