<Type Name="XamlParseException" FullName="System.Windows.Markup.XamlParseException">
  <TypeSignature Language="C#" Value="public class XamlParseException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit XamlParseException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlParseException" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlParseException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlParseException : SystemException" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="8718a-101">WPF XAML 파서의 파서 관련 예외에 대한 예외 클래스를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-101">Represents the exception class for parser-specific exceptions from a WPF XAML parser.</span></span> <span data-ttu-id="8718a-102">이 예외는 .NET Framework 3.0 및 .NET Framework 3.5에서의 XAML API 또는 WPF XAML 파서 작업에 사용되거나, <see cref="T:System.Windows.Markup.XamlReader" /> API를 호출하여 WPF XAML 파서를 사용하는 특수한 경우에 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-102">This exception is used in XAML API or WPF XAML parser operations from .NET Framework 3.0 and .NET Framework 3.5, or for specific use of the WPF XAML parser by calling <see cref="T:System.Windows.Markup.XamlReader" /> API.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8718a-103"><xref:System.Windows.Markup.XamlParseException> WPF 응용 프로그램에 대 한 XAML 구문 분석 및 로드를 수행 하는 WPF 구현 XAML 파서가 대해서만 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-103"><xref:System.Windows.Markup.XamlParseException> is used only for the WPF-implemented XAML parser that performs the XAML parsing and loading for WPF applications.</span></span> <span data-ttu-id="8718a-104">특히,는 관련이 때 응용 프로그램이 대상 [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] 및 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-104">Specifically, the exception is only relevant when an application targets [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] and [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)].</span></span> <span data-ttu-id="8718a-105">런타임에 실행 중인 WPF 응용 프로그램 내에서 XAML을 로드 하는 XAML WPF 구현 파서를 연결 하는 Api 호출에서 사용자 코드에서 예외가 발생할 수도 있습니다 (예를 들어에 대 한 호출이 <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="8718a-105">The exception can also originate from user code in run-time calls to APIs that hook up the WPF-implemented XAML parser to load XAML from within a running WPF application (for example, calls to <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType>).</span></span>  
  
 <span data-ttu-id="8718a-106">에 대 한 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <xref:System.Xaml.XamlParseException> 일반적으로 XAML 처리 예외를 보고 하는 예외는 다른 네임 스페이스에 정의 된 (<xref:System.Xaml>) 및 다른 어셈블리 (System.Xaml).</span><span class="sxs-lookup"><span data-stu-id="8718a-106">For [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the <xref:System.Xaml.XamlParseException> exception that typically reports XAML processing exceptions is defined in a different namespace (<xref:System.Xaml>) and a different assembly (System.Xaml).</span></span>  
  
 <span data-ttu-id="8718a-107">WPF XAML 파서에 해당을 작성 하거나 사용 하지 않는 한 [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] 및 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 을 대상으로 지정 하면 일반적으로 throw 하지 않는 것 <xref:System.Windows.Markup.XamlParseException> 사용자 고유의 코드에서.</span><span class="sxs-lookup"><span data-stu-id="8718a-107">Unless you are writing an equivalent to the WPF XAML parser or working with [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] and [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] targeting, you generally will not throw <xref:System.Windows.Markup.XamlParseException> from your own code.</span></span> <span data-ttu-id="8718a-108">그러나 예외에 대 한 처리는 경우가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-108">However, handling for the exception is sometimes necessary.</span></span> <span data-ttu-id="8718a-109">응용 프로그램 시나리오의 경우 XAML 구문 분석 오류를 표시 하지 않는 저장할 수 있습니다는 <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.Dispatcher.UnhandledException> 응용 프로그램 수준에서 이벤트 처리기는 런타임에 처리 하는 한 가지 방법은 <xref:System.Windows.Markup.XamlParseException>합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-109">For application scenarios, where you may want to suppress XAML parse errors, a <xref:System.Windows.Threading.Dispatcher> <xref:System.Windows.Threading.Dispatcher.UnhandledException> event handler at the application level is one way to handle a run-time <xref:System.Windows.Markup.XamlParseException>.</span></span> <span data-ttu-id="8718a-110">에 할당 하는 XAML 응용 프로그램의 신뢰 수준을 로드 / XAML을 로드 하의 목적을 위해 응용 프로그램을 디자인 하는 방법에 따라 예외 또는 표시 하지 않을 수 있도록 사용자 코드에 할지 여부.</span><span class="sxs-lookup"><span data-stu-id="8718a-110">Whether to suppress exceptions or let them surface to user code depends on how you design your application for purposes of loading XAML, and the trust level that you assign to the XAML your application loads.</span></span> <span data-ttu-id="8718a-111">자세한 내용은 참조 [XAML 보안 고려 사항](~/docs/framework/xaml-services/xaml-security-considerations.md) 또는 "XAML 보안" 섹션의 [XAML 개요 (WPF)](~/docs/framework/wpf/advanced/xaml-overview-wpf.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-111">For more information, see [XAML Security Considerations](~/docs/framework/xaml-services/xaml-security-considerations.md) or "XAML Security" section of [XAML Overview (WPF)](~/docs/framework/wpf/advanced/xaml-overview-wpf.md).</span></span>  
  
 <span data-ttu-id="8718a-112">응용 프로그램의 페이지에 대 한 경우는 <xref:System.Windows.Markup.XamlParseException> 은 throw 것이 일반적으로의 컨텍스트에서 `InitializeComponent` 호출이 사용자 페이지 클래스의 WPF XAML 파서가 당 페이지 수준에서 WPF 응용 프로그램 모델 사용에 대 한 진입점입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-112">For pages of an application, when the <xref:System.Windows.Markup.XamlParseException> is thrown, it is usually in the context of the `InitializeComponent` call made by your page class, which is the entry point for the WPF application model's usage of the WPF XAML parser at the per-page level.</span></span> <span data-ttu-id="8718a-113">따라서 수 있는 또 다른 처리 전략을 배치 하는 것 `try/catch` 블록 `InitializeComponent`합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-113">Therefore another possible handling strategy is to place `try/catch` blocks in `InitializeComponent`.</span></span> <span data-ttu-id="8718a-114">그러나이 방법은 시각적 디자인 화면 템플릿와 잘 통합 되지 않습니다 및를 후크 하는 기타 생성 된 소스 `InitializeComponent`합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-114">However, this technique does not integrate well with templates, visual design surfaces and other generated sources that hook up `InitializeComponent`.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8718a-115"><see cref="T:System.Windows.Markup.XamlParseException" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-115">Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlParseException" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlParseException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlParseException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlParseException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8718a-116"><see cref="T:System.Windows.Markup.XamlParseException" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-116">Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlParseException" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlParseException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlParseException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlParseException(System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="8718a-117">예외 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-117">The exception message.</span></span></param>
        <summary><span data-ttu-id="8718a-118">지정된 예외 메시지 문자열을 사용하여 <see cref="T:System.Windows.Markup.XamlParseException" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-118">Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlParseException" /> class, using the specified exception message string.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlParseException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlParseException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="8718a-119">개체를 serialize하거나 deserialize하는 데 필요한 모든 정보를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-119">Contains all the information that is required to serialize or deserialize the object.</span></span></param>
        <param name="context"><span data-ttu-id="8718a-120">serialize된 스트림의 소스와 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-120">The source and destination of a serialized stream.</span></span></param>
        <summary><span data-ttu-id="8718a-121"><see cref="T:System.Windows.Markup.XamlParseException" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-121">Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlParseException" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8718a-122">응용 프로그램 도메인 이나 컴퓨터 경계를 넘어이 유형의 예외를 마샬링할 때이 생성자는 serialization에 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-122">This constructor is used for serialization when marshaling an exception of this type across an application domain or machine boundary.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlParseException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlParseException(System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="8718a-123">예외 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-123">The exception message.</span></span></param>
        <param name="innerException"><span data-ttu-id="8718a-124">발생한 초기 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-124">The initial exception that occurred.</span></span></param>
        <summary><span data-ttu-id="8718a-125">지정된 예외 메시지 문자열과 내부 예외를 사용하여 <see cref="T:System.Windows.Markup.XamlParseException" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-125">Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlParseException" /> class, using the specified exception message string and inner exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8718a-126">이전 예외의 직접적인 결과로 throw 되는 예외에는 이전 예외에 대 한 참조를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-126">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception.</span></span> <span data-ttu-id="8718a-127"><xref:System.Exception.InnerException%2A> 속성은 생성자에 전달되는 값과 동일한 값을 반환하며, `null` 속성이 생성자에 내부 예외 값을 제공하지 않는 경우에는 <xref:System.Exception.InnerException%2A>을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-127">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlParseException (string message, int lineNumber, int linePosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, int32 lineNumber, int32 linePosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, lineNumber As Integer, linePosition As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlParseException(System::String ^ message, int lineNumber, int linePosition);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="lineNumber" Type="System.Int32" />
        <Parameter Name="linePosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="8718a-128">예외 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-128">The exception message.</span></span></param>
        <param name="lineNumber"><span data-ttu-id="8718a-129">예외가 발생한 줄 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-129">The line number where the exception occurred.</span></span></param>
        <param name="linePosition"><span data-ttu-id="8718a-130">줄에서 예외가 발생한 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-130">The position in the line at which the exception occurred.</span></span></param>
        <summary><span data-ttu-id="8718a-131">지정된 예외 메시지 문자열과 지정된 줄 번호 및 줄에서의 위치를 사용하여 <see cref="T:System.Windows.Markup.XamlParseException" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-131">Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlParseException" /> class, using the specified exception message string, and the specified line number and position in the line.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlParseException (string message, int lineNumber, int linePosition, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, int32 lineNumber, int32 linePosition, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlParseException.#ctor(System.String,System.Int32,System.Int32,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, lineNumber As Integer, linePosition As Integer, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlParseException(System::String ^ message, int lineNumber, int linePosition, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="lineNumber" Type="System.Int32" />
        <Parameter Name="linePosition" Type="System.Int32" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="8718a-132">예외 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-132">The exception message.</span></span></param>
        <param name="lineNumber"><span data-ttu-id="8718a-133">예외가 발생한 줄 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-133">The line number where the exception occurred.</span></span></param>
        <param name="linePosition"><span data-ttu-id="8718a-134">줄에서 예외가 발생한 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-134">The position in the line at which the exception occurred.</span></span></param>
        <param name="innerException"><span data-ttu-id="8718a-135">발생한 초기 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-135">The initial exception that occurred.</span></span></param>
        <summary><span data-ttu-id="8718a-136">지정된 예외 메시지, 내부 예외, 줄 번호 및 줄에서의 위치를 사용하여 <see cref="T:System.Windows.Markup.XamlParseException" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-136">Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlParseException" /> class, using the specified exception message, inner exception, line number, and position in the line.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8718a-137">이전 예외의 직접적인 결과로 throw 되는 예외에는 이전 예외에 대 한 참조를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-137">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception.</span></span> <span data-ttu-id="8718a-138"><xref:System.Exception.InnerException%2A> 속성은 생성자에 전달되는 값과 동일한 값을 반환하며, `null` 속성이 생성자에 내부 예외 값을 제공하지 않는 경우에는 <xref:System.Exception.InnerException%2A>을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-138">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseUri">
      <MemberSignature Language="C#" Value="public Uri BaseUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri BaseUri" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XamlParseException.BaseUri" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ BaseUri { Uri ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8718a-139">예외가 throw된 경우의 URI 정보를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-139">Gets base URI information when the exception is thrown.</span></span></summary>
        <value><span data-ttu-id="8718a-140">파서 컨텍스트 기본 URI입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-140">The parser context base URI.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8718a-141">자료 URI는 예외가 발생할 때 파서 컨텍스트로 인해 잠재적으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-141">Base URI is potentially available because of parser context when the exception occurred.</span></span> <span data-ttu-id="8718a-142">기본 알면 URI 되는 경우 리소스 확인 오류는 근본 원인을 디버깅을 위해 유용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-142">Knowing the base URI can be useful for debugging cases where a resource resolution error is the underlying cause.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="8718a-143">serialization 데이터를 추가할 serialization 정보 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-143">The serialization information object to add the serialization data to.</span></span></param>
        <param name="context"><span data-ttu-id="8718a-144">이 serialization의 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-144">The destination for this serialization.</span></span></param>
        <summary><span data-ttu-id="8718a-145">지정된 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 채워 지정된 개체를 serialize하는 데 필요한 데이터를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-145">Gets the data that is required to serialize the specified object by populating the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8718a-146"><xref:System.Windows.Markup.XamlParseException.GetObjectData%2A> 설정 하는 <xref:System.Runtime.Serialization.SerializationInfo> serialization 대상인 모든 예외 개체 데이터가 들어 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-146"><xref:System.Windows.Markup.XamlParseException.GetObjectData%2A> sets a <xref:System.Runtime.Serialization.SerializationInfo> object with all the exception object data targeted for serialization.</span></span> <span data-ttu-id="8718a-147">deserialization을 수행하는 동안 스트림을 통해 전송된 <xref:System.Runtime.Serialization.SerializationInfo>에서 예외가 다시 구성됩니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-147">During deserialization, the exception is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="8718a-148">serialization 서비스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-148">for providing serialization services.</span></span> <span data-ttu-id="8718a-149">연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /> 보안 동작: <see cref="M:System.Security.PermissionSet.Demand" />합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-149">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /> Security action: <see cref="M:System.Security.PermissionSet.Demand" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="KeyContext">
      <MemberSignature Language="C#" Value="public object KeyContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object KeyContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XamlParseException.KeyContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ KeyContext { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8718a-150">사전에서 예외가 발생한 항목의 키 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-150">Gets or sets the key value of the item in a dictionary where the exception occurred.</span></span></summary>
        <value><span data-ttu-id="8718a-151">관련된 XAML <see langword="x:Key" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-151">The relevant XAML <see langword="x:Key" /> value.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.ResourceDictionary" />
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public int LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumber" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XamlParseException.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumber { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8718a-152">예외가 발생한 줄 번호를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-152">Gets the line number where the exception occurred.</span></span></summary>
        <value><span data-ttu-id="8718a-153">줄 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-153">The line number.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinePosition">
      <MemberSignature Language="C#" Value="public int LinePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XamlParseException.LinePosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LinePosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePosition { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8718a-154">줄에서 예외가 발생한 위치를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-154">Gets the position in the line where the exception occurred.</span></span></summary>
        <value><span data-ttu-id="8718a-155">줄 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-155">The line position.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameContext">
      <MemberSignature Language="C#" Value="public string NameContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NameContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XamlParseException.NameContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NameContext As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NameContext { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8718a-156">예외가 발생한 개체의 XAML 이름을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-156">Gets or sets the XAML name of the object where the exception occurred.</span></span></summary>
        <value><span data-ttu-id="8718a-157">개체의 XAML 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-157">The XAML name of the object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UidContext">
      <MemberSignature Language="C#" Value="public string UidContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UidContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XamlParseException.UidContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UidContext As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UidContext { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8718a-158">예외가 발생한 개체의 [x:Uid 지시문](~/docs/framework/xaml-services/x-uid-directive.md)을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-158">Gets or sets the [x:Uid Directive](~/docs/framework/xaml-services/x-uid-directive.md) of the object where the exception occurred.</span></span></summary>
        <value><span data-ttu-id="8718a-159"><see langword="Uid" /> 문자열의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="8718a-159">The value of the <see langword="Uid" /> string.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>