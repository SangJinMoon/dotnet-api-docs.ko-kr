<Type Name="MarkupExtension" FullName="System.Windows.Markup.MarkupExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f36d9706c5d26b97dcc9537ee7078eceaf138fc8" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MarkupExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MarkupExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class MarkupExtension abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="11d7b-101">.NET Framework XAML 서비스 및 다른 XAML 판독기와 XAML 작성기에서 지원될 수 있는 XAML 태그 확장명 구현에 대한 기본 클래스를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="11d7b-101">Provides a base class for XAML markup extension implementations that can be supported by .NET Framework XAML Services and other XAML readers and XAML writers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11d7b-102">태그 확장의 문자열 특성 값 이나 태그 요소를 XAML의 입력에 따라 호출자에 게 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-102">Markup extensions return objects to callers, based on the input of string attribute values or markup elements in XAML.</span></span> <span data-ttu-id="11d7b-103">태그 확장 형식 변환기만 수행할 수 있는 보다 더 복잡 한 방식으로 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-103">Markup extensions return objects in a more sophisticated way than type converters alone can accomplish.</span></span> <span data-ttu-id="11d7b-104">형식이 나 멤버에 연결 된 형식 변환기 구현 하기 때문에 XAML 개체 작성기는 형식 변환기를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-104">A XAML object writer invokes a type converter because a type or member has a type converter implementation associated with it.</span></span> <span data-ttu-id="11d7b-105">CLR 프레임의 참조에서 즉, 형식 또는 멤버 <xref:System.ComponentModel.TypeConverterAttribute> 특성을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-105">From the CLR frame of reference, this means that a type or member is <xref:System.ComponentModel.TypeConverterAttribute> attributed.</span></span> <span data-ttu-id="11d7b-106">XAML 형식 시스템 관점에서 즉, XAML 형식 또는 XAML 멤버에 대 한 값의 `TypeConverter` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-106">From the XAML type system perspective, this means that a XAML type or a XAML member has a value for its `TypeConverter` property.</span></span> <span data-ttu-id="11d7b-107">형식 변환기의 호출 형식 또는 속성 정의에 연결 되어 있고는 항상 이러한 경우에 대 한 처리 하는 XAML에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-107">The invocation of a type converter is tied to the type or property definition, and is always invoked by XAML processing for these cases.</span></span> <span data-ttu-id="11d7b-108">반면, 태그 확장 사용자 코드와 사용자가 생성 한 태그의 제어 이며 요구 하는 응용 프로그램 시나리오 될 때마다 적용 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-108">In contrast, a markup extension is more under the control of user code and user-produced markup, and can be applied whenever an application scenario demands it.</span></span> <span data-ttu-id="11d7b-109">태그 확장 호출할 수 있으며 해당 값에 할당할 수 있는 경우에 태그 확장의 반환 형식을 다른 형식 멤버 값을 설정에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-109">A markup extension can be invoked and can be used for setting different type-member values, so long as the markup extension's return type is assignable to that value.</span></span>  
  
 <span data-ttu-id="11d7b-110">사용자 지정 태그 확장을 만드는 방법에 대 한 정보를 참조 하십시오. <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-110">For information on creating a custom markup extension, see <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>.</span></span> <span data-ttu-id="11d7b-111">태그 확장에에서 대 한 자세한 내용은 참조 하십시오. [XAML 개요에 대 한 태그 확장](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-111">For more information on markup extensions in general, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).</span></span> <span data-ttu-id="11d7b-112">이 항목에서 기타 관련 정보를 찾을 수에 WPF 사용 하거나 XAML에 대 한 태그 확장을 만들고 작성 하는 경우 [태그 확장명 및 WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-112">If you are building on WPF and using or creating markup extensions for XAML, other relevant information can be found in the topic [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).</span></span>  
  
 <span data-ttu-id="11d7b-113"><xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> 각 태그 확장 구현 방식의 צ ְ ײ는 <xref:System.IServiceProvider> 런타임에 컨텍스트를 제공할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-113">The <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> method of each markup extension implementation can use an <xref:System.IServiceProvider> at run time that can provide context.</span></span> <span data-ttu-id="11d7b-114">이 <xref:System.IServiceProvider> 등의 정보를 전달 하는 특정 서비스에 대 한 다음으로 쿼리 <xref:System.Windows.Markup.IProvideValueTarget> 또는 <xref:System.Windows.Markup.IXamlTypeResolver>합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-114">This  <xref:System.IServiceProvider> is then queried for specific services that pass information, such as <xref:System.Windows.Markup.IProvideValueTarget> or <xref:System.Windows.Markup.IXamlTypeResolver>.</span></span> <span data-ttu-id="11d7b-115">태그 확장에 대 한 서비스 컨텍스트에 대 한 자세한 내용은 참조 하십시오. [형식 변환기 또는 태그 확장 서비스 컨텍스트에 사용할 수 있는](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-115">For more information on service contexts for a markup extension, see [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).</span></span>  
  
 <span data-ttu-id="11d7b-116">파생된 클래스와 특성을 지정 해야 <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> 가장 구체적인 반환 형식의 태그 확장에서 사용할 수 있는 소비자에 게 알리기 위해 <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-116">Derived classes should be attributed with <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> to inform consumers of the most specific return type available from the markup extension's <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> implementation.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MarkupExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MarkupExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="11d7b-117">
            <see cref="T:System.Windows.Markup.MarkupExtension" />에서 파생된 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11d7b-117">Initializes a new instance of a class derived from <see cref="T:System.Windows.Markup.MarkupExtension" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11d7b-118"><xref:System.Windows.Markup.MarkupExtension> 추상 클래스 초기화에 필요한 개인 값을 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-118">The <xref:System.Windows.Markup.MarkupExtension> abstract class does not hold any private values that require initialization.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="11d7b-119">기능 태그 확장 public 기본 생성자를 정의 해야 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="11d7b-119">A functional markup extension should define its own public default constructor.</span>
            </span>
            <span data-ttu-id="11d7b-120">또한 태그 확장 사용 중인 확장의 의도 한 기능 및 태그 사용에 대 한 적합 한 생성자를 구현 해야 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="11d7b-120">Additionally, the markup extension should implement constructors that are appropriate for the extension's intended capabilities and markup usage.</span>
            </span>
            <span data-ttu-id="11d7b-121">자세한 내용은 참조 [XAML 개요에 대 한 태그 확장](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="11d7b-121">For more information, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ProvideValue">
      <MemberSignature Language="C#" Value="public abstract object ProvideValue (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ProvideValue(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ProvideValue (serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ProvideValue(IServiceProvider ^ serviceProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">
          <span data-ttu-id="11d7b-122">태그 확장명 서비스를 제공할 수 있는 서비스 공급자 도우미입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11d7b-122">A service provider helper that can provide services for the markup extension.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="11d7b-123">파생 클래스에서 구현되면 이 태그 확장의 대상 속성 값으로 제공된 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11d7b-123">When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="11d7b-124">확장이 적용되는 속성에 설정할 개체 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11d7b-124">The object value to set on the property where the extension is applied.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11d7b-125">XAML 프로세서는 태그 확장 하는 유형 노드와 멤버 값을 처리할 때 호출는 <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> 해당 태그 확장의 메서드는 개체 그래프 또는 serialization 스트림의 결과 기록 합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-125">When a XAML processor processes a type node and member value that is a markup extension, it invokes the <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> method of that markup extension and writes the result into the object graph or serialization stream.</span></span> <span data-ttu-id="11d7b-126">XAML 개체 작성기 서비스 컨텍스트를 통해 각 이러한 구현에 전달 된 `serviceProvider` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-126">The XAML object writer passes service context to each such implementation through the `serviceProvider` parameter.</span></span>  
  
 <span data-ttu-id="11d7b-127">구현 하는 방법에 대 한 자세한 내용은 "구현자 참고 사항" 섹션을 참조 하십시오 <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> 사용자 지정 태그 확장에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-127">See "Notes to Implementers" section for more information on how to implement <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> in a custom markup extension.</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="11d7b-128">WPF 사용 정보</span><span class="sxs-lookup"><span data-stu-id="11d7b-128">WPF Usage Notes</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="11d7b-129">특정 상호 태그 집합 작업이 있는 WPF 클래스에 의존 하지 않아야 <xref:System.Windows.Markup.IReceiveMarkupExtension> 에 대 한는 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-129">WPF classes that have specific interactions with markup set operations should not rely on <xref:System.Windows.Markup.IReceiveMarkupExtension> for a [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] implementation.</span></span> <span data-ttu-id="11d7b-130">사용 하 여 <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>-콜백 특성을 대신 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-130">Use <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>-attributed callbacks instead.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="11d7b-131">기존 또는 사용자 지정에 사용할 수는 일반적으로 기본 서비스 공급자에서 반환 되는 공통 서비스 <see cref="T:System.Windows.Markup.MarkupExtension" /> 구현은 다음과 같은 기본 서비스를 포함 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="11d7b-131">Common services returned by the default service provider that is typically available to a custom or existing <see cref="T:System.Windows.Markup.MarkupExtension" /> implementation include the following primary services.</span>
            </span>  
  
-   <span data-ttu-id="11d7b-132"><see cref="T:System.Windows.Markup.IProvideValueTarget" /> object 참조와 속성 식별자 태그 확장 사용 되는 컨텍스트를 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-132"><see cref="T:System.Windows.Markup.IProvideValueTarget" /> reports the object reference and a property identifier from the context where the markup extension is used</span></span>  
  
-   <span data-ttu-id="11d7b-133"><see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 일반 XAML 개체를 제공할 수 있는 동작을 쓰기 유사한 서비스를 노출 한 <see cref="T:System.Type" /> XAML 형식 이름을 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-133"><see cref="T:System.Windows.Markup.IXamlTypeResolver" /> exposes a service that parallels the general XAML object writing behavior that can provide a <see cref="T:System.Type" /> based on a XAML type name.</span></span><span data-ttu-id="11d7b-134">이름에 매핑된 XAML 네임 스페이스에 대 한 접두사를 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-134">The name can optionally include a prefix for a mapped XAML namespace.</span></span>  
  
-   <span data-ttu-id="11d7b-135"><see cref="T:System.Xaml.IXamlSchemaContextProvider" /> 직접 활성 XAML 스키마 컨텍스트를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-135"><see cref="T:System.Xaml.IXamlSchemaContextProvider" /> exposes the active XAML schema context directly.</span></span><span data-ttu-id="11d7b-136">보고 된 <see cref="T:System.Xaml.XamlSchemaContext" />, 정보를 가져올 수 XAML 스키마 컨텍스트 형식 지원, 어셈블리에 기본 접두사에 대 한 어셈블리를 매핑하는 방법을 나열 등 각 <see cref="T:System.Xaml.XamlType" /> 를 어셈블리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-136">From the reported <see cref="T:System.Xaml.XamlSchemaContext" />, you can obtain XAML schema context information such as how assemblies are mapped for type support, preferred prefix in assemblies, lists of each <see cref="T:System.Xaml.XamlType" /> in an assembly, and so on.</span></span>  
  
-   <span data-ttu-id="11d7b-137">더 특수 한 태그 확장 시나리오에 대 한 다른 서비스는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-137">Other services available for more specialized markup extension scenarios include:</span></span>  
  
    -   <see cref="T:System.Windows.Markup.IUriContext" />  
  
    -   <see cref="T:System.Xaml.IAmbientProvider" />  
  
    -   <see cref="T:System.Xaml.IDestinationTypeProvider" />  
  
    -   <see cref="T:System.Xaml.IRootObjectProvider" />  
  
    -   <see cref="T:System.Xaml.IXamlNameResolver" />  
  
    -   <see cref="T:System.Xaml.IXamlNamespaceResolver" /><span data-ttu-id="11d7b-138">를 구현 <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> 무시할 수는 <paramref name="serviceProvider" /> 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-138">Potentially, implementations of <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> can ignore the <paramref name="serviceProvider" /> parameter.</span></span><span data-ttu-id="11d7b-139">여기서 전혀 컨텍스트가 없는 값을 반환 하는 데 필요한 몇 가지 기본 시나리오에 대 한 실행 가능한입니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-139">This is viable for some basic scenarios, where no context at all is required for returning a value.</span></span><span data-ttu-id="11d7b-140">일반적인 사용에서.NET Framework XAML 서비스 및 구현 된 XAML 개체 작성기에서 XAML 하는 동안 호출 되는 모든 값 변환기 방법에는 서비스 공급자를 제공 합니다 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-140">In typical usage, the .NET Framework XAML Services and the implemented XAML object writers will provide a service provider to all value converter methods that are invoked during XAML processing.</span></span><span data-ttu-id="11d7b-141">그러나 견고성을 위해 제공 해야 코드 경로가 null 값에 대 한 서비스 공급자 자체와 요청된 된 서비스에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-141">However, for robustness, you should provide code paths for null values both for the service provider itself and for any requested service.</span></span><span data-ttu-id="11d7b-142">Null 값 발생할 수 있습니다는 상황에서 태그 확장이 적용 되 면 XAML 프로세서 인프라에서 제공 하는 일반적인 서비스 지원이 제공 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-142">Null values might occur if your markup extension is applied in a circumstance where the typical service support provided by a XAML processor infrastructure is not available.</span></span><span data-ttu-id="11d7b-143">사용 가능한 서비스에서 XAML 서비스 공급자 컨텍스트를 사용 하는 방법에 대 한 자세한 내용은 참조 하십시오. [형식 변환기 및 XAML 태그 확장명](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-143">For more information on available services from the XAML service provider context and how to use them, see [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md).</span></span><span data-ttu-id="11d7b-144">특정 서비스가 유용한 생성 하기 위해 사용할 수 있도록 해야 하는 구현 <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> 결과 해당 서비스를 사용할 수 없는 경우 예외를 throw 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-144">Implementations that require a certain service to be available in order to produce a useful <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> result are expected to throw exceptions if that service is not available.</span></span><span data-ttu-id="11d7b-145">권장된 예외를 throw 하는 <see cref="T:System.InvalidOperationException" />합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-145">The recommended exception to throw is <see cref="T:System.InvalidOperationException" />.</span></span><span data-ttu-id="11d7b-146">구현은 null 값을 제공 하는 데 필요한 사용자 지정 태그 확장 인수 중 하나가 해당 데이터 형식에 대 한 유효 하지 않거나 태그 확장에 처리의 수 값이 포함 되지 않은 경우 예외를 throw 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-146">The implementation may also throw exceptions if one of the arguments that the custom markup extension needs in order to provide a value is null, is invalid for its data type, or does not contain a value that the markup extension is capable of processing.</span></span><span data-ttu-id="11d7b-147">권장된 예외를 throw 하는 <see cref="T:System.InvalidOperationException" />합니다.</span><span class="sxs-lookup"><span data-stu-id="11d7b-147">The recommended exception to throw is <see cref="T:System.InvalidOperationException" />.</span></span></para>
        </block>
        <altmember cref="T:System.Windows.Markup.IProvideValueTarget" />
        <altmember cref="T:System.Windows.Markup.IXamlTypeResolver" />
      </Docs>
    </Member>
  </Members>
</Type>