<Type Name="INameScope" FullName="System.Windows.Markup.INameScope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1ae350a552fc26c4cf919e3c7ddd4041a5f79898" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36502834" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface INameScope" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameScope" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.INameScope" />
  <TypeSignature Language="VB.NET" Value="Public Interface INameScope" />
  <TypeSignature Language="C++ CLI" Value="public interface class INameScope" />
  <TypeSignature Language="F#" Value="type INameScope = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>특정 XAML 이름 범위 내에서 요소의 이름에 액세스하는 방법 및 해당 XAML 이름 범위 내에서 이름의 고유성을 적용하는 방법에 대한 계약을 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 인터페이스는 템플릿을 통해 다시 사용할 또는 지연 비유 하도록 설계 된 자식 요소를 가진 클래스에 의해 구현 됩니다. 서식 파일, 팩터리 및 유사한 구문을 XAML 루트 및 주 개체 그래프에서 분리 되는 고유한 XAML 이름 범위에 있어야 합니다. 원칙을 여기는 것이 이름 충돌 자식 요소에서 생성 된 개체는 응용 프로그램의 개체 그래프에 도입 되 고 DOM 작업 및 이름 식별자를 사용 하는 XAML 참조 방법은 이름 사용할 수 있도록은 각 XAML 이름 범위에 대 한 고유성 합니다.  
  
 이 인터페이스는.NET Framework의 이전 버전에서는 WPF 관련 WindowsBase 어셈블리에 존재합니다. [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> System.Xaml 어셈블리에 있습니다. 자세한 내용은 참조 [WPF에서 System.Xaml로 마이그레이션된 형식](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)합니다.  
  
## <a name="wpf-usage-notes"></a>WPF 사용 정보  
 이 인터페이스는 WPF 클래스에 의해 구현 됩니다 <xref:System.Windows.NameScope>합니다. 대부분의 XAML 이름 범위 작업 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 사용 하 여 작업 <xref:System.Windows.NameScope> 인스턴스 되지만 정보 가끔 통신 하는 내부적으로 사용 하 여 <xref:System.Windows.Markup.INameScope> 참조 합니다.  
  
 팩터리를 사용 하거나 지연 비유 XAML 표현을와 결합 하는 WPF 클래스의 예는 <xref:System.Windows.Style> 및 <xref:System.Windows.FrameworkTemplate>합니다. 이러한 구현은 명시적 버전에서 사용할 수 있는 인터페이스 메서드의 일반적으로 사용 된 <xref:System.Windows.NameScope> 클래스입니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.NameScope" />
    <altmember cref="T:System.Windows.Markup.INameScopeDictionary" />
  </Docs>
  <Members>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member FindName : string -&gt; obj" Usage="iNameScope.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">요청되는 개체의 이름 식별자입니다.</param>
        <summary>지정된 식별 이름이 있는 개체를 반환합니다.</summary>
        <returns>찾을 수 있는 경우 개체입니다. 해당 이름의 개체가 없으면 <see langword="null" />을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XAML 태그에 유효한 이름 문자열에 설명 된 요구 사항과 일치 해야 [XamlName 문법](~/docs/framework/xaml-services/xamlname-grammar.md)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="abstract member RegisterName : string * obj -&gt; unit" Usage="iNameScope.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">등록할 이름입니다.</param>
        <param name="scopedElement">제공된 <c>이름</c>이 참조하는 특정 요소입니다.</param>
        <summary>제공된 이름을 현재 XAML 이름 범위에 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XAML 이름 범위에서 중복 이름이 허용 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>중복 이름이 등록 되도록 허용 하지 않습니다. 하는 경우 입력 <paramref name="name" /> 내부 컬렉션에 대 한 표현의 XAML 이름 범위에 있는 기존 요소에 이미 할당 되었습니다 (경우에 동일 <paramref name="scopedElement" />), 예외를 throw 합니다.  제공된 된 이름이 [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md)를 준수 하지 않는 경우 예외를 throw 고려해.</para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member UnregisterName : string -&gt; unit" Usage="iNameScope.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">등록 취소할 이름입니다.</param>
        <summary>현재 XAML 이름 범위에서 제공된 이름의 등록을 취소합니다.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>입력된 이름이 존재 하지 않는 경우 예외를 throw 합니다.  나중에 동일한 이름을 다시 등록할 수 있도록 이름과 컬렉션 표현의 XAML 이름 범위에서 참조 하는 이전에 등록 된 요소를 제거 해야 합니다.</para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
  </Members>
</Type>