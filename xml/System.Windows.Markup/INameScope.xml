<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="INameScope.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5387741b6254120f3bedc817966a2f93b51df1d15.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">387741b6254120f3bedc817966a2f93b51df1d15</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.INameScope">
          <source>Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.</source>
          <target state="translated">특정 XAML 이름 범위 내에서 요소의 이름에 액세스하는 방법 및 해당 XAML 이름 범위 내에서 이름의 고유성을 적용하는 방법에 대한 계약을 정의합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.INameScope">
          <source>This interface is implemented by classes that have child elements that are intended to be reused through the template or defer metaphor.</source>
          <target state="translated">이 인터페이스는 템플릿을 통해 다시 사용할 또는 지연 비유 하도록 설계 된 자식 요소를 가진 클래스에 의해 구현 됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.INameScope">
          <source>Templates, factories and similar constructs must have unique XAML namescopes that are separate from a main object graph and root XAML.</source>
          <target state="translated">서식 파일, 팩터리 및 유사한 구문을 XAML 루트 및 주 개체 그래프에서 분리 되는 고유한 XAML 이름 범위에 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.INameScope">
          <source>The principle here is that there should be no name collisions when objects created from those child elements are introduced to an application's object graph, and so that DOM operations and XAML reference techniques that rely on the name identifier can rely on name uniqueness in each XAML namescope.</source>
          <target state="translated">원칙을 여기는 것이 이름 충돌 자식 요소에서 생성 된 개체는 응용 프로그램의 개체 그래프에 도입 되 고 DOM 작업 및 이름 식별자를 사용 하는 XAML 참조 방법은 이름 사용할 수 있도록은 각 XAML 이름 범위에 대 한 고유성 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.INameScope">
          <source>In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase.</source>
          <target state="translated">이 인터페이스는.NET Framework의 이전 버전에서는 WPF 관련 WindowsBase 어셈블리에 존재합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.INameScope">
          <source>In <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> is in the System.Xaml assembly.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> System.Xaml 어셈블리에 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.INameScope">
          <source>For more information, see <bpt id="p1">[</bpt>Types Migrated from WPF to System.Xaml<ept id="p1">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>WPF에서 System.Xaml로 마이그레이션된 형식<ept id="p1">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.INameScope">
          <source>WPF Usage Notes</source>
          <target state="translated">WPF 사용 정보</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.INameScope">
          <source>This interface is implemented by the WPF class <ph id="ph1">&lt;xref:System.Windows.NameScope&gt;</ph>.</source>
          <target state="translated">이 인터페이스는 WPF 클래스에 의해 구현 됩니다 <ph id="ph1">&lt;xref:System.Windows.NameScope&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.INameScope">
          <source>Most XAML namescope operations in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> operate by using <ph id="ph2">&lt;xref:System.Windows.NameScope&gt;</ph> instances, but information is occasionally communicated internally by using <ph id="ph3">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> references.</source>
          <target state="translated">대부분의 XAML 이름 범위 작업 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 사용 하 여 작업 <ph id="ph2">&lt;xref:System.Windows.NameScope&gt;</ph> 인스턴스 되지만 정보 가끔 통신 하는 내부적으로 사용 하 여 <ph id="ph3">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> 참조 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.INameScope">
          <source>Examples of WPF classes that use a factory or defer metaphor combined with XAML representation are <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkTemplate&gt;</ph>.</source>
          <target state="translated">팩터리를 사용 하거나 지연 비유 XAML 표현을와 결합 하는 WPF 클래스의 예는 <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.FrameworkTemplate&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.INameScope">
          <source>These implementations usually rely on the explicit versions of the interface methods available from the <ph id="ph1">&lt;xref:System.Windows.NameScope&gt;</ph> class.</source>
          <target state="translated">이러한 구현은 명시적 버전에서 사용할 수 있는 인터페이스 메서드의 일반적으로 사용 된 <ph id="ph1">&lt;xref:System.Windows.NameScope&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.INameScope.FindName(System.String)">
          <source>The name identifier for the object being requested.</source>
          <target state="translated">요청되는 개체의 이름 식별자입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.INameScope.FindName(System.String)">
          <source>Returns an object that has the provided identifying name.</source>
          <target state="translated">지정된 식별 이름이 있는 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.INameScope.FindName(System.String)">
          <source>The object, if found.</source>
          <target state="translated">찾을 수 있는 경우 개체입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.INameScope.FindName(System.String)">
          <source>Returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no object of that name was found.</source>
          <target state="translated">해당 이름의 개체가 없으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.INameScope.FindName(System.String)">
          <source>Valid name strings in XAML markup must match the requirements documented in <bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept>.</source>
          <target state="translated">XAML 태그에 유효한 이름 문자열에 설명 된 요구 사항과 일치 해야 <bpt id="p1">[</bpt>XamlName 문법<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
          <source>The name to register.</source>
          <target state="translated">등록할 이름입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
          <source>The specific element that the provided <bpt id="p1">&lt;c&gt;</bpt>name<ept id="p1">&lt;/c&gt;</ept> refers to.</source>
          <target state="translated">제공된 <bpt id="p1">&lt;c&gt;</bpt>이름<ept id="p1">&lt;/c&gt;</ept>이 참조하는 특정 요소입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
          <source>Registers the provided name into the current XAML namescope.</source>
          <target state="translated">제공된 이름을 현재 XAML 이름 범위에 등록합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
          <source>Duplicate names in a XAML namescope are not permitted.</source>
          <target state="translated">XAML 이름 범위에서 중복 이름이 허용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
          <source>Do not permit duplicate names to be registered.</source>
          <target state="translated">중복 이름이 등록 되도록 허용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
          <source>If the input <ph id="ph1">&lt;paramref name="name" /&gt;</ph> is already assigned to an existing element in the internal collection representation of the XAML namescope (even if it is the same as <ph id="ph2">&lt;paramref name="scopedElement" /&gt;</ph>), throw an exception.</source>
          <target state="translated">하는 경우 입력 <ph id="ph1">&lt;paramref name="name" /&gt;</ph> 내부 컬렉션에 대 한 표현의 XAML 이름 범위에 있는 기존 요소에 이미 할당 되었습니다 (경우에 동일 <ph id="ph2">&lt;paramref name="scopedElement" /&gt;</ph>), 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
          <source>Also consider throwing an exception if the provided name does not conform to <bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept>.</source>
          <target state="translated">제공된 된 이름이를 준수 하지 않는 경우 예외를 throw 고려해 <bpt id="p1">[</bpt>XamlName 문법<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.INameScope.UnregisterName(System.String)">
          <source>The name to unregister.</source>
          <target state="translated">등록 취소할 이름입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.INameScope.UnregisterName(System.String)">
          <source>Unregisters the provided name from the current XAML namescope.</source>
          <target state="translated">현재 XAML 이름 범위에서 제공된 이름의 등록을 취소합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.INameScope.UnregisterName(System.String)">
          <source>If the input name does not exist, throw an exception.</source>
          <target state="translated">입력된 이름이 존재 하지 않는 경우 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.INameScope.UnregisterName(System.String)">
          <source>You should remove the name and the previously registered element it refers to from the collection representation of the XAML namescope, so that the same name could potentially be registered again in the future.</source>
          <target state="translated">나중에 동일한 이름을 다시 등록할 수 있도록 이름과 컬렉션 표현의 XAML 이름 범위에서 참조 하는 이전에 등록 된 요소를 제거 해야 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>