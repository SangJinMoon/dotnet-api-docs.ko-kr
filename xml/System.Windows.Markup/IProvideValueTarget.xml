<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IProvideValueTarget.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5fe449848bcdce05ca59b27ae4a3b23e50137f9b6.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe449848bcdce05ca59b27ae4a3b23e50137f9b6</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Represents a service that reports situational object-property relationships for markup extension evaluation.</source>
          <target state="translated">태그 확장명 평가를 위한 상황별 개체 속성 관계를 보고하는 서비스를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> represents a service that reports information regarding the object-property structure surrounding where a value converter is invoked.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> 값 변환기가 호출 하는 주변 개체 속성 구조에 대 한 정보를 보고 하는 서비스를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Type converters and markup extensions can query for <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> as a service on the service context that is provided by a XAML object writer, when the XAML object writer invokes value conversion behavior.</source>
          <target state="translated">형식 변환기 및 태그 확장에 대해 쿼리할 수 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> XAML 개체 작성기 값 변환 동작을 호출 하는 경우 XAML 개체 작성기에서 제공 하는 서비스 컨텍스트에 서비스로 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>For more information, see <bpt id="p1">[</bpt>Type Converters and Markup Extensions for XAML<ept id="p1">](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)</ept> and <bpt id="p2">[</bpt>Service Contexts Available to Type Converters and Markup Extensions<ept id="p2">](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>형식 변환기 및 XAML 태그 확장명<ept id="p1">](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)</ept> 및 <bpt id="p2">[</bpt>형식 변환기 또는 태그 확장 서비스 컨텍스트에 사용할 수 있는<ept id="p2">](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>For markup extensions specifically, a scenario where <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> is useful is to determine the validity of your markup extension's situational usage.</source>
          <target state="translated">태그 확장에 대 한 시나리오에 특히, 여기서 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> 유용 태그 확장의 상황에 따른 사용의 유효성을 확인 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>For example, your markup extension might implement a value deferral mechanism, but using that mechanism might only be appropriate if the target object is capable of using other components of your deferral mechanism at run time.</source>
          <target state="translated">예를 들어 태그 확장 값 지연 메커니즘을 구현할 수 있지만 메커니즘을 사용 하 여 수 대상 개체는 런타임에 지연 메커니즘의 다른 구성 요소를 사용할 수 있는 경우에 적합 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>You could check the type system characteristics of the object returned as <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> and make sure that object supports your deferral technique.</source>
          <target state="translated">형식 시스템 특성으로 반환 되는 개체를 검사할 수 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> 해당 개체에는 지연 방법을 지원 하는지 확인 하십시오.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>If so, your markup extension returns a value, and if not, your markup extension throws an exception that will be picked up as an inner exception by a XAML object writer.</source>
          <target state="translated">이 경우 태그 확장은 값을 반환 그렇지 않은 경우 태그 확장을 선택 됩니다 내부 예외로 XAML 개체 작성기에서 하는 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>A similar scenario is assuring that a particular property supports a capability, by checking type system characteristics of the <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph>.</source>
          <target state="translated">비슷한 시나리오는 특정 속성의 형식 시스템 특성을 확인 하 여는 기능을 지원 하는지 확인 되는 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Although the API name <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> might imply an association with <ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=nameWithType&gt;</ph>, the information reported by <ph id="ph3">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> can also be useful to a <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>.</source>
          <target state="translated">하지만 API 이름 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> 묵시적으로 수 <ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=nameWithType&gt;</ph>, 정보에서 보고 <ph id="ph3">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> 에 유용할 수 있습니다는 <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> 또는 <ph id="ph5">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> typically have more context than a markup extension because they are dedicated to a particular target type or target property, and thus the situational validity is usually predictable in the type system.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> 일반적으로 특정 대상 또는 대상 속성에 전용 때문에 태그 확장 보다 더 많은 컨텍스트를 있고 따라서 상화 유효성은 형식 시스템에서 예측 가능 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>However, other scenarios exist.</source>
          <target state="translated">그러나 다른 시나리오가 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>The following is a list of some scenarios that might be implemented by either a type converter or a markup extension:</source>
          <target state="translated">다음은 형식 변환기 또는 태그 확장으로 구현 될 수 있는 몇 가지 시나리오의 목록입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Get <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> to read instance values of other properties on that object.</source>
          <target state="translated">가져오기 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> 해당 개체에서 다른 속성의 인스턴스 값을 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Note that your handling here might need to be robust for unset values, because the processing order of XAML members on the target object can be nondeterministic.</source>
          <target state="translated">여기에 처리 될 대상 개체의 XAML 멤버의 처리 순서는 비결 정적 수 있기 때문에 설정 되지 않은 값에 대 한 강력한 해야 할 수 있는 참고 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Get <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> to read type-level metadata, or to verify that required interfaces are implemented by the type.</source>
          <target state="translated">가져오기 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> 형식 수준의 메타 데이터를 읽을 하거나 확인할 필수 인터페이스 형식에 의해 구현 됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Get <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph> to read property metadata.</source>
          <target state="translated">가져오기 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph> 속성 메타 데이터를 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>One scenario is to use <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> information to limit which objects or properties are permitted to be set by your markup extension.</source>
          <target state="translated">사용 하는 한 가지 시나리오 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> 정보 태그 확장으로 설정 하는 것이 수는 어떤 개체 또는 속성을 제한할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Before attempting to use the service, make sure that the service itself is not <ph id="ph1">`null`</ph> when returned by the relevant service provider parameter you are using for context.</source>
          <target state="translated">서비스를 사용 하려면 먼저 아닌지 확인 하는 서비스 자체 <ph id="ph1">`null`</ph> 컨텍스트에 대 한 사용 하는 관련 서비스 공급자 매개 변수에서 반환 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>When using the service, it is particularly important not to modify the object referenced by the <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> property, or other objects referenced by that object.</source>
          <target state="translated">서비스를 사용할 때 것이 특히 중요 참조 하는 개체를 수정할 수는 없습니다는 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> 속성 또는 해당 개체에서 참조 하는 다른 개체입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>For WPF specifically, these changes could cause unexpected changes that would invalidate the WPF property system.</source>
          <target state="translated">특히, WPF에 대 한 이러한 변경 내용은 WPF 속성 시스템을 무효화 하는 예기치 않은 변경 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Do not use the type of <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph> to determine which precise type a markup extension or type converter should return.</source>
          <target state="translated">형식을 사용 하지 마십시오 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph> 정확한 태그 확장 또는 형식 변환기 유형을 확인 하려면 반환 해야 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>That is not a best practice.</source>
          <target state="translated">되는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Your return type should be consistent with attributing (<ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph> for markup extensions) or patterns (class name of the type converter).</source>
          <target state="translated">사용자 반환 형식을 특성 지정와 일치 해야 합니다. (<ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph> 태그 확장에 대 한) 또는 패턴 (형식 변환기의 클래스 이름).</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase.</source>
          <target state="translated">이 인터페이스는.NET Framework의 이전 버전에서는 WPF 관련 WindowsBase 어셈블리에 존재합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>In <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> is in the System.Xaml assembly.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> System.Xaml 어셈블리에 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>For more information, see <bpt id="p1">[</bpt>Types Migrated from WPF to System.Xaml<ept id="p1">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>WPF에서 System.Xaml로 마이그레이션된 형식<ept id="p1">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>WPF Usage Notes</source>
          <target state="translated">WPF 사용 정보</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>This service supports framework features such as binding on a dependency property.</source>
          <target state="translated">이 서비스는 종속성 속성에 바인딩 등의 프레임 워크 기능을 지원합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>In WPF, the service represented by <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> can return objects and properties for situations where the value to return from a markup extension or type converter depends on context.</source>
          <target state="translated">WPF에서 표현 된 서비스가 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> 개체 및 태그 확장 또는 형식 변환기에서 반환할 값을 컨텍스트에 따라 달라 집니다 상황에 대 한 속성을 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> is leveraged heavily in the internal implementation of <ph id="ph2">&lt;xref:System.Windows.Data.BindingBase&gt;</ph>, the class that implements the binding mechanism for dependency properties in WPF.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> 내부 구현에 많이 활용 됩니다 <ph id="ph2">&lt;xref:System.Windows.Data.BindingBase&gt;</ph>, WPF의 종속성 속성에 대 한 바인딩 메커니즘을 구현 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>A default internal service provider for WPF implements <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> for usage by a custom markup extension or type converter.</source>
          <target state="translated">WPF 구현에 대 한 기본 내부 서비스 공급자 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> 사용자 지정 태그 확장 또는 형식 변환기로 사용 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>The object and property reported by <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> can only be set by the internal WPF service.</source>
          <target state="translated">보고 하는 개체 및 속성 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> 내부 WPF 서비스에서 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>Going beyond this definition of how <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> operates would require defining your own service provider for markup extension and type converter usages that implements at the very least the <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph> services, and that is an advanced scenario that is not described here.</source>
          <target state="translated">방식이 정의 하는 것 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> 작동 최소한 구현 하는 태그 확장 및 형식 변환기 사용에 대 한 사용자 고유의 서비스 공급자를 정의 해야는 <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph> 서비스 및 즉는 고급 여기에 설명 되어 있지 않은 시나리오입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>A null value for <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> does not necessarily mean that a markup extension or type converter cannot act, although that depends on your implementation.</source>
          <target state="translated">Null 값에 대 한 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> 반드시을 태그 확장명 또는 형식 변환기 작동 없습니다 구현에 따라 다르지만입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>An example case where the values from <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> are null even if the service is available is if your markup extension is nested within another markup extension, such as a <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph>.</source>
          <target state="translated">예제 값을 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> null 서비스를 사용할 경우에는 경우 태그 확장은 다른 태그 확장 내와 같은 중첩 된는 <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.IProvideValueTarget">
          <source>An implementation that relies on <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> should always check for null values if only for the purpose of throwing a specific exception, if that is your intended design.</source>
          <target state="translated">사용 하는 구현 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> 항상 null 값만 경우 throw 하는 경우 해당 특정 예외를 의도 한 디자인을 확인 해야 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
          <source>Gets the target object being reported.</source>
          <target state="translated">보고되는 대상 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
          <source>The target object being reported.</source>
          <target state="translated">보고되는 대상 개체입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
          <source>The value returned by <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> is the actual reference, not a type system identifier or other identifier.</source>
          <target state="translated">반환한 값 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> 실제 참조, 하지 형식 시스템 식별자 또는 다른 식별자입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
          <source>The value can also be <ph id="ph1">`null`</ph>; see <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>.</source>
          <target state="translated">값은 또한 수 <ph id="ph1">`null`</ph>; 참조 <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
          <source>When using the service, it is particularly important not to modify the object referenced by the <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> property, or other objects referenced by that object as properties that are not specifically the value-conversion case you are handling.</source>
          <target state="translated">서비스를 사용할 때 것이 특히 중요 참조 하는 개체를 수정할 수는 없습니다는 <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> 속성 또는 특히 값-변환 되지 않는 속성이 있습니다 대/소문자 개체에서 참조 하는 다른 개체를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
          <source>For WPF specifically, changing the target object could cause unexpected changes that would invalidate the WPF  property system.</source>
          <target state="translated">WPF에 대 한 구체적으로, 대상 개체를 변경으로 인해 WPF 속성 시스템을 무효화 하는 예기치 않은 변경 내용을 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
          <source>Gets an identifier for the target property being reported.</source>
          <target state="translated">보고될 대상 속성에 대한 식별자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
          <source>An identifier for the target property being reported.</source>
          <target state="translated">보고될 대상 속성에 대한 식별자입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
          <source>The value can also be <ph id="ph1">`null`</ph>; see <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>.</source>
          <target state="translated">값은 또한 수 <ph id="ph1">`null`</ph>; 참조 <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
          <source>WPF Usage Notes</source>
          <target state="translated">WPF 사용 정보</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
          <source>For a dependency property, the default WPF service may return a <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>, such that the markup extension or type converter can use metadata.</source>
          <target state="translated">종속성 속성에 대 한 기본 WPF 서비스를 반환할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>, 태그 확장 또는 형식 변환기 메타 데이터를 사용할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
          <source>Otherwise, the returned object can be a <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> for a CLR property.</source>
          <target state="translated">그렇지 않으면 반환 된 개체 일 수는 <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> CLR 속성에 대 한 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>