<Type Name="IProvideValueTarget" FullName="System.Windows.Markup.IProvideValueTarget">
  <TypeSignature Language="C#" Value="public interface IProvideValueTarget" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProvideValueTarget" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.IProvideValueTarget" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProvideValueTarget" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProvideValueTarget" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0f0af-101">태그 확장명 평가를 위한 상황별 개체 속성 관계를 보고하는 서비스를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-101">Represents a service that reports situational object-property relationships for markup extension evaluation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f0af-102"><xref:System.Windows.Markup.IProvideValueTarget> 값 변환기가 호출 하는 주변 개체 속성 구조에 대 한 정보를 보고 하는 서비스를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-102"><xref:System.Windows.Markup.IProvideValueTarget> represents a service that reports information regarding the object-property structure surrounding where a value converter is invoked.</span></span>  
  
 <span data-ttu-id="0f0af-103">형식 변환기 및 태그 확장에 대해 쿼리할 수 <xref:System.Windows.Markup.IProvideValueTarget> XAML 개체 작성기 값 변환 동작을 호출 하는 경우 XAML 개체 작성기에서 제공 하는 서비스 컨텍스트에 서비스로 합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-103">Type converters and markup extensions can query for <xref:System.Windows.Markup.IProvideValueTarget> as a service on the service context that is provided by a XAML object writer, when the XAML object writer invokes value conversion behavior.</span></span> <span data-ttu-id="0f0af-104">자세한 내용은 참조 [형식 변환기 및 XAML 태그 확장명](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md) 및 [형식 변환기 또는 태그 확장 서비스 컨텍스트에 사용할 수 있는](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-104">For more information, see [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md) and [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).</span></span>  
  
 <span data-ttu-id="0f0af-105">태그 확장에 대 한 시나리오에 특히, 여기서 <xref:System.Windows.Markup.IProvideValueTarget> 유용 태그 확장의 상황에 따른 사용의 유효성을 확인 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-105">For markup extensions specifically, a scenario where <xref:System.Windows.Markup.IProvideValueTarget> is useful is to determine the validity of your markup extension's situational usage.</span></span> <span data-ttu-id="0f0af-106">예를 들어 태그 확장 값 지연 메커니즘을 구현할 수 있지만 메커니즘을 사용 하 여 수 대상 개체는 런타임에 지연 메커니즘의 다른 구성 요소를 사용할 수 있는 경우에 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-106">For example, your markup extension might implement a value deferral mechanism, but using that mechanism might only be appropriate if the target object is capable of using other components of your deferral mechanism at run time.</span></span> <span data-ttu-id="0f0af-107">형식 시스템 특성으로 반환 되는 개체를 검사할 수 <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> 해당 개체에는 지연 방법을 지원 하는지 확인 하십시오.</span><span class="sxs-lookup"><span data-stu-id="0f0af-107">You could check the type system characteristics of the object returned as <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> and make sure that object supports your deferral technique.</span></span> <span data-ttu-id="0f0af-108">이 경우 태그 확장은 값을 반환 그렇지 않은 경우 태그 확장을 선택 됩니다 내부 예외로 XAML 개체 작성기에서 하는 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-108">If so, your markup extension returns a value, and if not, your markup extension throws an exception that will be picked up as an inner exception by a XAML object writer.</span></span> <span data-ttu-id="0f0af-109">비슷한 시나리오는 특정 속성의 형식 시스템 특성을 확인 하 여는 기능을 지원 하는지 확인 되는 <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-109">A similar scenario is assuring that a particular property supports a capability, by checking type system characteristics of the <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>.</span></span>  
  
 <span data-ttu-id="0f0af-110">하지만 API 이름 <xref:System.Windows.Markup.IProvideValueTarget> 묵시적으로 수 <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=nameWithType>, 정보에서 보고 <xref:System.Windows.Markup.IProvideValueTarget> 에 유용할 수 있습니다는 <xref:System.ComponentModel.TypeConverter> 또는 <xref:System.Windows.Markup.ValueSerializer>합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-110">Although the API name <xref:System.Windows.Markup.IProvideValueTarget> might imply an association with <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=nameWithType>, the information reported by <xref:System.Windows.Markup.IProvideValueTarget> can also be useful to a <xref:System.ComponentModel.TypeConverter> or <xref:System.Windows.Markup.ValueSerializer>.</span></span> <span data-ttu-id="0f0af-111">A <xref:System.ComponentModel.TypeConverter> 또는 <xref:System.Windows.Markup.ValueSerializer> 일반적으로 특정 대상 또는 대상 속성에 전용 때문에 태그 확장 보다 더 많은 컨텍스트를 있고 따라서 상화 유효성은 형식 시스템에서 예측 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-111">A <xref:System.ComponentModel.TypeConverter> or <xref:System.Windows.Markup.ValueSerializer> typically have more context than a markup extension because they are dedicated to a particular target type or target property, and thus the situational validity is usually predictable in the type system.</span></span> <span data-ttu-id="0f0af-112">그러나 다른 시나리오가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-112">However, other scenarios exist.</span></span> <span data-ttu-id="0f0af-113">다음은 형식 변환기 또는 태그 확장으로 구현 될 수 있는 몇 가지 시나리오의 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-113">The following is a list of some scenarios that might be implemented by either a type converter or a markup extension:</span></span>  
  
-   <span data-ttu-id="0f0af-114">가져오기 <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> 해당 개체에서 다른 속성의 인스턴스 값을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-114">Get <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> to read instance values of other properties on that object.</span></span> <span data-ttu-id="0f0af-115">여기에 처리 될 대상 개체의 XAML 멤버의 처리 순서는 비결 정적 수 있기 때문에 설정 되지 않은 값에 대 한 강력한 해야 할 수 있는 참고 합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-115">Note that your handling here might need to be robust for unset values, because the processing order of XAML members on the target object can be nondeterministic.</span></span>  
  
-   <span data-ttu-id="0f0af-116">가져오기 <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> 형식 수준의 메타 데이터를 읽을 하거나 확인할 필수 인터페이스 형식에 의해 구현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-116">Get <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> to read type-level metadata, or to verify that required interfaces are implemented by the type.</span></span>  
  
-   <span data-ttu-id="0f0af-117">가져오기 <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> 속성 메타 데이터를 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-117">Get <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> to read property metadata.</span></span>  
  
 <span data-ttu-id="0f0af-118">사용 하는 한 가지 시나리오 <xref:System.Windows.Markup.IProvideValueTarget> 정보 태그 확장으로 설정 하는 것이 수는 어떤 개체 또는 속성을 제한할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-118">One scenario is to use <xref:System.Windows.Markup.IProvideValueTarget> information to limit which objects or properties are permitted to be set by your markup extension.</span></span>  
  
 <span data-ttu-id="0f0af-119">서비스를 사용 하려면 먼저 아닌지 확인 하는 서비스 자체 `null` 컨텍스트에 대 한 사용 하는 관련 서비스 공급자 매개 변수에서 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-119">Before attempting to use the service, make sure that the service itself is not `null` when returned by the relevant service provider parameter you are using for context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0f0af-120">서비스를 사용할 때 것이 특히 중요 참조 하는 개체를 수정할 수는 없습니다는 <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> 속성 또는 해당 개체에서 참조 하는 다른 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-120">When using the service, it is particularly important not to modify the object referenced by the <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> property, or other objects referenced by that object.</span></span> <span data-ttu-id="0f0af-121">특히, WPF에 대 한 이러한 변경 내용은 WPF 속성 시스템을 무효화 하는 예기치 않은 변경 될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-121">For WPF specifically, these changes could cause unexpected changes that would invalidate the WPF property system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0f0af-122">형식을 사용 하지 마십시오 <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> 정확한 태그 확장 또는 형식 변환기 유형을 확인 하려면 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-122">Do not use the type of <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> to determine which precise type a markup extension or type converter should return.</span></span> <span data-ttu-id="0f0af-123">되는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-123">That is not a best practice.</span></span> <span data-ttu-id="0f0af-124">사용자 반환 형식을 특성 지정와 일치 해야 합니다. (<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> 태그 확장에 대 한) 또는 패턴 (형식 변환기의 클래스 이름).</span><span class="sxs-lookup"><span data-stu-id="0f0af-124">Your return type should be consistent with attributing (<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> for markup extensions) or patterns (class name of the type converter).</span></span>  
  
 <span data-ttu-id="0f0af-125">이 인터페이스는.NET Framework의 이전 버전에서는 WPF 관련 WindowsBase 어셈블리에 존재합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-125">In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="0f0af-126">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.IProvideValueTarget> System.Xaml 어셈블리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-126">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.IProvideValueTarget> is in the System.Xaml assembly.</span></span> <span data-ttu-id="0f0af-127">자세한 내용은 참조 [WPF에서 System.Xaml로 마이그레이션된 형식](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-127">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="0f0af-128">WPF 사용 정보</span><span class="sxs-lookup"><span data-stu-id="0f0af-128">WPF Usage Notes</span></span>  
 <span data-ttu-id="0f0af-129">이 서비스는 종속성 속성에 바인딩 등의 프레임 워크 기능을 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-129">This service supports framework features such as binding on a dependency property.</span></span>  
  
 <span data-ttu-id="0f0af-130">WPF에서 표현 된 서비스가 <xref:System.Windows.Markup.IProvideValueTarget> 개체 및 태그 확장 또는 형식 변환기에서 반환할 값을 컨텍스트에 따라 달라 집니다 상황에 대 한 속성을 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-130">In WPF, the service represented by <xref:System.Windows.Markup.IProvideValueTarget> can return objects and properties for situations where the value to return from a markup extension or type converter depends on context.</span></span>  
  
 <span data-ttu-id="0f0af-131"><xref:System.Windows.Markup.IProvideValueTarget> 내부 구현에 많이 활용 됩니다 <xref:System.Windows.Data.BindingBase>, WPF의 종속성 속성에 대 한 바인딩 메커니즘을 구현 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-131"><xref:System.Windows.Markup.IProvideValueTarget> is leveraged heavily in the internal implementation of <xref:System.Windows.Data.BindingBase>, the class that implements the binding mechanism for dependency properties in WPF.</span></span>  
  
 <span data-ttu-id="0f0af-132">WPF 구현에 대 한 기본 내부 서비스 공급자 <xref:System.Windows.Markup.IProvideValueTarget> 사용자 지정 태그 확장 또는 형식 변환기로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-132">A default internal service provider for WPF implements <xref:System.Windows.Markup.IProvideValueTarget> for usage by a custom markup extension or type converter.</span></span> <span data-ttu-id="0f0af-133">보고 하는 개체 및 속성 <xref:System.Windows.Markup.IProvideValueTarget> 내부 WPF 서비스에서 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-133">The object and property reported by <xref:System.Windows.Markup.IProvideValueTarget> can only be set by the internal WPF service.</span></span> <span data-ttu-id="0f0af-134">방식이 정의 하는 것 <xref:System.Windows.Markup.IProvideValueTarget> 작동 최소한 구현 하는 태그 확장 및 형식 변환기 사용에 대 한 사용자 고유의 서비스 공급자를 정의 해야는 <xref:System.Windows.Markup.IProvideValueTarget> 및 <xref:System.Windows.Markup.IXamlTypeResolver> 서비스 및 즉는 고급 여기에 설명 되어 있지 않은 시나리오입니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-134">Going beyond this definition of how <xref:System.Windows.Markup.IProvideValueTarget> operates would require defining your own service provider for markup extension and type converter usages that implements at the very least the <xref:System.Windows.Markup.IProvideValueTarget> and <xref:System.Windows.Markup.IXamlTypeResolver> services, and that is an advanced scenario that is not described here.</span></span>  
  
 <span data-ttu-id="0f0af-135">Null 값에 대 한 <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> 또는 <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> 반드시을 태그 확장명 또는 형식 변환기 작동 없습니다 구현에 따라 다르지만입니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-135">A null value for <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> or <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> does not necessarily mean that a markup extension or type converter cannot act, although that depends on your implementation.</span></span> <span data-ttu-id="0f0af-136">예제 값을 <xref:System.Windows.Markup.IProvideValueTarget> null 서비스를 사용할 경우에는 경우 태그 확장은 다른 태그 확장 내와 같은 중첩 된는 <xref:System.Windows.Data.Binding>합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-136">An example case where the values from <xref:System.Windows.Markup.IProvideValueTarget> are null even if the service is available is if your markup extension is nested within another markup extension, such as a <xref:System.Windows.Data.Binding>.</span></span> <span data-ttu-id="0f0af-137">사용 하는 구현 <xref:System.Windows.Markup.IProvideValueTarget> 항상 null 값만 경우 throw 하는 경우 해당 특정 예외를 의도 한 디자인을 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-137">An implementation that relies on <xref:System.Windows.Markup.IProvideValueTarget> should always check for null values if only for the purpose of throwing a specific exception, if that is your intended design.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
    <altmember cref="T:System.Windows.Markup.MarkupExtension" />
    <altmember cref="T:System.IServiceProvider" />
  </Docs>
  <Members>
    <Member MemberName="TargetObject">
      <MemberSignature Language="C#" Value="public object TargetObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TargetObject" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.IProvideValueTarget.TargetObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TargetObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0f0af-138">보고되는 대상 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-138">Gets the target object being reported.</span></span></summary>
        <value><span data-ttu-id="0f0af-139">보고되는 대상 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-139">The target object being reported.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f0af-140">반환한 값 <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> 실제 참조, 하지 형식 시스템 식별자 또는 다른 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-140">The value returned by <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> is the actual reference, not a type system identifier or other identifier.</span></span> <span data-ttu-id="0f0af-141">값은 또한 수 `null`; 참조 <xref:System.Windows.Markup.IProvideValueTarget>합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-141">The value can also be `null`; see <xref:System.Windows.Markup.IProvideValueTarget>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="0f0af-142">서비스를 사용할 때 것이 특히 중요 참조 하는 개체를 수정할 수는 없습니다는 <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> 속성 또는 특히 값-변환 되지 않는 속성이 있습니다 대/소문자 개체에서 참조 하는 다른 개체를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-142">When using the service, it is particularly important not to modify the object referenced by the <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> property, or other objects referenced by that object as properties that are not specifically the value-conversion case you are handling.</span></span> <span data-ttu-id="0f0af-143">WPF에 대 한 구체적으로, 대상 개체를 변경으로 인해 WPF 속성 시스템을 무효화 하는 예기치 않은 변경 내용을 합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-143">For WPF specifically, changing the target object could cause unexpected changes that would invalidate the WPF  property system.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public object TargetProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TargetProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.IProvideValueTarget.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetProperty As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TargetProperty { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0f0af-144">보고될 대상 속성에 대한 식별자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-144">Gets an identifier for the target property being reported.</span></span></summary>
        <value><span data-ttu-id="0f0af-145">보고될 대상 속성에 대한 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-145">An identifier for the target property being reported.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0f0af-146">값은 또한 수 `null`; 참조 <xref:System.Windows.Markup.IProvideValueTarget>합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-146">The value can also be `null`; see <xref:System.Windows.Markup.IProvideValueTarget>.</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="0f0af-147">WPF 사용 정보</span><span class="sxs-lookup"><span data-stu-id="0f0af-147">WPF Usage Notes</span></span>  
 <span data-ttu-id="0f0af-148">종속성 속성에 대 한 기본 WPF 서비스를 반환할 수 있습니다는 <xref:System.Windows.DependencyProperty>, 태그 확장 또는 형식 변환기 메타 데이터를 사용할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-148">For a dependency property, the default WPF service may return a <xref:System.Windows.DependencyProperty>, such that the markup extension or type converter can use metadata.</span></span> <span data-ttu-id="0f0af-149">그렇지 않으면 반환 된 개체 일 수는 <xref:System.Reflection.PropertyInfo> CLR 속성에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="0f0af-149">Otherwise, the returned object can be a <xref:System.Reflection.PropertyInfo> for a CLR property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>