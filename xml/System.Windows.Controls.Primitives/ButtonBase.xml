<Type Name="ButtonBase" FullName="System.Windows.Controls.Primitives.ButtonBase">
  <TypeSignature Language="C#" Value="public abstract class ButtonBase : System.Windows.Controls.ContentControl, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ButtonBase extends System.Windows.Controls.ContentControl implements class System.Windows.Input.ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Primitives.ButtonBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ButtonBase&#xA;Inherits ContentControl&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class ButtonBase abstract : System::Windows::Controls::ContentControl, System::Windows::Input::ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Button)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e41a6-101">모든 <see cref="T:System.Windows.Controls.Button" /> 컨트롤에 대한 기본 클래스를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-101">Represents the base class for all <see cref="T:System.Windows.Controls.Button" /> controls.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-102">처리는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 를 클릭할 때 응답 이벤트는 <xref:System.Windows.Controls.Primitives.ButtonBase>합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-102">Handle the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event to respond when the user clicks a <xref:System.Windows.Controls.Primitives.ButtonBase>.</span></span> <span data-ttu-id="e41a6-103">사용자를 발생 시킬 수는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 를 사용 하 여 이벤트는 <xref:System.Windows.Controls.AccessText> 하거나 컨트롤에 포커스가 있을 때 ENTER 또는 스페이스바를 누르면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-103">The user can raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event by using an <xref:System.Windows.Controls.AccessText> or by pressing ENTER or the SPACEBAR when the control has focus.</span></span>  <span data-ttu-id="e41a6-104">사용자가 컨트롤 집합 스페이스바를 누르면 <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> 를 `true` 마우스를 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-104">When the user presses the SPACEBAR, the control sets <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> to `true` and captures the mouse.</span></span>  <span data-ttu-id="e41a6-105">결과적으로, 컨트롤 이벤트를 발생 마우스와 같은 <xref:System.Windows.UIElement.MouseEnter> 및 <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-105">As a result, the control will raise mouse events such as <xref:System.Windows.UIElement.MouseEnter> and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</span></span> <span data-ttu-id="e41a6-106">사용는 <xref:System.Windows.Controls.AccessText> ENTER 바뀌지 않으면 또는 <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> 또는 마우스를 캡처 하지만 높일 수는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-106">Note that using the <xref:System.Windows.Controls.AccessText> or ENTER does not change <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> or capture the mouse, but it does raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 <span data-ttu-id="e41a6-107"><xref:System.Windows.Controls.Primitives.ButtonBase> 설정는 <xref:System.Windows.Input.KeyboardNavigation.AcceptsReturn%2A> 연결 된 속성을 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-107">The <xref:System.Windows.Controls.Primitives.ButtonBase> sets the <xref:System.Windows.Input.KeyboardNavigation.AcceptsReturn%2A> attached property to `true`.</span></span>  
  
 <span data-ttu-id="e41a6-108"><xref:System.Windows.Controls.Primitives.ButtonBase> 설정는 <xref:System.Windows.UIElement.IsInputMethodEnabled%2A> 속성을 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-108">The <xref:System.Windows.Controls.Primitives.ButtonBase> sets the <xref:System.Windows.UIElement.IsInputMethodEnabled%2A> property to `false`.</span></span>  
  
 <span data-ttu-id="e41a6-109">A <xref:System.Windows.Controls.Primitives.ButtonBase> 는 <xref:System.Windows.Controls.ContentControl>, 즉, 모든 형식 (예: 문자열, 이미지 또는 패널)의 단일 개체가 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-109">A <xref:System.Windows.Controls.Primitives.ButtonBase> is a <xref:System.Windows.Controls.ContentControl>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</span></span> <span data-ttu-id="e41a6-110">자세한 내용은 <xref:System.Windows.Controls.ContentControl> 클래스를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="e41a6-110">For more information, see the <xref:System.Windows.Controls.ContentControl> class.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ButtonBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ButtonBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e41a6-111"><see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-111">Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.Primitives.ButtonBase.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Click;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e41a6-112"><see cref="T:System.Windows.Controls.Button" />을 클릭하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-112">Occurs when a <see cref="T:System.Windows.Controls.Button" /> is clicked.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-113">사용자를 발생 시킬 수는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 를 사용 하 여 이벤트는 <xref:System.Windows.Controls.AccessText> 하거나 컨트롤에 포커스가 있을 때 ENTER 또는 스페이스바를 누르면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-113">The user can raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event by using an <xref:System.Windows.Controls.AccessText> or by pressing ENTER or the SPACEBAR when the control has focus.</span></span>  <span data-ttu-id="e41a6-114">사용자가 컨트롤 집합 스페이스바를 누르면 <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> 를 `true` 마우스를 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-114">When the user presses the SPACEBAR, the control sets <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> to `true` and captures the mouse.</span></span>  <span data-ttu-id="e41a6-115">결과적으로, 컨트롤 이벤트를 발생 마우스와 같은 <xref:System.Windows.UIElement.MouseEnter> 및 <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-115">As a result, the control will raise mouse events such as <xref:System.Windows.UIElement.MouseEnter> and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</span></span> <span data-ttu-id="e41a6-116">사용는 <xref:System.Windows.Controls.AccessText> ENTER 바뀌지 않으면 또는 <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> 또는 마우스를 캡처 하지만 높일 수는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-116">Note that using the <xref:System.Windows.Controls.AccessText> or ENTER does not change <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> or capture the mouse, but it does raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 <span data-ttu-id="e41a6-117"><xref:System.Windows.Controls.Primitives.ButtonBase> 표시는 <xref:System.Windows.UIElement.MouseLeftButtonDown> 이벤트에서 처리 된 것으로 <xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A> 메서드와 발생은 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-117">The <xref:System.Windows.Controls.Primitives.ButtonBase> marks the <xref:System.Windows.UIElement.MouseLeftButtonDown> event as handled in the <xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A> method and raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span> <span data-ttu-id="e41a6-118">따라서는 <xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A> 이벤트에서 상속 되는 컨트롤에 대 한 절대 발생 하지 <xref:System.Windows.Controls.Primitives.ButtonBase>합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-118">Hence, the <xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A> event will never occur for a control that inherits from <xref:System.Windows.Controls.Primitives.ButtonBase>.</span></span> <span data-ttu-id="e41a6-119">대신에 이벤트 처리기를 연결 된 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 이벤트 또는 호출 <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 와 `handledEventsToo` 로 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-119">Instead, attach an event handler to the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event, or call <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` set to `true`.</span></span>  
  
<a name="routedEventInfo_Click"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e41a6-120">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="e41a6-120">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e41a6-121">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="e41a6-121">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.ClickEvent>|  
|<span data-ttu-id="e41a6-122">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="e41a6-122">Routing strategy</span></span>|<span data-ttu-id="e41a6-123">버블링</span><span class="sxs-lookup"><span data-stu-id="e41a6-123">Bubbling</span></span>|  
|<span data-ttu-id="e41a6-124">대리자</span><span class="sxs-lookup"><span data-stu-id="e41a6-124">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
   
  
## Examples  
 <span data-ttu-id="e41a6-125">다음 예제에서는 세 가지 방법으로 클릭에 응답 하는 세 개의 단추를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-125">The following example shows three buttons that respond to clicks in three different ways.</span></span>  
  
-   <span data-ttu-id="e41a6-126">Hover-첫 번째 단추 색 변경를 가리킬 때 마우스 단추 위로</span><span class="sxs-lookup"><span data-stu-id="e41a6-126">Hover - the first button changes colors when the user hovers with the mouse over the button</span></span>  
  
-   <span data-ttu-id="e41a6-127">키를 눌러-두 번째 단추를 사용 하려면 마우스 포인터가 단추에 있는 동안 마우스를 눌러야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-127">Press - the second button requires that the mouse be pressed while the mouse pointer is in the button.</span></span>  
  
-   <span data-ttu-id="e41a6-128">릴리스-는 마우스를 누른 단추에 출시 될 때까지 세 번째가 단추의 배경색을 설정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-128">Release - the third does not reset the background color of the buttons until the mouse is pressed and released in the button.</span></span>  
  
 [!code-xaml[ClickModes_snip#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ClickModes_snip/CSharp/Pane1.xaml#1)]  
  
 [!code-csharp[ClickModes_snip#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClickModes_snip/CSharp/Pane1.xaml.cs#2)]
 [!code-vb[ClickModes_snip#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClickModes_snip/VisualBasic/Window1.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClickEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ClickEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ClickEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.ClickEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClickEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ClickEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e41a6-129">
          <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> 라우트된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-129">Identifies the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-130">이 이벤트는 마우스 왼쪽된 단추 클릭에 해당합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-130">This event corresponds to a left mouse button click.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClickMode">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ClickMode ClickMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.ClickMode ClickMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ClickMode As ClickMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ClickMode ClickMode { System::Windows::Controls::ClickMode get(); void set(System::Windows::Controls::ClickMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ClickMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e41a6-131"><see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> 이벤트가 발생하는 시기를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-131">Gets or sets when the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event occurs.</span></span></summary>
        <value><span data-ttu-id="e41a6-132"><see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> 이벤트가 발생하는 시기입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-132">When the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event occurs.</span></span> <span data-ttu-id="e41a6-133">기본값은 <see cref="F:System.Windows.Controls.ClickMode.Release" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-133">The default value is <see cref="F:System.Windows.Controls.ClickMode.Release" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_ClickMode"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e41a6-134">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="e41a6-134">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e41a6-135">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="e41a6-135">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty>|  
|<span data-ttu-id="e41a6-136">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="e41a6-136">Metadata properties set to `true`</span></span>|<span data-ttu-id="e41a6-137">없음</span><span class="sxs-lookup"><span data-stu-id="e41a6-137">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClickModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClickModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClickModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClickModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClickModeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e41a6-138"><see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-138">Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e41a6-139">이 단추를 누를 때 호출할 명령을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-139">Gets or sets the command to invoke when this button is pressed.</span></span></summary>
        <value><span data-ttu-id="e41a6-140">이 단추를 누르면 호출할 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-140">A command to invoke when this button is pressed.</span></span> <span data-ttu-id="e41a6-141">기본값은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-141">The default value is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-142">이 속성은 특정 단추 인스턴스가 명령과 연결을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-142">This property is used to associate a command with a particular button instance.</span></span>  
  
 <span data-ttu-id="e41a6-143">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)],이 속성을와 같은 기존 명령 라이브러리 중 하나에서 정적 명령 값으로 설정 가장 자주 <xref:System.Windows.Input.ApplicationCommands> 또는 <xref:System.Windows.Input.NavigationCommands>합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-143">In [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], this property is most often set to be a static command value from one of the existing command libraries, such as <xref:System.Windows.Input.ApplicationCommands> or <xref:System.Windows.Input.NavigationCommands>.</span></span> <span data-ttu-id="e41a6-144">자세한 내용은 참조 [명령 실행 개요](~/docs/framework/wpf/advanced/commanding-overview.md) 또는 <xref:System.Windows.Input.ICommand>합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-144">For details, see [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md) or <xref:System.Windows.Input.ICommand>.</span></span>  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="e41a6-145">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="e41a6-145">XAML Attribute Usage</span></span>  
  
```  
<object Command="commandName"/>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a><span data-ttu-id="e41a6-146">XAML 값</span><span class="sxs-lookup"><span data-stu-id="e41a6-146">XAML Values</span></span>  
 <span data-ttu-id="e41a6-147">*commandName*</span><span class="sxs-lookup"><span data-stu-id="e41a6-147">*commandName*</span></span>  
 <span data-ttu-id="e41a6-148">이 단추를 누를 때 호출할 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-148">The command to invoke when this button is pressed.</span></span>  
  
<a name="dependencyPropertyInfo_Command"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e41a6-149">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="e41a6-149">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e41a6-150">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="e41a6-150">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.CommandProperty>|  
|<span data-ttu-id="e41a6-151">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="e41a6-151">Metadata properties set to `true`</span></span>|<span data-ttu-id="e41a6-152">없음</span><span class="sxs-lookup"><span data-stu-id="e41a6-152">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e41a6-153"><see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> 속성으로 전달할 매개 변수를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-153">Gets or sets the parameter to pass to the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> property.</span></span></summary>
        <value><span data-ttu-id="e41a6-154"><see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> 속성으로 전달할 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-154">Parameter to pass to the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-155">명령 라이브러리부터 대부분의 기존 명령을 명령 매개 변수를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-155">Most existing commands from the command libraries do not use a command parameter.</span></span> <span data-ttu-id="e41a6-156">명령 매개 변수를 사용 하 여 수행 하는 명령의 이들 중 대부분 정수 또는 문자열 같은 몇 가지 기본 유형 값을 가진 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-156">Of the commands that do use a command parameter, most of these take a parameter with some primitive type value, such as an integer or a string.</span></span> <span data-ttu-id="e41a6-157">그러나 있기 사용자 지정 명령을 만들려면 명령의 명령 매개 변수로 기본 형식이 필요 합니다. 여기서.</span><span class="sxs-lookup"><span data-stu-id="e41a6-157">However, it is possible to create a custom command where that command expects a nonprimitive type as its command parameter.</span></span> <span data-ttu-id="e41a6-158">이러한 설정을 사용자 지정 명령 경우에 대 한 <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> 코드에서 기존 또는 새 개체 인스턴스를 필요할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-158">For a custom command case like this, setting <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> in code might require a new or existing object instance.</span></span> <span data-ttu-id="e41a6-159">설정 <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> 태그에 속성 요소 구문을, 여기서 속성 요소 구문을 채우기 개체 요소는 해당 명령에 의해 허용 된 형식의 새 요소 필요할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-159">Setting <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> in markup might require property element syntax, where the object element filling the property element syntax is a new element of the type expected by that command.</span></span> <span data-ttu-id="e41a6-160">또는 태그에서 설정 기존 개체에 태그 확장을 통해 대 한 참조를 필요할 수 있습니다 (일반적으로 이러한 참조도 이루어진 [바인딩 태그 확장](~/docs/framework/wpf/advanced/binding-markup-extension.md) 또는 [StaticResource 태그 확장 ](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)).</span><span class="sxs-lookup"><span data-stu-id="e41a6-160">Alternatively, setting in markup might require a reference through a markup extension to an existing object (typically these references are made with [Binding Markup Extension](~/docs/framework/wpf/advanced/binding-markup-extension.md) or [StaticResource Markup Extension](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)).</span></span>  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="e41a6-161">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="e41a6-161">XAML Attribute Usage</span></span>  
  
```  
<object CommandParameter="commandParameter" />  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a><span data-ttu-id="e41a6-162">XAML 값</span><span class="sxs-lookup"><span data-stu-id="e41a6-162">XAML Values</span></span>  
 <span data-ttu-id="e41a6-163">*commandParameter*</span><span class="sxs-lookup"><span data-stu-id="e41a6-163">*commandParameter*</span></span>  
 <span data-ttu-id="e41a6-164">에 지정 된 특정 명령으로 동일한 형식의 값은 <xref:System.Windows.Controls.Primitives.ButtonBase.Command%2A> 속성에 16입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-164">A value of the same type as the particular command specified in the <xref:System.Windows.Controls.Primitives.ButtonBase.Command%2A> property expects.</span></span> <span data-ttu-id="e41a6-165">기존 명령 라이브러리 명령을 사용 하는 경우 해당 명령은 라이브러리의 설명서를 참조 하십시오. [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 유형을 포함 하 여 사용 정보를 <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> 명령이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-165">If you use an existing command library command, see that command library's documentation for [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage information, including which type of <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> the command expects.</span></span> <span data-ttu-id="e41a6-166">사용자 지정 명령을 사용 하는 경우 설명을 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="e41a6-166">If you use a custom command, see Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_CommandParameter"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e41a6-167">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="e41a6-167">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e41a6-168">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="e41a6-168">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameterProperty>|  
|<span data-ttu-id="e41a6-169">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="e41a6-169">Metadata properties set to `true`</span></span>|<span data-ttu-id="e41a6-170">없음</span><span class="sxs-lookup"><span data-stu-id="e41a6-170">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e41a6-171"><see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-171">Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e41a6-172"><see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> 라우트된 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-172">Identifies the routed <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e41a6-173">지정된 명령을 호출하는 요소를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-173">Gets or sets the element on which to raise the specified command.</span></span></summary>
        <value><span data-ttu-id="e41a6-174">명령을 실행할 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-174">Element on which to raise a command.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-175"><xref:System.Windows.Controls.Primitives.ButtonBase.CommandTarget%2A> 속성 정의를 사용할 수 없습니다는 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-175">The <xref:System.Windows.Controls.Primitives.ButtonBase.CommandTarget%2A> property cannot be used to define a <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="e41a6-176"><xref:System.Windows.Controls.Primitives.ButtonBase.CommandTarget%2A> 속성은 응용 프로그램의 어딘가에 이미 정의 되어 있는 요소에 대 한 참조를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-176">The <xref:System.Windows.Controls.Primitives.ButtonBase.CommandTarget%2A> property provides a reference to an element that is already defined somewhere in your application.</span></span>  
  
<a name="xamlAttributeUsage_Target"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="e41a6-177">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="e41a6-177">XAML Attribute Usage</span></span>  
  
```  
<ButtonBase CommandTarget="{Binding ElementName= elementName }"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a><span data-ttu-id="e41a6-178">XAML 값</span><span class="sxs-lookup"><span data-stu-id="e41a6-178">XAML Values</span></span>  
 <span data-ttu-id="e41a6-179">*elementName*</span><span class="sxs-lookup"><span data-stu-id="e41a6-179">*elementName*</span></span>  
 <span data-ttu-id="e41a6-180">이름을 <xref:System.Windows.IInputElement> 명령을 받는입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-180">The name of <xref:System.Windows.IInputElement> that receives the command.</span></span>  
  
<a name="dependencyPropertyInfo_CommandTarget"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e41a6-181">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="e41a6-181">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e41a6-182">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="e41a6-182">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.CommandTargetProperty>|  
|<span data-ttu-id="e41a6-183">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="e41a6-183">Metadata properties set to `true`</span></span>|<span data-ttu-id="e41a6-184">없음</span><span class="sxs-lookup"><span data-stu-id="e41a6-184">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e41a6-185"><see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandTarget" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-185">Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandTarget" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected override bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e41a6-186"><see cref="P:System.Windows.ContentElement.IsEnabled" /> 속성 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-186">Gets the value of the <see cref="P:System.Windows.ContentElement.IsEnabled" /> property.</span></span></summary>
        <value>
          <span data-ttu-id="e41a6-187">컨트롤을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-187"><see langword="true" /> if the control is enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-188">이 구현을 재정의 하려는 경우 반드시 기본 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-188">If you choose to override this implementation, make certain that you call the base method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPressed">
      <MemberSignature Language="C#" Value="public bool IsPressed { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPressed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPressed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:  property bool IsPressed {  public:&#xA;bool get(); protected:&#xA; void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e41a6-189"><see cref="T:System.Windows.Controls.Primitives.ButtonBase" />가 현재 활성화되어 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-189">Gets a value that indicates whether a <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> is currently activated.</span></span></summary>
        <value>
          <span data-ttu-id="e41a6-190"><see cref="T:System.Windows.Controls.Primitives.ButtonBase" />가 활성화되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-190"><see langword="true" /> if the <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> is activated; otherwise <see langword="false" />.</span></span> <span data-ttu-id="e41a6-191">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-191">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-192"><xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> 마우스 왼쪽된 단추를 나타내는 단추의 상태 또는 단추 위로 스페이스바를 누르면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-192"><xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> is the state of a button that indicates the left mouse button or SPACEBAR is pressed over the button.</span></span> <span data-ttu-id="e41a6-193">때 <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> 은 `true`, 컨트롤에서 마우스를 캡처할 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-193">When <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> is `true`, the control captures the mouse.</span></span>  <span data-ttu-id="e41a6-194">결과적으로, 컨트롤 이벤트를 발생 마우스와 같은 <xref:System.Windows.UIElement.MouseEnter> 및 <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-194">As a result, the control will raise mouse events such as <xref:System.Windows.UIElement.MouseEnter> and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</span></span> <span data-ttu-id="e41a6-195">사용는 <xref:System.Windows.Controls.AccessText> ENTER 바뀌지 않으면 또는 <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> 또는 마우스를 캡처 하지만 발생는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-195">Note that using the <xref:System.Windows.Controls.AccessText> or ENTER does not change <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> or capture the mouse, but is does raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 <span data-ttu-id="e41a6-196">.NET Framework 버전 3.0 서비스 팩 1부터 <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> 보호 setter가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-196">Starting with the .NET Framework version 3.0 Service Pack 1, <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> has a protected setter.</span></span> <span data-ttu-id="e41a6-197">이 기능을 사용 하려면 응용 프로그램은.NET Framework 버전 3.5 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-197">To use this functionality, your application should target the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e41a6-198">자세한 내용은 [버전 및 종속성](~/docs/framework/migration-guide/versions-and-dependencies.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="e41a6-198">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsPressed"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e41a6-199">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="e41a6-199">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e41a6-200">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="e41a6-200">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty>|  
|<span data-ttu-id="e41a6-201">로 메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="e41a6-201">Metadata properties set to `true`</span></span>|<span data-ttu-id="e41a6-202">없음</span><span class="sxs-lookup"><span data-stu-id="e41a6-202">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="e41a6-203">사용 하는 방법을 보여 주는이 예제는 <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> 트리거 스타일의 속성에에서 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-203">This example shows how to use the <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> property in a trigger style.</span></span>  
  
 [!code-xaml[BtnColor#9](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnColor/CSharp/Pane1.xaml#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPressedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsPressedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsPressedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsPressedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsPressedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e41a6-204"><see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> 종속성 속성을 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-204">Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected override void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e41a6-205"><see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> 이벤트에 대한 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-205">The event data for the <see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> event.</span></span></param>
        <summary><span data-ttu-id="e41a6-206">이 컨트롤에 대해 <see cref="P:System.Windows.Controls.AccessText.AccessKey" />가 호출되면 응답합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-206">Responds when the <see cref="P:System.Windows.Controls.AccessText.AccessKey" /> for this control is called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-207">경우 <xref:System.Windows.Input.AccessKeyEventArgs.IsMultiple%2A> 은 `true`,이 메서드는이 컨트롤의 포커스를 제공 하는 기본 구현을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-207">If <xref:System.Windows.Input.AccessKeyEventArgs.IsMultiple%2A> is `true`, this method calls the base implementation, which gives this control focus.</span></span>  <span data-ttu-id="e41a6-208">그렇지 않으면이 메서드에서 발생는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-208">Otherwise, this method raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e41a6-209"><see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> 라우트된 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-209">Raises the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-210">컨트롤의 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 호출 하 여 이벤트 <xref:System.Windows.UIElement.RaiseEvent%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-210">The control raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event by calling <xref:System.Windows.UIElement.RaiseEvent%2A>.</span></span> <span data-ttu-id="e41a6-211">자세한 내용은 참조 [라우트된 이벤트 개요](~/docs/framework/wpf/advanced/routed-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-211">For more information, see [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="e41a6-212">재정의 하는 경우 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-212">When overriding <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" /> method so that registered delegates receive the event.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnIsPressedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsPressedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsPressedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsPressedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsPressedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e41a6-213"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />의 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-213">The data for <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span></span></param>
        <summary><span data-ttu-id="e41a6-214"><see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> 속성이 변경되면 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-214">Called when the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> property changes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e41a6-215">이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-215">The event data.</span></span></param>
        <summary><span data-ttu-id="e41a6-216">이 컨트롤에 포커스가 있는 동안 사용자가 키를 누르면 발생하는 <see cref="E:System.Windows.UIElement.KeyDown" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-216">Provides class handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event that occurs when the user presses a key while this control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-217">이 구현에서 <xref:System.Windows.UIElement.KeyDown> 이벤트를 설정 하 여 처리 된 것으로 <xref:System.Windows.RoutedEventArgs.Handled%2A> 에 이벤트 데이터의 `true` 때 <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> 로 설정 되지 않은 <xref:System.Windows.Controls.ClickMode.Hover> 하나에 다음과 같은 경우 및:</span><span class="sxs-lookup"><span data-stu-id="e41a6-217">This implementation marks the <xref:System.Windows.UIElement.KeyDown> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is not set to <xref:System.Windows.Controls.ClickMode.Hover> and one of the following cases are true:</span></span>  
  
-   <span data-ttu-id="e41a6-218">사용자가는 스페이스바를 누릅니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-218">The user presses the SPACEBAR.</span></span>  
  
-   <span data-ttu-id="e41a6-219">사용자가 ENTER 및 <xref:System.Windows.Input.KeyboardNavigation.AcceptsReturn%2A> 은 `true` 이 컨트롤에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-219">The user presses ENTER and <xref:System.Windows.Input.KeyboardNavigation.AcceptsReturn%2A> is `true` for this control.</span></span>  
  
 <span data-ttu-id="e41a6-220">이 구현에서 다른 모든 경우의 처리 상태를 변경 되지 않습니다 (의 <xref:System.Windows.RoutedEventArgs.Handled%2A> 속성)의 <xref:System.Windows.UIElement.KeyDown> 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-220">In all other cases, this implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.KeyDown> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="e41a6-221">재정의 하는 경우 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" />, 항상 기본 구현을 호출 프로그램 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" /> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-221">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" /> implementation.</span></span> <span data-ttu-id="e41a6-222">기본 구현을 호출 하지 않으면 최종 클래스의 런타임 동작을 변경할 수는 클래스 처리기를 사용 하 여 이벤트 처리에서 기본 클래스를 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-222">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="e41a6-223">요구 사항에 따라 앞 이나 뒤를 별도로 처리 하는 기본 구현을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-223">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e41a6-224"><see cref="E:System.Windows.UIElement.KeyUp" /> 이벤트에 대한 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-224">The event data for the <see cref="E:System.Windows.UIElement.KeyUp" /> event.</span></span></param>
        <summary><span data-ttu-id="e41a6-225">이 컨트롤에 포커스가 있는 동안 사용자가 키를 놓으면 발생하는 <see cref="E:System.Windows.UIElement.KeyUp" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-225">Provides class handling for the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event that occurs when the user releases a key while this control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-226">이 구현에서 <xref:System.Windows.UIElement.KeyUp> 이벤트를 설정 하 여 처리 된 것으로 <xref:System.Windows.RoutedEventArgs.Handled%2A> 에 이벤트 데이터의 `true` 스페이스바를 놓을 때.</span><span class="sxs-lookup"><span data-stu-id="e41a6-226">This implementation marks the <xref:System.Windows.UIElement.KeyUp> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when the user releases the SPACEBAR.</span></span> <span data-ttu-id="e41a6-227">그렇지 않으면이 구현 처리 상태 변경 되지 않습니다 (의 <xref:System.Windows.RoutedEventArgs.Handled%2A> 속성)의 <xref:System.Windows.UIElement.KeyUp> 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-227">Otherwise, this implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.KeyUp> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="e41a6-228">재정의 하는 경우 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" />, 항상 기본 구현을 호출 프로그램 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" /> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-228">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" /> implementation.</span></span> <span data-ttu-id="e41a6-229">기본 구현을 호출 하지 않으면 최종 클래스의 런타임 동작을 변경할 수는 클래스 처리기를 사용 하 여 이벤트 처리에서 기본 클래스를 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-229">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="e41a6-230">요구 사항에 따라 앞 이나 뒤를 별도로 처리 하는 기본 구현을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-230">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected override void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e41a6-231"><see cref="E:System.Windows.IInputElement.LostKeyboardFocus" /> 이벤트에 대한 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-231">The event data for the <see cref="E:System.Windows.IInputElement.LostKeyboardFocus" /> event.</span></span></param>
        <summary><span data-ttu-id="e41a6-232">요소가 키보드 포커스를 잃을 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-232">Called when an element loses keyboard focus.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected override void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e41a6-233"><see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> 이벤트에 대한 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-233">The event data for the <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> event.</span></span></param>
        <summary><span data-ttu-id="e41a6-234">이 컨트롤이 더 이상 마우스 이벤트 메시지를 받지 않으면 발생하는 <see cref="E:System.Windows.UIElement.LostMouseCapture" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-234">Provides class handling for the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> routed event that occurs when this control is no longer receiving mouse event messages.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-235">이 구현은 처리 상태를 변경 되지 않습니다 (의 <xref:System.Windows.RoutedEventArgs.Handled%2A> 속성)의 <xref:System.Windows.UIElement.LostMouseCapture> 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-235">This implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.LostMouseCapture> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="e41a6-236">재정의 하는 경우 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />, 항상 기본 구현을 호출 프로그램 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" /> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-236">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" /> implementation.</span></span> <span data-ttu-id="e41a6-237">기본 구현을 호출 하지 않으면 최종 클래스의 런타임 동작을 변경할 수는 클래스 처리기를 사용 하 여 이벤트 처리에서 기본 클래스를 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-237">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="e41a6-238">요구 사항에 따라 앞 이나 뒤를 별도로 처리 하는 기본 구현을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-238">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected override void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e41a6-239"><see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 이벤트에 대한 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-239">The event data for the <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> event.</span></span></param>
        <summary><span data-ttu-id="e41a6-240">마우스가 이 컨트롤로 들어오면 발생하는 <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-240">Provides class handling for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> routed event that occurs when the mouse enters this control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-241">때 <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> 로 설정 되어 <xref:System.Windows.Controls.ClickMode.Hover>,이 구현에서 <xref:System.Windows.UIElement.MouseEnter> 이벤트를 설정 하 여 처리 된 것으로 <xref:System.Windows.RoutedEventArgs.Handled%2A> 에 이벤트 데이터의 `true` 를 발생 시킵니다는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-241">When <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is set to <xref:System.Windows.Controls.ClickMode.Hover>, this implementation marks the <xref:System.Windows.UIElement.MouseEnter> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` and raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="e41a6-242">재정의 하는 경우 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />, 항상 기본 구현을 호출 프로그램 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" /> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-242">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" /> implementation.</span></span> <span data-ttu-id="e41a6-243">기본 구현을 호출 하지 않으면 최종 클래스의 런타임 동작을 변경할 수는 클래스 처리기를 사용 하 여 이벤트 처리에서 기본 클래스를 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-243">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="e41a6-244">요구 사항에 따라 앞 이나 뒤를 별도로 처리 하는 기본 구현을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-244">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e41a6-245"><see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 이벤트에 대한 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-245">The event data for the <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> event.</span></span></param>
        <summary><span data-ttu-id="e41a6-246">마우스가 이 요소에서 나가면 발생하는 <see cref="E:System.Windows.UIElement.MouseLeave" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-246">Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event that occurs when the mouse leaves an element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-247">이 구현에서 <xref:System.Windows.UIElement.MouseLeave> 이벤트를 설정 하 여 처리 된 것으로 <xref:System.Windows.RoutedEventArgs.Handled%2A> 에 이벤트 데이터의 `true` 때 <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> 로 설정 된 <xref:System.Windows.Controls.ClickMode.Hover>합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-247">This implementation marks the <xref:System.Windows.UIElement.MouseLeave> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is set to <xref:System.Windows.Controls.ClickMode.Hover>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="e41a6-248">재정의 하는 경우 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />, 항상 기본 구현을 호출 프로그램 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" /> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-248">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" /> implementation.</span></span> <span data-ttu-id="e41a6-249">기본 구현을 호출 하지 않으면 최종 클래스의 런타임 동작을 변경할 수는 클래스 처리기를 사용 하 여 이벤트 처리에서 기본 클래스를 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-249">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="e41a6-250">요구 사항에 따라 앞 이나 뒤를 별도로 처리 하는 기본 구현을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-250">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e41a6-251">이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-251">The event data.</span></span></param>
        <summary><span data-ttu-id="e41a6-252">마우스 포인터가 이 컨트롤 위에 있을 때 마우스 왼쪽 단추를 누르면 발생하는 <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-252">Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event that occurs when the left mouse button is pressed while the mouse pointer is over this control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-253">이 구현에서 <xref:System.Windows.UIElement.MouseLeftButtonDown> 이벤트를 설정 하 여 처리 된 것으로 <xref:System.Windows.RoutedEventArgs.Handled%2A> 에 이벤트 데이터의 `true` 때 <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> 로 설정 되지 않은 <xref:System.Windows.Controls.ClickMode.Hover>합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-253">This implementation marks the <xref:System.Windows.UIElement.MouseLeftButtonDown> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is not set to <xref:System.Windows.Controls.ClickMode.Hover>.</span></span> <span data-ttu-id="e41a6-254">에 응답 하는 <xref:System.Windows.UIElement.MouseLeftButtonDown> 이벤트를 이벤트 처리기를 연결 하는 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> 이벤트 또는 호출 <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 와 `handledEventsToo` 로 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-254">To respond to the <xref:System.Windows.UIElement.MouseLeftButtonDown> event, attach an event handler to the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event, or call <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` set to `true`.</span></span>  
  
 <span data-ttu-id="e41a6-255">때 <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> 로 설정 된 <xref:System.Windows.Controls.ClickMode.Press>,이 메서드는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-255">When <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is set to <xref:System.Windows.Controls.ClickMode.Press>, this method raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="e41a6-256">재정의 하는 경우 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />, 항상 기본 구현을 호출 프로그램 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" /> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-256">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" /> implementation.</span></span> <span data-ttu-id="e41a6-257">기본 구현을 호출 하지 않으면 최종 클래스의 런타임 동작을 변경할 수는 클래스 처리기를 사용 하 여 이벤트 처리에서 기본 클래스를 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-257">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="e41a6-258">요구 사항에 따라 앞 이나 뒤를 별도로 처리 하는 기본 구현을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-258">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e41a6-259">이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-259">The event data.</span></span></param>
        <summary><span data-ttu-id="e41a6-260">마우스 포인터가 이 컨트롤 위에 있을 때 마우스 왼쪽 단추를 놓으면 발생하는 <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-260">Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event that occurs when the left mouse button is released while the mouse pointer is over this control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-261">이 구현에서 <xref:System.Windows.UIElement.MouseLeftButtonUp> 이벤트를 설정 하 여 처리 된 것으로 <xref:System.Windows.RoutedEventArgs.Handled%2A> 에 이벤트 데이터의 `true` 때 <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> 로 설정 되지 않은 <xref:System.Windows.Controls.ClickMode.Hover>합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-261">This implementation marks the <xref:System.Windows.UIElement.MouseLeftButtonUp> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is not set to <xref:System.Windows.Controls.ClickMode.Hover>.</span></span> <span data-ttu-id="e41a6-262">에 응답 하는 <xref:System.Windows.UIElement.MouseLeftButtonUp> 이벤트를 이벤트 처리기를 연결 하는 <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> 이벤트 또는 호출 <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 와 `handledEventsToo` 로 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-262">To respond to the <xref:System.Windows.UIElement.MouseLeftButtonUp> event, attach an event handler to the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event, or call <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` set to `true`.</span></span>  
  
 <span data-ttu-id="e41a6-263">때 <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> 로 설정 되어 <xref:System.Windows.Controls.ClickMode.Release> 은 <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> 은 `true`,이 메서드는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-263">When <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is set to <xref:System.Windows.Controls.ClickMode.Release> is <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> is `true`, this method raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="e41a6-264">재정의 하는 경우 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />, 항상 기본 구현을 호출 프로그램 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" /> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-264">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" /> implementation.</span></span> <span data-ttu-id="e41a6-265">기본 구현을 호출 하지 않으면 최종 클래스의 런타임 동작을 변경할 수는 클래스 처리기를 사용 하 여 이벤트 처리에서 기본 클래스를 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-265">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="e41a6-266">요구 사항에 따라 앞 이나 뒤를 별도로 처리 하는 기본 구현을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-266">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected override void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e41a6-267">이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-267">The event data.</span></span></param>
        <summary><span data-ttu-id="e41a6-268">마우스 포인터를 이 요소 위에서 이동하면 발생하는 <see cref="E:System.Windows.UIElement.MouseMove" /> 라우트된 이벤트에 대한 클래스 처리를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-268">Provides class handling for the <see cref="E:System.Windows.UIElement.MouseMove" /> routed event that occurs when the mouse pointer moves while over this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-269">이 구현에서 <xref:System.Windows.UIElement.MouseMove> 이벤트를 설정 하 여 처리 된 것으로 <xref:System.Windows.RoutedEventArgs.Handled%2A> 에 이벤트 데이터의 `true` 때 <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> 로 설정 되지 않은 <xref:System.Windows.Controls.ClickMode.Hover> 및 <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> 은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-269">This implementation marks the <xref:System.Windows.UIElement.MouseMove> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is not set to <xref:System.Windows.Controls.ClickMode.Hover> and <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> is `true`.</span></span> <span data-ttu-id="e41a6-270">에 응답 하는 <xref:System.Windows.UIElement.MouseMove> 이벤트를 이벤트 처리기를 연결 하는 <xref:System.Windows.ContentElement.PreviewMouseMove> 이벤트 또는 호출 <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 와 `handledEventsToo` 로 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-270">To respond to the <xref:System.Windows.UIElement.MouseMove> event, attach an event handler to the <xref:System.Windows.ContentElement.PreviewMouseMove> event, or call <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` set to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="e41a6-271">재정의 하는 경우 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" />, 항상 기본 구현을 호출 프로그램 <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" /> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-271">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" /> implementation.</span></span> <span data-ttu-id="e41a6-272">기본 구현을 호출 하지 않으면 최종 클래스의 런타임 동작을 변경할 수는 클래스 처리기를 사용 하 여 이벤트 처리에서 기본 클래스를 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-272">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="e41a6-273">요구 사항에 따라 앞 이나 뒤를 별도로 처리 하는 기본 구현을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-273">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo sizeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnRenderSizeChanged (sizeInfo As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ sizeInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeInfo" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="sizeInfo"><span data-ttu-id="e41a6-274">크기 변경을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-274">Specifies the size changes.</span></span></param>
        <summary><span data-ttu-id="e41a6-275">컨트롤의 렌더링된 크기가 변경될 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-275">Called when the rendered size of a control changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e41a6-276">재정의 <xref:System.Windows.Controls.Primitives.ButtonBase.OnRenderSizeChanged%2A> 의 메서드는 <xref:System.Windows.UIElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="e41a6-276">Overrides the <xref:System.Windows.Controls.Primitives.ButtonBase.OnRenderSizeChanged%2A> method of the <xref:System.Windows.UIElement>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>