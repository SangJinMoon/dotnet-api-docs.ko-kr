<Type Name="WorkflowPersistenceService" FullName="System.Workflow.Runtime.Hosting.WorkflowPersistenceService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6cbc9cd683f0346f1532afdb1709c1ce11dec398" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51935419" /></Metadata><TypeSignature Language="C#" Value="public abstract class WorkflowPersistenceService : System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkflowPersistenceService extends System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WorkflowPersistenceService&#xA;Inherits WorkflowRuntimeService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowPersistenceService abstract : System::Workflow::Runtime::Hosting::WorkflowRuntimeService" />
  <TypeSignature Language="F#" Value="type WorkflowPersistenceService = class&#xA;    inherit WorkflowRuntimeService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.Runtime.Hosting.WorkflowRuntimeService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e6447-101">모든 지속성 서비스가 파생되는 추상 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-101">The abstract base class from which all persistence services are derived.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <span data-ttu-id="e6447-102">워크플로가 실행되는 동안 특정 조건이 발생하면 워크플로 런타임 엔진이 워크플로 인스턴스에 대한 상태 정보를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-102">When certain conditions occur while the workflow is running, the workflow runtime engine persists state information about the workflow instance.</span></span> <span data-ttu-id="e6447-103">예를 들어 원자성 트랜잭션이 완료될 때, 워크플로 인스턴스가 유휴 상태가 될 때, 호스트가 워크플로 인스턴스에서 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType>를 호출할 때 또는 워크플로 인스턴스가 종료되거나 완료될 때 지속성이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-103">Persistence can occur, for example, when an atomic transaction finishes, when the workflow instance becomes idle, when the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType> on the workflow instance, or when a workflow instance is terminated or finishes.</span></span> <span data-ttu-id="e6447-104">워크플로 런타임 엔진 의미 체계에서 지속성이 발생해야 함을 나타내는 경우 워크플로 런타임 엔진은 지속성 서비스가 제공하는 메서드를 호출하여 워크플로 인스턴스에 대한 상태 정보를 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-104">When the workflow runtime engine semantics dictate that persistence should occur, the workflow runtime engine calls methods that are supplied by a persistence service to save state information about the workflow instance.</span></span> <span data-ttu-id="e6447-105">마찬가지로 워크플로 런타임 엔진은 이전에 유지된 워크플로 인스턴스를 복원해야 하는 경우 지속성 서비스가 제공한 메서드를 호출하여 이 상태 정보를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-105">Likewise, when the workflow runtime engine needs to restore a previously persisted workflow instance, it calls methods that are supplied by the persistence service to load this state information.</span></span> <span data-ttu-id="e6447-106">워크플로 런타임 엔진은 지속성 수행 시기와 관련해서 모든 의미 체계를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-106">The workflow runtime engine handles all the semantics regarding when to perform persistence.</span></span> <span data-ttu-id="e6447-107">지속성 서비스는 실제로 워크플로 상태 정보를 데이터 저장소로 저장 및 로드하거나 데이터 저장소로부터 저장 및 로드하는 작업을 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-107">The persistence service handles actually saving and loading the workflow state information to or from a data store.</span></span>  
  
 <span data-ttu-id="e6447-108"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> 클래스에서 클래스를 파생시켜 유지 서비스를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-108">You can create a persistence service by deriving a class from the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class.</span></span>  <span data-ttu-id="e6447-109"><xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>를 호출하거나 응용 프로그램 구성 파일에 해당 항목을 만들어 워크플로 런타임 엔진에 유지 서비스를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-109">You can add your persistence service to the workflow runtime engine by calling <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> or by making an appropriate entry in the application configuration file.</span></span> <span data-ttu-id="e6447-110"><xref:System.Workflow.Runtime.WorkflowRuntime>에 하나의 지속성 서비스만 포함되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-110">The <xref:System.Workflow.Runtime.WorkflowRuntime> should only contain one persistence service.</span></span> <span data-ttu-id="e6447-111">Windows Workflow Foundation에서는 있는 그대로 사용하거나 확장할 수 있는 기본 유지 서비스인 <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> 클래스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-111">Windows Workflow Foundation provides the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> class, an out-of-box persistence service, which you can use as is or extend.</span></span>  
  
 <span data-ttu-id="e6447-112">워크플로 런타임 엔진에는 다른 프로세스에서 실행되는 지속성 서비스가 단일 데이터 저장소에 액세스할 수 있는 환경에서 사용할 워크플로 상태 정보를 잠그기 위한 의미 체계가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-112">The workflow runtime engine has semantics for locking workflow state information for use in environments where persistence services that run in different processes might have access to a single data store.</span></span> <span data-ttu-id="e6447-113"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> 클래스는 이와 같은 워크플로 런타임 엔진의 기능을 지원하기 위하여 워크플로 인스턴스의 상태 정보를 데이터 저장소에서 잠글지 여부를 지정하는 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>에 대한 매개 변수를 제공하고 이전에 잠긴 워크플로 상태 정보를 잠금 해제하는 메서드 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A>를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-113">The <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> class provides the capability to support this functionality of the workflow runtime engine by providing a parameter to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> that specifies whether the state information of a workflow instance should be unlocked in the data store, and by providing a method <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> to unlock previously locked workflow state information.</span></span> <span data-ttu-id="e6447-114">잠금을 구현하는 유지 서비스에서 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>를 호출하면 워크플로 인스턴스에 대한 상태 정보가 잠겨야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-114">In a persistence service that implements locking, a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> should lock the state information for a workflow instance.</span></span>  
  
 <span data-ttu-id="e6447-115">지속성 서비스는 데이터 저장소에 상태 정보를 저장하지 못하거나 데이터 저장소에서 상태 정보를 로드하지 못할 경우 <xref:System.Workflow.Runtime.Hosting.PersistenceException>을 throw해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-115">Your persistence service should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> if it fails to save state information to its data store or load state information from its data store.</span></span> <span data-ttu-id="e6447-116">워크플로 런타임 엔진에서는 이러한 동작을 예상합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-116">The workflow runtime engine expects this behavior.</span></span>  
  
 <span data-ttu-id="e6447-117">영속 저장소를 사용하여 워크플로 상태 정보를 저장하는 서비스에 대해 일괄 처리 메커니즘이 제공됩니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-117">A batching mechanism is provided for services that use a durable store to save workflow state information.</span></span> <span data-ttu-id="e6447-118">이 경우 유지 서비스에서 사용하는 영속 저장소와 워크플로 런타임 엔진의 내부 상태 간에 일관성을 유지하는 것이 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-118">It is important in these cases to maintain consistency between the durable store that is used by the persistence service and the internal state of the workflow runtime engine.</span></span> <span data-ttu-id="e6447-119"><xref:System.Workflow.Runtime.IPendingWork> 인터페이스에서 정의한 기능을 서비스에 추가한 다음 데이터 저장소에 대한 변경 내용을 작업 항목으로 <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>에 추가하여 <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>가 제공하는 워크플로 트랜잭션 일괄 처리에 참여할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-119">You can add functionality defined by the <xref:System.Workflow.Runtime.IPendingWork> interface to your service, and then participate in workflow transaction batching provided by the <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> by adding changes to your data store as work items to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>.</span></span> <span data-ttu-id="e6447-120">영속 저장소 자체에서 <xref:System.Transactions.IEnlistmentNotification> 인터페이스를 구현해야 하므로 트랜잭션 롤백 시에도 워크플로 정보가 잘못 유지되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-120">The durable store itself should implement the <xref:System.Transactions.IEnlistmentNotification> interface, so that workflow information is not persisted incorrectly in the event of a transaction rollback.</span></span> <span data-ttu-id="e6447-121">자세한 내용은 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A> 또는 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="e6447-121">For more information, see <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity%2A> or <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowPersistenceService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WorkflowPersistenceService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e6447-122">파생 클래스에서 구현되는 경우에는 <see cref="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-122">When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Hosting.WorkflowPersistenceService" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e6447-123">다음 예제에서는 `SqlWorkflowPersistenceService`에서 파생된 `WorkflowPersistenceService` 클래스의 인스턴스를 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-123">The following example demonstrates creating an instance of the `SqlWorkflowPersistenceService` class (derived from `WorkflowPersistenceService`).</span></span> <span data-ttu-id="e6447-124">이 예제는 Program.cs 클래스에 있는 Nested Exception Handlers SDK 샘플의 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-124">This example is from the Nested Exception Handlers SDK sample, from the Program.cs class.</span></span>  <span data-ttu-id="e6447-125">자세한 내용은 참조는 [Nested Exception Handlers 샘플](https://msdn.microsoft.com/library/d1da0209-842b-41c8-9b7c-0cbaa1034265)합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-125">For more information, see the [Nested Exception Handlers Sample](https://msdn.microsoft.com/library/d1da0209-842b-41c8-9b7c-0cbaa1034265).</span></span>  
  
 [!code-csharp[WF_Samples#161](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#161)]
 [!code-vb[WF_Samples#161](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultSerializedForm">
      <MemberSignature Language="C#" Value="protected static byte[] GetDefaultSerializedForm (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig unsigned int8[] GetDefaultSerializedForm(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static cli::array &lt;System::Byte&gt; ^ GetDefaultSerializedForm(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="static member GetDefaultSerializedForm : System.Workflow.ComponentModel.Activity -&gt; byte[]" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetDefaultSerializedForm activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="e6447-126">serialize된 형식이 요청되는 <see cref="T:System.Workflow.ComponentModel.Activity" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-126">The <see cref="T:System.Workflow.ComponentModel.Activity" /> whose serialized form is requested.</span></span></param>
        <summary><span data-ttu-id="e6447-127"><see cref="T:System.Workflow.ComponentModel.Activity" />의 serialize된 기본 형식을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-127">Retrieves the serialized default form of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</span></span></summary>
        <returns><span data-ttu-id="e6447-128"><see cref="T:System.Workflow.ComponentModel.Activity" />의 serialize된 기본 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-128">The serialized default form of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIsBlocked">
      <MemberSignature Language="C#" Value="protected internal static bool GetIsBlocked (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig bool GetIsBlocked(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetIsBlocked (rootActivity As Activity) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static bool GetIsBlocked(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetIsBlocked : System.Workflow.ComponentModel.Activity -&gt; bool" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetIsBlocked rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity"><span data-ttu-id="e6447-129">워크플로 인스턴스의 루트 활동입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-129">The root activity of the workflow instance.</span></span></param>
        <summary><span data-ttu-id="e6447-130">지정된 활동의 차단 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-130">Indicates whether the given activity is blocked.</span></span></summary>
        <returns><span data-ttu-id="e6447-131">지정된 활동이 차단되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-131"><see langword="true" /> if the given activity is blocked; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSuspendOrTerminateInfo">
      <MemberSignature Language="C#" Value="protected internal static string GetSuspendOrTerminateInfo (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig string GetSuspendOrTerminateInfo(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetSuspendOrTerminateInfo (rootActivity As Activity) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static System::String ^ GetSuspendOrTerminateInfo(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetSuspendOrTerminateInfo : System.Workflow.ComponentModel.Activity -&gt; string" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetSuspendOrTerminateInfo rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity"><span data-ttu-id="e6447-132">워크플로 인스턴스의 루트 활동입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-132">The root activity of the workflow instance.</span></span></param>
        <summary><span data-ttu-id="e6447-133">지정된 활동의 종료 또는 일시 중단 정보를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-133">Retrieves the termination or suspend information of the given activity.</span></span></summary>
        <returns><span data-ttu-id="e6447-134">종료 또는 일시 중단 정보를 포함하는 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-134">A <see cref="T:System.String" /> that contains the termination or suspend information.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowStatus">
      <MemberSignature Language="C#" Value="protected internal static System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig valuetype System.Workflow.Runtime.WorkflowStatus GetWorkflowStatus(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared Function GetWorkflowStatus (rootActivity As Activity) As WorkflowStatus" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; static System::Workflow::Runtime::WorkflowStatus GetWorkflowStatus(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="static member GetWorkflowStatus : System.Workflow.ComponentModel.Activity -&gt; System.Workflow.Runtime.WorkflowStatus" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity"><span data-ttu-id="e6447-135">워크플로 인스턴스의 루트 활동입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-135">The root activity of the workflow instance.</span></span></param>
        <summary><span data-ttu-id="e6447-136">워크플로의 상태를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-136">Retrieves the status of the workflow.</span></span></summary>
        <returns><span data-ttu-id="e6447-137">워크플로의 상태를 나타내는 <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> 열거형 값입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-137">A <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> enumeration value that denotes the status of the workflow.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCompletedContextActivity">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.ComponentModel.Activity LoadCompletedContextActivity (Guid scopeId, System.Workflow.ComponentModel.Activity outerActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.ComponentModel.Activity LoadCompletedContextActivity(valuetype System.Guid scopeId, class System.Workflow.ComponentModel.Activity outerActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity(System.Guid,System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function LoadCompletedContextActivity (scopeId As Guid, outerActivity As Activity) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::ComponentModel::Activity ^ LoadCompletedContextActivity(Guid scopeId, System::Workflow::ComponentModel::Activity ^ outerActivity);" />
      <MemberSignature Language="F#" Value="abstract member LoadCompletedContextActivity : Guid * System.Workflow.ComponentModel.Activity -&gt; System.Workflow.ComponentModel.Activity" Usage="workflowPersistenceService.LoadCompletedContextActivity (scopeId, outerActivity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeId" Type="System.Guid" />
        <Parameter Name="outerActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="scopeId"><span data-ttu-id="e6447-138">완료된 범위의 <see cref="T:System.Guid" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-138">The <see cref="T:System.Guid" /> of the completed scope.</span></span></param>
        <param name="outerActivity"><span data-ttu-id="e6447-139">완료된 범위를 포함하는 활동을 나타내는 <see cref="T:System.Workflow.ComponentModel.Activity" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-139">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the activity that encloses the completed scope.</span></span></param>
        <summary><span data-ttu-id="e6447-140">파생 클래스에서 구현되는 경우 지정한 완료된 범위를 다시 메모리에 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-140">When implemented in a derived class, loads the specified completed scope back into memory.</span></span></summary>
        <returns><span data-ttu-id="e6447-141">완료된 범위를 나타내는 <see cref="T:System.Workflow.ComponentModel.Activity" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-141">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6447-142">워크플로 런타임 엔진은 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>를 사용하여 보정을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-142">The workflow runtime engine uses <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> to implement compensation.</span></span> <span data-ttu-id="e6447-143">완료된 범위의 동일한 복사본을 복원해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-143">You must restore an identical copy of the completed scope.</span></span> <span data-ttu-id="e6447-144">이렇게 하려면 데이터 저장소에 있는 완료된 범위의 표현에서 올바른 <xref:System.IO.Stream>을 복원해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-144">To do this, you must restore a valid <xref:System.IO.Stream> from your representation of the completed scope in the data store.</span></span> <span data-ttu-id="e6447-145">그런 다음 이 <xref:System.IO.Stream>을 <xref:System.Workflow.ComponentModel.Activity.Load%2A>의 오버로드된 메서드 중 하나로 전달하여 범위의 deserialization을 수행해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-145">Then you must pass this <xref:System.IO.Stream> to one of the overloaded methods of <xref:System.Workflow.ComponentModel.Activity.Load%2A> to perform deserialization of the scope.</span></span>  
  
 <span data-ttu-id="e6447-146">지속성 서비스는 데이터 저장소에서 완료된 범위를 로드할 수 없는 경우 해당 메시지와 함께 <xref:System.Workflow.Runtime.Hosting.PersistenceException>을 throw해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-146">If your persistence service cannot load the completed scope from its data store, it should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate message.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6447-147">다음 예제에서는 `LoadCompletedContextActivity` 메서드의 구현 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-147">The following example demonstrates an implementation of the `LoadCompletedContextActivity` method.</span></span> <span data-ttu-id="e6447-148">이 예제는 FilePersistenceService.cs 파일에 있는 Custom Persistence Service 샘플의 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-148">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="e6447-149">자세한 내용은 [Custom Persistence Service 샘플](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-149">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#269](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#269)]
 [!code-vb[WF_Samples#269](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#269)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Workflow.ComponentModel.Activity LoadWorkflowInstanceState(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Function LoadWorkflowInstanceState (instanceId As Guid) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract System::Workflow::ComponentModel::Activity ^ LoadWorkflowInstanceState(Guid instanceId);" />
      <MemberSignature Language="F#" Value="abstract member LoadWorkflowInstanceState : Guid -&gt; System.Workflow.ComponentModel.Activity" Usage="workflowPersistenceService.LoadWorkflowInstanceState instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId"><span data-ttu-id="e6447-150">워크플로 인스턴스 루트 활동의 <see cref="T:System.Guid" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-150">The <see cref="T:System.Guid" /> of the root activity of the workflow instance.</span></span></param>
        <summary><span data-ttu-id="e6447-151">파생 클래스에서 구현되는 경우 지정된 워크플로 인스턴스 상태를 다시 메모리에 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-151">When implemented in a derived class, loads the specified state of the workflow instance back into memory.</span></span></summary>
        <returns><span data-ttu-id="e6447-152">워크플로 인스턴스의 루트 활동을 나타내는 <see cref="T:System.Workflow.ComponentModel.Activity" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-152">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the root activity of the workflow instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6447-153">활동의 동일한 복사본을 복원해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-153">You must restore an identical copy of the activity.</span></span> <span data-ttu-id="e6447-154">이렇게 하려면 데이터 저장소에 있는 워크플로 인스턴스 표현에서 올바른 <xref:System.IO.Stream>을 복원해야 합니다. 그런 다음 이 <xref:System.IO.Stream>을 오버로드된 <xref:System.Workflow.ComponentModel.Activity.Load%2A> 메서드 중 하나로 전달하여 워크플로 인스턴스 상태를 deserialize해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-154">To do this, you must restore a valid <xref:System.IO.Stream> from your representation of the workflow instance in the data store; then you must pass this <xref:System.IO.Stream> to one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Load%2A> methods to deserialize the workflow instance state.</span></span> <span data-ttu-id="e6447-155">지속성 서비스가 데이터 저장소에서 워크플로 인스턴스 상태를 로드할 수 없는 경우 해당 메시지와 함께 <xref:System.Workflow.Runtime.Hosting.PersistenceException>을 throw해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-155">If your persistence service cannot load the workflow instance state from its data store, it should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate message.</span></span>  
  
 <span data-ttu-id="e6447-156">워크플로 런타임 엔진은 잠금 의미 체계를 구현하여 데이터 저장소에 저장된 워크플로 인스턴스 상태에 대한 액세스를 제한합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-156">The workflow runtime engine implements locking semantics to restrict access to a workflow instance state that is saved in a data store.</span></span> <span data-ttu-id="e6447-157">워크플로 인스턴스 상태는 여러 프로세스에서 실행되는 지속성 서비스로 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-157">This can be accessed by persistence services that run in multiple processes.</span></span> <span data-ttu-id="e6447-158">잠금 의미 체계는 두 개의 다른 프로세스에서 실행되는 지속성 서비스가 동일한 워크플로 인스턴스를 동시에 메모리에 로드할 수 없도록 디자인되었습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-158">The locking semantics are designed to prevent persistence services that run in two different processes from loading the same workflow instance into memory at the same time.</span></span> <span data-ttu-id="e6447-159">지속성 서비스가 지원하도록 디자인된 환경 유형에 따라 이 기능의 지원 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-159">Depending on the type of environment that your persistence service is designed to support, you may choose whether to support this functionality.</span></span> <span data-ttu-id="e6447-160">런타임 잠금 의미 체계를 지원하도록 선택하면 이 워크플로 인스턴스 상태가 이전에 다른 프로세스에서 잠긴 경우 <xref:System.Workflow.Runtime.WorkflowOwnershipException>을 throw해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-160">If you choose to support the runtime locking semantics, and if this workflow instance state has been previously locked by another process, then you should throw a <xref:System.Workflow.Runtime.WorkflowOwnershipException>.</span></span> <span data-ttu-id="e6447-161">그렇지 않으면 데이터 저장소의 워크플로 인스턴스 상태에 대한 액세스를 잠가야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-161">Otherwise, you should lock access to the workflow instance state in your data store.</span></span> <span data-ttu-id="e6447-162"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A>를 호출하거나 unlock 매개 변수를 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>로 설정하고 `true`를 호출하여 워크플로 인스턴스 상태를 잠금 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-162">The workflow instance state can be unlocked by a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState%2A> or a call to <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> with the unlock parameter set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6447-163">다음 예제에서는 `LoadWorkflowInstanceState` 메서드의 구현 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-163">The following example demonstrates an implementation of the `LoadWorkflowInstanceState` method.</span></span> <span data-ttu-id="e6447-164">이 예제는 FilePersistenceService.cs 파일에 있는 Custom Persistence Service 샘플의 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-164">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="e6447-165">자세한 내용은 [Custom Persistence Service 샘플](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-165">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#266](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#266)]
 [!code-vb[WF_Samples#266](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#266)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreFromDefaultSerializedForm">
      <MemberSignature Language="C#" Value="protected static System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm (byte[] activityBytes, System.Workflow.ComponentModel.Activity outerActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Workflow.ComponentModel.Activity RestoreFromDefaultSerializedForm(unsigned int8[] activityBytes, class System.Workflow.ComponentModel.Activity outerActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm(System.Byte[],System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function RestoreFromDefaultSerializedForm (activityBytes As Byte(), outerActivity As Activity) As Activity" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Workflow::ComponentModel::Activity ^ RestoreFromDefaultSerializedForm(cli::array &lt;System::Byte&gt; ^ activityBytes, System::Workflow::ComponentModel::Activity ^ outerActivity);" />
      <MemberSignature Language="F#" Value="static member RestoreFromDefaultSerializedForm : byte[] * System.Workflow.ComponentModel.Activity -&gt; System.Workflow.ComponentModel.Activity" Usage="System.Workflow.Runtime.Hosting.WorkflowPersistenceService.RestoreFromDefaultSerializedForm (activityBytes, outerActivity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityBytes" Type="System.Byte[]" />
        <Parameter Name="outerActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activityBytes"><span data-ttu-id="e6447-166"><see cref="T:System.Workflow.ComponentModel.Activity" />의 serialize된 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-166">The serialized form of <see cref="T:System.Workflow.ComponentModel.Activity" />.</span></span></param>
        <param name="outerActivity"><span data-ttu-id="e6447-167">복원할 <see cref="T:System.Workflow.ComponentModel.Activity" />를 포함하는 외부 <see cref="T:System.Workflow.ComponentModel.Activity" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-167">The outer <see cref="T:System.Workflow.ComponentModel.Activity" />, containing the <see cref="T:System.Workflow.ComponentModel.Activity" /> to restore.</span></span></param>
        <summary><span data-ttu-id="e6447-168">serialize된 형식에서 <see cref="T:System.Workflow.ComponentModel.Activity" />를 복원합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-168">Restores the <see cref="T:System.Workflow.ComponentModel.Activity" /> from its serialized form.</span></span></summary>
        <returns><span data-ttu-id="e6447-169">복원된 <see cref="T:System.Workflow.ComponentModel.Activity" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-169">The restored <see cref="T:System.Workflow.ComponentModel.Activity" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e6447-170">다음 예제에서는 `RestoreFromDefaultSerializedForm` 메서드의 구현 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-170">The following example demonstrates an implementation of the `RestoreFromDefaultSerializedForm` method.</span></span> <span data-ttu-id="e6447-171">이 예제는 FilePersistenceService.cs 파일에 있는 Custom Persistence Service 샘플의 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-171">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="e6447-172">자세한 내용은 [Custom Persistence Service 샘플](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-172">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#269](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#269)]
 [!code-vb[WF_Samples#269](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#269)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCompletedContextActivity">
      <MemberSignature Language="C#" Value="protected internal abstract void SaveCompletedContextActivity (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SaveCompletedContextActivity(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveCompletedContextActivity(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void SaveCompletedContextActivity(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="abstract member SaveCompletedContextActivity : System.Workflow.ComponentModel.Activity -&gt; unit" Usage="workflowPersistenceService.SaveCompletedContextActivity activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="e6447-173">완료된 범위를 나타내는 <see cref="T:System.Workflow.ComponentModel.Activity" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-173">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</span></span></param>
        <summary><span data-ttu-id="e6447-174">파생 클래스에서 구현되는 경우 지정한 완료된 범위를 데이터 저장소에 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-174">When implemented in a derived class, saves the specified completed scope to a data store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6447-175">워크플로 런타임 엔진은 보정을 구현하기 위해 완료된 범위 활동의 상태를 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-175">The workflow runtime engine saves the state of completed scope activities in order to implement compensation.</span></span> <span data-ttu-id="e6447-176">오버로드된 <xref:System.Workflow.ComponentModel.Activity.Save%2A> 메서드 중 하나를 호출하여 `activity`를 <xref:System.IO.Stream>으로 serialize해야 합니다. 그런 다음 데이터 저장소에 쓰기 전에 추가로 <xref:System.IO.Stream>을 처리하도록 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-176">You must call one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Save%2A> methods to serialize `activity` into a <xref:System.IO.Stream>; you may then choose to additionally process the <xref:System.IO.Stream> before writing it to your data store.</span></span> <span data-ttu-id="e6447-177">그러나 워크플로 런타임 엔진이 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>를 호출할 때 활동의 동일한 복사본을 복원해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-177">However, when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>, you must restore an identical copy of the activity.</span></span>  
  
 <span data-ttu-id="e6447-178">워크플로 인스턴스가 완료되거나 종료될 때 데이터 저장소에서 해당 범위를 필요하지 않은 것으로 표시하려면 완료된 범위를 바깥쪽 워크플로 인스턴스와 연결할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-178">You must be able to associate the completed scope with its enclosing workflow instance to mark the scope as unneeded in your data store when the workflow instance finishes or is terminated.</span></span> <span data-ttu-id="e6447-179">따라서 완료된 범위와 연결된 워크플로 인스턴스의 <xref:System.Guid>도 저장해야 합니다. 이 값은 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>와 연결된 <xref:System.Workflow.Runtime.WorkflowInstance>의 `activity` 속성에서 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-179">Therefore, you should also save the <xref:System.Guid> of the workflow instance that is associated with the completed scope; this can be obtained from the <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> property of the <xref:System.Workflow.Runtime.WorkflowInstance> associated with `activity`.</span></span>  
  
 <span data-ttu-id="e6447-180"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A>는 완료된 범위의 <xref:System.Guid>를 매개 변수로 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-180"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadCompletedContextActivity%2A> takes the <xref:System.Guid> of the completed scope as a parameter.</span></span> <span data-ttu-id="e6447-181">따라서 <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A>와 연결된 `activity` 속성도 저장해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-181">Therefore, you must also save the <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid%2A> property associated with `activity`.</span></span> <span data-ttu-id="e6447-182">이 속성은 <xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty>의 `activity` 필드를 통해 참조할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-182">This property can be referenced through the <xref:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty> field of `activity`.</span></span>  
  
 <span data-ttu-id="e6447-183">영속 저장소를 사용하는 지속성 서비스를 구현하는 경우 워크플로 런타임 엔진의 내부 상태와 일관성을 유지하려면 워크플로 트랜잭션 일괄 처리에 참여하여 영속 저장소에 대한 실제 쓰기를 워크플로 커밋 점까지 지연해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-183">If you are implementing a persistence service that uses a durable store, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point.</span></span> <span data-ttu-id="e6447-184">일괄 처리에 참여하려면 데이터베이스에 대해 보류 중인 변경 내용을 나타내는 작업 항목을 <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> 속성에 추가하고 지속성 서비스에 <xref:System.Workflow.Runtime.IPendingWork> 인터페이스를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-184">To participate in batching, add a work item to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> property that represents the pending changes to the database, and implement the <xref:System.Workflow.Runtime.IPendingWork> interface in your persistence service.</span></span>  
  
 <span data-ttu-id="e6447-185">완료된 범위를 데이터 저장소에 저장할 수 없는 경우 해당 오류 메시지와 함께 <xref:System.Workflow.Runtime.Hosting.PersistenceException>을 throw해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-185">If you cannot save the completed scope to your data store, you should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate error message.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6447-186">다음 예제에서는 `SaveCompletedContextActivity` 메서드의 구현 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-186">The following example demonstrates an implementation of the `SaveCompletedContextActivity` method.</span></span> <span data-ttu-id="e6447-187">이 예제는 FilePersistenceService.cs 파일에 있는 Custom Persistence Service 샘플의 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-187">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="e6447-188">자세한 내용은 [Custom Persistence Service 샘플](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-188">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#268](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#268)]
 [!code-vb[WF_Samples#268](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#268)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract void SaveWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity, bool unlock);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SaveWorkflowInstanceState(class System.Workflow.ComponentModel.Activity rootActivity, bool unlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState(System.Workflow.ComponentModel.Activity,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub SaveWorkflowInstanceState (rootActivity As Activity, unlock As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void SaveWorkflowInstanceState(System::Workflow::ComponentModel::Activity ^ rootActivity, bool unlock);" />
      <MemberSignature Language="F#" Value="abstract member SaveWorkflowInstanceState : System.Workflow.ComponentModel.Activity * bool -&gt; unit" Usage="workflowPersistenceService.SaveWorkflowInstanceState (rootActivity, unlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="unlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rootActivity"><span data-ttu-id="e6447-189">워크플로 인스턴스의 루트 활동입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-189">The root activity of the workflow instance.</span></span></param>
        <param name="unlock"><span data-ttu-id="e6447-190">워크플로 인스턴스를 잠그지 않아야 하면 <see langword="true" />이고, 워크플로 인스턴스를 잠가야 하면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-190"><see langword="true" /> if the workflow instance should not be locked; <see langword="false" /> if the workflow instance should be locked.</span></span></param>
        <summary><span data-ttu-id="e6447-191">파생 클래스에서 구현되는 경우 워크플로 인스턴스 상태를 데이터 저장소에 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-191">When implemented in a derived class, saves the workflow instance state to a data store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6447-192">오버로드된 <xref:System.Workflow.ComponentModel.Activity.Save%2A> 메서드 중 하나를 호출하여 `rootActivity`를 <xref:System.IO.Stream>으로 serialize해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-192">You must call one of the overloaded <xref:System.Workflow.ComponentModel.Activity.Save%2A> methods to serialize `rootActivity` into a <xref:System.IO.Stream>.</span></span> <span data-ttu-id="e6447-193">데이터 저장소에 쓰기 전에 <xref:System.IO.Stream>을 추가로 처리하도록 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-193">You can then choose to additionally process the <xref:System.IO.Stream> before writing it to your data store.</span></span> <span data-ttu-id="e6447-194">그러나 워크플로 런타임 엔진이 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>를 호출할 때 루트 활동의 동일한 복사본을 복원해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-194">However, when the workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>, you must restore an identical copy of the root activity.</span></span> <span data-ttu-id="e6447-195">워크플로 인스턴스 상태를 데이터 저장소에 저장할 수 없는 경우 해당 오류 메시지와 함께 <xref:System.Workflow.Runtime.Hosting.PersistenceException>을 throw해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-195">If you cannot save the workflow instance state to your data store, you should throw a <xref:System.Workflow.Runtime.Hosting.PersistenceException> with an appropriate error message.</span></span>  
  
 <span data-ttu-id="e6447-196">워크플로 런타임 엔진은 잠금 의미 체계를 제공하여 데이터 저장소에 저장된 워크플로 인스턴스 상태에 대한 액세스를 제한합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-196">The workflow runtime engine provides locking semantics to restrict access to a workflow instance state that is saved in the data store.</span></span> <span data-ttu-id="e6447-197">워크플로 인스턴스 상태는 호스트에서 실행되고 동일한 데이터 저장소를 가리키는 지속성 서비스로 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-197">This can be accessed by the persistence services running in multiple hosts and pointing to the same data store.</span></span> <span data-ttu-id="e6447-198">잠금 의미 체계는 두 개의 다른 워크플로 런타임에서 실행되는 지속성 서비스가 동일한 워크플로 인스턴스를 동시에 메모리에 로드할 수 없도록 디자인되었습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-198">The locking semantics are designed to prevent persistence services that run in two different workflow runtimes from loading the same workflow instance into memory at the same time.</span></span> <span data-ttu-id="e6447-199">지속성 서비스가 지원하도록 디자인된 환경 유형에 따라 이 기능의 지원 여부를 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-199">Depending on the type of environment your persistence service is designed to support, you can choose whether to support this functionality.</span></span> <span data-ttu-id="e6447-200">런타임 잠금 의미 체계를 지원하도록 선택하면 지속성 서비스가 이전에 다른 지속성 서비스에서 잠긴 워크플로 인스턴스 상태를 저장하려고 시도하는 경우 <xref:System.Workflow.Runtime.WorkflowOwnershipException>을 throw해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-200">If you choose to support the runtime locking semantics, then, if a persistence service tries to save a workflow instance state that has been previously locked by another persistence service, you should throw a <xref:System.Workflow.Runtime.WorkflowOwnershipException>.</span></span> <span data-ttu-id="e6447-201">`unlock`이 `true`이면 저장 후 워크플로 인스턴스 상태에 대한 액세스를 잠금 해제해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-201">If `unlock` is `true`, you should unlock access to the workflow instance state after you save it.</span></span>  
  
 <span data-ttu-id="e6447-202"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A>는 워크플로 인스턴스의 <xref:System.Guid>를 매개 변수로 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-202"><xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.LoadWorkflowInstanceState%2A> takes the <xref:System.Guid> of the workflow instance as a parameter.</span></span> <span data-ttu-id="e6447-203">따라서 이 <xref:System.Guid>를 저장해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-203">Therefore, you should save this <xref:System.Guid>.</span></span> <span data-ttu-id="e6447-204">이 <xref:System.Guid>를 사용하여 워크플로 인스턴스를 완료된 범위의 저장된 상태와 연결할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-204">You can also use this <xref:System.Guid> to associate the workflow instance with the saved states of its completed scopes.</span></span> <span data-ttu-id="e6447-205">워크플로 인스턴스가 완료될 때 완료된 범위를 필요하지 않은 것으로 표시할 수 있으려면 이 작업을 수행해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-205">You must do this because you must be able to mark these completed scopes as unneeded when the workflow instance completes.</span></span>  
  
 <span data-ttu-id="e6447-206">워크플로 런타임 엔진은 워크플로 인스턴스가 최종적으로 완료되거나 종료될 때 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A>를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-206">The workflow runtime engine calls <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> a final time when the workflow instance is completed or terminated.</span></span> <span data-ttu-id="e6447-207">따라서 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A>가 <xref:System.Workflow.Runtime.WorkflowStatus.Completed> 또는 <xref:System.Workflow.Runtime.WorkflowStatus.Terminated>와 같으면 워크플로 인스턴스 및 연결된 모든 완료된 범위를 데이터 저장소에서 안전하게 삭제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-207">Therefore, if <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.GetWorkflowStatus%2A> is equal to <xref:System.Workflow.Runtime.WorkflowStatus.Completed> or <xref:System.Workflow.Runtime.WorkflowStatus.Terminated>, you can safely delete the workflow instance and all its associated completed scopes from your data store.</span></span> <span data-ttu-id="e6447-208">또는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> 또는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> 이벤트를 구독하여 워크플로 인스턴스와 연결된 레코드를 안전하게 삭제할 수 있는 시기를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-208">Alternatively, you can subscribe to the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> or <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> events to determine when it is safe to delete records associated with the workflow instance.</span></span> <span data-ttu-id="e6447-209">실제로 데이터 저장소에서 레코드를 삭제할지 여부는 구현에 따라 달라집니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-209">Whether you actually delete the records from your data store depends on your implementation.</span></span>  
  
 <span data-ttu-id="e6447-210">영속 저장소를 사용하는 지속성 서비스를 구현하는 경우 워크플로 런타임 엔진의 내부 상태와 일관성을 유지하려면 워크플로 트랜잭션 일괄 처리에 참여하여 영속 저장소에 대한 실제 쓰기를 워크플로 커밋 점까지 지연해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-210">If you implement a persistence service that uses a durable store, then, to maintain consistency with the internal state of the workflow runtime engine, you should participate in workflow transaction batching to defer the actual write to your durable store until a workflow commit point.</span></span> <span data-ttu-id="e6447-211">일괄 처리에 참여하려면 영속 저장소에 대해 보류 중인 변경 내용을 나타내는 작업 항목을 <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> 속성에 추가하고 지속성 서비스에 <xref:System.Workflow.Runtime.IPendingWork> 인터페이스를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-211">To participate in batching, add a work item that represents the pending changes to your durable store to the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> property, and implement the <xref:System.Workflow.Runtime.IPendingWork> interface in your persistence service.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6447-212">다음 예제에서는 `SaveWorkflowInstanceState` 메서드의 구현 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-212">The following example demonstrates an implementation of the `SaveWorkflowInstanceState` method.</span></span> <span data-ttu-id="e6447-213">이 예제는 FilePersistenceService.cs 파일에 있는 Custom Persistence Service 샘플의 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-213">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="e6447-214">자세한 내용은 [Custom Persistence Service 샘플](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-214">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#264](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#264)]
 [!code-vb[WF_Samples#264](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#264)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnloadOnIdle">
      <MemberSignature Language="C#" Value="protected internal abstract bool UnloadOnIdle (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool UnloadOnIdle(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract bool UnloadOnIdle(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="abstract member UnloadOnIdle : System.Workflow.ComponentModel.Activity -&gt; bool" Usage="workflowPersistenceService.UnloadOnIdle activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity"><span data-ttu-id="e6447-215">완료된 범위를 나타내는 <see cref="T:System.Workflow.ComponentModel.Activity" />입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-215">An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the completed scope.</span></span></param>
        <summary><span data-ttu-id="e6447-216">워크플로가 유휴 상태일 때 언로드할지 여부를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-216">Determines whether a workflow should be unloaded when idle.</span></span></summary>
        <returns><span data-ttu-id="e6447-217"><see langword="true" />이면 워크플로 런타임 엔진은 지정된 워크플로가 유휴 상태일 때 언로드합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-217">If <see langword="true" />, the workflow runtime engine unloads the specified workflow when it becomes idle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e6447-218">다음 예제에서는 `UnloadOnIdle` 메서드의 구현 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-218">The following example demonstrates an implementation of the `UnloadOnIdle` method.</span></span> <span data-ttu-id="e6447-219">이 예제는 FilePersistenceService.cs 파일에 있는 Custom Persistence Service 샘플의 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-219">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="e6447-220">자세한 내용은 [Custom Persistence Service 샘플](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-220">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#270](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#270)]
 [!code-vb[WF_Samples#270](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#270)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnlockWorkflowInstanceState">
      <MemberSignature Language="C#" Value="protected internal abstract void UnlockWorkflowInstanceState (System.Workflow.ComponentModel.Activity rootActivity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void UnlockWorkflowInstanceState(class System.Workflow.ComponentModel.Activity rootActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnlockWorkflowInstanceState(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend MustOverride Sub UnlockWorkflowInstanceState (rootActivity As Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; abstract void UnlockWorkflowInstanceState(System::Workflow::ComponentModel::Activity ^ rootActivity);" />
      <MemberSignature Language="F#" Value="abstract member UnlockWorkflowInstanceState : System.Workflow.ComponentModel.Activity -&gt; unit" Usage="workflowPersistenceService.UnlockWorkflowInstanceState rootActivity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="rootActivity"><span data-ttu-id="e6447-221">워크플로 인스턴스의 루트 활동입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-221">The root activity of the workflow instance.</span></span></param>
        <summary><span data-ttu-id="e6447-222">파생 클래스에서 재정의되는 경우 워크플로 인스턴스 상태를 잠금 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-222">When overridden in a derived class, unlocks the workflow instance state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6447-223">이 메서드는 추상이므로 잠금 및 잠금 해제에 대한 기본 구현을 포함하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-223">This method is abstract, so it does not contain a default implementation on locking and unlocking.</span></span>  
  
 <span data-ttu-id="e6447-224">사용자 지정 지속성 서비스를 구현하는 동안 잠금 체계를 구현하려면 이 메서드를 재정의하고 unlock 매개 변수의 값을 기반으로 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> 메서드에 잠금-잠금 해제 메커니즘을 제공해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-224">While implementing a custom persistence service, if you want to implement a locking scheme you will need to override this method and provide a locking-unlocking mechanism in the <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.SaveWorkflowInstanceState%2A> method based on the value of the unlock parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6447-225">다음 예제에서는 `UnlockWorkflowInstanceState` 메서드의 구현 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-225">The following example demonstrates an implementation of the `UnlockWorkflowInstanceState` method.</span></span> <span data-ttu-id="e6447-226">이 예제는 FilePersistenceService.cs 파일에 있는 Custom Persistence Service 샘플의 일부입니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-226">This example is from the Custom Persistence Service sample, from the FilePersistenceService.cs file.</span></span> <span data-ttu-id="e6447-227">자세한 내용은 [Custom Persistence Service 샘플](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d)합니다.</span><span class="sxs-lookup"><span data-stu-id="e6447-227">For more information, see [Custom Persistence Service Sample](https://msdn.microsoft.com/library/869dfadf-5298-4551-bc80-f4cf7918729d).</span></span>  
  
 [!code-csharp[WF_Samples#267](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#267)]
 [!code-vb[WF_Samples#267](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#267)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>