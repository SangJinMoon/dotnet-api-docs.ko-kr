<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Cer.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ac470bff59f11addb66604e46af25f3ade4f4d27.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac470bff59f11addb66604e46af25f3ade4f4d27</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.ConstrainedExecution.Cer">
          <source>Specifies a method's behavior when called within a constrained execution region.</source>
          <target state="translated">제약이 있는 실행 영역에서 호출될 때의 메서드 동작을 지정합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.Cer">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.Cer&gt;</ph> enumeration specifies the behavior of a method, type, or assembly within a constrained execution region (CER).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.Cer&gt;</ph> 열거형 메서드, 형식 또는 어셈블리 제약이 있는 실행 영역 (CER) 내에서 동작을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.Cer">
          <source>Use one of the three available values to indicate that the entity will succeed, has no knowledge of a CER, or might (deterministically) be able to report success or failure.</source>
          <target state="translated">엔터티 성공할 지를 나타내기 위해 사용 가능한 세 가지 값 중 하나를 사용 CER를 알지 또는 명확한 성공 또는 실패를 보고 하는 일을 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.Cer">
          <source>A CER provides guarantees that the region of code will execute uninterrupted even if an asynchronous exception such as an aborted thread out-of-memory exception, or stack overflow is raised.</source>
          <target state="translated">CER에서는 코드 영역을 실행 하는 중단 없이 중단 된 스레드 메모리 부족 예외 또는 스택 오버플로 같은 비동기 예외가 발생 하는 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.Cer">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.Cer&gt;</ph> enumeration when specifying a constrained execution region for a method.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.Cer&gt;</ph> 열거형 메서드에 대 한 제약이 있는 실행 영역을 지정 하는 경우.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.Cer">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.%23ctor%2A&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="F:System.Runtime.ConstrainedExecution.Cer.MayFail">
          <source>In the face of exceptional conditions, the method might fail.</source>
          <target state="translated">예외 조건이 발생하면 메서드가 실패할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="F:System.Runtime.ConstrainedExecution.Cer.MayFail">
          <source>In this case, the method will report back to the calling method whether it succeeded or failed.</source>
          <target state="translated">이 경우 해당 메서드는 성공 또는 실패 여부를 호출 메서드에 보고합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="F:System.Runtime.ConstrainedExecution.Cer.MayFail">
          <source>The method must have a CER around the method body to ensure that it can report the return value.</source>
          <target state="translated">메서드에서 반환 값을 보고할 수 있도록 하려면 메서드 본문을 포함하는 CER가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Runtime.ConstrainedExecution.Cer.None">
          <source>The method, type, or assembly has no concept of a CER.</source>
          <target state="translated">메서드, 형식 또는 어셈블리에 CER 개념이 없습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Runtime.ConstrainedExecution.Cer.None">
          <source>It does not take advantage of CER guarantees.</source>
          <target state="translated">CER 보장의 장점을 활용하지 못합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Runtime.ConstrainedExecution.Cer.None">
          <source>This implies the following:</source>
          <target state="translated">이것은 다음을 의미합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.ConstrainedExecution.Cer.None">
          <source>In the face of exceptional conditions the method might fail.</source>
          <target state="translated">예외 조건이 발생할 때 메서드가 실패할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.ConstrainedExecution.Cer.None">
          <source>The method might or might not report that it failed (it is non-deterministic).</source>
          <target state="translated">메서드가 실패를 보고 하지 않을 수도 (이 명확 하지 않은).</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.ConstrainedExecution.Cer.None">
          <source>The method is not written with CERs in mind (which is the most likely scenario).</source>
          <target state="translated">메서드 (즉, 가장 가능성이 높은 시나리오) 염두에서 cer 기록 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.ConstrainedExecution.Cer.None">
          <source>If a method, type, or assembly is not explicitly marked to succeed, it is implicitly marked as <ph id="ph1">`Cer.None`</ph>.</source>
          <target state="translated">암시적으로 표시는 메서드, 형식 또는 어셈블리에 성공 하려면 명시적으로 표시 되지 않으면, <ph id="ph1">`Cer.None`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="F:System.Runtime.ConstrainedExecution.Cer.Success">
          <source>In the face of exceptional conditions, the method is guaranteed to succeed.</source>
          <target state="translated">예외 조건이 발생해도 메서드가 성공합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="F:System.Runtime.ConstrainedExecution.Cer.Success">
          <source>You should always construct a CER around the method that is called, even when it is called from within a non-CER region.</source>
          <target state="translated">CER가 아닌 영역에서 메서드가 호출되는 경우라도 CER에서 이 메서드를 포함하도록 구성해야 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.Runtime.ConstrainedExecution.Cer.Success">
          <source>A method is successful if it accomplishes what is intended.</source>
          <target state="translated">메서드가 의도한 작업을 수행하는 경우 작업에 성공합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Runtime.ConstrainedExecution.Cer.Success">
          <source>For example, marking <ph id="ph1">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph> with <bpt id="p1">&lt;c&gt;</bpt>ReliabilityContractAttribute(Cer.Success)<ept id="p1">&lt;/c&gt;</ept> implies that when it is run under a CER, it always returns a count of the number of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph> and it can never leave the internal fields in an undetermined state.</source>
          <target state="translated">예를 들어, <ph id="ph1">&lt;see cref="P:System.Collections.ArrayList.Count" /&gt;</ph>를 <bpt id="p1">&lt;c&gt;</bpt>ReliabilityContractAttribute(Cer.Success)<ept id="p1">&lt;/c&gt;</ept>로 표시하면 이 속성은 CER에서 실행될 때 항상 <ph id="ph2">&lt;see cref="T:System.Collections.ArrayList" /&gt;</ph>에 있는 요소의 개수를 반환하며 내부 필드를 결정되지 않은 상태로 두지 않습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>