<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CriticalFinalizerObject.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f1d2facb08d43ad654cb2b085fefa826d0c99cd7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f1d2facb08d43ad654cb2b085fefa826d0c99cd7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>Ensures that all finalization code in derived classes is marked as critical.</source>
          <target state="translated">파생 클래스의 모든 종료 코드가 결정적인 것으로 표시되도록 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>Classes deriving from the <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject&gt;</ph> class are implicitly treated as a constrained execution region (CER).</source>
          <target state="translated">클래스에서 파생 되는 <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject&gt;</ph> 클래스 제약이 있는 실행 영역 (CER)로 암시적으로 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>This requires code in the finalizer to only call code with a strong reliability contract.</source>
          <target state="translated">이 코드에만 강력한 안정성 계약을 사용 하 여 코드를 호출 하면 종료 자가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>For more information about CERs, see the <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution&gt;</ph> namespace.</source>
          <target state="translated">Cer에 대 한 자세한 내용은 참조는 <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution&gt;</ph> 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>In classes derived from the <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject&gt;</ph> class, the common language runtime (CLR) guarantees that all critical finalization code will be given the opportunity to execute, provided the finalizer follows the rules for a CER, even in situations where the CLR forcibly unloads an application domain or aborts a thread.</source>
          <target state="translated">파생 된 클래스에는 <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject&gt;</ph> 모든 중요 한 종료 코드 지정 것을 수 있는 기회를, 종료자 상황 에서도 CER에 대 한 규칙을 따릅니다. 제공 된 클래스, 공용 언어 런타임 (CLR) 보장 있는 CLR 강제로 응용 프로그램 도메인을 언로드합니다 또는 스레드를 중단 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>If a finalizer violates the rules for a CER, it might not successfully execute.</source>
          <target state="translated">종료자 CER에 대 한 규칙을 위반 하면 것 하지 성공적으로 실행 될 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>In addition, the CLR establishes a weak ordering among normal and critical finalizers: for objects reclaimed by garbage collection at the same time, all the noncritical finalizers are called before any of the critical finalizers.</source>
          <target state="translated">또한 CLR와 중요 한 종료자 간에 약한 순서를 설정: 하지 동시에 가비지 수집에서 회수 된 개체에 대해 이전에 중요 한 종료 자가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>For example, a class such as <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>, which holds data in the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class that is derived from <ph id="ph3">&lt;xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject&gt;</ph>, can run a standard finalizer to flush out existing buffered data.</source>
          <target state="translated">예를 들어와 같은 클래스 <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph>의 데이터가 들어 있는 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> 클래스에서 파생 된 <ph id="ph3">&lt;xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject&gt;</ph>, 버퍼링 된 기존 데이터를 플러시할 수 표준 종료자를 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>In most cases, you do not need to write classes that derive from the <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject&gt;</ph> class.</source>
          <target state="translated">대부분의 경우에서 않아도에서 파생 되는 클래스를 작성 하는 <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>The .NET Framework class library provides two classes, <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.CriticalHandle&gt;</ph>, that provide critical finalization functionality for handle resources.</source>
          <target state="translated">.NET Framework 클래스 라이브러리는 두 개의 클래스를 제공 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.CriticalHandle&gt;</ph>, 핸들 리소스에 대 한 중요 한 종료 기능을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>Furthermore, the .NET Framework provides a set of prewritten classes derived from the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class, and this set is located in the <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles&gt;</ph> namespace.</source>
          <target state="translated">.NET Framework에서 파생 된 미리 작성 된 클래스의 집합을 제공 하는 또한는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> 집합과이 집합에는 <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles&gt;</ph> 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>These classes are designed to provide common functionality for supporting file and operating system handles.</source>
          <target state="translated">이러한 클래스는 파일 및 운영 체제 핸들을 지원 하기 위한 공통 기능을 제공 하도록 설계 되었습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>The following code example shows the use of the <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph> class to provide critical finalization for the standard input and output streams.</source>
          <target state="translated">다음 코드 예제에서는 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph> 표준 입력 및 출력 스트림에 대 한 중요 한 종료를 제공 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>The <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph>, derived from the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class, is passed to the file stream in the <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph>에서 파생 된는 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> 클래스, 파일 스트림에 전달 되는 <ph id="ph3">&lt;xref:System.IO.FileStream&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">관리 되지 않는 코드를 호출할 수 있는 권한입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">보안 동작: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>for full trust for inheritors.</source>
          <target state="translated">상속자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
          <source>This class cannot be used by partially trusted code.</source>
          <target state="translated">이 클래스는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.#ctor">
          <source>for permission to call unmanaged code.</source>
          <target state="translated">관리 되지 않는 코드를 호출할 수 있는 권한입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.#ctor">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">보안 동작: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.#ctor">
          <source>for full trust for inheritors.</source>
          <target state="translated">상속자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.#ctor">
          <source>This class cannot be used by partially trusted code.</source>
          <target state="translated">이 클래스는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.Finalize">
          <source>Releases all the resources used by the <ph id="ph1">&lt;see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /&gt;</ph> 클래스에서 사용하는 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.Finalize">
          <source>The finalizer for any types deriving from <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject&gt;</ph> is given the opportunity to execute and will not be aborted, assuming the finalizer correctly follows the rules for a constrained execution region (CER).</source>
          <target state="translated">파생 된 모든 형식에 대 한 종료자 <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject&gt;</ph> 제공할지 기회를 실행 하 고 되지 중단 되며 종료자 올바르게 제약이 있는 실행 영역 (CER)에 대 한 규칙을 따르는 것으로 가정 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>