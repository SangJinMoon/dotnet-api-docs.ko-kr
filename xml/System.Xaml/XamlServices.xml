<Type Name="XamlServices" FullName="System.Xaml.XamlServices">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9e1f1d48af20e3873a75e26dc3e1e7ba760293b7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720597" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class XamlServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit XamlServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlServices" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlServices abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>serialization 목적을 위해 XAML을 읽고 개체 그래프를 작성하거나 개체 그래프를 읽고 XAML 파일 출력을 작성하는 일반적인 XAML 작업에 대한 보다 높은 수준의 서비스(정적 메서드)를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모드는 <xref:System.Xaml.XamlServices> 읽기 및 쓰기 XAML 판독기 및 XAML 작성기의 인스턴스를 만드는 시나리오를 사용 하는 가장 일반적인 XAML에 사용 되는 클래스입니다. 이러한 판독기와 작성기는 공용 클래스의 특수 하지만 내부 구현을 같은 <xref:System.Xml.XmlReader>, <xref:System.Xaml.XamlXmlReader>, 및 <xref:System.Xaml.XamlObjectWriter>합니다. 사용 하도록 <xref:System.Xaml.XamlServices> 대부분의 시나리오에 대 한 원하는 결과를 얻으려면 기본 내부 구현에 의존할 수 있습니다. 더 특수 한 시나리오에 대 한 판독기와 작성기를 직접 정의 및 오버 로드에 대 한 인수로 전달 합니다 수는 <xref:System.Xaml.XamlServices> 메서드.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> 가 권장 XAML 읽기 나 아닌 XAML 기록 API WPF 정의 형식을 처리 하는 경우 설정 또는 WPF 기반 형식이 있습니다. 에 대 한 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 사용, 사용 하 여 <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> 읽거나 XAML (또는 BAML); 로드에 대 한 및 <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> XAML을 작성 하는 것에 대 한 합니다. 이러한 클래스.NET Framework XAML 서비스 Api는 XAML 판독기 및 XAML 작성기에서에서 내부적으로 사용의 구현을 제공 합니다. 그러나 또한 제공 지원 및 XAML 스키마 컨텍스트 특수 종속성 속성과 WPF 알려진 형식에 대 한 최적화 같은 WPF 관련 개념에 대 한 합니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XAML 판독기의 소스를 로드하고 출력을 개체 그래프로 기록합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">입력으로 로드할 스트림입니다.</param>
        <summary>XAML 판독기의 <see cref="T:System.IO.Stream" /> 소스를 로드하고 출력을 개체 그래프로 기록합니다.</summary>
        <returns>출력으로 기록되는 개체 그래프입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 다른 서명을 <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> 메서드는 여러 다른 유형의 XAML 소스에 대 한 입력을 지정 합니다. <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> 내부 구현 먼저 만듭니다는 <xref:System.Xml.XmlReader> 호출 하 여 <xref:System.Xml.XmlReader.Create%28System.IO.Stream%29> 다음 이라는 특수의 새 인스턴스를 만듭니다 <xref:System.Xaml.XamlReader> 입력을 처리 하 합니다.  
  
 에 대 한 순서 대로 <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> 를 성공적으로 시작 하 여 개체 그래프를 만들 때 호출할 다음 참 이어야 합니다.  
  
-   소스 형식이 올바른 xml입니다.  
  
-   유효한 XAML 언어 수준에서 때문입니다.  
  
-   원본에 지정 된 XAML 형식을 XAML 관련 XAML 네임 스페이스의 지원 형식을 확인 해야 합니다. 예를 들어 XAML;에 지정 된 대로 WPF는 XAML 네임 스페이스 WPF 네임 스페이스에 대 한 XAML 형식이 확인할 수 있습니다. 프로젝트에 포함 되거나 런타임에;에서 사용할 수 있는 WPF 어셈블리 이어야 합니다. 등에입니다.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> 처리 하는 경우 XAML 쓰기 API 설정 또는 권장된 XAML 읽기 않습니다 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 형식 또는 형식에 따라 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]합니다. 에 대 한 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 사용, 사용 하 여 <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> 읽기 또는 XAML; 로드 및 <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> XAML을 작성 하는 것에 대 한 합니다. 그러나 이러한 클래스를 사용 하 여 <xref:System.Xaml> ;의 구현에서 내부적으로 Api을 지원 합니다 XAML 읽기 및 쓰기, 종속성 속성에 대 한 최적화 등의 특성에 영향을 주는 WPF 관련 개념에 대 한 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader">생성된 <see cref="T:System.IO.TextReader" />에 대한 기반으로 사용할 <see cref="T:System.Xml.XmlReader" />입니다.</param>
        <summary>
          <see cref="T:System.IO.TextReader" />에서 XAML 판독기를 만들고 개체 그래프를 반환합니다.</summary>
        <returns>반환되는 개체 그래프입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 개체 그래프를 반환 하기 위해는 `textReader` 입력은 관련 입력을 사용 하 여 생성 해야 합니다. 예를 들어 전달 해야는 <xref:System.IO.StringReader> 에 대 한 올바른 문자열로 XAML 입력을 사용 하 여 생성 하는 <xref:System.IO.StringReader.%23ctor%28System.String%29> 생성자입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textReader" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (fileName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">로드하고 소스로 사용할 파일 이름입니다.</param>
        <summary>XAML 판독기의 <see cref="T:System.IO.Stream" /> 소스를 로드하고 개체 그래프를 반환합니다.</summary>
        <returns>반환되는 개체 그래프입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 다른 서명을 <xref:System.Xaml.XamlServices.Load%2A> 메서드는 여러 다른 유형의 XAML 소스에 대 한 입력을 지정 합니다. <xref:System.Xaml.XamlServices.Load%2A> 내부 구현 먼저 만듭니다는 <xref:System.Xml.XmlReader> 호출 하 여 <xref:System.Xml.XmlReader.Create%28System.String%29> 다음 이라는 특수의 새 인스턴스를 만듭니다 <xref:System.Xaml.XamlReader> 입력을 처리 하 합니다.  
  
 에 대 한 순서 대로 <xref:System.Xaml.XamlServices.Load%28System.String%29> 를 성공적으로 시작 하 여 개체 그래프를 만들 때 호출할 다음 참 이어야 합니다.  
  
-   소스 형식이 올바른 xml입니다.  
  
-   유효한 XAML 언어 수준에서 때문입니다.  
  
-   원본에 지정 된 XAML 형식을 XAML 관련 XAML 네임 스페이스의 지원 형식을 확인 해야 합니다. 예를 들어 XAML;에 지정 된 대로 WPF는 XAML 네임 스페이스 WPF 네임 스페이스에 대 한 XAML 형식이 확인할 수 있습니다. WPF의 어셈블리는 프로젝트에 포함 되어야 합니다 또는 런타임;에서 사용할 수 등에입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> 입력은 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader xamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader xamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ xamlReader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="xamlReader">이 <see langword="Load" /> 작업에 대한 판독기로 사용할 XAML 판독기 구현입니다.</param>
        <summary>특정 XAML 판독기 구현을 로드하고 개체 그래프를 반환합니다.</summary>
        <returns>반환되는 개체 그래프입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 다음과 같은 경우에만이 서명을 사용 해야 합니다.  
  
-   사용자 지정 구현을 정의 <xref:System.Xaml.XamlReader>합니다.  
  
-   에 대 한 설정을 지정는 <xref:System.Xaml.XamlReader> 기본 설정과에서 다른 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlReader" /> 입력은 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader xmlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader xmlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ xmlReader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="xmlReader">이 <see langword="Load" /> 작업에 대한 판독기로 사용할 <see cref="T:System.Xml.XmlReader" /> 구현입니다.</param>
        <summary>특정 XML 판독기 구현을 로드하고 개체 그래프를 반환합니다.</summary>
        <returns>출력 개체 그래프입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 지정 구현을 정의 하는 경우에이 서명을 일반적으로 사용 해야는 <xref:System.Xml.XmlReader>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlReader" /> 입력은 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xaml);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xaml) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xaml As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xaml);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xaml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xaml">구문 분석할 XAML 문자열 입력입니다.</param>
        <summary>XAML을 문자열 출력으로 읽고 개체 그래프를 반환합니다.</summary>
        <returns>반환되는 개체 그래프입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 되려면에서는 <xref:System.Xaml.XamlServices.Parse%2A> 개체 트리를 성공적으로 호출, 다음 참 이어야 합니다.  
  
-   `xaml` 입력이 올바른 형식의 올바른 xml입니다.  
  
-   `xaml` 입력이 올바른 XAML 언어 수준에서 합니다.  
  
-   에 지정 된 XAML 형식을 `xaml` 입력 지원 관련 XAML 네임 스페이스의 형식으로 확인 해야 합니다. 예를 들어 XAML;에 지정 된 대로 WPF는 XAML 네임 스페이스 WPF 네임 스페이스에 대 한 XAML 형식이 확인할 수 있습니다. WPF의 어셈블리는 프로젝트에 포함 되어야 합니다 또는 런타임;에서 사용할 수 등에입니다.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> 처리 하는 경우 XAML 쓰기 API 설정 또는 권장된 XAML 읽기 않습니다 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 형식 또는 형식에 따라 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]합니다. 에 대 한 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 사용, 사용 하 여 <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> 읽기 또는 XAML을 로드 하 고 <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> XAML을 작성 하는 것에 대 한 합니다. 그러나 이러한 클래스를 사용 하 여 <xref:System.Xaml> ;의 구현에서 내부적으로 Api을 지원 합니다 XAML 읽기 및 쓰기, 종속성 속성에 대 한 최적화 등의 특성에 영향을 주는 WPF 관련 개념에 대 한 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xaml" /> 입력은 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 serialization을 위한 출력 형식으로 처리합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static string Save (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Save(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Save (instance As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Save(System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">처리할 개체 그래프의 루트입니다.</param>
        <summary>제공된 개체 트리를 XAML 노드 표현으로 처리하고 출력 XAML의 문자열 표현을 반환합니다.</summary>
        <returns>문자열로 표시되는 XAML 태그 출력입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 출력은는 `ToString` 의 결과 <xref:System.Xml.XmlWriter> 메서드 호출에 의해 만들어집니다. <xref:System.Xml.XmlWriter> 다음 설정을 사용 하 여 만든: <xref:System.Xml.XmlWriterSettings.Indent%2A?displayProperty=nameWithType> 은 `true`; 및 <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A?displayProperty=nameWithType> 은 `true`합니다.  
  
 반환 된 문자열을 통해 유효한 XML로 로드할 수 있습니다는 <xref:System.Xml.XmlReader.Create%2A> 처리할 경우 문자열을 스트림 또는 보다 구체적으로 전용된 판독기에 XAML을 위한 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.IO.Stream stream, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.IO.Stream stream, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::IO::Stream ^ stream, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="stream">대상 스트림입니다.</param>
        <param name="instance">처리할 개체 그래프의 루트입니다.</param>
        <summary>제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 serialization을 위한 출력 스트림으로 처리합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> 처리 하는 경우 XAML 쓰기 API 설정 또는 권장된 XAML 읽기 않습니다 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 형식 또는 형식에 따라 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]합니다. 에 대 한 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 사용, 사용 하 여 <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> 읽기 또는 XAML; 로드 및 <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> XAML을 작성 하는 것에 대 한 합니다. 그러나 이러한 클래스를 사용 하 여 <xref:System.Xaml> ;의 구현에서 내부적으로 Api을 지원 합니다 XAML 읽기 및 쓰기, 종속성 속성에 대 한 최적화 등의 특성에 영향을 주는 WPF 관련 개념에 대 한 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 입력은 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.IO.TextWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.IO.TextWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As TextWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::IO::TextWriter ^ writer, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">출력을 작성하는 <see cref="T:System.IO.TextWriter" />입니다.</param>
        <param name="instance">처리할 개체 그래프의 루트입니다.</param>
        <summary>제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 <see cref="T:System.IO.TextWriter" />로 이동하는 출력으로 처리합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> 입력은 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (string fileName, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(string fileName, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (fileName As String, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::String ^ fileName, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fileName">출력을 작성할 파일의 이름과 위치입니다.</param>
        <param name="instance">처리할 개체 그래프의 루트입니다.</param>
        <summary>제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 위치의 출력 파일에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `fileName` 매개 변수 값으로 사용 됩니다는 `outputFileName` 에 대 한 호출에 대 한 입력 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>, 만듦는 <xref:System.Xml.XmlWriter> 메서드 호출의 일부로 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileName" />이 빈 문자열인 경우</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.Xaml.XamlWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.Xaml.XamlWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As XamlWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::Xaml::XamlWriter ^ writer, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xaml.XamlWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">사용할 <see cref="T:System.Xaml.XamlWriter" /> 구현입니다.</param>
        <param name="instance">처리할 개체 그래프의 루트입니다.</param>
        <summary>제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 XAML 작성기에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 다음과 같은 경우에만이 서명을 사용 해야 합니다.  
  
-   사용자 지정 구현을 정의 <xref:System.Xaml.XamlWriter>합니다.  
  
-   에 대 한 설정을 지정는 <xref:System.Xaml.XamlWriter> 기본 설정과에서 다른 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> 입력은 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.Xml.XmlWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.Xml.XmlWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As XmlWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::Xml::XmlWriter ^ writer, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">사용할 <see cref="T:System.Xml.XmlWriter" /> 구현입니다.</param>
        <param name="instance">처리할 개체 그래프의 루트입니다.</param>
        <summary>제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 <see cref="T:System.Xml.XmlWriter" />에 씁니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> 입력은 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>공통 XAML 노드 집합 매개자를 사용하기 위해 <see cref="T:System.Xaml.XamlReader" /> 및 <see cref="T:System.Xaml.XamlWriter" />를 연결합니다. 제공된 판독기와 작성기의 유형에 따라 콘텐츠를 잠재적으로 변환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static void Transform (System.Xaml.XamlReader xamlReader, System.Xaml.XamlWriter xamlWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Transform(class System.Xaml.XamlReader xamlReader, class System.Xaml.XamlWriter xamlWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Transform(System::Xaml::XamlReader ^ xamlReader, System::Xaml::XamlWriter ^ xamlWriter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
        <Parameter Name="xamlWriter" Type="System.Xaml.XamlWriter" />
      </Parameters>
      <Docs>
        <param name="xamlReader">사용할 <see cref="T:System.Xaml.XamlReader" /> 구현입니다.</param>
        <param name="xamlWriter">사용할 <see cref="T:System.Xaml.XamlWriter" />입니다.</param>
        <summary>
          <see cref="T:System.Xaml.XamlReader" /> 및 <see cref="T:System.Xaml.XamlWriter" />를 연결하여 공통 XAML 노드 집합 매개자를 사용합니다. 제공된 판독기와 작성기의 유형에 따라 콘텐츠를 잠재적으로 변환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 주변 <xref:System.Xaml.XamlServices.Transform%28System.Xaml.XamlReader%2CSystem.Xaml.XamlWriter%2CSystem.Boolean%29>여기서 `closeWriter` 로 지정 된 `true`합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlReader" /> 또는 <paramref name="xamlWriter" /> 입력이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xaml.XamlException">XAML 스키마 컨텍스트가 제공된 <paramref name="xamlReader" /> 및 <paramref name="xamlWriter" /> 사이에 일치하지 않습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static void Transform (System.Xaml.XamlReader xamlReader, System.Xaml.XamlWriter xamlWriter, bool closeWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Transform(class System.Xaml.XamlReader xamlReader, class System.Xaml.XamlWriter xamlWriter, bool closeWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Transform(System::Xaml::XamlReader ^ xamlReader, System::Xaml::XamlWriter ^ xamlWriter, bool closeWriter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
        <Parameter Name="xamlWriter" Type="System.Xaml.XamlWriter" />
        <Parameter Name="closeWriter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="xamlReader">사용할 <see cref="T:System.Xaml.XamlReader" /> 구현입니다.</param>
        <param name="xamlWriter">사용할 <see cref="T:System.Xaml.XamlWriter" />입니다.</param>
        <param name="closeWriter">
          호출이 완료된 후에 작성기를 닫으면 <see langword="true" />이고, 작성된 마지막 쓰기 위치에 활성 상태로 두면 <see langword="false" />입니다.</param>
        <summary>
          <see cref="T:System.Xaml.XamlReader" /> 및 <see cref="T:System.Xaml.XamlWriter" />를 연결하여 공통 XAML 노드 집합 매개자를 사용합니다. 제공된 판독기와 작성기의 유형에 따라 콘텐츠를 잠재적으로 변환합니다. 호출이 완료된 후에 작성기를 닫을지 여부를 지정하기 위한 매개 변수를 제공합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlReader" /> 또는 <paramref name="xamlWriter" /> 입력이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xaml.XamlException">XAML 스키마 컨텍스트가 제공된 <paramref name="xamlReader" /> 및 <paramref name="xamlWriter" /> 사이에 일치하지 않습니다.</exception>
      </Docs>
    </Member>
  </Members>
</Type>