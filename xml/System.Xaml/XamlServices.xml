<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlServices.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59e1f1d48af20e3873a75e26dc3e1e7ba760293b7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e1f1d48af20e3873a75e26dc3e1e7ba760293b7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlServices">
          <source>Provides higher-level services (static methods) for the common XAML tasks of reading XAML and writing an object graph; or reading an object graph and writing XAML file output for serialization purposes.</source>
          <target state="translated">serialization 목적을 위해 XAML을 읽고 개체 그래프를 작성하거나 개체 그래프를 읽고 XAML 파일 출력을 작성하는 일반적인 XAML 작업에 대한 보다 높은 수준의 서비스(정적 메서드)를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlServices">
          <source>The modes of the <ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> class that are used in the most common XAML reading and writing scenarios rely on creating instances of XAML readers and XAML writers.</source>
          <target state="translated">모드는 <ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> 읽기 및 쓰기 XAML 판독기 및 XAML 작성기의 인스턴스를 만드는 시나리오를 사용 하는 가장 일반적인 XAML에 사용 되는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlServices">
          <source>These readers and writers are specialized but internal implementations of public classes, such as <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>.</source>
          <target state="translated">이러한 판독기와 작성기는 공용 클래스의 특수 하지만 내부 구현을 같은 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlServices">
          <source>To use <ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> for most scenarios, you can rely on the default internal implementations to obtain the results that you want.</source>
          <target state="translated">사용 하도록 <ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> 대부분의 시나리오에 대 한 원하는 결과를 얻으려면 기본 내부 구현에 의존할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlServices">
          <source>For more specialized scenarios, you might define readers and writers yourself, and then pass them as arguments for overloads of the <ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> methods.</source>
          <target state="translated">더 특수 한 시나리오에 대 한 판독기와 작성기를 직접 정의 및 오버 로드에 대 한 인수로 전달 합니다 수는 <ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlServices">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> is not the recommended XAML reading or XAML writing API set if you are processing WPF-defined types, or types based on WPF.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> 가 권장 XAML 읽기 나 아닌 XAML 기록 API WPF 정의 형식을 처리 하는 경우 설정 또는 WPF 기반 형식이 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlServices">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> usage, use <ph id="ph2">&lt;xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType&gt;</ph> for reading or loading XAML (or BAML); and <ph id="ph3">&lt;xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType&gt;</ph> for writing back XAML.</source>
          <target state="translated">에 대 한 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 사용, 사용 하 여 <ph id="ph2">&lt;xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType&gt;</ph> 읽거나 XAML (또는 BAML); 로드에 대 한 및 <ph id="ph3">&lt;xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType&gt;</ph> XAML을 작성 하는 것에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlServices">
          <source>These classes use .NET Framework XAML Services APIs and the XAML readers and XAML writers internally in their implementation; however, they also provide support and specialized XAML schema context for WPF-specific concepts, such as optimizations for dependency properties and WPF known types.</source>
          <target state="translated">이러한 클래스.NET Framework XAML 서비스 Api는 XAML 판독기 및 XAML 작성기에서에서 내부적으로 사용의 구현을 제공 합니다. 그러나 또한 제공 지원 및 XAML 스키마 컨텍스트 특수 종속성 속성과 WPF 알려진 형식에 대 한 최적화 같은 WPF 관련 개념에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlServices">
          <source>Loads source for a XAML reader and writes its output as an object graph.</source>
          <target state="translated">XAML 판독기의 소스를 로드하고 출력을 개체 그래프로 기록합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
          <source>The stream to load as input.</source>
          <target state="translated">입력으로 로드할 스트림입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
          <source>Loads a <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> source for a XAML reader and writes its output as an object graph.</source>
          <target state="translated">XAML 판독기의 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 소스를 로드하고 출력을 개체 그래프로 기록합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
          <source>The object graph that is written as output.</source>
          <target state="translated">출력으로 기록되는 개체 그래프입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
          <source>Different signatures for the <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29&gt;</ph> method specify different types of input for the source XAML.</source>
          <target state="translated">에 대 한 다른 서명을 <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29&gt;</ph> 메서드는 여러 다른 유형의 XAML 소스에 대 한 입력을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29&gt;</ph> internal implementation first creates an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> by calling <ph id="ph3">&lt;xref:System.Xml.XmlReader.Create%28System.IO.Stream%29&gt;</ph> and then creates a new instance of a specialized <ph id="ph4">&lt;xref:System.Xaml.XamlReader&gt;</ph> that processes the input.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29&gt;</ph> 내부 구현 먼저 만듭니다는 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> 호출 하 여 <ph id="ph3">&lt;xref:System.Xml.XmlReader.Create%28System.IO.Stream%29&gt;</ph> 다음 이라는 특수의 새 인스턴스를 만듭니다 <ph id="ph4">&lt;xref:System.Xaml.XamlReader&gt;</ph> 입력을 처리 하 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
          <source>In order for the <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29&gt;</ph> call to successfully create an object graph, the following must be true:</source>
          <target state="translated">에 대 한 순서 대로 <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29&gt;</ph> 를 성공적으로 시작 하 여 개체 그래프를 만들 때 호출할 다음 참 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
          <source>The source is well-formed and valid XML.</source>
          <target state="translated">소스 형식이 올바른 xml입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
          <source>The source is valid XAML at the language level.</source>
          <target state="translated">유효한 XAML 언어 수준에서 때문입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
          <source>The XAML types that are specified in the source XAML must resolve to backing types in the relevant XAML namespaces.</source>
          <target state="translated">원본에 지정 된 XAML 형식을 XAML 관련 XAML 네임 스페이스의 지원 형식을 확인 해야 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
          <source>For example, XAML types for WPF namespaces can resolve to a WPF XAML namespace as specified in the XAML; the assemblies for WPF must be included in the project or available in the run time; and so on.</source>
          <target state="translated">예를 들어 XAML;에 지정 된 대로 WPF는 XAML 네임 스페이스 WPF 네임 스페이스에 대 한 XAML 형식이 확인할 수 있습니다. 프로젝트에 포함 되거나 런타임에;에서 사용할 수 있는 WPF 어셈블리 이어야 합니다. 등에입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> is not the recommended XAML reading or XAML writing API set if you are processing <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> types, or types based on <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> 처리 하는 경우 XAML 쓰기 API 설정 또는 권장된 XAML 읽기 않습니다 <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 형식 또는 형식에 따라 <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> usage, use <ph id="ph2">&lt;xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType&gt;</ph> for reading or loading XAML; and <ph id="ph3">&lt;xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType&gt;</ph> for writing back XAML.</source>
          <target state="translated">에 대 한 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 사용, 사용 하 여 <ph id="ph2">&lt;xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType&gt;</ph> 읽기 또는 XAML; 로드 및 <ph id="ph3">&lt;xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType&gt;</ph> XAML을 작성 하는 것에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
          <source>These classes use <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> APIs internally in their implementation; however, they also provide support for WPF-specific concepts that influence the nature of XAML reading and writing, such as optimizations for dependency properties.</source>
          <target state="translated">그러나 이러한 클래스를 사용 하 여 <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> ;의 구현에서 내부적으로 Api을 지원 합니다 XAML 읽기 및 쓰기, 종속성 속성에 대 한 최적화 등의 특성에 영향을 주는 WPF 관련 개념에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.IO.TextReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> to use as the basis for the created <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>.</source>
          <target state="translated">생성된 <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>에 대한 기반으로 사용할 <ph id="ph2">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.IO.TextReader)">
          <source>Creates a XAML reader from a <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>, and returns an object graph.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>에서 XAML 판독기를 만들고 개체 그래프를 반환합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.IO.TextReader)">
          <source>The object graph that is returned.</source>
          <target state="translated">반환되는 개체 그래프입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.IO.TextReader)">
          <source>In order to return the object graph, the <ph id="ph1">`textReader`</ph> input should be constructed by using its relevant input.</source>
          <target state="translated">개체 그래프를 반환 하기 위해는 <ph id="ph1">`textReader`</ph> 입력은 관련 입력을 사용 하 여 생성 해야 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.IO.TextReader)">
          <source>For example, it should pass a <ph id="ph1">&lt;xref:System.IO.StringReader&gt;</ph> that is constructed by using a valid XAML-as-string input for the <ph id="ph2">&lt;xref:System.IO.StringReader.%23ctor%28System.String%29&gt;</ph> constructor.</source>
          <target state="translated">예를 들어 전달 해야는 <ph id="ph1">&lt;xref:System.IO.StringReader&gt;</ph> 에 대 한 올바른 문자열로 XAML 입력을 사용 하 여 생성 하는 <ph id="ph2">&lt;xref:System.IO.StringReader.%23ctor%28System.String%29&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.IO.TextReader)">
          <source><ph id="ph1">&lt;paramref name="textReader" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="textReader" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.String)">
          <source>The file name to load and use as source.</source>
          <target state="translated">로드하고 소스로 사용할 파일 이름입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.String)">
          <source>Loads a <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> source for a XAML reader and returns an object graph.</source>
          <target state="translated">XAML 판독기의 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 소스를 로드하고 개체 그래프를 반환합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.String)">
          <source>The object graph that is returned.</source>
          <target state="translated">반환되는 개체 그래프입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.String)">
          <source>Different signatures for the <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%2A&gt;</ph> method specify different types of input for the source XAML.</source>
          <target state="translated">에 대 한 다른 서명을 <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%2A&gt;</ph> 메서드는 여러 다른 유형의 XAML 소스에 대 한 입력을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%2A&gt;</ph> internal implementation first creates an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> by calling <ph id="ph3">&lt;xref:System.Xml.XmlReader.Create%28System.String%29&gt;</ph> and then creates a new instance of a specialized <ph id="ph4">&lt;xref:System.Xaml.XamlReader&gt;</ph> that processes the input.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%2A&gt;</ph> 내부 구현 먼저 만듭니다는 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> 호출 하 여 <ph id="ph3">&lt;xref:System.Xml.XmlReader.Create%28System.String%29&gt;</ph> 다음 이라는 특수의 새 인스턴스를 만듭니다 <ph id="ph4">&lt;xref:System.Xaml.XamlReader&gt;</ph> 입력을 처리 하 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.String)">
          <source>In order for the <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%28System.String%29&gt;</ph> call to successfully create an object graph, the following must be true:</source>
          <target state="translated">에 대 한 순서 대로 <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%28System.String%29&gt;</ph> 를 성공적으로 시작 하 여 개체 그래프를 만들 때 호출할 다음 참 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.String)">
          <source>The source is well-formed and valid XML.</source>
          <target state="translated">소스 형식이 올바른 xml입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.String)">
          <source>The source is valid XAML at the language level.</source>
          <target state="translated">유효한 XAML 언어 수준에서 때문입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.String)">
          <source>The XAML types that are specified in the source XAML must resolve to backing types in the relevant XAML namespaces.</source>
          <target state="translated">원본에 지정 된 XAML 형식을 XAML 관련 XAML 네임 스페이스의 지원 형식을 확인 해야 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.String)">
          <source>For example, XAML types for WPF namespaces can resolve to a WPF XAML namespace as specified in the XAML; the assemblies for WPF must be included in the project or be available in the run time; and so on.</source>
          <target state="translated">예를 들어 XAML;에 지정 된 대로 WPF는 XAML 네임 스페이스 WPF 네임 스페이스에 대 한 XAML 형식이 확인할 수 있습니다. WPF의 어셈블리는 프로젝트에 포함 되어야 합니다 또는 런타임;에서 사용할 수 등에입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.String)">
          <source><ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> input is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> 입력은 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
          <source>The XAML reader implementation to use as the reader for this <ph id="ph1">&lt;see langword="Load" /&gt;</ph> operation.</source>
          <target state="translated">이 <ph id="ph1">&lt;see langword="Load" /&gt;</ph> 작업에 대한 판독기로 사용할 XAML 판독기 구현입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
          <source>Loads a specific XAML reader implementation and returns an object graph.</source>
          <target state="translated">특정 XAML 판독기 구현을 로드하고 개체 그래프를 반환합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
          <source>The object graph that is returned.</source>
          <target state="translated">반환되는 개체 그래프입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
          <source>You should typically use this signature only in the following cases:</source>
          <target state="translated">일반적으로 다음과 같은 경우에만이 서명을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
          <source>You defined your own implementation of a <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>.</source>
          <target state="translated">사용자 지정 구현을 정의 <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
          <source>You specified settings for a <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> that differ from the default settings.</source>
          <target state="translated">에 대 한 설정을 지정는 <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> 기본 설정과에서 다른 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
          <source><ph id="ph1">&lt;paramref name="xamlReader" /&gt;</ph> input is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xamlReader" /&gt;</ph> 입력은 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> implementation to use as the reader for this <ph id="ph2">&lt;see langword="Load" /&gt;</ph> operation.</source>
          <target state="translated">이 <ph id="ph2">&lt;see langword="Load" /&gt;</ph> 작업에 대한 판독기로 사용할 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)">
          <source>Loads a specific XML reader implementation and returns an object graph.</source>
          <target state="translated">특정 XML 판독기 구현을 로드하고 개체 그래프를 반환합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)">
          <source>The output object graph.</source>
          <target state="translated">출력 개체 그래프입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)">
          <source>You should typically use this signature only if you defined your own implementation of a <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">사용자 지정 구현을 정의 하는 경우에이 서명을 일반적으로 사용 해야는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)">
          <source><ph id="ph1">&lt;paramref name="xamlReader" /&gt;</ph> input is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xamlReader" /&gt;</ph> 입력은 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Parse(System.String)">
          <source>The XAML string input to parse.</source>
          <target state="translated">구문 분석할 XAML 문자열 입력입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Parse(System.String)">
          <source>Reads XAML as string output and returns an object graph.</source>
          <target state="translated">XAML을 문자열 출력으로 읽고 개체 그래프를 반환합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Parse(System.String)">
          <source>The object graph that is returned.</source>
          <target state="translated">반환되는 개체 그래프입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Parse(System.String)">
          <source>In order for the <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Parse%2A&gt;</ph> call to successfully create an object tree, the following must be true:</source>
          <target state="translated">되려면에서는 <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Parse%2A&gt;</ph> 개체 트리를 성공적으로 호출, 다음 참 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Parse(System.String)">
          <source>The <ph id="ph1">`xaml`</ph> input is well-formed and valid XML.</source>
          <target state="translated"><ph id="ph1">`xaml`</ph> 입력이 올바른 형식의 올바른 xml입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Parse(System.String)">
          <source>The <ph id="ph1">`xaml`</ph> input is valid XAML at the language level.</source>
          <target state="translated"><ph id="ph1">`xaml`</ph> 입력이 올바른 XAML 언어 수준에서 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Parse(System.String)">
          <source>The XAML types that are specified in the <ph id="ph1">`xaml`</ph> input must resolve to backing types in the relevant XAML namespaces.</source>
          <target state="translated">에 지정 된 XAML 형식을 <ph id="ph1">`xaml`</ph> 입력 지원 관련 XAML 네임 스페이스의 형식으로 확인 해야 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Parse(System.String)">
          <source>For example, XAML types for a WPF namespace can resolve to a WPF XAML namespace as specified in the XAML; the assemblies for WPF must be included in the project or be available in the run time; and so on.</source>
          <target state="translated">예를 들어 XAML;에 지정 된 대로 WPF는 XAML 네임 스페이스 WPF 네임 스페이스에 대 한 XAML 형식이 확인할 수 있습니다. WPF의 어셈블리는 프로젝트에 포함 되어야 합니다 또는 런타임;에서 사용할 수 등에입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Parse(System.String)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> is not the recommended XAML reading or XAML writing API set if you are processing <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> types, or types based on <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> 처리 하는 경우 XAML 쓰기 API 설정 또는 권장된 XAML 읽기 않습니다 <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 형식 또는 형식에 따라 <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Parse(System.String)">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> usage, use <ph id="ph2">&lt;xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType&gt;</ph> for reading or loading XAML, and <ph id="ph3">&lt;xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType&gt;</ph> for writing back XAML.</source>
          <target state="translated">에 대 한 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 사용, 사용 하 여 <ph id="ph2">&lt;xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType&gt;</ph> 읽기 또는 XAML을 로드 하 고 <ph id="ph3">&lt;xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType&gt;</ph> XAML을 작성 하는 것에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Parse(System.String)">
          <source>These classes use <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> APIs internally in their implementation; however, they also provide support for WPF-specific concepts that influence the nature of XAML reading and writing, such as optimizations for dependency properties.</source>
          <target state="translated">그러나 이러한 클래스를 사용 하 여 <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> ;의 구현에서 내부적으로 Api을 지원 합니다 XAML 읽기 및 쓰기, 종속성 속성에 대 한 최적화 등의 특성에 영향을 주는 WPF 관련 개념에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Parse(System.String)">
          <source><ph id="ph1">&lt;paramref name="xaml" /&gt;</ph> input is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xaml" /&gt;</ph> 입력은 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlServices">
          <source>Processes a provided object graph into a XAML node representation and then into an output format for serialization.</source>
          <target state="translated">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 serialization을 위한 출력 형식으로 처리합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.Object)">
          <source>The root of the object graph to process.</source>
          <target state="translated">처리할 개체 그래프의 루트입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.Object)">
          <source>Processes a provided object tree into a XAML node representation, and returns a string representation of the output XAML.</source>
          <target state="translated">제공된 개체 트리를 XAML 노드 표현으로 처리하고 출력 XAML의 문자열 표현을 반환합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.Object)">
          <source>The XAML markup output as a string.</source>
          <target state="translated">문자열로 표시되는 XAML 태그 출력입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Save(System.Object)">
          <source>The output from this method is the <ph id="ph1">`ToString`</ph> result of an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> that is created by the method call.</source>
          <target state="translated">이 메서드는 출력은는 <ph id="ph1">`ToString`</ph> 의 결과 <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> 메서드 호출에 의해 만들어집니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Save(System.Object)">
          <source>That <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> is created by using the following settings: <ph id="ph2">&lt;xref:System.Xml.XmlWriterSettings.Indent%2A?displayProperty=nameWithType&gt;</ph> is <ph id="ph3">`true`</ph>; and <ph id="ph4">&lt;xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A?displayProperty=nameWithType&gt;</ph> is <ph id="ph5">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 다음 설정을 사용 하 여 만든: <ph id="ph2">&lt;xref:System.Xml.XmlWriterSettings.Indent%2A?displayProperty=nameWithType&gt;</ph> 은 <ph id="ph3">`true`</ph>; 및 <ph id="ph4">&lt;xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A?displayProperty=nameWithType&gt;</ph> 은 <ph id="ph5">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Save(System.Object)">
          <source>The returned string can be loaded as valid XML through the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> method if you processed the string into a stream, or into a reader more specifically dedicated for XAML.</source>
          <target state="translated">반환 된 문자열을 통해 유효한 XML로 로드할 수 있습니다는 <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> 처리할 경우 문자열을 스트림 또는 보다 구체적으로 전용된 판독기에 XAML을 위한 메서드.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
          <source>The destination stream.</source>
          <target state="translated">대상 스트림입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
          <source>The root of the object graph to process.</source>
          <target state="translated">처리할 개체 그래프의 루트입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
          <source>Processes a provided object graph into a XAML node representation and then into an output stream for serialization.</source>
          <target state="translated">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 serialization을 위한 출력 스트림으로 처리합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> is not the recommended XAML reading or XAML writing API set if you are processing <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> types, or types based on <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> 처리 하는 경우 XAML 쓰기 API 설정 또는 권장된 XAML 읽기 않습니다 <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> 형식 또는 형식에 따라 <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> usage, use <ph id="ph2">&lt;xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType&gt;</ph> for reading or loading XAML; and <ph id="ph3">&lt;xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType&gt;</ph> for writing back XAML.</source>
          <target state="translated">에 대 한 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 사용, 사용 하 여 <ph id="ph2">&lt;xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType&gt;</ph> 읽기 또는 XAML; 로드 및 <ph id="ph3">&lt;xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType&gt;</ph> XAML을 작성 하는 것에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
          <source>These classes use <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> APIs internally in their implementation; however, they also provide support for WPF-specific concepts that influence the nature of XAML reading and writing, such as optimizations for dependency properties.</source>
          <target state="translated">그러나 이러한 클래스를 사용 하 여 <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> ;의 구현에서 내부적으로 Api을 지원 합니다 XAML 읽기 및 쓰기, 종속성 속성에 대 한 최적화 등의 특성에 영향을 주는 WPF 관련 개념에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> input is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> 입력은 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that writes the output.</source>
          <target state="translated">출력을 작성하는 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)">
          <source>The root of the object graph to process.</source>
          <target state="translated">처리할 개체 그래프의 루트입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)">
          <source>Processes a provided object graph into a XAML node representation and then into an output that goes to the provided <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</source>
          <target state="translated">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>로 이동하는 출력으로 처리합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)">
          <source><ph id="ph1">&lt;paramref name="writer" /&gt;</ph> input is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="writer" /&gt;</ph> 입력은 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.String,System.Object)">
          <source>The name and location of the file to write the output to.</source>
          <target state="translated">출력을 작성할 파일의 이름과 위치입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.String,System.Object)">
          <source>The root of the object graph to process.</source>
          <target state="translated">처리할 개체 그래프의 루트입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.String,System.Object)">
          <source>Processes a provided object graph into a XAML node representation and then writes it to an output file at a provided location.</source>
          <target state="translated">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 위치의 출력 파일에 씁니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Save(System.String,System.Object)">
          <source>The <ph id="ph1">`fileName`</ph> parameter value is used as the <ph id="ph2">`outputFileName`</ph> input for a call to <ph id="ph3">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>, which creates a <ph id="ph4">&lt;xref:System.Xml.XmlWriter&gt;</ph> as part of the method call.</source>
          <target state="translated"><ph id="ph1">`fileName`</ph> 매개 변수 값으로 사용 됩니다는 <ph id="ph2">`outputFileName`</ph> 에 대 한 호출에 대 한 입력 <ph id="ph3">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>, 만듦는 <ph id="ph4">&lt;xref:System.Xml.XmlWriter&gt;</ph> 메서드 호출의 일부로 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.String,System.Object)">
          <source><ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> is an empty string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fileName" /&gt;</ph>이 빈 문자열인 경우</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.String,System.Object)">
          <source><ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fileName" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph> implementation to use.</source>
          <target state="translated">사용할 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
          <source>The root of the object graph to process.</source>
          <target state="translated">처리할 개체 그래프의 루트입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
          <source>Processes a provided object graph into a XAML node representation and then writes it to the provided XAML writer.</source>
          <target state="translated">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 XAML 작성기에 씁니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
          <source>You should typically use this signature only in the following cases:</source>
          <target state="translated">일반적으로 다음과 같은 경우에만이 서명을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
          <source>You defined your own implementation of a <ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph>.</source>
          <target state="translated">사용자 지정 구현을 정의 <ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
          <source>You specified settings for the <ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph> that differ from the default settings.</source>
          <target state="translated">에 대 한 설정을 지정는 <ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph> 기본 설정과에서 다른 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
          <source><ph id="ph1">&lt;paramref name="writer" /&gt;</ph> input is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="writer" /&gt;</ph> 입력은 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> implementation to use.</source>
          <target state="translated">사용할 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)">
          <source>The root of the object graph to process.</source>
          <target state="translated">처리할 개체 그래프의 루트입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)">
          <source>Processes a provided object graph into a XAML node representation and then writes it to the provided <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>에 씁니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)">
          <source><ph id="ph1">&lt;paramref name="writer" /&gt;</ph> input is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="writer" /&gt;</ph> 입력은 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlServices">
          <source>Connects a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> and a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph> in order to use a common XAML node set intermediary.</source>
          <target state="translated">공통 XAML 노드 집합 매개자를 사용하기 위해 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph>를 연결합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlServices">
          <source>Potentially transforms the content, depending on the types of readers and writers that are provided.</source>
          <target state="translated">제공된 판독기와 작성기의 유형에 따라 콘텐츠를 잠재적으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> implementation to use.</source>
          <target state="translated">사용할 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph> to use.</source>
          <target state="translated">사용할 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
          <source>Connects a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> and a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph> to use a common XAML node set intermediary.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph>를 연결하여 공통 XAML 노드 집합 매개자를 사용합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
          <source>Potentially transforms the content, depending on the types of readers and writers that are provided.</source>
          <target state="translated">제공된 판독기와 작성기의 유형에 따라 콘텐츠를 잠재적으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
          <source>This method is a wrapper around <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Transform%28System.Xaml.XamlReader%2CSystem.Xaml.XamlWriter%2CSystem.Boolean%29&gt;</ph>, where <ph id="ph2">`closeWriter`</ph> is specified as <ph id="ph3">`true`</ph>.</source>
          <target state="translated">이 메서드는 주변 <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Transform%28System.Xaml.XamlReader%2CSystem.Xaml.XamlWriter%2CSystem.Boolean%29&gt;</ph>여기서 <ph id="ph2">`closeWriter`</ph> 로 지정 된 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
          <source><ph id="ph1">&lt;paramref name="xamlReader" /&gt;</ph> or <ph id="ph2">&lt;paramref name="xamlWriter" /&gt;</ph> input is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xamlReader" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="xamlWriter" /&gt;</ph> 입력이 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
          <source>The XAML schema context does not match between the provided <ph id="ph1">&lt;paramref name="xamlReader" /&gt;</ph> and <ph id="ph2">&lt;paramref name="xamlWriter" /&gt;</ph>.</source>
          <target state="translated">XAML 스키마 컨텍스트가 제공된 <ph id="ph1">&lt;paramref name="xamlReader" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="xamlWriter" /&gt;</ph> 사이에 일치하지 않습니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> implementation to use.</source>
          <target state="translated">사용할 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph> to use.</source>
          <target state="translated">사용할 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to close the writer after the call is complete; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to leave the writer active at the last written position.</source>
          <target state="translated">호출이 완료된 후에 작성기를 닫으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 작성된 마지막 쓰기 위치에 활성 상태로 두면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
          <source>Connects a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> and a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph> to use a common XAML node set intermediary.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlWriter" /&gt;</ph>를 연결하여 공통 XAML 노드 집합 매개자를 사용합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
          <source>Potentially transforms the content, depending on the types of readers and writers that are provided.</source>
          <target state="translated">제공된 판독기와 작성기의 유형에 따라 콘텐츠를 잠재적으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
          <source>Provides a parameter for specifying whether to close the writer after the call is completed.</source>
          <target state="translated">호출이 완료된 후에 작성기를 닫을지 여부를 지정하기 위한 매개 변수를 제공합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="xamlReader" /&gt;</ph> or <ph id="ph2">&lt;paramref name="xamlWriter" /&gt;</ph> input is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xamlReader" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="xamlWriter" /&gt;</ph> 입력이 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
          <source>The XAML schema context does not match between the provided <ph id="ph1">&lt;paramref name="xamlReader" /&gt;</ph> and <ph id="ph2">&lt;paramref name="xamlWriter" /&gt;</ph>.</source>
          <target state="translated">XAML 스키마 컨텍스트가 제공된 <ph id="ph1">&lt;paramref name="xamlReader" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="xamlWriter" /&gt;</ph> 사이에 일치하지 않습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>