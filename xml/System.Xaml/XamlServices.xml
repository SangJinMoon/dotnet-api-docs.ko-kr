<Type Name="XamlServices" FullName="System.Xaml.XamlServices">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b34e14110aa65e54e7ebad88c3081a75a17bdd15" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39796876" /></Metadata><TypeSignature Language="C#" Value="public static class XamlServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit XamlServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlServices" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlServices abstract sealed" />
  <TypeSignature Language="F#" Value="type XamlServices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="7f244-101">serialization 목적을 위해 XAML을 읽고 개체 그래프를 작성하거나 개체 그래프를 읽고 XAML 파일 출력을 작성하는 일반적인 XAML 작업에 대한 보다 높은 수준의 서비스(정적 메서드)를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-101">Provides higher-level services (static methods) for the common XAML tasks of reading XAML and writing an object graph; or reading an object graph and writing XAML file output for serialization purposes.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f244-102">모드는 <xref:System.Xaml.XamlServices> 읽기 및 쓰기 XAML 판독기 및 XAML 작성기의 인스턴스를 만드는 시나리오를 사용 하는 가장 일반적인 XAML에 사용 되는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-102">The modes of the <xref:System.Xaml.XamlServices> class that are used in the most common XAML reading and writing scenarios rely on creating instances of XAML readers and XAML writers.</span></span> <span data-ttu-id="7f244-103">이러한 판독기와 작성기는 공용 클래스의 특수화 되어 있지만 내부 구현을 같은 <xref:System.Xml.XmlReader>, <xref:System.Xaml.XamlXmlReader>, 및 <xref:System.Xaml.XamlObjectWriter>합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-103">These readers and writers are specialized but internal implementations of public classes, such as <xref:System.Xml.XmlReader>, <xref:System.Xaml.XamlXmlReader>, and <xref:System.Xaml.XamlObjectWriter>.</span></span> <span data-ttu-id="7f244-104">사용할 <xref:System.Xaml.XamlServices> 대부분의 시나리오에서 원하는 결과 얻으려면 기본 내부 구현에 의존할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-104">To use <xref:System.Xaml.XamlServices> for most scenarios, you can rely on the default internal implementations to obtain the results that you want.</span></span> <span data-ttu-id="7f244-105">보다 전문화 된 시나리오에 대 한 판독기 및 작성기를 직접 정의 및 오버 로드에 대 한 인수로 전달할 수는 <xref:System.Xaml.XamlServices> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7f244-105">For more specialized scenarios, you might define readers and writers yourself, and then pass them as arguments for overloads of the <xref:System.Xaml.XamlServices> methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7f244-106"><xref:System.Xaml.XamlServices> 가 권장 되는 XAML 읽기 또는 XAML 쓰고 WPF에 정의 된 형식을 처리 하는 경우 설정 하는 API 또는 WPF 기반 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-106"><xref:System.Xaml.XamlServices> is not the recommended XAML reading or XAML writing API set if you are processing WPF-defined types, or types based on WPF.</span></span> <span data-ttu-id="7f244-107">에 대 한 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 사용량을 사용 하 여 <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> 읽거나 XAML (또는 BAML)를 로드 하 고 <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> XAML 쓰기 저장에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-107">For [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] usage, use <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> for reading or loading XAML (or BAML); and <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> for writing back XAML.</span></span> <span data-ttu-id="7f244-108">이러한 클래스.NET Framework XAML 서비스 Api 및 XAML 판독기 및 XAML 작성기에서에서 내부적으로 사용 해당 구현을 제공 합니다. 그러나 또한 제공 지원과 특수 한 XAML 스키마 컨텍스트 종속성 속성 및 WPF 알려진 형식에 대 한 최적화와 같은 WPF 관련 개념에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-108">These classes use .NET Framework XAML Services APIs and the XAML readers and XAML writers internally in their implementation; however, they also provide support and specialized XAML schema context for WPF-specific concepts, such as optimizations for dependency properties and WPF known types.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7f244-109">XAML 판독기의 소스를 로드하고 출력을 개체 그래프로 기록합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-109">Loads source for a XAML reader and writes its output as an object graph.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; obj" Usage="System.Xaml.XamlServices.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="7f244-110">입력으로 로드할 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-110">The stream to load as input.</span></span></param>
        <summary><span data-ttu-id="7f244-111">XAML 판독기의 <see cref="T:System.IO.Stream" /> 소스를 로드하고 출력을 개체 그래프로 기록합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-111">Loads a <see cref="T:System.IO.Stream" /> source for a XAML reader and writes its output as an object graph.</span></span></summary>
        <returns><span data-ttu-id="7f244-112">출력으로 기록되는 개체 그래프입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-112">The object graph that is written as output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f244-113">에 대 한 다른 시그니처를 <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> 메서드는 다양 한 원본 XAML에 대 한 입력을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-113">Different signatures for the <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> method specify different types of input for the source XAML.</span></span> <span data-ttu-id="7f244-114">합니다 <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> 내부 구현을 먼저 만듭니다는 <xref:System.Xml.XmlReader> 호출 하 여 <xref:System.Xml.XmlReader.Create%28System.IO.Stream%29> 은 특수화 된의 새 인스턴스를 만듭니다 <xref:System.Xaml.XamlReader> 입력을 처리 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-114">The <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> internal implementation first creates an <xref:System.Xml.XmlReader> by calling <xref:System.Xml.XmlReader.Create%28System.IO.Stream%29> and then creates a new instance of a specialized <xref:System.Xaml.XamlReader> that processes the input.</span></span>  
  
 <span data-ttu-id="7f244-115">되려면에서는 <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> 성공적으로 개체 그래프를 만들기 위해 호출, 다음 true 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-115">In order for the <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> call to successfully create an object graph, the following must be true:</span></span>  
  
-   <span data-ttu-id="7f244-116">소스 형식이 올바른 xml입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-116">The source is well-formed and valid XML.</span></span>  
  
-   <span data-ttu-id="7f244-117">유효한 XAML 언어 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-117">The source is valid XAML at the language level.</span></span>  
  
-   <span data-ttu-id="7f244-118">원본에 지정 된 XAML 형식을 XAML 관련 XAML 네임 스페이스의 백업 형식에 해결 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-118">The XAML types that are specified in the source XAML must resolve to backing types in the relevant XAML namespaces.</span></span> <span data-ttu-id="7f244-119">예를 들어 WPF 네임 스페이스에 대 한 XAML 형식 XAML;에 지정 된 대로 WPF XAML 네임 스페이스에 해결할 수 있습니다. WPF에 대 한 어셈블리를 프로젝트에 포함 또는 런타임;에서 사용할 수 있는 여야 합니다. 등에입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-119">For example, XAML types for WPF namespaces can resolve to a WPF XAML namespace as specified in the XAML; the assemblies for WPF must be included in the project or available in the run time; and so on.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7f244-120"><xref:System.Xaml.XamlServices> 권장 되는 XAML 읽기 아니거나 API를 작성 하는 XAML 처리 하는 경우 설정 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 형식 또는 형식에 따라 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-120"><xref:System.Xaml.XamlServices> is not the recommended XAML reading or XAML writing API set if you are processing [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] types, or types based on [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="7f244-121">에 대 한 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 사용량을 사용 하 여 <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> 읽거나; XAML 로드 및 <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> XAML 쓰기 저장에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-121">For [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] usage, use <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> for reading or loading XAML; and <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> for writing back XAML.</span></span> <span data-ttu-id="7f244-122">그러나 이러한 클래스를 사용 하 여 <xref:System.Xaml> ; 구현에서 내부적으로 Api 제공 지원 XAML 읽기 및 쓰기 종속성 속성에 대 한 최적화 등의 특성에 영향을 주는 WPF 관련 개념에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-122">These classes use <xref:System.Xaml> APIs internally in their implementation; however, they also provide support for WPF-specific concepts that influence the nature of XAML reading and writing, such as optimizations for dependency properties.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f244-123"><paramref name="stream" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="7f244-123"><paramref name="stream" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.TextReader -&gt; obj" Usage="System.Xaml.XamlServices.Load textReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader"><span data-ttu-id="7f244-124">생성된 <see cref="T:System.IO.TextReader" />에 대한 기반으로 사용할 <see cref="T:System.Xml.XmlReader" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-124">The <see cref="T:System.IO.TextReader" /> to use as the basis for the created <see cref="T:System.Xml.XmlReader" />.</span></span></param>
        <summary><span data-ttu-id="7f244-125"><see cref="T:System.IO.TextReader" />에서 XAML 판독기를 만들고 개체 그래프를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-125">Creates a XAML reader from a <see cref="T:System.IO.TextReader" />, and returns an object graph.</span></span></summary>
        <returns><span data-ttu-id="7f244-126">반환되는 개체 그래프입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-126">The object graph that is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f244-127">개체 그래프를 반환 하기 위해는 `textReader` 관련 입력을 사용 하 여 입력을 생성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-127">In order to return the object graph, the `textReader` input should be constructed by using its relevant input.</span></span> <span data-ttu-id="7f244-128">예를 들어 전달 해야는 <xref:System.IO.StringReader> 에 대 한 올바른 문자열로 XAML 입력을 사용 하 여 생성 된는 <xref:System.IO.StringReader.%23ctor%28System.String%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-128">For example, it should pass a <xref:System.IO.StringReader> that is constructed by using a valid XAML-as-string input for the <xref:System.IO.StringReader.%23ctor%28System.String%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f244-129"><paramref name="textReader" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="7f244-129"><paramref name="textReader" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (fileName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="static member Load : string -&gt; obj" Usage="System.Xaml.XamlServices.Load fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="7f244-130">로드하고 소스로 사용할 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-130">The file name to load and use as source.</span></span></param>
        <summary><span data-ttu-id="7f244-131">XAML 판독기의 <see cref="T:System.IO.Stream" /> 소스를 로드하고 개체 그래프를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-131">Loads a <see cref="T:System.IO.Stream" /> source for a XAML reader and returns an object graph.</span></span></summary>
        <returns><span data-ttu-id="7f244-132">반환되는 개체 그래프입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-132">The object graph that is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f244-133">에 대 한 다른 시그니처를 <xref:System.Xaml.XamlServices.Load%2A> 메서드는 다양 한 원본 XAML에 대 한 입력을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-133">Different signatures for the <xref:System.Xaml.XamlServices.Load%2A> method specify different types of input for the source XAML.</span></span> <span data-ttu-id="7f244-134">합니다 <xref:System.Xaml.XamlServices.Load%2A> 내부 구현을 먼저 만듭니다는 <xref:System.Xml.XmlReader> 호출 하 여 <xref:System.Xml.XmlReader.Create%28System.String%29> 은 특수화 된의 새 인스턴스를 만듭니다 <xref:System.Xaml.XamlReader> 입력을 처리 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-134">The <xref:System.Xaml.XamlServices.Load%2A> internal implementation first creates an <xref:System.Xml.XmlReader> by calling <xref:System.Xml.XmlReader.Create%28System.String%29> and then creates a new instance of a specialized <xref:System.Xaml.XamlReader> that processes the input.</span></span>  
  
 <span data-ttu-id="7f244-135">되려면에서는 <xref:System.Xaml.XamlServices.Load%28System.String%29> 성공적으로 개체 그래프를 만들기 위해 호출, 다음 true 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-135">In order for the <xref:System.Xaml.XamlServices.Load%28System.String%29> call to successfully create an object graph, the following must be true:</span></span>  
  
-   <span data-ttu-id="7f244-136">소스 형식이 올바른 xml입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-136">The source is well-formed and valid XML.</span></span>  
  
-   <span data-ttu-id="7f244-137">유효한 XAML 언어 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-137">The source is valid XAML at the language level.</span></span>  
  
-   <span data-ttu-id="7f244-138">원본에 지정 된 XAML 형식을 XAML 관련 XAML 네임 스페이스의 백업 형식에 해결 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-138">The XAML types that are specified in the source XAML must resolve to backing types in the relevant XAML namespaces.</span></span> <span data-ttu-id="7f244-139">예를 들어 WPF 네임 스페이스에 대 한 XAML 형식 XAML;에 지정 된 대로 WPF XAML 네임 스페이스에 해결할 수 있습니다. WPF에 대 한 어셈블리를 프로젝트에 포함 해야 합니다 또는 런타임;에서 사용할 수 있습니다. 등에입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-139">For example, XAML types for WPF namespaces can resolve to a WPF XAML namespace as specified in the XAML; the assemblies for WPF must be included in the project or be available in the run time; and so on.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f244-140"><paramref name="fileName" /> 입력은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-140"><paramref name="fileName" /> input is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader xamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader xamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ xamlReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xaml.XamlReader -&gt; obj" Usage="System.Xaml.XamlServices.Load xamlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="xamlReader"><span data-ttu-id="7f244-141">이 <see langword="Load" /> 작업에 대한 판독기로 사용할 XAML 판독기 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-141">The XAML reader implementation to use as the reader for this <see langword="Load" /> operation.</span></span></param>
        <summary><span data-ttu-id="7f244-142">특정 XAML 판독기 구현을 로드하고 개체 그래프를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-142">Loads a specific XAML reader implementation and returns an object graph.</span></span></summary>
        <returns><span data-ttu-id="7f244-143">반환되는 개체 그래프입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-143">The object graph that is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f244-144">다음 경우에만이 시그니처를 사용 하면 일반적으로 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-144">You should typically use this signature only in the following cases:</span></span>  
  
-   <span data-ttu-id="7f244-145">고유한 구현을 정의 <xref:System.Xaml.XamlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-145">You defined your own implementation of a <xref:System.Xaml.XamlReader>.</span></span>  
  
-   <span data-ttu-id="7f244-146">에 대 한 설정을 지정 하는 <xref:System.Xaml.XamlReader> 기본 설정과에서 다른 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-146">You specified settings for a <xref:System.Xaml.XamlReader> that differ from the default settings.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f244-147"><paramref name="xamlReader" /> 입력은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-147"><paramref name="xamlReader" /> input is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader xmlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader xmlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ xmlReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; obj" Usage="System.Xaml.XamlServices.Load xmlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="xmlReader"><span data-ttu-id="7f244-148">이 <see langword="Load" /> 작업에 대한 판독기로 사용할 <see cref="T:System.Xml.XmlReader" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-148">The <see cref="T:System.Xml.XmlReader" /> implementation to use as the reader for this <see langword="Load" /> operation.</span></span></param>
        <summary><span data-ttu-id="7f244-149">특정 XML 판독기 구현을 로드하고 개체 그래프를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-149">Loads a specific XML reader implementation and returns an object graph.</span></span></summary>
        <returns><span data-ttu-id="7f244-150">출력 개체 그래프입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-150">The output object graph.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f244-151">고유한 구현을 정의 하는 경우에이 시그니처를 일반적으로 사용 해야는 <xref:System.Xml.XmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-151">You should typically use this signature only if you defined your own implementation of a <xref:System.Xml.XmlReader>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f244-152"><paramref name="xamlReader" /> 입력은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-152"><paramref name="xamlReader" /> input is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xaml);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xaml) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xaml As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xaml);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; obj" Usage="System.Xaml.XamlServices.Parse xaml" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xaml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xaml"><span data-ttu-id="7f244-153">구문 분석할 XAML 문자열 입력입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-153">The XAML string input to parse.</span></span></param>
        <summary><span data-ttu-id="7f244-154">XAML을 문자열 출력으로 읽고 개체 그래프를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-154">Reads XAML as string output and returns an object graph.</span></span></summary>
        <returns><span data-ttu-id="7f244-155">반환되는 개체 그래프입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-155">The object graph that is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f244-156">되려면에서는 <xref:System.Xaml.XamlServices.Parse%2A> 성공적으로 개체 트리를 만들기 위해 호출, 다음 true 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-156">In order for the <xref:System.Xaml.XamlServices.Parse%2A> call to successfully create an object tree, the following must be true:</span></span>  
  
-   <span data-ttu-id="7f244-157">`xaml` 잘 구성 된 입력이 올바른 xml입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-157">The `xaml` input is well-formed and valid XML.</span></span>  
  
-   <span data-ttu-id="7f244-158">`xaml` 입력이 유효한 XAML 언어 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-158">The `xaml` input is valid XAML at the language level.</span></span>  
  
-   <span data-ttu-id="7f244-159">에 지정 된 XAML 형식을 `xaml` 입력 지원 관련 XAML 네임 스페이스의 형식으로 확인 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-159">The XAML types that are specified in the `xaml` input must resolve to backing types in the relevant XAML namespaces.</span></span> <span data-ttu-id="7f244-160">예를 들어 WPF 네임 스페이스에 대 한 XAML 형식 XAML;에 지정 된 대로 WPF XAML 네임 스페이스에 해결할 수 있습니다. WPF에 대 한 어셈블리를 프로젝트에 포함 해야 합니다 또는 런타임;에서 사용할 수 있습니다. 등에입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-160">For example, XAML types for a WPF namespace can resolve to a WPF XAML namespace as specified in the XAML; the assemblies for WPF must be included in the project or be available in the run time; and so on.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7f244-161"><xref:System.Xaml.XamlServices> 권장 되는 XAML 읽기 아니거나 API를 작성 하는 XAML 처리 하는 경우 설정 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 형식 또는 형식에 따라 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-161"><xref:System.Xaml.XamlServices> is not the recommended XAML reading or XAML writing API set if you are processing [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] types, or types based on [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="7f244-162">에 대 한 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 사용량을 사용 하 여 <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> 읽거나 XAML을 로드 하 고 <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> XAML 쓰기 저장에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-162">For [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] usage, use <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> for reading or loading XAML, and <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> for writing back XAML.</span></span> <span data-ttu-id="7f244-163">그러나 이러한 클래스를 사용 하 여 <xref:System.Xaml> ; 구현에서 내부적으로 Api 제공 지원 XAML 읽기 및 쓰기 종속성 속성에 대 한 최적화 등의 특성에 영향을 주는 WPF 관련 개념에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-163">These classes use <xref:System.Xaml> APIs internally in their implementation; however, they also provide support for WPF-specific concepts that influence the nature of XAML reading and writing, such as optimizations for dependency properties.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f244-164"><paramref name="xaml" /> 입력은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-164"><paramref name="xaml" /> input is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7f244-165">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 serialization을 위한 출력 형식으로 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-165">Processes a provided object graph into a XAML node representation and then into an output format for serialization.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static string Save (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Save(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Save (instance As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Save(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : obj -&gt; string" Usage="System.Xaml.XamlServices.Save instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="7f244-166">처리할 개체 그래프의 루트입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-166">The root of the object graph to process.</span></span></param>
        <summary><span data-ttu-id="7f244-167">제공된 개체 트리를 XAML 노드 표현으로 처리하고 출력 XAML의 문자열 표현을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-167">Processes a provided object tree into a XAML node representation, and returns a string representation of the output XAML.</span></span></summary>
        <returns><span data-ttu-id="7f244-168">문자열로 표시되는 XAML 태그 출력입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-168">The XAML markup output as a string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f244-169">이 메서드의 출력은는 `ToString` 의 결과 <xref:System.Xml.XmlWriter> 메서드 호출에 의해 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-169">The output from this method is the `ToString` result of an <xref:System.Xml.XmlWriter> that is created by the method call.</span></span> <span data-ttu-id="7f244-170"><xref:System.Xml.XmlWriter> 다음 설정을 사용 하 여 생성 됩니다: <xref:System.Xml.XmlWriterSettings.Indent%2A?displayProperty=nameWithType> 됩니다 `true`; 및 <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A?displayProperty=nameWithType> 는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-170">That <xref:System.Xml.XmlWriter> is created by using the following settings: <xref:System.Xml.XmlWriterSettings.Indent%2A?displayProperty=nameWithType> is `true`; and <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A?displayProperty=nameWithType> is `true`.</span></span>  
  
 <span data-ttu-id="7f244-171">반환된 된 문자열을 통해 유효한 XML로 로드할 수는 <xref:System.Xml.XmlReader.Create%2A> 처리할 경우 문자열을 스트림 또는 보다 구체적으로 전용된 판독기에 XAML에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="7f244-171">The returned string can be loaded as valid XML through the <xref:System.Xml.XmlReader.Create%2A> method if you processed the string into a stream, or into a reader more specifically dedicated for XAML.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.IO.Stream stream, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.IO.Stream stream, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::IO::Stream ^ stream, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.IO.Stream * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (stream, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="7f244-172">대상 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-172">The destination stream.</span></span></param>
        <param name="instance"><span data-ttu-id="7f244-173">처리할 개체 그래프의 루트입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-173">The root of the object graph to process.</span></span></param>
        <summary><span data-ttu-id="7f244-174">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 serialization을 위한 출력 스트림으로 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-174">Processes a provided object graph into a XAML node representation and then into an output stream for serialization.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="7f244-175"><xref:System.Xaml.XamlServices> 권장 되는 XAML 읽기 아니거나 API를 작성 하는 XAML 처리 하는 경우 설정 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 형식 또는 형식에 따라 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-175"><xref:System.Xaml.XamlServices> is not the recommended XAML reading or XAML writing API set if you are processing [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] types, or types based on [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</span></span> <span data-ttu-id="7f244-176">에 대 한 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 사용량을 사용 하 여 <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> 읽거나; XAML 로드 및 <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> XAML 쓰기 저장에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-176">For [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] usage, use <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> for reading or loading XAML; and <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> for writing back XAML.</span></span> <span data-ttu-id="7f244-177">그러나 이러한 클래스를 사용 하 여 <xref:System.Xaml> ; 구현에서 내부적으로 Api 제공 지원 XAML 읽기 및 쓰기 종속성 속성에 대 한 최적화 등의 특성에 영향을 주는 WPF 관련 개념에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-177">These classes use <xref:System.Xaml> APIs internally in their implementation; however, they also provide support for WPF-specific concepts that influence the nature of XAML reading and writing, such as optimizations for dependency properties.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f244-178"><paramref name="stream" /> 입력은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-178"><paramref name="stream" /> input is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.IO.TextWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.IO.TextWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As TextWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::IO::TextWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.IO.TextWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="7f244-179">출력을 작성하는 <see cref="T:System.IO.TextWriter" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-179">The <see cref="T:System.IO.TextWriter" /> that writes the output.</span></span></param>
        <param name="instance"><span data-ttu-id="7f244-180">처리할 개체 그래프의 루트입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-180">The root of the object graph to process.</span></span></param>
        <summary><span data-ttu-id="7f244-181">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 <see cref="T:System.IO.TextWriter" />로 이동하는 출력으로 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-181">Processes a provided object graph into a XAML node representation and then into an output that goes to the provided <see cref="T:System.IO.TextWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f244-182"><paramref name="writer" /> 입력은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-182"><paramref name="writer" /> input is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (string fileName, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(string fileName, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (fileName As String, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::String ^ fileName, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : string * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (fileName, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="7f244-183">출력을 작성할 파일의 이름과 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-183">The name and location of the file to write the output to.</span></span></param>
        <param name="instance"><span data-ttu-id="7f244-184">처리할 개체 그래프의 루트입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-184">The root of the object graph to process.</span></span></param>
        <summary><span data-ttu-id="7f244-185">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 위치의 출력 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-185">Processes a provided object graph into a XAML node representation and then writes it to an output file at a provided location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f244-186">`fileName` 매개 변수 값으로 사용 됩니다 합니다 `outputFileName` 에 대 한 호출에 대 한 입력 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>를 만드는 <xref:System.Xml.XmlWriter> 메서드 호출의 일부로.</span><span class="sxs-lookup"><span data-stu-id="7f244-186">The `fileName` parameter value is used as the `outputFileName` input for a call to <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>, which creates a <xref:System.Xml.XmlWriter> as part of the method call.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7f244-187"><paramref name="fileName" />이 빈 문자열인 경우</span><span class="sxs-lookup"><span data-stu-id="7f244-187"><paramref name="fileName" /> is an empty string.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f244-188"><paramref name="fileName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="7f244-188"><paramref name="fileName" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.Xaml.XamlWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.Xaml.XamlWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As XamlWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::Xaml::XamlWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.Xaml.XamlWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xaml.XamlWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="7f244-189">사용할 <see cref="T:System.Xaml.XamlWriter" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-189">The <see cref="T:System.Xaml.XamlWriter" /> implementation to use.</span></span></param>
        <param name="instance"><span data-ttu-id="7f244-190">처리할 개체 그래프의 루트입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-190">The root of the object graph to process.</span></span></param>
        <summary><span data-ttu-id="7f244-191">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 XAML 작성기에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-191">Processes a provided object graph into a XAML node representation and then writes it to the provided XAML writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f244-192">다음 경우에만이 시그니처를 사용 하면 일반적으로 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-192">You should typically use this signature only in the following cases:</span></span>  
  
-   <span data-ttu-id="7f244-193">고유한 구현을 정의 <xref:System.Xaml.XamlWriter>합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-193">You defined your own implementation of a <xref:System.Xaml.XamlWriter>.</span></span>  
  
-   <span data-ttu-id="7f244-194">에 대 한 설정을 지정 하는 <xref:System.Xaml.XamlWriter> 기본 설정과에서 다른 합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-194">You specified settings for the <xref:System.Xaml.XamlWriter> that differ from the default settings.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f244-195"><paramref name="writer" /> 입력은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-195"><paramref name="writer" /> input is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.Xml.XmlWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.Xml.XmlWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As XmlWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::Xml::XmlWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.Xml.XmlWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="7f244-196">사용할 <see cref="T:System.Xml.XmlWriter" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-196">The <see cref="T:System.Xml.XmlWriter" /> implementation to use.</span></span></param>
        <param name="instance"><span data-ttu-id="7f244-197">처리할 개체 그래프의 루트입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-197">The root of the object graph to process.</span></span></param>
        <summary><span data-ttu-id="7f244-198">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 <see cref="T:System.Xml.XmlWriter" />에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-198">Processes a provided object graph into a XAML node representation and then writes it to the provided <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f244-199"><paramref name="writer" /> 입력은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-199"><paramref name="writer" /> input is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7f244-200">공통 XAML 노드 집합 매개자를 사용하기 위해 <see cref="T:System.Xaml.XamlReader" /> 및 <see cref="T:System.Xaml.XamlWriter" />를 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-200">Connects a <see cref="T:System.Xaml.XamlReader" /> and a <see cref="T:System.Xaml.XamlWriter" /> in order to use a common XAML node set intermediary.</span></span> <span data-ttu-id="7f244-201">제공된 판독기와 작성기의 유형에 따라 콘텐츠를 잠재적으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-201">Potentially transforms the content, depending on the types of readers and writers that are provided.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static void Transform (System.Xaml.XamlReader xamlReader, System.Xaml.XamlWriter xamlWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Transform(class System.Xaml.XamlReader xamlReader, class System.Xaml.XamlWriter xamlWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Transform(System::Xaml::XamlReader ^ xamlReader, System::Xaml::XamlWriter ^ xamlWriter);" />
      <MemberSignature Language="F#" Value="static member Transform : System.Xaml.XamlReader * System.Xaml.XamlWriter -&gt; unit" Usage="System.Xaml.XamlServices.Transform (xamlReader, xamlWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
        <Parameter Name="xamlWriter" Type="System.Xaml.XamlWriter" />
      </Parameters>
      <Docs>
        <param name="xamlReader"><span data-ttu-id="7f244-202">사용할 <see cref="T:System.Xaml.XamlReader" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-202">The <see cref="T:System.Xaml.XamlReader" /> implementation to use.</span></span></param>
        <param name="xamlWriter"><span data-ttu-id="7f244-203">사용할 <see cref="T:System.Xaml.XamlWriter" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-203">The <see cref="T:System.Xaml.XamlWriter" /> to use.</span></span></param>
        <summary><span data-ttu-id="7f244-204"><see cref="T:System.Xaml.XamlReader" /> 및 <see cref="T:System.Xaml.XamlWriter" />를 연결하여 공통 XAML 노드 집합 매개자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-204">Connects a <see cref="T:System.Xaml.XamlReader" /> and a <see cref="T:System.Xaml.XamlWriter" /> to use a common XAML node set intermediary.</span></span> <span data-ttu-id="7f244-205">제공된 판독기와 작성기의 유형에 따라 콘텐츠를 잠재적으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-205">Potentially transforms the content, depending on the types of readers and writers that are provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7f244-206">이 메서드는에 대 한 래퍼로 <xref:System.Xaml.XamlServices.Transform%28System.Xaml.XamlReader%2CSystem.Xaml.XamlWriter%2CSystem.Boolean%29>, 여기서 `closeWriter` 로 지정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-206">This method is a wrapper around <xref:System.Xaml.XamlServices.Transform%28System.Xaml.XamlReader%2CSystem.Xaml.XamlWriter%2CSystem.Boolean%29>, where `closeWriter` is specified as `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f244-207"><paramref name="xamlReader" /> 또는 <paramref name="xamlWriter" /> 입력이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="7f244-207"><paramref name="xamlReader" /> or <paramref name="xamlWriter" /> input is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Xaml.XamlException"><span data-ttu-id="7f244-208">XAML 스키마 컨텍스트가 제공된 <paramref name="xamlReader" /> 및 <paramref name="xamlWriter" /> 사이에 일치하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-208">The XAML schema context does not match between the provided <paramref name="xamlReader" /> and <paramref name="xamlWriter" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static void Transform (System.Xaml.XamlReader xamlReader, System.Xaml.XamlWriter xamlWriter, bool closeWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Transform(class System.Xaml.XamlReader xamlReader, class System.Xaml.XamlWriter xamlWriter, bool closeWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Transform(System::Xaml::XamlReader ^ xamlReader, System::Xaml::XamlWriter ^ xamlWriter, bool closeWriter);" />
      <MemberSignature Language="F#" Value="static member Transform : System.Xaml.XamlReader * System.Xaml.XamlWriter * bool -&gt; unit" Usage="System.Xaml.XamlServices.Transform (xamlReader, xamlWriter, closeWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
        <Parameter Name="xamlWriter" Type="System.Xaml.XamlWriter" />
        <Parameter Name="closeWriter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="xamlReader"><span data-ttu-id="7f244-209">사용할 <see cref="T:System.Xaml.XamlReader" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-209">The <see cref="T:System.Xaml.XamlReader" /> implementation to use.</span></span></param>
        <param name="xamlWriter"><span data-ttu-id="7f244-210">사용할 <see cref="T:System.Xaml.XamlWriter" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-210">The <see cref="T:System.Xaml.XamlWriter" /> to use.</span></span></param>
        <param name="closeWriter"><span data-ttu-id="7f244-211">호출이 완료된 후에 작성기를 닫으면 <see langword="true" />이고, 작성된 마지막 쓰기 위치에 활성 상태로 두면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-211"><see langword="true" /> to close the writer after the call is complete; <see langword="false" /> to leave the writer active at the last written position.</span></span></param>
        <summary><span data-ttu-id="7f244-212"><see cref="T:System.Xaml.XamlReader" /> 및 <see cref="T:System.Xaml.XamlWriter" />를 연결하여 공통 XAML 노드 집합 매개자를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-212">Connects a <see cref="T:System.Xaml.XamlReader" /> and a <see cref="T:System.Xaml.XamlWriter" /> to use a common XAML node set intermediary.</span></span> <span data-ttu-id="7f244-213">제공된 판독기와 작성기의 유형에 따라 콘텐츠를 잠재적으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-213">Potentially transforms the content, depending on the types of readers and writers that are provided.</span></span> <span data-ttu-id="7f244-214">호출이 완료된 후에 작성기를 닫을지 여부를 지정하기 위한 매개 변수를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-214">Provides a parameter for specifying whether to close the writer after the call is completed.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7f244-215"><paramref name="xamlReader" /> 또는 <paramref name="xamlWriter" /> 입력이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="7f244-215"><paramref name="xamlReader" /> or <paramref name="xamlWriter" /> input is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Xaml.XamlException"><span data-ttu-id="7f244-216">XAML 스키마 컨텍스트가 제공된 <paramref name="xamlReader" /> 및 <paramref name="xamlWriter" /> 사이에 일치하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7f244-216">The XAML schema context does not match between the provided <paramref name="xamlReader" /> and <paramref name="xamlWriter" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>