<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlReader.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b2c5d677ab741eb848cf99fa1f0d969968ff9639.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2c5d677ab741eb848cf99fa1f0d969968ff9639</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlReader">
          <source>Provides base definitions for classes that consume XAML input and produce XAML node streams.</source>
          <target state="translated">XAML 입력을 소비하고 XAML 노드 스트림을 만드는 클래스에 대한 기본 정의를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> is an abstract class and does not provide implementations or definitions that have a working result for all members.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> 추상 클래스 이며 구현 또는 모든 멤버에 대 한 작업 결과 포함 하는 정의 제공 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Members that do have an implementation in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> are noted in the remarks for that member.</source>
          <target state="translated">구현 하지 않은 멤버 <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> 해당 멤버에 대 한 설명에 명시 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Specifically, <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> has several abstract members that must be implemented, and several virtual members.</source>
          <target state="translated">특히, <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> 추상 구현 해야 하는 멤버가 몇 개 및 여러 가상 멤버입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Of the virtual members, <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> each provide a default implementation that is appropriate for most cases.</source>
          <target state="translated">가상 멤버의 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> 각 대부분의 경우에 적합 한 기본 구현을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>However, the <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> default implementations rely on other expected behavior of the implementing XAML reader; in particular, they rely on the <ph id="ph3">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> override.</source>
          <target state="translated">그러나는 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> 기본 구현은 구현 된 XAML 판독기의 예상 되는 동작은 다른; 의존 특히는 <ph id="ph3">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlReader.Dispose%2A&gt;</ph> is also a virtual member that has a working default implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlReader.Dispose%2A&gt;</ph> 작업 기본 구현이 있는 가상 멤버 이기도 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>The following two classes are the most relevant and practical derived classes in .NET Framework XAML Services and the System.Xaml assembly:</source>
          <target state="translated">다음 두 개의 클래스는.NET Framework XAML 서비스와 System.Xaml 어셈블리의 가장 적절 하 고 실제로 파생된 클래스입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectReader&gt;</ph>, which reads an object graph, such as the active object graph of an application at run time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlObjectReader&gt;</ph>을 실행 시 응용 프로그램의 활성 개체 그래프를 사용 하 여 개체 그래프를 읽습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>, which reads XAML in the form of a XML text file by using a general <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> that loads the file as an intermediary helper class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>를 일반을 사용 하 여 XML 텍스트 파일 형태로 XAML을 읽는 <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> 중간 도우미 클래스로 파일을 로드 하는 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Other XAML readers from other frameworks include <ph id="ph1">&lt;xref:System.Windows.Baml2006.Baml2006Reader&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.Debugger.XamlDebuggerXmlReader&gt;</ph>.</source>
          <target state="translated">다른 프레임 워크의 다른 XAML 판독기 포함 <ph id="ph1">&lt;xref:System.Windows.Baml2006.Baml2006Reader&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Activities.Debugger.XamlDebuggerXmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> differs from <ph id="ph2">[!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)]</ph> and <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph> design principles because <ph id="ph4">&lt;xref:System.Xaml.XamlReader&gt;</ph> does not have a <ph id="ph5">`Create`</ph> method to return underlying default XAML reader implementations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> 와 다른 <ph id="ph2">[!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)]</ph> 및 <ph id="ph3">&lt;xref:System.Xml.XmlReader&gt;</ph> 때문에 디자인 원칙 <ph id="ph4">&lt;xref:System.Xaml.XamlReader&gt;</ph> 없는 <ph id="ph5">`Create`</ph> 기본 기본 XAML 판독기 구현을 반환 하는 메서드.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>You must instead instantiate specific derived XAML reader classes by calling their constructors or other class-specific helper APIs.</source>
          <target state="translated">대신 해당 생성자 또는 다른 클래스 관련 도우미 Api 호출 하 여 특정 XAML 판독기 파생된 클래스를 인스턴스화해야 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Subtree Readers</source>
          <target state="translated">하위 트리 판독기</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>For the most part, you call <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> API in the context of specific XAML reader classes that derive from <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph>.</source>
          <target state="translated">호출 하는 대부분의 경우 <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> API에서 파생 되는 특정 XAML 판독기 클래스의 컨텍스트에서 <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>However, in one particular case, you access <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> API on a practical XAML reader instance that is not public and not derived from <ph id="ph2">&lt;xref:System.Xaml.XamlObjectReader&gt;</ph> or <ph id="ph3">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>.</source>
          <target state="translated">그러나 하나의 특별 한 경우에 액세스할 <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> API가 public이 고에서 파생 되지 않습니다는 실용적인 XAML 판독기 인스턴스의 <ph id="ph2">&lt;xref:System.Xaml.XamlObjectReader&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>This case is when you call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>, which returns a <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> instance.</source>
          <target state="translated">이 경우 호출 하는 경우 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>를 반환 하는 <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>In the default implementation, the <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> that is returned by this API is an internal class.</source>
          <target state="translated">기본 구현에서는 <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> 즉이 API에서 반환 되는 내부 클래스입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> obtained for subtree reading has valid actions for APIs such as <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>, and those actions are based on the parent reader class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> 하위 트리를 읽어와 같은 Api에 대 한 유효한 작업을에 대 한 가져온 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>, 해당 작업을 부모 판독기 클래스에 따라 결정 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>This design enables the internal class to track the frame level where the subtree was entered.</source>
          <target state="translated">이 디자인을 사용 하면 하위 트리 입력 된 프레임 수준 추적을 내부 클래스입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>The acting subtree <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> makes sure that if the current node position is moved beyond the bounds of the subtree, the specific subtree reader reports end-of-file or <ph id="ph2">`null`</ph> at the current node.</source>
          <target state="translated">활성 하위 트리 <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> 하면 현재 노드 위치 하위 트리의 경계를 벗어나 이동 되 면 특정 하위 판독기 파일 끝이 보고 하는지 또는 <ph id="ph2">`null`</ph> 현재 노드에 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlReader">
          <source>Notes about subtree reader usage are included on certain <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> APIs.</source>
          <target state="translated">특정에 포함 된 하위 트리 판독기 사용에 대 한 메모 <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> Api입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.#ctor">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 클래스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Close">
          <source>Closes the XAML node stream.</source>
          <target state="translated">XAML 노드 스트림을 닫습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Close">
          <source>In the base implementation, calling <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Close%2A&gt;</ph> calls <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Dispose%2A&gt;</ph> with the <ph id="ph3">`isDisposing`</ph> parameter as <ph id="ph4">`true`</ph>.</source>
          <target state="translated">기본 구현에서 호출 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Close%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Dispose%2A&gt;</ph> 와 <ph id="ph3">`isDisposing`</ph> 매개 변수로 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release the managed resources; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">관리되는 리소스를 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph>, and optionally, releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph>에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
          <source>You must call the base class to get <ph id="ph1">&lt;xref:System.Xaml.XamlReader.IsDisposed%2A&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">`true`</ph>.</source>
          <target state="translated">가져오려는 기본 클래스를 호출 해야 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.IsDisposed%2A&gt;</ph> <ph id="ph2"> = </ph> <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.IsDisposed">
          <source>Gets whether <ph id="ph1">&lt;see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /&gt;</ph> has been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /&gt;</ph>가 호출되었는지 여부를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.IsDisposed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /&gt;</ph> has been called; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /&gt;</ph>가 호출되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.IsEof">
          <source>When implemented in a derived class, gets a value that reports whether the reader position is at end-of-file.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 판독기 위치가 파일의 끝에 있는지 여부를 보고하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.IsEof">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the position is at the conceptual end-of-file of the XAML node stream; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">위치가 XAML 노드 스트림의 개념상 파일 끝에 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.IsEof">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.IsEof%2A&gt;</ph>, with behavior that correctly reflects the bounds of the entered subtree.</source>
          <target state="translated">하위 트리 판독기를 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.IsEof%2A&gt;</ph>, 입력 한 하위 범위를 올바르게 반영 하는 동작입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.IsEof">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">자세한 내용은의 "하위 트리 판독기" 섹션을 참조 하십시오. <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, 참조 또는 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.Member">
          <source>When implemented in a derived class, gets the current member at the reader position, if the reader position is on a <ph id="ph1">&lt;see cref="F:System.Xaml.XamlNodeType.StartMember" /&gt;</ph>.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 판독기 위치가 <ph id="ph1">&lt;see cref="F:System.Xaml.XamlNodeType.StartMember" /&gt;</ph>에 있으면 판독기 위치에 있는 현재 멤버를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Member">
          <source>The current member; or <ph id="ph1">&lt;see langword="null" /&gt;</ph>, if the reader position is not on a member.</source>
          <target state="translated">현재 멤버이며, 판독기 위치가 멤버에 없는 경우 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Member">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Member%2A&gt;</ph>, with behavior restrictions.</source>
          <target state="translated">하위 트리 판독기를 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Member%2A&gt;</ph>, 동작이 제한 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Member">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">자세한 내용은의 "하위 트리 판독기" 섹션을 참조 하십시오. <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, 참조 또는 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.Namespace">
          <source>When implemented in a derived class, gets the XAML namespace information from the current node.</source>
          <target state="translated">파생 클래스에서 구현된 경우 현재 노드에서 XAML 네임스페이스 정보를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Namespace">
          <source>The XAML namespace information, if it is available; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">사용할 수 있으면 XAML 네임스페이스 정보이고, 그렇지 않으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Namespace">
          <source>The intended design of this API is to return a non-null result only if the <ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph> of the current node is <ph id="ph2">&lt;xref:System.Xaml.XamlNodeType.NamespaceDeclaration&gt;</ph>.</source>
          <target state="translated">이 API의 계획 된 디자인 경우에만 null이 아닌 결과 반환 하는 것은 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph> 가 현재 노드의 <ph id="ph2">&lt;xref:System.Xaml.XamlNodeType.NamespaceDeclaration&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Namespace">
          <source>The property does not report the XAML namespace that applies to objects or members in a general scoping sense, as interpreted under a XAML schema context.</source>
          <target state="translated">XAML 스키마 컨텍스트에서 해석 된 속성의 일반 범위 지정 관점에서 개체 또는 멤버에 적용 되는 XAML 네임 스페이스를 보고 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Namespace">
          <source>Your application must provide a means to cache information for the acting XAML namespace as it traverses XAML nodes, if you need that information in a manner other than how the XAML schema context reports it to a writer.</source>
          <target state="translated">응용 프로그램 작동에 대 한 정보를 캐시 하는 수단을 제공 해야 하므로 XAML 네임 스페이스 XAML 스키마 컨텍스트를 작성기 것으로 보고 되는 방법 외에 해당 정보가 필요한 경우 XAML 노드를 트래버스할 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Namespace">
          <source>See <ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader.Namespace%2A&gt;</ph> for notes on the reference implementation.</source>
          <target state="translated">참조 <ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader.Namespace%2A&gt;</ph> 메모와 관련해 서 참조 구현에 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.NodeType">
          <source>When implemented in a derived class, gets the type of the current node.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 현재 노드의 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.NodeType">
          <source>A value of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlNodeType" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlNodeType" /&gt;</ph> 열거형의 값입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.NodeType">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>, with behavior restrictions.</source>
          <target state="translated">하위 트리 판독기를 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph>, 동작이 제한 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.NodeType">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">자세한 내용은의 "하위 트리 판독기" 섹션을 참조 하십시오. <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, 참조 또는 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Read">
          <source>When implemented in a derived class, provides the next XAML node from the source, if a node is available.</source>
          <target state="translated">파생 클래스에서 구현될 때 노드를 사용할 수 있는 경우 소스에서 다음 XAML 노드를 제공합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Read">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a node is available; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">노드를 사용할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Read">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>, with behavior restrictions.</source>
          <target state="translated">하위 트리 판독기를 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph>, 동작이 제한 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Read">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">자세한 내용은의 "하위 트리 판독기" 섹션을 참조 하십시오. <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, 참조 또는 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> that is based on the current <ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph>, where the returned <ph id="ph3">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> is used to iterate through a subtree of the XAML node structure.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph>를 기반으로 하는 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph>를 반환합니다. 반환된 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph>는 XAML 노드 구조의 하위 트리에서 반복하는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>A new XAML reader instance for the subtree.</source>
          <target state="translated">하위 트리의 새 XAML 판독기 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>This method has a default implementation and returns a valid <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>.</source>
          <target state="translated">이 메서드는 기본 구현이 고 유효한 <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The returned <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> is an internal class that restricts certain <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> actions.</source>
          <target state="translated">반환 된 <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> 특정 제한 하는 내부 클래스 <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> 동작 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The restrictions are consistent with the purpose of reading only a dimensioned subtree of a larger source for a XAML node set, and of returning end-of-file or <ph id="ph1">`null`</ph> at the current node when the subtree is exited.</source>
          <target state="translated">제한은 크기가 지정 된 하위 트리만 읽고 XAML 노드 집합에 대 한 큰 원본 및 파일의 끝을 반환 하는 목적과 일치 또는 <ph id="ph1">`null`</ph> 하위 트리 종료 되 면 현재 노드에 있습니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>Generally, you should check the current node from the initial <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> to determine whether you need a subtree reader.</source>
          <target state="translated">초기에서 현재 노드를 확인 해야 하는 일반적으로 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> 하위 트리 판독기 해야 하는지 여부를 확인 하려면.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>How you check this may be implementation-specific; however, avoid creating multiple subtree readers for every subtree.</source>
          <target state="translated">이 확인 하는 방법은 구현 관련; 수 있습니다. 그러나 모든 하위 트리에 대 한 여러 하위 트리 판독기를 만들지 마십시오.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>In addition, avoid invoking a subtree reader for certain node cases (for example, for <ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.NamespaceDeclaration&gt;</ph>) that cannot contain a subtree of nodes.</source>
          <target state="translated">또한 특정 노드의 사례에 대 한 하위 트리 판독기를 호출 하지 않습니다 (예: <ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.NamespaceDeclaration&gt;</ph>) 노드의 하위 트리를 포함할 수 없는 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>After you obtain a subtree reader, you must call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> on it to obtain a current node (or call <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> to obtain a next node).</source>
          <target state="translated">하위 트리 판독기를 얻은 후 호출 해야 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> 현재 노드를 가져오는 데 (호출 또는 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> 다음 노드를 가져올 수)입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>You do not automatically obtain an initial node position from the subtree reader when you create it.</source>
          <target state="translated">자동으로 가져오지 못하면 초기 노드 위치 하위 트리 판독기를 만들 때.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The reader you obtain by calling <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> from this default implementation is an internal class.</source>
          <target state="translated">호출 하 여 사용 하는 판독기 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> 이 기본값에서 구현 되는 내부 클래스입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The internal class bases its behavior on the <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> implementation that is being used when <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> is called.</source>
          <target state="translated">내부 클래스 동작을 기반으로 <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> 구현 되는 경우에 사용 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> 라고 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The purpose of the internal class is to wrap the <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> and general traversal behavior.</source>
          <target state="translated">내부 클래스의 목적은를 래핑하는 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> 및 일반 이동 동작 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>The traversal stays within the intended subtree by keeping track of <ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.StartMember&gt;</ph><ph id="ph2">/</ph><ph id="ph3">&lt;xref:System.Xaml.XamlNodeType.EndMember&gt;</ph> pairs or <ph id="ph4">&lt;xref:System.Xaml.XamlNodeType.StartObject&gt;</ph><ph id="ph5">/</ph><ph id="ph6">&lt;xref:System.Xaml.XamlNodeType.EndObject&gt;</ph> pairs.</source>
          <target state="translated">간 이동을 추적 하 여 원하는 하위 내부에 머무는 <ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.StartMember&gt;</ph> <ph id="ph2">/</ph> <ph id="ph3">&lt;xref:System.Xaml.XamlNodeType.EndMember&gt;</ph> 쌍 또는 <ph id="ph4">&lt;xref:System.Xaml.XamlNodeType.StartObject&gt;</ph> <ph id="ph5">/</ph> <ph id="ph6">&lt;xref:System.Xaml.XamlNodeType.EndObject&gt;</ph> 쌍입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>It also correctly returns <ph id="ph1">`false`</ph> for <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> and <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlReader.IsEof%2A&gt;</ph> when the reader is at the end of the subtree, as defined by its entry point.</source>
          <target state="translated">또한 올바르게 반환 <ph id="ph1">`false`</ph> 에 대 한 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> 및 <ph id="ph3">`true`</ph> 에 대 한 <ph id="ph4">&lt;xref:System.Xaml.XamlReader.IsEof%2A&gt;</ph> 때 판독기가 끝에는 하위 트리의 진입점에 의해 정의 된 대로 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>In general, you assume that any <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> API you call from a subtree reader has the same implementation as the overall <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> except for the traversal bounding behavior.</source>
          <target state="translated">일반적으로 한다고 가정 하기 모든 <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> 하위 트리 판독기에서 호출 API에는 전체와 동일한 구현 <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> 동작 경계 순회를 제외 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>However, <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> is virtual.</source>
          <target state="translated">그러나 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph> 가상입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.ReadSubtree">
          <source>Therefore, a specific <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> implementation can provide behavior that differs from the <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> internal wrapper behavior; and a <ph id="ph3">&lt;xref:System.Xaml.XamlReader&gt;</ph> implementation can even disable subtree reader functionality by returning <ph id="ph4">&lt;xref:System.NotImplementedException&gt;</ph> or other exceptions.</source>
          <target state="translated">따라서 특정 <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> 구현에서 다른 동작을 제공할 수는 <ph id="ph2">&lt;xref:System.Xaml.XamlReader&gt;</ph> 내부 래퍼 동작 및 <ph id="ph3">&lt;xref:System.Xaml.XamlReader&gt;</ph> 구현을 반환 하 여 하위 트리 판독기 기능을 비활성화할 수도 있습니다 <ph id="ph4">&lt;xref:System.NotImplementedException&gt;</ph> 또는 기타 예외입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.SchemaContext">
          <source>When implemented in a derived class, gets an object that provides XAML schema context information for the information set.</source>
          <target state="translated">파생 클래스에서 구현된 경우 정보 집합에 대한 XAML 스키마 컨텍스트 정보를 제공하는 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.SchemaContext">
          <source>An object that provides XAML schema context information for the information set.</source>
          <target state="translated">정보 집합에 대한 XAML 스키마 컨텍스트 정보를 제공하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.Skip">
          <source>Skips the current node and advances the reader position to the next node.</source>
          <target state="translated">현재 노드를 건너뛰고 판독기 위치를 다음 노드로 이동합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>Once skipped, <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> is called by the default <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> implementation.</source>
          <target state="translated">건너뛴 후 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> 는 기본적으로 호출 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>You typically do not call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> in sequence.</source>
          <target state="translated">일반적으로 호출 하지 않으면 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> 순서로 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>In the default <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> implementation, different actions are taken depending on which <ph id="ph2">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph> the reader position is currently on.</source>
          <target state="translated">기본에서 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph> 구현, 서로 다른 조치를 따라 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph> 가 현재 판독기 위치입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>If the reader position is currently on a <ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.StartMember&gt;</ph> or <ph id="ph2">&lt;xref:System.Xaml.XamlNodeType.StartObject&gt;</ph>, that member or object is skipped.</source>
          <target state="translated">가 현재 판독기 위치 하는 경우는 <ph id="ph1">&lt;xref:System.Xaml.XamlNodeType.StartMember&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Xaml.XamlNodeType.StartObject&gt;</ph>, 멤버 또는 개체를 건너뜁니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>For other <ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph> values, no action is taken other than calling <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> from the current position.</source>
          <target state="translated">다른 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.NodeType%2A&gt;</ph> 값, 아무 작업도 수행 호출 이외의 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Read%2A&gt;</ph> 현재 위치에서.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>, with behavior restrictions.</source>
          <target state="translated">하위 트리 판독기를 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A&gt;</ph>, 동작이 제한 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">자세한 내용은의 "하위 트리 판독기" 섹션을 참조 하십시오. <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, 참조 또는 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>The node tree behavior of <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType&gt;</ph> is based on the XML equivalent <ph id="ph2">&lt;xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">노드 트리 동작 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType&gt;</ph> 동등 XML 메시지에 따라 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlReader.Skip">
          <source>Based on the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType&gt;</ph> behavior equivalence, <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType&gt;</ph> skips the node and its subtree, not just the single entry node.</source>
          <target state="translated">에 따라는 <ph id="ph1">&lt;xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType&gt;</ph> 동작 동등 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType&gt;</ph> 노드 및 해당 하위 트리를 단일 항목 노드 뿐 아니라 건너뜁니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlReader.System#IDisposable#Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.Type">
          <source>When implemented in a derived class, gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the current node.</source>
          <target state="translated">파생 클래스에서 구현된 경우 현재 노드의 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Type">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the current node; or <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if the current reader position is not on an object.</source>
          <target state="translated">현재 노드의 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이거나, 현재 판독기 위치가 개체에 없으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Type">
          <source>Subtree readers can call <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Type%2A&gt;</ph>, with behavior restrictions.</source>
          <target state="translated">하위 트리 판독기를 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlReader.Type%2A&gt;</ph>, 동작이 제한 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Type">
          <source>For more information, see the "Subtree Readers" section in <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, or see <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>.</source>
          <target state="translated">자세한 내용은의 "하위 트리 판독기" 섹션을 참조 하십시오. <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>, 참조 또는 <ph id="ph2">&lt;xref:System.Xaml.XamlReader.ReadSubtree%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlReader.Value">
          <source>When implemented in a derived class, gets the value of the current node.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 현재 노드의 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlReader.Value">
          <source>The value of the current node; or <ph id="ph1">&lt;see langword="null" /&gt;</ph>, if the current reader position is not on a <ph id="ph2">&lt;see cref="F:System.Xaml.XamlNodeType.Value" /&gt;</ph> node type.</source>
          <target state="translated">현재 노드의 값이거나, 현재 판독기 위치가 <ph id="ph2">&lt;see cref="F:System.Xaml.XamlNodeType.Value" /&gt;</ph> 노드 형식에 없으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>