<Type Name="XamlReader" FullName="System.Xaml.XamlReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7b2da5f815178ee576b5206e3e4b9ed3089a9b75" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39852617" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XamlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XamlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XamlReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type XamlReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="abb0f-101">XAML 입력을 소비하고 XAML 노드 스트림을 만드는 클래스에 대한 기본 정의를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="abb0f-101">Provides base definitions for classes that consume XAML input and produce XAML node streams.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abb0f-102"><xref:System.Xaml.XamlReader> 추상 클래스 이며 구현이 나 모든 멤버에 대 한 작업 결과 정의 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-102"><xref:System.Xaml.XamlReader> is an abstract class and does not provide implementations or definitions that have a working result for all members.</span></span> <span data-ttu-id="abb0f-103">멤버의 구현을 않은 <xref:System.Xaml.XamlReader> 해당 멤버에 대 한 설명에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-103">Members that do have an implementation in <xref:System.Xaml.XamlReader> are noted in the remarks for that member.</span></span> <span data-ttu-id="abb0f-104">특히 <xref:System.Xaml.XamlReader> 를 구현 해야 하는 여러 추상 멤버 및 여러 가상 멤버를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-104">Specifically, <xref:System.Xaml.XamlReader> has several abstract members that must be implemented, and several virtual members.</span></span>  
  
 <span data-ttu-id="abb0f-105">가상 멤버 <xref:System.Xaml.XamlReader.ReadSubtree%2A> 및 <xref:System.Xaml.XamlReader.Skip%2A> 각 대부분의 경우에 적절 한 기본 구현을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-105">Of the virtual members, <xref:System.Xaml.XamlReader.ReadSubtree%2A> and <xref:System.Xaml.XamlReader.Skip%2A> each provide a default implementation that is appropriate for most cases.</span></span> <span data-ttu-id="abb0f-106">그러나를 <xref:System.Xaml.XamlReader.ReadSubtree%2A> 하 고 <xref:System.Xaml.XamlReader.Skip%2A> 기본 구현은 구현 XAML 판독기의 예상 되는 다른 동작에 의존 하므로 특히;는 <xref:System.Xaml.XamlReader.Read%2A> 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-106">However, the <xref:System.Xaml.XamlReader.ReadSubtree%2A> and <xref:System.Xaml.XamlReader.Skip%2A> default implementations rely on other expected behavior of the implementing XAML reader; in particular, they rely on the <xref:System.Xaml.XamlReader.Read%2A> override.</span></span> <span data-ttu-id="abb0f-107"><xref:System.Xaml.XamlReader.Dispose%2A> 기본 구현이 작동 하는 가상 멤버 이기도 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-107"><xref:System.Xaml.XamlReader.Dispose%2A> is also a virtual member that has a working default implementation.</span></span>  
  
 <span data-ttu-id="abb0f-108">다음 두 클래스는.NET Framework XAML 서비스 및 System.Xaml 어셈블리에서 가장 적절 하 고 실제로 파생된 클래스:</span><span class="sxs-lookup"><span data-stu-id="abb0f-108">The following two classes are the most relevant and practical derived classes in .NET Framework XAML Services and the System.Xaml assembly:</span></span>  
  
-   <span data-ttu-id="abb0f-109"><xref:System.Xaml.XamlObjectReader>을 런타임 시 응용 프로그램의 활성 개체 그래프와 같은 개체 그래프를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-109"><xref:System.Xaml.XamlObjectReader>, which reads an object graph, such as the active object graph of an application at run time.</span></span>  
  
-   <span data-ttu-id="abb0f-110"><xref:System.Xaml.XamlXmlReader>를 일반을 사용 하 여 읽는 XML 텍스트 파일 형태로 XAML <xref:System.Xml.XmlReader> 중간 도우미 클래스로 파일을 로드 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-110"><xref:System.Xaml.XamlXmlReader>, which reads XAML in the form of a XML text file by using a general <xref:System.Xml.XmlReader> that loads the file as an intermediary helper class.</span></span>  
  
 <span data-ttu-id="abb0f-111">다른 프레임 워크에서 다른 XAML 판독기 포함 <xref:System.Windows.Baml2006.Baml2006Reader> 고 <xref:System.Activities.Debugger.XamlDebuggerXmlReader>입니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-111">Other XAML readers from other frameworks include <xref:System.Windows.Baml2006.Baml2006Reader> and <xref:System.Activities.Debugger.XamlDebuggerXmlReader>.</span></span>  
  
 <span data-ttu-id="abb0f-112"><xref:System.Xaml.XamlReader> 다른 [!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)] 하 고 <xref:System.Xml.XmlReader> 때문에 디자인 원칙 <xref:System.Xaml.XamlReader> 되지 않은 `Create` 기본 기본 XAML 판독기 구현을 반환 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="abb0f-112"><xref:System.Xaml.XamlReader> differs from [!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)] and <xref:System.Xml.XmlReader> design principles because <xref:System.Xaml.XamlReader> does not have a `Create` method to return underlying default XAML reader implementations.</span></span> <span data-ttu-id="abb0f-113">대신 해당 생성자 또는 다른 클래스 관련 도우미 Api 호출 하 여 특정 파생된 XAML 판독기 클래스를 인스턴스화해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-113">You must instead instantiate specific derived XAML reader classes by calling their constructors or other class-specific helper APIs.</span></span>  
  
## <a name="subtree-readers"></a><span data-ttu-id="abb0f-114">하위 트리에서 판독기</span><span class="sxs-lookup"><span data-stu-id="abb0f-114">Subtree Readers</span></span>  
 <span data-ttu-id="abb0f-115">호출 하는 대부분의 경우 <xref:System.Xaml.XamlReader> 컨텍스트에서 특정 XAML 판독기 클래스에서 파생 되는 API <xref:System.Xaml.XamlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-115">For the most part, you call <xref:System.Xaml.XamlReader> API in the context of specific XAML reader classes that derive from <xref:System.Xaml.XamlReader>.</span></span> <span data-ttu-id="abb0f-116">그러나 특정 한 경우, 액세스할 <xref:System.Xaml.XamlReader> 공용 및에서 파생 되지 없는 실제 XAML 판독기 인스턴스에 대 한 API <xref:System.Xaml.XamlObjectReader> 또는 <xref:System.Xaml.XamlXmlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-116">However, in one particular case, you access <xref:System.Xaml.XamlReader> API on a practical XAML reader instance that is not public and not derived from <xref:System.Xaml.XamlObjectReader> or <xref:System.Xaml.XamlXmlReader>.</span></span> <span data-ttu-id="abb0f-117">이 경우 호출 하는 경우 <xref:System.Xaml.XamlReader.ReadSubtree%2A>를 반환 하는 한 <xref:System.Xaml.XamlReader> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="abb0f-117">This case is when you call <xref:System.Xaml.XamlReader.ReadSubtree%2A>, which returns a <xref:System.Xaml.XamlReader> instance.</span></span> <span data-ttu-id="abb0f-118">기본 구현에서는 <xref:System.Xaml.XamlReader> 즉이 API에서 반환 되는 내부 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-118">In the default implementation, the <xref:System.Xaml.XamlReader> that is returned by this API is an internal class.</span></span>  
  
 <span data-ttu-id="abb0f-119"><xref:System.Xaml.XamlReader> 와 같은 하위 트리를 읽어에서는 Api에 대 한 유효한 작업에 대 한 가져온 <xref:System.Xaml.XamlReader.Read%2A> 및 <xref:System.Xaml.XamlReader.NodeType%2A>를 상위 판독기 클래스를 기반으로 하는 이러한 작업 및 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-119">The <xref:System.Xaml.XamlReader> obtained for subtree reading has valid actions for APIs such as <xref:System.Xaml.XamlReader.Read%2A> and <xref:System.Xaml.XamlReader.NodeType%2A>, and those actions are based on the parent reader class.</span></span> <span data-ttu-id="abb0f-120">이렇게이 디자인 하면 하위 트리 입력 프레임 수준을 추적 내부 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-120">This design enables the internal class to track the frame level where the subtree was entered.</span></span> <span data-ttu-id="abb0f-121">활성 하위 트리 <xref:System.Xaml.XamlReader> 하면 하위 트리의 경계를 벗어나 현재 노드 위치를 이동 하는 경우 특정 하위 트리에서 판독기를 보고 하는 파일의 끝 또는 `null` 현재 노드에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-121">The acting subtree <xref:System.Xaml.XamlReader> makes sure that if the current node position is moved beyond the bounds of the subtree, the specific subtree reader reports end-of-file or `null` at the current node.</span></span>  
  
 <span data-ttu-id="abb0f-122">특정 하위 트리에서 판독기 사용에 대 한 정보는 포함 된 <xref:System.Xaml.XamlReader> Api.</span><span class="sxs-lookup"><span data-stu-id="abb0f-122">Notes about subtree reader usage are included on certain <xref:System.Xaml.XamlReader> APIs.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectReader" />
    <altmember cref="T:System.Xaml.XamlXmlReader" />
    <altmember cref="T:System.Xaml.XamlReaderSettings" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="abb0f-123">
            <see cref="T:System.Xaml.XamlReader" /> 클래스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-123">Initializes the <see cref="T:System.Xaml.XamlReader" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="xamlReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="abb0f-124">XAML 노드 스트림을 닫습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-124">Closes the XAML node stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abb0f-125">기본 구현에서 호출 <xref:System.Xaml.XamlReader.Close%2A> 호출 <xref:System.Xaml.XamlReader.Dispose%2A> 사용 하 여 합니다 `isDisposing` 매개 변수에 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-125">In the base implementation, calling <xref:System.Xaml.XamlReader.Close%2A> calls <xref:System.Xaml.XamlReader.Dispose%2A> with the `isDisposing` parameter as `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="xamlReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="abb0f-126">관리되는 리소스를 해제하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-126">
              <see langword="true" /> to release the managed resources; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="abb0f-127">
            <see cref="T:System.Xaml.XamlReader" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-127">Releases the unmanaged resources used by the <see cref="T:System.Xaml.XamlReader" />, and optionally, releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abb0f-128">가져오려는 기본 클래스를 호출 해야 합니다 <xref:System.Xaml.XamlReader.IsDisposed%2A>  =  `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-128">You must call the base class to get <xref:System.Xaml.XamlReader.IsDisposed%2A> = `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Xaml.XamlReader.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="abb0f-129">
            <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />가 호출되었는지 여부를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-129">Gets whether <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> has been called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="abb0f-130">
            <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />가 호출되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-130">
              <see langword="true" /> if <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> has been called; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEof">
      <MemberSignature Language="C#" Value="public abstract bool IsEof { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEof" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsEof" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsEof As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsEof { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEof : bool" Usage="System.Xaml.XamlReader.IsEof" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="abb0f-131">파생 클래스에서 구현되는 경우 판독기 위치가 파일의 끝에 있는지 여부를 보고하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-131">When implemented in a derived class, gets a value that reports whether the reader position is at end-of-file.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="abb0f-132">위치가 XAML 노드 스트림의 개념상 파일 끝에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-132">
              <see langword="true" /> if the position is at the conceptual end-of-file of the XAML node stream; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abb0f-133">하위 트리에서 판독기를 호출할 수 <xref:System.Xaml.XamlReader.IsEof%2A>를 잘못 입력 한 하위 범위를 반영 하는 동작을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-133">Subtree readers can call <xref:System.Xaml.XamlReader.IsEof%2A>, with behavior that correctly reflects the bounds of the entered subtree.</span></span> <span data-ttu-id="abb0f-134">자세한 내용은의 "하위 트리에서 판독기" 섹션을 참조 하세요 <xref:System.Xaml.XamlReader>, 참조 또는 <xref:System.Xaml.XamlReader.ReadSubtree%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-134">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.IsEof" />
        <altmember cref="P:System.Xaml.XamlXmlReader.IsEof" />
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlMember Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember Member" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Member" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Member As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlMember ^ Member { System::Xaml::XamlMember ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Member : System.Xaml.XamlMember" Usage="System.Xaml.XamlReader.Member" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="abb0f-135">파생 클래스에서 구현되는 경우 판독기 위치가 <see cref="F:System.Xaml.XamlNodeType.StartMember" />에 있으면 판독기 위치에 있는 현재 멤버를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-135">When implemented in a derived class, gets the current member at the reader position, if the reader position is on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="abb0f-136">현재 멤버이며, 판독기 위치가 멤버에 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-136">The current member; or <see langword="null" />, if the reader position is not on a member.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abb0f-137">하위 트리에서 판독기를 호출할 수 <xref:System.Xaml.XamlReader.Member%2A>, 동작이 제한 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-137">Subtree readers can call <xref:System.Xaml.XamlReader.Member%2A>, with behavior restrictions.</span></span> <span data-ttu-id="abb0f-138">자세한 내용은의 "하위 트리에서 판독기" 섹션을 참조 하세요 <xref:System.Xaml.XamlReader>, 참조 또는 <xref:System.Xaml.XamlReader.ReadSubtree%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-138">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Member" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Member" />
        <altmember cref="T:System.Xaml.XamlMember" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.NamespaceDeclaration Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.NamespaceDeclaration Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As NamespaceDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::NamespaceDeclaration ^ Namespace { System::Xaml::NamespaceDeclaration ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Xaml.NamespaceDeclaration" Usage="System.Xaml.XamlReader.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.NamespaceDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="abb0f-139">파생 클래스에서 구현된 경우 현재 노드에서 XAML 네임스페이스 정보를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-139">When implemented in a derived class, gets the XAML namespace information from the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="abb0f-140">사용할 수 있으면 XAML 네임스페이스 정보이고, 그렇지 않으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-140">The XAML namespace information, if it is available; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abb0f-141">의도 한 디자인이이 API의 경우에만 null이 아닌 결과 반환 하는 것은 <xref:System.Xaml.XamlReader.NodeType%2A> 는 현재 노드의 <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>입니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-141">The intended design of this API is to return a non-null result only if the <xref:System.Xaml.XamlReader.NodeType%2A> of the current node is <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>.</span></span> <span data-ttu-id="abb0f-142">속성은 XAML 스키마 컨텍스트에서 해석 일반적인 범위 내에 있는 개체 또는 멤버에 적용 되는 XAML 네임 스페이스를 보고 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-142">The property does not report the XAML namespace that applies to objects or members in a general scoping sense, as interpreted under a XAML schema context.</span></span> <span data-ttu-id="abb0f-143">응용 프로그램을 역할에 대 한 정보를 캐시 하는 수단을 제공 해야 하므로 XAML 네임 스페이스 XAML 스키마 컨텍스트를 기록기에 것으로 보고 되는 방법 외에 해당 정보가 필요한 경우 XAML 노드를 통과 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-143">Your application must provide a means to cache information for the acting XAML namespace as it traverses XAML nodes, if you need that information in a manner other than how the XAML schema context reports it to a writer.</span></span> <span data-ttu-id="abb0f-144">참조 <xref:System.Xaml.XamlXmlReader.Namespace%2A> 참조 구현에 대 한 참고 사항에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-144">See <xref:System.Xaml.XamlXmlReader.Namespace%2A> for notes on the reference implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Namespace" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xaml.XamlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NodeType As XamlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlNodeType NodeType { System::Xaml::XamlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xaml.XamlNodeType" Usage="System.Xaml.XamlReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="abb0f-145">파생 클래스에서 구현되는 경우 현재 노드의 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-145">When implemented in a derived class, gets the type of the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="abb0f-146">
            <see cref="T:System.Xaml.XamlNodeType" /> 열거형의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-146">A value of the <see cref="T:System.Xaml.XamlNodeType" /> enumeration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abb0f-147">하위 트리에서 판독기를 호출할 수 <xref:System.Xaml.XamlReader.NodeType%2A>, 동작이 제한 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-147">Subtree readers can call <xref:System.Xaml.XamlReader.NodeType%2A>, with behavior restrictions.</span></span> <span data-ttu-id="abb0f-148">자세한 내용은의 "하위 트리에서 판독기" 섹션을 참조 하세요 <xref:System.Xaml.XamlReader>, 참조 또는 <xref:System.Xaml.XamlReader.ReadSubtree%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-148">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.NodeType" />
        <altmember cref="P:System.Xaml.XamlXmlReader.NodeType" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Read();" />
      <MemberSignature Language="F#" Value="abstract member Read : unit -&gt; bool" Usage="xamlReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="abb0f-149">파생 클래스에서 구현될 때 노드를 사용할 수 있는 경우 소스에서 다음 XAML 노드를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-149">When implemented in a derived class, provides the next XAML node from the source, if a node is available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="abb0f-150">노드를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-150">
              <see langword="true" /> if a node is available; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abb0f-151">하위 트리에서 판독기를 호출할 수 <xref:System.Xaml.XamlReader.Read%2A>, 동작이 제한 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-151">Subtree readers can call <xref:System.Xaml.XamlReader.Read%2A>, with behavior restrictions.</span></span> <span data-ttu-id="abb0f-152">자세한 내용은의 "하위 트리에서 판독기" 섹션을 참조 하세요 <xref:System.Xaml.XamlReader>, 참조 또는 <xref:System.Xaml.XamlReader.ReadSubtree%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-152">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xaml.XamlXmlReader.Read" />
        <altmember cref="M:System.Xaml.XamlObjectReader.Read" />
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlReader ReadSubtree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.ReadSubtree" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadSubtree () As XamlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlReader ^ ReadSubtree();" />
      <MemberSignature Language="F#" Value="abstract member ReadSubtree : unit -&gt; System.Xaml.XamlReader&#xA;override this.ReadSubtree : unit -&gt; System.Xaml.XamlReader" Usage="xamlReader.ReadSubtree " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="abb0f-153">현재 <see cref="T:System.Xaml.XamlReader" />를 기반으로 하는 <see cref="T:System.Xaml.XamlReader" />를 반환합니다. 반환된 <see cref="T:System.Xaml.XamlReader" />는 XAML 노드 구조의 하위 트리에서 반복하는 데 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-153">Returns a <see cref="T:System.Xaml.XamlReader" /> that is based on the current <see cref="T:System.Xaml.XamlReader" />, where the returned <see cref="T:System.Xaml.XamlReader" /> is used to iterate through a subtree of the XAML node structure.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="abb0f-154">하위 트리의 새 XAML 판독기 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-154">A new XAML reader instance for the subtree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abb0f-155">이 메서드는 기본 구현이 고 유효한 <xref:System.Xaml.XamlReader>합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-155">This method has a default implementation and returns a valid <xref:System.Xaml.XamlReader>.</span></span> <span data-ttu-id="abb0f-156">반환 된 <xref:System.Xaml.XamlReader> 특정 제한 하는 내부 클래스 이며 <xref:System.Xaml.XamlReader> 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-156">The returned <xref:System.Xaml.XamlReader> is an internal class that restricts certain <xref:System.Xaml.XamlReader> actions.</span></span> <span data-ttu-id="abb0f-157">제한은 차원이 지정 된 하위 트리만 읽고 XAML 노드 집합의 경우 더 큰 원본 및 파일의 끝을 반환 하기 위한 목적으로 일관 된 또는 `null` 하위 트리 종료 될 때 현재 노드에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-157">The restrictions are consistent with the purpose of reading only a dimensioned subtree of a larger source for a XAML node set, and of returning end-of-file or `null` at the current node when the subtree is exited.</span></span>  
  
 <span data-ttu-id="abb0f-158">초기에서 현재 노드를 확인 해야 하는 일반적으로 <xref:System.Xaml.XamlReader.Read%2A> 하위 트리에서 판독기를 사용 해야 하는지 여부를 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="abb0f-158">Generally, you should check the current node from the initial <xref:System.Xaml.XamlReader.Read%2A> to determine whether you need a subtree reader.</span></span> <span data-ttu-id="abb0f-159">이 확인 하는 방법은 구현 별; 될 수 있습니다. 그러나 모든 하위 트리에 대해 여러 하위 트리에서 판독기를 만들지 마세요.</span><span class="sxs-lookup"><span data-stu-id="abb0f-159">How you check this may be implementation-specific; however, avoid creating multiple subtree readers for every subtree.</span></span> <span data-ttu-id="abb0f-160">또한 특정 노드의 사례에 대 한 하위 트리에서 판독기를 호출 하지 않습니다 (예: <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>) 노드의 하위 트리를 포함할 수 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-160">In addition, avoid invoking a subtree reader for certain node cases (for example, for <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>) that cannot contain a subtree of nodes.</span></span>  
  
 <span data-ttu-id="abb0f-161">하위 트리에서 판독기를 얻은 후 호출 해야 합니다 <xref:System.Xaml.XamlReader.Read%2A> 를 현재 노드를 가져옵니다 (호출 또는 <xref:System.Xaml.XamlReader.Skip%2A> 다음 노드를 가져오려면).</span><span class="sxs-lookup"><span data-stu-id="abb0f-161">After you obtain a subtree reader, you must call <xref:System.Xaml.XamlReader.Read%2A> on it to obtain a current node (or call <xref:System.Xaml.XamlReader.Skip%2A> to obtain a next node).</span></span> <span data-ttu-id="abb0f-162">자동으로 가져오지 초기 노드 위치를 하위 트리에서 판독기를 만들 때.</span><span class="sxs-lookup"><span data-stu-id="abb0f-162">You do not automatically obtain an initial node position from the subtree reader when you create it.</span></span>  
  
 <span data-ttu-id="abb0f-163">호출 하 여 사용 하는 판독기 <xref:System.Xaml.XamlReader.ReadSubtree%2A> 이 기본값에서 구현 되는 내부 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-163">The reader you obtain by calling <xref:System.Xaml.XamlReader.ReadSubtree%2A> from this default implementation is an internal class.</span></span> <span data-ttu-id="abb0f-164">내부 클래스 동작을 기반으로 합니다 <xref:System.Xaml.XamlReader> 구현 되는 때 사용 되는 <xref:System.Xaml.XamlReader.ReadSubtree%2A> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-164">The internal class bases its behavior on the <xref:System.Xaml.XamlReader> implementation that is being used when <xref:System.Xaml.XamlReader.ReadSubtree%2A> is called.</span></span> <span data-ttu-id="abb0f-165">내부 클래스의 목적은를 래핑하는 <xref:System.Xaml.XamlReader.Read%2A> 및 일반 이동 동작 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-165">The purpose of the internal class is to wrap the <xref:System.Xaml.XamlReader.Read%2A> and general traversal behavior.</span></span> <span data-ttu-id="abb0f-166">순회 추적 하 여 의도 한 하위 트리 내에 머물게 <xref:System.Xaml.XamlNodeType.StartMember> / <xref:System.Xaml.XamlNodeType.EndMember> 쌍 또는 <xref:System.Xaml.XamlNodeType.StartObject> / <xref:System.Xaml.XamlNodeType.EndObject> 쌍입니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-166">The traversal stays within the intended subtree by keeping track of <xref:System.Xaml.XamlNodeType.StartMember>/<xref:System.Xaml.XamlNodeType.EndMember> pairs or <xref:System.Xaml.XamlNodeType.StartObject>/<xref:System.Xaml.XamlNodeType.EndObject> pairs.</span></span> <span data-ttu-id="abb0f-167">또한 올바르게 반환 `false` 에 대 한 <xref:System.Xaml.XamlReader.Read%2A> 하 고 `true` 에 대 한 <xref:System.Xaml.XamlReader.IsEof%2A> 때 판독기가 끝에는 하위 트리의 진입점에 의해 정의 된 대로 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-167">It also correctly returns `false` for <xref:System.Xaml.XamlReader.Read%2A> and `true` for <xref:System.Xaml.XamlReader.IsEof%2A> when the reader is at the end of the subtree, as defined by its entry point.</span></span> <span data-ttu-id="abb0f-168">일반적으로 가정 하는 모든 <xref:System.Xaml.XamlReader> 하위 트리에서 판독기에서 호출 하는 API는 전체로 동일 하 게 구현 <xref:System.Xaml.XamlReader> 동작 경계 순회를 제외 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-168">In general, you assume that any <xref:System.Xaml.XamlReader> API you call from a subtree reader has the same implementation as the overall <xref:System.Xaml.XamlReader> except for the traversal bounding behavior.</span></span>  
  
 <span data-ttu-id="abb0f-169">그러나 <xref:System.Xaml.XamlReader.ReadSubtree%2A> 가상이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-169">However, <xref:System.Xaml.XamlReader.ReadSubtree%2A> is virtual.</span></span> <span data-ttu-id="abb0f-170">따라서 특정 <xref:System.Xaml.XamlReader> 구현에서 다른 동작을 제공할 수는 <xref:System.Xaml.XamlReader> 내부 래퍼 동작으로 <xref:System.Xaml.XamlReader> 구현을 반환 하 여 하위 트리에서 판독기 기능을 비활성화할 수도 있습니다 <xref:System.NotImplementedException> 또는 기타 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-170">Therefore, a specific <xref:System.Xaml.XamlReader> implementation can provide behavior that differs from the <xref:System.Xaml.XamlReader> internal wrapper behavior; and a <xref:System.Xaml.XamlReader> implementation can even disable subtree reader functionality by returning <xref:System.NotImplementedException> or other exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlReader.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="abb0f-171">파생 클래스에서 구현된 경우 정보 집합에 대한 XAML 스키마 컨텍스트 정보를 제공하는 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-171">When implemented in a derived class, gets an object that provides XAML schema context information for the information set.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="abb0f-172">정보 집합에 대한 XAML 스키마 컨텍스트 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-172">An object that provides XAML schema context information for the information set.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.SchemaContext" />
        <altmember cref="P:System.Xaml.XamlXmlReader.SchemaContext" />
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Skip();" />
      <MemberSignature Language="F#" Value="abstract member Skip : unit -&gt; unit&#xA;override this.Skip : unit -&gt; unit" Usage="xamlReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="abb0f-173">현재 노드를 건너뛰고 판독기 위치를 다음 노드로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-173">Skips the current node and advances the reader position to the next node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abb0f-174">건너뛴 후 <xref:System.Xaml.XamlReader.Read%2A> 는 기본적으로 라고 <xref:System.Xaml.XamlReader.Skip%2A> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-174">Once skipped, <xref:System.Xaml.XamlReader.Read%2A> is called by the default <xref:System.Xaml.XamlReader.Skip%2A> implementation.</span></span> <span data-ttu-id="abb0f-175">일반적으로 호출 하지 않으면 <xref:System.Xaml.XamlReader.Skip%2A> 고 <xref:System.Xaml.XamlReader.Read%2A> 순서로 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-175">You typically do not call <xref:System.Xaml.XamlReader.Skip%2A> and <xref:System.Xaml.XamlReader.Read%2A> in sequence.</span></span>  
  
 <span data-ttu-id="abb0f-176">기본에서 <xref:System.Xaml.XamlReader.Skip%2A> 구현에서 다른 조치를 따라 <xref:System.Xaml.XamlReader.NodeType%2A> 가 현재 판독기 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-176">In the default <xref:System.Xaml.XamlReader.Skip%2A> implementation, different actions are taken depending on which <xref:System.Xaml.XamlReader.NodeType%2A> the reader position is currently on.</span></span> <span data-ttu-id="abb0f-177">가 현재 판독기 위치 하는 경우는 <xref:System.Xaml.XamlNodeType.StartMember> 또는 <xref:System.Xaml.XamlNodeType.StartObject>, 멤버 또는 개체를 건너뜁니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-177">If the reader position is currently on a <xref:System.Xaml.XamlNodeType.StartMember> or <xref:System.Xaml.XamlNodeType.StartObject>, that member or object is skipped.</span></span> <span data-ttu-id="abb0f-178">다른 <xref:System.Xaml.XamlReader.NodeType%2A> 값에 아무 작업도 호출 이외의 <xref:System.Xaml.XamlReader.Read%2A> 현재 위치에서.</span><span class="sxs-lookup"><span data-stu-id="abb0f-178">For other <xref:System.Xaml.XamlReader.NodeType%2A> values, no action is taken other than calling <xref:System.Xaml.XamlReader.Read%2A> from the current position.</span></span>  
  
 <span data-ttu-id="abb0f-179">하위 트리에서 판독기를 호출할 수 <xref:System.Xaml.XamlReader.Skip%2A>, 동작이 제한 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-179">Subtree readers can call <xref:System.Xaml.XamlReader.Skip%2A>, with behavior restrictions.</span></span> <span data-ttu-id="abb0f-180">자세한 내용은의 "하위 트리에서 판독기" 섹션을 참조 하세요 <xref:System.Xaml.XamlReader>, 참조 또는 <xref:System.Xaml.XamlReader.ReadSubtree%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-180">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 <span data-ttu-id="abb0f-181">노드 트리 동작 <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> 동등 XML 메시지를 기반으로 <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-181">The node tree behavior of <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> is based on the XML equivalent <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="abb0f-182">기반으로 합니다 <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType> 동작 동등성 <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> 노드와 해당 하위 트리를 뿐 아니라 단일 항목 노드를 건너뜁니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-182">Based on the <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType> behavior equivalence, <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> skips the node and its subtree, not just the single entry node.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="abb0f-183">
            <see cref="T:System.Xaml.XamlReader" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-183">Releases all resources used by the current instance of the <see cref="T:System.Xaml.XamlReader" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Type" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : System.Xaml.XamlType" Usage="System.Xaml.XamlReader.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="abb0f-184">파생 클래스에서 구현된 경우 현재 노드의 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-184">When implemented in a derived class, gets the <see cref="T:System.Xaml.XamlType" /> of the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="abb0f-185">현재 노드의 <see cref="T:System.Xaml.XamlType" />이거나, 현재 판독기 위치가 개체에 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-185">The <see cref="T:System.Xaml.XamlType" /> of the current node; or <see langword="null" />, if the current reader position is not on an object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="abb0f-186">하위 트리에서 판독기를 호출할 수 <xref:System.Xaml.XamlReader.Type%2A>, 동작이 제한 합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-186">Subtree readers can call <xref:System.Xaml.XamlReader.Type%2A>, with behavior restrictions.</span></span> <span data-ttu-id="abb0f-187">자세한 내용은의 "하위 트리에서 판독기" 섹션을 참조 하세요 <xref:System.Xaml.XamlReader>, 참조 또는 <xref:System.Xaml.XamlReader.ReadSubtree%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="abb0f-187">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Type" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Type" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Xaml.XamlReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="abb0f-188">파생 클래스에서 구현되는 경우 현재 노드의 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-188">When implemented in a derived class, gets the value of the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="abb0f-189">현재 노드의 값이거나, 현재 판독기 위치가 <see cref="F:System.Xaml.XamlNodeType.Value" /> 노드 형식에 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="abb0f-189">The value of the current node; or <see langword="null" />, if the current reader position is not on a <see cref="F:System.Xaml.XamlNodeType.Value" /> node type.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Value" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Value" />
      </Docs>
    </Member>
  </Members>
</Type>