<Type Name="XamlWriter" FullName="System.Xaml.XamlWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b71cdea6ca112180aeed7666891007d1081a51da" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36443609" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XamlWriter : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XamlWriter extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlWriter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XamlWriter&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlWriter abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type XamlWriter = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="82b06-101">XAML 작성기에 대한 기본 구현 및 기본 클래스 정의를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="82b06-101">Provides default implementation and base class definitions for a XAML writer.</span>
      </span>
      <span data-ttu-id="82b06-102">이것은 작동 중인 기본 XAML 작성기가 아니므로 <see cref="T:System.Xaml.XamlWriter" />에서 파생하여 해당 추상 멤버를 구현하거나 기존의 <see cref="T:System.Xaml.XamlWriter" /> 파생 클래스를 사용해야 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="82b06-102">This is not a working default XAML writer; you must either derive from <see cref="T:System.Xaml.XamlWriter" /> and implement its abstract members, or use an existing <see cref="T:System.Xaml.XamlWriter" /> derived class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82b06-103">두 개의 가장 관련성이 높은 실제 파생 클래스 <xref:System.Xaml.XamlWriter> 됩니다는 <xref:System.Xaml.XamlXmlWriter> 및 <xref:System.Xaml.XamlObjectWriter> 클래스를 설명 하는 다음 세부 정보:</span><span class="sxs-lookup"><span data-stu-id="82b06-103">The two most relevant practical derived classes of <xref:System.Xaml.XamlWriter> are the <xref:System.Xaml.XamlXmlWriter> and <xref:System.Xaml.XamlObjectWriter> classes, as the following details explain:</span></span>  
  
-   <span data-ttu-id="82b06-104"><xref:System.Xaml.XamlXmlWriter> XAML 노드 집합을 처리 하 고 XML 텍스트 파일을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="82b06-104"><xref:System.Xaml.XamlXmlWriter> processes a XAML node set and produces an XML text file.</span></span> <span data-ttu-id="82b06-105">이 클래스는 serialization에 대 한 또는 XAML의 메모리 내 표현으로 작동 하 고 XAML 파일 출력을 생성 하는 도구 작업의 일부로 서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82b06-105">This class might be used for serialization or as part of the function of a tool that works with in-memory representation of XAML and produces XAML file output.</span></span>  
  
-   <span data-ttu-id="82b06-106"><xref:System.Xaml.XamlObjectWriter> XAML 노드 집합을 처리 하 고 개체 그래프를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="82b06-106"><xref:System.Xaml.XamlObjectWriter> processes a XAML node set and produces an object graph.</span></span> <span data-ttu-id="82b06-107">이 클래스는 기술 XAML 파서에의 전체 또는 일부 사용자 지정의 일부로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="82b06-107">This class might be used as part of a full or partial customization of a technology's XAML parser.</span></span>  
  
 <span data-ttu-id="82b06-108"><xref:System.Xaml.XamlWriterSettings> 사용 되는 설정에 대 한 클래스는 <xref:System.Xaml.XamlWriter>; 그러나 기본적으로 <xref:System.Xaml.XamlWriterSettings> 클래스 특정 설정을 저장 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="82b06-108"><xref:System.Xaml.XamlWriterSettings> is a class for settings that are used by a <xref:System.Xaml.XamlWriter>; however, by default, the <xref:System.Xaml.XamlWriterSettings> class does not hold any specific settings.</span></span> <span data-ttu-id="82b06-109"><xref:System.Xaml.XamlWriter> 기본 생성자를 인수로이 설정 클래스를 사용 하지 않습니다 없고 다른 <xref:System.Xaml.XamlWriter> 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="82b06-109">The <xref:System.Xaml.XamlWriter> base constructor does not use this settings class as an argument, nor does any other <xref:System.Xaml.XamlWriter> member.</span></span> <span data-ttu-id="82b06-110">대신,는 <xref:System.Xaml.XamlXmlWriter> 및 <xref:System.Xaml.XamlObjectWriter> 클래스 생성 인수로 고유한 설정 클래스를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="82b06-110">Instead, the <xref:System.Xaml.XamlXmlWriter> and <xref:System.Xaml.XamlObjectWriter> classes include their own settings classes as construction arguments.</span></span> <span data-ttu-id="82b06-111">이러한 설정을 클래스는 <xref:System.Xaml.XamlXmlWriterSettings> 및 <xref:System.Xaml.XamlObjectWriterSettings>합니다.</span><span class="sxs-lookup"><span data-stu-id="82b06-111">These settings classes are <xref:System.Xaml.XamlXmlWriterSettings> and <xref:System.Xaml.XamlObjectWriterSettings>.</span></span> <span data-ttu-id="82b06-112">실제 설정 값을 정의 하 고 기반으로 하는 설정 클래스 <xref:System.Xaml.XamlWriterSettings>사용할 수 있도록는 <xref:System.Xaml.XamlWriterSettings> 병합 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="82b06-112">The settings classes define actual settings values and are based on <xref:System.Xaml.XamlWriterSettings>, so that they can use the <xref:System.Xaml.XamlWriterSettings> merge feature.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlWriter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="82b06-113">
            <see cref="T:System.Xaml.XamlWriter" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-113">Initializes a new instance of the <see cref="T:System.Xaml.XamlWriter" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="xamlWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="82b06-114">XAML 작성기 개체를 닫습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-114">Closes the XAML writer object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82b06-115">기본 구현에서 호출 <xref:System.Xaml.XamlWriter.Close%2A> 호출은 <xref:System.Xaml.XamlWriter.Dispose%2A> 메서드는 `isDisposing` 매개 변수로 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="82b06-115">In the base implementation, calling <xref:System.Xaml.XamlWriter.Close%2A> calls the <xref:System.Xaml.XamlWriter.Dispose%2A> method with the `isDisposing` parameter as `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="xamlWriter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="82b06-116">관리되는 리소스를 해제하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-116">
              <see langword="true" /> to release the managed resources; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="82b06-117">
            <see cref="T:System.Xaml.XamlWriter" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-117">Releases the unmanaged resources used by the <see cref="T:System.Xaml.XamlWriter" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="82b06-118">가져오려는 기본 클래스를 호출 해야 <xref:System.Xaml.XamlWriter.IsDisposed%2A>  =  `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="82b06-118">You must call the base class to get <xref:System.Xaml.XamlWriter.IsDisposed%2A> = `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlWriter.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Xaml.XamlWriter.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="82b06-119">
            <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />가 호출되었는지 여부를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-119">Gets whether <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" /> has been called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="82b06-120">
            <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />가 호출되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-120">
              <see langword="true" /> if <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" /> has been called; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlWriter.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlWriter.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="82b06-121">파생 클래스에서 구현된 경우 활성 XAML 스키마 컨텍스트를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-121">When implemented in a derived class, gets the active XAML schema context.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="82b06-122">활성 XAML 스키마 컨텍스트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-122">The active XAML schema context.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="82b06-123">
            <see cref="M:System.IDisposable.Dispose" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-123">See <see cref="M:System.IDisposable.Dispose" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndMember">
      <MemberSignature Language="C#" Value="public abstract void WriteEndMember ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndMember() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.WriteEndMember" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndMember ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndMember();" />
      <MemberSignature Language="F#" Value="abstract member WriteEndMember : unit -&gt; unit" Usage="xamlWriter.WriteEndMember " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="82b06-124">파생 클래스에서 구현되는 경우 끝 멤버 노드의 표현을 생성합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-124">When implemented in a derived class, produces the representation of an end member node.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public abstract void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteEndObject();" />
      <MemberSignature Language="F#" Value="abstract member WriteEndObject : unit -&gt; unit" Usage="xamlWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="82b06-125">파생 클래스에서 구현되는 경우 끝 개체 노드의 표현을 생성합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-125">When implemented in a derived class, produces the representation of an end object node.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteGetObject">
      <MemberSignature Language="C#" Value="public abstract void WriteGetObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteGetObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.WriteGetObject" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteGetObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteGetObject();" />
      <MemberSignature Language="F#" Value="abstract member WriteGetObject : unit -&gt; unit" Usage="xamlWriter.WriteGetObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="82b06-126">파생 클래스에서 구현되는 경우 개체가 입력 XAML 노드 집합에서 개별적인 개체 값으로 지정되는 것이 아니라 기본값이거나 설정 중인 속성의 암시적인 값이면 개체를 생성합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-126">When implemented in a derived class, produces an object for cases where the object is a default or implicit value of the property being set, instead of being specified as a discrete object value in the input XAML node set.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNamespace">
      <MemberSignature Language="C#" Value="public abstract void WriteNamespace (System.Xaml.NamespaceDeclaration namespaceDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNamespace(class System.Xaml.NamespaceDeclaration namespaceDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteNamespace(System::Xaml::NamespaceDeclaration ^ namespaceDeclaration);" />
      <MemberSignature Language="F#" Value="abstract member WriteNamespace : System.Xaml.NamespaceDeclaration -&gt; unit" Usage="xamlWriter.WriteNamespace namespaceDeclaration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceDeclaration" Type="System.Xaml.NamespaceDeclaration" />
      </Parameters>
      <Docs>
        <param name="namespaceDeclaration">
          <span data-ttu-id="82b06-127">작성할 네임스페이스 선언입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-127">The namespace declaration to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="82b06-128">파생 클래스에서 구현되는 경우 XAML 네임스페이스 선언 노드를 작성합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-128">When implemented in a derived class, writes a XAML namespace declaration node.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNode">
      <MemberSignature Language="C#" Value="public void WriteNode (System.Xaml.XamlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNode(class System.Xaml.XamlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNode (reader As XamlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNode(System::Xaml::XamlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteNode : System.Xaml.XamlReader -&gt; unit" Usage="xamlWriter.WriteNode reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="82b06-129">노드 확인에 사용할 판독기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-129">The reader to use for node determination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="82b06-130">XAML 판독기(<see cref="P:System.Xaml.XamlReader.NodeType" />)의 노드 형식을 기반으로 전환을 수행하고 작성기 구현을 위한 관련 <see langword="Write" /> 메서드를 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-130">Performs switching based on node type from the XAML reader (<see cref="P:System.Xaml.XamlReader.NodeType" />) and calls the relevant <see langword="Write" /> method for the writer implementation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="notes-for-inheritors"></a><span data-ttu-id="82b06-131">상속자 참고 사항</span><span class="sxs-lookup"><span data-stu-id="82b06-131">Notes for Inheritors</span></span>  
 <span data-ttu-id="82b06-132"><xref:System.Xaml.XamlWriter.WriteNode%2A> 모든 기존에 대 한 실제 구현이 있기 때문에 메서드는 가상 메서드 없습니다 <xref:System.Xaml.XamlNodeType> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="82b06-132">The <xref:System.Xaml.XamlWriter.WriteNode%2A> method is not a virtual method because it has practical implementation for all existing <xref:System.Xaml.XamlNodeType> values.</span></span> <span data-ttu-id="82b06-133">에 따라 <xref:System.Xaml.XamlNodeType>, <xref:System.Xaml.XamlWriter.WriteNode%2A> 호출는 `Write` 특정 노드 형식에 전용 가상 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="82b06-133">Based on <xref:System.Xaml.XamlNodeType>, <xref:System.Xaml.XamlWriter.WriteNode%2A> calls into the `Write` virtual members that are dedicated to particular node types.</span></span>  
  
 <span data-ttu-id="82b06-134">XAML 형식 시스템과 XAML 노드 스트림 개념 이므로 새를 확장 하는 고급 XAML 쓰기 시나리오가 있는 경우 노드 형식을 정의 사용 하지 않는 <xref:System.Xaml.XamlWriter.WriteNode%2A> 논리에서 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="82b06-134">If you have an advanced XAML writing scenario that expands the XAML type system and XAML node stream concept so that new node types are defined, do not use <xref:System.Xaml.XamlWriter.WriteNode%2A> calls in your logic.</span></span> <span data-ttu-id="82b06-135">대신 클래스 또는 virtual 재정의 스위칭 논리 노드 형식에 대 한 사용자 고유의 대안을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="82b06-135">You must instead provide your own alternative for node-type switching logic in the class or in virtual overrides.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="82b06-136">
            <paramref name="reader" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-136">
              <paramref name="reader" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="82b06-137">기본 구현에 없는 <see cref="T:System.Xaml.XamlNodeType" />이 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-137">The default implementation encountered a <see cref="T:System.Xaml.XamlNodeType" /> that is not in the default enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartMember">
      <MemberSignature Language="C#" Value="public abstract void WriteStartMember (System.Xaml.XamlMember xamlMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartMember(class System.Xaml.XamlMember xamlMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.WriteStartMember(System.Xaml.XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartMember(System::Xaml::XamlMember ^ xamlMember);" />
      <MemberSignature Language="F#" Value="abstract member WriteStartMember : System.Xaml.XamlMember -&gt; unit" Usage="xamlWriter.WriteStartMember xamlMember" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlMember" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="xamlMember">
          <span data-ttu-id="82b06-138">작성할 멤버 노드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-138">The member node to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="82b06-139">파생 클래스에서 구현되는 경우 시작 멤버 노드의 표현을 작성합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-139">When implemented in a derived class, writes the representation of a start member node.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public abstract void WriteStartObject (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartObject(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.WriteStartObject(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteStartObject (type As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteStartObject(System::Xaml::XamlType ^ type);" />
      <MemberSignature Language="F#" Value="abstract member WriteStartObject : System.Xaml.XamlType -&gt; unit" Usage="xamlWriter.WriteStartObject type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="82b06-140">작성할 개체의 XAML 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-140">The XAML type of the object to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="82b06-141">파생 클래스에서 구현되는 경우 시작 개체 노드의 표현을 작성합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-141">When implemented in a derived class, writes the representation of a start object node.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public abstract void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlWriter.WriteValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteValue : obj -&gt; unit" Usage="xamlWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="82b06-142">작성할 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-142">The value to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="82b06-143">파생 클래스에서 구현되는 경우 값 노드를 작성합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="82b06-143">When implemented in a derived class, writes a value node.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>