<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlMember.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5284b342cd8ec18017e3ac4ac33597d46dbc3c75f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">284b342cd8ec18017e3ac4ac33597d46dbc3c75f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlMember">
          <source>Provides the XAML type system identifier for members of XAML types.</source>
          <target state="translated">XAML 형식의 멤버에 대해 XAML 형식 시스템 식별자를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlMember">
          <source>The identifier is used by XAML readers and XAML writers during processing of member nodes (when the XAML reader is positioned on a <ph id="ph1">&lt;see cref="F:System.Xaml.XamlNodeType.StartMember" /&gt;</ph>) and also for general XAML type system logic.</source>
          <target state="translated">멤버 노드를 처리하는 동안 XAML 판독기 및 XAML 작성기가 사용하는 식별자(XAML 판독기가 <ph id="ph1">&lt;see cref="F:System.Xaml.XamlNodeType.StartMember" /&gt;</ph>에 위치한 경우)이며, 일반 XAML 형식 시스템 논리에도 사용됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> can use three methodologies for returning information about a XAML member: standard common language runtime (CLR) reflection; a reference-only reflection technique calling internal APIs that use optimized bit flags; or calling into virtual overrides of the <ph id="ph2">`Lookup*`</ph> API that is provided by possible <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> subclasses.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> XAML 멤버에 대 한 정보를 반환 하기 위한 세 가지 방법론 צ ְ ײ: 표준 공용 언어 런타임 (CLR) 리플렉션; 내부 호출 하는 참조 전용 리플렉션 기술을 Api를 사용 하 여 최적화 된 비트 플래그; 재정의를 가상 호출 또는 <ph id="ph2">`Lookup*`</ph> 가능한에서 제공 되는 API <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> 하위 클래스입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>For most uses of .NET Framework XAML Services APIs and the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> API, you use the default XAML schema context.</source>
          <target state="translated">.NET Framework XAML 서비스 Api의 대부분의 사용자에 및 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 기본 XAML 스키마 컨텍스트를 사용 하면 API를 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The default XAML schema context for .NET Framework XAML Services uses CLR backing for the type system.</source>
          <target state="translated">.NET Framework XAML 서비스에 대 한 기본 XAML 스키마 컨텍스트는 CLR 형식 시스템에 대 한 백업을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>This enables the XAML readers and XAML writers to work with any type or member that is defined in, or otherwise available to, the CLR and its reflection techniques.</source>
          <target state="translated">그러면 XAML 판독기 및 XAML 작성기가 모든 형식 또는 정의 된 멤버에서는 하거나 그렇지 않으면 사용할 수 있는, CLR 및 리플렉션 기술 작업할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Lookup* APIs and XamlMember Derived Classes</source>
          <target state="translated">조회 Api 및 XamlMember 파생 클래스</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> defines several virtual members that derived classes might override.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 여러 정의 파생 클래스가 가상 멤버를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>These members have names that always start with the string <ph id="ph1">`Lookup`</ph>.</source>
          <target state="translated">이러한 멤버는 항상 문자열으로 시작 하는 이름이 <ph id="ph1">`Lookup`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The remainder of the API name then references the property that the virtual method influences.</source>
          <target state="translated">API의 나머지 부분에서는 이름을 지정 하는 가상 메서드가 속성 참조 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>For example, a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class might override <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> to influence what the base-defined property <ph id="ph3">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph> returns in a derived class.</source>
          <target state="translated">예를 들어 한 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 파생된 클래스에서 재정의 될 수 있습니다 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> 어떤 기본 정의 속성에 영향을 줍니다 <ph id="ph3">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph> 파생된 클래스에서 반환 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You can predict return values for such properties in <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> or existing derived classes by reading the documentation for the relevant <ph id="ph2">`Lookup*`</ph> methods.</source>
          <target state="translated">에 해당 속성에 대 한 반환 값을 예측할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 또는 파생 클래스의 이름을 관련에 대 한 설명서를 참조 하 여 기존 <ph id="ph2">`Lookup*`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The purpose of the <ph id="ph1">`Lookup*`</ph> methods is to provide a XAML type system extension technique that incorporates the <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> base class.</source>
          <target state="translated">용도 <ph id="ph1">`Lookup*`</ph> 메서드를 통합 하는 XAML 형식 시스템 확장 기술을 제공 하는 것은 <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>By deriving from <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> and overriding the <ph id="ph2">`Lookup`</ph> virtual members, you can define the concept of a XAML member for a XAML schema in a XAML type system without being tied to the specifics of a backing type system or technology.</source>
          <target state="translated">파생 하 여 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 재정의 <ph id="ph2">`Lookup`</ph> 가상 멤버를 정의할 수 있습니다 XAML 스키마에 대 한 XAML 멤버 라는 개념 XAML 형식 시스템의 지원 형식 시스템 또는 기술 세부 사항에 국한 되지 않고 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You can also use a provided XAML schema context under this scheme and still return the results you want.</source>
          <target state="translated">또한이 체계에서 제공된 하는 XAML 스키마 컨텍스트를 사용할 수 있으며 원하는 결과 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>As an example, consider the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> property <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>.</source>
          <target state="translated">예를 들어 고려는 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 속성 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>This property informs callers that operations such as using a <ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph> for serialization can write a value for this member on a target object.</source>
          <target state="translated">이 속성에 사용 하는 등 작업 호출자에 게 알립니다는 <ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph> serialization 대상 개체에서이 멤버에 대 한 값을 쓸 수에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>In the default implementation, the determination of whether the member is writable is made by using reflection techniques against the backing CLR <ph id="ph1">&lt;xref:System.Type&gt;</ph> and its members (the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>).</source>
          <target state="translated">기본 구현에서 지원 CLR에 대해 리플렉션을 기술을 사용 하 여 멤버 쓰기 가능 인지 여부를 결정이 이루어집니다 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 및 해당 멤버 (의 <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Therefore, by default, the XAML type system depends on the CLR type system.</source>
          <target state="translated">따라서 기본적으로 XAML 형식 시스템 CLR 형식 시스템에 종속 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>However, you can remove this dependency for your XAML type system reporting of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> by overriding the API <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph>.</source>
          <target state="translated">그러나 프로그램 XAML 형식 시스템의 보고에 대 한이 종속성을 제거할 수 있습니다 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> API를 재정의 하 여 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Within your override, you can use other determinations, such as metadata that is specific to your technology, a master lookup table that is optimized for a fixed XAML vocabulary, or a variety of other strategies for determining whether a XAML member is writable in your XAML vocabulary.</source>
          <target state="translated">재정의 시, 기술, XAML 멤버에는 쓰기 가능 인지 확인 하기 위한 다른 전략의 다양 한 또는 고정된 된 XAML 어휘에 대 한 최적화 된 마스터 조회 테이블에만 적용 되는 메타 데이터와 같이 다른 판단 사용할 수 있습니다 프로그램 XAML 어휘입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Constructing XamlMember Without XAML Schema Context</source>
          <target state="translated">XAML 스키마 컨텍스트 없이 XamlMember 생성</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Most constructors of <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> require a <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> as part of their initialization.</source>
          <target state="translated">생성자의 대부분 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 필요는 <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> 초기화의 일부로 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> is also necessary for many internal <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> operations, such as obtaining information that is being forwarded from the backing type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> 많은 내부에 필요한 이기도 <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> 지원 형식에서 전달 되는 정보를 가져오는 등의 작업입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>When you are working with the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> API, you typically have a <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> that is available from a surrounding construct such as a <ph id="ph3">&lt;xref:System.Xaml.XamlWriter&gt;</ph>.</source>
          <target state="translated">사용 하 여 작업할 때의 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> API, 일반적으로 필요는 <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> 같은 주변 생성에서 사용 되는 <ph id="ph3">&lt;xref:System.Xaml.XamlWriter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>In this case, you can pass the <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> reference through to all XAML type system calls that require a XAML schema context.</source>
          <target state="translated">이 경우 전달할 수 있습니다는 <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> XAML 스키마 컨텍스트를 필요로 하는 모든 XAML 형식 시스템 호출을 통해 참조 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>One specific constructor, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph>, does not require a <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>.</source>
          <target state="translated">하나의 특정 생성자 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph>, 필요 하지 않습니다는 <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>However, a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that is constructed with the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature returns <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">그러나 한 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 를 사용 하 여 생성 되는 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> 서명을 반환 <ph id="ph3">`true`</ph> 에 대 한 <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, such a member cannot be written into an object graph.</source>
          <target state="translated">과 관련 된 로드 경로 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, 이러한 멤버는 개체 그래프에 쓸 수 없습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Using the .NET Framework XAML services implementation, the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> call throws a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> reports <ph id="ph4">`true`</ph> for <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">.NET Framework XAML 서비스 구현에서 사용 하는 <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> throw 호출는 <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> 때 관련 <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> 보고서 <ph id="ph4">`true`</ph> 에 대 한 <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You should not construct a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that has a value of <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> unless your implementation can handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior.</source>
          <target state="translated">구성 하지 않아야는 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 의 값이 <ph id="ph2">`true`</ph> 에 대 한 <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> 구현에서 예외를 처리할 수 없는 경우 <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, 다른 방법으로 조정할 수 있고는 <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> 동작 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>For example, one or more of the  following might be true of your implementation:</source>
          <target state="translated">예를 들어, 다음 중 하나 이상을 구현 true 수 있습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The XAML schema context is available later.</source>
          <target state="translated">XAML 스키마 컨텍스트는 나중에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You use a member invoker pattern.</source>
          <target state="translated">멤버 호출자 패턴을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You deliberately override <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> in a custom XAML writer.</source>
          <target state="translated">의도 한 대로 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> 사용자 지정 XAML 작성기에 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlMember">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> that represents the event member.</source>
          <target state="translated">이벤트 멤버를 나타내는 CLR 형식 시스템 <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">멤버를 정규화하는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using CLR type system <ph id="ph2">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> and a <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>.</source>
          <target state="translated">CLR 형식 시스템 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>를 사용하여 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
          <source>Use this constructor if the member represents an event (event handler connection-point property).</source>
          <target state="translated">멤버가 이벤트 (이벤트 처리기 연결 지점 속성)을 나타내는 경우이 생성자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> that represents the property member.</source>
          <target state="translated">속성 멤버를 나타내는 CLR 형식 시스템 <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">멤버를 정규화하는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using CLR type system <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> and a <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>.</source>
          <target state="translated">CLR 형식 시스템 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>를 사용하여 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
          <source>Use this constructor if the member represents a property (and specifically is not an event handler connection).</source>
          <target state="translated">이 생성자를 사용 하 여 멤버 속성을 나타냅니다 (특히 되지 않은 경우 이벤트 처리기 연결).</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> that represents the event member.</source>
          <target state="translated">이벤트 멤버를 나타내는 CLR 형식 시스템 <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">멤버를 정규화하는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that handles run-time reflection calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>에 대한 런타임 리플렉션 호출을 처리하는 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using CLR type system <ph id="ph2">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> and a <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>, including <ph id="ph4">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information.</source>
          <target state="translated">CLR 형식 시스템 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>를 사용하여 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 클래스의 새 인스턴스를 <ph id="ph4">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 정보와 함께 초기화합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Use this constructor if the member represents an event (or an event handler connection-point property).</source>
          <target state="translated">멤버가 이벤트 (또는 이벤트 처리기 연결 지점 속성)을 나타내는 경우이 생성자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> that represents the property member.</source>
          <target state="translated">속성 멤버를 나타내는 CLR 형식 시스템 <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">멤버를 정규화하는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that handles run-time invocation calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>에 대한 런타임 호출을 처리하는 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using reflection <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> and a <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>, including <ph id="ph4">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information.</source>
          <target state="translated">리플렉션 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>를 사용하여 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 클래스의 새 인스턴스를 <ph id="ph4">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 정보와 함께 초기화합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Use this constructor only if the member represents a property and if it is not an event handler connection.</source>
          <target state="translated">멤버 속성을 나타내는 경우에 한 이벤트 처리기 연결 되지 않은 경우이 생성자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The string name of the attachable event.</source>
          <target state="translated">연결 가능한 이벤트의 문자열 이름입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the handler <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method of the attachable member's backing implementation.</source>
          <target state="translated">연결 가능한 멤버의 지원을 구현하는 처리기 <ph id="ph2">&lt;see langword="Add" /&gt;</ph> 메서드에 대한 CLR 형식 시스템 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">멤버를 정규화하는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class for a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that represents an attachable event.</source>
          <target state="translated">연결 가능한 이벤트를 나타내는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>에 대해 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>Use this constructor if the member represents an attachable event member.</source>
          <target state="translated">멤버가 연결할 수 있는 이벤트 멤버를 나타내는 경우이 생성자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>The string name of the member.</source>
          <target state="translated">멤버의 문자열 이름입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> information for the declaring type.</source>
          <target state="translated">선언 형식에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 정보입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the member is attachable; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">멤버가 연결 가능하다는 것을 나타내려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using a string name and declaring <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> information.</source>
          <target state="translated">문자열 이름을 사용하고 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 정보를 선언하여 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that is constructed with this signature has significant limitations.</source>
          <target state="translated">이 서명을 사용하여 생성된 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>에는 중요한 제한이 있습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that is constructed with the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature returns <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 를 사용 하 여 생성 되는 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> 서명을 반환 <ph id="ph3">`true`</ph> 에 대 한 <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, such a member cannot be written into an object graph.</source>
          <target state="translated">과 관련 된 로드 경로 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, 이러한 멤버는 개체 그래프에 쓸 수 없습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>Using the .NET Framework XAML Services implementation, the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> call throws a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> reports <ph id="ph4">`true`</ph> for <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">.NET Framework XAML 서비스 구현에서 사용 하는 <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> throw 호출는 <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> 때 관련 <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> 보고서 <ph id="ph4">`true`</ph> 에 대 한 <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>You should not construct a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> with <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph><ph id="ph3">`true`</ph> unless your implementation can handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior.</source>
          <target state="translated">구성 하지 않아야는 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> <ph id="ph3">`true`</ph> 구현에서 예외를 처리할 수 없는 경우 <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, 다른 방법으로 조정할 수 있고는 <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> 동작 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>For example, one or more of the following might be true of your implementation:</source>
          <target state="translated">예를 들어, 다음 중 하나 이상을 구현 true 수 있습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>The XAML schema context is available later.</source>
          <target state="translated">XAML 스키마 컨텍스트는 나중에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>You use a member invoker pattern.</source>
          <target state="translated">멤버 호출자 패턴을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>You deliberately override <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> in a custom XAML writer.</source>
          <target state="translated">의도 한 대로 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> 사용자 지정 XAML 작성기에 있습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> or <ph id="ph2">&lt;paramref name="declaringType" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="declaringType" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The string name of the attachable property.</source>
          <target state="translated">연결 가능한 속성의 문자열 이름입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor of the attachable member's backing implementation.</source>
          <target state="translated">연결 가능한 멤버의 지원을 구현하는 <ph id="ph2">&lt;see langword="get" /&gt;</ph> 접근자에 대한 CLR 형식 시스템 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor of the attachable member's backing implementation.</source>
          <target state="translated">연결 가능한 멤버의 지원을 구현하는 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 접근자에 대한 CLR 형식 시스템 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">멤버를 정규화하는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class for a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that represents an attachable property.</source>
          <target state="translated">연결 가능한 속성을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>에 대해 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>Use this constructor if the member represents an attachable property.</source>
          <target state="translated">멤버가 연결 가능한 속성을 나타내는 경우이 생성자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The string name of the attachable event.</source>
          <target state="translated">연결 가능한 이벤트의 문자열 이름입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the handler <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method of the attachable member's backing implementation.</source>
          <target state="translated">연결 가능한 멤버의 지원을 구현하는 처리기 <ph id="ph2">&lt;see langword="Add" /&gt;</ph> 메서드에 대한 CLR 형식 시스템 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">멤버를 정규화하는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that handles run-time invocation calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>에 대한 런타임 호출을 처리하는 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class for a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that represents an attachable event, including <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information.</source>
          <target state="translated">연결 가능한 이벤트를 나타내는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>에 대해 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 클래스의 새 인스턴스를 <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 정보와 함께 초기화합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Use this constructor if the member represents an attachable event member.</source>
          <target state="translated">멤버가 연결할 수 있는 이벤트 멤버를 나타내는 경우이 생성자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The string name of the attachable property.</source>
          <target state="translated">연결 가능한 속성의 문자열 이름입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor of the attachable member's backing implementation.</source>
          <target state="translated">연결 가능한 멤버의 지원을 구현하는 <ph id="ph2">&lt;see langword="get" /&gt;</ph> 접근자에 대한 CLR 형식 시스템 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor of the attachable member's backing implementation.</source>
          <target state="translated">연결 가능한 멤버의 지원을 구현하는 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 접근자에 대한 CLR 형식 시스템 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">멤버를 정규화하는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that handles run-time invocation calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>에 대한 런타임 호출을 처리하는 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class for a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that represents an attachable property, including <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information.</source>
          <target state="translated">연결 가능한 속성을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>에 대해 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 클래스의 새 인스턴스를 <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> 정보와 함께 초기화합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Use this constructor if the member represents an attachable property member.</source>
          <target state="translated">멤버가 없는 연결 가능한 속성 멤버를 나타내는 경우이 생성자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the type that declares the member that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>와 연관된 멤버를 선언하는 형식의 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the type that declares the member that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>와 연관된 멤버를 선언하는 형식의 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>This value is typically set during initialization and is usually not <ph id="ph1">`null`</ph>.</source>
          <target state="translated">이 값은 일반적으로 초기화 하는 동안 설정 되 고 일반적으로 되지 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> information can be passed in by constructors for initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> 정보를 전달할 수의 생성자에서 초기화에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>By calling directly into base constructors, initialization for <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived classes can omit some of the value-checks that are made in the base class.</source>
          <target state="translated">기본 생성자에 대 한 초기화를 직접 호출 하 여 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 파생 된 클래스의 기본 클래스에 적용 된 값 검사 생략할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>Therefore, the derived initialization can change the reported type-member relationship information of a XAML member so that it no longer aligns in an expected way with the type system information of its underlying CLR declaration.</source>
          <target state="translated">따라서 더 이상 맞추는 필요한 방식에는 기본 CLR 선언 형식 시스템의 정보를 파생 된 초기화 XAML 멤버의 보고 형식 멤버 관계 정보를 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>For any security-critical checks of declaring type information, use the underlying CLR type instead.</source>
          <target state="translated">형식 정보를 선언 하는의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.DeferringLoader">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which is used for deferred loading of XAML declared objects.</source>
          <target state="translated">XAML 선언된 개체의 지연된 로드에 사용되는 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeferringLoader">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> constraint on the generic.</source>
          <target state="translated">제네릭에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 제약 조건이 포함된 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeferringLoader">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDeferringLoader%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDeferringLoader%2A&gt;</ph> 또는 해당 메서드의 특정 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeferringLoader">
          <source>This behavior occurs in cases where the initial internal reflection logic has not already set the information.</source>
          <target state="translated">이 문제는 여기서 초기 내부 리플렉션 논리가 정보가 아직 설정 하지 않은 경우에 발생 합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Gets a list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 개체의 목록을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>These report the members where dependency relationships for initialization order exist relative to this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">초기화 순서에 대한 종속성 관계가 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>를 기준으로 존재하는 경우 해당 멤버를 보고합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 개체의 목록</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDependsOn%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDependsOn%2A&gt;</ph> 또는 해당 메서드의 특정 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>This behavior occurs in cases where the initial internal reflection logic has not already set the information.</source>
          <target state="translated">이 문제는 여기서 초기 내부 리플렉션 논리가 정보가 아직 설정 하지 않은 경우에 발생 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>The <ph id="ph1">`DependsOn`</ph> pattern can be applied to object model cases that deliberately contradict a general XAML rule.</source>
          <target state="translated"><ph id="ph1">`DependsOn`</ph> 패턴 의도적 일반 XAML 규칙을 일치 하지 않는 개체 모델 사례에 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>The general XAML rule is that members of a type that are not passed as initialization text (or by a factory method in XAML 2009) must be able to be assigned in any order.</source>
          <target state="translated">일반적인 XAML 규칙은 초기화 텍스트 (또는 XAML 2009에서 팩터리 메서드에 의해)에 전달 되지 않는 형식의 멤버 순서에 관계 없이 지정할 수 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>By applying a <ph id="ph1">`DependsOn`</ph> pattern to a member, you can instruct XAML writers to always process the referenced member before this member.</source>
          <target state="translated">적용 하 여 한 <ph id="ph1">`DependsOn`</ph> 패턴 멤버에 게 XAML 작성기에 지시할 수 있습니다을 항상이 멤버 보다 먼저 참조 된 멤버를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>You can apply this pattern in situations where the value of the current member requires context or other information that is only available after the other member is set.</source>
          <target state="translated">컨텍스트 또는 다른 구성원을 설정한 후 에서만 사용할 수 있는 기타 정보는 현재 멤버의 값에 필요한 경우에이 패턴을 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>The <ph id="ph1">`DependsOn`</ph> pattern should be applied judiciously and reserved for property scenarios where it serves an architectural purpose.</source>
          <target state="translated"><ph id="ph1">`DependsOn`</ph> 패턴을 신중 하 게 적용 하 고 속성 시나리오 아키텍처 목적으로 사용 하기 위해 예약 되어 해야 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Large numbers of dependencies have the potential to slow down XAML processing.</source>
          <target state="translated">많은 종속성 될 XAML 처리 속도가 느려질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Also, it is possible to produce circular dependencies, in which case the XAML processing behavior is undefined.</source>
          <target state="translated">또한 있기 순환 종속성을 생성 하는 경우 XAML 처리 동작이 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Example <ph id="ph1">`DependsOn`</ph> scenarios from WPF include certain properties on <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.DataTemplate&gt;</ph>, on <ph id="ph4">&lt;xref:System.Windows.Trigger&gt;</ph>, and on <ph id="ph5">&lt;xref:System.Windows.Setter&gt;</ph>.</source>
          <target state="translated">예제 <ph id="ph1">`DependsOn`</ph> 에서 특정 속성을 포함 하는 시나리오에서 WPF <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.DataTemplate&gt;</ph>의 <ph id="ph4">&lt;xref:System.Windows.Trigger&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Windows.Setter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlMember">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">현재 개체가 다른 개체와 같은지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Object)">
          <source>The object to compare with this object.</source>
          <target state="translated">이 개체와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Object)">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">현재 개체가 다른 개체와 같은지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 개체가 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 매개 변수와 같으면 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
          <source>An object to compare with this object.</source>
          <target state="translated">이 개체와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
          <source>Indicates whether the current object is equal to another object of the same type.</source>
          <target state="translated">현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="other" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 개체가 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 매개 변수와 같으면 <ph id="ph2">&lt;paramref name="other" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.GetHashCode">
          <source>Returns the hash code for this object.</source>
          <target state="translated">이 개체에 대한 해시 코드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.GetHashCode">
          <source>An integer hash code.</source>
          <target state="translated">정수 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.GetXamlNamespaces">
          <source>Returns a list of XAML namespaces where this XAML member can exist.</source>
          <target state="translated">이 XAML 멤버가 있을 수 있는 XAML 네임스페이스의 목록을 반환합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.GetXamlNamespaces">
          <source>A list of XAML namespace identifiers as strings.</source>
          <target state="translated">문자열로 제공되는 XAML 네임스페이스 식별자 목록입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.GetXamlNamespaces">
          <source>The default implementation returns the <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=nameWithType&gt;</ph> call result from the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> that is associated with this <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated">기본 구현은 반환 하는 <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=nameWithType&gt;</ph> 호출 결과를 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> 이와 연결 된 <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.Invoker">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>과 연결된 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 구현을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>과 연결된 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>The <ph id="ph1">`Invoker`</ph> pattern is an advanced XAML type system extension technique.</source>
          <target state="translated"><ph id="ph1">`Invoker`</ph> 패턴은 고급 XAML 형식 시스템 확장 기술 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>The <ph id="ph1">`Invoker`</ph> pattern provides a way to inject different schema type mapping behavior, while still using XAML type system definitions from .NET Framework XAML Services.</source>
          <target state="translated"><ph id="ph1">`Invoker`</ph> 패턴은.NET Framework XAML 서비스에서 XAML 형식 시스템 정의 사용 하 여 다른 스키마 형식 매핑 동작을 삽입 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>If a <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph> override returns <ph id="ph2">`null`</ph>, or if the default implementation returns <ph id="ph3">`null`</ph> because it lacks the <ph id="ph4">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> for this <ph id="ph5">&lt;xref:System.Xaml.XamlMember&gt;</ph>, the <ph id="ph6">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> property returns <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph> 반환 재정의 <ph id="ph2">`null`</ph>, 기본 구현은 반환 하는 경우 또는 <ph id="ph3">`null`</ph> 없기 때문에 <ph id="ph4">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> 이 <ph id="ph5">&lt;xref:System.Xaml.XamlMember&gt;</ph>, <ph id="ph6">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> 속성에서 반환 <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph> is the default.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>This is true for most operations that use .NET Framework XAML Services and the default XAML schema context, and where no specific override <ph id="ph1">`Invoker`</ph> patterns are passed for construction of XAML type system entities.</source>
          <target state="translated">이.NET Framework XAML 서비스 및 기본 XAML 스키마 컨텍스트를 사용 하 고 관련 없는 재정의할 경우 대부분의 작업에 대 한 true <ph id="ph1">`Invoker`</ph> XAML 형식 시스템 엔터티 생성을 위한 패턴 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph> 또는 해당 메서드의 특정 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is reported as an ambient property.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 앰비언트 속성으로 보고되는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is reported as an ambient property; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 앰비언트 속성으로 보고되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAmbient%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAmbient%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> 또는 해당 메서드의 특정 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>This behavior occurs in implementations where the initial internal reflection logic has not already set the information.</source>
          <target state="translated">여기서는 초기 내부 리플렉션 논리가 정보가 아직 설정 하지 않은 구현에서이 문제가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>Checking for ambient properties is are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</source>
          <target state="translated">앰비언트 속성에 대 한 검사는 일반적으로 일부 개체 및 형식 한정자에 대 한 앰비언트 사용을 사용 하는 값을 올바르게 작동할 수 있도록 하는 XAML 처리 논리입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>The .NET Framework XAML Services APIs and the default XAML schema context populates this value based on attribution with <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>.</source>
          <target state="translated">.NET Framework XAML 서비스 Api 및 기본 XAML 스키마 컨텍스트와 특성에 따라이 값이 채워집니다 <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> uses this existing <ph id="ph2">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> technique, and it returns <ph id="ph3">`true`</ph> if <ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> exists on a member declaration.</source>
          <target state="translated">기본 구현은 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> 이 기존를 사용 하 여 <ph id="ph2">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> 방법을 반환 <ph id="ph3">`true`</ph> 경우 <ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> 멤버 선언에 있습니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> is found on members of several WPF types, which include <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Setter&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Style&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> 포함 하는 몇 가지 WPF 형식 멤버에 <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Setter&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Windows.Style&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>It is also found on the <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> type, which connotes that any member that uses <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> as its type should be considered ambient even if the member is not specifically attributed.</source>
          <target state="translated">또한에서 발견 된는 <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> 사용 하는 모든 멤버를 의미 있는 형식 <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> 대로 해당 형식을 고려해 야 앰비언트 멤버는 특별히 지정 되지 않은 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsAttachable">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is an attachable member.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 연결 가능한 멤버인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAttachable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is an attachable member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 연결 가능한 멤버이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAttachable">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph> value is initialized based on which constructor was used to construct a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph> 생성자를 생성 하는 데 사용 된에 따라 값이 초기화 되는 <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is a XAML directive.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 XAML 지시문인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is a XAML directive; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 XAML 지시문이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> value is initialized based on which constructor was used to construct a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> 생성자를 생성 하는 데 사용 된에 따라 값이 초기화 되는 <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>The base <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> constructors initialize so that <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">기본 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 생성자 초기화 되도록 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> 은 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>However, the <ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> class (a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class) initializes so that <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> is <ph id="ph4">`true`</ph>.</source>
          <target state="translated">그러나는 <ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 클래스 (한 <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> 파생 클래스)를 초기화 되도록 <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> 은 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>If you want to report <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> as <ph id="ph2">`true`</ph> to callers of a custom XAML schema class for XAML members, make sure you derive from <ph id="ph3">&lt;xref:System.Xaml.XamlDirective&gt;</ph> because that is the only way to enable that behavior.</source>
          <target state="translated">보고 하려는 경우 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> 으로 <ph id="ph2">`true`</ph> XAML 멤버에 대 한 사용자 지정 XAML 스키마 클래스의 호출자에 게에서 파생 되 고 있는지 확인 <ph id="ph3">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 해당 동작을 사용 하는 유일한 방법은 있기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsEvent">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an event member.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 이벤트 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsEvent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an event; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 이벤트를 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsEvent">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsEvent%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsEvent%2A&gt;</ph> 또는 해당 메서드의 특정 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsNameValid">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is initialized with a valid <ph id="ph2">&lt;see langword="xamlName" /&gt;</ph> string as its <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.Name" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 유효한 <ph id="ph2">&lt;see langword="xamlName" /&gt;</ph> 문자열을 <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.Name" /&gt;</ph>으로 사용하여 초기화되었는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsNameValid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is initialized with a valid <ph id="ph3">&lt;see langword="xamlName" /&gt;</ph> string; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 유효한 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 문자열을 사용하여 초기화되었으면 <ph id="ph3">&lt;see langword="xamlName" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsReadOnly">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a read-only member.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 읽기 전용 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a read-only member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 읽기 전용 멤버를 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadOnly">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadOnly%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadOnly%2A&gt;</ph> 또는 해당 메서드의 특정 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member with a callable public <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 호출 가능한 public <ph id="ph2">&lt;see langword="get" /&gt;</ph> 접근자가 있는 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a callable public <ph id="ph3">&lt;see langword="get" /&gt;</ph> accessor; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 호출 가능한 public <ph id="ph1">&lt;see langword="true" /&gt;</ph> 접근자를 나타내면 <ph id="ph3">&lt;see langword="get" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> value checks whether the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is public.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> 여부를 검사 값은 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> 공개 합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is nonpublic, the <ph id="ph2">`get`</ph> accessor is not callable in a practical way, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> public이 아닌 경우이 <ph id="ph2">`get`</ph> 접근자는를 효율적으로 호출할 수 없습니다 및 <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> 반환 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> 또는 해당 메서드의 특정 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> 가상 메서드와 이므로 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">재정의 정보를 변경 하려면 (악의적으로 또는 기타) 보고 된 액세스 XAML 멤버의이 더 이상 정렬 되도록 예상 되는 방법에는 기본 CLR 선언 형식 시스템 액세스 정보를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">액세스 수준 중 중요 한 보안 검사를 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>Gets a value that indicates whether the member is not resolvable by the backing system that is used for type and member resolution.</source>
          <target state="translated">멤버가 형식 및 멤버 확인에 사용되는 지원 시스템에서 확인될 수 없는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the member is not resolvable; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the member is resolvable.</source>
          <target state="translated">멤버를 확인할 수 없으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 멤버를 확인할 수 있으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that is constructed with the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature returns <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 를 사용 하 여 생성 되는 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> 서명을 반환 <ph id="ph3">`true`</ph> 에 대 한 <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> with <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> cannot be written into an object graph.</source>
          <target state="translated">과 관련 된 로드 경로 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> 와 <ph id="ph3">`true`</ph> 에 대 한 <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> 개체 그래프에 쓸 수 없습니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>Under the default implementations in .NET Framework XAML Services APIs, the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> call throws a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> reports <ph id="ph4">`true`</ph> for <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">.NET Framework XAML 서비스 Api에서의 기본 구현에서는 <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> throw 호출는 <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> 때 관련 <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> 보고서 <ph id="ph4">`true`</ph> 에 대 한 <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>You should not construct a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that has a value of <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> unless your implementation can handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior.</source>
          <target state="translated">구성 하지 않아야는 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 의 값이 <ph id="ph2">`true`</ph> 에 대 한 <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> 구현에서 예외를 처리할 수 없는 경우 <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, 다른 방법으로 조정할 수 있고는 <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> 동작 합니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsUnknown%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsUnknown%2A&gt;</ph> 또는 해당 메서드의 특정 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsWriteOnly">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a write-only member.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 쓰기 전용 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWriteOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a write-only member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 쓰기 전용 멤버를 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWriteOnly">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A&gt;</ph> 또는 해당 메서드의 특정 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member that has a callable public <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 호출 가능한 public <ph id="ph2">&lt;see langword="set" /&gt;</ph> 접근자가 있는 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a callable public <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 호출 가능한 public <ph id="ph1">&lt;see langword="true" /&gt;</ph> 접근자를 나타내면 <ph id="ph3">&lt;see langword="set" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> value considers whether the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is public as part of the determination.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> 값으로 간주 하는지 여부를 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> 공용 결정의 일환으로 합니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is nonpublic, the <ph id="ph2">`set`</ph> accessor is not callable in a practical way, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> public이 아닌 경우이 <ph id="ph2">`set`</ph> 접근자는를 효율적으로 호출할 수 없습니다 및 <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> 반환 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> 또는 해당 메서드의 특정 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> 가상 메서드와 이므로 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">재정의 정보를 변경 하려면 (악의적으로 또는 기타) 보고 된 액세스 XAML 멤버의이 더 이상 정렬 되도록 예상 되는 방법에는 기본 CLR 선언 형식 시스템 액세스 정보를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">액세스 수준 중 중요 한 보안 검사를 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>When implemented in a derived class, returns an <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> implementation.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> 구현을 반환합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</source>
          <target state="translated">내부 리플렉션 CLR 특성 값을 얻을 수 있는 대체 방법으로 제공 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>In the absence of an override, the internal reflector uses typical CLR reflection logic such as calls to <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>.</source>
          <target state="translated">내부 반영자 재정의가 없는 경우에 대 한 호출 등 일반 CLR 리플렉션을 논리를 사용 <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>The default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">기본 구현은 <ph id="ph1">`null`</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which is used for deferred loading of XAML declared objects.</source>
          <target state="translated">XAML 선언된 개체의 지연된 로드에 사용되는 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> that has a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> constraint on the generic.</source>
          <target state="translated">제네릭에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 제약 조건이 있는 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>This method is invoked when a caller gets a value from the <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> property.</source>
          <target state="translated">값을 가져올 때이 메서드가 호출 되는 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> information.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> 는 기본적으로 내부 리플렉션을으로 사용 되는 값과에서는 다른 값을 반환 하 고 사용자 지정도 제공 하는 경우 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> 정보입니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>The default implementation returns an object either by reading <ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph> or using a <ph id="ph2">&lt;xref:System.Xaml.XamlDeferringLoader&gt;</ph> from the declaring type.</source>
          <target state="translated">기본 구현은 개체를 반환 하거나 참조 하 여 <ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph> 또는 사용 하 여 한 <ph id="ph2">&lt;xref:System.Xaml.XamlDeferringLoader&gt;</ph> 선언 형식에서 합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>If neither object is available, this method might return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">경우에 두 개체는 사용할 수 있는,이 메서드가 반환할 수 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 개체의 목록을 반환합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>Items in the list report the members where dependency relationships for initialization order exist relative to this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 목록의 항목은 초기화 순서에 대한 종속성 관계가 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>를 기준으로 존재하는 멤버를 보고합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 개체의 목록</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>This method is invoked when a caller gets a value from the <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> property.</source>
          <target state="translated">값을 가져올 때이 메서드가 호출 되는 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> information.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> 는 기본적으로 내부 리플렉션을으로 사용 되는 값과에서는 다른 값을 반환 하 고 사용자 지정도 제공 하는 경우 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> 정보입니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>The WPF XAML reader and writer implementations attribute this case with <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph>.</source>
          <target state="translated">WPF XAML 판독기 및 작성기 구현의이 경우가 특성 <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>The default implementation uses this existing <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> technique.</source>
          <target state="translated">기본 구현에서 사용이 기존 <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> 기술 합니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>Override this method if you are not using <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> for this purpose and intend to replace that technique for indicating property processing order with your own technique.</source>
          <target state="translated">이 메서드를 재정의 하 여 사용 하지 않는 경우 <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> 이 목적 및을 사용자 고유의 기술로 속성 처리 순서를 나타내는 기술을 교체 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>If you do not intend to support a property processing order, you can use the default implementation because it returns no results, which is appropriate.</source>
          <target state="translated">속성 처리 순서를 지원 하지 않을 경우 적합 없는 결과 반환 하기 때문에 기본 구현에서는 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>The list is read-only.</source>
          <target state="translated">목록은 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>과 연결된 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 정보이거나 <ph id="ph3">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>This method is invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>The default implementation does not require that a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> be constructed by using one of the constructors that pass an initial <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.</source>
          <target state="translated">기본 구현은 것을 요구 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 초기를 전달 하는 생성자 중 하나를 사용 하 여 생성할 수 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>However, an <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> value must exist for the <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>; otherwise, the default implementation returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">그러나는 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> 값에 대 한 있어야는 <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>, 그렇지 않으면 기본 구현에서는 반환 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>Override this method if you also derive from <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> and intend to return the derived class.</source>
          <target state="translated">또한에서 파생 하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> 및 파생된 클래스를 반환 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>If you return <ph id="ph1">`null`</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> returns <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph> to callers.</source>
          <target state="translated">반환 하는 경우 <ph id="ph1">`null`</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> 반환 <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph> 호출자에 게 있습니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is reported as an ambient property.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 앰비언트 속성으로 보고되는지 여부를 반환합니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to report this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> as an ambient property; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>를 앰비언트 속성으로 보고하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>This method is invoked by internal calls that check for ambient XAML property information.</source>
          <target state="translated">이 메서드는 XAML의 앰비언트 속성 정보를 확인 하는 내부 호출에 의해 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Ambient property behavior is accounted for in the public API behavior of XAML readers and XAML writers.</source>
          <target state="translated">앰비언트 속성 동작의 XAML 판독기 및 XAML 작성기에서 공용 API 동작에서 계산 됩니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>The internal calls that reference <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</source>
          <target state="translated">참조 하는 내부 호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> 는 일반적으로 개체 및 형식 한정자에 대 한 앰비언트 사용을 사용 하는 값을 올바르게 작동할 수 있도록 하는 XAML 처리 논리의 일부입니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>The default .NET Framework XAML Services implementation uses CLR attributing to obtain this information from reflection over backing types.</source>
          <target state="translated">기본.NET Framework XAML 서비스 구현에서 리플렉션을 지원 형식을 통해이 정보를 얻으려면 특성 지정 하는 CLR을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Specifically, the default implementation checks for <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> and returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> if <ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> exists on a member definition.</source>
          <target state="translated">기본 구현에 대 한 확인 하는 구체적으로, <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> 반환 <ph id="ph2">`true`</ph> 에 대 한 <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> 경우 <ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> 멤버 정의에 존재 합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Override this method if you are not using <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> for this purpose and intend to replace that technique for indicating ambient XAML properties with your own technique.</source>
          <target state="translated">이 메서드를 재정의 하 여 사용 하지 않는 경우 <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> 이 목적 및를 직접 기술 사용 하 여 주변 XAML 속성을 나타내는 기술을 교체 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Example APIs from WPF that attribute with <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> are <ph id="ph2">&lt;xref:System.Windows.Trigger.Property%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Style.BasedOn%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">특성이 있는 WPF에서 Api 예제 <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> 는 <ph id="ph2">&lt;xref:System.Windows.Trigger.Property%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Style.BasedOn%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an event.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 이벤트를 나타내는지 여부를 반환합니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to report that this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an event; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 이벤트를 나타낸다고 보고하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source>The default implementation checks whether <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> is of type <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph>, and if it is, returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">기본 구현 확인 여부를 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> 유형의 <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph>, 인 경우 반환 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드가 호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</source>
          <target state="translated">전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 파생 클래스를 제공 메타 데이터 XAML을 확인 하려면 해석 될 수 있는 특수 한 있는 경우 또는 형식 시스템 표현을 사례 당 기준입니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an intended read-only property.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 의도된 읽기 전용 속성을 나타내는지 여부를 반환합니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to report this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> as an intended read-only property; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>를 의도된 읽기 전용 속성으로 보고하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source>The default implementation returns <ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> exists, but a public <ph id="ph3">`set`</ph> accessor does not exist for it, as determined by internal reflection.</source>
          <target state="translated">기본 구현은 반환 <ph id="ph1">`true`</ph> 경우 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> 가 공용 있지만 <ph id="ph3">`set`</ph> 내부 리플렉션에 의해 결정 된 대로,에 대 한 접근자 존재 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드가 호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</source>
          <target state="translated">전체에 대 한 고유한 결과 보고 하려는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 파생 클래스를 제공 메타 데이터 XAML을 확인 하려면 해석 될 수 있는 특수 한 있는 경우 또는 형식 시스템 표현을 사례 당 기준입니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a property that has a public <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 public <ph id="ph2">&lt;see langword="get" /&gt;</ph> 접근자가 있는 속성을 나타내는지 여부를 반환합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a property that has a public <ph id="ph3">&lt;see langword="get" /&gt;</ph> accessor; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 public <ph id="ph1">&lt;see langword="true" /&gt;</ph>접근자가 있는 속성임을 나타내면 <ph id="ph3">&lt;see langword="get" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>The default implementation returns results based either on internal reflection or the negation of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>, processing in that order.</source>
          <target state="translated">기본 구현 내부 리플렉션 또는의 부정을 중 하나에 따라 결과 반환 합니다. <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>, 그 순서 대로 처리 합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> returns whether the member itself is public; it returns <ph id="ph2">`true`</ph> for a public member on a nonpublic declaring type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> 해당 멤버가 public; 인지 여부를 반환 합니다. 반환 <ph id="ph2">`true`</ph> 형식을 선언 nonpublic에 공용 멤버에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>Use <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> instead, if you also want to consider the visibility of the declaring type.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> 대신 선언 형식의 표시 여부를 고려 하려는 경우.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드가 호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는 합니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> 가상 메서드와 이므로 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">재정의 정보를 변경 하려면 (악의적으로 또는 기타) 보고 된 액세스 XAML 멤버의이 더 이상 정렬 되도록 예상 되는 방법에는 기본 CLR 선언 형식 시스템 액세스 정보를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">액세스 수준 중 중요 한 보안 검사를 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member that is not resolvable by the backing system that is used for type and member resolution.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 형식 및 멤버 확인에 사용되는 지원 시스템에서 확인될 수 없는 멤버를 나타내는지 여부를 반환합니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a non-resolvable member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 확인할 수 없는 멤버를 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source>This method may be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드가 호출 될 수 있습니다 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source>The default implementation returns results that are based on either internal reflection or checking for a <ph id="ph1">`null`</ph> value of <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>, processing in that order.</source>
          <target state="translated">기본 구현 내부 리플렉션에서 기반 인지에 대 한 검사 결과 반환 합니다.는 <ph id="ph1">`null`</ph> 값 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>, 그 순서 대로 처리 합니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는 합니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member that has a public <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor but not a public <ph id="ph3">&lt;see langword="get" /&gt;</ph> accessor.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 public <ph id="ph2">&lt;see langword="set" /&gt;</ph> 접근자는 있지만 public <ph id="ph3">&lt;see langword="get" /&gt;</ph> 접근자는 없는 멤버를 나타내는지 여부를 반환합니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a write-only member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 쓰기 전용 멤버를 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source>The default implementation returns <ph id="ph1">`true`</ph> if an <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> exists that has a public <ph id="ph3">`set`</ph> accessor and a nonpublic <ph id="ph4">`get`</ph> accessor, as determined by internal reflection.</source>
          <target state="translated">기본 구현은 반환 <ph id="ph1">`true`</ph> 경우는 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> 존재 하에 공용 <ph id="ph3">`set`</ph> 접근자와 비공용 <ph id="ph4">`get`</ph> 내부 리플렉션에 의해 결정 된 대로 접근자입니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드가 호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는 합니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member that has a public <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 public <ph id="ph2">&lt;see langword="set" /&gt;</ph> 접근자가 있는 멤버를 나타내는지 여부를 반환합니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a writable member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 쓰기 가능한 멤버를 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>The default implementation returns results based  either internal reflection or the negation of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>, processing in that order.</source>
          <target state="translated">기본 구현은 반환 결과의 부정을 또는 내부 리플렉션 기반 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>, 그 순서 대로 처리 합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드가 호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는 합니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> 가상 메서드와 이므로 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">재정의 정보를 변경 하려면 (악의적으로 또는 기타) 보고 된 액세스 XAML 멤버의이 더 이상 정렬 되도록 예상 되는 방법에는 기본 CLR 선언 형식 시스템 액세스 정보를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">액세스 수준 중 중요 한 보안 검사를 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters">
          <source>Returns the opening and closing bracket characters for a markup extension.</source>
          <target state="translated">태그 확장에 대해 여는 대괄호와 닫는 대괄호 문자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters">
          <source>A collection containing the opening and closing bracket characters.</source>
          <target state="translated">여는 대괄호와 닫는 대괄호 문자를 포함하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type where the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>가 있을 수 있는 형식의 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>The type where the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 있을 수 있는 형식입니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>The default implementation distinguishes between attachable and non-attachable members.</source>
          <target state="translated">기본 구현은 연결할 수 없는 멤버를 구분합니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>For non-attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> always returns <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>.</source>
          <target state="translated">연결할 수 없는 멤버에 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> 항상 반환 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>For attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> returns a result based on examining the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> accessor parameter type and interprets that type based on XAML schema context.</source>
          <target state="translated">연결 가능한 멤버에 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> 검사 결과 반환는 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> 접근자 매개 변수 형식이 고 XAML 스키마 컨텍스트 기반 형식을 해석 합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드가 호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는 합니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupType">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated">이 멤버가 사용하는 형식의 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated">이 멤버가 사용하는 형식의 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드가 호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> information.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> 는 기본적으로 내부 리플렉션을으로 사용 되는 값과에서는 다른 값을 반환 하 고 사용자 지정도 제공 하는 경우 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> 정보입니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>The default implementation uses different code paths and conceptual meanings for the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that is based on whether this <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> represents a property, method, or event.</source>
          <target state="translated">기본 구현은 서로 다른 코드 경로 개념적 의미를 사용 하 여 반환 된 작업에 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 여부를 기반으로 하는이 <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> 속성, 메서드 또는 이벤트를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>For a property, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the type that sets the property or is returned by the property.</source>
          <target state="translated">반환 된 속성에 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 속성 설정 또는 속성에서 반환 하는 형식입니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>For an event, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the required event handler type (a delegate in a CLR implementation).</source>
          <target state="translated">반환 되는 이벤트에 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 필요한 이벤트 처리기 형식 (CLR 구현에서 대리자)입니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>For a method, <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the return type.</source>
          <target state="translated">메서드에 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 는 반환 형식입니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>In each case, XAML schema context is used to evaluate the XAML type from the underlying system type.</source>
          <target state="translated">각각의 경우에서 내부 시스템 형식과에서 XAML 형식을 평가 하는 XAML 스키마 컨텍스트가 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드가 호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는 합니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>Returns a type converter implementation that is associated with this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>와 연관된 형식 변환기 구현을 반환합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> instance with <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 제약 조건이 있는 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> 인스턴스이거나 <ph id="ph3">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>The default implementation uses the following logic and processing order:</source>
          <target state="translated">기본 구현에서는 다음 논리와 처리 순서를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>If attributing exists at the member level (<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>), the attribute information is used for a call to <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph> against the XAML schema context.</source>
          <target state="translated">멤버 수준에 있을 때 특성 지정 (<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>), 특성 정보에 대 한 호출에 사용 되 <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph> XAML 스키마 컨텍스트.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> is valid, a type converter that is associated with the type is returned.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> 올바른지, 해당 형식과 연결 되는 형식 변환기가 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>If the member is an event, an event-specific type converter is returned.</source>
          <target state="translated">멤버는 이벤트, 이벤트 관련 형식 변환기 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드가 호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는 합니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>Returns a <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>와 연관된 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 접근자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the associated <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">연관된 <ph id="ph2">&lt;see langword="get" /&gt;</ph> 접근자에 대한 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>이거나 <ph id="ph3">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>The default implementation interprets the <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> property as <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> and returns the value of <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=nameWithType&gt;</ph> (with the parameter set to <ph id="ph4">`true`</ph>), which means that the returned method can be nonpublic.</source>
          <target state="translated">기본 구현은 해석는 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> 속성으로 <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> 의 값을 반환 하 고 <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=nameWithType&gt;</ph> (로 설정 하는 매개 변수를 사용 <ph id="ph4">`true`</ph>), 반환 된 메서드가 public이 아닌 수 있음을 의미 합니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>This behavior can result in <ph id="ph1">`null`</ph> for certain cases.</source>
          <target state="translated">이 문제가 발생할 수 있습니다 <ph id="ph1">`null`</ph> 특정 사례입니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>including cases where no associated accessor exists or the member is not a property.</source>
          <target state="translated">연결 된 접근자 존재 하거나 멤버를 사용할 수 없는 속성이 있는 경우를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>This method is invoked when a caller gets a value from the <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A&gt;</ph> property on an associated <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드가 호출 되는 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A&gt;</ph> 연결 된 속성 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는 합니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>Make sure to implement <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> so that they all return correlated results.</source>
          <target state="translated">구현 하십시오 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> 상관 관계가 지정 된 결과 반환 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>Returns a CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>와 연관된 CLR 형식 시스템 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>A CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> object that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>와 연관된 CLR 형식 시스템 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 개체이거나 <ph id="ph3">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>The default implementation returns the underlying member information, which is based on construction.</source>
          <target state="translated">기본 구현은 생성을 기반으로 하는 기본 멤버 정보를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>If the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object is constructed with a signature that does not provide enough information to set the underlying member, this method returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> 기본 멤버를 설정 하려면 충분 한 정보를 제공 하지 않는 서명을 사용 하 여 개체가 생성 되 면이 메서드는 반환 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>If an underlying member was set during construction, you should not need to call this method.</source>
          <target state="translated">를 생성 하는 동안 기본 멤버를 설정한 경우이 메서드를 호출할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드가 호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는 합니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>Make sure to implement <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> so that they all return correlated results.</source>
          <target state="translated">구현 하십시오 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> 상관 관계가 지정 된 결과 반환 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>Returns a <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>와 연관된 <ph id="ph1">&lt;see langword="set" /&gt;</ph> 접근자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the associated <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">연관된 <ph id="ph2">&lt;see langword="set" /&gt;</ph> 접근자에 대한 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>이거나 <ph id="ph3">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>The default implementation interprets <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> as <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> and returns the value of <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=nameWithType&gt;</ph> (with the parameter set to <ph id="ph4">`true`</ph>), which means that the returned method can be nonpublic.</source>
          <target state="translated">기본 구현은 해석 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> 으로 <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> 의 값을 반환 하 고 <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=nameWithType&gt;</ph> (로 설정 하는 매개 변수를 사용 <ph id="ph4">`true`</ph>), 반환 된 메서드가 public이 아닌 수 있음을 의미 합니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>This can result in <ph id="ph1">`null`</ph> for certain cases, including cases where there is no such accessor, or the member is not a property.</source>
          <target state="translated">따라서 <ph id="ph1">`null`</ph> 특정를 포함 한 경우 이러한 없는 접근자 하거나 멤버를 사용할 수 없는 속성이 있는 경우.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A&gt;</ph> on an associated <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.Override this method if you want to report uniform results for an entire <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">값을 가져올 때이 메서드가 호출 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A&gt;</ph> 연결 된 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>합니다. 이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> 파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는 합니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>Make sure to implement <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> so that they all return correlated results.</source>
          <target state="translated">구현 하십시오 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> 상관 관계가 지정 된 결과 반환 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>Returns a value serializer implementation that is associated with this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>와 연관된 값 serializer 구현을 반환합니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> instance with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint, or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 제약 조건이 있는 <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> 인스턴스이거나 <ph id="ph3">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>The default implementation uses the following logic and processing order:</source>
          <target state="translated">기본 구현에서는 다음 논리와 처리 순서를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>If attributing exists at the member level (<ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>), the attribute information is used for a call to <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph> against the XAML schema context.</source>
          <target state="translated">멤버 수준에 있을 때 특성 지정 (<ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>), 특성 정보에 대 한 호출에 사용 되 <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph> XAML 스키마 컨텍스트.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> is valid, a value converter that is associated with the type is returned.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> 올바른지, 해당 형식과 연결 된 값 변환기가 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>If the previous conditions do not apply, <ph id="ph1">`null`</ph> is returned.</source>
          <target state="translated">앞의 조건을 적용 되지 않은 경우 <ph id="ph1">`null`</ph> 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드가 호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">이 메서드를 재정의 하 여 전체에 대 한 고유한 결과 보고 하려는 경우 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 파생 클래스를 수 있는 특수 한 사례 별로이 확인 하기 위해 사용할 수 있는 메타 데이터가 있는 경우 또는 합니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters">
          <source>Defines the opening and closing bracket characters for a markup extension.</source>
          <target state="translated">태그 확장에 대해 여는 대괄호와 닫는 대괄호 문자를 정의합니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters">
          <source>A collection containing the opening and closing bracket characters.</source>
          <target state="translated">여는 대괄호와 닫는 대괄호 문자를 포함하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.Name">
          <source>Gets the <ph id="ph1">&lt;see langword="xamlName" /&gt;</ph> name string that declares this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>를 선언하는 <ph id="ph1">&lt;see langword="xamlName" /&gt;</ph> 이름 문자열을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>The <ph id="ph1">&lt;see langword="xamlName" /&gt;</ph> name string that declares this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>를 선언하는 <ph id="ph1">&lt;see langword="xamlName" /&gt;</ph> 이름 문자열입니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>This value is always set during construction.</source>
          <target state="translated">이 값은 항상 생성 되는 동안 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>The constructors that are implemented by <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> typically throw an exception if an initial name is not specified; therefore, do not expect this property to be <ph id="ph2">`null`</ph> or an empty string, if you are using default .NET Framework XAML Services implementations.</source>
          <target state="translated">구현 되는 생성자 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 일반적으로 예외를 throw 함 초기 이름을 지정 하지 않으면; 따라서 하지 않을이 수도 <ph id="ph2">`null`</ph> 또는 빈 문자열이 면 기본.NET Framework XAML 서비스를 사용 하는 경우 구현 합니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source><bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept> and naming rules for CLR type and members are not an exact intersect.</source>
          <target state="translated"><bpt id="p1">[</bpt>XamlName 문법<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept> CLR 형식 및 멤버에 대 한 명명 규칙 정확한 교차 하지 않으며 합니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>It is possible to declare a member name that is legal under CLR but not valid under XAML naming.</source>
          <target state="translated">이것은 CLR에서 유효한 멤버 이름을 선언할 수 XAML 명명에서는 유효 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>You should avoid this situation if possible.</source>
          <target state="translated">가능 하면 이러한 상황을 방지 해야 합니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 또는 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 또는 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects have the same value.</source>
          <target state="translated">지정된 두 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 개체의 값이 같은지를 확인합니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="xamlMember1" /&gt;</ph> is the same as the value of <ph id="ph3">&lt;paramref name="xamlMember2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>의 값이 <ph id="ph2">&lt;paramref name="xamlMember1" /&gt;</ph>의 값과 같으면 <ph id="ph3">&lt;paramref name="xamlMember2" /&gt;</ph>이고, 그러지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 또는 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 또는 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects have different values.</source>
          <target state="translated">지정된 두 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 개체의 값이 다른지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="xamlMember1" /&gt;</ph> differs from the value of <ph id="ph3">&lt;paramref name="xamlMember2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="xamlMember1" /&gt;</ph>의 값이 <ph id="ph3">&lt;paramref name="xamlMember2" /&gt;</ph>의 값과 다르면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.PreferredXamlNamespace">
          <source>Gets the single XAML namespace URI that identifies the primary XAML namespace for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>에 대한 기본 XAML 네임스페이스를 식별하는 단일 XAML 네임스페이스 URI를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.PreferredXamlNamespace">
          <source>The identifier for the primary XAML namespace for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>, as a string.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>에 대한 기본 XML 네임스페이스 식별자로서, 문자열로 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.PreferredXamlNamespace">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A&gt;</ph> property provides the same value as calling <ph id="ph2">&lt;xref:System.Xaml.XamlMember.GetXamlNamespaces%2A&gt;</ph> and then getting the first value string from the returned list.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A&gt;</ph> 호출할 때와 동일한 값을 제공 하는 속성 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.GetXamlNamespaces%2A&gt;</ph> 한 다음 반환된 된 목록에서 첫 번째 값 문자열을 가져와 합니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.PreferredXamlNamespace">
          <source>The preferred XAML namespace should be used when writing the member back to text or other representations that preserve XAML namespace information.</source>
          <target state="translated">텍스트에 다시 또는 XAML 네임 스페이스 정보를 유지 하는 다른 표시는 멤버를 작성할 때 기본 XAML 네임 스페이스는 것 같습니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.SerializationVisibility">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.ComponentModel.DesignerSerializationVisibility" /&gt;</ph> value, which indicates how a visual designer should process the member.</source>
          <target state="translated">비주얼 디자이너에서 멤버를 어떻게 처리해야 하는지를 나타내는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.DesignerSerializationVisibility" /&gt;</ph> 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.SerializationVisibility">
          <source>A value of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.DesignerSerializationVisibility" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.DesignerSerializationVisibility" /&gt;</ph> 열거형의 값입니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.SerializationVisibility">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.TargetType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type where the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>가 있을 수 있는 형식의 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>The type where the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 있을 수 있는 형식입니다.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>The returned value is different for attachable and non-attachable members.</source>
          <target state="translated">반환 된 값은와 연결할 수 없는 멤버에 대 한 다릅니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>For non-attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph> returns <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>.</source>
          <target state="translated">연결할 수 없는 멤버에 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph> 반환 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>For attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> returns a result that is based on this logic:</source>
          <target state="translated">연결 가능한 멤버에 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> 이 논리를 기반으로 하는 결과 반환 합니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>If reflection cannot resolve a backing (<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> <ph id="ph2">`true`</ph>), this method returns an internal constant that represents a generic object type.</source>
          <target state="translated">리플렉션 백업 확인할 수 없는 경우 (<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> <ph id="ph2">`true`</ph>),이 메서드는 제네릭 개체 형식을 나타내는 내부 상수를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>If the previous condition does not apply, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> is called.</source>
          <target state="translated">이전 조건이 적용 되지 않는 경우 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>The default implementation returns a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that is based on examining the methods that implement the <ph id="ph2">`get`</ph> and <ph id="ph3">`set`</ph> accessors.</source>
          <target state="translated">기본 구현은 반환 하는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 기반으로 구현 하는 메서드를 검사 하는 <ph id="ph2">`get`</ph> 및 <ph id="ph3">`set`</ph> 접근자입니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>A class might override <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> to use a different behavior such as other metadata forms that might report target types for attachable members.</source>
          <target state="translated">클래스에서 재정의 될 수 있습니다 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> 연결 가능한 멤버에 대 한 대상 형식을 보고할 수 있는 다른 메타 데이터 형식 같은 다른 동작을 사용 하 합니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.ToString">
          <source>Returns a string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>의 문자열 표현을 반환합니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.ToString">
          <source>A string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>의 문자열 표현입니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.ToString">
          <source>This implementation returns <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Name%2A&gt;</ph>.</source>
          <target state="translated">이 구현은 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Name%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.Type">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated">이 멤버가 사용하는 형식의 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated">이 멤버가 사용하는 형식의 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph> 또는 해당 메서드의 특정 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>This occurs when the initial internal reflection logic has not already set the information.</source>
          <target state="translated">이 초기 내부 리플렉션 논리 정보를 아직 설정 하지 않은 경우 발생 합니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>In the default behavior (no <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph> override), the returned <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> can have different conceptual meanings.</source>
          <target state="translated">기본 동작에 (없음 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph> 재정의), 반환 된 <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> 개념적 서로 다른 의미를 가질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>Which meaning applies depends on whether this <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> represents a property, method, or event, as the following list shows:</source>
          <target state="translated">각 의미를 적용 하는지에 따라 다릅니다이 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 은 다음 목록으로 속성, 메서드 또는 이벤트를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>For a property, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the type that sets the property or is returned by the property.</source>
          <target state="translated">반환 된 속성에 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 속성 설정 또는 속성에서 반환 하는 형식입니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>For an event, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the required event handler type (a delegate in a CLR implementation).</source>
          <target state="translated">반환 되는 이벤트에 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 필요한 이벤트 처리기 형식 (CLR 구현에서 대리자)입니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>For a method, <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the return type of that method, which may be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">메서드에 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 일 수 있는 해당 메서드의 반환 형식 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>In each case, the XAML schema context is used to evaluate the XAML type from the backing type.</source>
          <target state="translated">각각의 경우에서 XAML 스키마 컨텍스트는 XAML 형식을 지원 형식에서 평가에 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which can be used for type conversion construction of XAML declared objects.</source>
          <target state="translated">XAML 선언된 개체의 형식 변환 생성에 사용될 수 있는 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> value, with a <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint on the generic.</source>
          <target state="translated">제네릭에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 제약 조건이 있는 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTypeConverter%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTypeConverter%2A&gt;</ph> 또는 해당 메서드의 특정 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>This behavior occurs when the initial internal reflection logic has not already set the information.</source>
          <target state="translated">이 문제는 초기 내부 리플렉션 논리 정보를 아직 설정 하지 않은 경우에 발생 합니다.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>Implementations that return a non-null property value for <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> are not necessarily a working <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</source>
          <target state="translated">Null이 아닌 속성을 반환 하는 구현에 대 한 값 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> 가 작동 하는 반드시 <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>The following is a list of possible non-null return values for <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> and what these values represent:</source>
          <target state="translated">다음은 가능한 null이 아닌 반환 값에 대 한 목록은 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> 이러한 값이 나타내는 항목 및:</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>The return value reports a type converter that is attributed specifically to that member or more generally to the target type of the converter.</source>
          <target state="translated">반환 값은 해당 멤버에 특별히 또는 변환기의 대상 유형으로 일반적으로 특성을 사용 하는 형식 변환기를 보고 합니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>This behavior is typically what most XAML type systems and XAML processors look for in order to instantiate a type converter and invoke its methods.</source>
          <target state="translated">이 문제는 일반적으로 어떤 대부분 XAML 형식 시스템을 XAML 프로세서는 형식 변환기를 인스턴스화하고 해당 메서드를 호출 하기 위해 찾습니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>The return value reports a built-in value converter.</source>
          <target state="translated">반환 값은 기본 제공 값 변환기를 보고합니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>These converters exist for certain internal operations that are performed by a XAML writer.</source>
          <target state="translated">이 변환기는 XAML 작성기에서 수행 하는 특정 내부 작업에 대 한 존재 합니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>In particular, these built-in value converters convert the raw attribute string values to the XAML language-level primitives.</source>
          <target state="translated">특히, 이러한 기본 제공 값 변환기는 XAML 언어 수준 기본 형식에 원시 특성 문자열 값을 변환합니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>For the .NET Framework XAML Services implementation, these built-in type conversions often forward to a type converter that is defined in the System assembly.</source>
          <target state="translated">.NET Framework XAML 서비스 구현에 대 한 이러한 기본 제공 형식 변환은 대개 시스템 어셈블리에 정의 된 형식 변환기에 전달 합니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>For example, a conversion for an <ph id="ph1">&lt;xref:System.Int32&gt;</ph> value has built-in forwarded conversion, and therefore, the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A&gt;</ph> value references <ph id="ph3">&lt;xref:System.ComponentModel.Int32Converter&gt;</ph>.</source>
          <target state="translated">에 대 한 변환 예를 들어는 <ph id="ph1">&lt;xref:System.Int32&gt;</ph> 값에는 기본 제공 변환, 전달 및 따라서는 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A&gt;</ph> 참조 값 <ph id="ph3">&lt;xref:System.ComponentModel.Int32Converter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>The return value reports the special case of an unconstrained object model; that is, the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> has a <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> value of <ph id="ph3">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">반환 값, 무제한 개체 모델의 특수 한 경우 보고 즉,는 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> 값 <ph id="ph3">&lt;xref:System.Object&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> reports that the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=nameWithType&gt;</ph> is {<ph id="ph3">`Object}`</ph>.</source>
          <target state="translated">이 경우에 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> 것으로 보고 되는 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=nameWithType&gt;</ph> 은 {<ph id="ph3">`Object}`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>However, <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph> is <ph id="ph2">`null`</ph> because no actual type or instance is available to perform this conversion.</source>
          <target state="translated">그러나 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph> 은 <ph id="ph2">`null`</ph> 없는 실제 유형 또는 인스턴스를이 변환을 수행 하기 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>Instead, the object model behavior cannot be determined until run time, when the runtime of the specific technology determines the handling of its object graph.</source>
          <target state="translated">대신, 특정 기술 런타임 개체 그래프의 처리를 결정 하는 경우 런타임이 될 때까지 개체 모델의 동작을 확인할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>If you can access a working <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> from <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>, you can invoke its conversion methods.</source>
          <target state="translated">작업에 액세스할 수 있으면 <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> 에서 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>, 변환 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>However, many conversion methods rely on service context.</source>
          <target state="translated">그러나 여러 변환 메서드는 서비스 컨텍스트에 의존합니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>If you do not have the same service context available that the type converter expects for its typical role of writing objects for object graphs, the converter methods can throw exceptions.</source>
          <target state="translated">동일한 서비스 컨텍스트 형식 변환기의 쓰기 개체 그래프에 대 한 개체의 일반적인 역할 필요 함을 사용할 수 없는 경우 변환기 메서드 예외를 throw 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.UnderlyingMember">
          <source>Gets the CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> that is available for a member that is constructed by <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>, or <ph id="ph4">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>, <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> 또는 <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>에 의해 생성된 멤버에 사용할 수 있는 CLR 형식 시스템 <ph id="ph4">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.UnderlyingMember">
          <source>CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> information, as cast from the initial constructor parameters.</source>
          <target state="translated">초기 생성자 매개 변수에서 캐스트된 CLR 형식 시스템 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> 정보입니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.UnderlyingMember">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that is constructed with the <ph id="ph2">&lt;see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /&gt;</ph> signature returns <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 시그니처로 생성된 <ph id="ph2">&lt;see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /&gt;</ph>는 <ph id="ph3">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.UnderlyingMember">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> 또는 해당 메서드의 특정 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which is used for value serialization of XAML declared objects.</source>
          <target state="translated">XAML 선언된 개체의 값 serialization에 사용되는 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint on the generic.</source>
          <target state="translated">제네릭에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 제약 조건이 포함된 <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupValueSerializer%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupValueSerializer%2A&gt;</ph> 또는 해당 메서드의 특정 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>This behavior occurs when the initial internal reflection logic has not already set the information.</source>
          <target state="translated">이 문제는 초기 내부 리플렉션 논리 정보를 아직 설정 하지 않은 경우에 발생 합니다.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>Not all cases that return a non-null property value for <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph> are necessarily a working <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>.</source>
          <target state="translated">Null이 아닌 속성을 반환 하는 모든 사례에 대 한 값 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph> 반드시 작동 하는 <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>See <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>; the same considerations apply to <ph id="ph2">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>.</source>
          <target state="translated">참조 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>;에 동일한 고려 사항이 적용 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>