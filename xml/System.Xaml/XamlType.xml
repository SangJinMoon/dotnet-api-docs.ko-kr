<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlType.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d63614a-fd48-4a83-9dc4-ea1e401b6c1588e26b430c3cc3e4fb759456e24937af285897b6.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88e26b430c3cc3e4fb759456e24937af285897b6</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b4804968da1dfdf71c501075a5b66957b54f2e8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/27/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlType">
          <source>Reports information about XAML types as part of the overall XAML system that is implemented in .NET Framework XAML Services.</source>
          <target state="translated">.NET Framework XAML 서비스에 구현된 전체 XAML 시스템의 일부로 XAML 형식에 대한 정보를 보고합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>Many APIs in the <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> class provide information about XAML types, where the concept they report on is similar to particular sections of the XAML specification [MS-XAML].</source>
          <target state="translated">대부분의 Api는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 클래스에 대해 보고 개념은 XAML 사양 [MS XAML]의 특정 섹션으로 비슷하지만 XAML 형식에 대 한 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is used extensively in the .NET Framework XAML Services API for reporting information about a XAML type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 에 널리 사용 되는.NET Framework XAML 서비스 API에서 XAML 형식에 대 한 정보를 보고 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> reports the information that you might need to know about a XAML type in order to work with an instance or to access its members from a XAML node stream, or a similar XAML representation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 인스턴스를 사용 하기 위해 또는 XAML 노드 스트림을 또는 유사한 XAML 표현에서 해당 멤버에 액세스 하는 XAML 형식에 대해 알아야 할 수 있는 정보를 보고 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>Its reporting is similar to how the <ph id="ph1">&lt;xref:System.Type&gt;</ph> in the CLR type system, together with reflection classes such as <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, provide information about a CLR type and its usage.</source>
          <target state="translated">보고 하는 것은 어떻게 비슷합니다 <ph id="ph1">&lt;xref:System.Type&gt;</ph> CLR 형식 시스템에서 리플렉션 클래스와 함께 같은 <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>, CLR 유형 및 그 사용법에 대 한 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>To extend the XAML type system, you can derive from <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated">파생 시켜 XAML 형식 시스템을 확장 하려면 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>To do so effectively, you might also need to implement a <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>.</source>
          <target state="translated">효과적으로 수행 하려면 또한 해야 구현 하는 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> enables the generalized XAML type system to work with the type system backing that you specify as part of the invocation behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 호출 동작의 일부로 지정 하는 백업 유형 시스템에서 사용 하는 일반화 된 XAML 형식 시스템을 사용 하도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlType">
          <source>The specific custom <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> provides a way to reduce the dependencies on the CLR type system, which are used by the default <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> behavior.</source>
          <target state="translated">특정 사용자 지정 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 는 기본적으로 사용 되는 CLR 형식 시스템에 대 한 종속성을 줄일 수 있는 방법을 제공 <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> 동작 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlType">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
          <source>The underlying CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> for the XAML type to construct.</source>
          <target state="translated">생성할 XAML 형식에 대한 기본 CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
          <source>XAML schema context for XAML readers or XAML writers.</source>
          <target state="translated">XAML 판독기 또는 XAML 작성기의 XAML 스키마 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> class based on the underlying CLR type information.</source>
          <target state="translated">기본 CLR 형식 정보를 기반으로 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
          <source>One or more of <ph id="ph1">&lt;paramref name="underlyingType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph> are <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">하나 이상의 <ph id="ph1">&lt;paramref name="underlyingType" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>The name of the type to create.</source>
          <target state="translated">만들 형식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>The type arguments for a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> that represents a generic type.</source>
          <target state="translated">제네릭 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>의 형식 인수입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Can be (and often is) <ph id="ph1">&lt;see langword="null" /&gt;</ph>, which indicates that the represented type is not a generic type.</source>
          <target state="translated">표시된 형식이 제네릭 형식이 아님을 나타내는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우가 많습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>XAML schema context for XAML readers and XAML writers.</source>
          <target state="translated">XAML 판독기 및 XAML 작성기의 XAML 스키마 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> class based on a string name for the type.</source>
          <target state="translated">형식의 문자열 이름을 기반으로 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>This is a protected constructor.</source>
          <target state="translated">이 생성자는 protected 생성자입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>No current public derived classes exist that use this particular path for construction.</source>
          <target state="translated">현재 공용 파생된 클래스가 생성을 위해이 특정 경로 사용 하는 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>As a consumer of the existing <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, you must use the other constructor signatures (<ph id="ph2">&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29&gt;</ph>, <ph id="ph3">&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph>, or <ph id="ph4">&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph>) to initialize a <ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph> object.</source>
          <target state="translated">기존 소비자로 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, 다른 생성자 시그니처를 사용 해야 합니다 (<ph id="ph2">&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29&gt;</ph>, <ph id="ph3">&lt;xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph>, 또는 <ph id="ph4">&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph>) 초기화 하는 <ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>One or more of <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> or <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph> are <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">하나 이상의 <ph id="ph1">&lt;paramref name="typeName" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
          <source>The underlying type for the XAML type to construct.</source>
          <target state="translated">생성할 XAML 형식에 대한 기본 형식입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
          <source>XAML schema context for the XAML reader.</source>
          <target state="translated">XAML 판독기의 XAML 스키마 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> implementation that handles run-time reflection calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>에 대한 런타임 리플렉션 호출을 처리하는 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> class based on underlying type information and a <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> implementation.</source>
          <target state="translated">기본 형식 정보와 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 구현을 기반으로 <ph id="ph2">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
          <source>One or more of <ph id="ph1">&lt;paramref name="underlyingType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph> are <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">하나 이상의 <ph id="ph1">&lt;paramref name="underlyingType" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="schemaContext" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>The XAML namespace for the type, as a string.</source>
          <target state="translated">형식에 대한 XML 네임스페이스로서, 문자열로 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>The name of the type in the provided <bpt id="p1">&lt;c&gt;</bpt>unknownTypeNamespace<ept id="p1">&lt;/c&gt;</ept> XAML namespace.</source>
          <target state="translated">제공된 <bpt id="p1">&lt;c&gt;</bpt>unknownTypeNamespace<ept id="p1">&lt;/c&gt;</ept> XAML 네임스페이스에 있는 형식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>The type arguments for a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> that represents a generic type.</source>
          <target state="translated">제네릭 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>의 형식 인수입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Can be (and often is) <ph id="ph1">&lt;see langword="null" /&gt;</ph>, which indicates that the represented type is not a generic type.</source>
          <target state="translated">표시된 형식이 제네릭 형식이 아님을 나타내는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우가 많습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>XAML schema context for XAML readers or XAML writers.</source>
          <target state="translated">XAML 판독기 또는 XAML 작성기의 XAML 스키마 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> class based on the XAML namespace and a string name for the type.</source>
          <target state="translated">XAML 네임스페이스와 형식의 문자열 이름을 기반으로 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>This constructor is exclusively for analysis and XAML-node recording of type usages that are known to not have backing in the supporting type system and XAML schema context.</source>
          <target state="translated">이 생성자는 지원 형식 시스템과 XAML 스키마 컨텍스트에서 지원되지 않는 것으로 알려진 형식의 분석 및 XAML 노드 기록에만 사용됩니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Use this constructor only for "unknown" types where a XAML type that maps to an underlying type system is unavailable.</source>
          <target state="translated">내부 형식 시스템에 매핑되는 XAML 형식의 사용할 수 있는 "알 수 없음된" 형식에 대해서만이 생성자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>This constructor might not produce a result where <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=nameWithType&gt;</ph> is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">이 생성자의 결과 생성할 수 없습니다 여기서 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=nameWithType&gt;</ph> 은 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>Instead, the default reflector logic reports the underlying type as <ph id="ph1">&lt;xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">기본 reflector 논리로 기본 형식을 보고 하는 대신, <ph id="ph1">&lt;xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>However, this behavior can change because of the <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;</ph> override.</source>
          <target state="translated">그러나이 동작 때문에 변경할 수는 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;</ph> 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
          <source>One or more of <ph id="ph1">&lt;paramref name="unknownTypeNamespace" /&gt;</ph>, <ph id="ph2">&lt;paramref name="unknownTypeName" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="schemaContext" /&gt;</ph> are <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="unknownTypeNamespace" /&gt;</ph>, <ph id="ph2">&lt;paramref name="unknownTypeName" /&gt;</ph> 또는 <ph id="ph3">&lt;paramref name="schemaContext" /&gt;</ph> 중 하나 이상이 <ph id="ph4">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.AllowedContentTypes">
          <source>Gets a read-only collection of the types that are usable as the <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ContentProperty" /&gt;</ph> value for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ContentProperty" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 값으로 사용할 수 있는 형식의 읽기 전용 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.AllowedContentTypes">
          <source>A read-only collection of possible content types.</source>
          <target state="translated">가능한 콘텐츠 형식의 읽기 전용 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.AllowedContentTypes">
          <source>Types that are assignable a specific content type (for example, assignable to a base type that is an allowed content type) are not considered multiple types for purposes of <ph id="ph1">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>.</source>
          <target state="translated">할당할 수 있는 형식 (예: 콘텐츠 형식으로 허용 되는 기본 형식에 할당할 수)를 특정 콘텐츠 형식의 목적을 위해 여러 형식을 간주 되지 않습니다 <ph id="ph1">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.AllowedContentTypes">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.BaseType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the immediate base type of this XAML type.</source>
          <target state="translated">이 XAML 형식의 직접적인 기본 형식에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.BaseType">
          <source>Determination of this value is based on the underlying type of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> and schema context.</source>
          <target state="translated">이 값은 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 및 스키마 컨텍스트의 기본 형식을 기준으로 결정됩니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the immediate base type of this XAML type.</source>
          <target state="translated">이 XAML 형식의 직접적인 기본 형식에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>By default, <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> returns an internal constant that represents an <ph id="ph2">&lt;xref:System.Object&gt;</ph> if <ph id="ph3">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph4">`null`</ph>.</source>
          <target state="translated">기본적으로 <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> 나타내는 내부 상수를 반환는 <ph id="ph2">&lt;xref:System.Object&gt;</ph> 경우 <ph id="ph3">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> 은 <ph id="ph4">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> 가상 함수 이며 따라서 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 시스템의 정보는 XAML 형식에 대 한 보고 된 형식 정보를 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.BaseType">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>The type to check against the current <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> .</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>을 검사할 대상 형식입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>Returns a value that indicates whether an instance of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> has the specified <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> in its list of assignable types.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 인스턴스의 할당 가능한 형식 목록에 지정된 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 있는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="xamlType" /&gt;</ph> is in the assignable types list; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="xamlType" /&gt;</ph>이 할당 가능한 형식 목록에 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>Although the assignable type does not have all the capabilities of the reference type, you can use it for assignment.</source>
          <target state="translated">할당 가능한 형식이 참조 형식의 모든 기능을 제공 하지는 않지만 할당을 위해 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>For example, you can use assignment to make type matches for the values of a property.</source>
          <target state="translated">예를 들어 속성의 값에 대 한 형식 일치 하는 할당을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>The concept of assignable types in XAML is similar to the concept of casting up in the CLR type system.</source>
          <target state="translated">XAML에서 할당할 수 있는 형식의 개념은 CLR 형식 시스템에서 위로 캐스팅의 개념과 비슷합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>For example, under a CLR type system, every type has an <ph id="ph1">&lt;xref:System.Object&gt;</ph> in its assignable type list.</source>
          <target state="translated">예를 들어 CLR 형식 시스템에서 모든 형식에는 <ph id="ph1">&lt;xref:System.Object&gt;</ph> 할당 가능한 형식 목록에 있습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>If one of the two <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> instances that are used for comparison has <ph id="ph2">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph> equal to <ph id="ph3">`true`</ph>, this method has a special Unknown mode that returns <ph id="ph4">`true`</ph> if the two <ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph> instances are equivalent.</source>
          <target state="translated">경우 둘 중 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 사용 되는 인스턴스 비교에 <ph id="ph2">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph> 같음 <ph id="ph3">`true`</ph>,이 메서드는 반환 하는 특별 한 알 수 없는 모드 <ph id="ph4">`true`</ph> 경우 두 <ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph> 인스턴스가 동일 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>The default implementation uses the CLR <ph id="ph1">&lt;xref:System.Type&gt;</ph> from <ph id="ph2">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> for this <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> and the input <ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph>, and calls <ph id="ph5">&lt;xref:System.Type.IsAssignableFrom%2A&gt;</ph>.</source>
          <target state="translated">CLR을 사용 하 여 기본 구현은 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 에서 <ph id="ph2">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> 이 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 및 입력 <ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph>, 및 호출 <ph id="ph5">&lt;xref:System.Type.IsAssignableFrom%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>Override this method if you want a different determination of assignable types.</source>
          <target state="translated">서로 다른 할당 가능한 형식 확인 하려는 경우이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>Passing a null <ph id="ph1">`xamlType`</ph> does not throw an exception and always returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Null을 전달 <ph id="ph1">`xamlType`</ph> 예외를 throw 하지 않으며 항상 반환 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> 가상 함수 이며 따라서 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the assignability of a XAML type so that it no longer aligns in an expected way with the type-casting behavior of its underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 등) XAML 형식의 않든 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 캐스팅 동작 하도록 변경 해야 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.ConstructionRequiresArguments">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> must have arguments (generic constraints through <ph id="ph2">&lt;see langword="x:TypeArguments" /&gt;</ph>, initialization text, or other XAML techniques) to construct a valid instance of the type.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에 인수(<ph id="ph2">&lt;see langword="x:TypeArguments" /&gt;</ph>, 초기화 텍스트 또는 기타 XAML 기술을 통한 일반 제약 조건)가 있어야 해당 형식의 유효한 인스턴스를 생성할 수 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ConstructionRequiresArguments">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if construction of an instance requires some argument value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">인스턴스를 생성하기 위해 일부 인수 값이 필요하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ConstructionRequiresArguments">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ConstructionRequiresArguments">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the content property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>의 콘텐츠 속성에 대한 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 정보를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the content property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>의 콘텐츠 속성에 대한 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 정보입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>May be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no content property exists.</source>
          <target state="translated">콘텐츠 속성이 없는 경우 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>When using the binding or backing of the CLR type system, the XAML content property can be specified on a type by applying <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> to the type definition.</source>
          <target state="translated">때 바인딩을 사용 하 여 또는 CLR 형식 시스템의 백업, XAML 콘텐츠 속성인 지정할 수 있습니다 형식에 적용 하 여 <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> 형식 정의에 있습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>This property aligns to the <ph id="ph1">`[content property]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">이 속성에 맞춥니다.이 <ph id="ph1">`[content property]`</ph> [MS XAML] 사양에 대 한 정보 항목입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentProperty">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupContentProperty%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed <ph id="ph1">&lt;see langword="Collection&amp;lt;T&amp;gt;" /&gt;</ph>.</source>
          <target state="translated">콘텐츠 속성이 강력한 형식의 <ph id="ph1">&lt;see langword="Collection&amp;lt;T&amp;gt;" /&gt;</ph>에 있는 문자열과 같이 엄격한 형식 일치가 아닐 때 콘텐츠 속성의 콘텐츠를 래핑하는 데 사용되는 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>A read-only collection of possible content wrapper types; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">가능한 콘텐츠 래퍼 형식의 읽기 전용 컬렉션이거나, 그렇지 않으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>If there are no wrappers to account for type match loosening, this property is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">이 속성은 형식 일치 완화 시키는 래퍼가 없으면 인 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>Types that evaluate as <ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> for a specific content type are not considered multiple types for purposes of <ph id="ph2">&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;</ph>.</source>
          <target state="translated">형식으로 평가 하는 <ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> 를 특정 콘텐츠 형식에 대 한 여러 종류의 목적을 위해을 간주 되지 않는 <ph id="ph2">&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>In the CLR binding for <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>, the XAML content wrapper type can be specified on a type as a <ph id="ph3">&lt;xref:System.Windows.Markup.ContentWrapperAttribute&gt;</ph>.</source>
          <target state="translated">에 대 한 CLR 바인딩에 <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>, XAML 콘텐츠 래퍼 형식으로 형식에 지정할 수는 <ph id="ph3">&lt;xref:System.Windows.Markup.ContentWrapperAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ContentWrappers">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupContentWrappers%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.DeferringLoader">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> that represents the deferred loading conversion behavior for this type.</source>
          <target state="translated">이 형식에 대한 지연된 로드 변환 동작을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.DeferringLoader">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> constraint that represents the deferred loading behavior for this type.</source>
          <target state="translated">이 형식에 대한 지연된 로드 동작을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 제약 조건이 있는 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.DeferringLoader">
          <source>XAML template behavior in WPF is an example of deferred loading behavior.</source>
          <target state="translated">WPF의 XAML 템플릿 동작은 지연 된 로드 동작의 예시입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.DeferringLoader">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.DeferringLoader">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupDeferringLoader%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlType">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">현재 개체가 다른 개체와 같은지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Object)">
          <source>The object to compare with this object.</source>
          <target state="translated">이 개체와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Object)">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">현재 개체가 다른 개체와 같은지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 개체가 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 매개 변수와 같으면 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
          <source>An object to compare with this object.</source>
          <target state="translated">이 개체와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
          <source>Indicates whether the current object is equal to another object of the same type.</source>
          <target state="translated">현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="other" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 개체가 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 매개 변수와 같으면 <ph id="ph2">&lt;paramref name="other" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
          <source>The directive for which to find the aliased member.</source>
          <target state="translated">별칭이 지정된 멤버를 찾을 지시문입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
          <source>Returns the XAML member that is aliased to a XAML directive by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에 의해 XAML 지시문에 별칭으로 지정되는 XAML 멤버를 반환합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
          <source>The aliased member, if found; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">별칭이 지정된 멤버를 찾았으면 해당 멤버이고, 그렇지 않으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this method can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 메서드를 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAliasedProperty%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>Returns a collection that contains all the attachable properties that are exposed by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에 의해 노출되는 모든 연결 가능 속성을 포함하는 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>A collection that contains zero or more <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> values.</source>
          <target state="translated">0개 이상의 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 값을 포함하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>Each <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> in the returned collection should contain values that support the concept that the <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> is an attachable member.</source>
          <target state="translated">각 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 반환된 된 컬렉션의 개념을 지 원하는 값을 포함 해야 하는 <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> 멤버에 연결할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>For example, members should return <ph id="ph1">`true`</ph> for <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph>, a type for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>, and so on.</source>
          <target state="translated">예를 들어 멤버를 반환할지 <ph id="ph1">`true`</ph> 에 대 한 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph>에 대 한 유형을 <ph id="ph3">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>등입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this method can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 메서드를 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAllAttachableMembers">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAllMembers">
          <source>Returns a collection that contains all the members that are exposed by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에 의해 노출되는 모든 멤버를 포함하는 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAllMembers">
          <source>A collection that contains zero or more <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> values.</source>
          <target state="translated">0개 이상의 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 값을 포함하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAllMembers">
          <source>Calls to this method can invoke <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph> overrides on <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">이 메서드의 호출을 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph> 에 재정의 <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>The name of the attachable member to get, in <bpt id="p1">&lt;c&gt;</bpt>ownerTypeName.MemberName<ept id="p1">&lt;/c&gt;</ept> form.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>ownerTypeName.MemberName<ept id="p1">&lt;/c&gt;</ept> 형식으로 된 가져올 연결 가능 멤버의 이름입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> representing a specific named attachable member of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>의 명명된 특정 연결 가능 멤버를 나타내는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> object for the requested attachable member; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if no attachable member by that name exists.</source>
          <target state="translated">요청된 연결 가능 멤버의 경우 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 개체이고, 그렇지 않고 해당 이름의 연결 가능 멤버가 없는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>Calls to this method can invoke <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> overrides on <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">이 메서드의 호출을 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> 에 재정의 <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> 가상 함수 이며 따라서 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면는 <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph> 기본 CLR 형식에 대 한 정보입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">보고 하는 멤버의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetHashCode">
          <source>Returns the hash code for this object.</source>
          <target state="translated">이 개체에 대한 해시 코드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetHashCode">
          <source>An integer hash code.</source>
          <target state="translated">정수 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>The name of the member to get (as a string).</source>
          <target state="translated">문자열로 가져올 멤버의 이름입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> for a specific named member from this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>에서 명명된 특정 멤버의 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the member, if such a member was found; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">해당 멤버를 찾았으면 멤버의 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 정보이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>The value for <ph id="ph1">`name`</ph> is expected to be unqualified.</source>
          <target state="translated">에 대 한 값 <ph id="ph1">`name`</ph> 정규화 되지 않은 것으로 예상 됩니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>Type-qualified names that indicate an attached member should be submitted to <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;</ph> instead.</source>
          <target state="translated">연결 된 멤버를 나타내는 정규화 된 형식 이름에 제출 해야 <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;</ph> 대신 합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>Prefixed member names should not be used; a prefix is situational to a usage and the XAML type system cannot know the context of such a usage and how the prefix is mapped.</source>
          <target state="translated">접두사가 붙은 이름을 사용할 수 없습니다; 멤버 접두사는 상황에서 사용량에 따라 및 XAML 형식 시스템은 이러한 사용의 컨텍스트 및 접두사 매핑되는 방법을 알 수 없습니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>Calls to this method can invoke <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph> overrides on <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">이 메서드의 호출을 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph> 에 재정의 <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph> 가상 함수 이며 따라서 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면는 <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph> 기본 CLR 형식에 대 한 정보입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetMember(System.String)">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">보고 하는 멤버의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>The count (arity) of the particular syntax or constructor mode that you want information about.</source>
          <target state="translated">정보를 보려는 특정 구문 또는 생성자 모드의 개수입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">태그 확장 형식의 경우 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에 대한 특정 태그 확장 사용에서 지원되는 위치 매개 변수의 형식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> values, where each <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is the type for that position in the syntax.</source>
          <target state="translated">각 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 구문에서 해당 위치의 형식인 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 값의 목록입니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>You must specify the types in the same order when you supply markup input for the markup extension.</source>
          <target state="translated">태그 확장에 대한 태그 입력을 제공할 때 이 형식을 동일한 순서로 지정해야 합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>This API is only relevant if this <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a markup extension (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph> is <ph id="ph3">`true`</ph>).</source>
          <target state="translated">이 API는 경우이 해당만 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 태그 확장을 나타내는 (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph> 은 <ph id="ph3">`true`</ph>).</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>The input <ph id="ph1">`parameterCount`</ph> is not for requesting the type of a specific positional parameter.</source>
          <target state="translated">입력 <ph id="ph1">`parameterCount`</ph> 요청 특정 위치 매개 변수 형식에 대 한 않습니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>It is for specifying the arity of a markup extension usage.</source>
          <target state="translated">태그 확장 사용의 인자 수 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>Markup extension usage often has multiple "signatures" and uses different parameter arity (count) of positional parameters to differentiate.</source>
          <target state="translated">태그 확장 사용은 종종 여러 "서명" 하 고 구분 하기 위해 다른 매개 변수 인자 (개수)의 위치 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</source>
          <target state="translated">그러나 중복 arities를 허용 하기 위해 차이점에 대 한 종류의 위치 매개 변수를 사용 하 여 스키마 컨텍스트를 구성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>For a specific arity (count), the parameter positions and types can vary.</source>
          <target state="translated">특정 인자 (개수)에 대 한 매개 변수 위치와 형식 달라질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>To get the positional type of a specific arity's markup extension usage, you first call <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph> specifying the arity count.</source>
          <target state="translated">위치 형식을 특정 인자 태그 확장 사용을 가져오려면 먼저 호출 <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph> 의 인자 수를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>Then get the item at that position from the returned collection.</source>
          <target state="translated">그런 다음 반환된 된 컬렉션에서 해당 위치의 항목을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
          <source>Calls to this method can invoke <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupPositionalParameters%2A&gt;</ph> overrides on <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">이 메서드의 호출을 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupPositionalParameters%2A&gt;</ph> 에 재정의 <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>Returns a list of string identifiers for XAML namespaces that the type is included in.</source>
          <target state="translated">이 형식이 포함되어 있는 XAML 네임스페이스에 대한 문자열 식별자 목록을 반환합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>A list of string values, where each string is the URI identifier for a XAML namespace.</source>
          <target state="translated">각 문자열이 XAML 네임스페이스의 URI 식별자인 문자열 값 목록입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>Typical XAML namespace identifiers are strings in URI form.</source>
          <target state="translated">일반적인 XAML 네임 스페이스 식별자는 URI 형식의 문자열입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>The default implementation checks the following, in order: the XAML namespace that is supplied in construction (<ph id="ph1">&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph> signature only); and the namespaces that are available from the schema context.</source>
          <target state="translated">기본 구현에서는 다음을 순서 대로 검사: 구문에서 제공 되는 XAML 네임 스페이스 (<ph id="ph1">&lt;xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29&gt;</ph> 서명만 수행); 및 스키마 컨텍스트를 사용할 수 있는 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>If these are each <ph id="ph1">`null`</ph>, a new list is generated that contains a single empty string.</source>
          <target state="translated">각각 <ph id="ph1">`null`</ph>, 단일 빈 문자열을 포함 하는 새 목록이 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.GetXamlNamespaces">
          <source>You can override this method to change the lookup methodology.</source>
          <target state="translated">조회 방법을 변경 하려면이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.Invoker">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> implementation that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>과 연결된 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 구현을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Invoker">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> implementation that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>과 연결된 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Invoker">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calling <ph id="ph2">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph> can invoke either <ph id="ph3">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>호출, <ph id="ph2">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph> 호출할 수 있습니다 <ph id="ph3">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph> 또는 해당 메서드의 특정 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Invoker">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Invoker">
          <source>If a <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph> override returns <ph id="ph2">`null`</ph>, or if the default implementation returns <ph id="ph3">`null`</ph> because of lack of <ph id="ph4">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> for this <ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph>, then <ph id="ph6">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph> returns <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupInvoker%2A&gt;</ph> 반환 재정의 <ph id="ph2">`null`</ph>, 기본 구현은 반환 하는 경우 또는 <ph id="ph3">`null`</ph> 부족으로 인해 <ph id="ph4">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> 이 <ph id="ph5">&lt;xref:System.Xaml.XamlType&gt;</ph>, 다음 <ph id="ph6">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph> 반환 <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsAmbient">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an ambient type, as per the XAML definition.</source>
          <target state="translated">XAML 정의를 기준으로 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 앰비언트 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsAmbient">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an ambient type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 앰비언트 형식을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsAmbient">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsAmbient">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsAmbient%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsArray">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an array.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 배열을 나타내는지 여부를 지정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsArray">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an array; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 배열을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsArray">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsArray">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsCollection">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a collection.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 컬렉션을 나타내는지 여부를 지정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsCollection">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a collection; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 컬렉션을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsCollection">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsCollection">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsConstructible">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a constructible type, as per the XAML definition.</source>
          <target state="translated">XAML 정의를 기준으로 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 생성 가능 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsConstructible">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a constructible type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 생성 가능 형식을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsConstructible">
          <source>This property aligns to the <ph id="ph1">`[is default constructible]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">이 속성에 맞춥니다.이 <ph id="ph1">`[is default constructible]`</ph> [MS XAML] 사양에 대 한 정보 항목입니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsConstructible">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsConstructible">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsConstructible%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsDictionary">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a dictionary, as per the XAML definition.</source>
          <target state="translated">XAML 정의를 기준으로 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 사전을 나타내는지 여부를 지정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsDictionary">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a dictionary; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 사전을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsDictionary">
          <source>This property aligns to the <ph id="ph1">`[is dictionary]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">이 속성에 맞춥니다.이 <ph id="ph1">`[is dictionary]`</ph> [MS XAML] 사양에 대 한 정보 항목입니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsDictionary">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsDictionary">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsGeneric">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a generic type.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 제네릭 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsGeneric">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a generic type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 제네릭 형식을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsGeneric">
          <source>This property is a helper property that checks for a null value of <ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;</ph>.</source>
          <target state="translated">이 속성은 null 값을 확인 하는 도우미 속성 <ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsGeneric">
          <source>There is no specific <ph id="ph1">`Lookup`</ph> method related to <ph id="ph2">&lt;xref:System.Xaml.XamlType.IsGeneric%2A&gt;</ph>.</source>
          <target state="translated">관련 없는 <ph id="ph1">`Lookup`</ph> 관련 된 메서드 <ph id="ph2">&lt;xref:System.Xaml.XamlType.IsGeneric%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsMarkupExtension">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a markup extension.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 태그 확장을 나타내는지 여부를 지정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsMarkupExtension">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a markup extension; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 태그 확장을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsMarkupExtension">
          <source>In XAML specification terms, this type must be assignable to <ph id="ph1">`x:MarkupExtension`</ph> in order to return <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>.</source>
          <target state="translated">XAML 사양 측면에서이 형식에 할당할 수 있어야 <ph id="ph1">`x:MarkupExtension`</ph> 반환 하기 위해 <ph id="ph2">`true`</ph> 에 대 한 <ph id="ph3">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsMarkupExtension">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsMarkupExtension">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a XAML namescope, as per the XAML definition.</source>
          <target state="translated">XAML 정의를 기준으로 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 XAML 이름 범위를 나타내는지 여부를 지정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a XAML namescope; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 XAML 이름 범위를 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>A XAML namescope enforces the name uniqueness of the property or properties used for <ph id="ph1">`x:Name`</ph><ph id="ph2"> / </ph><ph id="ph3">`[name property]`</ph>.</source>
          <target state="translated">속성 또는 속성에 사용 되는 이름의 고유성을 적용 하는 XAML 이름 범위 <ph id="ph1">`x:Name`</ph> <ph id="ph2"> / </ph> <ph id="ph3">`[name property]`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph> is <ph id="ph2">`true`</ph>, some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph> 은 <ph id="ph2">`true`</ph>, 고유성을 적용 하기 위한 메커니즘이 있어야 하 고 XAML 이름 범위를 소유 하는이 형식의 관점에서 평가 해야 합니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>The XAML namescope then extends to the content of the type until another XAML namescope-owning type is encountered.</source>
          <target state="translated">그런 다음 XAML 이름 범위 다른 XAML 이름 범위 소유 하는 형식이 발견 될 때까지 형식 내용으로 확장 합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>This property aligns to the <ph id="ph1">`[is name scope]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">이 속성에 맞춥니다.이 <ph id="ph1">`[is name scope]`</ph> [MS XAML] 사양에 대 한 정보 항목입니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameScope">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsNameScope%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsNameScope%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsNameValid">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is initialized by using a valid <ph id="ph2">&lt;see langword="xamlName" /&gt;</ph> string as its <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.Name" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 유효한 <ph id="ph2">&lt;see langword="xamlName" /&gt;</ph> 문자열을 <ph id="ph3">&lt;see cref="P:System.Xaml.XamlType.Name" /&gt;</ph>으로 사용하여 초기화되었는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNameValid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is initialized by using a valid <ph id="ph3">&lt;see langword="xamlName" /&gt;</ph> string; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 유효한 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 문자열을 사용하여 초기화되었으면 <ph id="ph3">&lt;see langword="xamlName" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsNullable">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a nullable type, as per the XAML definition.</source>
          <target state="translated">XAML 정의를 기준으로 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 null 허용 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNullable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a nullable type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 null 허용 형식을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNullable">
          <source>This property aligns to the <ph id="ph1">`[is nullable]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">이 속성에 맞춥니다.이 <ph id="ph1">`[is nullable]`</ph> [MS XAML] 사양에 대 한 정보 항목입니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsNullable">
          <source>If you are not using the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsNullable%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsNullable%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsPublic">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a public type in the relevant type system.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 관련 형식 시스템에서 public 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a public type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 public 형식을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsPublic">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsPublic">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph> 가상 함수 이며 따라서 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsPublic">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system and access information of its underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 또는 기타) 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 시스템 및 액세스 정보 XAML 형식에 대 한 보고 된 액세스 정보를 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsPublic">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsUnknown">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a type that cannot be resolved in the underlying type system.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 기본 형식 시스템에서 확인할 수 없는 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUnknown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an unresolvable type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 확인할 수 없는 형식을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUnknown">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsUnknown%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUnknown">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, a <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> that has <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph> cannot be written into an object graph.</source>
          <target state="translated">과 관련 된 로드 경로 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> 올려진 <ph id="ph3">`true`</ph> 에 대 한 <ph id="ph4">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph> 개체 그래프에 쓸 수 없습니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUnknown">
          <source>Under the default implementations in <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> , the <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=nameWithType&gt;</ph> call throws a <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph> reports <ph id="ph5">`true`</ph> for <ph id="ph6">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">기본 구현에서 <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> , <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=nameWithType&gt;</ph> throw 호출는 <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> 때 관련 <ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph> 보고서 <ph id="ph5">`true`</ph> 에 대 한 <ph id="ph6">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUnknown">
          <source>You should not pass a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that has <ph id="ph2">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph> as <ph id="ph3">`true`</ph> unless you are prepared to handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior or the XAML node stream prior to writing the object graph.</source>
          <target state="translated">전달 해서는 안는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 있는 <ph id="ph2">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph> 으로 <ph id="ph3">`true`</ph> 에서 예외를 처리할 준비가 있지 않은 경우 <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, 다른 방법으로 조정할 수 있고는 <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> 동작이 나 개체를 쓰기 전에 XAML 노드 스트림을 그래프입니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is built top-down during XAML initialization.</source>
          <target state="translated">XAML을 초기화하는 동안 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 하향식으로 빌드되는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is built top-down during XAML initialization; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">XAML을 초기화하는 동안 이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 하향식으로 빌드되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>Top-down is a metaphor that approximates XAML processor behavior when creating the object graph.</source>
          <target state="translated">위에서 아래로 개체 그래프를 만들 때 XAML 프로세서 동작에 근접 하는 메타포.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>When built top-down, a type is instantiated, attached to the parent, and then has its properties set.</source>
          <target state="translated">위에서 아래로 작성할 때 형식이 인스턴스화되고 부모에 연결 된 다음 해당 속성이 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>Top-down construction avoids invoking property-changed handlers multiple times.</source>
          <target state="translated">하향식 생성 속성 변경 처리기를 여러 번 호출 하는 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</source>
          <target state="translated">이러한 처리는 개체 그래프를 위로 잔물결 및 따라서 여러 처리기 호출을 제거 하 고이 개체 그래프의 시작을 위해 성능을 최적화 만듭니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsUsableDuringInitialization">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a whitespace significant collection, as per the XML definition.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 XML 정의를 기준으로 유효한 공백 컬렉션을 나타내는지 여부를 지정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a whitespace significant collection; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 유효한 공백 컬렉션을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.IsXData">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents XML <ph id="ph2">&lt;see langword="XDATA" /&gt;</ph>, as per the XAML definition.</source>
          <target state="translated">XAML 정의를 기준으로 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 XML <ph id="ph2">&lt;see langword="XDATA" /&gt;</ph>를 나타내는지 여부를 지정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsXData">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents <ph id="ph3">&lt;see langword="XDATA" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 <ph id="ph1">&lt;see langword="true" /&gt;</ph>를 나타내면 <ph id="ph3">&lt;see langword="XDATA" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsXData">
          <source>This property aligns to the <ph id="ph1">`[is xdata]`</ph> information item in the [MS-XAML] specification.</source>
          <target state="translated">이 속성에 맞춥니다.이 <ph id="ph1">`[is xdata]`</ph> [MS XAML] 사양에 대 한 정보 항목입니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsXData">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.IsXData">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsXData%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.ItemType">
          <source>Gets a value that provides the type information for the <ph id="ph1">&lt;see langword="Items" /&gt;</ph> property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 개체의 <ph id="ph1">&lt;see langword="Items" /&gt;</ph> 속성에 대한 형식 정보를 제공하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ItemType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the type of the items in the collection; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a collection.</source>
          <target state="translated">컬렉션에 있는 항목의 형식에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 개체이거나, 이 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 컬렉션을 나타내지 않는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ItemType">
          <source>This property is only relevant if this <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a collection (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsCollection%2A&gt;</ph> is <ph id="ph3">`true`</ph>).</source>
          <target state="translated">이 속성은이 경우 관련만 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 컬렉션을 나타냅니다 (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsCollection%2A&gt;</ph> 은 <ph id="ph3">`true`</ph>).</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ItemType">
          <source>The <ph id="ph1">`Items`</ph> property is whatever property holds items in that type of collection or array.</source>
          <target state="translated"><ph id="ph1">`Items`</ph> 속성은 해당 유형의 컬렉션 또는 배열 항목을 보유 한 모든 속성.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ItemType">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ItemType">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupItemType%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.KeyType">
          <source>Gets a value that provides the type information for the key property of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, if the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a dictionary.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 사전을 나타내는 경우 이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>의 키 속성에 대한 형식 정보를 제공하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.KeyType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the type of the key for dictionary usage, otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a dictionary.</source>
          <target state="translated">사전인 경우 키의 형식에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 개체이며, 이 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 사전을 나타내지 않는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.KeyType">
          <source>This property is only relevant if this <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a dictionary (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsDictionary%2A&gt;</ph> is <ph id="ph3">`true`</ph>).</source>
          <target state="translated">이 속성은이 경우 관련만 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 사전을 나타냅니다 (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsDictionary%2A&gt;</ph> 은 <ph id="ph3">`true`</ph>).</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.KeyType">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.KeyType">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupKeyType%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>The directive for which to find the aliased member.</source>
          <target state="translated">별칭이 지정된 멤버를 찾을 지시문입니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>Returns the XAML member that is aliased to a XAML directive by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에 의해 XAML 지시문에 별칭으로 지정되는 XAML 멤버를 반환합니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>The aliased member, if found; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">별칭이 지정된 멤버를 찾았으면 해당 멤버이고, 그렇지 않으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAliasedProperty%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드를 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAliasedProperty%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>The default implementation can return results for the following XAML directives: <ph id="ph1">`Key`</ph>; <ph id="ph2">`Name`</ph>; <ph id="ph3">`Uid`</ph>; and <ph id="ph4">`xml:lang`</ph>.</source>
          <target state="translated">기본 구현은 다음 XAML 지시문에 대 한 결과 반환할 수 있습니다: <ph id="ph1">`Key`</ph>; <ph id="ph2">`Name`</ph>; <ph id="ph3">`Uid`</ph>; 및 <ph id="ph4">`xml:lang`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>Values for these depend on underlying reflection and might still return <ph id="ph1">`null`</ph> if no aliased property is found.</source>
          <target state="translated">값은 기본 리플렉션 달라 지 며 여전히를 반환할 수 있습니다 이러한 <ph id="ph1">`null`</ph> 별칭이 지정 된 속성이 없는 경우.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or the schema information of a type.</source>
          <target state="translated">XAML 형식 시스템의 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>Returns an enumerable set that contains all attachable properties that are exposed by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에 의해 노출되는 모든 연결 가능 속성을 포함하는 열거 가능한 집합을 반환합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>An enumerable set that contains zero or more <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> values; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">0개 이상의 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 값을 포함하는 열거 가능한 집합이거나, 그렇지 않으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드를 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>Although <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;</ph> returns a generic collection, this <ph id="ph2">`Lookup`</ph> method returns a generic enumerable set.</source>
          <target state="translated">하지만 <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllAttachableMembers%2A&gt;</ph> 제네릭 컬렉션을 반환이 <ph id="ph2">`Lookup`</ph> 메서드 제네릭 열거 가능한 집합을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">기본 구현은 내부 CLR 리플렉션을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>When <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph2">`null`</ph>, the default implementation can use <ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>, if it is available.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> 은 <ph id="ph2">`null`</ph>, 기본 구현은 צ ְ ײ <ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>, 사용 가능한 경우.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>This behavior calls <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph> recursively to attempt to find a valid base type and returns <ph id="ph2">`null`</ph> if no valid base type exists.</source>
          <target state="translated">호출 하는이 동작과 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph> 유효한 기본 형식 및 반환 찾으려고 시도에 재귀적으로 <ph id="ph2">`null`</ph> 올바른 기본 형식이 있는 경우.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</source>
          <target state="translated">Null 반환 형식 시스템 또는 리플렉션 지원 부족으로 인해 정보를 확인할 수 없는 경우에 예약 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllAttachableMembers">
          <source>If a type is valid and reflection or other techniques are available, but a type does not have attachable members, you should instead return an empty <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> set.</source>
          <target state="translated">빈 형식이 유효한 및 리플렉션 또는 기타 기술을 사용할 수 있는 이지만 형식에 연결할 수 있는 멤버가 없을 경우 대신 반환 해야 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> 설정 합니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>Returns an enumerable set that contains all the members that are exposed by this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에 의해 노출되는 모든 멤버를 포함하는 열거 가능한 집합을 반환합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>An enumerable set that contains zero or more <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> values.</source>
          <target state="translated">0개 이상의 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 값을 포함하는 열거 가능한 집합입니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드를 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>Although <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;</ph> returns a generic collection, this <ph id="ph2">`Lookup`</ph> method returns a generic enumerable set.</source>
          <target state="translated">하지만 <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAllMembers%2A&gt;</ph> 제네릭 컬렉션을 반환이 <ph id="ph2">`Lookup`</ph> 메서드 제네릭 열거 가능한 집합을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">기본 구현은 내부 CLR 리플렉션을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>For cases where <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph2">`null`</ph>, the default implementation can use <ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>, if it is available.</source>
          <target state="translated">사례에 대 한 여기서 <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> 은 <ph id="ph2">`null`</ph>, 기본 구현은 צ ְ ײ <ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>, 사용 가능한 경우.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>This behavior calls <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph> recursively to attempt to find a valid base type, and returns <ph id="ph2">`null`</ph> if no valid base type exists.</source>
          <target state="translated">호출 하는이 동작과 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph> 재귀적으로 반환 하 고 유효한 기본 형식을 찾으려고 시도 <ph id="ph2">`null`</ph> 올바른 기본 형식이 있는 경우.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</source>
          <target state="translated">Null 반환 형식 시스템 또는 리플렉션 지원 부족으로 인해 정보를 확인할 수 없는 경우에 예약 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>If a type is valid, reflection or other techniques are available; if a type does not have members, you should instead return an empty <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> set.</source>
          <target state="translated">리플렉션 또는 기타 기술을 형식이 유효한 경우을 사용할 수 있습니다. 형식에 멤버가 없을 경우 대신 빈을 반환 해야 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> 설정 합니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>Return values for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph> should be mutually exclusive.</source>
          <target state="translated">반환 값에 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAllMembers%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A&gt;</ph> 상호 배타적인 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllMembers">
          <source>If you have a situation where a backing type system property can support a standard instance usage as well as an attachable usage, that member should be reported as two different <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> values, with one value appearing in the attachable list and another in the standard members list.</source>
          <target state="translated">지원 형식 시스템 속성이 연결 가능한 사용 뿐만 아니라 표준 인스턴스 사용을 지원할 수 있는 상황을 설정한 경우 해당 멤버 서로 다른 두 성공으로 보고 됩니다 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 값이 하나의 값에서 다른 및 연결할 수 있는 목록에 표시 되는 표준 멤버 목록입니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>Returns a list of the types that are usable as the <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ContentProperty" /&gt;</ph> value for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.ContentProperty" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 값으로 사용할 수 있는 형식 목록을 반환합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>A list of possible content types.</source>
          <target state="translated">가능한 콘텐츠 형식의 목록입니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드를 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>Types that evaluate as <ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> for a specific content type are not considered multiple types for purposes of <ph id="ph2">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>.</source>
          <target state="translated">형식으로 평가 하는 <ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> 를 특정 콘텐츠 형식에 대 한 여러 종류의 목적을 위해을 간주 되지 않는 <ph id="ph2">&lt;xref:System.Xaml.XamlType.AllowedContentTypes%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>The default implementation can use other properties of <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> (<ph id="ph2">&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph>) to obtain a result.</source>
          <target state="translated">기본 구현은의 다른 속성을 사용할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> (<ph id="ph2">&lt;xref:System.Xaml.XamlType.ContentWrappers%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;</ph>, 또는 <ph id="ph4">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph>)는 결과를 얻습니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>The <ph id="ph1">`Lookup`</ph> overrides for the preceding property list can also be invoked in this determination.</source>
          <target state="translated"><ph id="ph1">`Lookup`</ph> 이전 속성 목록이이 결정에서 호출 될 수도 있습니다을 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAllowedContentTypes">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>The name of the attachable member to get, in <bpt id="p1">&lt;c&gt;</bpt>ownerTypeName.MemberName<ept id="p1">&lt;/c&gt;</ept> form.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>ownerTypeName.MemberName<ept id="p1">&lt;/c&gt;</ept> 형식으로 된 가져올 연결 가능 멤버의 이름입니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> for a specific named attachable from this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에서 명명된 특정 연결 가능 항목에 대해 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> object for the requested attachable member; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if no attachable member by that name exists.</source>
          <target state="translated">요청된 연결 가능 멤버의 경우 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 개체이고, 그렇지 않고 해당 이름의 연결 가능 멤버가 없는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드를 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetAttachableMember%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">기본 구현은 내부 CLR 리플렉션을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>When <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph2">`null`</ph>, the default implementation can use <ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>, if it is available.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> 은 <ph id="ph2">`null`</ph>, 기본 구현은 צ ְ ײ <ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>, 사용 가능한 경우.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>This behavior calls <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> recursively to attempt to find a valid base type and returns <ph id="ph2">`null`</ph> if no valid base type exists.</source>
          <target state="translated">호출 하는이 동작과 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> 유효한 기본 형식 및 반환 찾으려고 시도에 재귀적으로 <ph id="ph2">`null`</ph> 올바른 기본 형식이 있는 경우.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupAttachableMember%2A&gt;</ph> 가상 함수 이며 따라서 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면는 <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph> 기본 CLR 형식에 대 한 정보입니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">보고 하는 멤버의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the immediate base type of this XAML type.</source>
          <target state="translated">이 XAML 형식의 직접적인 기본 형식에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>Determination of this value is based on the underlying type of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> and schema context.</source>
          <target state="translated">이 값은 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 및 스키마 컨텍스트의 기본 형식을 기준으로 결정됩니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the immediate base type of this XAML type.</source>
          <target state="translated">이 XAML 형식의 직접적인 기본 형식에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드를 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>The default implementation might return an internal constant that represents the <ph id="ph1">&lt;xref:System.Object&gt;</ph> if <ph id="ph2">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">기본 구현은 나타내는 내부 상수를 반환할 수 있습니다는 <ph id="ph1">&lt;xref:System.Object&gt;</ph> 경우 <ph id="ph2">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> 은 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupBaseType%2A&gt;</ph> 가상 함수 이며 따라서 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 시스템의 정보는 XAML 형식에 대 한 보고 된 형식 정보를 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupBaseType">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>Returns a value of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlCollectionKind" /&gt;</ph> enumeration that declares which specific collection type this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> uses.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlCollectionKind" /&gt;</ph>에서 사용하는 특정 컬렉션 형식을 선언하는 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 열거형의 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>A value of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlCollectionKind" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlCollectionKind" /&gt;</ph> 열거형의 값입니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>This method is invoked by an internal private method (no public <ph id="ph1">`CollectionKind`</ph> or <ph id="ph2">`GetCollectionKind`</ph> API exists on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>).</source>
          <target state="translated">이 메서드는 내부 전용 메서드를 호출한 (public <ph id="ph1">`CollectionKind`</ph> 또는 <ph id="ph2">`GetCollectionKind`</ph> api <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>The default implementation uses the internal CLR reflection.</source>
          <target state="translated">기본 구현은 내부 CLR 리플렉션을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>For cases where <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> is <ph id="ph2">`null`</ph>, the default implementation can use <ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>, if it is available.</source>
          <target state="translated">사례에 대 한 여기서 <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> 은 <ph id="ph2">`null`</ph>, 기본 구현은 צ ְ ײ <ph id="ph3">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph>, 사용 가능한 경우.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>This behavior indirectly calls <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> recursively to attempt to find a valid base type; it returns <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph> if no valid base type exists.</source>
          <target state="translated">이 동작은 간접적으로 호출 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> 유효한 기본 형식을 찾으려고 시도에 재귀적으로 반환 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph> 올바른 기본 형식이 있는 경우.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>In general, the default implementation attempts to find the <ph id="ph1">`Add`</ph> method of the underlying type by reflection.</source>
          <target state="translated">기본 구현은 찾으려고 시도 하는 일반적으로 <ph id="ph1">`Add`</ph> 리플렉션에 의해 기본 형식의 메서드.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>If found, the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> of the <ph id="ph2">`Add`</ph> method is enough information to determine which <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlCollectionKind&gt;</ph> value should be returned.</source>
          <target state="translated">하는 경우 발견는 <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> 의 <ph id="ph2">`Add`</ph> 메서드 결정할 충분 한 정보는 <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlCollectionKind&gt;</ph> 값이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>Otherwise, it returns <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">그 외의 경우 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCollectionKind">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> must have arguments (generic constraints through <ph id="ph2">&lt;see langword="x:TypeArguments" /&gt;</ph>, initialization text, or other XAML techniques) to construct a valid instance of the type.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에 인수(<ph id="ph2">&lt;see langword="x:TypeArguments" /&gt;</ph>, 초기화 텍스트 또는 기타 XAML 기술을 통한 제네릭 제약 조건)가 있어야 유효한 형식 인스턴스를 생성할 수 있는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if construction of an instance requires some argument value; otherwise, false.</source>
          <target state="translated">인스턴스를 생성하기 위해 일부 인수 값이 필요하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 false입니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드를 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source>The default implementation returns <ph id="ph1">`false`</ph> for types considered value types in the CLR type system.</source>
          <target state="translated">기본 구현은 반환 <ph id="ph1">`false`</ph> CLR에서 값 형식으로 간주 되는 형식에 대 한 형식 시스템.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source>For other than value types, CLR reflection <ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> is used to determine whether a default constructor exists.</source>
          <target state="translated">값 형식, CLR 리플렉션이 아닌 <ph id="ph1">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> 기본 생성자가 있는지 여부를 확인 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the content property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>의 콘텐츠 속성에 대한 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 정보를 반환합니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the content property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>의 콘텐츠 속성에 대한 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 정보입니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>May be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드를 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>The default implementation checks for <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> on the type definition.</source>
          <target state="translated">기본 구현에 대 한 검사 <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> 형식 정의에 있습니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">확인할 수도 <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> 내부 형식에 특성이 있으면 특성에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>If these checks do not discover a content type, the default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">기본 구현에서 반환 하는 경우 이러한 검사에는 콘텐츠 형식을 검색 하지 않으면, <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentProperty">
          <source>Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</source>
          <target state="translated">XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>Gets a list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> values that represent the content wrappers for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에 대한 콘텐츠 래퍼를 나타내는 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 값의 목록을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> values that represent the content wrappers for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에 대한 콘텐츠 래퍼를 나타내는 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 값의 목록입니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>A content wrapper is a class that represents the content collection type when the types that are used in that collection are not contiguous to the type system.</source>
          <target state="translated">콘텐츠 래퍼는 해당 컬렉션에 사용 되는 형식이 형식 시스템에 연속 되지 않을 때 컬렉션 콘텐츠 형식을 나타내는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>The types of collection items for the content wrapper are expected to be limited in some manner beyond <ph id="ph1">&lt;xref:System.Object&gt;</ph> or a neutral object equivalent.</source>
          <target state="translated">콘텐츠 래퍼에 대 한 컬렉션 항목의 형식은 이외의 다른 방법으로 제한 될 것으로 예상 되 <ph id="ph1">&lt;xref:System.Object&gt;</ph> 또는 이와 동등한 중립 개체입니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>However, this limitation is only enforced by the design or purpose of the properties that use that type, and not by the type system.</source>
          <target state="translated">그러나이 제한 사항은 형식 시스템 아니라에 의해 디자인 또는 해당 형식을 사용 하는 속성의 목적에만 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>More than one content wrapper can exist on a type.</source>
          <target state="translated">둘 이상의 콘텐츠 래퍼 형식에 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupContentWrappers">
          <source>For an example class and scenario from the WPF XAML implementation, see <ph id="ph1">&lt;xref:System.Windows.Documents.InlineCollection&gt;</ph>.</source>
          <target state="translated">예제 클래스 및 WPF XAML 구현과에서 시나리오에 대 한 참조 <ph id="ph1">&lt;xref:System.Windows.Documents.InlineCollection&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
          <source>When implemented in a derived class, returns an <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> implementation.</source>
          <target state="translated">파생 클래스에서 구현되는 경우 <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> 구현을 반환합니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
          <source>Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</source>
          <target state="translated">내부 리플렉션 CLR 특성 값을 얻을 수 있는 대체 방법으로 제공 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
          <source>In absence of an override, the internal reflector uses typical CLR reflection logic.</source>
          <target state="translated">재정의가 없는 경우, 내부 반영자는 일반적인 CLR 리플렉션 논리를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
          <source>The default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">기본 구현은 <ph id="ph1">`null`</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which is used for deferred loading of XAML-declared objects.</source>
          <target state="translated">XAML 선언된 개체의 지연된 로드에 사용되는 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> that has a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> constraint on the generic.</source>
          <target state="translated">제네릭에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 제약 조건이 있는 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>This method can be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;</ph>.</source>
          <target state="translated">값을 가져올 때이 메서드를 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;</ph> to return a different value than is enabled by default internal reflection and are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> information.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.DeferringLoader%2A&gt;</ph> 반환 다른 값은 기본적으로 활성화 내부 리플렉션 및 제공 하는 사용자 지정 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 정보입니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>The default implementation returns an object on the basis of reading <ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph>.</source>
          <target state="translated">기본 구현 읽어 개체를 반환 합니다. <ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>It can also  check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">확인할 수도 <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> 내부 형식에 특성이 있으면 특성에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupDeferringLoader">
          <source>If a value is unavailable, this method returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">이 메서드는 반환 값을 사용할 수 없으면 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>과 연결된 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph> information for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlTypeInvoker" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 정보이거나, 그렇지 않으면 <ph id="ph3">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>The default implementation does not require that a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> be constructed by using one of the constructors that pass an initial <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>.</source>
          <target state="translated">기본 구현은 것을 요구 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 초기를 전달 하는 생성자 중 하나를 사용 하 여 생성할 수 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>However, an <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> value must exist for the <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>; otherwise, the default implementation returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">그러나는 <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> 값에 대 한 있어야는 <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>, 그렇지 않으면 기본 구현에서는 반환 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>Override this method if you also create a derived class from <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> and intend to return the derived class.</source>
          <target state="translated">파생된 된 클래스도 만들려는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlTypeInvoker&gt;</ph> 및 파생된 클래스를 반환 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupInvoker">
          <source>If you return <ph id="ph1">`null`</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph> returns <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph> to callers.</source>
          <target state="translated">반환 하는 경우 <ph id="ph1">`null`</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlType.Invoker%2A&gt;</ph> 반환 <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph> 호출자에 게 있습니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an ambient type, as per the XAML definition.</source>
          <target state="translated">XAML 정의를 기준으로 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 앰비언트 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents an ambient type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 앰비언트 형식을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>The default implementation uses CLR reflection on the <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> and can check the base types.</source>
          <target state="translated">에 CLR 리플렉션을 사용 하는 기본 구현에서 <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> 기본 형식을 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>This implementation checks for the <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> that is applied to the relevant type's definition at the class level and returns <ph id="ph2">`true`</ph> in this case.</source>
          <target state="translated">이 구현에 대 한 검사는 <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> 를 반환 하는 클래스 수준에는 관련 형식의 정의에 적용 되는 <ph id="ph2">`true`</ph> 이 경우.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>All other cases return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">다른 모든 경우에 반환할 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsAmbient">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;</ph> to return a different value than is enabled by default internal reflection.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsAmbient%2A&gt;</ph> 은 기본적으로 활성화 내부 리플렉션 다른 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a constructible type, as per the XAML definition.</source>
          <target state="translated">XAML 정의를 기준으로 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 생성 가능 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a constructible type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 생성 가능 형식을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>The default implementation uses CLR reflection on the <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>.</source>
          <target state="translated">기본 구현에서 CLR 리플렉션을 사용 하 여 <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>The type must be concrete, non-nested, and closed.</source>
          <target state="translated">형식은 구체적인, 비중첩 및 닫힌 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>The default implementation checks whether the type is a value type and the return of <ph id="ph1">&lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;</ph>.</source>
          <target state="translated">기본 구현에서는 값 형식 및의 반환 형식이 인지 확인 <ph id="ph1">&lt;xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>For a null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>, this method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Null에 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>,이 메서드가 반환 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsConstructible">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;</ph> to return a different value than is enabled by default internal reflection.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsConstructible%2A&gt;</ph> 은 기본적으로 활성화 내부 리플렉션 다른 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a markup extension.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 태그 확장을 나타내는지 여부를 표시하는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a markup extension; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 태그 확장을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source>The default implementation consists only of this call:</source>
          <target state="translated">기본 구현은이 호출의만 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph> to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph> 다른 논리를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsMarkupExtension">
          <source>In XAML specification terms, this type must be assignable to <ph id="ph1">`x:MarkupExtension`</ph> in order to return <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>.</source>
          <target state="translated">XAML 사양 측면에서이 형식에 할당할 수 있어야 <ph id="ph1">`x:MarkupExtension`</ph> 반환 하기 위해 <ph id="ph2">`true`</ph> 에 대 한 <ph id="ph3">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a XAML namescope, as per the XAML definition.</source>
          <target state="translated">XAML 정의를 기준으로 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 XAML 이름 범위를 나타내는지 여부를 지정하는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a XAML namescope; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 XAML 이름 범위를 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>The default implementation makes a <ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> call indirectly against the type <ph id="ph2">&lt;xref:System.Windows.Markup.INameScope&gt;</ph>.</source>
          <target state="translated">기본 구현에서는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> 형식에 대해 직접 호출 <ph id="ph2">&lt;xref:System.Windows.Markup.INameScope&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> is an interface that is defined in the assembly WindowsBase.dll.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> WindowsBase.dll 어셈블리에 정의 된 인터페이스가입니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>This technique for XAML namescope identification is used both by WPF and Windows Workflow Foundation implementations of XAML.</source>
          <target state="translated">XAML 이름 범위 id에 대 한이 방법을 사용 되는 WPF, Windows Workflow Foundation XAML 구현에서 모두 합니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph> to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph> 다른 논리를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>A XAML namescope enforces the name uniqueness of the property or properties that are used for <ph id="ph1">`x:Name`</ph><ph id="ph2"> / </ph><ph id="ph3">`[name property]`</ph>.</source>
          <target state="translated">속성 또는 속성에 사용 되는 이름의 고유성을 적용 하는 XAML 이름 범위 <ph id="ph1">`x:Name`</ph> <ph id="ph2"> / </ph> <ph id="ph3">`[name property]`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph> is <ph id="ph2">`true`</ph>, then some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNameScope%2A&gt;</ph> 은 <ph id="ph2">`true`</ph>, 고유성을 적용 하기 위한 메커니즘이 있어야 하 고 XAML 이름 범위를 소유 하는이 형식의 관점에서 평가 해야 합니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNameScope">
          <source>The XAML namescope then extends to the content of the type until another XAML namescope owning type is encountered.</source>
          <target state="translated">그런 다음 XAML 이름 범위 XAML 이름 범위 소유 다른 형식이 발견 될 때까지 형식 내용으로 확장 합니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a nullable type, as per the XAML definition.</source>
          <target state="translated">XAML 정의를 기준으로 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 null 허용 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a nullable type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 null 허용 형식을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source>The default implementation makes a determination based on the CLR core library nullable concept, checked against <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>.</source>
          <target state="translated">기본 구현에서는 개념에 따라 CLR 핵심 라이브러리 nullable, 여부를 검사 하는 결정 <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source>For a null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>, it returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Null에 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>, 반환 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsNullable">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;</ph> to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsNullable%2A&gt;</ph> 다른 논리를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a public type in the relevant type system.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 관련 형식 시스템에서 public 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a public type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 public 형식을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>The default implementation uses CLR reflection against a non-null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>.</source>
          <target state="translated">기본 구현은 null이 아닌에 대해 CLR 리플렉션을 사용 하 여 <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>For a null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>, it returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Null에 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>, 반환 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;</ph> to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsPublic%2A&gt;</ph> 다른 논리를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsPublic%2A&gt;</ph> 가상 함수 이며 따라서 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system or access information of its underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 또는 기타) 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 시스템 또는 액세스 정보 XAML 형식에 대 한 보고 된 액세스 정보를 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsPublic">
          <source>For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</source>
          <target state="translated">할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a type that cannot be resolved in the underlying type system.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 기본 형식 시스템에서 확인할 수 없는 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a nonresolvable type; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 확인할 수 없는 형식을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source>The default implementation can use CLR reflection.</source>
          <target state="translated">기본 구현은 CLR 리플렉션을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source>For a null <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>, it returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Null에 대 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>, 반환 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsUnknown">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph> to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUnknown%2A&gt;</ph> 다른 논리를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a whitespace significant collection, as per the XML definition.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 XML 정의를 기준으로 유효한 공백 컬렉션을 나타내는지 여부를 지정하는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a white-space significant collection; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 유효한 공백 컬렉션을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;</ph>.</source>
          <target state="translated">읽기에 따라 값을 반환 하는 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>It can also check the <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">또한 확인할 수는 <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> 내부 형식에 특성이 있으면 특성에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>If a value is not available, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">반환 값을 사용할 수 없으면 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;</ph> to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A&gt;</ph> 다른 논리를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsXData">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents XML <ph id="ph2">&lt;see langword="XDATA" /&gt;</ph>, as per the XAML definition.</source>
          <target state="translated">XAML 정의를 기준으로 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 XML <ph id="ph2">&lt;see langword="XDATA" /&gt;</ph>를 나타내는지 여부를 지정하는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupIsXData">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents <ph id="ph3">&lt;see langword="XDATA" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 <ph id="ph1">&lt;see langword="true" /&gt;</ph>를 나타내면 <ph id="ph3">&lt;see langword="XDATA" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsXData">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsXData%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsXData%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsXData">
          <source>The default implementation makes a <ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> call indirectly against the type <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>.</source>
          <target state="translated">기본 구현에서는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType.CanAssignTo%2A&gt;</ph> 형식에 대해 직접 호출 <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupIsXData">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsXData%2A&gt;</ph> to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsXData%2A&gt;</ph> 다른 논리를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>Returns a value that provides the type information for the <ph id="ph1">&lt;see langword="Items" /&gt;</ph> property of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 개체의 <ph id="ph1">&lt;see langword="Items" /&gt;</ph> 속성에 대한 형식 정보를 제공하는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the type of the items in the collection; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph> if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a collection.</source>
          <target state="translated">컬렉션에 있는 항목의 형식에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 개체이거나, 이 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 컬렉션을 나타내지 않는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>The default implementation can use CLR reflection concepts, such as checking for an <ph id="ph1">`Add`</ph> method by <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> and using the <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>; checking <ph id="ph4">&lt;xref:System.Xaml.XamlType.IsArray%2A&gt;</ph>; and checking <ph id="ph5">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> and trying the same logic there.</source>
          <target state="translated">기본 구현은 확인 등과 같은 CLR 리플렉션 개념을 사용할 수는 <ph id="ph1">`Add`</ph> 메서드를 <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> 를 사용 하 고는 <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>검사; <ph id="ph4">&lt;xref:System.Xaml.XamlType.IsArray%2A&gt;</ph>; 및 검사 <ph id="ph5">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> 하 고 그 동일한 논리를 시도 합니다.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph> to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.ItemType%2A&gt;</ph> 다른 논리를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupItemType">
          <source>Cases where <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> returns <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph> should return <ph id="ph3">`null`</ph>.</source>
          <target state="translated">인 사례 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> 반환 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType&gt;</ph> 반환할지 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>Returns a value that provides the type information for the key property of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, if the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a dictionary.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 사전을 나타내는 경우 이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>의 키 속성에 대한 형식 정보를 제공하는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the type of the key for dictionary usage, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a dictionary,</source>
          <target state="translated">사전 사용 키의 형식에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 개체이거나, 이 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 사전을 나타내지 않는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.KeyType%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.KeyType%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>The default implementation can use CLR reflection concepts, such as checking for an <ph id="ph1">`Add`</ph> method by <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> and using the <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>; and checking <ph id="ph4">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> and trying the same logic there.</source>
          <target state="translated">기본 구현에 대 한 확인 하는 등의 CLR 리플렉션 개념을 사용할 수는 <ph id="ph1">`Add`</ph> 메서드 <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> 를 사용 하 고는 <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo&gt;</ph>; 및 검사 <ph id="ph4">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> 하 고 그 동일한 논리를 시도 합니다.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.KeyType%2A&gt;</ph> to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.KeyType%2A&gt;</ph> 다른 논리를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupKeyType">
          <source>Cases where <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> does not return <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.Dictionary?displayProperty=nameWithType&gt;</ph> should return <ph id="ph3">`null`</ph>.</source>
          <target state="translated">인 사례 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupCollectionKind%2A&gt;</ph> 반환 하지 않는 <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlCollectionKind.Dictionary?displayProperty=nameWithType&gt;</ph> 반환할지 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>Returns a value that provides the type information for the returned <ph id="ph1">&lt;see langword="ProvideValue" /&gt;</ph> of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, if it represents a markup extension.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 태그 확장을 나타내는 경우 이 개체의 반환된 <ph id="ph1">&lt;see langword="ProvideValue" /&gt;</ph>에 대한 형식 정보를 제공하는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the return type for markup extension usage; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a markup extension.</source>
          <target state="translated">태그 확장 사용의 반환 형식에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 개체이거나, 이 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 태그 확장을 나타내지 않는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>The default implementation returns a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> on the basis of reading <ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph>.</source>
          <target state="translated">기본 구현은 반환 하는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 읽어 <ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">확인할 수도 <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> 내부 형식에 특성이 있으면 특성에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>If a value is not available, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">반환 값을 사용할 수 없으면 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;</ph> to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A&gt;</ph> 다른 논리를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>The name of the member to get (as a string).</source>
          <target state="translated">문자열로 가져올 멤버의 이름입니다.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to return a member even if that member has a <ph id="ph2">&lt;see langword="true" /&gt;</ph> value for <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.IsReadOnly" /&gt;</ph>; <ph id="ph4">&lt;see langword="false" /&gt;</ph> to not return a <ph id="ph5">&lt;see cref="P:System.Xaml.XamlMember.IsReadOnly" /&gt;</ph> member.</source>
          <target state="translated">멤버의 <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.IsReadOnly" /&gt;</ph> 값이 <ph id="ph1">&lt;see langword="true" /&gt;</ph>인 경우에도 해당 멤버를 반환하면 <ph id="ph2">&lt;see langword="true" /&gt;</ph>이고, <ph id="ph5">&lt;see cref="P:System.Xaml.XamlMember.IsReadOnly" /&gt;</ph> 멤버를 반환하지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> for a specific named member from this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>에서 명명된 특정 멤버의 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> information for the member, if a member was found; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">멤버를 찾았으면 해당 멤버의 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 정보이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>The default implementation returns a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> based on internal CLR reflection and evaluation against the schema context.</source>
          <target state="translated">기본 구현은 반환 하는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 내부 CLR 리플렉션 및 스키마 컨텍스트에 대 한 평가 기반 합니다.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;</ph> to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetMember%2A&gt;</ph> 다른 논리를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph> is virtual, and therefore, can be overridden.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMember%2A&gt;</ph> 가상 함수 이며 따라서 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph> information about the underlying CLR type.</source>
          <target state="translated">재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면는 <ph id="ph1">&lt;xref:System.ComponentModel.TypeDescriptor&gt;</ph> <ph id="ph2">`Get*`</ph> 기본 CLR 형식에 대 한 정보입니다.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
          <source>For any security-critical checks of member reporting, use the underlying CLR type instead.</source>
          <target state="translated">보고 하는 멤버의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>The count (arity) of the particular syntax or constructor mode that you want information about.</source>
          <target state="translated">정보를 보려는 특정 구문 또는 생성자 모드의 개수입니다.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">태그 확장 형식의 경우 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에 대한 특정 태그 확장 사용에서 지원되는 위치 매개 변수의 형식을 반환합니다.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> values where each such <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is the type for that position in the syntax.</source>
          <target state="translated">각 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 구문에서 해당 위치의 형식인 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 값의 목록입니다.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>You must specify those types in the same order when supplying markup input for the markup extension.</source>
          <target state="translated">태그 확장에 대한 태그 입력을 제공할 때 이 형식을 동일한 순서로 지정해야 합니다.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>The default implementation uses internal reflection information based on finding constructors and checking the arity.</source>
          <target state="translated">기본 구현에서는 생성자를 찾아서 인자 수를 확인 하는 중에 따라 내부 리플렉션 정보를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph> to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph> 다른 논리를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>This API is only relevant if this <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a markup extension (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph> is <ph id="ph3">`true`</ph>).</source>
          <target state="translated">이 API는 경우이 해당만 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 태그 확장을 나타내는 (<ph id="ph2">&lt;xref:System.Xaml.XamlType.IsMarkupExtension%2A&gt;</ph> 은 <ph id="ph3">`true`</ph>).</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>The input <ph id="ph1">`parameterCount`</ph> is not for requesting the type of a specific positional parameter.</source>
          <target state="translated">입력 <ph id="ph1">`parameterCount`</ph> 요청 특정 위치 매개 변수 형식에 대 한 않습니다.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>It is for specifying the arity of a markup extension usage.</source>
          <target state="translated">태그 확장 사용의 인자 수 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>Markup extension usage often has multiple signatures and uses different parameter arity (count) of positional parameters to differentiate.</source>
          <target state="translated">태그 확장 사용에 여러 개의 시그니처가 간격과 다른 매개 변수 인자 (개수)의 위치 매개 변수를 사용 하 여 구분 합니다.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</source>
          <target state="translated">그러나 중복 arities를 허용 하기 위해 차이점에 대 한 종류의 위치 매개 변수를 사용 하 여 스키마 컨텍스트를 구성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>For a specific arity count, the parameter positions and types can vary.</source>
          <target state="translated">특정 인자 개수에 대 한 매개 변수 위치와 형식 달라질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>To get the positional type of a specific arity's markup extension usage, you first call <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph> with the arity count.</source>
          <target state="translated">위치 형식을 특정 인자 태그 확장 사용을 가져오려면 먼저 호출 <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetPositionalParameters%2A&gt;</ph> 인자 수가 있습니다.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
          <source>Then get the item at that position from the returned collection.</source>
          <target state="translated">그런 다음 반환된 된 컬렉션에서 해당 위치의 항목을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
          <source>Returns a handler callback to use for the set operations of markup extensions.</source>
          <target state="translated">태그 확장의 설정 작업에 사용할 처리기 콜백을 반환합니다.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
          <source>A handler callback to use for the set operations of markup extensions.</source>
          <target state="translated">태그 확장의 설정 작업에 사용할 처리기 콜백입니다.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;</ph>.</source>
          <target state="translated">읽기에 따라 값을 반환 하는 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">확인할 수도 <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> 내부 형식에 특성이 있으면 특성에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">반환 값을 사용할 수 없으면 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
          <source>Returns a handler to use for type converter setting cases.</source>
          <target state="translated">형식 변환기 설정 사례에 사용할 처리기를 반환합니다.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
          <source>A handler to use for type converter setting cases.</source>
          <target state="translated">형식 변환기 설정 사례에 사용할 처리기입니다.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetTypeConverterAttribute&gt;</ph>.</source>
          <target state="translated">읽기에 따라 값을 반환 하는 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetTypeConverterAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">확인할 수도 <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> 내부 형식에 특성이 있으면 특성에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">반환 값을 사용할 수 없으면 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> should be serialized using a mode that  trims surrounding whitespace.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 주변 공백을 트리밍하는 모드를 사용하여 serialize되어야 하는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> should be serialized in a mode that trims surrounding whitespace; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 주변 공백을 트리밍하는 모드로 serialize되어야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;</ph>.</source>
          <target state="translated">읽기에 따라 값을 반환 하는 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">확인할 수도 <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> 내부 형식에 특성이 있으면 특성에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
          <source>If a value is unavailable, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">반환 값을 사용할 수 없으면 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> that has a <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint, which represents type-conversion behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>의 값에 대한 형식 변환 동작을 나타내는 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> 제약 조건이 있는 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint that represents type-conversion behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>의 값에 대한 형식 변환 동작을 나타내는 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> 제약 조건이 있는 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이거나, 그렇지 않으면 <ph id="ph4">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>.</source>
          <target state="translated">읽기에 따라 값을 반환 하는 기본 구현은 <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>The default implementation can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">기본 구현은 확인할 수도 <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> 내부 형식에 특성이 있으면 특성에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>It also includes special logic for default conversion of enumerations, common value types, and generics.</source>
          <target state="translated">열거형, 공용 값 형식 및 제네릭 기본 변환 위한 특수 논리가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">반환 값을 사용할 수 없으면 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupTypeConverter">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;</ph> to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.TypeConverter%2A&gt;</ph> 다른 논리를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>Returns the CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that underlies this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>의 기반이 되는 CLR <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>The CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that underlies this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>의 기반이 되는 CLR <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이거나, 그렇지 않으면 <ph id="ph3">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>The default implementation returns an internal field.</source>
          <target state="translated">기본 구현은 내부 필드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>That field is generally initialized during construction and its value is based on which constructor was called and the information that you provided.</source>
          <target state="translated">해당 필드는 일반적으로 생성 하는 동안 초기화 하 고 해당 값은 어떤 생성자를 호출 하 고 사용자가 제공한 정보에 기반 합니다.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUnderlyingType">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> 다른 논리를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>Returns a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is built top-down during XAML initialization.</source>
          <target state="translated">XAML을 초기화하는 동안 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 하향식으로 빌드되는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> is built top-down during XAML initialization; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">XAML을 초기화하는 동안 이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 하향식으로 빌드되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>Top-down is a metaphor that approximates XAML processor behavior when it creates the object graph.</source>
          <target state="translated">위에서 아래로 개체 그래프를 만들 때 XAML 프로세서 동작에 근접 하는 메타포.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>When built top-down, a type is instantiated, attached to the parent, and has its properties set.</source>
          <target state="translated">위에서 아래로 작성할 때 형식, 부모에 연결 된 인스턴스화되고 해당 속성이 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>Top-down construction avoids invoking property-changed handlers multiple times.</source>
          <target state="translated">하향식 생성 속성 변경 처리기를 여러 번 호출 하는 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</source>
          <target state="translated">이러한 처리는 개체 그래프를 위로 잔물결 및 따라서 여러 처리기 호출을 제거 하 고이 개체 그래프의 시작을 위해 성능을 최적화 만듭니다.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt;</ph>.</source>
          <target state="translated">읽기에 따라 값을 반환 하는 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">확인할 수도 <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> 내부 형식에 특성이 있으면 특성에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>If a value is unavailable, it returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">반환 값을 사용할 수 없으면 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;</ph> to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A&gt;</ph> 다른 논리를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> that has a <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint, which represents value serialization behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>의 값에 대한 값 serialization 동작을 나타내는 <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> 제약 조건이 있는 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint that represents value serialization behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>의 값에 대한 값 serialization 동작을 나타내는 <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> 제약 조건이 있는 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이거나, 그렇지 않으면 <ph id="ph4">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>This method can be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출할 수 <ph id="ph1">&lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>The default implementation returns a value based on reading <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>.</source>
          <target state="translated">읽기에 따라 값을 반환 하는 기본 구현은 <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>It can also check <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> for the attribute if no attribute is found on the immediate underlying type.</source>
          <target state="translated">확인할 수도 <ph id="ph1">&lt;xref:System.Xaml.XamlType.BaseType%2A&gt;</ph> 내부 형식에 특성이 있으면 특성에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>It also includes special logic for default serialization of enumerations, common value types, or generics.</source>
          <target state="translated">열거형, 공통 값 형식 또는 제네릭의 기본 직렬화를 위한 특수 논리가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>If a value is unavailable, it returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">반환 값을 사용할 수 없으면 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.LookupValueSerializer">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;</ph> to use different logic.</source>
          <target state="translated">원하는 경우이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Xaml.XamlType.ValueSerializer%2A&gt;</ph> 다른 논리를 사용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.MarkupExtensionReturnType">
          <source>Gets a value that provides the type information for the returned <ph id="ph1">&lt;see langword="ProvideValue" /&gt;</ph> of this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>, if it represents a markup extension.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 태그 확장을 나타내는 경우 이 개체의 반환된 <ph id="ph1">&lt;see langword="ProvideValue" /&gt;</ph>에 대한 형식 정보를 제공하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.MarkupExtensionReturnType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> object for the return type for markup extension usage; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>, if this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a markup extension.</source>
          <target state="translated">태그 확장 사용의 반환 형식에 대한 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 개체이거나, 이 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 태그 확장을 나타내지 않는 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.MarkupExtensionReturnType">
          <source>This property is only relevant if this <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> represents a markup extension (<ph id="ph2">`x:MarkupExtension`</ph> is in the assignable types list).</source>
          <target state="translated">이 속성은이 경우 관련만 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 태그 확장을 나타내는 (<ph id="ph2">`x:MarkupExtension`</ph> 할당 가능한 형식 목록에).</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.MarkupExtensionReturnType">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.MarkupExtensionReturnType">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.Name">
          <source>Gets the string name of the type that this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 나타내는 형식의 문자열 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Name">
          <source>The string name of this XAML type.</source>
          <target state="translated">이 XAML 형식의 문자열 이름입니다.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.Name">
          <source>This property typically gets the schema-constructed name (per the <ph id="ph1">&lt;xref:System.Xaml.XamlType.%23ctor%2A&gt;</ph> signature), or the name of the <ph id="ph2">&lt;xref:System.Type&gt;</ph>, if it is constructed by using the pertinent constructor of the CLR type system.</source>
          <target state="translated">이 속성은 일반적으로 스키마 생성 이름을 가져옵니다 (당는 <ph id="ph1">&lt;xref:System.Xaml.XamlType.%23ctor%2A&gt;</ph> 서명), 또는 이름으로는 <ph id="ph2">&lt;xref:System.Type&gt;</ph>CLR 형식 시스템의 적절 한 생성자를 사용 하 여 생성 된 경우.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 또는 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 또는 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> objects have the same value.</source>
          <target state="translated">지정된 두 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 개체의 값이 같은지를 확인합니다.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="xamlType1" /&gt;</ph> is the same as the value of <ph id="ph3">&lt;paramref name="xamlType2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>의 값이 <ph id="ph2">&lt;paramref name="xamlType1" /&gt;</ph>의 값과 같으면 <ph id="ph3">&lt;paramref name="xamlType2" /&gt;</ph>이고, 그러지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 또는 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 또는 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> objects have different values.</source>
          <target state="translated">지정된 두 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> 개체의 값이 다른지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="xamlType1" /&gt;</ph> is different from the value of <ph id="ph3">&lt;paramref name="xamlType2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>의 값이 <ph id="ph2">&lt;paramref name="xamlType1" /&gt;</ph>의 값과 다르면 <ph id="ph3">&lt;paramref name="xamlType2" /&gt;</ph>이고, 그러지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.PreferredXamlNamespace">
          <source>Gets the single XAML namespace that is the primary XAML namespace for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에 대한 기본 XAML 네임스페이스인 단일 XAML 네임스페이스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.PreferredXamlNamespace">
          <source>The identifier, as a string, of the primary XAML namespace for this XAML type.</source>
          <target state="translated">이 XAML 형식에 대한 기본 XAML 네임스페이스의 식별자로서, 문자열로 지정됩니다.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.PreferredXamlNamespace">
          <source>This implementation provides the same value as calling <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A&gt;</ph> and then getting the first value string from the returned enumerable set.</source>
          <target state="translated">이 구현을 호출할 때와 동일한 값을 제공 <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A&gt;</ph> 한 다음 반환 된 열거 가능한 집합에서 첫 번째 값 문자열을 가져와 합니다.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.SchemaContext">
          <source>Gets the active <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> for processing this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>을 처리하기 위한 활성 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.SchemaContext">
          <source>The active <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> for processing this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>을 처리하기 위한 활성 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.SchemaContext">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> is a required parameter entry when constructing a <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> 필수 매개 변수 항목을 만들 때 한 <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.ToString">
          <source>Returns a string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>의 문자열 표현을 반환합니다.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlType.ToString">
          <source>A string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>의 문자열 표현입니다.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlType.ToString">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> implementation of <ph id="ph2">&lt;xref:System.Object.ToString%2A&gt;</ph> returns the <ph id="ph3">&lt;xref:System.Xaml.XamlType.Name%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 구현의 <ph id="ph2">&lt;xref:System.Object.ToString%2A&gt;</ph> 반환는 <ph id="ph3">&lt;xref:System.Xaml.XamlType.Name%2A&gt;</ph> 의 속성은 <ph id="ph4">&lt;xref:System.Xaml.XamlType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> has whitespace handling behavior for serialization that trims the surrounding whitespace in its content.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>에 콘텐츠에서 주변 공백을 트리밍하는 serialization의 공백 처리 동작이 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a type that uses whitespace trimming; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 공백 트리밍을 사용하는 형식을 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.TypeArguments">
          <source>Gets a list of type arguments for cases where this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> represents a generic.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 제네릭을 나타내는 경우 형식 인수의 목록을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeArguments">
          <source>A list of type argument types; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>, if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> does not represent a generic.</source>
          <target state="translated">형식 인수 형식의 목록이거나, 이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이 제네릭을 나타내지 않는 경우 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeArguments">
          <source>There are certain scenarios for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> where calling the <ph id="ph2">&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;</ph> parameter returns a list where the types are still open.</source>
          <target state="translated">에 대 한 특정 시나리오는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 를 호출 하는 고 <ph id="ph2">&lt;xref:System.Xaml.XamlType.TypeArguments%2A&gt;</ph> 매개 변수 유형은 아직 열려 목록을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeArguments">
          <source>In this case, one or more of the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> values will have placeholder values for <ph id="ph2">&lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType&gt;</ph>, such as <ph id="ph3">`T`</ph>, to represent that the generic is still open.</source>
          <target state="translated">반환 된이 경우, 하나 이상의 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 값에 대 한 자리 표시자 값을 갖게 됩니다 <ph id="ph2">&lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType&gt;</ph>와 같은 <ph id="ph3">`T`</ph>제네릭이 계속 열려 있다고 나타내기 위해.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeArguments">
          <source>This scenario can occur if you get a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> from a call to <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetXamlType%2A&gt;</ph>, instead of from a XAML reader implementation.</source>
          <target state="translated">이 시나리오는 발생 하는 경우에 발생할 수 있습니다는 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> 호출에서 <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetXamlType%2A&gt;</ph>, 대신 XAML 판독기 구현에서 합니다.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.TypeConverter">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint that represents type conversion behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>의 값에 대한 형식 변환 동작을 나타내는 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> 제약 조건이 있는 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeConverter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint that represents type conversion behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>의 값에 대한 형식 변환 동작을 나타내는 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> 제약 조건이 있는 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeConverter">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.TypeConverter">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupTypeConverter%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.UnderlyingType">
          <source>Gets the CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that underlies this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>의 기반이 되는 CLR <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.UnderlyingType">
          <source>The CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that underlies this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>의 기반이 되는 CLR <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlType.ValueSerializer">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint that represents value serialization behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>의 값에 대한 값 serialization 동작을 나타내는 <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> 제약 조건이 있는 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ValueSerializer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint that represents value serialization behavior for values of this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>의 값에 대한 값 serialization 동작을 나타내는 <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> 제약 조건이 있는 <ph id="ph3">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>이거나, 그렇지 않으면 <ph id="ph4">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ValueSerializer">
          <source>If you do not use the default internal CLR reflection technique for a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>, calls to this property can invoke <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;</ph> overrides on <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> derived classes.</source>
          <target state="translated">에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph>,이 속성에 대 한 호출을 호출할 수 <ph id="ph2">&lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;</ph> 에 재정의 <ph id="ph3">&lt;xref:System.Xaml.XamlType&gt;</ph> 파생 클래스입니다.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlType.ValueSerializer">
          <source>For more information about return values and other behavior, see the documentation for <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;</ph> on this type.</source>
          <target state="translated">반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlType.LookupValueSerializer%2A&gt;</ph> 이 형식에 대해 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>