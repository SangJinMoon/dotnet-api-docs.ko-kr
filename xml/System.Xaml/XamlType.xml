<Type Name="XamlType" FullName="System.Xaml.XamlType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="88e26b430c3cc3e4fb759456e24937af285897b6" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32037854" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlType : IEquatable&lt;System.Xaml.XamlType&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlType extends System.Object implements class System.IEquatable`1&lt;class System.Xaml.XamlType&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlType" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlType&#xA;Implements IEquatable(Of XamlType)" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlType : IEquatable&lt;System::Xaml::XamlType ^&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xaml.XamlType&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>.NET Framework XAML 서비스에 구현된 전체 XAML 시스템의 일부로 XAML 형식에 대한 정보를 보고합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 Api는 <xref:System.Xaml.XamlType> 클래스에 대해 보고 개념은 XAML 사양 [MS XAML]의 특정 섹션으로 비슷하지만 XAML 형식에 대 한 정보를 제공 합니다.  
  
 <xref:System.Xaml.XamlType> 에 널리 사용 되는.NET Framework XAML 서비스 API에서 XAML 형식에 대 한 정보를 보고 합니다. <xref:System.Xaml.XamlType> 인스턴스를 사용 하기 위해 또는 XAML 노드 스트림을 또는 유사한 XAML 표현에서 해당 멤버에 액세스 하는 XAML 형식에 대해 알아야 할 수 있는 정보를 보고 합니다. 보고 하는 것은 어떻게 비슷합니다 <xref:System.Type> CLR 형식 시스템에서 리플렉션 클래스와 함께 같은 <xref:System.Reflection.MemberInfo>, CLR 유형 및 그 사용법에 대 한 정보를 제공 합니다.  
  
 파생 시켜 XAML 형식 시스템을 확장 하려면 <xref:System.Xaml.XamlType>합니다. 효과적으로 수행 하려면 또한 해야 구현 하는 <xref:System.Xaml.Schema.XamlTypeInvoker>합니다. <xref:System.Xaml.Schema.XamlTypeInvoker> 호출 동작의 일부로 지정 하는 백업 유형 시스템에서 사용 하는 일반화 된 XAML 형식 시스템을 사용 하도록 설정 합니다. 특정 사용자 지정 <xref:System.Xaml.Schema.XamlTypeInvoker> 는 기본적으로 사용 되는 CLR 형식 시스템에 대 한 종속성을 줄일 수 있는 방법을 제공 <xref:System.Xaml.XamlType> 동작 합니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type underlyingType, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (underlyingType As Type, schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlType(Type ^ underlyingType, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="underlyingType" Type="System.Type" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="underlyingType">생성할 XAML 형식에 대한 기본 CLR <see cref="T:System.Type" />입니다.</param>
        <param name="schemaContext">XAML 판독기 또는 XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
        <summary>기본 CLR 형식 정보를 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">하나 이상의 <paramref name="underlyingType" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlType (string typeName, System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; typeArguments, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string typeName, class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; typeArguments, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (typeName As String, typeArguments As IList(Of XamlType), schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlType(System::String ^ typeName, System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ typeArguments, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="typeName">만들 형식의 이름입니다.</param>
        <param name="typeArguments">제네릭 형식을 나타내는 <see cref="T:System.Xaml.XamlType" />의 형식 인수입니다. 표시된 형식이 제네릭 형식이 아님을 나타내는 <see langword="null" />인 경우가 많습니다.</param>
        <param name="schemaContext">XAML 판독기 및 XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
        <summary>형식의 문자열 이름을 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 protected 생성자입니다. 현재 공용 파생된 클래스가 생성을 위해이 특정 경로 사용 하는 있습니다. 기존 소비자로 <xref:System.Xaml.XamlType>, 다른 생성자 시그니처를 사용 해야 합니다 (<xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29>, <xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29>, 또는 <xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29>) 초기화 하는 <xref:System.Xaml.XamlType> 개체입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">하나 이상의 <paramref name="typeName" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlTypeInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type underlyingType, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlTypeInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (underlyingType As Type, schemaContext As XamlSchemaContext, invoker As XamlTypeInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlType(Type ^ underlyingType, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlTypeInvoker ^ invoker);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="underlyingType" Type="System.Type" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlTypeInvoker" />
      </Parameters>
      <Docs>
        <param name="underlyingType">생성할 XAML 형식에 대한 기본 형식입니다.</param>
        <param name="schemaContext">XAML 판독기의 XAML 스키마 컨텍스트입니다.</param>
        <param name="invoker">
          <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대한 런타임 리플렉션 호출을 처리하는 <see cref="T:System.Xaml.XamlType" /> 구현입니다.</param>
        <summary>기본 형식 정보와 <see cref="T:System.Xaml.XamlType" /> 구현을 기반으로 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">하나 이상의 <paramref name="underlyingType" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (string unknownTypeNamespace, string unknownTypeName, System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; typeArguments, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string unknownTypeNamespace, string unknownTypeName, class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; typeArguments, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (unknownTypeNamespace As String, unknownTypeName As String, typeArguments As IList(Of XamlType), schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlType(System::String ^ unknownTypeNamespace, System::String ^ unknownTypeName, System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ typeArguments, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="unknownTypeNamespace" Type="System.String" />
        <Parameter Name="unknownTypeName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="unknownTypeNamespace">형식에 대한 XML 네임스페이스로서, 문자열로 되어 있습니다.</param>
        <param name="unknownTypeName">제공된 <c>unknownTypeNamespace</c> XAML 네임스페이스에 있는 형식의 이름입니다.</param>
        <param name="typeArguments">제네릭 형식을 나타내는 <see cref="T:System.Xaml.XamlType" />의 형식 인수입니다. 표시된 형식이 제네릭 형식이 아님을 나타내는 <see langword="null" />인 경우가 많습니다.</param>
        <param name="schemaContext">XAML 판독기 또는 XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
        <summary>XAML 네임스페이스와 형식의 문자열 이름을 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다. 이 생성자는 지원 형식 시스템과 XAML 스키마 컨텍스트에서 지원되지 않는 것으로 알려진 형식의 분석 및 XAML 노드 기록에만 사용됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 내부 형식 시스템에 매핑되는 XAML 형식의 사용할 수 있는 "알 수 없음된" 형식에 대해서만이 생성자를 사용 합니다. 이 생성자의 결과 생성할 수 없습니다 여기서 <xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=nameWithType> 은 `true`합니다. 기본 reflector 논리로 기본 형식을 보고 하는 대신, <xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=nameWithType>합니다. 그러나이 동작 때문에 변경할 수는 <xref:System.Xaml.XamlType.LookupIsUnknown%2A> 재정의 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unknownTypeNamespace" />, <paramref name="unknownTypeName" /> 또는 <paramref name="schemaContext" /> 중 하나 이상이 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="AllowedContentTypes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; AllowedContentTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; AllowedContentTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.AllowedContentTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowedContentTypes As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ AllowedContentTypes { System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="P:System.Xaml.XamlType.ContentProperty" />에 대한 <see cref="T:System.Xaml.XamlType" /> 값으로 사용할 수 있는 형식의 읽기 전용 컬렉션을 가져옵니다.</summary>
        <value>가능한 콘텐츠 형식의 읽기 전용 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 할당할 수 있는 형식 (예: 콘텐츠 형식으로 허용 되는 기본 형식에 할당할 수)를 특정 콘텐츠 형식의 목적을 위해 여러 형식을 간주 되지 않습니다 <xref:System.Xaml.XamlType.AllowedContentTypes%2A>합니다.  
  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ BaseType { System::Xaml::XamlType ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 XAML 형식의 직접적인 기본 형식에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다. 이 값은 이 <see cref="T:System.Xaml.XamlType" /> 및 스키마 컨텍스트의 기본 형식을 기준으로 결정됩니다.</summary>
        <value>이 XAML 형식의 직접적인 기본 형식에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupBaseType%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupBaseType%2A> 이 형식에 대해 합니다. 기본적으로 <xref:System.Xaml.XamlType.BaseType%2A> 나타내는 내부 상수를 반환는 <xref:System.Object> 경우 <xref:System.Xaml.XamlType.UnderlyingType%2A> 은 `null`합니다.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupBaseType%2A> 가상 함수 이며 따라서 재정의할 수 있습니다. 재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 시스템의 정보는 XAML 형식에 대 한 보고 된 형식 정보를 변경할 수 없습니다. 할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAssignTo">
      <MemberSignature Language="C#" Value="public virtual bool CanAssignTo (System.Xaml.XamlType xamlType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanAssignTo(class System.Xaml.XamlType xamlType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanAssignTo(System::Xaml::XamlType ^ xamlType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType">현재 <see cref="T:System.Xaml.XamlType" />을 검사할 대상 형식입니다.</param>
        <summary>이 <see cref="T:System.Xaml.XamlType" /> 인스턴스의 할당 가능한 형식 목록에 지정된 <see cref="T:System.Xaml.XamlType" />이 있는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>
          <paramref name="xamlType" />이 할당 가능한 형식 목록에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 할당 가능한 형식이 참조 형식의 모든 기능을 제공 하지는 않지만 할당을 위해 사용할 수 있습니다. 예를 들어 속성의 값에 대 한 형식 일치 하는 할당을 사용할 수 있습니다. XAML에서 할당할 수 있는 형식의 개념은 CLR 형식 시스템에서 위로 캐스팅의 개념과 비슷합니다. 예를 들어 CLR 형식 시스템에서 모든 형식에는 <xref:System.Object> 할당 가능한 형식 목록에 있습니다.  
  
 경우 둘 중 <xref:System.Xaml.XamlType> 사용 되는 인스턴스 비교에 <xref:System.Xaml.XamlType.IsUnknown%2A> 같음 `true`,이 메서드는 반환 하는 특별 한 알 수 없는 모드 `true` 경우 두 <xref:System.Xaml.XamlType> 인스턴스가 동일 합니다.  
  
 CLR을 사용 하 여 기본 구현은 <xref:System.Type> 에서 <xref:System.Xaml.XamlType.UnderlyingType%2A> 이 <xref:System.Xaml.XamlType> 및 입력 <xref:System.Xaml.XamlType>, 및 호출 <xref:System.Type.IsAssignableFrom%2A>합니다. 서로 다른 할당 가능한 형식 확인 하려는 경우이 메서드를 재정의 합니다.  
  
 Null을 전달 `xamlType` 예외를 throw 하지 않으며 항상 반환 `false`합니다.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.CanAssignTo%2A> 가상 함수 이며 따라서 재정의할 수 있습니다. 재정의 (악의적인 목적 여부 등) XAML 형식의 않든 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 캐스팅 동작 하도록 변경 해야 합니다. 할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructionRequiresArguments">
      <MemberSignature Language="C#" Value="public bool ConstructionRequiresArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConstructionRequiresArguments" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ConstructionRequiresArguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConstructionRequiresArguments As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConstructionRequiresArguments { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />에 인수(<see langword="x:TypeArguments" />, 초기화 텍스트 또는 기타 XAML 기술을 통한 일반 제약 조건)가 있어야 해당 형식의 유효한 인스턴스를 생성할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          인스턴스를 생성하기 위해 일부 인수 값이 필요하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentProperty">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember ContentProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember ContentProperty" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ContentProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentProperty As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlMember ^ ContentProperty { System::Xaml::XamlMember ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlMember" />의 콘텐츠 속성에 대한 <see cref="T:System.Xaml.XamlType" /> 정보를 가져옵니다.</summary>
        <value>
          이 <see cref="T:System.Xaml.XamlMember" />의 콘텐츠 속성에 대한 <see cref="T:System.Xaml.XamlType" /> 정보입니다. 콘텐츠 속성이 없는 경우 <see langword="null" />일 수 있습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때 바인딩을 사용 하 여 또는 CLR 형식 시스템의 백업, XAML 콘텐츠 속성인 지정할 수 있습니다 형식에 적용 하 여 <xref:System.Windows.Markup.ContentPropertyAttribute> 형식 정의에 있습니다.  
  
 이 속성에 맞춥니다.이 `[content property]` [MS XAML] 사양에 대 한 정보 항목입니다.  
  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupContentProperty%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupContentProperty%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentWrappers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; ContentWrappers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; ContentWrappers" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ContentWrappers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentWrappers As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ ContentWrappers { System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>콘텐츠 속성이 강력한 형식의 <see langword="Collection&lt;T&gt;" />에 있는 문자열과 같이 엄격한 형식 일치가 아닐 때 콘텐츠 속성의 콘텐츠를 래핑하는 데 사용되는 형식을 가져옵니다.</summary>
        <value>가능한 콘텐츠 래퍼 형식의 읽기 전용 컬렉션이거나, 그렇지 않으면 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 형식 일치 완화 시키는 래퍼가 없으면 인 `null`합니다.  
  
 형식으로 평가 하는 <xref:System.Xaml.XamlType.CanAssignTo%2A> 를 특정 콘텐츠 형식에 대 한 여러 종류의 목적을 위해을 간주 되지 않는 <xref:System.Xaml.XamlType.ContentWrappers%2A>합니다.  
  
 에 대 한 CLR 바인딩에 <xref:System.Xaml> 및 <xref:System.Xaml.XamlType>, XAML 콘텐츠 래퍼 형식으로 형식에 지정할 수는 <xref:System.Windows.Markup.ContentWrapperAttribute>합니다.  
  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupContentWrappers%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupContentWrappers%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeferringLoader">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; DeferringLoader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; DeferringLoader" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.DeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeferringLoader As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ DeferringLoader { System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 형식에 대한 지연된 로드 변환 동작을 나타내는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />를 가져옵니다.</summary>
        <value>이 형식에 대한 지연된 로드 동작을 나타내는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlDeferringLoader" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 WPF의 XAML 템플릿 동작은 지연 된 로드 동작의 예시입니다.  
  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupDeferringLoader%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupDeferringLoader%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>현재 개체가 다른 개체와 같은지 여부를 나타냅니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">이 개체와 비교할 개체입니다.</param>
        <summary>현재 개체가 다른 개체와 같은지 여부를 나타냅니다.</summary>
        <returns>
          현재 개체가 <see langword="true" /> 매개 변수와 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xaml.XamlType other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xaml.XamlType other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As XamlType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Xaml::XamlType ^ other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="other">이 개체와 비교할 개체입니다.</param>
        <summary>현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.</summary>
        <returns>
          현재 개체가 <see langword="true" /> 매개 변수와 같으면 <paramref name="other" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAliasedProperty">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetAliasedProperty (System.Xaml.XamlDirective directive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetAliasedProperty(class System.Xaml.XamlDirective directive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAliasedProperty (directive As XamlDirective) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlMember ^ GetAliasedProperty(System::Xaml::XamlDirective ^ directive);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directive" Type="System.Xaml.XamlDirective" />
      </Parameters>
      <Docs>
        <param name="directive">별칭이 지정된 멤버를 찾을 지시문입니다.</param>
        <summary>이 <see cref="T:System.Xaml.XamlType" />에 의해 XAML 지시문에 별칭으로 지정되는 XAML 멤버를 반환합니다.</summary>
        <returns>별칭이 지정된 멤버를 찾았으면 해당 멤버이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 메서드를 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupAliasedProperty%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupAliasedProperty%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAttachableMembers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt; GetAllAttachableMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.Xaml.XamlMember&gt; GetAllAttachableMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAllAttachableMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllAttachableMembers () As ICollection(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::Xaml::XamlMember ^&gt; ^ GetAllAttachableMembers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />에 의해 노출되는 모든 연결 가능 속성을 포함하는 컬렉션을 반환합니다.</summary>
        <returns>0개 이상의 <see cref="T:System.Xaml.XamlMember" /> 값을 포함하는 컬렉션입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 각 <xref:System.Xaml.XamlMember> 반환된 된 컬렉션의 개념을 지 원하는 값을 포함 해야 하는 <xref:System.Xaml.XamlMember> 멤버에 연결할 수 있습니다. 예를 들어 멤버를 반환할지 `true` 에 대 한 <xref:System.Xaml.XamlMember.IsAttachable%2A>에 대 한 유형을 <xref:System.Xaml.XamlMember.TargetType%2A>등입니다.  
  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 메서드를 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllMembers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt; GetAllMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.Xaml.XamlMember&gt; GetAllMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAllMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllMembers () As ICollection(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::Xaml::XamlMember ^&gt; ^ GetAllMembers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />에 의해 노출되는 모든 멤버를 포함하는 컬렉션을 반환합니다.</summary>
        <returns>0개 이상의 <see cref="T:System.Xaml.XamlMember" /> 값을 포함하는 컬렉션입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드의 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupAllMembers%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachableMember">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetAttachableMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetAttachableMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAttachableMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttachableMember (name As String) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlMember ^ GetAttachableMember(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <c>ownerTypeName.MemberName</c> 형식으로 된 가져올 연결 가능 멤버의 이름입니다.</param>
        <summary>이 <see cref="T:System.Xaml.XamlType" />의 명명된 특정 연결 가능 멤버를 나타내는 <see cref="T:System.Xaml.XamlMember" />를 반환합니다.</summary>
        <returns>요청된 연결 가능 멤버의 경우 <see cref="T:System.Xaml.XamlMember" /> 개체이고, 그렇지 않고 해당 이름의 연결 가능 멤버가 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드의 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupAttachableMember%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupAttachableMember%2A> 가상 함수 이며 따라서 재정의할 수 있습니다. 재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면는 <xref:System.ComponentModel.TypeDescriptor> `Get*` 기본 CLR 형식에 대 한 정보입니다. 보고 하는 멤버의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 개체에 대한 해시 코드를 반환합니다.</summary>
        <returns>정수 해시 코드입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlMember ^ GetMember(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">문자열로 가져올 멤버의 이름입니다.</param>
        <summary>이 <see cref="T:System.Xaml.XamlMember" />에서 명명된 특정 멤버의 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</summary>
        <returns>해당 멤버를 찾았으면 멤버의 <see cref="T:System.Xaml.XamlMember" /> 정보이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 값 `name` 정규화 되지 않은 것으로 예상 됩니다. 연결 된 멤버를 나타내는 정규화 된 형식 이름에 제출 해야 <xref:System.Xaml.XamlType.GetAttachableMember%2A> 대신 합니다. 접두사가 붙은 이름을 사용할 수 없습니다; 멤버 접두사는 상황에서 사용량에 따라 및 XAML 형식 시스템은 이러한 사용의 컨텍스트 및 접두사 매핑되는 방법을 알 수 없습니다.  
  
 이 메서드의 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupMember%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupMember%2A> 가상 함수 이며 따라서 재정의할 수 있습니다. 재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면는 <xref:System.ComponentModel.TypeDescriptor> `Get*` 기본 CLR 형식에 대 한 정보입니다. 보고 하는 멤버의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPositionalParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; GetPositionalParameters (int parameterCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; GetPositionalParameters(int32 parameterCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPositionalParameters (parameterCount As Integer) As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ GetPositionalParameters(int parameterCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterCount">정보를 보려는 특정 구문 또는 생성자 모드의 개수입니다.</param>
        <summary>태그 확장 형식의 경우 이 <see cref="T:System.Xaml.XamlType" />에 대한 특정 태그 확장 사용에서 지원되는 위치 매개 변수의 형식을 반환합니다.</summary>
        <returns>각 <see cref="T:System.Xaml.XamlType" />이 구문에서 해당 위치의 형식인 <see cref="T:System.Xaml.XamlType" /> 값의 목록입니다. 태그 확장에 대한 태그 입력을 제공할 때 이 형식을 동일한 순서로 지정해야 합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 API는 경우이 해당만 <xref:System.Xaml.XamlType> 태그 확장을 나타내는 (<xref:System.Xaml.XamlType.IsMarkupExtension%2A> 은 `true`).  
  
 입력 `parameterCount` 요청 특정 위치 매개 변수 형식에 대 한 않습니다. 태그 확장 사용의 인자 수 지정 됩니다. 태그 확장 사용은 종종 여러 "서명" 하 고 구분 하기 위해 다른 매개 변수 인자 (개수)의 위치 매개 변수를 사용 합니다. 그러나 중복 arities를 허용 하기 위해 차이점에 대 한 종류의 위치 매개 변수를 사용 하 여 스키마 컨텍스트를 구성할 수 있습니다. 자세한 내용은 <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>을 참조하세요. 특정 인자 (개수)에 대 한 매개 변수 위치와 형식 달라질 수 있습니다. 위치 형식을 특정 인자 태그 확장 사용을 가져오려면 먼저 호출 <xref:System.Xaml.XamlType.GetPositionalParameters%2A> 의 인자 수를 지정 합니다. 그런 다음 반환된 된 컬렉션에서 해당 위치의 항목을 가져옵니다.  
  
 이 메서드의 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupPositionalParameters%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXamlNamespaces">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetXamlNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetXamlNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetXamlNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetXamlNamespaces () As IList(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IList&lt;System::String ^&gt; ^ GetXamlNamespaces();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 형식이 포함되어 있는 XAML 네임스페이스에 대한 문자열 식별자 목록을 반환합니다.</summary>
        <returns>각 문자열이 XAML 네임스페이스의 URI 식별자인 문자열 값 목록입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적인 XAML 네임 스페이스 식별자는 URI 형식의 문자열입니다.  
  
 기본 구현에서는 다음을 순서 대로 검사: 구문에서 제공 되는 XAML 네임 스페이스 (<xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29> 서명만 수행); 및 스키마 컨텍스트를 사용할 수 있는 네임 스페이스입니다. 각각 `null`, 단일 빈 문자열을 포함 하는 새 목록이 생성 됩니다. 조회 방법을 변경 하려면이 메서드를 재정의할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoker">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlTypeInvoker Invoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlTypeInvoker Invoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.Invoker" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Invoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlTypeInvoker ^ Invoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />과 연결된 <see cref="T:System.Xaml.XamlType" /> 구현을 가져옵니다.</summary>
        <value>이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />과 연결된 <see cref="T:System.Xaml.XamlType" /> 구현입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>호출, <xref:System.Xaml.XamlType.Invoker%2A> 호출할 수 있습니다 <xref:System.Xaml.XamlType.LookupInvoker%2A> 또는 해당 메서드의 특정 재정의 합니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupInvoker%2A> 이 형식에 대해 합니다.  
  
 경우는 <xref:System.Xaml.XamlType.LookupInvoker%2A> 반환 재정의 `null`, 기본 구현은 반환 하는 경우 또는 `null` 부족으로 인해 <xref:System.Xaml.XamlType.UnderlyingType%2A> 이 <xref:System.Xaml.XamlType>, 다음 <xref:System.Xaml.XamlType.Invoker%2A> 반환 <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAmbient">
      <MemberSignature Language="C#" Value="public bool IsAmbient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAmbient" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsAmbient" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAmbient As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAmbient { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 앰비언트 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
        <value>
          이 <see cref="T:System.Xaml.XamlType" />이 앰비언트 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsAmbient%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupIsAmbient%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 배열을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
        <value>
          이 <see cref="T:System.Xaml.XamlType" />이 배열을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCollection">
      <MemberSignature Language="C#" Value="public bool IsCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCollection" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCollection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCollection { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 컬렉션을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
        <value>
          이 <see cref="T:System.Xaml.XamlType" />이 컬렉션을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructible">
      <MemberSignature Language="C#" Value="public bool IsConstructible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructible" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsConstructible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsConstructible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsConstructible { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 생성 가능 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
        <value>
          이 <see cref="T:System.Xaml.XamlType" />이 생성 가능 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에 맞춥니다.이 `[is default constructible]` [MS XAML] 사양에 대 한 정보 항목입니다.  
  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsConstructible%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupIsConstructible%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlType.ConstructionRequiresArguments" />
      </Docs>
    </Member>
    <Member MemberName="IsDictionary">
      <MemberSignature Language="C#" Value="public bool IsDictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDictionary" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsDictionary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDictionary As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDictionary { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
        <value>
          이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에 맞춥니다.이 `[is dictionary]` [MS XAML] 사양에 대 한 정보 항목입니다.  
  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGeneric">
      <MemberSignature Language="C#" Value="public bool IsGeneric { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGeneric" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsGeneric" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsGeneric As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsGeneric { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 제네릭 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
        <value>
          이 <see cref="T:System.Xaml.XamlType" />이 제네릭 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 null 값을 확인 하는 도우미 속성 <xref:System.Xaml.XamlType.TypeArguments%2A>합니다. 관련 없는 `Lookup` 관련 된 메서드 <xref:System.Xaml.XamlType.IsGeneric%2A>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMarkupExtension">
      <MemberSignature Language="C#" Value="public bool IsMarkupExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarkupExtension" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsMarkupExtension" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarkupExtension As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarkupExtension { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
        <value>
          이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XAML 사양 측면에서이 형식에 할당할 수 있어야 `x:MarkupExtension` 반환 하기 위해 `true` 에 대 한 <xref:System.Xaml.XamlType.IsMarkupExtension%2A>합니다.  
  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameScope">
      <MemberSignature Language="C#" Value="public bool IsNameScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameScope" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNameScope" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameScope As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameScope { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 XAML 이름 범위를 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
        <value>
          이 <see cref="T:System.Xaml.XamlType" />이 XAML 이름 범위를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 속성 또는 속성에 사용 되는 이름의 고유성을 적용 하는 XAML 이름 범위 `x:Name`  /  `[name property]`합니다. 경우 <xref:System.Xaml.XamlType.IsNameScope%2A> 은 `true`, 고유성을 적용 하기 위한 메커니즘이 있어야 하 고 XAML 이름 범위를 소유 하는이 형식의 관점에서 평가 해야 합니다. 그런 다음 XAML 이름 범위 다른 XAML 이름 범위 소유 하는 형식이 발견 될 때까지 형식 내용으로 확장 합니다.  
  
 이 속성에 맞춥니다.이 `[is name scope]` [MS XAML] 사양에 대 한 정보 항목입니다.  
  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsNameScope%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameValid">
      <MemberSignature Language="C#" Value="public bool IsNameValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameValid" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNameValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 유효한 <see langword="xamlName" /> 문자열을 <see cref="P:System.Xaml.XamlType.Name" />으로 사용하여 초기화되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          이 <see cref="T:System.Xaml.XamlType" />이 유효한 <see langword="true" /> 문자열을 사용하여 초기화되었으면 <see langword="xamlName" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 null 허용 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
        <value>
          이 <see cref="T:System.Xaml.XamlType" />이 null 허용 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에 맞춥니다.이 `[is nullable]` [MS XAML] 사양에 대 한 정보 항목입니다.  
  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 경우는 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsNullable%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 관련 형식 시스템에서 public 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
        <value>
          이 <see cref="T:System.Xaml.XamlType" />이 public 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsPublic%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupIsPublic%2A> 가상 함수 이며 따라서 재정의할 수 있습니다. 재정의 (악의적인 목적 여부 또는 기타) 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 시스템 및 액세스 정보 XAML 형식에 대 한 보고 된 액세스 정보를 변경할 수 없습니다. 할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknown">
      <MemberSignature Language="C#" Value="public bool IsUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsUnknown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnknown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnknown { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 기본 형식 시스템에서 확인할 수 없는 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
        <value>
          이 <see cref="T:System.Xaml.XamlType" />이 확인할 수 없는 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsUnknown%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다.  
  
 과 관련 된 로드 경로 대 한 <xref:System.Xaml.XamlObjectWriter>, <xref:System.Xaml.XamlType> 올려진 `true` 에 대 한 <xref:System.Xaml.XamlType.IsUnknown%2A> 개체 그래프에 쓸 수 없습니다. 기본 구현에서 <xref:System.Xaml> , <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=nameWithType> throw 호출는 <xref:System.Xaml.XamlObjectWriterException> 때 관련 <xref:System.Xaml.XamlType> 보고서 `true` 에 대 한 <xref:System.Xaml.XamlType.IsUnknown%2A>합니다. 전달 해서는 안는 <xref:System.Xaml.XamlType> 있는 <xref:System.Xaml.XamlType.IsUnknown%2A> 으로 `true` 에서 예외를 처리할 준비가 있지 않은 경우 <xref:System.Xaml.XamlObjectWriter>, 다른 방법으로 조정할 수 있고는 <xref:System.Xaml.XamlObjectWriter> 동작이 나 개체를 쓰기 전에 XAML 노드 스트림을 그래프입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUsableDuringInitialization">
      <MemberSignature Language="C#" Value="public bool IsUsableDuringInitialization { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUsableDuringInitialization" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsUsableDuringInitialization" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUsableDuringInitialization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUsableDuringInitialization { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XAML을 초기화하는 동안 이 <see cref="T:System.Xaml.XamlType" />이 하향식으로 빌드되는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          XAML을 초기화하는 동안 이 <see cref="T:System.Xaml.XamlType" />이 하향식으로 빌드되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 위에서 아래로 개체 그래프를 만들 때 XAML 프로세서 동작에 근접 하는 메타포. 위에서 아래로 작성할 때 형식이 인스턴스화되고 부모에 연결 된 다음 해당 속성이 설정 됩니다. 하향식 생성 속성 변경 처리기를 여러 번 호출 하는 발생 하지 않습니다. 이러한 처리는 개체 그래프를 위로 잔물결 및 따라서 여러 처리기 호출을 제거 하 고이 개체 그래프의 시작을 위해 성능을 최적화 만듭니다.  
  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
        <altmember cref="P:System.Windows.FrameworkElement.IsInitialized" />
      </Docs>
    </Member>
    <Member MemberName="IsWhitespaceSignificantCollection">
      <MemberSignature Language="C#" Value="public bool IsWhitespaceSignificantCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWhitespaceSignificantCollection" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWhitespaceSignificantCollection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWhitespaceSignificantCollection { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 XML 정의를 기준으로 유효한 공백 컬렉션을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
        <value>
          이 <see cref="T:System.Xaml.XamlType" />이 유효한 공백 컬렉션을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsXData">
      <MemberSignature Language="C#" Value="public bool IsXData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsXData" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsXData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsXData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsXData { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 XML <see langword="XDATA" />를 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
        <value>
          이 <see cref="T:System.Xaml.XamlType" />이 <see langword="true" />를 나타내면 <see langword="XDATA" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에 맞춥니다.이 `[is xdata]` [MS XAML] 사양에 대 한 정보 항목입니다.  
  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsXData%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupIsXData%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType ItemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType ItemType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ItemType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ItemType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ ItemType { System::Xaml::XamlType ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" /> 개체의 <see langword="Items" /> 속성에 대한 형식 정보를 제공하는 값을 가져옵니다.</summary>
        <value>컬렉션에 있는 항목의 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 컬렉션을 나타내지 않는 경우 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은이 경우 관련만 <xref:System.Xaml.XamlType> 컬렉션을 나타냅니다 (<xref:System.Xaml.XamlType.IsCollection%2A> 은 `true`). `Items` 속성은 해당 유형의 컬렉션 또는 배열 항목을 보유 한 모든 속성.  
  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupItemType%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupItemType%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType KeyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType KeyType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.KeyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ KeyType { System::Xaml::XamlType ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내는 경우 이 <see cref="T:System.Xaml.XamlType" />의 키 속성에 대한 형식 정보를 제공하는 값을 가져옵니다.</summary>
        <value>사전인 경우 키의 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이며, 이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내지 않는 경우 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은이 경우 관련만 <xref:System.Xaml.XamlType> 사전을 나타냅니다 (<xref:System.Xaml.XamlType.IsDictionary%2A> 은 `true`).  
  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupKeyType%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupKeyType%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAliasedProperty">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupAliasedProperty (System.Xaml.XamlDirective directive);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupAliasedProperty(class System.Xaml.XamlDirective directive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAliasedProperty (directive As XamlDirective) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupAliasedProperty(System::Xaml::XamlDirective ^ directive);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directive" Type="System.Xaml.XamlDirective" />
      </Parameters>
      <Docs>
        <param name="directive">별칭이 지정된 멤버를 찾을 지시문입니다.</param>
        <summary>이 <see cref="T:System.Xaml.XamlType" />에 의해 XAML 지시문에 별칭으로 지정되는 XAML 멤버를 반환합니다.</summary>
        <returns>별칭이 지정된 멤버를 찾았으면 해당 멤버이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 가져올 때이 메서드를 호출할 수 있습니다 <xref:System.Xaml.XamlType.GetAliasedProperty%2A>합니다.  
  
 기본 구현은 다음 XAML 지시문에 대 한 결과 반환할 수 있습니다: `Key`; `Name`; `Uid`; 및 `xml:lang`합니다. 값은 기본 리플렉션 달라 지 며 여전히를 반환할 수 있습니다 이러한 `null` 별칭이 지정 된 속성이 없는 경우.  
  
 XAML 형식 시스템의 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xaml.XamlDirective" />
        <altmember cref="T:System.Xaml.XamlLanguage" />
      </Docs>
    </Member>
    <Member MemberName="LookupAllAttachableMembers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt; LookupAllAttachableMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlMember&gt; LookupAllAttachableMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllAttachableMembers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAllAttachableMembers () As IEnumerable(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlMember ^&gt; ^ LookupAllAttachableMembers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />에 의해 노출되는 모든 연결 가능 속성을 포함하는 열거 가능한 집합을 반환합니다.</summary>
        <returns>0개 이상의 <see cref="T:System.Xaml.XamlMember" /> 값을 포함하는 열거 가능한 집합이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 가져올 때이 메서드를 호출할 수 있습니다 <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>합니다.  
  
 하지만 <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A> 제네릭 컬렉션을 반환이 `Lookup` 메서드 제네릭 열거 가능한 집합을 반환 합니다.  
  
 기본 구현은 내부 CLR 리플렉션을 사용 합니다. 때 <xref:System.Xaml.XamlType.UnderlyingType%2A> 은 `null`, 기본 구현은 צ ְ ײ <xref:System.Xaml.XamlType.BaseType%2A>, 사용 가능한 경우. 호출 하는이 동작과 <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> 유효한 기본 형식 및 반환 찾으려고 시도에 재귀적으로 `null` 올바른 기본 형식이 있는 경우.  
  
 XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다. Null 반환 형식 시스템 또는 리플렉션 지원 부족으로 인해 정보를 확인할 수 없는 경우에 예약 되어야 합니다. 빈 형식이 유효한 및 리플렉션 또는 기타 기술을 사용할 수 있는 이지만 형식에 연결할 수 있는 멤버가 없을 경우 대신 반환 해야 <xref:System.Collections.Generic.IEnumerable%601> 설정 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAllMembers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt; LookupAllMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlMember&gt; LookupAllMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllMembers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAllMembers () As IEnumerable(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlMember ^&gt; ^ LookupAllMembers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />에 의해 노출되는 모든 멤버를 포함하는 열거 가능한 집합을 반환합니다.</summary>
        <returns>0개 이상의 <see cref="T:System.Xaml.XamlMember" /> 값을 포함하는 열거 가능한 집합입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 가져올 때이 메서드를 호출할 수 있습니다 <xref:System.Xaml.XamlType.GetAllMembers%2A>합니다.  
  
 하지만 <xref:System.Xaml.XamlType.GetAllMembers%2A> 제네릭 컬렉션을 반환이 `Lookup` 메서드 제네릭 열거 가능한 집합을 반환 합니다.  
  
 기본 구현은 내부 CLR 리플렉션을 사용 합니다. 사례에 대 한 여기서 <xref:System.Xaml.XamlType.UnderlyingType%2A> 은 `null`, 기본 구현은 צ ְ ײ <xref:System.Xaml.XamlType.BaseType%2A>, 사용 가능한 경우. 호출 하는이 동작과 <xref:System.Xaml.XamlType.LookupAllMembers%2A> 재귀적으로 반환 하 고 유효한 기본 형식을 찾으려고 시도 `null` 올바른 기본 형식이 있는 경우.  
  
 XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다. Null 반환 형식 시스템 또는 리플렉션 지원 부족으로 인해 정보를 확인할 수 없는 경우에 예약 되어야 합니다. 리플렉션 또는 기타 기술을 형식이 유효한 경우을 사용할 수 있습니다. 형식에 멤버가 없을 경우 대신 빈을 반환 해야 <xref:System.Collections.Generic.IEnumerable%601> 설정 합니다.  
  
 반환 값에 대 한 <xref:System.Xaml.XamlType.LookupAllMembers%2A> 및 <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> 상호 배타적인 이어야 합니다. 지원 형식 시스템 속성이 연결 가능한 사용 뿐만 아니라 표준 인스턴스 사용을 지원할 수 있는 상황을 설정한 경우 해당 멤버 서로 다른 두 성공으로 보고 됩니다 <xref:System.Xaml.XamlMember> 값이 하나의 값에서 다른 및 연결할 수 있는 목록에 표시 되는 표준 멤버 목록입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAllowedContentTypes">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupAllowedContentTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupAllowedContentTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllowedContentTypes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAllowedContentTypes () As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ LookupAllowedContentTypes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="P:System.Xaml.XamlType.ContentProperty" />에 대한 <see cref="T:System.Xaml.XamlType" /> 값으로 사용할 수 있는 형식 목록을 반환합니다.</summary>
        <returns>가능한 콘텐츠 형식의 목록입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 가져올 때이 메서드를 호출할 수 있습니다 <xref:System.Xaml.XamlType.AllowedContentTypes%2A>합니다.  
  
 형식으로 평가 하는 <xref:System.Xaml.XamlType.CanAssignTo%2A> 를 특정 콘텐츠 형식에 대 한 여러 종류의 목적을 위해을 간주 되지 않는 <xref:System.Xaml.XamlType.AllowedContentTypes%2A>합니다.  
  
 기본 구현은의 다른 속성을 사용할 수 <xref:System.Xaml.XamlType> (<xref:System.Xaml.XamlType.ContentWrappers%2A>, <xref:System.Xaml.XamlType.ContentProperty%2A>, 또는 <xref:System.Xaml.XamlType.ItemType%2A>)는 결과를 얻습니다. `Lookup` 이전 속성 목록이이 결정에서 호출 될 수도 있습니다을 재정의 합니다.  
  
 XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAttachableMember">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupAttachableMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupAttachableMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAttachableMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAttachableMember (name As String) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupAttachableMember(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <c>ownerTypeName.MemberName</c> 형식으로 된 가져올 연결 가능 멤버의 이름입니다.</param>
        <summary>이 <see cref="T:System.Xaml.XamlType" />에서 명명된 특정 연결 가능 항목에 대해 <see cref="T:System.Xaml.XamlMember" />를 반환합니다.</summary>
        <returns>요청된 연결 가능 멤버의 경우 <see cref="T:System.Xaml.XamlMember" /> 개체이고, 그렇지 않고 해당 이름의 연결 가능 멤버가 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 가져올 때이 메서드를 호출할 수 있습니다 <xref:System.Xaml.XamlType.GetAttachableMember%2A>합니다.  
  
 기본 구현은 내부 CLR 리플렉션을 사용 합니다. 때 <xref:System.Xaml.XamlType.UnderlyingType%2A> 은 `null`, 기본 구현은 צ ְ ײ <xref:System.Xaml.XamlType.BaseType%2A>, 사용 가능한 경우. 호출 하는이 동작과 <xref:System.Xaml.XamlType.LookupAttachableMember%2A> 유효한 기본 형식 및 반환 찾으려고 시도에 재귀적으로 `null` 올바른 기본 형식이 있는 경우.  
  
 XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupAttachableMember%2A> 가상 함수 이며 따라서 재정의할 수 있습니다. 재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면는 <xref:System.ComponentModel.TypeDescriptor> `Get*` 기본 CLR 형식에 대 한 정보입니다. 보고 하는 멤버의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupBaseType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupBaseType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupBaseType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupBaseType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupBaseType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupBaseType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 XAML 형식의 직접적인 기본 형식에 대한 <see cref="T:System.Xaml.XamlType" />을 반환합니다. 이 값은 이 <see cref="T:System.Xaml.XamlType" /> 및 스키마 컨텍스트의 기본 형식을 기준으로 결정됩니다.</summary>
        <returns>이 XAML 형식의 직접적인 기본 형식에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 가져올 때이 메서드를 호출할 수 있습니다 <xref:System.Xaml.XamlType.BaseType%2A>합니다.  
  
 기본 구현은 나타내는 내부 상수를 반환할 수 있습니다는 <xref:System.Object> 경우 <xref:System.Xaml.XamlType.UnderlyingType%2A> 은 `null`합니다.  
  
 XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupBaseType%2A> 가상 함수 이며 따라서 재정의할 수 있습니다. 재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 시스템의 정보는 XAML 형식에 대 한 보고 된 형식 정보를 변경할 수 없습니다. 할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCollectionKind">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlCollectionKind LookupCollectionKind ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Xaml.Schema.XamlCollectionKind LookupCollectionKind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupCollectionKind" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupCollectionKind () As XamlCollectionKind" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlCollectionKind LookupCollectionKind();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlCollectionKind</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.Schema.XamlCollectionKind" />에서 사용하는 특정 컬렉션 형식을 선언하는 <see cref="T:System.Xaml.XamlType" /> 열거형의 값을 반환합니다.</summary>
        <returns>
          <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 열거형의 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 내부 전용 메서드를 호출한 (public `CollectionKind` 또는 `GetCollectionKind` api <xref:System.Xaml.XamlType>).  
  
 기본 구현은 내부 CLR 리플렉션을 사용 합니다. 사례에 대 한 여기서 <xref:System.Xaml.XamlType.UnderlyingType%2A> 은 `null`, 기본 구현은 צ ְ ײ <xref:System.Xaml.XamlType.BaseType%2A>, 사용 가능한 경우. 이 동작은 간접적으로 호출 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 유효한 기본 형식을 찾으려고 시도에 재귀적으로 반환 <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType> 올바른 기본 형식이 있는 경우. 기본 구현은 찾으려고 시도 하는 일반적으로 `Add` 리플렉션에 의해 기본 형식의 메서드. 하는 경우 발견는 <xref:System.Reflection.MethodInfo> 의 `Add` 메서드 결정할 충분 한 정보는 <xref:System.Xaml.Schema.XamlCollectionKind> 값이 반환 됩니다. 그 외의 경우 <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType>를 반환합니다.  
  
 XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupConstructionRequiresArguments">
      <MemberSignature Language="C#" Value="protected virtual bool LookupConstructionRequiresArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupConstructionRequiresArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupConstructionRequiresArguments" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupConstructionRequiresArguments () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupConstructionRequiresArguments();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />에 인수(<see langword="x:TypeArguments" />, 초기화 텍스트 또는 기타 XAML 기술을 통한 제네릭 제약 조건)가 있어야 유효한 형식 인스턴스를 생성할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>
          인스턴스를 생성하기 위해 일부 인수 값이 필요하면 <see langword="true" />이고, 그렇지 않으면 false입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 가져올 때이 메서드를 호출할 수 있습니다 <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>합니다.  
  
 기본 구현은 반환 `false` CLR에서 값 형식으로 간주 되는 형식에 대 한 형식 시스템. 값 형식, CLR 리플렉션이 아닌 <xref:System.Reflection.ConstructorInfo> 기본 생성자가 있는지 여부를 확인 하는 데 사용 됩니다.  
  
 XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupContentProperty">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupContentProperty ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupContentProperty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupContentProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupContentProperty () As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupContentProperty();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlMember" />의 콘텐츠 속성에 대한 <see cref="T:System.Xaml.XamlType" /> 정보를 반환합니다.</summary>
        <returns>
          이 <see cref="T:System.Xaml.XamlMember" />의 콘텐츠 속성에 대한 <see cref="T:System.Xaml.XamlType" /> 정보입니다. <see langword="null" />일 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 가져올 때이 메서드를 호출할 수 있습니다 <xref:System.Xaml.XamlType.ContentProperty%2A>합니다.  
  
 기본 구현에 대 한 검사 <xref:System.Windows.Markup.ContentPropertyAttribute> 형식 정의에 있습니다. 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A> 내부 형식에 특성이 있으면 특성에 대 한 합니다. 기본 구현에서 반환 하는 경우 이러한 검사에는 콘텐츠 형식을 검색 하지 않으면, `null`합니다.  
  
 XAML 형식 시스템 정보 또는 형식의 스키마 정보를 보고에 대 한 메타 데이터 또는 기타 기술을 사용 하 고 기본 내부 CLR 리플렉션에 사용 하지 않고도이 메서드를 재정의 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupContentWrappers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupContentWrappers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupContentWrappers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupContentWrappers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupContentWrappers () As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ LookupContentWrappers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />에 대한 콘텐츠 래퍼를 나타내는 <see cref="T:System.Xaml.XamlType" /> 값의 목록을 가져옵니다.</summary>
        <returns>이 <see cref="T:System.Xaml.XamlType" />에 대한 콘텐츠 래퍼를 나타내는 <see cref="T:System.Xaml.XamlType" /> 값의 목록입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 콘텐츠 래퍼는 해당 컬렉션에 사용 되는 형식이 형식 시스템에 연속 되지 않을 때 컬렉션 콘텐츠 형식을 나타내는 클래스입니다. 콘텐츠 래퍼에 대 한 컬렉션 항목의 형식은 이외의 다른 방법으로 제한 될 것으로 예상 되 <xref:System.Object> 또는 이와 동등한 중립 개체입니다. 그러나이 제한 사항은 형식 시스템 아니라에 의해 디자인 또는 해당 형식을 사용 하는 속성의 목적에만 적용 됩니다. 둘 이상의 콘텐츠 래퍼 형식에 있을 수 있습니다.  
  
 예제 클래스 및 WPF XAML 구현과에서 시나리오에 대 한 참조 <xref:System.Windows.Documents.InlineCollection>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCustomAttributeProvider">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupCustomAttributeProvider" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupCustomAttributeProvider () As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::ICustomAttributeProvider ^ LookupCustomAttributeProvider();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 구현되는 경우 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 구현을 반환합니다.</summary>
        <returns>
          <see cref="T:System.Reflection.ICustomAttributeProvider" /> 구현입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 내부 리플렉션 CLR 특성 값을 얻을 수 있는 대체 방법으로 제공 하려면이 메서드를 재정의 합니다. 재정의가 없는 경우, 내부 반영자는 일반적인 CLR 리플렉션 논리를 사용 합니다.  
  
 기본 구현은 `null`를 반환합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupDeferringLoader">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupDeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupDeferringLoader () As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ LookupDeferringLoader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>XAML 선언된 개체의 지연된 로드에 사용되는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 반환합니다.</summary>
        <returns>제네릭에 대한 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlDeferringLoader" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 가져올 때이 메서드를 호출할 수 있습니다 <xref:System.Xaml.XamlType.DeferringLoader%2A>합니다. 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.DeferringLoader%2A> 반환 다른 값은 기본적으로 활성화 내부 리플렉션 및 제공 하는 사용자 지정 <xref:System.Xaml.Schema.XamlTypeInvoker> 정보입니다.  
  
 기본 구현 읽어 개체를 반환 합니다. <xref:System.Windows.Markup.XamlDeferLoadAttribute>합니다. 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A> 내부 형식에 특성이 있으면 특성에 대 한 합니다. 이 메서드는 반환 값을 사용할 수 없으면 `null`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupInvoker">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlTypeInvoker LookupInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlTypeInvoker LookupInvoker() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupInvoker" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupInvoker () As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlTypeInvoker ^ LookupInvoker();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />과 연결된 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</summary>
        <returns>이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대한 <see cref="T:System.Xaml.XamlType" /> 정보이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.Invoker%2A>합니다.  
  
 기본 구현은 것을 요구 하지 않는 한 <xref:System.Xaml.XamlType> 초기를 전달 하는 생성자 중 하나를 사용 하 여 생성할 수 <xref:System.Xaml.Schema.XamlTypeInvoker>합니다. 그러나는 <xref:System.Xaml.XamlType.UnderlyingType%2A> 값에 대 한 있어야는 <xref:System.Xaml.XamlType>, 그렇지 않으면 기본 구현에서는 반환 `null`합니다.  
  
 파생된 된 클래스도 만들려는 경우이 메서드를 재정의 <xref:System.Xaml.Schema.XamlTypeInvoker> 및 파생된 클래스를 반환 하려고 합니다. 반환 하는 경우 `null`, <xref:System.Xaml.XamlType.Invoker%2A> 반환 <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType> 호출자에 게 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsAmbient">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsAmbient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsAmbient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsAmbient" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsAmbient () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsAmbient();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 앰비언트 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
        <returns>
          이 <see cref="T:System.Xaml.XamlType" />이 앰비언트 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.IsAmbient%2A>합니다.  
  
 에 CLR 리플렉션을 사용 하는 기본 구현에서 <xref:System.Xaml.XamlType.UnderlyingType%2A> 기본 형식을 확인할 수 있습니다. 이 구현에 대 한 검사는 <xref:System.Windows.Markup.AmbientAttribute> 를 반환 하는 클래스 수준에는 관련 형식의 정의에 적용 되는 `true` 이 경우. 다른 모든 경우에 반환할 `false`합니다.  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsAmbient%2A> 은 기본적으로 활성화 내부 리플렉션 다른 값을 반환 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsConstructible">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsConstructible ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsConstructible() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsConstructible" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsConstructible () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsConstructible();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 생성 가능 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
        <returns>
          이 <see cref="T:System.Xaml.XamlType" />이 생성 가능 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.IsConstructible%2A>합니다.  
  
 기본 구현에서 CLR 리플렉션을 사용 하 여 <xref:System.Xaml.XamlType.UnderlyingType%2A>합니다. 형식은 구체적인, 비중첩 및 닫힌 이어야 합니다. 기본 구현에서는 값 형식 및의 반환 형식이 인지 확인 <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>합니다. Null에 대 한 <xref:System.Xaml.XamlType.UnderlyingType%2A>,이 메서드가 반환 `true`합니다.  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsConstructible%2A> 은 기본적으로 활성화 내부 리플렉션 다른 값을 반환 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsMarkupExtension">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsMarkupExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsMarkupExtension() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsMarkupExtension" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsMarkupExtension () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsMarkupExtension();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내는지 여부를 표시하는 값을 반환합니다.</summary>
        <returns>
          이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.IsMarkupExtension%2A>합니다.  
  
 기본 구현은이 호출의만 구성 됩니다.  
  
 `return CanAssignTo(XamlLanguage.MarkupExtension);`  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsMarkupExtension%2A> 다른 논리를 사용 하도록 합니다.  
  
 XAML 사양 측면에서이 형식에 할당할 수 있어야 `x:MarkupExtension` 반환 하기 위해 `true` 에 대 한 <xref:System.Xaml.XamlType.IsMarkupExtension%2A>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsNameScope">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsNameScope ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsNameScope() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsNameScope" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsNameScope () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsNameScope();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 XAML 이름 범위를 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
        <returns>
          이 <see cref="T:System.Xaml.XamlType" />이 XAML 이름 범위를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.IsNameScope%2A>합니다.  
  
 기본 구현에서는 한 <xref:System.Xaml.XamlType.CanAssignTo%2A> 형식에 대해 직접 호출 <xref:System.Windows.Markup.INameScope>합니다. <xref:System.Windows.Markup.INameScope> WindowsBase.dll 어셈블리에 정의 된 인터페이스가입니다. XAML 이름 범위 id에 대 한이 방법을 사용 되는 WPF, Windows Workflow Foundation XAML 구현에서 모두 합니다.  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsNameScope%2A> 다른 논리를 사용 하도록 합니다.  
  
 속성 또는 속성에 사용 되는 이름의 고유성을 적용 하는 XAML 이름 범위 `x:Name`  /  `[name property]`합니다. 경우 <xref:System.Xaml.XamlType.IsNameScope%2A> 은 `true`, 고유성을 적용 하기 위한 메커니즘이 있어야 하 고 XAML 이름 범위를 소유 하는이 형식의 관점에서 평가 해야 합니다. 그런 다음 XAML 이름 범위 XAML 이름 범위 소유 다른 형식이 발견 될 때까지 형식 내용으로 확장 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectWriter.RootNameScope" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsNullable">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsNullable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsNullable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsNullable" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsNullable () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsNullable();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 null 허용 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
        <returns>
          이 <see cref="T:System.Xaml.XamlType" />이 null 허용 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.IsNullable%2A>합니다.  
  
 기본 구현에서는 개념에 따라 CLR 핵심 라이브러리 nullable, 여부를 검사 하는 결정 <xref:System.Xaml.XamlType.UnderlyingType%2A>합니다. Null에 대 한 <xref:System.Xaml.XamlType.UnderlyingType%2A>, 반환 `true`합니다.  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsNullable%2A> 다른 논리를 사용 하도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsPublic">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsPublic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsPublic() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsPublic" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsPublic () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsPublic();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 관련 형식 시스템에서 public 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
        <returns>
          이 <see cref="T:System.Xaml.XamlType" />이 public 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.IsPublic%2A>합니다.  
  
 기본 구현은 null이 아닌에 대해 CLR 리플렉션을 사용 하 여 <xref:System.Xaml.XamlType.UnderlyingType%2A>합니다. Null에 대 한 <xref:System.Xaml.XamlType.UnderlyingType%2A>, 반환 `true`합니다.  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsPublic%2A> 다른 논리를 사용 하도록 합니다.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupIsPublic%2A> 가상 함수 이며 따라서 재정의할 수 있습니다. 재정의 (악의적인 목적 여부 또는 기타) 더 이상 예상 되는 방식으로 맞춰질 기본 CLR 형식의 형식 시스템 또는 액세스 정보 XAML 형식에 대 한 보고 된 액세스 정보를 변경할 수 없습니다. 할당 작업 및 액세스의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsUnknown">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsUnknown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsUnknown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsUnknown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsUnknown () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsUnknown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 기본 형식 시스템에서 확인할 수 없는 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
        <returns>
          이 <see cref="T:System.Xaml.XamlType" />이 확인할 수 없는 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.IsUnknown%2A>합니다.  
  
 기본 구현은 CLR 리플렉션을 사용할 수 있습니다. Null에 대 한 <xref:System.Xaml.XamlType.UnderlyingType%2A>, 반환 `true`합니다.  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsUnknown%2A> 다른 논리를 사용 하도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsWhitespaceSignificantCollection">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsWhitespaceSignificantCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsWhitespaceSignificantCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsWhitespaceSignificantCollection () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsWhitespaceSignificantCollection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 XML 정의를 기준으로 유효한 공백 컬렉션을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
        <returns>
          이 <see cref="T:System.Xaml.XamlType" />이 유효한 공백 컬렉션을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>합니다.  
  
 읽기에 따라 값을 반환 하는 기본 구현은 <xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute>합니다. 또한 확인할 수는 <xref:System.Xaml.XamlType.BaseType%2A> 내부 형식에 특성이 있으면 특성에 대 한 합니다. 반환 값을 사용할 수 없으면 `false`합니다.  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A> 다른 논리를 사용 하도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsXData">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsXData ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsXData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsXData" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsXData () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsXData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 XML <see langword="XDATA" />를 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
        <returns>
          이 <see cref="T:System.Xaml.XamlType" />이 <see langword="true" />를 나타내면 <see langword="XDATA" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.IsXData%2A>합니다.  
  
 기본 구현에서는 한 <xref:System.Xaml.XamlType.CanAssignTo%2A> 형식에 대해 직접 호출 <xref:System.Xml.Serialization.IXmlSerializable>합니다.  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsXData%2A> 다른 논리를 사용 하도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupItemType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupItemType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupItemType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupItemType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupItemType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupItemType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" /> 개체의 <see langword="Items" /> 속성에 대한 형식 정보를 제공하는 값을 반환합니다.</summary>
        <returns>컬렉션에 있는 항목의 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 컬렉션을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.ItemType%2A>합니다.  
  
 기본 구현은 확인 등과 같은 CLR 리플렉션 개념을 사용할 수는 `Add` 메서드를 <xref:System.Reflection.MethodInfo> 를 사용 하 고는 <xref:System.Reflection.ParameterInfo>검사; <xref:System.Xaml.XamlType.IsArray%2A>; 및 검사 <xref:System.Xaml.XamlType.BaseType%2A> 하 고 그 동일한 논리를 시도 합니다.  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.ItemType%2A> 다른 논리를 사용 하도록 합니다. 인 사례 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 반환 <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType> 반환할지 `null`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupKeyType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupKeyType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupKeyType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupKeyType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupKeyType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupKeyType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내는 경우 이 <see cref="T:System.Xaml.XamlType" />의 키 속성에 대한 형식 정보를 제공하는 값을 반환합니다.</summary>
        <returns>사전 사용 키의 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.KeyType%2A>합니다.  
  
 기본 구현에 대 한 확인 하는 등의 CLR 리플렉션 개념을 사용할 수는 `Add` 메서드 <xref:System.Reflection.MethodInfo> 를 사용 하 고는 <xref:System.Reflection.ParameterInfo>; 및 검사 <xref:System.Xaml.XamlType.BaseType%2A> 하 고 그 동일한 논리를 시도 합니다.  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.KeyType%2A> 다른 논리를 사용 하도록 합니다. 인 사례 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 반환 하지 않는 <xref:System.Xaml.Schema.XamlCollectionKind.Dictionary?displayProperty=nameWithType> 반환할지 `null`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupMarkupExtensionReturnType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupMarkupExtensionReturnType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupMarkupExtensionReturnType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupMarkupExtensionReturnType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupMarkupExtensionReturnType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내는 경우 이 개체의 반환된 <see langword="ProvideValue" />에 대한 형식 정보를 제공하는 값을 반환합니다.</summary>
        <returns>태그 확장 사용의 반환 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>합니다.  
  
 기본 구현은 반환 하는 <xref:System.Xaml.XamlType> 읽어 <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute>합니다. 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A> 내부 형식에 특성이 있으면 특성에 대 한 합니다. 반환 값을 사용할 수 없으면 `null`합니다.  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A> 다른 논리를 사용 하도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupMember">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupMember (string name, bool skipReadOnlyCheck);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupMember(string name, bool skipReadOnlyCheck) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupMember (name As String, skipReadOnlyCheck As Boolean) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupMember(System::String ^ name, bool skipReadOnlyCheck);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="skipReadOnlyCheck" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">문자열로 가져올 멤버의 이름입니다.</param>
        <param name="skipReadOnlyCheck">
          멤버의 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 값이 <see langword="true" />인 경우에도 해당 멤버를 반환하면 <see langword="true" />이고, <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 멤버를 반환하지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</param>
        <summary>이 <see cref="T:System.Xaml.XamlMember" />에서 명명된 특정 멤버의 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</summary>
        <returns>멤버를 찾았으면 해당 멤버의 <see cref="T:System.Xaml.XamlMember" /> 정보이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.GetMember%2A>합니다.  
  
 기본 구현은 반환 하는 <xref:System.Xaml.XamlType> 내부 CLR 리플렉션 및 스키마 컨텍스트에 대 한 평가 기반 합니다.  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.GetMember%2A> 다른 논리를 사용 하도록 합니다.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupMember%2A> 가상 함수 이며 따라서 재정의할 수 있습니다. 재정의 (악의적인 목적 여부 등) 더 이상 예상 되는 방식으로 정렬 되도록 XAML 형식의 보고 된 구성원을 변경 하려면는 <xref:System.ComponentModel.TypeDescriptor> `Get*` 기본 CLR 형식에 대 한 정보입니다. 보고 하는 멤버의 보안에 중요 한 검사, 기본 CLR 형식을 대신 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupPositionalParameters">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupPositionalParameters (int parameterCount);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupPositionalParameters(int32 parameterCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupPositionalParameters (parameterCount As Integer) As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ LookupPositionalParameters(int parameterCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterCount">정보를 보려는 특정 구문 또는 생성자 모드의 개수입니다.</param>
        <summary>태그 확장 형식의 경우 이 <see cref="T:System.Xaml.XamlType" />에 대한 특정 태그 확장 사용에서 지원되는 위치 매개 변수의 형식을 반환합니다.</summary>
        <returns>각 <see cref="T:System.Xaml.XamlType" />이 구문에서 해당 위치의 형식인 <see cref="T:System.Xaml.XamlType" /> 값의 목록입니다. 태그 확장에 대한 태그 입력을 제공할 때 이 형식을 동일한 순서로 지정해야 합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.GetPositionalParameters%2A>합니다.  
  
 기본 구현에서는 생성자를 찾아서 인자 수를 확인 하는 중에 따라 내부 리플렉션 정보를 사용 합니다. 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.GetPositionalParameters%2A> 다른 논리를 사용 하도록 합니다.  
  
 이 API는 경우이 해당만 <xref:System.Xaml.XamlType> 태그 확장을 나타내는 (<xref:System.Xaml.XamlType.IsMarkupExtension%2A> 은 `true`).  
  
 입력 `parameterCount` 요청 특정 위치 매개 변수 형식에 대 한 않습니다. 태그 확장 사용의 인자 수 지정 됩니다. 태그 확장 사용에 여러 개의 시그니처가 간격과 다른 매개 변수 인자 (개수)의 위치 매개 변수를 사용 하 여 구분 합니다. 그러나 중복 arities를 허용 하기 위해 차이점에 대 한 종류의 위치 매개 변수를 사용 하 여 스키마 컨텍스트를 구성할 수 있습니다. 자세한 내용은 <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>을 참조하세요. 특정 인자 개수에 대 한 매개 변수 위치와 형식 달라질 수 있습니다. 위치 형식을 특정 인자 태그 확장 사용을 가져오려면 먼저 호출 <xref:System.Xaml.XamlType.GetPositionalParameters%2A> 인자 수가 있습니다. 그런 다음 반환된 된 컬렉션에서 해당 위치의 항목을 가져옵니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupSetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="protected virtual EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; LookupSetMarkupExtensionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; LookupSetMarkupExtensionHandler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupSetMarkupExtensionHandler () As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ LookupSetMarkupExtensionHandler();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>태그 확장의 설정 작업에 사용할 처리기 콜백을 반환합니다.</summary>
        <returns>태그 확장의 설정 작업에 사용할 처리기 콜백입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 읽기에 따라 값을 반환 하는 기본 구현은 <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>합니다. 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A> 내부 형식에 특성이 있으면 특성에 대 한 합니다. 반환 값을 사용할 수 없으면 `null`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupSetTypeConverterHandler">
      <MemberSignature Language="C#" Value="protected virtual EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; LookupSetTypeConverterHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; LookupSetTypeConverterHandler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupSetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupSetTypeConverterHandler () As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ LookupSetTypeConverterHandler();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>형식 변환기 설정 사례에 사용할 처리기를 반환합니다.</summary>
        <returns>형식 변환기 설정 사례에 사용할 처리기입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 읽기에 따라 값을 반환 하는 기본 구현은 <xref:System.Windows.Markup.XamlSetTypeConverterAttribute>합니다. 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A> 내부 형식에 특성이 있으면 특성에 대 한 합니다. 반환 값을 사용할 수 없으면 `null`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTrimSurroundingWhitespace">
      <MemberSignature Language="C#" Value="protected virtual bool LookupTrimSurroundingWhitespace ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupTrimSurroundingWhitespace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTrimSurroundingWhitespace () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupTrimSurroundingWhitespace();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 주변 공백을 트리밍하는 모드를 사용하여 serialize되어야 하는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>
          이 <see cref="T:System.Xaml.XamlType" />이 주변 공백을 트리밍하는 모드로 serialize되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A>합니다.  
  
 읽기에 따라 값을 반환 하는 기본 구현은 <xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute>합니다. 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A> 내부 형식에 특성이 있으면 특성에 대 한 합니다. 반환 값을 사용할 수 없으면 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTypeConverter">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; LookupTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; LookupTypeConverter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupTypeConverter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTypeConverter () As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ LookupTypeConverter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 형식 변환 동작을 나타내는 <see cref="T:System.ComponentModel.TypeConverter" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</summary>
        <returns>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 형식 변환 동작을 나타내는 <see cref="T:System.ComponentModel.TypeConverter" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.TypeConverter%2A>합니다.  
  
 읽기에 따라 값을 반환 하는 기본 구현은 <xref:System.ComponentModel.TypeConverterAttribute>합니다. 기본 구현은 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A> 내부 형식에 특성이 있으면 특성에 대 한 합니다. 열거형, 공용 값 형식 및 제네릭 기본 변환 위한 특수 논리가 포함 됩니다. 반환 값을 사용할 수 없으면 `null`합니다.  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.TypeConverter%2A> 다른 논리를 사용 하도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingType">
      <MemberSignature Language="C#" Value="protected virtual Type LookupUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Type LookupUnderlyingType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupUnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingType () As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Type ^ LookupUnderlyingType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Type" />의 기반이 되는 CLR <see cref="T:System.Xaml.XamlType" />을 반환합니다.</summary>
        <returns>이 <see cref="T:System.Type" />의 기반이 되는 CLR <see cref="T:System.Xaml.XamlType" />이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.UnderlyingType%2A>합니다.  
  
 기본 구현은 내부 필드를 반환합니다. 해당 필드는 일반적으로 생성 하는 동안 초기화 하 고 해당 값은 어떤 생성자를 호출 하 고 사용자가 제공한 정보에 기반 합니다.  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.UnderlyingType%2A> 다른 논리를 사용 하도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUsableDuringInitialization">
      <MemberSignature Language="C#" Value="protected virtual bool LookupUsableDuringInitialization ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupUsableDuringInitialization() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupUsableDuringInitialization" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUsableDuringInitialization () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupUsableDuringInitialization();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>XAML을 초기화하는 동안 이 <see cref="T:System.Xaml.XamlType" />이 하향식으로 빌드되는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>
          XAML을 초기화하는 동안 이 <see cref="T:System.Xaml.XamlType" />이 하향식으로 빌드되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 위에서 아래로 개체 그래프를 만들 때 XAML 프로세서 동작에 근접 하는 메타포. 위에서 아래로 작성할 때 형식, 부모에 연결 된 인스턴스화되고 해당 속성이 설정 됩니다. 하향식 생성 속성 변경 처리기를 여러 번 호출 하는 발생 하지 않습니다. 이러한 처리는 개체 그래프를 위로 잔물결 및 따라서 여러 처리기 호출을 제거 하 고이 개체 그래프의 시작을 위해 성능을 최적화 만듭니다.  
  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>합니다.  
  
 읽기에 따라 값을 반환 하는 기본 구현은 <xref:System.Windows.Markup.UsableDuringInitializationAttribute>합니다. 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A> 내부 형식에 특성이 있으면 특성에 대 한 합니다. 반환 값을 사용할 수 없으면 `false`합니다.  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A> 다른 논리를 사용 하도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupValueSerializer">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupValueSerializer () As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ LookupValueSerializer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 값 serialization 동작을 나타내는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</summary>
        <returns>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 값 serialization 동작을 나타내는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 호출할 수 <xref:System.Xaml.XamlType.ValueSerializer%2A>합니다.  
  
 읽기에 따라 값을 반환 하는 기본 구현은 <xref:System.Windows.Markup.ValueSerializerAttribute>합니다. 확인할 수도 <xref:System.Xaml.XamlType.BaseType%2A> 내부 형식에 특성이 있으면 특성에 대 한 합니다. 열거형, 공통 값 형식 또는 제네릭의 기본 직렬화를 위한 특수 논리가 포함 됩니다. 반환 값을 사용할 수 없으면 `null`합니다.  
  
 원하는 경우이 메서드를 재정의 <xref:System.Xaml.XamlType.ValueSerializer%2A> 다른 논리를 사용 하도록 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkupExtensionReturnType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType MarkupExtensionReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType MarkupExtensionReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.MarkupExtensionReturnType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MarkupExtensionReturnType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ MarkupExtensionReturnType { System::Xaml::XamlType ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내는 경우 이 개체의 반환된 <see langword="ProvideValue" />에 대한 형식 정보를 제공하는 값을 가져옵니다.</summary>
        <value>태그 확장 사용의 반환 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내지 않는 경우 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은이 경우 관련만 <xref:System.Xaml.XamlType> 태그 확장을 나타내는 (`x:MarkupExtension` 할당 가능한 형식 목록에).  
  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 나타내는 형식의 문자열 이름을 가져옵니다.</summary>
        <value>이 XAML 형식의 문자열 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 일반적으로 스키마 생성 이름을 가져옵니다 (당는 <xref:System.Xaml.XamlType.%23ctor%2A> 서명), 또는 이름으로는 <xref:System.Type>CLR 형식 시스템의 적절 한 생성자를 사용 하 여 생성 된 경우.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xaml.XamlType xamlType1, class System.Xaml.XamlType xamlType2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (xamlType1 As XamlType, xamlType2 As XamlType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xaml::XamlType ^ xamlType1, System::Xaml::XamlType ^ xamlType2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType1" Type="System.Xaml.XamlType" />
        <Parameter Name="xamlType2" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType1">
          <see cref="T:System.Xaml.XamlType" /> 또는 <see langword="null" />입니다.</param>
        <param name="xamlType2">
          <see cref="T:System.Xaml.XamlType" /> 또는 <see langword="null" />입니다.</param>
        <summary>지정된 두 <see cref="T:System.Xaml.XamlType" /> 개체의 값이 같은지를 확인합니다.</summary>
        <returns>
          <see langword="true" />의 값이 <paramref name="xamlType1" />의 값과 같으면 <paramref name="xamlType2" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xaml.XamlType xamlType1, class System.Xaml.XamlType xamlType2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (xamlType1 As XamlType, xamlType2 As XamlType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xaml::XamlType ^ xamlType1, System::Xaml::XamlType ^ xamlType2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType1" Type="System.Xaml.XamlType" />
        <Parameter Name="xamlType2" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType1">
          <see cref="T:System.Xaml.XamlType" /> 또는 <see langword="null" />입니다.</param>
        <param name="xamlType2">
          <see cref="T:System.Xaml.XamlType" /> 또는 <see langword="null" />입니다.</param>
        <summary>지정된 두 <see cref="T:System.Xaml.XamlType" /> 개체의 값이 다른지 여부를 확인합니다.</summary>
        <returns>
          <see langword="true" />의 값이 <paramref name="xamlType1" />의 값과 다르면 <paramref name="xamlType2" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredXamlNamespace">
      <MemberSignature Language="C#" Value="public string PreferredXamlNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PreferredXamlNamespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.PreferredXamlNamespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredXamlNamespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PreferredXamlNamespace { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />에 대한 기본 XAML 네임스페이스인 단일 XAML 네임스페이스를 가져옵니다.</summary>
        <value>이 XAML 형식에 대한 기본 XAML 네임스페이스의 식별자로서, 문자열로 지정됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 구현을 호출할 때와 동일한 값을 제공 <xref:System.Xaml.XamlType.GetXamlNamespaces%2A> 한 다음 반환 된 열거 가능한 집합에서 첫 번째 값 문자열을 가져와 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlSchemaContext" />을 처리하기 위한 활성 <see cref="T:System.Xaml.XamlType" />를 가져옵니다.</summary>
        <value>이 <see cref="T:System.Xaml.XamlSchemaContext" />을 처리하기 위한 활성 <see cref="T:System.Xaml.XamlType" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlSchemaContext> 필수 매개 변수 항목을 만들 때 한 <xref:System.Xaml.XamlType>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />의 문자열 표현을 반환합니다.</summary>
        <returns>이 <see cref="T:System.Xaml.XamlType" />의 문자열 표현입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlType> 구현의 <xref:System.Object.ToString%2A> 반환는 <xref:System.Xaml.XamlType.Name%2A> 의 속성은 <xref:System.Xaml.XamlType>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimSurroundingWhitespace">
      <MemberSignature Language="C#" Value="public bool TrimSurroundingWhitespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimSurroundingWhitespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TrimSurroundingWhitespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TrimSurroundingWhitespace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimSurroundingWhitespace { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />에 콘텐츠에서 주변 공백을 트리밍하는 serialization의 공백 처리 동작이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          이 <see cref="T:System.Xaml.XamlType" />이 공백 트리밍을 사용하는 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeArguments">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; TypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; TypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeArguments As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ TypeArguments { System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.XamlType" />이 제네릭을 나타내는 경우 형식 인수의 목록을 가져옵니다.</summary>
        <value>형식 인수 형식의 목록이거나, 이 <see cref="T:System.Xaml.XamlType" />이 제네릭을 나타내지 않는 경우 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 특정 시나리오는 <xref:System.Xaml.XamlType> 를 호출 하는 고 <xref:System.Xaml.XamlType.TypeArguments%2A> 매개 변수 유형은 아직 열려 목록을 반환 합니다. 반환 된이 경우, 하나 이상의 <xref:System.Xaml.XamlType> 값에 대 한 자리 표시자 값을 갖게 됩니다 <xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType>와 같은 `T`제네릭이 계속 열려 있다고 나타내기 위해. 이 시나리오는 발생 하는 경우에 발생할 수 있습니다는 <xref:System.Xaml.XamlType> 호출에서 <xref:System.Xaml.XamlSchemaContext.GetXamlType%2A>, 대신 XAML 판독기 구현에서 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeConverter">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; TypeConverter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; TypeConverter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TypeConverter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeConverter As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ TypeConverter { System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 형식 변환 동작을 나타내는 <see cref="T:System.ComponentModel.TypeConverter" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />를 가져옵니다.</summary>
        <value>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 형식 변환 동작을 나타내는 <see cref="T:System.ComponentModel.TypeConverter" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupTypeConverter%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupTypeConverter%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingType">
      <MemberSignature Language="C#" Value="public Type UnderlyingType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.UnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ UnderlyingType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Type" />의 기반이 되는 CLR <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
        <value>이 <see cref="T:System.Type" />의 기반이 되는 CLR <see cref="T:System.Xaml.XamlType" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSerializer">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; ValueSerializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; ValueSerializer" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSerializer As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ ValueSerializer { System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 값 serialization 동작을 나타내는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />를 가져옵니다.</summary>
        <value>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 값 serialization 동작을 나타내는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />이거나, 그렇지 않으면 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 내부 CLR 리플렉션 기술을 사용 하지 않는 한 <xref:System.Xaml.XamlType>,이 속성에 대 한 호출을 호출할 수 <xref:System.Xaml.XamlType.LookupValueSerializer%2A> 에 재정의 <xref:System.Xaml.XamlType> 파생 클래스입니다. 반환 값 및 기타 동작에 대 한 자세한 내용은 설명서를 참조 <xref:System.Xaml.XamlType.LookupValueSerializer%2A> 이 형식에 대해 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>