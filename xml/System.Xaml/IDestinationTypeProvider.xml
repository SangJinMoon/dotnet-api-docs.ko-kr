<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IDestinationTypeProvider.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55b7c50aa2125017dfd7de732494ba1d51c5e1616.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5b7c50aa2125017dfd7de732494ba1d51c5e1616</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.IDestinationTypeProvider">
          <source>Represents a service that can return a CLR type system identifier for the destination type.</source>
          <target state="translated">대상 형식에 대한 CLR 형식 시스템 식별자를 반환할 수 있는 서비스를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xaml.IDestinationTypeProvider">
          <source>The destination type is relevant when the destination type for a property-setting operation is indirectly reported by reflection or other mechanisms.</source>
          <target state="translated">대상 형식은 리플렉션이나 다른 메커니즘에서 속성 설정 작업의 대상 형식을 간접적으로 보고하는 경우와 관련이 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.IDestinationTypeProvider">
          <source>The type that is returned by <ph id="ph1">&lt;xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A&gt;</ph> is resolved from the current position of the XAML node stream by using current XAML schema context.</source>
          <target state="translated">반환 되는 형식 <ph id="ph1">&lt;xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A&gt;</ph> 현재 XAML 스키마 컨텍스트를 사용 하 여 XAML 노드 스트림의 현재 위치에서 해결 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.IDestinationTypeProvider">
          <source>If you use the XAML type system as implemented by .NET Framework XAML Services and access the service context under these conditions, <ph id="ph1">&lt;xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A&gt;</ph> returns the <ph id="ph2">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> based on available XAML type system information and CLR-based XAML schema context.</source>
          <target state="translated">.NET Framework XAML 서비스 및 액세스 서비스 컨텍스트 이러한 조건에 의해 구현 된 XAML 형식 시스템을 사용 하는 경우 <ph id="ph1">&lt;xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A&gt;</ph> 반환 된 <ph id="ph2">&lt;xref:System.Xaml.XamlType.UnderlyingType%2A&gt;</ph> 사용 가능한 XAML 형식 시스템의 정보 및 CLR 기반 XAML 스키마 컨텍스트를 기반 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.IDestinationTypeProvider">
          <source>This service is relevant for situations where pure CLR reflection or other mechanisms might not provide enough information about a destination type.</source>
          <target state="translated">이 서비스는 여기서 순수 CLR 리플렉션 또는 다른 메커니즘 제공 하지 않는 있습니다 대상 형식에 대 한 충분 한 정보 상황에 적합 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.IDestinationTypeProvider">
          <source>The following is a list of some relevant scenarios for <ph id="ph1">&lt;xref:System.Xaml.IDestinationTypeProvider&gt;</ph>:</source>
          <target state="translated">다음은 몇 가지 관련 시나리오에 대 한 목록 <ph id="ph1">&lt;xref:System.Xaml.IDestinationTypeProvider&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.IDestinationTypeProvider">
          <source>The CLR type system reports an indirect type because of how the CLR defines and uses types, and you want a true destination type.</source>
          <target state="translated">CLR 형식 시스템 간접 형식으로 인해 CLR 정의 하 고 유형이 사용 하는 방법을 보고 및 진정한 대상 형식을 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.IDestinationTypeProvider">
          <source>For example, the APIs in .NET Framework XAML Services use this service internally when they process event members.</source>
          <target state="translated">예를 들어.NET Framework XAML 서비스의 Api를 사용 하 여이 서비스 내부적으로 이벤트 멤버를 처리 하는 경우.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.IDestinationTypeProvider">
          <source>Events are reported by pure CLR reflection as a <ph id="ph1">&lt;xref:System.Delegate&gt;</ph>.</source>
          <target state="translated">으로 순수 CLR 리플렉션에 의해 이벤트를 보고 한 <ph id="ph1">&lt;xref:System.Delegate&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.IDestinationTypeProvider">
          <source>You want to ensure that the destination type of a type converter usage matches the expected type that the type converter can produce.</source>
          <target state="translated">형식 변환기 사용의 대상 형식에 형식 변환기를 생성할 수 있는 예상된 유형과 일치 하는지 확인 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.IDestinationTypeProvider">
          <source>This scenario is useful when the destination type is parameterized or generic.</source>
          <target state="translated">이 시나리오는 대상 형식 매개 변수가 있는 경우에 유용 또는 제네릭입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.IDestinationTypeProvider">
          <source>Your value converter is being called from a usage that nested in another value converter.</source>
          <target state="translated">값 변환기는 다른 값 변환기에 중첩 된 사용법이에서 호출 되 고 됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.IDestinationTypeProvider">
          <source>In this case, <ph id="ph1">&lt;xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A&gt;</ph> unwinds the nesting and returns the destination type of the actual property being set, instead of returning the output type of any intervening value converter.</source>
          <target state="translated">이 경우 <ph id="ph1">&lt;xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A&gt;</ph> 는 중첩을 해제 하 고 출력 유형의 중간 값 변환기를 반환 하는 대신 설정 되는 실제 속성의 대상 형식을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.IDestinationTypeProvider">
          <source>Type converters and markup extensions can query for <ph id="ph1">&lt;xref:System.Xaml.IDestinationTypeProvider&gt;</ph> as a service on the service context that is provided by a XAML object writer, when the XAML object writer invokes value conversion behavior.</source>
          <target state="translated">형식 변환기 및 태그 확장에 대해 쿼리할 수 <ph id="ph1">&lt;xref:System.Xaml.IDestinationTypeProvider&gt;</ph> XAML 개체 작성기 값 변환 동작을 호출 하는 경우 XAML 개체 작성기에서 제공 하는 서비스 컨텍스트에 서비스로 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.IDestinationTypeProvider">
          <source>For more information, see <bpt id="p1">[</bpt>Type Converters and Markup Extensions for XAML<ept id="p1">](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)</ept> and <bpt id="p2">[</bpt>Service Contexts Available to Type Converters and Markup Extensions<ept id="p2">](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>형식 변환기 및 XAML 태그 확장명<ept id="p1">](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)</ept> 및 <bpt id="p2">[</bpt>형식 변환기 또는 태그 확장 서비스 컨텍스트에 사용할 수 있는<ept id="p2">](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Xaml.IDestinationTypeProvider.GetDestinationType">
          <source>Returns the CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that identifies the destination type for the relevant type converter or markup extension.</source>
          <target state="translated">관련 형식 변환기 또는 태그 확장의 대상 형식을 식별하는 CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Xaml.IDestinationTypeProvider.GetDestinationType">
          <source>A CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> value for the destination type.</source>
          <target state="translated">대상 형식에 대한 CLR <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.IDestinationTypeProvider.GetDestinationType">
          <source>This method has no input parameter.</source>
          <target state="translated">이 메서드는 입력된 매개 변수가 없습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.IDestinationTypeProvider.GetDestinationType">
          <source>What to return (and whether to return anything other than <ph id="ph1">`null`</ph>) is determined by the current node position in the XAML node stream.</source>
          <target state="translated">반환할 항목 (아닌 다른 모든 항목을 반환할 것인지 <ph id="ph1">`null`</ph>) XAML 노드 스트림의 현재 노드 위치에 따라 결정 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.IDestinationTypeProvider.GetDestinationType">
          <source>Service Implementers</source>
          <target state="translated">서비스 구현자</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.IDestinationTypeProvider.GetDestinationType">
          <source>If you reimplement this service, the <ph id="ph1">&lt;xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A&gt;</ph> method should return the type that a markup extension or type converter expects to check against its most specific conversion or output type.</source>
          <target state="translated">이 서비스를 다시 구현 하는 경우는 <ph id="ph1">&lt;xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A&gt;</ph> 메서드는 특정 변환 또는 출력 형식에 대해 확인 하는 태그 확장 또는 형식 변환기를 필요로 하는 형식을 반환 해야 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>