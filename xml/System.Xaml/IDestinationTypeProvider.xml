<Type Name="IDestinationTypeProvider" FullName="System.Xaml.IDestinationTypeProvider">
  <TypeSignature Language="C#" Value="public interface IDestinationTypeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDestinationTypeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.IDestinationTypeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDestinationTypeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDestinationTypeProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="21e73-101">대상 형식에 대한 CLR 형식 시스템 식별자를 반환할 수 있는 서비스를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-101">Represents a service that can return a CLR type system identifier for the destination type.</span></span> <span data-ttu-id="21e73-102">대상 형식은 리플렉션이나 다른 메커니즘에서 속성 설정 작업의 대상 형식을 간접적으로 보고하는 경우와 관련이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-102">The destination type is relevant when the destination type for a property-setting operation is indirectly reported by reflection or other mechanisms.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21e73-103">반환 되는 형식 <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> 현재 XAML 스키마 컨텍스트를 사용 하 여 XAML 노드 스트림의 현재 위치에서 해결 됩니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-103">The type that is returned by <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> is resolved from the current position of the XAML node stream by using current XAML schema context.</span></span>  
  
 <span data-ttu-id="21e73-104">.NET Framework XAML 서비스 및 액세스 서비스 컨텍스트 이러한 조건에 의해 구현 된 XAML 형식 시스템을 사용 하는 경우 <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> 반환 된 <xref:System.Xaml.XamlType.UnderlyingType%2A> 사용 가능한 XAML 형식 시스템의 정보 및 CLR 기반 XAML 스키마 컨텍스트를 기반 합니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-104">If you use the XAML type system as implemented by .NET Framework XAML Services and access the service context under these conditions, <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> returns the <xref:System.Xaml.XamlType.UnderlyingType%2A> based on available XAML type system information and CLR-based XAML schema context.</span></span>  
  
 <span data-ttu-id="21e73-105">이 서비스는 여기서 순수 CLR 리플렉션 또는 다른 메커니즘 제공 하지 않는 있습니다 대상 형식에 대 한 충분 한 정보 상황에 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-105">This service is relevant for situations where pure CLR reflection or other mechanisms might not provide enough information about a destination type.</span></span> <span data-ttu-id="21e73-106">다음은 몇 가지 관련 시나리오에 대 한 목록 <xref:System.Xaml.IDestinationTypeProvider>:</span><span class="sxs-lookup"><span data-stu-id="21e73-106">The following is a list of some relevant scenarios for <xref:System.Xaml.IDestinationTypeProvider>:</span></span>  
  
-   <span data-ttu-id="21e73-107">CLR 형식 시스템 간접 형식으로 인해 CLR 정의 하 고 유형이 사용 하는 방법을 보고 및 진정한 대상 형식을 합니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-107">The CLR type system reports an indirect type because of how the CLR defines and uses types, and you want a true destination type.</span></span> <span data-ttu-id="21e73-108">예를 들어.NET Framework XAML 서비스의 Api를 사용 하 여이 서비스 내부적으로 이벤트 멤버를 처리 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="21e73-108">For example, the APIs in .NET Framework XAML Services use this service internally when they process event members.</span></span> <span data-ttu-id="21e73-109">으로 순수 CLR 리플렉션에 의해 이벤트를 보고 한 <xref:System.Delegate>합니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-109">Events are reported by pure CLR reflection as a <xref:System.Delegate>.</span></span>  
  
-   <span data-ttu-id="21e73-110">형식 변환기 사용의 대상 형식에 형식 변환기를 생성할 수 있는 예상된 유형과 일치 하는지 확인 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-110">You want to ensure that the destination type of a type converter usage matches the expected type that the type converter can produce.</span></span> <span data-ttu-id="21e73-111">이 시나리오는 대상 형식 매개 변수가 있는 경우에 유용 또는 제네릭입니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-111">This scenario is useful when the destination type is parameterized or generic.</span></span>  
  
-   <span data-ttu-id="21e73-112">값 변환기는 다른 값 변환기에 중첩 된 사용법이에서 호출 되 고 됩니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-112">Your value converter is being called from a usage that nested in another value converter.</span></span> <span data-ttu-id="21e73-113">이 경우 <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> 는 중첩을 해제 하 고 출력 유형의 중간 값 변환기를 반환 하는 대신 설정 되는 실제 속성의 대상 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-113">In this case, <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> unwinds the nesting and returns the destination type of the actual property being set, instead of returning the output type of any intervening value converter.</span></span>  
  
 <span data-ttu-id="21e73-114">형식 변환기 및 태그 확장에 대해 쿼리할 수 <xref:System.Xaml.IDestinationTypeProvider> XAML 개체 작성기 값 변환 동작을 호출 하는 경우 XAML 개체 작성기에서 제공 하는 서비스 컨텍스트에 서비스로 합니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-114">Type converters and markup extensions can query for <xref:System.Xaml.IDestinationTypeProvider> as a service on the service context that is provided by a XAML object writer, when the XAML object writer invokes value conversion behavior.</span></span> <span data-ttu-id="21e73-115">자세한 내용은 참조 [형식 변환기 및 XAML 태그 확장명](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md) 및 [형식 변환기 또는 태그 확장 서비스 컨텍스트에 사용할 수 있는](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-115">For more information, see [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md) and [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectWriter" />
  </Docs>
  <Members>
    <Member MemberName="GetDestinationType">
      <MemberSignature Language="C#" Value="public Type GetDestinationType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDestinationType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IDestinationTypeProvider.GetDestinationType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDestinationType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetDestinationType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="21e73-116">관련 형식 변환기 또는 태그 확장의 대상 형식을 식별하는 CLR <see cref="T:System.Type" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-116">Returns the CLR <see cref="T:System.Type" /> that identifies the destination type for the relevant type converter or markup extension.</span></span></summary>
        <returns><span data-ttu-id="21e73-117">대상 형식에 대한 CLR <see cref="T:System.Type" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-117">A CLR <see cref="T:System.Type" /> value for the destination type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21e73-118">이 메서드는 입력된 매개 변수가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-118">This method has no input parameter.</span></span> <span data-ttu-id="21e73-119">반환할 항목 (아닌 다른 모든 항목을 반환할 것인지 `null`) XAML 노드 스트림의 현재 노드 위치에 따라 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-119">What to return (and whether to return anything other than `null`) is determined by the current node position in the XAML node stream.</span></span>  
  
## <a name="service-implementers"></a><span data-ttu-id="21e73-120">서비스 구현자</span><span class="sxs-lookup"><span data-stu-id="21e73-120">Service Implementers</span></span>  
 <span data-ttu-id="21e73-121">이 서비스를 다시 구현 하는 경우는 <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> 메서드는 특정 변환 또는 출력 형식에 대해 확인 하는 태그 확장 또는 형식 변환기를 필요로 하는 형식을 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="21e73-121">If you reimplement this service, the <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> method should return the type that a markup extension or type converter expects to check against its most specific conversion or output type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>