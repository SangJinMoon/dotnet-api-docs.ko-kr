<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlDirective.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a2eac5472d3696b1d538c311c8dde96426e0fb73.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a2eac5472d3696b1d538c311c8dde96426e0fb73</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlDirective">
          <source>Provides the XAML type system identifier for a member if the member is also a XAML directive.</source>
          <target state="translated">멤버가 XAML 지시문이기도 한 경우 멤버의 XAML 형식 시스템 식별자를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlDirective">
          <source>XAML readers and XAML writers use the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> identifier during processing of member nodes.</source>
          <target state="translated">멤버 노드를 처리하는 동안 XAML 판독기 및 XAML 작성기는 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> 식별자를 사용합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlDirective">
          <source>The identifier is used when the XAML reader is positioned on a <ph id="ph1">&lt;see cref="F:System.Xaml.XamlNodeType.StartMember" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.Xaml.XamlMember.IsDirective" /&gt;</ph> is <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">XAML 판독기가 <ph id="ph1">&lt;see cref="F:System.Xaml.XamlNodeType.StartMember" /&gt;</ph>에 위치하고 <ph id="ph2">&lt;see cref="P:System.Xaml.XamlMember.IsDirective" /&gt;</ph>가 <ph id="ph3">&lt;see langword="true" /&gt;</ph>인 경우 식별자가 사용됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> provides expected values for the XAML type system when the member is a XAML directive.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 멤버는 XAML 지시문 때 XAML 형식 시스템에 대 한 예상 값을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source>By definition, a XAML directive has characteristics that always return the same results for a subset of the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> properties, and the same XAML type system information is reported for all possible XAML directives.</source>
          <target state="translated">정의 XAML 지시문의 하위 집합에 대 한 동일한 결과 반환 하는 특성에는 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 모든 가능한 XAML 지시문에 대 한 속성과 동일한 XAML 형식 시스템 정보가 보고 됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source>The reporting of XAML type system characteristics that are specific to directives is accomplished by internal behavior or through overrides of <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> <ph id="ph2">`Lookup*`</ph> virtual members in the <ph id="ph3">&lt;xref:System.Xaml.XamlDirective&gt;</ph> class.</source>
          <target state="translated">내부 동작을 통해 또는의 재정의 통해 수행 됩니다 지시문에만 적용 되는 XAML 형식 시스템 특성의 보고 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> <ph id="ph2">`Lookup*`</ph> 가상 멤버에는 <ph id="ph3">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source>The following list shows the returned results of a XAML directive for <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> when the member is actually a <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph>:</source>
          <target state="translated">다음 목록에 대 한 XAML 지시문의 반환 된 결과 보여 줍니다. <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 경우는 멤버는 실제로 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupCustomAttributeProvider%2A&gt;</ph> is always <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupCustomAttributeProvider%2A&gt;</ph> 항상 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> is always <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> 항상 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> is always <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> 항상 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAmbient%2A&gt;</ph> is always <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAmbient%2A&gt;</ph> 항상 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph> is always <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph> 항상 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> is always <ph id="ph2">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> 항상 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph> is always <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph> 항상 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph> is always <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph> 항상 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> is always <ph id="ph2">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> 항상 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> is always <ph id="ph2">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> 항상 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source>Also, the internal backing for <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> remains unset and returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">에 대 한 내부 지원은 또한 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> 설정 되지 않은 상태를 유지 하 고 반환 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> is a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> subclass.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> 하위 클래스입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source>As with <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> has security considerations regarding how the XAML type system reports access.</source>
          <target state="translated">와 마찬가지로 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> XAML 형식 시스템 액세스를 보고 하는 방법에 대 한 보안 고려 사항이 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlDirective">
          <source>See <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlDirective">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
          <source>The primary XAML namespace where this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> can exist.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>가 있을 수 있는 기본 XAML 네임스페이스입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
          <source>The identifying name of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>의 식별 이름입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> class, specifying values for a name and a single XAML namespace.</source>
          <target state="translated">이름 및 단일 XAML 네임스페이스에 대한 값을 지정하여 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
          <source>Use this signature only when you want or expect <ph id="ph1">&lt;see cref="P:System.Xaml.XamlMember.IsUnknown" /&gt;</ph> to report <ph id="ph2">&lt;see langword="true" /&gt;</ph> for the directive.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xaml.XamlMember.IsUnknown" /&gt;</ph>이 지시문에 대해 <ph id="ph2">&lt;see langword="true" /&gt;</ph>를 보고하도록 하려는 경우에만 이 시그니처를 사용하십시오.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
          <source>This signature of the constructor always generates an identifier for the directive where <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> reports <ph id="ph2">`true`</ph> for the XAML type system.</source>
          <target state="translated">이 생성자의이 시그니처는 지시문에 대 한 식별자는 항상 생성 여기서 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> 보고서 <ph id="ph2">`true`</ph> XAML에 대 한 시스템을 입력 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
          <source>If the necessary information is available (the backing type and a text syntax information item for conversion) and you want an identifier that can apply the directive, use the <ph id="ph1">&lt;xref:System.Xaml.XamlDirective.%23ctor%2A?displayProperty=nameWithType&gt;</ph> constructor signature instead.</source>
          <target state="translated">필요한 정보를 사용할 수 있는 경우 (지원 형식 및 변환에 대 한 텍스트 구문 정보 항목) 지시문을 사용 하 여 적용할 수 있는 식별자 중이 고는 <ph id="ph1">&lt;xref:System.Xaml.XamlDirective.%23ctor%2A?displayProperty=nameWithType&gt;</ph> 생성자 서명을 대신 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
          <source>If you use this signature, the <ph id="ph1">&lt;xref:System.Xaml.XamlDirective.AllowedLocation%2A&gt;</ph> value for the instance is <ph id="ph2">&lt;xref:System.Xaml.Schema.AllowedMemberLocations.Any&gt;</ph>; and the <ph id="ph3">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> value and <ph id="ph4">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> value are both <ph id="ph5">`null`</ph>.</source>
          <target state="translated">이 서명을 사용 하는 경우는 <ph id="ph1">&lt;xref:System.Xaml.XamlDirective.AllowedLocation%2A&gt;</ph> 값은 인스턴스가 <ph id="ph2">&lt;xref:System.Xaml.Schema.AllowedMemberLocations.Any&gt;</ph>; 및 <ph id="ph3">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> 값 및 <ph id="ph4">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> 값은 모두 <ph id="ph5">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
          <source>A set of XAML namespaces where this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> can exist, passed as an enumerable set of the identifier strings.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>가 있을 수 있는 XAML 네임스페이스 집합으로, 식별자 문자열의 열거 가능 집합으로 전달됩니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
          <source>The identifying name of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>의 식별 이름입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
          <source>The XAML type that backs the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>를 지원하는 XAML 형식입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
          <source>The type converter that this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> uses for text syntax conversion.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>가 텍스트 구문 변환에 사용하는 형식 변환기입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
          <source>A value of the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.AllowedMemberLocations" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.AllowedMemberLocations" /&gt;</ph> 열거형의 값입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> class, specifying values for each per-case value of a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>의 가능한 각 사례 값에 대한 값을 지정하여 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
          <source>You must use this constructor to generate a <ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> that does not report <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> as <ph id="ph3">`true`</ph>.</source>
          <target state="translated">생성 하려면이 생성자를 사용 해야 합니다는 <ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 보고 하지 않는 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> 으로 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
          <source>The <ph id="ph1">&lt;paramref name="xamlType" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xamlType" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlDirective.AllowedLocation">
          <source>Gets a value that specifies the XAML node types where the directive can be specified.</source>
          <target state="translated">지시문을 지정할 수 있는 XAML 노드 형식을 지정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlDirective.AllowedLocation">
          <source>A value of the enumeration.</source>
          <target state="translated">열거형 값입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlDirective.AllowedLocation">
          <source>The default is the enumeration default, which is <ph id="ph1">&lt;see cref="F:System.Xaml.Schema.AllowedMemberLocations.None" /&gt;</ph>.</source>
          <target state="translated">기본값은 열거형 기본값인 <ph id="ph1">&lt;see cref="F:System.Xaml.Schema.AllowedMemberLocations.None" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlDirective.AllowedLocation">
          <source>You can set this value in the <ph id="ph1">&lt;xref:System.Xaml.XamlDirective.%23ctor%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%2CSystem.Xaml.XamlType%2CSystem.Xaml.Schema.XamlValueConverter%7BSystem.ComponentModel.TypeConverter%7D%2CSystem.Xaml.Schema.AllowedMemberLocations%29&gt;</ph> constructor signature.</source>
          <target state="translated">이 값을 설정할 수는 <ph id="ph1">&lt;xref:System.Xaml.XamlDirective.%23ctor%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%2CSystem.Xaml.XamlType%2CSystem.Xaml.Schema.XamlValueConverter%7BSystem.ComponentModel.TypeConverter%7D%2CSystem.Xaml.Schema.AllowedMemberLocations%29&gt;</ph> 생성자 시그니처입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlDirective.AllowedLocation">
          <source>If you construct by using the <ph id="ph1">&lt;xref:System.Xaml.XamlDirective.%23ctor%28System.String%2CSystem.String%29&gt;</ph> constructor signature, the <ph id="ph2">&lt;xref:System.Xaml.XamlDirective.AllowedLocation%2A&gt;</ph> value for the instance is <ph id="ph3">&lt;xref:System.Xaml.Schema.AllowedMemberLocations.Any&gt;</ph>.</source>
          <target state="translated">사용 하 여 생성 하는 경우는 <ph id="ph1">&lt;xref:System.Xaml.XamlDirective.%23ctor%28System.String%2CSystem.String%29&gt;</ph> 생성자 시그니처는 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective.AllowedLocation%2A&gt;</ph> 값은 인스턴스가 <ph id="ph3">&lt;xref:System.Xaml.Schema.AllowedMemberLocations.Any&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlDirective.AllowedLocation">
          <source>However, the instance always reports <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> as <ph id="ph2">`true`</ph>.</source>
          <target state="translated">하지만 인스턴스가 보고 항상 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> 으로 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlDirective.AllowedLocation">
          <source>This behavior typically affects attempts to write object graphs and also affects other practical uses of a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> value.</source>
          <target state="translated">이 동작은 일반적으로 영향을 주며 개체 그래프를 다른 실제적의 영향을 미칩니다를 작성 하는 <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlDirective.AllowedLocation">
          <source>You typically would not construct a XAML directive case where <ph id="ph1">&lt;xref:System.Xaml.XamlDirective.AllowedLocation%2A&gt;</ph> is <ph id="ph2">&lt;xref:System.Xaml.Schema.AllowedMemberLocations.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">일반적으로 하지 구성 합니다. XAML 지시문의 경우 여기서 <ph id="ph1">&lt;xref:System.Xaml.XamlDirective.AllowedLocation%2A&gt;</ph> 은 <ph id="ph2">&lt;xref:System.Xaml.Schema.AllowedMemberLocations.None?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.GetHashCode">
          <source>Returns the hash code for this object.</source>
          <target state="translated">이 개체에 대한 해시 코드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.GetHashCode">
          <source>An integer hash code.</source>
          <target state="translated">정수 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.GetXamlNamespaces">
          <source>Returns a list of XAML namespaces where this XAML member can exist.</source>
          <target state="translated">이 XAML 멤버가 있을 수 있는 XAML 네임스페이스의 목록을 반환합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.GetXamlNamespaces">
          <source>A list of XAML namespace identifiers, as strings.</source>
          <target state="translated">문자열로 제공되는 XAML 네임스페이스 식별자 목록입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.GetXamlNamespaces">
          <source>The XAML namespace identifiers are strings that typically appear in the Uniform Resource Identifier (URI) string form according to the usual conventions for XAML and XML namespaces.</source>
          <target state="translated">XAML 네임 스페이스 식별자는 일반적으로 XAML 및 XML 네임 스페이스에 대 한 일반적인 규칙에 따라 식별자 URI (Uniform Resource) 문자열 형태로 표시 되는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.GetXamlNamespaces">
          <source>If the list contains more than one item, the first item in the set is usually the relevant primary XAML namespace for processing purposes, and the other items are alternates.</source>
          <target state="translated">목록에 둘 이상의 항목이 있으면 첫 번째 항목 집합에는 일반적으로 처리를 위해 관련 기본 XAML 네임 스페이스 및 다른 항목은 대체 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.GetXamlNamespaces">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A?displayProperty=nameWithType&gt;</ph> relies on this ordering.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A?displayProperty=nameWithType&gt;</ph> 이 순서에 의존합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupCustomAttributeProvider">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> 구현을 반환합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupCustomAttributeProvider">
          <source>This implementation always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 구현은 항상 <ph id="ph1">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupCustomAttributeProvider">
          <source>Always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">항상 <ph id="ph1">&lt;see langword="null" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupCustomAttributeProvider">
          <source>Because a XAML directive cannot have custom attributes, this implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">XAML 지시문에서 사용자 지정 특성을 가질 수 있으므로이 구현은 항상 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupCustomAttributeProvider">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 가상 멤버; 봉인 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupDeferringLoader">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which is used during deferred loading of XAML-declared objects.</source>
          <target state="translated">XAML 선언된 개체의 지연된 로드 시 사용되는 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupDeferringLoader">
          <source>This implementation always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 구현은 항상 <ph id="ph1">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupDeferringLoader">
          <source>Always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">항상 <ph id="ph1">&lt;see langword="null" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupDeferringLoader">
          <source>Because a directive cannot have deferred loading, this implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">지시문은 지연 된 로드를 가질 수 없는이 구현은 항상 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupDeferringLoader">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 가상 멤버; 봉인 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupDependsOn">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 개체의 목록을 반환합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupDependsOn">
          <source>The list reports the members where dependency relationships for initialization order exist relative to this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 목록은 초기화 순서에 대한 종속성 관계가 이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>를 기준으로 존재하는 멤버를 보고합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupDependsOn">
          <source>This implementation always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 구현은 항상 <ph id="ph1">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupDependsOn">
          <source>Always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">항상 <ph id="ph1">&lt;see langword="null" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupDependsOn">
          <source>Because a XAML directive cannot have initialization order, this implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">XAML 지시문 초기화 순서를 가질 수 있으므로이 구현은 항상 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupDependsOn">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 가상 멤버; 봉인 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupInvoker">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> that is associated with a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>와 연관된 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupInvoker">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>에 대한 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> 정보입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupInvoker">
          <source>This method may be invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 하 여 호출 될 수 있습니다 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupInvoker">
          <source>This implementation returns an internal static <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> value that is specific to directives in the XAML type system.</source>
          <target state="translated">이 구현은 내부 정적 <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> XAML 형식 시스템에서 지시문에만 적용 되는 값입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupInvoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 가상 멤버; 봉인 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupIsAmbient">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is reported as an ambient property.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>가 앰비언트 속성으로 보고되는지 여부를 반환합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupIsAmbient">
          <source>Always returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">항상 <ph id="ph1">&lt;see langword="false" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupIsAmbient">
          <source>Because a XAML directive cannot be an ambient type, this implementation always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">이 구현은 항상 반환 XAML 지시문은 앰비언트 형식이 될 수 없으므로 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupIsAmbient">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 가상 멤버; 봉인 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupIsEvent">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> represents an event.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>가 이벤트를 나타내는지 여부를 반환합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupIsEvent">
          <source>Always returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">항상 <ph id="ph1">&lt;see langword="false" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupIsEvent">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 가상 멤버; 봉인 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupIsReadOnly">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> represents an intended read-only property.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>가 의도된 읽기 전용 속성을 나타내는지 여부를 반환합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupIsReadOnly">
          <source>Always returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">항상 <ph id="ph1">&lt;see langword="false" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupIsReadOnly">
          <source>By definition, directives are settable.</source>
          <target state="translated">정의상 지시문을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupIsReadOnly">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 가상 멤버; 봉인 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupIsReadPublic">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> represents a property that has a public <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>가 public <ph id="ph2">&lt;see langword="get" /&gt;</ph> 접근자가 있는 속성을 나타내는지 여부를 반환합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupIsReadPublic">
          <source>Always returns <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">항상 <ph id="ph1">&lt;see langword="true" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupIsReadPublic">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 가상 멤버; 봉인 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupIsUnknown">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> represents a member that is not resolvable by the backing system that is used for type and member resolution.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>가 형식 및 멤버 확인에 사용되는 지원 시스템에서 확인될 수 없는 멤버를 나타내는지 여부를 반환합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupIsUnknown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> represents a non-resolvable member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>가 확인할 수 없는 멤버를 나타내면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupIsUnknown">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> implementation only calls base and does nothing more.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 구현만 기본를 호출 하 고 더는 아무 작업도 수행 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupIsUnknown">
          <source>The base implementation returns the results in this order: the results are based on internal reflection; or the results are based on checking for a null value of the <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>.</source>
          <target state="translated">이 순서 대로 결과 반환 하는 기본 구현을: 결과; 내부 리플렉션 기반 또는 결과의 null 값을 확인 하는 기준으로 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupIsUnknown">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> implementation seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 구현 하므로이 가상 멤버; 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupIsWriteOnly">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> represents an intended write-only property.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>가 의도된 쓰기 전용 속성을 나타내는지 여부를 반환합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupIsWriteOnly">
          <source>Always returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">항상 <ph id="ph1">&lt;see langword="false" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupIsWriteOnly">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 가상 멤버; 봉인 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupIsWritePublic">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph> represents a property that has a public <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>가 public <ph id="ph2">&lt;see langword="set" /&gt;</ph> 접근자가 있는 속성을 나타내는지 여부를 반환합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupIsWritePublic">
          <source>Always returns <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">항상 <ph id="ph1">&lt;see langword="true" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupIsWritePublic">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 가상 멤버; 봉인 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupTargetType">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type where the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>가 있을 수 있는 형식의 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupTargetType">
          <source>This implementation always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 구현은 항상 <ph id="ph1">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupTargetType">
          <source>Always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">항상 <ph id="ph1">&lt;see langword="null" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupTargetType">
          <source>Target types are not relevant for directives; therefore, this implementation always returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">지시문에 대 한 대상 형식이 관련이 없으므로 따라서이 구현은 항상 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupTargetType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 가상 멤버; 봉인 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupType">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated">이 멤버가 사용하는 형식의 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated">이 멤버가 사용하는 형식의 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupType">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> implementation only calls base and does nothing more.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 구현만 기본를 호출 하 고 더는 아무 작업도 수행 합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupType">
          <source>The base implementation returns results based either on internal reflection, or checking for a null value of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>, processing in that order.</source>
          <target state="translated">내부 리플렉션 또는 null 값을 확인 하는 중 하나에 결과 반환 하는 기본 구현을 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>, 그 순서 대로 처리 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 가상 멤버; 봉인 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupType">
          <source>See Remarks in <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupType%2A?displayProperty=nameWithType&gt;</ph> for more information about what information <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> carries.</source>
          <target state="translated">설명을 참조 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupType%2A?displayProperty=nameWithType&gt;</ph> 정보에 대 한 자세한 내용은 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> 전달 합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupTypeConverter">
          <source>Returns a type converter implementation that is associated with this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>와 연관된 형식 변환기 구현을 반환합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupTypeConverter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> instance that has <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> 제약 조건이 있는 <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> 인스턴스이거나 <ph id="ph3">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupTypeConverter">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> implementation only calls base and does nothing more.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 구현만 기본를 호출 하 고 더는 아무 작업도 수행 합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupTypeConverter">
          <source>See <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTypeConverter%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTypeConverter%2A?displayProperty=nameWithType&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupTypeConverter">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 가상 멤버; 봉인 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupUnderlyingGetter">
          <source>Returns a <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>와 연관된 <ph id="ph1">&lt;see langword="get" /&gt;</ph> 접근자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupUnderlyingGetter">
          <source>This implementation always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 구현은 항상 <ph id="ph1">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupUnderlyingGetter">
          <source>Always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">항상 <ph id="ph1">&lt;see langword="null" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupUnderlyingGetter">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 가상 멤버; 봉인 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupUnderlyingMember">
          <source>Returns a CLR reflection <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph>와 연관된 CLR 리플렉션 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupUnderlyingMember">
          <source>This implementation always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 구현은 항상 <ph id="ph1">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupUnderlyingMember">
          <source>Always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">항상 <ph id="ph1">&lt;see langword="null" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupUnderlyingMember">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 가상 멤버; 봉인 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupUnderlyingSetter">
          <source>Returns a <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>와 연관된 <ph id="ph1">&lt;see langword="set" /&gt;</ph> 접근자를 반환합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupUnderlyingSetter">
          <source>This implementation always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 구현은 항상 <ph id="ph1">&lt;see langword="null" /&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.LookupUnderlyingSetter">
          <source>Always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">항상 <ph id="ph1">&lt;see langword="null" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.LookupUnderlyingSetter">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> seals this virtual member; therefore, all <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> types and all predefined XAML directives must use this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 이 가상 멤버; 봉인 따라서 모든 <ph id="ph2">&lt;xref:System.Xaml.XamlDirective&gt;</ph> 형식 및 모든 미리 정의 된 XAML 지시문이이 동작을 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.ToString">
          <source>Returns a string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>의 문자열 표현을 반환합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlDirective.ToString">
          <source>A string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xaml.XamlDirective" /&gt;</ph>의 문자열 표현입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.ToString">
          <source>If XAML namespace information is available, this implementation returns a string combination of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Name%2A&gt;</ph>.</source>
          <target state="translated">XAML 네임 스페이스 정보를 사용할 수 있는 경우에이 구현은 문자열 조합을 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Name%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlDirective.ToString">
          <source>If XAML namespace information is unavailable, this implementation returns <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Name%2A&gt;</ph>.</source>
          <target state="translated">이 구현은 반환 하는 경우 XAML 네임 스페이스 정보를 사용할 수 없는 <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Name%2A&gt;</ph>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>