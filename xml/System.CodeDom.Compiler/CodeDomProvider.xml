<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CodeDomProvider.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56ab122180fc89eaf109d9f5bcb109a2d70a23335.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ab122180fc89eaf109d9f5bcb109a2d70a23335</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>Provides a base class for <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 구현을 위한 기본 클래스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>This class is abstract.</source>
          <target state="translated">이 클래스는 추상 클래스입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> can be used to create and retrieve instances of code generators and code compilers.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 코드 생성기 및 코드 컴파일러의 인스턴스를 검색 하 고 만드는 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>Code generators can be used to generate code in a particular language, and code compilers can be used to compile code into assemblies.</source>
          <target state="translated">코드 생성기를 사용하여 코드를 특정 언어로 생성하고, 코드 컴파일러를 사용하여 코드를 어셈블리로 컴파일할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>, the methods made available in the code generator and code compiler are available directly from the code provider.</source>
          <target state="translated">에 <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>, 만든 코드 생성기에서 사용할 수 있는 메서드 및 코드 컴파일러는 코드 공급자에서 직접 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>You do not need to call <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> to access the methods, and those methods are marked as obsolete.</source>
          <target state="translated">호출할 필요가 없습니다 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> 에 액세스 하려면 메서드와 이러한 메서드가 사용 되지 않음으로 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>This applies to preexisting as well as new code provider implementations.</source>
          <target state="translated">이 새 코드 공급자 구현을 뿐만 아니라 기존에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation typically provides code generation and/or code compilation interfaces for generating code and managing compilation for a single programming language.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 구현 일반적으로 코드 생성 및 코드 컴파일에서는 인터페이스 제공 코드를 생성 하 고 단일 프로그래밍 언어에 대 한 컴파일을 관리 하기 위한 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>Several languages are supported by <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations that ship with the <ph id="ph2">[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]</ph>.</source>
          <target state="translated">지 원하는 여러 가지 언어 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 구현을 함께 제공 되는 <ph id="ph2">[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>These languages include C#, Visual Basic, C++, and JScript.</source>
          <target state="translated">이러한 언어는 C#, Visual Basic, c + + 및 JScript를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>Developers or compiler vendors can implement the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> and <ph id="ph2">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> interfaces and provide a <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> that extends CodeDOM support to other programming languages.</source>
          <target state="translated">개발자 또는 컴파일러 공급 업체 구현할 수 있습니다는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 및 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> 인터페이스를 만들고 제공는 <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 다른 프로그래밍 언어에 CodeDOM 지원을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config) provides a mechanism for developers and compiler vendors to add configuration settings for additional <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations.</source>
          <target state="translated"><bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> 요소<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> 컴퓨터 구성에서 파일 (Machine.config) 추가대한구성설정을추가하는개발자및컴파일러공급업체에대한메커니즘을제공<ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>구현 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> class provides static methods to discover and enumerate the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations on a computer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 검색 하 고 열거할 정적 메서드를 제공 하는 클래스는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 컴퓨터에서 구현 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph> method returns the settings for all <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations on a computer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph> 메서드 모두에 대 한 설정을 반환 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 컴퓨터에서 구현 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph> method returns the settings for a specific <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation, based on the programming language name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph> 메서드는 특정 설정을 반환 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 프로그래밍 언어 이름을 기반으로 구현 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method returns an instance of a <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for a specific language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> 의 인스턴스를 반환 하는 메서드는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 특정 언어에 대 한 구현 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>For more details on language provider settings in the configuration file, see <bpt id="p1">[</bpt>Compiler and Language Provider Settings Schema<ept id="p1">](http://msdn.microsoft.com/library/c020b139-8699-4f0d-9ac9-70d0c5b2a8c8)</ept>.</source>
          <target state="translated">언어 공급자 설정 구성 파일에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>컴파일러 및 언어 공급자 설정 스키마<ept id="p1">](http://msdn.microsoft.com/library/c020b139-8699-4f0d-9ac9-70d0c5b2a8c8)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>This class makes a link demand and an inheritance demand at the class level.</source>
          <target state="translated">이 클래스는 클래스 수준에 상속 요청과 링크 요청을 만듭니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown if either the immediate caller or the derived class does not have full trust permission.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> 직접 실행 호출자 또는 파생된 클래스 중 하나에 완전 신뢰 권한이 없는 경우 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>For details about security demands, see <bpt id="p1">[</bpt>Link Demands<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept> and <bpt id="p2">[</bpt>Inheritance Demands<ept id="p2">](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9)</ept>.</source>
          <target state="translated">보안 요청에 대 한 세부 정보를 참조 하십시오. <bpt id="p1">[</bpt>링크 요청<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept> 및 <bpt id="p2">[</bpt>상속 요청<ept id="p2">](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The following example program can generate and compile source code based on a CodeDOM model of a program that prints "Hello World" using the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class.</source>
          <target state="translated">다음 예제 프로그램에서 생성 하 고 "Hello World"를 사용 하 여 인쇄 하는 프로그램의 CodeDOM 모델을 기반으로 하는 소스 코드를 컴파일할 수는 <ph id="ph1">&lt;xref:System.Console&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>A Windows Forms user interface is provided.</source>
          <target state="translated">Windows Forms 사용자 인터페이스 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The user can select the target programming language from several selections: C#, Visual Basic, and JScript.</source>
          <target state="translated">대상 프로그래밍 언어에서 여러 개의 선택 영역을 선택할 수 있는: C#, Visual Basic 및 JScript입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>This class cannot be used by partially trusted code.</source>
          <target state="translated">이 클래스는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>for full trust for inheritors.</source>
          <target state="translated">상속자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">부분적으로 신뢰할 수 있는 코드에서이 클래스는 상속 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>In the .NET Framework versions 1.0 and 1.1, code providers consist of implementations of <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph>, <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph>, and <ph id="ph4">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는 코드 공급자의 구현을 구성 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph>, <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph>, 및 <ph id="ph4">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, the <ph id="ph2">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /&gt;</ph>, and <ph id="ph4">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> methods are obsolete, and the methods of <ph id="ph5">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> and <ph id="ph6">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> are directly available in the <ph id="ph7">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> class.</source>
          <target state="translated">에 <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, <ph id="ph2">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /&gt;</ph>, 및 <ph id="ph4">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> 메서드는 사용 되지의 메서드와 <ph id="ph5">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> 및 <ph id="ph6">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> 에서 직접 사용할 수는 <ph id="ph7">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>You should override those methods in your code provider implementation and not call the base methods.</source>
          <target state="translated">코드 공급자 구현에서 이러한 메서드를 재정의 하 고 기본 메서드를 호출 하지 해야 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
          <source>This class cannot be used by partially trusted code.</source>
          <target state="translated">이 클래스는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> object that indicates the settings for the compilation.</source>
          <target state="translated">컴파일 설정을 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> that indicates the code to compile.</source>
          <target state="translated">컴파일할 코드를 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>Compiles an assembly based on the <ph id="ph1">&lt;see cref="N:System.CodeDom" /&gt;</ph> trees contained in the specified array of <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> objects, using the specified compiler settings.</source>
          <target state="translated">지정된 컴파일러 설정을 사용하여 <ph id="ph1">&lt;see cref="N:System.CodeDom" /&gt;</ph> 개체의 지정된 배열에 포함된 <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> 트리에 따라 어셈블리를 컴파일합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> object that indicates the results of the compilation.</source>
          <target state="translated">컴파일 결과를 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는이 방법을 통해 제공 됩니다는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> 구현에서 반환 하는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> 공급자의입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">코드 공급자는이 메서드를 재정의 하지 않는 경우는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> 구현을 기본 클래스에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">이 메서드와 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> 메서드가 파생 클래스에서 재정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">이 메서드를 재정의 하는 경우에 기본 클래스의 해당 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method for compatibility with preexisting providers that use code compilers.</source>
          <target state="translated">기본 클래스 메서드는 사용 되지 않는 사용 하 여 파생된 클래스에서 생성기를 만듭니다 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> 코드 컴파일러를 사용 하는 기존 공급자와의 호환성에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">기본 클래스 메서드 다음 해당 하는 메서드를 호출의 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> 이 기능을 수행 하려면 구현 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code compiler.</source>
          <target state="translated">받아볼 수는 <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> 코드 컴파일러를 사용 하지 않는 코드 공급자에서 기본 클래스 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> object that indicates the settings for the compilation.</source>
          <target state="translated">컴파일 설정을 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>An array of the names of the files to compile.</source>
          <target state="translated">컴파일할 파일 이름의 배열입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.</source>
          <target state="translated">지정된 컴파일러 설정을 사용하여 지정된 파일에 포함된 소스 코드에서 어셈블리를 컴파일합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> object that indicates the results of compilation.</source>
          <target state="translated">컴파일 결과를 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는이 방법을 통해 제공 됩니다는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> 구현에서 반환 하는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> 공급자의입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">코드 공급자는이 메서드를 재정의 하지 않는 경우는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> 구현을 기본 클래스에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">이 메서드와 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> 메서드가 파생 클래스에서 재정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">이 메서드를 재정의 하는 경우에 기본 클래스의 해당 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method for compatibility with preexisting providers that use code compilers.</source>
          <target state="translated">기본 클래스 메서드는 사용 되지 않는 사용 하 여 파생된 클래스에서 생성기를 만듭니다 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> 코드 컴파일러를 사용 하는 기존 공급자와의 호환성에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">기본 클래스 메서드 다음 해당 하는 메서드를 호출의 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> 이 기능을 수행 하려면 구현 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code compiler.</source>
          <target state="translated">받아볼 수는 <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> 코드 컴파일러를 사용 하지 않는 코드 공급자에서 기본 클래스 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> object that indicates the compiler settings for this compilation.</source>
          <target state="translated">이 컴파일에 대한 컴파일러 설정을 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>An array of source code strings to compile.</source>
          <target state="translated">컴파일할 소스 코드 문자열의 배열입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.</source>
          <target state="translated">지정된 컴파일러 설정을 사용하여 소스 코드가 포함된 지정된 문자열 배열에서 어셈블리를 컴파일합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> object that indicates the results of compilation.</source>
          <target state="translated">컴파일 결과를 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는이 방법을 통해 제공 됩니다는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> 구현에서 반환 하는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> 공급자의입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">코드 공급자는이 메서드를 재정의 하지 않는 경우는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> 구현을 기본 클래스에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">이 메서드와 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> 메서드가 파생 클래스에서 재정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">이 메서드를 재정의 하는 경우에 기본 클래스의 해당 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method for compatibility with preexisting providers that use code compilers.</source>
          <target state="translated">기본 클래스 메서드는 사용 되지 않는 사용 하 여 파생된 클래스에서 생성기를 만듭니다 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> 코드 컴파일러를 사용 하는 기존 공급자와의 호환성에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">기본 클래스 메서드 다음 해당 하는 메서드를 호출의 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> 이 기능을 수행 하려면 구현 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code compiler.</source>
          <target state="translated">받아볼 수는 <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> 코드 컴파일러를 사용 하지 않는 코드 공급자에서 기본 클래스 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
          <source>When overridden in a derived class, creates a new code compiler.</source>
          <target state="translated">파생 클래스에서 재정의될 때 새 코드 컴파일러를 만듭니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
          <source>An <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> that can be used for compilation of <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph> based source code representations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> 기준 소스 코드 표현을 컴파일하는 데 사용할 수 있는 <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
          <source>This method is obsolete in the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>.</source>
          <target state="translated">이 메서드는에서 사용 되지 않는 <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> methods that are directly available in the code provider.</source>
          <target state="translated">메서드 대신 호출 하는 것은 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> 코드 공급자에서 직접 사용할 수 있는 방법입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, you should implement the <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> members in the <ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> class and throw a <ph id="ph4">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> when this method is called.</source>
          <target state="translated">에 <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>를 구현 해야는 <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> 의 멤버는 <ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 클래스 선언 하 고 throw는 <ph id="ph4">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> 이 메서드가 호출 될 때입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>The string for which to create an escaped identifier.</source>
          <target state="translated">이스케이프된 식별자를 만들 문자열입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>Creates an escaped identifier for the specified value.</source>
          <target state="translated">지정된 값의 이스케이프된 식별자를 만듭니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>The escaped identifier for the value.</source>
          <target state="translated">해당 값의 이스케이프된 식별자입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A&gt;</ph> tests whether the identifier conflicts with any reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A&gt;</ph> 테스트 예약 된 식별자 충돌 하는지 여부 또는 언어 키워드 및 그렇다면 언어별 이스케이프 코드 서식을 사용 하 여 동일한 이름을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>This is referred to an escaped identifier.</source>
          <target state="translated">이스케이프 된 식별자 라고 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>The escaped identifier contains the same <ph id="ph1">`value`</ph> but has escape-code formatting added to differentiate the identifier from the keyword.</source>
          <target state="translated">이스케이프 된 식별자를 포함 하는 동일한 <ph id="ph1">`value`</ph> 되지만 키워드에서 식별자를 구분 하기 위해 추가 이스케이프 코드 서식 지정 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>Two implementation examples are preceding the <ph id="ph1">`value`</ph> with "@" or bracketing the <ph id="ph2">`value`</ph> with "[" and "]".</source>
          <target state="translated">두 가지 구현 예는 앞의 <ph id="ph1">`value`</ph> 으로 "@" 붙이거나는 <ph id="ph2">`value`</ph> 와 "[" 및 "]"입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는이 방법을 통해 제공 됩니다는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현에서 반환 하는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> 공급자의입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">코드 공급자는이 메서드를 재정의 하지 않는 경우는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현을 기본 클래스에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">이 메서드와 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 메서드가 파생 클래스에서 재정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">이 메서드를 재정의 하는 경우에 기본 클래스의 해당 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">기본 클래스 메서드는 사용 되지 않는 사용 하 여 파생된 클래스에서 생성기를 만듭니다 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 코드 생성기를 사용 하는 기존 공급자와의 호환성에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">기본 클래스 메서드 다음 해당 하는 메서드를 호출의 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> 이 기능을 수행 하려면 구현 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">받아볼 수는 <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> 코드 생성기를 사용 하지 않는 코드 공급자에서 기본 클래스 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>When overridden in a derived class, creates a new code generator.</source>
          <target state="translated">파생 클래스에서 재정의될 때 새 코드 생성기를 만듭니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
          <source>When overridden in a derived class, creates a new code generator.</source>
          <target state="translated">파생 클래스에서 재정의될 때 새 코드 생성기를 만듭니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> that can be used to generate <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph> based source code representations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> 기준 소스 코드 표현을 생성하는 데 사용할 수 있는 <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
          <source>This method is obsolete in the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>.</source>
          <target state="translated">이 메서드는에서 사용 되지 않는 <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> methods that are directly available in the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> class.</source>
          <target state="translated">메서드 대신 호출 하는 것은 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 에서 직접 사용할 수 있는 메서드는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, you should implement the <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> members in the <ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> class and throw a <ph id="ph4">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> when this method is called.</source>
          <target state="translated">에 <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>를 구현 해야는 <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> 의 멤버는 <ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 클래스 선언 하 고 throw는 <ph id="ph4">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> 이 메서드가 호출 될 때입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to use to output.</source>
          <target state="translated">출력에 사용할 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>When overridden in a derived class, creates a new code generator using the specified <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> for output.</source>
          <target state="translated">파생 클래스에서 재정의될 때 지정된 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>를 출력에 사용하여 새 코드 생성기를 만듭니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>An <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> that can be used to generate <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph> based source code representations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> 기준 소스 코드 표현을 생성하는 데 사용할 수 있는 <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>This method uses the specified <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> for output.</source>
          <target state="translated">이 메서드를 사용 하 여 지정 된 <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> 출력에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>This method supports more optimized code generation that incrementally updates the source code.</source>
          <target state="translated">이 메서드는 소스 코드를 증분 업데이트 하는 더 많은 최적화 된 코드 생성을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>The base class implementation calls the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method, which is obsolete in the <ph id="ph2">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> and results in a <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph> if an <ph id="ph4">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> object is not returned.</source>
          <target state="translated">기본 클래스 구현 호출은 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> 에서 사용 되지 않는 메서드는 <ph id="ph2">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> 남습니다는 <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph> 경우는 <ph id="ph4">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 개체가 반환 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
          <source>The file name to output to.</source>
          <target state="translated">출력할 파일 이름입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
          <source>When overridden in a derived class, creates a new code generator using the specified file name for output.</source>
          <target state="translated">파생 클래스에서 재정의될 때 지정된 파일 이름을 출력으로 사용하여 새 코드 생성기를 만듭니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> that can be used to generate <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph> based source code representations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> 기준 소스 코드 표현을 생성하는 데 사용할 수 있는 <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
          <source>This method uses the specified file name for output.</source>
          <target state="translated">이 메서드는 출력에 대 한 지정 된 파일 이름을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
          <source>The base class implementation calls the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method, which is obsolete in the <ph id="ph2">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> and results in a <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph> if an <ph id="ph4">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> object is not returned.</source>
          <target state="translated">기본 클래스 구현 호출은 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> 에서 사용 되지 않는 메서드는 <ph id="ph2">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> 남습니다는 <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph> 경우는 <ph id="ph4">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 개체가 반환 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
          <source>When overridden in a derived class, creates a new code parser.</source>
          <target state="translated">파생 클래스에서 재정의될 때 새 코드 파서를 만듭니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
          <source>An <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph> that can be used to parse source code.</source>
          <target state="translated">소스 코드를 구문 분석하는 데 사용할 수 있는 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
          <source>The base implementation always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">기본 구현은 항상 <ph id="ph1">&lt;see langword="null" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> instance for the specified language.</source>
          <target state="translated">지정된 언어에 대한 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 인스턴스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The language name.</source>
          <target state="translated">언어 이름입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> instance for the specified language.</source>
          <target state="translated">지정된 언어에 대한 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 인스턴스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>A CodeDOM provider that is implemented for the specified language name.</source>
          <target state="translated">지정된 언어 이름에 대해 구현된 CodeDOM 공급자입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</source>
          <target state="translated">이 메서드는 여러 공급자 중 하나를 선택적으로 사용할 수 있는 응용 프로그램에서 코드 공급자의 인스턴스를 만드는 데 가장 일반적으로.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> allows you to specify at run time the code provider you wish to instantiate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> 런타임 시 인스턴스화할 하려는 코드 공급자를 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>If you know at design time which code provider is to be used, you should create an instance of that code provider rather than use the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method.</source>
          <target state="translated">사용할 수 있는 코드 공급자가 디자인 타임에 알고 있는 경우 해당 코드 공급자의 인스턴스를 만들고 대신 해야 사용는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> instance for a specific language name; it is similar to calling the <ph id="ph3">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType&gt;</ph> method with the language provider type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> 메서드가 반환 되는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 특정 언어 이름에 대 한 인스턴스; 호출 하는 것과 비슷합니다는 <ph id="ph3">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType&gt;</ph> 메서드 언어 공급자 형식 사용 합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>Use <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> when you want to dynamically find a configured provider implementation for a language name.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> 동적 찾을 언어 이름에 대해 구성 된 공급자 구현 하려는 경우.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>If more than one provider implementation is configured for the language name, <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> returns a provider instance for the last matching configuration element.</source>
          <target state="translated">둘 이상의 공급자 구현을 언어 이름에 대해 구성 된 경우 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> 마지막 일치 하는 구성 요소에 대 한 공급자 인스턴스를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>Use the <ph id="ph1">&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType&gt;</ph> method overload when you want a specific language provider implementation.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드는 특정 언어 공급자 구현 하려는 경우.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>For example, use the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method to get a provider instance that supports the language name <ph id="ph2">`"CSharp"`</ph>; use the <ph id="ph3">&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType&gt;</ph> method overload to get a provider instance specifically for the <ph id="ph4">&lt;xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">예를 들어 사용는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> 를 지 원하는 언어 이름 공급자 인스턴스를 가져오는 메서드입니다. <ph id="ph2">`"CSharp"`</ph>; 사용 하 여는 <ph id="ph3">&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드를 위해 특별히 공급자 인스턴스를 가져옵니다는 <ph id="ph4">&lt;xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>You should use the [<ph id="ph1">\]</ph>, CultureInfo, Object<ph id="ph2">\&lt;</ph>xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt; method if you have multiple code providers for a language and you desire to instantiate a specific code provider.</source>
          <target state="translated">You should use the [<ph id="ph1">\]</ph>, CultureInfo, Object<ph id="ph2">\&lt;</ph>xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt; method if you have multiple code providers for a language and you desire to instantiate a specific code provider.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> method checks whether at least one provider implementation supports a specific language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> 메서드는 공급자를 하나 이상 구현 특정 언어를 지원 하는지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>You can validate a language name using <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> before passing it to <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>.</source>
          <target state="translated">사용 하 여 언어 이름을 확인할 수 있습니다. <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> 전달 하기 전에 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>If you pass an unsupported language name to <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> a <ph id="ph2">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph> is thrown.</source>
          <target state="translated">지원 되지 않는 언어 이름을 전달 하는 경우 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> 는 <ph id="ph2">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph> throw 됩니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph> method can be used to determine all <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations on a computer, including additional implementations provided by developers and compiler vendors that are identified in the <bpt id="p1">[</bpt><ph id="ph3">&amp;lt;</ph>system.codedom<ph id="ph4">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph> 메서드를 사용 하 여 모든 확인 수 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 구현 개발자 및에서 식별 되는 컴파일러 공급 업체에서 제공 하는 추가 구현을 비롯 하 여 컴퓨터에는 <bpt id="p1">[</bpt> <ph id="ph3">&amp;lt;</ph>system.codedom <ph id="ph4">&amp;gt;</ph> 요소<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> 컴퓨터 구성 파일 (Machine.config)에서.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method returns an instance of a <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for a specific language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> 의 인스턴스를 반환 하는 메서드는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 특정 언어에 대 한 구현 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>Language names are case-insensitive.</source>
          <target state="translated">언어 이름은 대/소문자를 구분 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The following code example determines the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for an input language and displays the configured settings for the language provider.</source>
          <target state="translated">다음 코드 예제에서는 확인 된 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 언어 공급자에 대 한 구성된 설정 표시 및 입력된 언어에 대 한 구현 합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="language" /&gt;</ph> does not have a configured provider on this computer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="language" /&gt;</ph>에 대한 공급자가 이 컴퓨터에 구성되어 있지 않은 경우</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="language" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="language" /&gt;</ph>이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>The language name.</source>
          <target state="translated">언어 이름입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>A collection of provider options from the configuration file.</source>
          <target state="translated">구성 파일의 공급자 옵션 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> instance for the specified language and provider options.</source>
          <target state="translated">지정된 언어와 공급자 옵션에 대한 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 인스턴스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>A CodeDOM provider that is implemented for the specified language name and options.</source>
          <target state="translated">지정된 언어 이름과 옵션에 대해 구현된 CodeDOM 공급자입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</source>
          <target state="translated">이 메서드는 여러 공급자 중 하나를 선택적으로 사용할 수 있는 응용 프로그램에서 코드 공급자의 인스턴스를 만드는 데 가장 일반적으로.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> enables you to specify at run time the version of the code provider you want to instantiate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> 런타임 시 코드 공급자를 인스턴스화하 려의 버전을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>If you know at design time which code provider is to be used, you should create an instance of that code provider instead of using the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> method.</source>
          <target state="translated">사용 하는 대신 해당 코드 공급자의 인스턴스를 사용할 수 있는 코드 공급자가 디자인 타임에 알고 있는 경우 만들어야는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>Use <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> when you want to dynamically find a configured provider implementation for a specific language and options.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> 특정 언어 및 옵션에 대 한 구성된 된 공급자 구현을 동적으로 찾으려고 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>Language names are case-insensitive.</source>
          <target state="translated">언어 이름은 대/소문자를 구분 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>For information about supported provider options, see the specific CodeDOM provider documentation.</source>
          <target state="translated">지원 되는 공급자 옵션에 대 한 정보에 대 한 특정 CodeDOM 공급자 설명서를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>For information about validating a provider and calling a provider if more than one provider implementation is configured for the language name, see the Remarks section of the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29&gt;</ph> method.</source>
          <target state="translated">유효성을 검사 하는 공급자 및 둘 이상의 공급자 구현을 언어 이름에 대해 구성 된 경우 공급자를 호출 하는 방법에 대 한 내용은의 설명 섹션을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>The following example shows how to create an instance of a provider by using the <ph id="ph1">`providerOptions`</ph> parameter.</source>
          <target state="translated">사용 하 여 공급자의 인스턴스를 만드는 방법을 보여 주는 다음 예제는 <ph id="ph1">`providerOptions`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>The string for which to generate a valid identifier.</source>
          <target state="translated">유효한 식별자를 생성할 문자열입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>Creates a valid identifier for the specified value.</source>
          <target state="translated">지정된 값의 유효한 식별자를 만듭니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>A valid identifier for the specified value.</source>
          <target state="translated">지정된 값의 유효한 식별자입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A&gt;</ph> tests whether the identifier conflicts with reserved or language keywords, and if so, attempts to return a valid identifier name that does not conflict.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A&gt;</ph> 예약 된 식별자 충돌 하는지 여부를 테스트 하거나 언어 키워드 경우, 올바른 식별자를 반환 하려고 이름을 지정 하는 충돌 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>Usually the returned identifier is only slightly modified to differentiate the identifier from the keyword; for example, the name might be preceded by the underscore ("_") character.</source>
          <target state="translated">일반적으로 반환 된 식별자만 조금 수정 되어; 키워드에서 식별자를 구분 합니다. 예를 들어 이름 앞에 밑줄 ("_") 문자 수 있습니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는이 방법을 통해 제공 됩니다는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현에서 반환 하는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> 공급자의입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">코드 공급자는이 메서드를 재정의 하지 않는 경우는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현을 기본 클래스에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">이 메서드와 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 메서드가 파생 클래스에서 재정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">이 메서드를 재정의 하는 경우에 기본 클래스의 해당 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">기본 클래스 메서드는 사용 되지 않는 사용 하 여 파생된 클래스에서 생성기를 만듭니다 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 코드 생성기를 사용 하는 기존 공급자와의 호환성에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">기본 클래스 메서드 다음 해당 하는 메서드를 호출의 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> 이 기능을 수행 하려면 구현 합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">받아볼 수는 <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> 코드 생성기를 사용 하지 않는 코드 공급자에서 기본 클래스 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>Gets the default file name extension to use for source code files in the current language.</source>
          <target state="translated">현재 언어의 소스 코드 파일에 사용할 기본 확장명을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>A file name extension corresponding to the extension of the source files of the current language.</source>
          <target state="translated">현재 언어의 소스 코드 확장명에 해당하는 확장명입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>The base implementation always returns <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">기본 구현은 항상 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>This property is used by code generators and code compilers to indicate what file extensions should be generated or used.</source>
          <target state="translated">이 속성은 코드 생성기 및 코드 컴파일러에서 생성 하거나 사용 하는 파일 확장명을 나타내기 위해 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>The following code example creates an instance of <ph id="ph1">&lt;xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는의 인스턴스를 만듭니다. <ph id="ph1">&lt;xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>The example displays the provider name, hash code and default file name extension for the new provider instance.</source>
          <target state="translated">이 예제에서는 공급자 이름, 새 공급자 인스턴스에 대 한 해시 코드와 기본 파일 이름 확장명을 표시합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> for which to generate code.</source>
          <target state="translated">코드를 생성할 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which the output code is sent.</source>
          <target state="translated">출력 코드가 전달될 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated">코드를 생성하기 위해 사용할 옵션을 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">지정된 CodeDOM(코드 문서 개체 모델) 컴파일 단위에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는이 방법을 통해 제공 됩니다는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현에서 반환 하는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> 공급자의입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">코드 공급자는이 메서드를 재정의 하지 않는 경우는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현을 기본 클래스에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The following code example shows the use of the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A&gt;</ph> method to generate code for a "Hello World" application from a <ph id="ph2">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A&gt;</ph> 에서 "Hello World" 응용 프로그램에 대 한 코드를 생성 하는 <ph id="ph2">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>This example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> class.</source>
          <target state="translated">이 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">이 메서드와 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 메서드가 파생 클래스에서 재정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">이 메서드를 재정의 하는 경우에 기본 클래스의 해당 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">기본 클래스 메서드는 사용 되지 않는 사용 하 여 파생된 클래스에서 생성기를 만듭니다 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 코드 생성기를 사용 하는 기존 공급자와의 호환성에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">기본 클래스 메서드 다음 해당 하는 메서드를 호출의 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> 이 기능을 수행 하려면 구현 합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">받아볼 수는 <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> 코드 생성기를 사용 하지 않는 코드 공급자에서 기본 클래스 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph> object that indicates the expression for which to generate code.</source>
          <target state="translated">코드를 생성할 식을 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which output code is sent.</source>
          <target state="translated">출력 코드가 전달될 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated">코드를 생성하기 위해 사용할 옵션을 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">지정된 CodeDOM(코드 문서 개체 모델) 식에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는이 방법을 통해 제공 됩니다는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현에서 반환 하는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> 공급자의입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">코드 공급자는이 메서드를 재정의 하지 않는 경우는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현을 기본 클래스에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">이 메서드와 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 메서드가 파생 클래스에서 재정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">이 메서드를 재정의 하는 경우에 기본 클래스의 해당 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">기본 클래스 메서드는 사용 되지 않는 사용 하 여 파생된 클래스에서 생성기를 만듭니다 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 코드 생성기를 사용 하는 기존 공급자와의 호환성에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">기본 클래스 메서드 다음 해당 하는 메서드를 호출의 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> 이 기능을 수행 하려면 구현 합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">받아볼 수는 <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> 코드 생성기를 사용 하지 않는 코드 공급자에서 기본 클래스 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeMember" /&gt;</ph> object that indicates the member for which to generate code.</source>
          <target state="translated">코드를 생성할 멤버를 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeMember" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which output code is sent.</source>
          <target state="translated">출력 코드가 전달될 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated">코드를 생성하기 위해 사용할 옵션을 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">지정된 CodeDOM(코드 문서 개체 모델) 멤버 선언에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base class implementation throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>.</source>
          <target state="translated">기본 클래스 구현을 throw 한 <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>See <ph id="ph1">&lt;xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType&gt;</ph> for documentation describing an implementation of this method.</source>
          <target state="translated">참조 <ph id="ph1">&lt;xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType&gt;</ph> 이 메서드의 구현을 설명 하는 설명서에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The following code example shows the use of the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A&gt;</ph> method as implemented by the <ph id="ph2">&lt;xref:Microsoft.CSharp.CSharpCodeProvider&gt;</ph> and <ph id="ph3">&lt;xref:Microsoft.VisualBasic.VBCodeProvider&gt;</ph> classes.</source>
          <target state="translated">다음 코드 예제에서는 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A&gt;</ph> 에 의해 구현 된 메서드는 <ph id="ph2">&lt;xref:Microsoft.CSharp.CSharpCodeProvider&gt;</ph> 및 <ph id="ph3">&lt;xref:Microsoft.VisualBasic.VBCodeProvider&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>This method is not overridden in a derived class.</source>
          <target state="translated">이 메서드가 파생 클래스에서 재정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeNamespace" /&gt;</ph> object that indicates the namespace for which to generate code.</source>
          <target state="translated">코드를 생성할 네임스페이스를 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeNamespace" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which output code is sent.</source>
          <target state="translated">출력 코드가 전달될 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated">코드를 생성하기 위해 사용할 옵션을 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">지정된 CodeDOM(코드 문서 개체 모델) 네임스페이스에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는이 방법을 통해 제공 됩니다는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현에서 반환 하는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> 공급자의입니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">코드 공급자는이 메서드를 재정의 하지 않는 경우는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현을 기본 클래스에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">이 메서드와 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 메서드가 파생 클래스에서 재정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">이 메서드를 재정의 하는 경우에 기본 클래스의 해당 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">기본 클래스 메서드는 사용 되지 않는 사용 하 여 파생된 클래스에서 생성기를 만듭니다 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 코드 생성기를 사용 하는 기존 공급자와의 호환성에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">기본 클래스 메서드 다음 해당 하는 메서드를 호출의 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> 이 기능을 수행 하려면 구현 합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">받아볼 수는 <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> 코드 생성기를 사용 하지 않는 코드 공급자에서 기본 클래스 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeStatement" /&gt;</ph> containing the CodeDOM elements for which to generate code.</source>
          <target state="translated">코드를 생성할 CodeDOM 요소가 포함된 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeStatement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which output code is sent.</source>
          <target state="translated">출력 코드가 전달될 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated">코드를 생성하기 위해 사용할 옵션을 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">지정된 CodeDOM(코드 문서 개체 모델) 문에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는이 방법을 통해 제공 됩니다는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현에서 반환 하는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> 공급자의입니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">코드 공급자는이 메서드를 재정의 하지 않는 경우는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현을 기본 클래스에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">이 메서드와 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 메서드가 파생 클래스에서 재정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">이 메서드를 재정의 하는 경우에 기본 클래스의 해당 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">기본 클래스 메서드는 사용 되지 않는 사용 하 여 파생된 클래스에서 생성기를 만듭니다 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 코드 생성기를 사용 하는 기존 공급자와의 호환성에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">기본 클래스 메서드 다음 해당 하는 메서드를 호출의 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> 이 기능을 수행 하려면 구현 합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">받아볼 수는 <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> 코드 생성기를 사용 하지 않는 코드 공급자에서 기본 클래스 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> object that indicates the type for which to generate code.</source>
          <target state="translated">코드를 생성할 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which output code is sent.</source>
          <target state="translated">출력 코드가 전달될 <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated">코드를 생성하기 위해 사용할 옵션을 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">지정된 CodeDOM(코드 문서 개체 모델) 형식 선언에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는이 방법을 통해 제공 됩니다는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현에서 반환 하는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> 공급자의입니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">코드 공급자는이 메서드를 재정의 하지 않는 경우는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현을 기본 클래스에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">이 메서드와 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 메서드가 파생 클래스에서 재정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">이 메서드를 재정의 하는 경우에 기본 클래스의 해당 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">기본 클래스 메서드는 사용 되지 않는 사용 하 여 파생된 클래스에서 생성기를 만듭니다 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 코드 생성기를 사용 하는 기존 공급자와의 호환성에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">기본 클래스 메서드 다음 해당 하는 메서드를 호출의 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> 이 기능을 수행 하려면 구현 합니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">받아볼 수는 <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> 코드 생성기를 사용 하지 않는 코드 공급자에서 기본 클래스 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>Returns the language provider and compiler configuration settings for this computer.</source>
          <target state="translated">이 컴퓨터의 언어 공급자 및 컴파일러 구성 설정을 반환합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerInfo" /&gt;</ph> representing the settings of all configured <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementations.</source>
          <target state="translated">구성된 모든 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerInfo" /&gt;</ph> 구현의 설정을 나타내는 <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>Use the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph> method to enumerate the language provider settings on a computer.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph> 메서드를 열거 하는 컴퓨터에 언어 공급자 설정 합니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>, the default language providers supplied by the .NET Framework are not specified in the <bpt id="p1">[</bpt><ph id="ph2">&amp;lt;</ph>system.codedom<ph id="ph3">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> compiler configuration section and cannot be removed, so this method returns information about the default providers and any specified in the configuration file.</source>
          <target state="translated">에 <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>,.NET Framework에서 제공 하는 기본 언어 공급자에 지정 되지 않은 <bpt id="p1">[</bpt> <ph id="ph2">&amp;lt;</ph>system.codedom<ph id="ph3">&amp;gt;</ph> 요소<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> 컴파일러 구성 섹션 및 제거할 수 없습니다 되므로이 메서드는 기본 공급자와 구성 파일에 지정 된 모든 하는 방법에 대 한 정보를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>The following code example enumerates the language providers on the computer and displays the configuration and compiler settings for each language provider.</source>
          <target state="translated">다음 코드 예제에서는 컴퓨터의 언어 공급자를 열거 하 고 각 언어 공급자에 대 한 구성 및 컴파일러 설정을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>A language name.</source>
          <target state="translated">언어 이름입니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>Returns the language provider and compiler configuration settings for the specified language.</source>
          <target state="translated">지정된 언어에 대한 언어 공급자 및 컴파일러 구성 설정을 반환합니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerInfo" /&gt;</ph> object populated with settings of the configured <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementation.</source>
          <target state="translated">구성된 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerInfo" /&gt;</ph> 구현의 설정으로 채워진 <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file contains the language provider and compiler configuration settings for each <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation on the computer.</source>
          <target state="translated"><bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> 요소<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> 컴퓨터 구성 파일 각각에 대해 언어 공급자 및 컴파일러 구성 설정이 포함 <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 컴퓨터에서 구현 합니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>For information about machine configuration files, see the Machine Configuration Files section in <bpt id="p1">[</bpt>Configuring Apps<ept id="p1">](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f)</ept>.</source>
          <target state="translated">컴퓨터 구성 파일 섹션을 참조 컴퓨터 구성 파일에 대 한 내용은 <bpt id="p1">[</bpt>구성 앱<ept id="p1">](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph> method searches each provider configuration element for the specified language name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph> 메서드는 지정 된 언어 이름에 대 한 각 공급자 구성 요소를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The returned <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> instance contains the configured language provider and compiler settings.</source>
          <target state="translated">반환 된 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> 인스턴스에 구성 된 언어 공급자 및 컴파일러 설정을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> method checks whether at least one provider implementation supports a specific language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> 메서드는 공급자를 하나 이상 구현 특정 언어를 지원 하는지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>You can validate a language name using <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> before passing it to <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph>.</source>
          <target state="translated">사용 하 여 언어 이름을 확인할 수 있습니다. <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> 전달 하기 전에 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>This prevents throwing a <ph id="ph1">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph> when you access the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> instance for an unsupported language name.</source>
          <target state="translated">이렇게 하면 시 키 지는 <ph id="ph1">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph> 액세스 하는 경우는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> 인스턴스는 지원 되지 않는 언어 이름에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>If more than one provider implementation is configured for the input language name, <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph> returns the settings from the last matching provider configuration element.</source>
          <target state="translated">둘 이상의 공급자 구현이 입력된 언어 이름에 대해 구성 된 경우 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph> 구성 요소에서 마지막으로 일치 하는 공급자의 설정을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>Language names are case-insensitive.</source>
          <target state="translated">언어 이름은 대/소문자를 구분 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The following code example determines the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for an input language and displays the configured settings for the language provider.</source>
          <target state="translated">다음 코드 예제에서는 확인 된 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 언어 공급자에 대 한 구성된 설정 표시 및 입력된 언어에 대 한 구현 합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="language" /&gt;</ph> does not have a configured provider on this computer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="language" /&gt;</ph>에 대한 공급자가 이 컴퓨터에 구성되어 있지 않은 경우</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="language" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="language" /&gt;</ph>이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
          <source>The type of object to retrieve a type converter for.</source>
          <target state="translated">형식 변환기를 검색할 개체의 형식입니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> for the specified data type.</source>
          <target state="translated">지정된 데이터 형식에 대한 <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> for the specified type, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if a <ph id="ph3">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> for the specified type cannot be found.</source>
          <target state="translated">지정된 형식에 대한 <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>이거나, 지정된 형식에 대한 <ph id="ph3">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>를 찾을 수 없으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
          <source>A derived class can override this method to provide specific types of type converters for specific data types.</source>
          <target state="translated">파생된 클래스는 특정 데이터 형식에 대 한 특정 유형의 형식 변환기를 제공 하려면이 메서드를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>A file name extension.</source>
          <target state="translated">파일 이름 확장명입니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>Returns a language name associated with the specified file name extension, as configured in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> compiler configuration section.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 컴파일러 구성 섹션에 구성되어 있는 대로, 지정된 파일 이름 확장명과 연결된 언어 이름을 반환합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>A language name associated with the file name extension, as configured in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> compiler configuration settings.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 컴파일러 구성 설정에 구성되어 있는 대로, 파일 이름 확장명과 연결된 언어 이름입니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation on the computer.</source>
          <target state="translated"><bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> 요소<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> 컴퓨터 구성 파일 (Machine.config) 각각에 대해 언어 공급자 및 컴파일러 구성 설정이 포함 <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 구현에는 컴퓨터입니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> method searches each provider configuration element for the specified file name extension.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> 메서드는 지정 된 파일 이름 확장명에 대 한 각 공급자 구성 요소를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph> method checks whether at least one provider implementation supports a specific file name extension.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph> 메서드는 공급자를 하나 이상 구현 특정 파일 이름 확장명을 지원 하는지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>You can validate a file name extension using <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph> before passing it to <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph>.</source>
          <target state="translated">사용 하 여 파일 이름 확장명을 확인할 수 있습니다. <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph> 전달 하기 전에 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>This prevents <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> from throwing a <ph id="ph2">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph> for an unsupported file name extension.</source>
          <target state="translated">이렇게 하면 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> 에서 throw 한 <ph id="ph2">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph> 지원 되지 않는 파일 이름 확장명에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>If a provider implementation supports the input file name extension, and there are multiple supported languages configured for that provider, then <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> returns the first language name for that provider.</source>
          <target state="translated">공급자 구현 입력된 파일 이름 확장명을 지원 하 고 해당 공급자에 대 한 다음 구성 하는 여러 지원 되는 언어는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> 해당 공급자에 대 한 첫 번째 언어 이름을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>If more than one provider implementation is configured for the input file name extension, <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> returns the language name from the last matching provider configuration element.</source>
          <target state="translated">둘 이상의 공급자 구현이 입력된 파일 이름 확장명에 대해 구성 된 경우 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> 구성 요소의 마지막 일치 하는 공급자에서 언어 이름을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>Language names and file name extensions are case-insensitive.</source>
          <target state="translated">언어 이름 및 파일 이름 확장명은 대/소문자 구분 합니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The following code example determines the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for an input file name extension and displays the configured settings for the language provider.</source>
          <target state="translated">다음 코드 예제에서는 확인 된 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 언어 공급자에 대 한 구성된 설정 표시 및 입력된 파일 이름 확장명에 대 한 구현 합니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="extension" /&gt;</ph> does not have a configured language provider on this computer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="extension" /&gt;</ph>에 대한 언어 공급자가 이 컴퓨터에 구성되어 있지 않은 경우</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="extension" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="extension" /&gt;</ph>이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> that indicates the type to return.</source>
          <target state="translated">반환할 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>Gets the type indicated by the specified <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>에서 나타내는 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>A text representation of the specified type, formatted for the language in which code is generated by this code generator.</source>
          <target state="translated">지정된 형식의 텍스트 표현으로, 이 코드 생성기가 생성하는 코드에 대한 언어로 서식이 지정되어 있습니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>In Visual Basic, for example, passing in a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Int32" /&gt;</ph> type will return "Integer".</source>
          <target state="translated">예를 들어, Visual Basic에서 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> 형식에 대한 <ph id="ph2">&lt;see cref="T:System.Int32" /&gt;</ph>를 전달하면 "Integer"가 반환됩니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는이 방법을 통해 제공 됩니다는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현에서 반환 하는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> 공급자의입니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">코드 공급자는이 메서드를 재정의 하지 않는 경우는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현을 기본 클래스에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">이 메서드와 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 메서드가 파생 클래스에서 재정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">이 메서드를 재정의 하는 경우에 기본 클래스의 해당 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">기본 클래스 메서드는 사용 되지 않는 사용 하 여 파생된 클래스에서 생성기를 만듭니다 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 코드 생성기를 사용 하는 기존 공급자와의 호환성에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">기본 클래스 메서드 다음 해당 하는 메서드를 호출의 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> 이 기능을 수행 하려면 구현 합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">받아볼 수는 <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> 코드 생성기를 사용 하지 않는 코드 공급자에서 기본 클래스 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>A file name extension.</source>
          <target state="translated">파일 이름 확장명입니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>Tests whether a file name extension has an associated <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementation configured on the computer.</source>
          <target state="translated">파일 이름 확장명과 연결된 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 구현이 컴퓨터에 구성되어 있는지 여부를 테스트합니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementation is configured for the specified file name extension; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 구현이 지정된 파일 이름 확장명에 대해 구성되어 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation on the computer.</source>
          <target state="translated"><bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> 요소<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> 컴퓨터 구성 파일 (Machine.config) 각각에 대해 언어 공급자 및 컴파일러 구성 설정이 포함 <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 구현에는 컴퓨터입니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph> method searches the provider configuration elements for the specified file name extension.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph> 메서드는 지정 된 파일 이름 확장명에 대 한 공급자 구성 요소를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>File name extensions are case-insensitive.</source>
          <target state="translated">파일 이름 확장명 대/소문자를 구분 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>The following code example determines the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for an input file name extension and displays the configured settings for the language provider.</source>
          <target state="translated">다음 코드 예제에서는 확인 된 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 언어 공급자에 대 한 구성된 설정 표시 및 입력된 파일 이름 확장명에 대 한 구현 합니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="extension" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="extension" /&gt;</ph>이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The language name.</source>
          <target state="translated">언어 이름입니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>Tests whether a language has a <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementation configured on the computer.</source>
          <target state="translated">언어에 대한 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 구현이 컴퓨터에 구성되어 있는지 여부를 테스트합니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementation is configured for the specified language; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 구현이 지정된 언어에 대해 구성되어 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation on the computer.</source>
          <target state="translated"><bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> 요소<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> 컴퓨터 구성 파일 (Machine.config) 각각에 대해 언어 공급자 및 컴파일러 구성 설정이 포함 <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 구현에는 컴퓨터입니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> method searches the provider configuration elements for the specified language name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> 메서드는 지정 된 언어 이름에 대 한 공급자 구성 요소를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>Language names are case-insensitive.</source>
          <target state="translated">언어 이름은 대/소문자를 구분 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The following code example determines the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for an input language and displays the configured settings for the language provider.</source>
          <target state="translated">다음 코드 예제에서는 확인 된 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> 언어 공급자에 대 한 구성된 설정 표시 및 입력된 언어에 대 한 구현 합니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="language" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="language" /&gt;</ph>이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>The value to verify as a valid identifier.</source>
          <target state="translated">유효한 식별자인지 확인할 값입니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>Returns a value that indicates whether the specified value is a valid identifier for the current language.</source>
          <target state="translated">지정된 값이 현재 언어에 유효한 식별자인지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter is a valid identifier; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="value" /&gt;</ph> 매개 변수가 유효한 식별자이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>This method tests whether an identifier is valid.</source>
          <target state="translated">이 메서드는 식별자가 유효한 지 여부를 테스트 합니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A&gt;</ph> method is provider specific.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A&gt;</ph> 메서드는 특정 공급자입니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>Identifiers that are valid for one provider might not be valid for other providers.</source>
          <target state="translated">하나 이상의 공급자에 대해 유효한 식별자는 다른 공급자에 대 한 일 수 없습니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>If <ph id="ph1">`value`</ph> contains characters outside of the ASCII character range, check the identifier for all the languages that might be used to compile the code.</source>
          <target state="translated">경우 <ph id="ph1">`value`</ph> 문자가 ASCII 문자 범위 외부에서 코드를 컴파일하는 데 사용할 수 있는 모든 언어에 대 한 식별자를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는이 방법을 통해 제공 됩니다는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현에서 반환 하는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> 공급자의입니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">코드 공급자는이 메서드를 재정의 하지 않는 경우는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현을 기본 클래스에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">이 메서드와 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 메서드가 파생 클래스에서 재정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /&gt;</ph> in a derived class, design the method to return <ph id="ph2">&lt;see langword="true" /&gt;</ph> only if the value fits the rules of the language and does not conflict with a keyword.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /&gt;</ph> 파생된 클래스에서 반환 하는 메서드를 디자인 <ph id="ph2">&lt;see langword="true" /&gt;</ph> 값 언어의 규칙에 맞는 키워드와 충돌 하지 않는 하는 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">이 메서드를 재정의 하는 경우에 기본 클래스의 해당 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">기본 클래스 메서드는 사용 되지 않는 사용 하 여 파생된 클래스에서 생성기를 만듭니다 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 코드 생성기를 사용 하는 기존 공급자와의 호환성에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">기본 클래스 메서드 다음 해당 하는 메서드를 호출의 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> 이 기능을 수행 하려면 구현 합니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">받아볼 수는 <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> 코드 생성기를 사용 하지 않는 코드 공급자에서 기본 클래스 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
          <source>Gets a language features identifier.</source>
          <target state="translated">언어 기능 식별자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.LanguageOptions" /&gt;</ph> that indicates special features of the language.</source>
          <target state="translated">언어의 특수 기능을 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.LanguageOptions" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> object that is used to read the code to be parsed.</source>
          <target state="translated">구문 분석될 코드를 읽는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>Compiles the code read from the specified text stream into a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">지정된 텍스트 스트림에서 읽은 코드를 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>으로 컴파일합니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> that contains a representation of the parsed code.</source>
          <target state="translated">구문 분석된 코드를 나타내는 <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeParser&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는이 방법을 통해 제공 됩니다는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeParser&gt;</ph> 구현에서 반환 하는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A&gt;</ph> 공급자의입니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeParser&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">코드 공급자는이 메서드를 재정의 하지 않는 경우는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeParser&gt;</ph> 구현을 기본 클래스에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">이 메서드와 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 메서드가 파생 클래스에서 재정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">이 메서드를 재정의 하는 경우에 기본 클래스의 해당 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>The base-class method creates a parser in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /&gt;</ph> method for compatibility with preexisting providers that use code parsers.</source>
          <target state="translated">기본 클래스 메서드는 사용 되지 않는 사용 하 여 파생된 클래스에서 파서를 만듭니다 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /&gt;</ph> 코드 파서를 사용 하는 기존 공급자와의 호환성에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">기본 클래스 메서드 다음 해당 하는 메서드를 호출의 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph> 이 기능을 수행 하려면 구현 합니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code parser.</source>
          <target state="translated">받아볼 수는 <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> 코드 파서를 사용 하지 않는 코드 공급자에서 기본 클래스 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>Returns a value indicating whether the specified code generation support is provided.</source>
          <target state="translated">지정된 코드 생성이 지원되는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified code generation support is provided; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 코드 생성이 지원되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>This method can be called with a number of <ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph> flags at once to test for a set of capabilities by joining a set of appropriate capability flags together with a binary <ph id="ph2">`OR`</ph> operator (&amp;#124;).</source>
          <target state="translated">이 메서드는 여러 가지 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph> 플래그를 이진 플래그 적절 한 기능 집합을 조인 하 여 기능 집합에 대 한 테스트를 한 번에 <ph id="ph2">`OR`</ph> 연산자 (&amp;#124;).</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework 버전 1.0 및 1.1에서는이 방법을 통해 제공 됩니다는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현에서 반환 하는 <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> 공급자의입니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">버전 2.0에서는 코드 공급자를 재정의 하지 않은 경우에이 메서드를 코드 공급자에서 직접 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">코드 공급자는이 메서드를 재정의 하지 않는 경우는 <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> 구현을 기본 클래스에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">이 메서드와 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 메서드가 파생 클래스에서 재정의되지 않은 경우</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">이 메서드를 재정의 하는 경우에 기본 클래스의 해당 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">기본 클래스 메서드는 사용 되지 않는 사용 하 여 파생된 클래스에서 생성기를 만듭니다 <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> 코드 생성기를 사용 하는 기존 공급자와의 호환성에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">기본 클래스 메서드 다음 해당 하는 메서드를 호출의 <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> 이 기능을 수행 하려면 구현 합니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">받아볼 수는 <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> 코드 생성기를 사용 하지 않는 코드 공급자에서 기본 클래스 메서드를 호출 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>