<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TextFieldParser.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac534fefd8e673d5edb9c2fb81e0c3d6c92c4fe6c0b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34fefd8e673d5edb9c2fb81e0c3d6c92c4fe6c0b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source>Provides methods and properties for parsing structured text files.</source>
          <target state="translated">구조화된 텍스트 파일을 구문 분석하기 위한 메서드와 속성을 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source>The <ph id="ph1">`TextFieldParser`</ph> object provides methods and properties for parsing structured text files.</source>
          <target state="translated"><ph id="ph1">`TextFieldParser`</ph> 구조화 된 텍스트 파일 구문 분석에 대 한 속성 및 메서드를 제공 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source>Parsing a text file with the <ph id="ph1">`TextFieldParser`</ph> is similar to iterating over a text file, while the <ph id="ph2">`ReadFields`</ph> method to extract fields of text is similar to splitting the strings.</source>
          <target state="translated">텍스트 파일을 구문 분석의 <ph id="ph1">`TextFieldParser`</ph> 텍스트 파일을 반복 하는 것과 비슷합니다 동안는 <ph id="ph2">`ReadFields`</ph> 텍스트의 필드를 추출 하는 메서드는 문자열을 분할 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source>The <ph id="ph1">`TextFieldParser`</ph> can parse two types of files: delimited or fixed-width.</source>
          <target state="translated"><ph id="ph1">`TextFieldParser`</ph> 두 유형의 파일을 구문 분석할 수 있습니다: 구분 또는 고정 너비입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source>Some properties, such as <ph id="ph1">`Delimiters`</ph> and <ph id="ph2">`HasFieldsEnclosedInQuotes`</ph> are meaningful only when working with delimited files, while the <ph id="ph3">`FieldWidths`</ph> property is meaningful only when working with fixed-width files.</source>
          <target state="translated">일부 속성와 같은 <ph id="ph1">`Delimiters`</ph> 및 <ph id="ph2">`HasFieldsEnclosedInQuotes`</ph> 는 의미가 동안 구분 기호로 분리 된 파일을 사용 하는 경우는 <ph id="ph3">`FieldWidths`</ph> 속성은 고정 너비 파일을 사용 하는 경우에 의미가 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source>The following table lists examples of tasks involving the <ph id="ph1">`Microsoft.VisualBasic.FileIO.TextFieldParser`</ph> object.</source>
          <target state="translated">다음 표에서 관련 된 작업의 예를 보여 줍니다.는 <ph id="ph1">`Microsoft.VisualBasic.FileIO.TextFieldParser`</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source>To</source>
          <target state="translated">대상</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source>See</source>
          <target state="translated">보기</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source>Read from a delimited text file</source>
          <target state="translated">구분 기호로 분리 된 텍스트 파일에서 읽기</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source><bpt id="p1">[</bpt>How to: Read From Comma-Delimited Text Files<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 쉼표로 구분된 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)</ept></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source>Read from a fixed-width text file</source>
          <target state="translated">고정 너비 텍스트 파일에서 읽기</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source><bpt id="p1">[</bpt>How to: Read From Fixed-width Text Files<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 고정 너비 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)</ept></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source>Read from a text file with multiple formats</source>
          <target state="translated">여러 형식의 텍스트 파일에서 읽기</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source><bpt id="p1">[</bpt>How to: Read From Text Files with Multiple Formats<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 여러 형식의 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source>This example parses through a tab-delimited text file, <ph id="ph1">`Bigfile`</ph>.</source>
          <target state="translated">이 예제에서는 탭으로 구분 된 텍스트 파일 구문 분석 <ph id="ph1">`Bigfile`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)">
          <source><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)">
          <source>The stream to be parsed.</source>
          <target state="translated">구문 분석할 스트림입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)">
          <source>Creates a new <ph id="ph1">`TextFieldParser`</ph> object to parse the file or stream that is represented by the <ph id="ph2">`stream`</ph> parameter.</source>
          <target state="translated">새 <ph id="ph1">`TextFieldParser`</ph> 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 <ph id="ph2">`stream`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> is <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph>가 <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> cannot be read from.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph>을 읽을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)">
          <source><ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> stream to be parsed.</source>
          <target state="translated">구분 분석할 <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> 스트림입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)">
          <source>Creates a new <ph id="ph1">`TextFieldParser`</ph> object to parse the file or stream that is represented by the <ph id="ph2">`reader`</ph> parameter.</source>
          <target state="translated">새 <ph id="ph1">`TextFieldParser`</ph> 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 <ph id="ph2">`reader`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)">
          <source><ph id="ph1">&lt;paramref name="reader" /&gt;</ph> is <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="reader" /&gt;</ph>가 <ph id="ph2">&lt;see langword="Nothing" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)">
          <source>The complete path of the file to be parsed.</source>
          <target state="translated">구문 분석할 파일의 전체 경로입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)">
          <source>Creates a new <ph id="ph1">`TextFieldParser`</ph> object to parse the file specified by the <ph id="ph2">`path`</ph> parameter.</source>
          <target state="translated">새 <ph id="ph1">`TextFieldParser`</ph> 로 지정 된 파일을 구문 분석 하는 개체는 <ph id="ph2">`path`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is an empty string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph>이 빈 문자열인 경우</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The stream to be parsed.</source>
          <target state="translated">구문 분석할 스트림입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source><ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The character encoding to use if encoding is not determined from file.</source>
          <target state="translated">파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>Default is <ph id="ph1">&lt;see cref="P:System.Text.Encoding.UTF8" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Text.Encoding.UTF8" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>Creates a new <ph id="ph1">`TextFieldParser`</ph> object to parse the file or stream that is represented by the <ph id="ph2">`stream`</ph> parameter.</source>
          <target state="translated">새 <ph id="ph1">`TextFieldParser`</ph> 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 <ph id="ph2">`stream`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</source>
          <target state="translated">문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자 해석할 수 없어 및 예외를 throw 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> or <ph id="ph2">&lt;paramref name="defaultEncoding" /&gt;</ph> is <ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="defaultEncoding" /&gt;</ph>가 <ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> cannot be read from.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph>을 읽을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)">
          <source>The complete path of the file to be parsed.</source>
          <target state="translated">구문 분석할 파일의 전체 경로입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)">
          <source><ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)">
          <source>The character encoding to use if encoding is not determined from file.</source>
          <target state="translated">파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)">
          <source>Default is <ph id="ph1">&lt;see cref="P:System.Text.Encoding.UTF8" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Text.Encoding.UTF8" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)">
          <source>Creates a new <ph id="ph1">`TextFieldParser`</ph> object to parse the file specified by the <ph id="ph2">`path`</ph> parameter.</source>
          <target state="translated">새 <ph id="ph1">`TextFieldParser`</ph> 로 지정 된 파일을 구문 분석 하는 개체는 <ph id="ph2">`path`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</source>
          <target state="translated">문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자 해석할 수 없어 및 예외를 throw 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is an empty string or <ph id="ph2">&lt;paramref name="defaultEncoding" /&gt;</ph> is <ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph>가 빈 문자열이거나 <ph id="ph2">&lt;paramref name="defaultEncoding" /&gt;</ph>이 <ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The stream to be parsed.</source>
          <target state="translated">구문 분석할 스트림입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The character encoding to use if encoding is not determined from file.</source>
          <target state="translated">파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>Default is <ph id="ph1">&lt;see cref="P:System.Text.Encoding.UTF8" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Text.Encoding.UTF8" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Boolean" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Boolean" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>Indicates whether to look for byte order marks at the beginning of the file.</source>
          <target state="translated">파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>Default is <ph id="ph1">&lt;see langword="True" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="True" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>Creates a new <ph id="ph1">`TextFieldParser`</ph> object to parse the file or stream that is represented by the <ph id="ph2">`stream`</ph> parameter.</source>
          <target state="translated">새 <ph id="ph1">`TextFieldParser`</ph> 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 <ph id="ph2">`stream`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>If the <ph id="ph1">`detectEncoding`</ph> parameter is <ph id="ph2">`True`</ph>, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</source>
          <target state="translated">경우는 <ph id="ph1">`detectEncoding`</ph> 매개 변수는 <ph id="ph2">`True`</ph>를이 생성자의 파일 또는 스트림의 처음 세 바이트 확인 하 여 인코딩 검색을 시도 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</source>
          <target state="translated">자동으로 인식 u t F-8, little endian Unicode 및 big endian 유니코드 텍스트 파일 적절 한 바이트 순서 표시로 시작 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>Otherwise, the encoding specified by <ph id="ph1">`defaultEncoding`</ph> is used.</source>
          <target state="translated">그렇지 않으면 하 여 지정 된 인코딩을 <ph id="ph1">`defaultEncoding`</ph> 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</source>
          <target state="translated">문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자 해석할 수 없어 및 예외를 throw 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> or <ph id="ph2">&lt;paramref name="defaultEncoding" /&gt;</ph> is <ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="defaultEncoding" /&gt;</ph>가 <ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> cannot be read from.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph>을 읽을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
          <source>The complete path of the file to be parsed.</source>
          <target state="translated">구문 분석할 파일의 전체 경로입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
          <source>The character encoding to use if encoding is not determined from file.</source>
          <target state="translated">파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
          <source>Default is <ph id="ph1">&lt;see cref="P:System.Text.Encoding.UTF8" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Text.Encoding.UTF8" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Boolean" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Boolean" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
          <source>Indicates whether to look for byte order marks at the beginning of the file.</source>
          <target state="translated">파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
          <source>Default is <ph id="ph1">&lt;see langword="True" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="True" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
          <source>Creates a new <ph id="ph1">`TextFieldParser`</ph> object to parse the file specified by the <ph id="ph2">`path`</ph> parameter.</source>
          <target state="translated">새 <ph id="ph1">`TextFieldParser`</ph> 로 지정 된 파일을 구문 분석 하는 개체는 <ph id="ph2">`path`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
          <source>If the <ph id="ph1">`detectEncoding`</ph> parameter is <ph id="ph2">`True`</ph>, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</source>
          <target state="translated">경우는 <ph id="ph1">`detectEncoding`</ph> 매개 변수는 <ph id="ph2">`True`</ph>를이 생성자의 파일 또는 스트림의 처음 세 바이트 확인 하 여 인코딩 검색을 시도 합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
          <source>It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</source>
          <target state="translated">자동으로 인식 u t F-8, little endian Unicode 및 big endian 유니코드 텍스트 파일 적절 한 바이트 순서 표시로 시작 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
          <source>Otherwise, the encoding specified by <ph id="ph1">`defaultEncoding`</ph> is used.</source>
          <target state="translated">그렇지 않으면 하 여 지정 된 인코딩을 <ph id="ph1">`defaultEncoding`</ph> 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</source>
          <target state="translated">문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자 해석할 수 없어 및 예외를 throw 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="path" /&gt;</ph> is an empty string or <ph id="ph2">&lt;paramref name="defaultEncoding" /&gt;</ph> is <ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="path" /&gt;</ph>가 빈 문자열이거나 <ph id="ph2">&lt;paramref name="defaultEncoding" /&gt;</ph>이 <ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>The stream to be parsed.</source>
          <target state="translated">구문 분석할 스트림입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>The character encoding to use if encoding is not determined from file.</source>
          <target state="translated">파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>Default is <ph id="ph1">&lt;see cref="P:System.Text.Encoding.UTF8" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Text.Encoding.UTF8" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Boolean" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Boolean" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>Indicates whether to look for byte order marks at the beginning of the file.</source>
          <target state="translated">파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>Default is <ph id="ph1">&lt;see langword="True" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="True" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Boolean" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Boolean" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>Indicates whether to leave <bpt id="p1">&lt;c&gt;</bpt>stream<ept id="p1">&lt;/c&gt;</ept> open when the <ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> object is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> 개체가 닫힐 때 <bpt id="p1">&lt;c&gt;</bpt>stream<ept id="p1">&lt;/c&gt;</ept>을 열어둘지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>Default is <ph id="ph1">&lt;see langword="False" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="False" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>Creates a new <ph id="ph1">`TextFieldParser`</ph> object to parse the file or stream that is represented by the <ph id="ph2">`stream`</ph> parameter.</source>
          <target state="translated">새 <ph id="ph1">`TextFieldParser`</ph> 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 <ph id="ph2">`stream`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>If the <ph id="ph1">`detectEncoding`</ph> parameter is <ph id="ph2">`True`</ph>, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</source>
          <target state="translated">경우는 <ph id="ph1">`detectEncoding`</ph> 매개 변수는 <ph id="ph2">`True`</ph>를이 생성자의 파일 또는 스트림의 처음 세 바이트 확인 하 여 인코딩 검색을 시도 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</source>
          <target state="translated">자동으로 인식 u t F-8, little endian Unicode 및 big endian 유니코드 텍스트 파일 적절 한 바이트 순서 표시로 시작 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>Otherwise, the encoding specified by <ph id="ph1">`defaultEncoding`</ph> is used.</source>
          <target state="translated">그렇지 않으면 하 여 지정 된 인코딩을 <ph id="ph1">`defaultEncoding`</ph> 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</source>
          <target state="translated">문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자 해석할 수 없어 및 예외를 throw 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> or <ph id="ph2">&lt;paramref name="defaultEncoding" /&gt;</ph> is <ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="defaultEncoding" /&gt;</ph>가 <ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> cannot be read from.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph>을 읽을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close">
          <source>Closes the current <ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see langword="TextFieldParser" /&gt;</ph> 개체를 닫습니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close">
          <source>This example closes the <ph id="ph1">`TextFieldParser.FileReader`</ph>.</source>
          <target state="translated">이 예제에서는 닫습니다는 <ph id="ph1">`TextFieldParser.FileReader`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens">
          <source>Defines comment tokens.</source>
          <target state="translated">주석 토큰을 정의합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens">
          <source>A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</source>
          <target state="translated">주석 토큰은 줄 시작 부분에서 해당 줄이 주석이므로 파서에서 무시해야 함을 나타내는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens">
          <source>A string array that contains all of the comment tokens for the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /&gt;</ph> 개체의 모든 주석 토큰이 들어 있는 문자열 배열입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens">
          <source>This is an advanced member; it does not show in IntelliSense unless you click the <bpt id="p1">**</bpt>All<ept id="p1">**</ept> tab.</source>
          <target state="translated">고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 <bpt id="p1">**</bpt>모든<ept id="p1">**</ept> 탭 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens">
          <source>Zero-length comment tokens are ignored.</source>
          <target state="translated">길이가 0 인 주석 토큰은 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens">
          <source>This example specifies that for the <ph id="ph1">`TextFieldParser`</ph>, <ph id="ph2">`FileReader`</ph> lines beginning with a single quotation mark (') should be ignored.</source>
          <target state="translated">이 예제에 대 한 지정 된 <ph id="ph1">`TextFieldParser`</ph>, <ph id="ph2">`FileReader`</ph> 작은따옴표 (')로 시작 하는 줄을 무시 해야 합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens">
          <source>A comment token includes white space.</source>
          <target state="translated">주석 토큰에 공백을 포함하고 있는 경우</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters">
          <source>Defines the delimiters for a text file.</source>
          <target state="translated">텍스트 파일의 구분 기호를 정의합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters">
          <source>A string array that contains all of the field delimiters for the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /&gt;</ph> 개체의 모든 필드 구분 기호가 들어 있는 문자열 배열입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters">
          <source>This property is meaningful only if the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A&gt;</ph> property is set to <ph id="ph2">`FieldType.Delimited`</ph>.</source>
          <target state="translated">이 속성은 의미 있는 경우에만 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A&gt;</ph> 속성이 <ph id="ph2">`FieldType.Delimited`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters">
          <source>Defining the delimiters for a text file can also be accomplished with the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A&gt;</ph> method.</source>
          <target state="translated">텍스트 파일을 구현에 대 한 구분 기호를 정의 고 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters">
          <source>The following table lists an example of a task involving the <ph id="ph1">`Delimiters`</ph> property.</source>
          <target state="translated">다음 표에서 관련 된 작업의 예는 <ph id="ph1">`Delimiters`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters">
          <source>To</source>
          <target state="translated">대상</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters">
          <source>See</source>
          <target state="translated">보기</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters">
          <source>Read from a delimited text file</source>
          <target state="translated">구분 기호로 분리 된 텍스트 파일에서 읽기</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters">
          <source><bpt id="p1">[</bpt>How to: Read From Comma-Delimited Text Files<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 쉼표로 구분된 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)</ept></target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters">
          <source>This example specifies that the delimiter for the <ph id="ph1">`TextFieldParser`</ph> object, <ph id="ph2">`FileReader`</ph>, is a comma (,).</source>
          <target state="translated">지정 하는이 예제에 대 한 구분 기호는 <ph id="ph1">`TextFieldParser`</ph> 개체 <ph id="ph2">`FileReader`</ph>은 쉼표 (,)입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters">
          <source>A delimiter value is set to a newline character, an empty string, or <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>.</source>
          <target state="translated">구분기호는 줄 바꿈 문자, 빈 문자열 또는 <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>으로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
          <source>Releases resources used by the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /&gt;</ph> object.</source>
          <target state="translated">해당 <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /&gt;</ph> 개체에서 사용하는 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose">
          <source>Releases resources used by the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /&gt;</ph> object.</source>
          <target state="translated">해당 <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /&gt;</ph> 개체에서 사용하는 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)">
          <source>Boolean.</source>
          <target state="translated">부울입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="True" /&gt;</ph> releases both managed and unmanaged resources; <ph id="ph2">&lt;see langword="False" /&gt;</ph> releases only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="True" /&gt;</ph>는 관리되는 리소스와 관리되지 않는 리소스를 모두 해제합니다. <ph id="ph2">&lt;see langword="False" /&gt;</ph>는 관리되지 않는 리소스만 해제합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)">
          <source>Releases resources used by the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /&gt;</ph> object.</source>
          <target state="translated">해당 <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /&gt;</ph> 개체에서 사용하는 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData">
          <source>Returns <ph id="ph1">&lt;see langword="True" /&gt;</ph> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</source>
          <target state="translated">현재 커서 위치와 파일 끝 사이에 공백 또는 주석이 없는 줄이 있는 경우 <ph id="ph1">&lt;see langword="True" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData">
          <source><ph id="ph1">&lt;see langword="True" /&gt;</ph> if there is no more data to read; otherwise, <ph id="ph2">&lt;see langword="False" /&gt;</ph>.</source>
          <target state="translated">읽을 데이터가 더 이상 없으면 <ph id="ph1">&lt;see langword="True" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="False" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData">
          <source>This property can be used when reading from files to determine the end of the data being read.</source>
          <target state="translated">이 속성을 읽고 있는 데이터의 끝을 확인할 파일에서 읽을 때 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData">
          <source>The following table lists examples of tasks involving the <ph id="ph1">`EndOfData`</ph> property.</source>
          <target state="translated">다음 표에서 관련 된 작업의 예를 보여 줍니다.는 <ph id="ph1">`EndOfData`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData">
          <source>To</source>
          <target state="translated">대상</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData">
          <source>See</source>
          <target state="translated">보기</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData">
          <source>Read from a delimited file</source>
          <target state="translated">구분 기호로 분리 된 파일에서 읽기</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData">
          <source><bpt id="p1">[</bpt>How to: Read From Comma-Delimited Text Files<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 쉼표로 구분된 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)</ept></target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData">
          <source>Read from a fixed-width file</source>
          <target state="translated">고정 너비 파일에서 읽기</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData">
          <source><bpt id="p1">[</bpt>How to: Read From Fixed-width Text Files<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 고정 너비 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)</ept></target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData">
          <source>This example uses the <ph id="ph1">`EndofData`</ph> property to loop through all the fields in the file with the <ph id="ph2">`TextFieldReader`</ph>, <ph id="ph3">`FileReader`</ph>.</source>
          <target state="translated">사용 하 여이 예제는 <ph id="ph1">`EndofData`</ph> 사용 하 여 파일의 모든 필드를 반복 하는 속성은 <ph id="ph2">`TextFieldReader`</ph>, <ph id="ph3">`FileReader`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine">
          <source>Returns the line that caused the most recent <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /&gt;</ph> exception.</source>
          <target state="translated">최신 <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /&gt;</ph> 예외를 발생시킨 줄을 반환합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine">
          <source>The line that caused the most recent <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /&gt;</ph> exception.</source>
          <target state="translated">최신 <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /&gt;</ph> 예외를 발생시킨 줄입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine">
          <source>If no <ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt;</ph> exceptions have been thrown, an empty string is returned.</source>
          <target state="translated">되지 않은 경우 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt;</ph> 예외가 throw 되지 빈 문자열이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine">
          <source>The <ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A&gt;</ph> property can be used to display the number of the line that caused the exception.</source>
          <target state="translated"><ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A&gt;</ph> 예외를 발생 하는 줄의 번호를 표시 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine">
          <source>The following table lists examples of tasks involving the <ph id="ph1">`ErrorLine`</ph> property.</source>
          <target state="translated">다음 표에서 관련 된 작업의 예를 보여 줍니다.는 <ph id="ph1">`ErrorLine`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine">
          <source>To</source>
          <target state="translated">대상</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine">
          <source>See</source>
          <target state="translated">보기</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine">
          <source>Read from a delimited file</source>
          <target state="translated">구분 기호로 분리 된 파일에서 읽기</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine">
          <source><bpt id="p1">[</bpt>How to: Read From Comma-Delimited Text Files<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 쉼표로 구분된 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)</ept></target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine">
          <source>Read from a fixed-width file</source>
          <target state="translated">고정 너비 파일에서 읽기</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine">
          <source><bpt id="p1">[</bpt>How to: Read From Fixed-width Text Files<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 고정 너비 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)</ept></target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine">
          <source>This example uses the <ph id="ph1">`ErrorLine`</ph> property to display the line causing the current <ph id="ph2">&lt;xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt;</ph> exception.</source>
          <target state="translated">사용 하 여이 예제는 <ph id="ph1">`ErrorLine`</ph> 현재 원인이 된 줄을 표시 하려면 속성 <ph id="ph2">&lt;xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
          <source>Returns the number of the line that caused the most recent <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /&gt;</ph> exception.</source>
          <target state="translated">최신 <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /&gt;</ph> 예외를 발생시킨 줄 번호를 반환합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
          <source>The number of the line that caused the most recent <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /&gt;</ph> exception.</source>
          <target state="translated">최신 <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /&gt;</ph> 예외를 발생시킨 줄의 번호입니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
          <source>If no <ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt;</ph> exceptions have been thrown, -1 is returned.</source>
          <target state="translated">되지 않은 경우 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt;</ph> 예외가 throw 되었습니다,-1이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
          <source>The <ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A&gt;</ph> property can be used to display the number of the line that caused the exception.</source>
          <target state="translated"><ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A&gt;</ph> 예외를 발생 하는 줄의 번호를 표시 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
          <source>Blank lines and comments are not ignored when determining the line number.</source>
          <target state="translated">줄 번호를 결정할 때에 빈 줄과 주석을 무시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
          <source>The following table lists examples of tasks involving the <ph id="ph1">`ErrorLineNumber`</ph> property.</source>
          <target state="translated">다음 표에서 관련 된 작업의 예를 보여 줍니다.는 <ph id="ph1">`ErrorLineNumber`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
          <source>To</source>
          <target state="translated">대상</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
          <source>See</source>
          <target state="translated">보기</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
          <source>Read from a delimited file</source>
          <target state="translated">구분 기호로 분리 된 파일에서 읽기</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
          <source><bpt id="p1">[</bpt>How to: Read From Comma-Delimited Text Files<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 쉼표로 구분된 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)</ept></target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
          <source>Read from a fixed-width file</source>
          <target state="translated">고정 너비 파일에서 읽기</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
          <source><bpt id="p1">[</bpt>How to: Read From Fixed-width Text Files<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 고정 너비 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)</ept></target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
          <source>This example uses the <ph id="ph1">`ErrorLineNumber`</ph> property to display the location of the line causing the current <ph id="ph2">&lt;xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt;</ph> exception.</source>
          <target state="translated">사용 하 여이 예제는 <ph id="ph1">`ErrorLineNumber`</ph> 현재 원인이 된 줄의 위치를 표시 하는 속성 <ph id="ph2">&lt;xref:Microsoft.VisualBasic.FileIO.MalformedLineException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths">
          <source>Denotes the width of each column in the text file being parsed.</source>
          <target state="translated">구문 분석되는 텍스트 파일에서 각 열의 너비를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths">
          <source>An integer array that contains the width of each column in the text file that is being parsed.</source>
          <target state="translated">구문 분석되는 텍스트 파일에 있는 각 열의 너비가 포함된 정수 배열입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths">
          <source>This property is meaningful only if the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A&gt;</ph> property is set to <ph id="ph2">`FieldType.FixedWidth`</ph>.</source>
          <target state="translated">이 속성은 의미 있는 경우에만 <ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A&gt;</ph> 속성이 <ph id="ph2">`FieldType.FixedWidth`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths">
          <source>If the last entry in the array is less than or equal to zero, the field is assumed to be of variable width.</source>
          <target state="translated">배열의 마지막 항목 보다 작거나 0이 하 이면 필드 가변 폭으로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths">
          <source>The <ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A&gt;</ph> method can also be used to set field widths.</source>
          <target state="translated"><ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A&gt;</ph> 메서드 필드의 너비를 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths">
          <source>The following table lists examples of tasks involving the <ph id="ph1">`FieldWidths`</ph> property.</source>
          <target state="translated">다음 표에서 관련 된 작업의 예를 보여 줍니다.는 <ph id="ph1">`FieldWidths`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths">
          <source>To</source>
          <target state="translated">대상</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths">
          <source>See</source>
          <target state="translated">보기</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths">
          <source>Read from a fixed-width text file</source>
          <target state="translated">고정 너비 텍스트 파일에서 읽기</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths">
          <source><bpt id="p1">[</bpt>How to: Read From Fixed-width Text Files<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 고정 너비 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)</ept></target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths">
          <source>This example reads the file <ph id="ph1">`ParserText.txt`</ph>, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width</source>
          <target state="translated">이 예제에서는 파일을 읽어 <ph id="ph1">`ParserText.txt`</ph>, 너비를 지정 하는 첫 번째 열은 너비가 5 자, 두 번째는 10, 세 번째는 11 및 가변 너비의 네 번째 작업은</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths">
          <source>A width value in any location other than the last entry of the array is less than or equal to zero.</source>
          <target state="translated">배열의 마지막 항목을 제외한 위치의 너비 값이 0 이하인 경우</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize">
          <source>Allows the <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /&gt;</ph> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</source>
          <target state="translated">가비지 수집기에서 회수하기 전에 <ph id="ph1">&lt;see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /&gt;</ph> 개체가 리소스를 해제하고 다른 정리 작업을 수행할 수 있게 합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes">
          <source>Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</source>
          <target state="translated">구분된 파일을 구문 분석할 때 필드가 따옴표로 묶여 있는지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes">
          <source><ph id="ph1">&lt;see langword="True" /&gt;</ph> if fields are enclosed in quotation marks; otherwise, <ph id="ph2">&lt;see langword="False" /&gt;</ph>.</source>
          <target state="translated">필드가 따옴표로 묶여 있으면 <ph id="ph1">&lt;see langword="True" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="False" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes">
          <source>This is an advanced member; it does not show in IntelliSense unless you click the <bpt id="p1">**</bpt>All<ept id="p1">**</ept> tab.</source>
          <target state="translated">고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 <bpt id="p1">**</bpt>모든<ept id="p1">**</ept> 탭 합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes">
          <source>If the property is <ph id="ph1">`True`</ph>, the parser assumes that fields are enclosed in quotation marks (" ") and may contain line endings.</source>
          <target state="translated">속성이 <ph id="ph1">`True`</ph>, 파서가 가정 필드가 따옴표로 묶여 있는지 ("") 및 줄 끝을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes">
          <source>If a field is enclosed in quotation marks, for example, <ph id="ph1">`abc, "field2a,field2b", field3`</ph> and this property is <ph id="ph2">`True`</ph>, then all text enclosed in quotation marks will be returned as is; this example would return <ph id="ph3">`abc|field2a,field2b|field3`</ph>.</source>
          <target state="translated">예를 들어 필드 따옴표에 포함 되어 있으면 <ph id="ph1">`abc, "field2a,field2b", field3`</ph> 하며이 속성은 <ph id="ph2">`True`</ph>, 다음 따옴표로 묶인 모든 텍스트는 있는 그대로 반환 됩니다;이 예에서는 되돌아가 <ph id="ph3">`abc|field2a,field2b|field3`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes">
          <source>Setting this property to <ph id="ph1">`False`</ph> would make this example return <ph id="ph2">`abc|"field2a|field2b"|field3`</ph>.</source>
          <target state="translated">이 속성을 설정 <ph id="ph1">`False`</ph> 이 예제에서는 반환 하 게 만드는 <ph id="ph2">`abc|"field2a|field2b"|field3`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes">
          <source>This example sets the <ph id="ph1">`HasFieldsEnclosedInQuotes`</ph> property to <ph id="ph2">`True`</ph> for <ph id="ph3">`myReader`</ph>.</source>
          <target state="translated">설정 하는이 예제는 <ph id="ph1">`HasFieldsEnclosedInQuotes`</ph> 속성을 <ph id="ph2">`True`</ph> 에 대 한 <ph id="ph3">`myReader`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber">
          <source>Returns the current line number, or returns -1 if no more characters are available in the stream.</source>
          <target state="translated">현재 줄 번호를 반환하거나 스트림에서 더 이상 문자를 사용할 수 없으면 -1을 반환합니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber">
          <source>The current line number.</source>
          <target state="translated">현재 줄 번호입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber">
          <source>This is an advanced member; it does not show in IntelliSense unless you click the <bpt id="p1">**</bpt>All<ept id="p1">**</ept> tab.</source>
          <target state="translated">고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 <bpt id="p1">**</bpt>모든<ept id="p1">**</ept> 탭 합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber">
          <source>Blank lines and comments are not ignored when determining the line number.</source>
          <target state="translated">줄 번호를 결정할 때에 빈 줄과 주석을 무시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber">
          <source>This example searches for the name "Jones" in the text file and reports what line(s) it occurs on.</source>
          <target state="translated">이 예제에서는 텍스트 파일에 이름 "jones 이면 특정"에 대 한 검색을 보고 어떤 줄에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source><ph id="ph1">&lt;see langword="Int32" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Int32" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source>Number of characters to read.</source>
          <target state="translated">읽을 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source>Required.</source>
          <target state="translated">필수.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source>Reads the specified number of characters without advancing the cursor.</source>
          <target state="translated">커서를 앞으로 이동하지 않고 지정한 문자 수를 읽습니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source>A string that contains the specified number of characters read.</source>
          <target state="translated">지정된 수의 읽을 문자가 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source>The <ph id="ph1">`numberOfChars`</ph> value must be less than the total number of characters in the line.</source>
          <target state="translated"><ph id="ph1">`numberOfChars`</ph> 값 전체 줄의 문자 수보다 작아야 합니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source>If it is not, the string returned by <ph id="ph1">`PeekChars`</ph> will be truncated to the length of the line.</source>
          <target state="translated">없는 경우, 반환 하는 문자열 <ph id="ph1">`PeekChars`</ph> 줄 길이에 잘립니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source>Blank lines are ignored.</source>
          <target state="translated">빈 줄은 무시됩니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source>End-of-line characters are not returned.</source>
          <target state="translated">줄 끝 문자 반환 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source>The <ph id="ph1">`PeekChars`</ph> method performs no parsing; an end-of- line character within a delimited field is interpreted as the actual end of the line.</source>
          <target state="translated"><ph id="ph1">`PeekChars`</ph> 메서드 수행 구문 분석 하지 않으면 구분된 된 필드에서 줄 끝 문자는 실제 줄 끝으로 해석 됩니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source>The following table lists examples of tasks involving the <ph id="ph1">`PeekChars`</ph> method.</source>
          <target state="translated">다음 표에서 관련 된 작업의 예를 보여 줍니다.는 <ph id="ph1">`PeekChars`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source>To</source>
          <target state="translated">대상</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source>See</source>
          <target state="translated">보기</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source>Determine the format of a field before parsing it</source>
          <target state="translated">필드의 형식을 구문 분석 하기 전에 확인</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source><bpt id="p1">[</bpt>How to: Read From Text Files with Multiple Formats<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 여러 형식의 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)</ept></target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source>This example uses <ph id="ph1">`PeekChars`</ph> to find the end of the data and stop parsing the file at that point.</source>
          <target state="translated">이 예에서는 <ph id="ph1">`PeekChars`</ph> 데이터의 끝을 찾아 해당 시점에 파일을 구문 분석을 중지 합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="numberOfChars" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="numberOfChars" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</source>
          <target state="translated">현재 줄의 모든 필드를 읽고 문자열 배열로서 반환한 다음 데이터가 포함된 다음 줄로 커서를 이동합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>An array of strings that contains field values for the current line.</source>
          <target state="translated">현재 줄의 필드 값이 포함된 문자열 배열입니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>In order to allow users to parse text files in multiple formats, the <ph id="ph1">`ReadFields`</ph> method examines the values of <ph id="ph2">`TextFieldType`</ph>, <ph id="ph3">`Delimiters`</ph>, and <ph id="ph4">`FieldWidths`</ph>, if they are specified, each time it is called.</source>
          <target state="translated">사용자가 여러 형식의 텍스트 파일을 구문 분석할 수 있도록 하기 위해는 <ph id="ph1">`ReadFields`</ph> 의 값을 검사 하는 메서드 <ph id="ph2">`TextFieldType`</ph>, <ph id="ph3">`Delimiters`</ph>, 및 <ph id="ph4">`FieldWidths`</ph>를 지정 하는 경우 호출 될 때마다 합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>Users need to correctly configure the <ph id="ph1">`TextFieldType`</ph> and <ph id="ph2">`FieldWidths`</ph> or <ph id="ph3">`Delimiters`</ph> properties, as appropriate.</source>
          <target state="translated">사용자가 올바르게 구성 해야는 <ph id="ph1">`TextFieldType`</ph> 및 <ph id="ph2">`FieldWidths`</ph> 또는 <ph id="ph3">`Delimiters`</ph> 속성을 적절 하 게 합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>If <ph id="ph1">`TextFieldType`</ph> is set to <ph id="ph2">`Delimited`</ph>, and <ph id="ph3">`Delimiters`</ph> is not set, or if <ph id="ph4">`TextFieldType`</ph> is set to <ph id="ph5">`FixedWidth`</ph> and <ph id="ph6">`FieldWidths`</ph>, an exception is thrown.</source>
          <target state="translated">경우 <ph id="ph1">`TextFieldType`</ph> 로 설정 되어 <ph id="ph2">`Delimited`</ph>, 및 <ph id="ph3">`Delimiters`</ph> 설정 되지 않은 경우 <ph id="ph4">`TextFieldType`</ph> 로 설정 된 <ph id="ph5">`FixedWidth`</ph> 및 <ph id="ph6">`FieldWidths`</ph>, 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>If <ph id="ph1">`ReadFields`</ph> encounters blank lines, they are skipped and the next non-blank line is returned.</source>
          <target state="translated">경우 <ph id="ph1">`ReadFields`</ph> 을 건너뛰고 다음 줄이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>If the <ph id="ph1">`ReadFields`</ph> method cannot parse the current line, it raises an exception and does not move to the next line.</source>
          <target state="translated">경우는 <ph id="ph1">`ReadFields`</ph> 메서드는 현재 줄을 구문 분석할 수 없습니다, 예외가 발생 하 고 다음 줄으로 이동 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>This enables your application to attempt to parse the line again.</source>
          <target state="translated">이 통해 응용 프로그램을 다시 줄을 구문 분석을 시도 합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>The following table lists examples of tasks involving the <ph id="ph1">`ReadFields`</ph> method.</source>
          <target state="translated">다음 표에서 관련 된 작업의 예를 보여 줍니다.는 <ph id="ph1">`ReadFields`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>To</source>
          <target state="translated">대상</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>See</source>
          <target state="translated">보기</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>Read from a delimited file</source>
          <target state="translated">구분 기호로 분리 된 파일에서 읽기</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source><bpt id="p1">[</bpt>How to: Read From Comma-Delimited Text Files<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 쉼표로 구분된 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)</ept></target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>Read from a fixed-width file</source>
          <target state="translated">고정 너비 파일에서 읽기</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source><bpt id="p1">[</bpt>How to: Read From Fixed-width Text Files<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 고정 너비 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)</ept></target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>This example uses the <ph id="ph1">`ReadFields`</ph> method to read from the comma-delimited file <ph id="ph2">`ParserText.txt`</ph>.</source>
          <target state="translated">사용 하 여이 예제는 <ph id="ph1">`ReadFields`</ph> 쉼표로 구분 된 파일을 읽는 메서드가 <ph id="ph2">`ParserText.txt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>The example writes the fields to <ph id="ph1">`Testfile.txt`</ph>.</source>
          <target state="translated">이 예제에서는 기록 필드를 <ph id="ph1">`Testfile.txt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>A field cannot be parsed by using the specified format.</source>
          <target state="translated">지정된 형식을 사용하여 필드를 구문 분석할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine">
          <source>Returns the current line as a string and advances the cursor to the next line.</source>
          <target state="translated">현재 줄을 문자열로 반환하고 커서를 다음 줄로 이동합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine">
          <source>The current line from the file or stream.</source>
          <target state="translated">파일 또는 스트림의 현재 줄입니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine">
          <source>The <ph id="ph1">`ReadLine`</ph> method performs no parsing; an end-of-line character within a delimited field is interpreted as the actual end of the line.</source>
          <target state="translated"><ph id="ph1">`ReadLine`</ph> 메서드 수행 구문 분석 하지 않으면 구분된 된 필드에서 줄 끝 문자는 실제 줄 끝으로 해석 됩니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine">
          <source><ph id="ph1">`Nothing`</ph> is returned if the end of the file is reached.</source>
          <target state="translated"><ph id="ph1">`Nothing`</ph> 파일의 끝에 도달 하는 경우 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine">
          <source>This example reads through the file <ph id="ph1">`ParserText.txt`</ph> and writes it to <ph id="ph2">`Testfile.txt`</ph>.</source>
          <target state="translated">이 예제에서는 파일을 읽는다는 <ph id="ph1">`ParserText.txt`</ph> 에 씁니다 <ph id="ph2">`Testfile.txt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine">
          <source>If <ph id="ph1">`Testfile.txt`</ph> does not exist, it is created by the <ph id="ph2">`WriteAllText`</ph> method.</source>
          <target state="translated">경우 <ph id="ph1">`Testfile.txt`</ph> 존재 하지 않는 의해 만들어집니다는 <ph id="ph2">`WriteAllText`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine">
          <source>This example writes the fields as a single string; to have each line display on its own line in the destination file, a <ph id="ph1">`VbCrLf`</ph> character should be appended at the end of each line.</source>
          <target state="translated">이 예에서는 필드를 단일 문자열로 작성 각 줄을 대상 파일의 줄에 표시 하는 <ph id="ph1">`VbCrLf`</ph> 각 줄의 끝에 문자를 추가 해야 합니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd">
          <source>Reads the remainder of the text file and returns it as a string.</source>
          <target state="translated">텍스트 파일의 나머지를 읽고 문자열로 반환합니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd">
          <source>The remaining text from the file or stream.</source>
          <target state="translated">파일 또는 스트림의 나머지 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd">
          <source>This is an advanced member; it does not show in IntelliSense unless you click the <bpt id="p1">**</bpt>All<ept id="p1">**</ept> tab.</source>
          <target state="translated">고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 <bpt id="p1">**</bpt>모든<ept id="p1">**</ept> 탭 합니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd">
          <source>If there is nothing more to read because the end of the file has been reached, <ph id="ph1">`Nothing`</ph> is returned.</source>
          <target state="translated">더 이상 읽을 파일의 끝에 도달 했으므로 내용이 없는 경우 <ph id="ph1">`Nothing`</ph> 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd">
          <source>The <ph id="ph1">`ReadToEnd`</ph> method does not ignore blank lines and comments.</source>
          <target state="translated"><ph id="ph1">`ReadToEnd`</ph> 빈 줄과 주석을 메서드를 무시 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd">
          <source>This example uses the <ph id="ph1">`ReadToEnd`</ph> method to read the entire file <ph id="ph2">`ParserText.txt`</ph> and write it to the file <ph id="ph3">`Testfile.txt`</ph>.</source>
          <target state="translated">사용 하 여이 예제는 <ph id="ph1">`ReadToEnd`</ph> 전체 파일을 읽는 메서드가 <ph id="ph2">`ParserText.txt`</ph> 파일에 쓸 및 <ph id="ph3">`Testfile.txt`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd">
          <source>If <ph id="ph1">`Testfile.txt`</ph> does not exist, it is created by the <ph id="ph2">`WriteAllText`</ph> method.</source>
          <target state="translated">경우 <ph id="ph1">`Testfile.txt`</ph> 존재 하지 않는 의해 만들어집니다는 <ph id="ph2">`WriteAllText`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])">
          <source>Array of type <ph id="ph1">&lt;see langword="String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])">
          <source>Sets the delimiters for the reader to the specified values, and sets the field type to <ph id="ph1">&lt;see langword="Delimited" /&gt;</ph>.</source>
          <target state="translated">판독기의 구분 기호를 지정된 값으로 설정하고 필드 형식을 <ph id="ph1">&lt;see langword="Delimited" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])">
          <source>The existing contents of the <ph id="ph1">`Delimiters`</ph> property are cleared when this method is set.</source>
          <target state="translated">기존 내용을 <ph id="ph1">`Delimiters`</ph> 속성은이 메서드에 설정 된 경우 해제 됩니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])">
          <source>This method provides a way to set delimiters without creating an array.</source>
          <target state="translated">이 메서드는 배열을 만들지 않고 구분 기호를 설정 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])">
          <source>The following table lists an example of a task involving the <ph id="ph1">`SetDelimiters`</ph> method.</source>
          <target state="translated">다음 표에서 관련 된 작업의 예는 <ph id="ph1">`SetDelimiters`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])">
          <source>To</source>
          <target state="translated">후</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])">
          <source>See</source>
          <target state="translated">보기</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])">
          <source>Parse a text file</source>
          <target state="translated">텍스트 파일 구문 분석</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])">
          <source><bpt id="p1">[</bpt>Parsing Text Files with the TextFieldParser Object<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)</ept></target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])">
          <source>This example opens a text field parser and defines the delimiter as <ph id="ph1">`vbTab`</ph>.</source>
          <target state="translated">이 예제에서는 텍스트 필드 파서를 열고로 구분 기호를 정의 <ph id="ph1">`vbTab`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])">
          <source>Replace the path <ph id="ph1">`C:\logs\test.log`</ph> with the path and name of the file you wish to parse.</source>
          <target state="translated">대체 경로 <ph id="ph1">`C:\logs\test.log`</ph> 를 구문 분석할 파일의 이름 및 경로입니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])">
          <source>A delimiter is zero-length.</source>
          <target state="translated">구분 기호의 길이가 0인 경우</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
          <source>Array of <ph id="ph1">&lt;see langword="Integer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Integer" /&gt;</ph>의 배열입니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
          <source>Sets the delimiters for the reader to the specified values.</source>
          <target state="translated">지정한 값에 대한 판독기의 구분 기호를 설정합니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
          <source>The existing contents of the <ph id="ph1">`Delimiters`</ph> property are cleared when this is set.</source>
          <target state="translated">기존 내용을 <ph id="ph1">`Delimiters`</ph> 설정 하면 속성이 지워집니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
          <source>This method provides a way to set delimiters without creating an array.</source>
          <target state="translated">이 메서드는 배열을 만들지 않고 구분 기호를 설정 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
          <source>The following table lists example of tasks involving the <ph id="ph1">`SetFieldWidths`</ph> method.</source>
          <target state="translated">다음 표에서 관련 된 작업의 예제는 <ph id="ph1">`SetFieldWidths`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
          <source>To</source>
          <target state="translated">대상</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
          <source>See</source>
          <target state="translated">보기</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
          <source>Parse a text file.</source>
          <target state="translated">텍스트 파일 구문 분석 합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
          <source><bpt id="p1">[</bpt>Parsing Text Files with the TextFieldParser Object<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)</ept></target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
          <source>This example opens a text-field parser and defines the field width as <ph id="ph1">`5`</ph>.</source>
          <target state="translated">로 필드 너비를 정의 하는이 예제 텍스트 필드 파서를 열고 <ph id="ph1">`5`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
          <source>Replace the path <ph id="ph1">`C:\logs\test.log`</ph> with the path and name of the file you wish to parse.</source>
          <target state="translated">대체 경로 <ph id="ph1">`C:\logs\test.log`</ph> 를 구문 분석할 파일의 이름 및 경로입니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
          <source>The following example opens a text-field parser and defines the field widths as <ph id="ph1">`5`</ph>, <ph id="ph2">`10`</ph>, and variable.</source>
          <target state="translated">다음 예제에서는 텍스트 필드 파서를 열고 필드 폭으로 정의 <ph id="ph1">`5`</ph>, <ph id="ph2">`10`</ph>, 및 변수입니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
          <source>Replace the path <ph id="ph1">`C:\logs\test.log`</ph> with the path and name of the file you wish to parse.</source>
          <target state="translated">대체 경로 <ph id="ph1">`C:\logs\test.log`</ph> 를 구문 분석할 파일의 이름 및 경로입니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
          <source>Indicates whether the file to be parsed is delimited or fixed-width.</source>
          <target state="translated">구문 분석할 파일이 구분된 파일인지 또는 고정 너비 파일인지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
          <source>A <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /&gt;</ph> value that indicates whether the file to be parsed is delimited or fixed-width.</source>
          <target state="translated">구문 분석할 파일이 구분된 파일인지 또는 고정 너비 파일인지를 나타내는 <ph id="ph1">&lt;see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
          <source>The default value of this property is delimited.</source>
          <target state="translated">이 속성의 기본값을 구분 합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
          <source>The following table lists examples of tasks involving the <ph id="ph1">`TextFieldType`</ph> property.</source>
          <target state="translated">다음 표에서 관련 된 작업의 예를 보여 줍니다.는 <ph id="ph1">`TextFieldType`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
          <source>To</source>
          <target state="translated">대상</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
          <source>See</source>
          <target state="translated">보기</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
          <source>Read from a delimited text file</source>
          <target state="translated">구분 기호로 분리 된 텍스트 파일에서 읽기</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
          <source><bpt id="p1">[</bpt>How to: Read From Comma-Delimited Text Files<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 쉼표로 구분된 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)</ept></target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
          <source>Read from a fixed-width text file</source>
          <target state="translated">고정 너비 텍스트 파일에서 읽기</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
          <source><bpt id="p1">[</bpt>How to: Read From Fixed-width Text Files<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 고정 너비 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)</ept></target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
          <source>Read from a text file with multiple formats</source>
          <target state="translated">여러 형식의 텍스트 파일에서 읽기</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
          <source><bpt id="p1">[</bpt>How to: Read From Text Files with Multiple Formats<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 여러 형식의 텍스트 파일에서 읽기<ept id="p1">](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)</ept></target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
          <source>This example creates a <ph id="ph1">`TextFieldParser`</ph>, <ph id="ph2">`FileReader`</ph>, and specifies that it is delimited.</source>
          <target state="translated">이 예제에서는 만듭니다는 <ph id="ph1">`TextFieldParser`</ph>, <ph id="ph2">`FileReader`</ph>, 구분 된을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
          <source>This example creates a <ph id="ph1">`TextFieldParser`</ph>, <ph id="ph2">`FileReader`</ph>, and specifies that it is fixed-width.</source>
          <target state="translated">이 예제에서는 만듭니다는 <ph id="ph1">`TextFieldParser`</ph>, <ph id="ph2">`FileReader`</ph>, 고정 폭 임을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace">
          <source>Indicates whether leading and trailing white space should be trimmed from field values.</source>
          <target state="translated">필드 값에서 선행 및 후행 공백이 삭제되어야 하는지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace">
          <source><ph id="ph1">&lt;see langword="True" /&gt;</ph> if leading and trailing white space should be trimmed from field values; otherwise, <ph id="ph2">&lt;see langword="False" /&gt;</ph>.</source>
          <target state="translated">필드 값에서 선행 및 후행 공백을 삭제해야 하는 경우 <ph id="ph1">&lt;see langword="True" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="False" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace">
          <source>The default value for this property is <ph id="ph1">`True`</ph>.</source>
          <target state="translated">이 속성의 기본값은 <ph id="ph1">`True`</ph>입니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace">
          <source>This example creates a <ph id="ph1">`TextFieldParser`</ph>, <ph id="ph2">`FileReader`</ph>, and sets the <ph id="ph3">`TrimWhiteSpace`</ph> property to <ph id="ph4">`True`</ph>.</source>
          <target state="translated">이 예제에서는 만듭니다는 <ph id="ph1">`TextFieldParser`</ph>, <ph id="ph2">`FileReader`</ph>, 설정 및는 <ph id="ph3">`TrimWhiteSpace`</ph> 속성을 <ph id="ph4">`True`</ph>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>