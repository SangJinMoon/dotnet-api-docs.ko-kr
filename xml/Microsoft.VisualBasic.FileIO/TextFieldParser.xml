<Type Name="TextFieldParser" FullName="Microsoft.VisualBasic.FileIO.TextFieldParser">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="34fefd8e673d5edb9c2fb81e0c3d6c92c4fe6c0b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30351107" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextFieldParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi TextFieldParser extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFieldParser&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFieldParser : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>구조화된 텍스트 파일을 구문 분석하기 위한 메서드와 속성을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `TextFieldParser` 구조화 된 텍스트 파일 구문 분석에 대 한 속성 및 메서드를 제공 하는 개체입니다. 텍스트 파일을 구문 분석의 `TextFieldParser` 텍스트 파일을 반복 하는 것과 비슷합니다 동안는 `ReadFields` 텍스트의 필드를 추출 하는 메서드는 문자열을 분할 합니다.  
  
 `TextFieldParser` 두 유형의 파일을 구문 분석할 수 있습니다: 구분 또는 고정 너비입니다. 일부 속성와 같은 `Delimiters` 및 `HasFieldsEnclosedInQuotes` 는 의미가 동안 구분 기호로 분리 된 파일을 사용 하는 경우는 `FieldWidths` 속성은 고정 너비 파일을 사용 하는 경우에 의미가 있습니다.  
  
 다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `Microsoft.VisualBasic.FileIO.TextFieldParser` 개체입니다.  
  
|대상|보기|  
|--------|---------|  
|구분 기호로 분리 된 텍스트 파일에서 읽기|[방법: 쉼표로 구분된 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|고정 너비 텍스트 파일에서 읽기|[방법: 고정 너비 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|여러 형식의 텍스트 파일에서 읽기|[방법: 여러 형식의 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 이 예제에서는 탭으로 구분 된 텍스트 파일 구문 분석 `Bigfile`합니다.  
  
 [!code-vb[VbVbalrTextFieldParser#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />. 구문 분석할 스트림입니다.</param>
        <summary>
          <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 새 `TextFieldParser` 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 `stream` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" />가 <see langword="Nothing" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" />을 읽을 수 없습니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::TextReader ^ reader);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.IO.TextReader" />. 구분 분석할 <see cref="T:System.IO.TextReader" /> 스트림입니다.</param>
        <summary>
          <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 새 `TextFieldParser` 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 `reader` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" />가 <see langword="Nothing" />인 경우</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <see langword="String" />. 구문 분석할 파일의 전체 경로입니다.</param>
        <summary>
          <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 새 `TextFieldParser` 로 지정 된 파일을 구문 분석 하는 개체는 `path` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />이 빈 문자열인 경우</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />. 구문 분석할 스트림입니다.</param>
        <param name="defaultEncoding">
          <see cref="T:System.Text.Encoding" />. 파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다. 기본값은 <see cref="P:System.Text.Encoding.UTF8" />입니다.</param>
        <summary>
          <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 새 `TextFieldParser` 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 `stream` 매개 변수입니다.  
  
> [!CAUTION]
>  문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자 해석할 수 없어 및 예외를 throw 될 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 또는 <paramref name="defaultEncoding" />가 <see langword="Nothing" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" />을 읽을 수 없습니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">
          <see langword="String" />. 구문 분석할 파일의 전체 경로입니다.</param>
        <param name="defaultEncoding">
          <see cref="T:System.Text.Encoding" />. 파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다. 기본값은 <see cref="P:System.Text.Encoding.UTF8" />입니다.</param>
        <summary>
          <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 새 `TextFieldParser` 로 지정 된 파일을 구문 분석 하는 개체는 `path` 매개 변수입니다.  
  
> [!CAUTION]
>  문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자 해석할 수 없어 및 예외를 throw 될 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 빈 문자열이거나 <paramref name="defaultEncoding" />이 <see langword="Nothing" />입니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />. 구문 분석할 스트림입니다.</param>
        <param name="defaultEncoding">
          <see cref="T:System.Text.Encoding" />. 파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다. 기본값은 <see cref="P:System.Text.Encoding.UTF8" />입니다.</param>
        <param name="detectEncoding">
          <see langword="Boolean" />. 파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다. 기본값은 <see langword="True" />입니다.</param>
        <summary>
          <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 새 `TextFieldParser` 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 `stream` 매개 변수입니다.  
  
 경우는 `detectEncoding` 매개 변수는 `True`를이 생성자의 파일 또는 스트림의 처음 세 바이트 확인 하 여 인코딩 검색을 시도 합니다. 자동으로 인식 u t F-8, little endian Unicode 및 big endian 유니코드 텍스트 파일 적절 한 바이트 순서 표시로 시작 합니다. 그렇지 않으면 하 여 지정 된 인코딩을 `defaultEncoding` 사용 됩니다.  
  
> [!CAUTION]
>  문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자 해석할 수 없어 및 예외를 throw 될 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 또는 <paramref name="defaultEncoding" />가 <see langword="Nothing" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" />을 읽을 수 없습니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding, detectEncoding As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
          <see langword="String" />. 구문 분석할 파일의 전체 경로입니다.</param>
        <param name="defaultEncoding">
          <see cref="T:System.Text.Encoding" />. 파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다. 기본값은 <see cref="P:System.Text.Encoding.UTF8" />입니다.</param>
        <param name="detectEncoding">
          <see langword="Boolean" />. 파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다. 기본값은 <see langword="True" />입니다.</param>
        <summary>
          <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 새 `TextFieldParser` 로 지정 된 파일을 구문 분석 하는 개체는 `path` 매개 변수입니다.  
  
 경우는 `detectEncoding` 매개 변수는 `True`를이 생성자의 파일 또는 스트림의 처음 세 바이트 확인 하 여 인코딩 검색을 시도 합니다. 자동으로 인식 u t F-8, little endian Unicode 및 big endian 유니코드 텍스트 파일 적절 한 바이트 순서 표시로 시작 합니다. 그렇지 않으면 하 여 지정 된 인코딩을 `defaultEncoding` 사용 됩니다.  
  
> [!CAUTION]
>  문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자 해석할 수 없어 및 예외를 throw 될 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 빈 문자열이거나 <paramref name="defaultEncoding" />이 <see langword="Nothing" />입니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />. 구문 분석할 스트림입니다.</param>
        <param name="defaultEncoding">
          <see cref="T:System.Text.Encoding" />. 파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다. 기본값은 <see cref="P:System.Text.Encoding.UTF8" />입니다.</param>
        <param name="detectEncoding">
          <see langword="Boolean" />. 파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다. 기본값은 <see langword="True" />입니다.</param>
        <param name="leaveOpen">
          <see langword="Boolean" />. <see langword="TextFieldParser" /> 개체가 닫힐 때 <c>stream</c>을 열어둘지를 나타냅니다. 기본값은 <see langword="False" />입니다.</param>
        <summary>
          <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 새 `TextFieldParser` 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 `stream` 매개 변수입니다.  
  
 경우는 `detectEncoding` 매개 변수는 `True`를이 생성자의 파일 또는 스트림의 처음 세 바이트 확인 하 여 인코딩 검색을 시도 합니다. 자동으로 인식 u t F-8, little endian Unicode 및 big endian 유니코드 텍스트 파일 적절 한 바이트 순서 표시로 시작 합니다. 그렇지 않으면 하 여 지정 된 인코딩을 `defaultEncoding` 사용 됩니다.  
  
> [!CAUTION]
>  문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자 해석할 수 없어 및 예외를 throw 될 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 또는 <paramref name="defaultEncoding" />가 <see langword="Nothing" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" />을 읽을 수 없습니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see langword="TextFieldParser" /> 개체를 닫습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 이 예제에서는 닫습니다는 `TextFieldParser.FileReader`합니다.  
  
 [!code-vb[VbVbalrTextFieldParser#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommentTokens">
      <MemberSignature Language="C#" Value="public string[] CommentTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommentTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentTokens As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ CommentTokens { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>주석 토큰을 정의합니다. 주석 토큰은 줄 시작 부분에서 해당 줄이 주석이므로 파서에서 무시해야 함을 나타내는 문자열입니다.</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체의 모든 주석 토큰이 들어 있는 문자열 배열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 **모든** 탭 합니다.  
  
 길이가 0 인 주석 토큰은 무시 됩니다.  
  
   
  
## Examples  
 이 예제에 대 한 지정 된 `TextFieldParser`, `FileReader` 작은따옴표 (')로 시작 하는 줄을 무시 해야 합니다.  
  
 [!code-vb[VbVbalrTextFieldParser#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">주석 토큰에 공백을 포함하고 있는 경우</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Delimiters">
      <MemberSignature Language="C#" Value="public string[] Delimiters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Delimiters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiters As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Delimiters { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>텍스트 파일의 구분 기호를 정의합니다.</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체의 모든 필드 구분 기호가 들어 있는 문자열 배열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 의미 있는 경우에만 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> 속성이 `FieldType.Delimited`합니다.  
  
 텍스트 파일을 구현에 대 한 구분 기호를 정의 고 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> 메서드.  
  
 다음 표에서 관련 된 작업의 예는 `Delimiters` 속성입니다.  
  
|대상|보기|  
|--------|---------|  
|구분 기호로 분리 된 텍스트 파일에서 읽기|[방법: 쉼표로 구분된 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
  
   
  
## Examples  
 지정 하는이 예제에 대 한 구분 기호는 `TextFieldParser` 개체 `FileReader`은 쉼표 (,)입니다.  
  
 [!code-vb[VbVbalrTextFieldParser#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">구분기호는 줄 바꿈 문자, 빈 문자열 또는 <see langword="Nothing" />으로 설정됩니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>해당 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체에서 사용하는 리소스를 해제합니다.</summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>해당 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체에서 사용하는 리소스를 해제합니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">부울입니다. <see langword="True" />는 관리되는 리소스와 관리되지 않는 리소스를 모두 해제합니다. <see langword="False" />는 관리되지 않는 리소스만 해제합니다.</param>
        <summary>해당 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체에서 사용하는 리소스를 해제합니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndOfData">
      <MemberSignature Language="C#" Value="public bool EndOfData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndOfData { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 커서 위치와 파일 끝 사이에 공백 또는 주석이 없는 줄이 있는 경우 <see langword="True" />를 반환합니다.</summary>
        <value>
          읽을 데이터가 더 이상 없으면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 읽고 있는 데이터의 끝을 확인할 파일에서 읽을 때 사용할 수 있습니다.  
  
 다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `EndOfData` 속성입니다.  
  
|대상|보기|  
|--------|---------|  
|구분 기호로 분리 된 파일에서 읽기|[방법: 쉼표로 구분된 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|고정 너비 파일에서 읽기|[방법: 고정 너비 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 사용 하 여이 예제는 `EndofData` 사용 하 여 파일의 모든 필드를 반복 하는 속성은 `TextFieldReader`, `FileReader`합니다.  
  
 [!code-vb[VbVbalrTextFieldParser#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLine">
      <MemberSignature Language="C#" Value="public string ErrorLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorLine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorLine { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>최신 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 예외를 발생시킨 줄을 반환합니다.</summary>
        <value>최신 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 예외를 발생시킨 줄입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 되지 않은 경우 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 예외가 throw 되지 빈 문자열이 반환 됩니다.  
  
 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> 예외를 발생 하는 줄의 번호를 표시 속성을 사용할 수 있습니다.  
  
 다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `ErrorLine` 속성입니다.  
  
|대상|보기|  
|--------|---------|  
|구분 기호로 분리 된 파일에서 읽기|[방법: 쉼표로 구분된 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|고정 너비 파일에서 읽기|[방법: 고정 너비 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 사용 하 여이 예제는 `ErrorLine` 현재 원인이 된 줄을 표시 하려면 속성 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 예외입니다.  
  
 [!code-vb[VbVbalrTextFieldParser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLineNumber">
      <MemberSignature Language="C#" Value="public long ErrorLineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ErrorLineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ErrorLineNumber { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>최신 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 예외를 발생시킨 줄 번호를 반환합니다.</summary>
        <value>최신 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 예외를 발생시킨 줄의 번호입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 되지 않은 경우 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 예외가 throw 되었습니다,-1이 반환 됩니다.  
  
 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> 예외를 발생 하는 줄의 번호를 표시 속성을 사용할 수 있습니다. 줄 번호를 결정할 때에 빈 줄과 주석을 무시 되지 않습니다.  
  
 다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `ErrorLineNumber` 속성입니다.  
  
|대상|보기|  
|--------|---------|  
|구분 기호로 분리 된 파일에서 읽기|[방법: 쉼표로 구분된 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|고정 너비 파일에서 읽기|[방법: 고정 너비 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 사용 하 여이 예제는 `ErrorLineNumber` 현재 원인이 된 줄의 위치를 표시 하는 속성 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 예외입니다.  
  
 [!code-vb[VbVbalrTextFieldParser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FieldWidths">
      <MemberSignature Language="C#" Value="public int[] FieldWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] FieldWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldWidths As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ FieldWidths { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>구문 분석되는 텍스트 파일에서 각 열의 너비를 나타냅니다.</summary>
        <value>구문 분석되는 텍스트 파일에 있는 각 열의 너비가 포함된 정수 배열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 의미 있는 경우에만 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> 속성이 `FieldType.FixedWidth`합니다. 배열의 마지막 항목 보다 작거나 0이 하 이면 필드 가변 폭으로 간주 됩니다.  
  
 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> 메서드 필드의 너비를 사용할 수도 있습니다.  
  
 다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `FieldWidths` 속성입니다.  
  
|대상|보기|  
|--------|---------|  
|고정 너비 텍스트 파일에서 읽기|[방법: 고정 너비 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 이 예제에서는 파일을 읽어 `ParserText.txt`, 너비를 지정 하는 첫 번째 열은 너비가 5 자, 두 번째는 10, 세 번째는 11 및 가변 너비의 네 번째 작업은  
  
 [!code-vb[VbVbalrTextFieldParser#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">배열의 마지막 항목을 제외한 위치의 너비 값이 0 이하인 경우</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TextFieldParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TextFieldParser ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>가비지 수집기에서 회수하기 전에 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체가 리소스를 해제하고 다른 정리 작업을 수행할 수 있게 합니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFieldsEnclosedInQuotes">
      <MemberSignature Language="C#" Value="public bool HasFieldsEnclosedInQuotes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="VB.NET" Value="Public Property HasFieldsEnclosedInQuotes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFieldsEnclosedInQuotes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>구분된 파일을 구문 분석할 때 필드가 따옴표로 묶여 있는지를 나타냅니다.</summary>
        <value>
          필드가 따옴표로 묶여 있으면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 **모든** 탭 합니다.  
  
 속성이 `True`, 파서가 가정 필드가 따옴표로 묶여 있는지 ("") 및 줄 끝을 포함할 수 있습니다.  
  
 예를 들어 필드 따옴표에 포함 되어 있으면 `abc, "field2a,field2b", field3` 하며이 속성은 `True`, 다음 따옴표로 묶인 모든 텍스트는 있는 그대로 반환 됩니다;이 예에서는 되돌아가 `abc|field2a,field2b|field3`합니다. 이 속성을 설정 `False` 이 예제에서는 반환 하 게 만드는 `abc|"field2a|field2b"|field3`합니다.  
  
   
  
## Examples  
 설정 하는이 예제는 `HasFieldsEnclosedInQuotes` 속성을 `True` 에 대 한 `myReader`합니다.  
  
 [!code-vb[VbVbalrTextFieldParser#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public long LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LineNumber { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 줄 번호를 반환하거나 스트림에서 더 이상 문자를 사용할 수 없으면 -1을 반환합니다.</summary>
        <value>현재 줄 번호입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 **모든** 탭 합니다.  
  
 줄 번호를 결정할 때에 빈 줄과 주석을 무시 되지 않습니다.  
  
   
  
## Examples  
 이 예제에서는 텍스트 파일에 이름 "jones 이면 특정"에 대 한 검색을 보고 어떤 줄에서 발생 합니다.  
  
 [!code-vb[VbVbalrTextFieldParser#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PeekChars">
      <MemberSignature Language="C#" Value="public string PeekChars (int numberOfChars);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string PeekChars(int32 numberOfChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekChars (numberOfChars As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PeekChars(int numberOfChars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberOfChars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numberOfChars">
          <see langword="Int32" />. 읽을 문자 수입니다. 필수.</param>
        <summary>커서를 앞으로 이동하지 않고 지정한 문자 수를 읽습니다.</summary>
        <returns>지정된 수의 읽을 문자가 포함된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `numberOfChars` 값 전체 줄의 문자 수보다 작아야 합니다. 없는 경우, 반환 하는 문자열 `PeekChars` 줄 길이에 잘립니다.  
  
 빈 줄은 무시됩니다.  
  
 줄 끝 문자 반환 되지 않습니다.  
  
 `PeekChars` 메서드 수행 구문 분석 하지 않으면 구분된 된 필드에서 줄 끝 문자는 실제 줄 끝으로 해석 됩니다.  
  
 다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `PeekChars` 메서드.  
  
|대상|보기|  
|--------|---------|  
|필드의 형식을 구문 분석 하기 전에 확인|[방법: 여러 형식의 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 이 예에서는 `PeekChars` 데이터의 끝을 찾아 해당 시점에 파일을 구문 분석을 중지 합니다.  
  
 [!code-vb[VbVbalrTextFieldParser#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="numberOfChars" />가 0보다 작습니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ReadFields">
      <MemberSignature Language="C#" Value="public string[] ReadFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string[] ReadFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadFields () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ ReadFields();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 줄의 모든 필드를 읽고 문자열 배열로서 반환한 다음 데이터가 포함된 다음 줄로 커서를 이동합니다.</summary>
        <returns>현재 줄의 필드 값이 포함된 문자열 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자가 여러 형식의 텍스트 파일을 구문 분석할 수 있도록 하기 위해는 `ReadFields` 의 값을 검사 하는 메서드 `TextFieldType`, `Delimiters`, 및 `FieldWidths`를 지정 하는 경우 호출 될 때마다 합니다. 사용자가 올바르게 구성 해야는 `TextFieldType` 및 `FieldWidths` 또는 `Delimiters` 속성을 적절 하 게 합니다. 경우 `TextFieldType` 로 설정 되어 `Delimited`, 및 `Delimiters` 설정 되지 않은 경우 `TextFieldType` 로 설정 된 `FixedWidth` 및 `FieldWidths`, 예외가 throw 됩니다.  
  
 경우 `ReadFields` 을 건너뛰고 다음 줄이 반환 됩니다.  
  
 경우는 `ReadFields` 메서드는 현재 줄을 구문 분석할 수 없습니다, 예외가 발생 하 고 다음 줄으로 이동 하지 않습니다. 이 통해 응용 프로그램을 다시 줄을 구문 분석을 시도 합니다.  
  
 다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `ReadFields` 메서드.  
  
|대상|보기|  
|--------|---------|  
|구분 기호로 분리 된 파일에서 읽기|[방법: 쉼표로 구분된 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|고정 너비 파일에서 읽기|[방법: 고정 너비 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 사용 하 여이 예제는 `ReadFields` 쉼표로 구분 된 파일을 읽는 메서드가 `ParserText.txt`합니다. 이 예제에서는 기록 필드를 `Testfile.txt`합니다.  
  
 [!code-vb[VbVbalrTextFieldParser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">지정된 형식을 사용하여 필드를 구문 분석할 수 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 줄을 문자열로 반환하고 커서를 다음 줄로 이동합니다.</summary>
        <returns>파일 또는 스트림의 현재 줄입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadLine` 메서드 수행 구문 분석 하지 않으면 구분된 된 필드에서 줄 끝 문자는 실제 줄 끝으로 해석 됩니다.  
  
 `Nothing` 파일의 끝에 도달 하는 경우 반환 됩니다.  
  
   
  
## Examples  
 이 예제에서는 파일을 읽는다는 `ParserText.txt` 에 씁니다 `Testfile.txt`합니다.  
  
 [!code-vb[VbVbalrTextFieldParser#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#15)]  
  
 경우 `Testfile.txt` 존재 하지 않는 의해 만들어집니다는 `WriteAllText` 메서드.  
  
 이 예에서는 필드를 단일 문자열로 작성 각 줄을 대상 파일의 줄에 표시 하는 `VbCrLf` 각 줄의 끝에 문자를 추가 해야 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadToEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadToEnd();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>텍스트 파일의 나머지를 읽고 문자열로 반환합니다.</summary>
        <returns>파일 또는 스트림의 나머지 텍스트입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 **모든** 탭 합니다.  
  
 더 이상 읽을 파일의 끝에 도달 했으므로 내용이 없는 경우 `Nothing` 반환 됩니다.  
  
 `ReadToEnd` 빈 줄과 주석을 메서드를 무시 하지 않습니다.  
  
   
  
## Examples  
 사용 하 여이 예제는 `ReadToEnd` 전체 파일을 읽는 메서드가 `ParserText.txt` 파일에 쓸 및 `Testfile.txt`합니다.  
  
 [!code-vb[VbVbalrTextFieldParser#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#10)]  
  
 경우 `Testfile.txt` 존재 하지 않는 의해 만들어집니다는 `WriteAllText` 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="SetDelimiters">
      <MemberSignature Language="C#" Value="public void SetDelimiters (params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetDelimiters(string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDelimiters (ParamArray delimiters As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDelimiters(... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delimiters">
          <see langword="String" /> 형식의 배열입니다.</param>
        <summary>판독기의 구분 기호를 지정된 값으로 설정하고 필드 형식을 <see langword="Delimited" />로 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기존 내용을 `Delimiters` 속성은이 메서드에 설정 된 경우 해제 됩니다.  
  
 이 메서드는 배열을 만들지 않고 구분 기호를 설정 하는 방법을 제공 합니다.  
  
 다음 표에서 관련 된 작업의 예는 `SetDelimiters` 메서드.  
  
|후|보기|  
|--------|---------|  
|텍스트 파일 구문 분석|[TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 이 예제에서는 텍스트 필드 파서를 열고로 구분 기호를 정의 `vbTab`합니다.  
  
 [!code-vb[VbVbalrTextFieldParser#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#4)]  
  
 대체 경로 `C:\logs\test.log` 를 구문 분석할 파일의 이름 및 경로입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">구분 기호의 길이가 0인 경우</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      </Docs>
    </Member>
    <Member MemberName="SetFieldWidths">
      <MemberSignature Language="C#" Value="public void SetFieldWidths (params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetFieldWidths(int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFieldWidths (ParamArray fieldWidths As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFieldWidths(... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fieldWidths">
          <see langword="Integer" />의 배열입니다.</param>
        <summary>지정한 값에 대한 판독기의 구분 기호를 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기존 내용을 `Delimiters` 설정 하면 속성이 지워집니다.  
  
 이 메서드는 배열을 만들지 않고 구분 기호를 설정 하는 방법을 제공 합니다.  
  
 다음 표에서 관련 된 작업의 예제는 `SetFieldWidths` 메서드.  
  
|대상|보기|  
|--------|---------|  
|텍스트 파일 구문 분석 합니다.|[TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 로 필드 너비를 정의 하는이 예제 텍스트 필드 파서를 열고 `5`합니다.  
  
 [!code-vb[VbVbalrTextFieldParser#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#12)]  
  
 대체 경로 `C:\logs\test.log` 를 구문 분석할 파일의 이름 및 경로입니다.  
  
 다음 예제에서는 텍스트 필드 파서를 열고 필드 폭으로 정의 `5`, `10`, 및 변수입니다.  
  
 [!code-vb[VbVbalrTextFieldParser#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#13)]  
  
 대체 경로 `C:\logs\test.log` 를 구문 분석할 파일의 이름 및 경로입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="TextFieldType">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.FileIO.FieldType TextFieldType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFieldType As FieldType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::FileIO::FieldType TextFieldType { Microsoft::VisualBasic::FileIO::FieldType get(); void set(Microsoft::VisualBasic::FileIO::FieldType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.FieldType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>구문 분석할 파일이 구분된 파일인지 또는 고정 너비 파일인지를 나타냅니다.</summary>
        <value>구문 분석할 파일이 구분된 파일인지 또는 고정 너비 파일인지를 나타내는 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 기본값을 구분 합니다.  
  
 다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `TextFieldType` 속성입니다.  
  
|대상|보기|  
|--------|---------|  
|구분 기호로 분리 된 텍스트 파일에서 읽기|[방법: 쉼표로 구분된 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|고정 너비 텍스트 파일에서 읽기|[방법: 고정 너비 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|여러 형식의 텍스트 파일에서 읽기|[방법: 여러 형식의 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 이 예제에서는 만듭니다는 `TextFieldParser`, `FileReader`, 구분 된을 지정 합니다.  
  
 [!code-vb[VbVbalrTextFieldParser#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#19)]  
  
 이 예제에서는 만듭니다는 `TextFieldParser`, `FileReader`, 고정 폭 임을 지정 합니다.  
  
 [!code-vb[VbVbalrTextFieldParser#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public bool TrimWhiteSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimWhiteSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property TrimWhiteSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimWhiteSpace { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>필드 값에서 선행 및 후행 공백이 삭제되어야 하는지를 나타냅니다.</summary>
        <value>
          필드 값에서 선행 및 후행 공백을 삭제해야 하는 경우 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 기본값은 `True`입니다.  
  
   
  
## Examples  
 이 예제에서는 만듭니다는 `TextFieldParser`, `FileReader`, 설정 및는 `TrimWhiteSpace` 속성을 `True`합니다.  
  
 [!code-vb[VbVbalrTextFieldParser#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>