<Type Name="TextFieldParser" FullName="Microsoft.VisualBasic.FileIO.TextFieldParser">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="34fefd8e673d5edb9c2fb81e0c3d6c92c4fe6c0b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextFieldParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi TextFieldParser extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFieldParser&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFieldParser : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="e63db-101">구조화된 텍스트 파일을 구문 분석하기 위한 메서드와 속성을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e63db-101">Provides methods and properties for parsing structured text files.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-102">`TextFieldParser` 구조화 된 텍스트 파일 구문 분석에 대 한 속성 및 메서드를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-102">The `TextFieldParser` object provides methods and properties for parsing structured text files.</span></span> <span data-ttu-id="e63db-103">텍스트 파일을 구문 분석의 `TextFieldParser` 텍스트 파일을 반복 하는 것과 비슷합니다 동안는 `ReadFields` 텍스트의 필드를 추출 하는 메서드는 문자열을 분할 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-103">Parsing a text file with the `TextFieldParser` is similar to iterating over a text file, while the `ReadFields` method to extract fields of text is similar to splitting the strings.</span></span>  
  
 <span data-ttu-id="e63db-104">`TextFieldParser` 두 유형의 파일을 구문 분석할 수 있습니다: 구분 또는 고정 너비입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-104">The `TextFieldParser` can parse two types of files: delimited or fixed-width.</span></span> <span data-ttu-id="e63db-105">일부 속성와 같은 `Delimiters` 및 `HasFieldsEnclosedInQuotes` 는 의미가 동안 구분 기호로 분리 된 파일을 사용 하는 경우는 `FieldWidths` 속성은 고정 너비 파일을 사용 하는 경우에 의미가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-105">Some properties, such as `Delimiters` and `HasFieldsEnclosedInQuotes` are meaningful only when working with delimited files, while the `FieldWidths` property is meaningful only when working with fixed-width files.</span></span>  
  
 <span data-ttu-id="e63db-106">다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `Microsoft.VisualBasic.FileIO.TextFieldParser` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-106">The following table lists examples of tasks involving the `Microsoft.VisualBasic.FileIO.TextFieldParser` object.</span></span>  
  
|<span data-ttu-id="e63db-107">대상</span><span class="sxs-lookup"><span data-stu-id="e63db-107">To</span></span>|<span data-ttu-id="e63db-108">보기</span><span class="sxs-lookup"><span data-stu-id="e63db-108">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="e63db-109">구분 기호로 분리 된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-109">Read from a delimited text file</span></span>|[<span data-ttu-id="e63db-110">방법: 쉼표로 구분된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-110">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="e63db-111">고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-111">Read from a fixed-width text file</span></span>|[<span data-ttu-id="e63db-112">방법: 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-112">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="e63db-113">여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-113">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="e63db-114">방법: 여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-114">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="e63db-115">이 예제에서는 탭으로 구분 된 텍스트 파일 구문 분석 `Bigfile`합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-115">This example parses through a tab-delimited text file, `Bigfile`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e63db-116">
            <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-116">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="e63db-117">
            <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-117">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="e63db-118">구문 분석할 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-118">The stream to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e63db-119">
            <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-119">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-120">새 `TextFieldParser` 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 `stream` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-120">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e63db-121">
            <paramref name="stream" />가 <see langword="Nothing" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-121">
              <paramref name="stream" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e63db-122">
            <paramref name="stream" />을 읽을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-122">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::TextReader ^ reader);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="e63db-123">
            <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-123">
              <see cref="T:System.IO.TextReader" />.</span>
          </span>
          <span data-ttu-id="e63db-124">구분 분석할 <see cref="T:System.IO.TextReader" /> 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-124">The <see cref="T:System.IO.TextReader" /> stream to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e63db-125">
            <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-125">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-126">새 `TextFieldParser` 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 `reader` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-126">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `reader` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e63db-127">
            <paramref name="reader" />가 <see langword="Nothing" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-127">
              <paramref name="reader" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="e63db-128">
            <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-128">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="e63db-129">구문 분석할 파일의 전체 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-129">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e63db-130">
            <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-130">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-131">새 `TextFieldParser` 로 지정 된 파일을 구문 분석 하는 개체는 `path` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-131">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e63db-132">
            <paramref name="path" />이 빈 문자열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-132">
              <paramref name="path" /> is an empty string.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="e63db-133">
            <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-133">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="e63db-134">구문 분석할 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-134">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="e63db-135">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-135">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="e63db-136">파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-136">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="e63db-137">기본값은 <see cref="P:System.Text.Encoding.UTF8" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-137">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e63db-138">
            <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-138">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-139">새 `TextFieldParser` 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 `stream` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-139">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e63db-140">문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자 해석할 수 없어 및 예외를 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-140">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e63db-141">
            <paramref name="stream" /> 또는 <paramref name="defaultEncoding" />가 <see langword="Nothing" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-141">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e63db-142">
            <paramref name="stream" />을 읽을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-142">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="e63db-143">
            <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-143">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="e63db-144">구문 분석할 파일의 전체 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-144">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="e63db-145">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-145">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="e63db-146">파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-146">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="e63db-147">기본값은 <see cref="P:System.Text.Encoding.UTF8" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-147">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e63db-148">
            <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-148">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-149">새 `TextFieldParser` 로 지정 된 파일을 구문 분석 하는 개체는 `path` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-149">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e63db-150">문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자 해석할 수 없어 및 예외를 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-150">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e63db-151">
            <paramref name="path" />가 빈 문자열이거나 <paramref name="defaultEncoding" />이 <see langword="Nothing" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-151">
              <paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="e63db-152">
            <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-152">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="e63db-153">구문 분석할 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-153">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="e63db-154">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-154">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="e63db-155">파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-155">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="e63db-156">기본값은 <see cref="P:System.Text.Encoding.UTF8" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-156">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="e63db-157">
            <see langword="Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-157">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="e63db-158">파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-158">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="e63db-159">기본값은 <see langword="True" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-159">Default is <see langword="True" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e63db-160">
            <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-160">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-161">새 `TextFieldParser` 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 `stream` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-161">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="e63db-162">경우는 `detectEncoding` 매개 변수는 `True`를이 생성자의 파일 또는 스트림의 처음 세 바이트 확인 하 여 인코딩 검색을 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-162">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="e63db-163">자동으로 인식 u t F-8, little endian Unicode 및 big endian 유니코드 텍스트 파일 적절 한 바이트 순서 표시로 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-163">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="e63db-164">그렇지 않으면 하 여 지정 된 인코딩을 `defaultEncoding` 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-164">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e63db-165">문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자 해석할 수 없어 및 예외를 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-165">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e63db-166">
            <paramref name="stream" /> 또는 <paramref name="defaultEncoding" />가 <see langword="Nothing" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-166">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e63db-167">
            <paramref name="stream" />을 읽을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-167">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding, detectEncoding As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="e63db-168">
            <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-168">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="e63db-169">구문 분석할 파일의 전체 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-169">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="e63db-170">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-170">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="e63db-171">파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-171">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="e63db-172">기본값은 <see cref="P:System.Text.Encoding.UTF8" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-172">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="e63db-173">
            <see langword="Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-173">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="e63db-174">파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-174">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="e63db-175">기본값은 <see langword="True" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-175">Default is <see langword="True" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e63db-176">
            <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-176">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-177">새 `TextFieldParser` 로 지정 된 파일을 구문 분석 하는 개체는 `path` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-177">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 <span data-ttu-id="e63db-178">경우는 `detectEncoding` 매개 변수는 `True`를이 생성자의 파일 또는 스트림의 처음 세 바이트 확인 하 여 인코딩 검색을 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-178">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="e63db-179">자동으로 인식 u t F-8, little endian Unicode 및 big endian 유니코드 텍스트 파일 적절 한 바이트 순서 표시로 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-179">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="e63db-180">그렇지 않으면 하 여 지정 된 인코딩을 `defaultEncoding` 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-180">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e63db-181">문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자 해석할 수 없어 및 예외를 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-181">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e63db-182">
            <paramref name="path" />가 빈 문자열이거나 <paramref name="defaultEncoding" />이 <see langword="Nothing" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-182">
              <paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="e63db-183">
            <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-183">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="e63db-184">구문 분석할 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-184">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="e63db-185">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-185">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="e63db-186">파일에서 인코딩을 확인할 수 없는 경우 사용할 문자 인코딩입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-186">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="e63db-187">기본값은 <see cref="P:System.Text.Encoding.UTF8" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-187">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="e63db-188">
            <see langword="Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-188">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="e63db-189">파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-189">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="e63db-190">기본값은 <see langword="True" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-190">Default is <see langword="True" />.</span>
          </span>
        </param>
        <param name="leaveOpen">
          <span data-ttu-id="e63db-191">
            <see langword="Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-191">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="e63db-192">
            <see langword="TextFieldParser" /> 개체가 닫힐 때 <c>stream</c>을 열어둘지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-192">Indicates whether to leave <c>stream</c> open when the <see langword="TextFieldParser" /> object is closed.</span>
          </span>
          <span data-ttu-id="e63db-193">기본값은 <see langword="False" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-193">Default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e63db-194">
            <see langword="TextFieldParser" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-194">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-195">새 `TextFieldParser` 파일을 구문 분석 또는 스트림에 개체도 표시 됩니다는 `stream` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-195">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="e63db-196">경우는 `detectEncoding` 매개 변수는 `True`를이 생성자의 파일 또는 스트림의 처음 세 바이트 확인 하 여 인코딩 검색을 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-196">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="e63db-197">자동으로 인식 u t F-8, little endian Unicode 및 big endian 유니코드 텍스트 파일 적절 한 바이트 순서 표시로 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-197">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="e63db-198">그렇지 않으면 하 여 지정 된 인코딩을 `defaultEncoding` 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-198">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e63db-199">문자 집합을 특정 문화권 설정을 사용 하 여 컴파일하고 하면 서로 다른 문화권 설정 사용 하 여 동일한 문자 검색 문자 해석할 수 없어 및 예외를 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-199">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e63db-200">
            <paramref name="stream" /> 또는 <paramref name="defaultEncoding" />가 <see langword="Nothing" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-200">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e63db-201">
            <paramref name="stream" />을 읽을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-201">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e63db-202">현재 <see langword="TextFieldParser" /> 개체를 닫습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-202">Closes the current <see langword="TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e63db-203">이 예제에서는 닫습니다는 `TextFieldParser.FileReader`합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-203">This example closes the `TextFieldParser.FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommentTokens">
      <MemberSignature Language="C#" Value="public string[] CommentTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommentTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentTokens As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ CommentTokens { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e63db-204">주석 토큰을 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-204">Defines comment tokens.</span>
          </span>
          <span data-ttu-id="e63db-205">주석 토큰은 줄 시작 부분에서 해당 줄이 주석이므로 파서에서 무시해야 함을 나타내는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-205">A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e63db-206">
            <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체의 모든 주석 토큰이 들어 있는 문자열 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-206">A string array that contains all of the comment tokens for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-207">고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 **모든** 탭 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-207">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="e63db-208">길이가 0 인 주석 토큰은 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-208">Zero-length comment tokens are ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e63db-209">이 예제에 대 한 지정 된 `TextFieldParser`, `FileReader` 작은따옴표 (')로 시작 하는 줄을 무시 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-209">This example specifies that for the `TextFieldParser`, `FileReader` lines beginning with a single quotation mark (') should be ignored.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e63db-210">주석 토큰에 공백을 포함하고 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-210">A comment token includes white space.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Delimiters">
      <MemberSignature Language="C#" Value="public string[] Delimiters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Delimiters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiters As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Delimiters { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e63db-211">텍스트 파일의 구분 기호를 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-211">Defines the delimiters for a text file.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e63db-212">
            <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체의 모든 필드 구분 기호가 들어 있는 문자열 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-212">A string array that contains all of the field delimiters for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-213">이 속성은 의미 있는 경우에만 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> 속성이 `FieldType.Delimited`합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-213">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.Delimited`.</span></span>  
  
 <span data-ttu-id="e63db-214">텍스트 파일을 구현에 대 한 구분 기호를 정의 고 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="e63db-214">Defining the delimiters for a text file can also be accomplished with the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> method.</span></span>  
  
 <span data-ttu-id="e63db-215">다음 표에서 관련 된 작업의 예는 `Delimiters` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-215">The following table lists an example of a task involving the `Delimiters` property.</span></span>  
  
|<span data-ttu-id="e63db-216">대상</span><span class="sxs-lookup"><span data-stu-id="e63db-216">To</span></span>|<span data-ttu-id="e63db-217">보기</span><span class="sxs-lookup"><span data-stu-id="e63db-217">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="e63db-218">구분 기호로 분리 된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-218">Read from a delimited text file</span></span>|[<span data-ttu-id="e63db-219">방법: 쉼표로 구분된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-219">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="e63db-220">지정 하는이 예제에 대 한 구분 기호는 `TextFieldParser` 개체 `FileReader`은 쉼표 (,)입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-220">This example specifies that the delimiter for the `TextFieldParser` object, `FileReader`, is a comma (,).</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e63db-221">구분기호는 줄 바꿈 문자, 빈 문자열 또는 <see langword="Nothing" />으로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-221">A delimiter value is set to a newline character, an empty string, or <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e63db-222">해당 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체에서 사용하는 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-222">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e63db-223">해당 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체에서 사용하는 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-223">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="e63db-224">부울입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-224">Boolean.</span>
          </span>
          <span data-ttu-id="e63db-225">
            <see langword="True" />는 관리되는 리소스와 관리되지 않는 리소스를 모두 해제합니다. <see langword="False" />는 관리되지 않는 리소스만 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-225">
              <see langword="True" /> releases both managed and unmanaged resources; <see langword="False" /> releases only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e63db-226">해당 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체에서 사용하는 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-226">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndOfData">
      <MemberSignature Language="C#" Value="public bool EndOfData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndOfData { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e63db-227">현재 커서 위치와 파일 끝 사이에 공백 또는 주석이 없는 줄이 있는 경우 <see langword="True" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-227">Returns <see langword="True" /> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e63db-228">읽을 데이터가 더 이상 없으면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-228">
              <see langword="True" /> if there is no more data to read; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-229">이 속성을 읽고 있는 데이터의 끝을 확인할 파일에서 읽을 때 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-229">This property can be used when reading from files to determine the end of the data being read.</span></span>  
  
 <span data-ttu-id="e63db-230">다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `EndOfData` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-230">The following table lists examples of tasks involving the `EndOfData` property.</span></span>  
  
|<span data-ttu-id="e63db-231">대상</span><span class="sxs-lookup"><span data-stu-id="e63db-231">To</span></span>|<span data-ttu-id="e63db-232">보기</span><span class="sxs-lookup"><span data-stu-id="e63db-232">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="e63db-233">구분 기호로 분리 된 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-233">Read from a delimited file</span></span>|[<span data-ttu-id="e63db-234">방법: 쉼표로 구분된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-234">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="e63db-235">고정 너비 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-235">Read from a fixed-width file</span></span>|[<span data-ttu-id="e63db-236">방법: 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-236">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="e63db-237">사용 하 여이 예제는 `EndofData` 사용 하 여 파일의 모든 필드를 반복 하는 속성은 `TextFieldReader`, `FileReader`합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-237">This example uses the `EndofData` property to loop through all the fields in the file with the `TextFieldReader`, `FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLine">
      <MemberSignature Language="C#" Value="public string ErrorLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorLine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorLine { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e63db-238">최신 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 예외를 발생시킨 줄을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-238">Returns the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e63db-239">최신 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 예외를 발생시킨 줄입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-239">The line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-240">되지 않은 경우 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 예외가 throw 되지 빈 문자열이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-240">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, an empty string is returned.</span></span>  
  
 <span data-ttu-id="e63db-241"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> 예외를 발생 하는 줄의 번호를 표시 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-241">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> property can be used to display the number of the line that caused the exception.</span></span>  
  
 <span data-ttu-id="e63db-242">다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `ErrorLine` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-242">The following table lists examples of tasks involving the `ErrorLine` property.</span></span>  
  
|<span data-ttu-id="e63db-243">대상</span><span class="sxs-lookup"><span data-stu-id="e63db-243">To</span></span>|<span data-ttu-id="e63db-244">보기</span><span class="sxs-lookup"><span data-stu-id="e63db-244">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="e63db-245">구분 기호로 분리 된 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-245">Read from a delimited file</span></span>|[<span data-ttu-id="e63db-246">방법: 쉼표로 구분된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-246">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="e63db-247">고정 너비 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-247">Read from a fixed-width file</span></span>|[<span data-ttu-id="e63db-248">방법: 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-248">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="e63db-249">사용 하 여이 예제는 `ErrorLine` 현재 원인이 된 줄을 표시 하려면 속성 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-249">This example uses the `ErrorLine` property to display the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLineNumber">
      <MemberSignature Language="C#" Value="public long ErrorLineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ErrorLineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ErrorLineNumber { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e63db-250">최신 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 예외를 발생시킨 줄 번호를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-250">Returns the number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e63db-251">최신 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 예외를 발생시킨 줄의 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-251">The number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-252">되지 않은 경우 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 예외가 throw 되었습니다,-1이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-252">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, -1 is returned.</span></span>  
  
 <span data-ttu-id="e63db-253"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> 예외를 발생 하는 줄의 번호를 표시 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-253">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property can be used to display the number of the line that caused the exception.</span></span> <span data-ttu-id="e63db-254">줄 번호를 결정할 때에 빈 줄과 주석을 무시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-254">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
 <span data-ttu-id="e63db-255">다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `ErrorLineNumber` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-255">The following table lists examples of tasks involving the `ErrorLineNumber` property.</span></span>  
  
|<span data-ttu-id="e63db-256">대상</span><span class="sxs-lookup"><span data-stu-id="e63db-256">To</span></span>|<span data-ttu-id="e63db-257">보기</span><span class="sxs-lookup"><span data-stu-id="e63db-257">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="e63db-258">구분 기호로 분리 된 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-258">Read from a delimited file</span></span>|[<span data-ttu-id="e63db-259">방법: 쉼표로 구분된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-259">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="e63db-260">고정 너비 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-260">Read from a fixed-width file</span></span>|[<span data-ttu-id="e63db-261">방법: 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-261">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="e63db-262">사용 하 여이 예제는 `ErrorLineNumber` 현재 원인이 된 줄의 위치를 표시 하는 속성 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-262">This example uses the `ErrorLineNumber` property to display the location of the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FieldWidths">
      <MemberSignature Language="C#" Value="public int[] FieldWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] FieldWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldWidths As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ FieldWidths { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e63db-263">구문 분석되는 텍스트 파일에서 각 열의 너비를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-263">Denotes the width of each column in the text file being parsed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e63db-264">구문 분석되는 텍스트 파일에 있는 각 열의 너비가 포함된 정수 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-264">An integer array that contains the width of each column in the text file that is being parsed.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-265">이 속성은 의미 있는 경우에만 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> 속성이 `FieldType.FixedWidth`합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-265">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.FixedWidth`.</span></span> <span data-ttu-id="e63db-266">배열의 마지막 항목 보다 작거나 0이 하 이면 필드 가변 폭으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-266">If the last entry in the array is less than or equal to zero, the field is assumed to be of variable width.</span></span>  
  
 <span data-ttu-id="e63db-267"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> 메서드 필드의 너비를 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-267">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> method can also be used to set field widths.</span></span>  
  
 <span data-ttu-id="e63db-268">다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `FieldWidths` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-268">The following table lists examples of tasks involving the `FieldWidths` property.</span></span>  
  
|<span data-ttu-id="e63db-269">대상</span><span class="sxs-lookup"><span data-stu-id="e63db-269">To</span></span>|<span data-ttu-id="e63db-270">보기</span><span class="sxs-lookup"><span data-stu-id="e63db-270">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="e63db-271">고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-271">Read from a fixed-width text file</span></span>|[<span data-ttu-id="e63db-272">방법: 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-272">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="e63db-273">이 예제에서는 파일을 읽어 `ParserText.txt`, 너비를 지정 하는 첫 번째 열은 너비가 5 자, 두 번째는 10, 세 번째는 11 및 가변 너비의 네 번째 작업은</span><span class="sxs-lookup"><span data-stu-id="e63db-273">This example reads the file `ParserText.txt`, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e63db-274">배열의 마지막 항목을 제외한 위치의 너비 값이 0 이하인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-274">A width value in any location other than the last entry of the array is less than or equal to zero.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TextFieldParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TextFieldParser ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e63db-275">가비지 수집기에서 회수하기 전에 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체가 리소스를 해제하고 다른 정리 작업을 수행할 수 있게 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-275">Allows the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFieldsEnclosedInQuotes">
      <MemberSignature Language="C#" Value="public bool HasFieldsEnclosedInQuotes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="VB.NET" Value="Public Property HasFieldsEnclosedInQuotes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFieldsEnclosedInQuotes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e63db-276">구분된 파일을 구문 분석할 때 필드가 따옴표로 묶여 있는지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-276">Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e63db-277">필드가 따옴표로 묶여 있으면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-277">
              <see langword="True" /> if fields are enclosed in quotation marks; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-278">고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 **모든** 탭 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-278">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="e63db-279">속성이 `True`, 파서가 가정 필드가 따옴표로 묶여 있는지 ("") 및 줄 끝을 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-279">If the property is `True`, the parser assumes that fields are enclosed in quotation marks (" ") and may contain line endings.</span></span>  
  
 <span data-ttu-id="e63db-280">예를 들어 필드 따옴표에 포함 되어 있으면 `abc, "field2a,field2b", field3` 하며이 속성은 `True`, 다음 따옴표로 묶인 모든 텍스트는 있는 그대로 반환 됩니다;이 예에서는 되돌아가 `abc|field2a,field2b|field3`합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-280">If a field is enclosed in quotation marks, for example, `abc, "field2a,field2b", field3` and this property is `True`, then all text enclosed in quotation marks will be returned as is; this example would return `abc|field2a,field2b|field3`.</span></span> <span data-ttu-id="e63db-281">이 속성을 설정 `False` 이 예제에서는 반환 하 게 만드는 `abc|"field2a|field2b"|field3`합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-281">Setting this property to `False` would make this example return `abc|"field2a|field2b"|field3`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e63db-282">설정 하는이 예제는 `HasFieldsEnclosedInQuotes` 속성을 `True` 에 대 한 `myReader`합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-282">This example sets the `HasFieldsEnclosedInQuotes` property to `True` for `myReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public long LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LineNumber { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e63db-283">현재 줄 번호를 반환하거나 스트림에서 더 이상 문자를 사용할 수 없으면 -1을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-283">Returns the current line number, or returns -1 if no more characters are available in the stream.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e63db-284">현재 줄 번호입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-284">The current line number.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-285">고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 **모든** 탭 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-285">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="e63db-286">줄 번호를 결정할 때에 빈 줄과 주석을 무시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-286">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e63db-287">이 예제에서는 텍스트 파일에 이름 "jones 이면 특정"에 대 한 검색을 보고 어떤 줄에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-287">This example searches for the name "Jones" in the text file and reports what line(s) it occurs on.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PeekChars">
      <MemberSignature Language="C#" Value="public string PeekChars (int numberOfChars);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string PeekChars(int32 numberOfChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekChars (numberOfChars As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PeekChars(int numberOfChars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberOfChars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numberOfChars">
          <span data-ttu-id="e63db-288">
            <see langword="Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-288">
              <see langword="Int32" />.</span>
          </span>
          <span data-ttu-id="e63db-289">읽을 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-289">Number of characters to read.</span>
          </span>
          <span data-ttu-id="e63db-290">필수.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-290">Required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e63db-291">커서를 앞으로 이동하지 않고 지정한 문자 수를 읽습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-291">Reads the specified number of characters without advancing the cursor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e63db-292">지정된 수의 읽을 문자가 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-292">A string that contains the specified number of characters read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-293">`numberOfChars` 값 전체 줄의 문자 수보다 작아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-293">The `numberOfChars` value must be less than the total number of characters in the line.</span></span> <span data-ttu-id="e63db-294">없는 경우, 반환 하는 문자열 `PeekChars` 줄 길이에 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-294">If it is not, the string returned by `PeekChars` will be truncated to the length of the line.</span></span>  
  
 <span data-ttu-id="e63db-295">빈 줄은 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-295">Blank lines are ignored.</span></span>  
  
 <span data-ttu-id="e63db-296">줄 끝 문자 반환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-296">End-of-line characters are not returned.</span></span>  
  
 <span data-ttu-id="e63db-297">`PeekChars` 메서드 수행 구문 분석 하지 않으면 구분된 된 필드에서 줄 끝 문자는 실제 줄 끝으로 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-297">The `PeekChars` method performs no parsing; an end-of- line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="e63db-298">다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `PeekChars` 메서드.</span><span class="sxs-lookup"><span data-stu-id="e63db-298">The following table lists examples of tasks involving the `PeekChars` method.</span></span>  
  
|<span data-ttu-id="e63db-299">대상</span><span class="sxs-lookup"><span data-stu-id="e63db-299">To</span></span>|<span data-ttu-id="e63db-300">보기</span><span class="sxs-lookup"><span data-stu-id="e63db-300">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="e63db-301">필드의 형식을 구문 분석 하기 전에 확인</span><span class="sxs-lookup"><span data-stu-id="e63db-301">Determine the format of a field before parsing it</span></span>|[<span data-ttu-id="e63db-302">방법: 여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-302">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="e63db-303">이 예에서는 `PeekChars` 데이터의 끝을 찾아 해당 시점에 파일을 구문 분석을 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-303">This example uses `PeekChars` to find the end of the data and stop parsing the file at that point.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e63db-304">
            <paramref name="numberOfChars" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-304">
              <paramref name="numberOfChars" /> is less than 0.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ReadFields">
      <MemberSignature Language="C#" Value="public string[] ReadFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string[] ReadFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadFields () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ ReadFields();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e63db-305">현재 줄의 모든 필드를 읽고 문자열 배열로서 반환한 다음 데이터가 포함된 다음 줄로 커서를 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-305">Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e63db-306">현재 줄의 필드 값이 포함된 문자열 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-306">An array of strings that contains field values for the current line.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-307">사용자가 여러 형식의 텍스트 파일을 구문 분석할 수 있도록 하기 위해는 `ReadFields` 의 값을 검사 하는 메서드 `TextFieldType`, `Delimiters`, 및 `FieldWidths`를 지정 하는 경우 호출 될 때마다 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-307">In order to allow users to parse text files in multiple formats, the `ReadFields` method examines the values of `TextFieldType`, `Delimiters`, and `FieldWidths`, if they are specified, each time it is called.</span></span> <span data-ttu-id="e63db-308">사용자가 올바르게 구성 해야는 `TextFieldType` 및 `FieldWidths` 또는 `Delimiters` 속성을 적절 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-308">Users need to correctly configure the `TextFieldType` and `FieldWidths` or `Delimiters` properties, as appropriate.</span></span> <span data-ttu-id="e63db-309">경우 `TextFieldType` 로 설정 되어 `Delimited`, 및 `Delimiters` 설정 되지 않은 경우 `TextFieldType` 로 설정 된 `FixedWidth` 및 `FieldWidths`, 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-309">If `TextFieldType` is set to `Delimited`, and `Delimiters` is not set, or if `TextFieldType` is set to `FixedWidth` and `FieldWidths`, an exception is thrown.</span></span>  
  
 <span data-ttu-id="e63db-310">경우 `ReadFields` 을 건너뛰고 다음 줄이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-310">If `ReadFields` encounters blank lines, they are skipped and the next non-blank line is returned.</span></span>  
  
 <span data-ttu-id="e63db-311">경우는 `ReadFields` 메서드는 현재 줄을 구문 분석할 수 없습니다, 예외가 발생 하 고 다음 줄으로 이동 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-311">If the `ReadFields` method cannot parse the current line, it raises an exception and does not move to the next line.</span></span> <span data-ttu-id="e63db-312">이 통해 응용 프로그램을 다시 줄을 구문 분석을 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-312">This enables your application to attempt to parse the line again.</span></span>  
  
 <span data-ttu-id="e63db-313">다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `ReadFields` 메서드.</span><span class="sxs-lookup"><span data-stu-id="e63db-313">The following table lists examples of tasks involving the `ReadFields` method.</span></span>  
  
|<span data-ttu-id="e63db-314">대상</span><span class="sxs-lookup"><span data-stu-id="e63db-314">To</span></span>|<span data-ttu-id="e63db-315">보기</span><span class="sxs-lookup"><span data-stu-id="e63db-315">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="e63db-316">구분 기호로 분리 된 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-316">Read from a delimited file</span></span>|[<span data-ttu-id="e63db-317">방법: 쉼표로 구분된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-317">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="e63db-318">고정 너비 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-318">Read from a fixed-width file</span></span>|[<span data-ttu-id="e63db-319">방법: 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-319">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="e63db-320">사용 하 여이 예제는 `ReadFields` 쉼표로 구분 된 파일을 읽는 메서드가 `ParserText.txt`합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-320">This example uses the `ReadFields` method to read from the comma-delimited file `ParserText.txt`.</span></span> <span data-ttu-id="e63db-321">이 예제에서는 기록 필드를 `Testfile.txt`합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-321">The example writes the fields to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">
          <span data-ttu-id="e63db-322">지정된 형식을 사용하여 필드를 구문 분석할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-322">A field cannot be parsed by using the specified format.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="e63db-323">연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-323">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="e63db-324">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-324">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span>
          </span>
        </permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e63db-325">현재 줄을 문자열로 반환하고 커서를 다음 줄로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-325">Returns the current line as a string and advances the cursor to the next line.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e63db-326">파일 또는 스트림의 현재 줄입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-326">The current line from the file or stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-327">`ReadLine` 메서드 수행 구문 분석 하지 않으면 구분된 된 필드에서 줄 끝 문자는 실제 줄 끝으로 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-327">The `ReadLine` method performs no parsing; an end-of-line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="e63db-328">`Nothing` 파일의 끝에 도달 하는 경우 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-328">`Nothing` is returned if the end of the file is reached.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e63db-329">이 예제에서는 파일을 읽는다는 `ParserText.txt` 에 씁니다 `Testfile.txt`합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-329">This example reads through the file `ParserText.txt` and writes it to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#15)]  
  
 <span data-ttu-id="e63db-330">경우 `Testfile.txt` 존재 하지 않는 의해 만들어집니다는 `WriteAllText` 메서드.</span><span class="sxs-lookup"><span data-stu-id="e63db-330">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 <span data-ttu-id="e63db-331">이 예에서는 필드를 단일 문자열로 작성 각 줄을 대상 파일의 줄에 표시 하는 `VbCrLf` 각 줄의 끝에 문자를 추가 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-331">This example writes the fields as a single string; to have each line display on its own line in the destination file, a `VbCrLf` character should be appended at the end of each line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadToEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadToEnd();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e63db-332">텍스트 파일의 나머지를 읽고 문자열로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-332">Reads the remainder of the text file and returns it as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e63db-333">파일 또는 스트림의 나머지 텍스트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-333">The remaining text from the file or stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-334">고급 멤버;입니다. 클릭 하지 않으면 IntelliSense에 표시 되지 않습니다는 **모든** 탭 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-334">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="e63db-335">더 이상 읽을 파일의 끝에 도달 했으므로 내용이 없는 경우 `Nothing` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-335">If there is nothing more to read because the end of the file has been reached, `Nothing` is returned.</span></span>  
  
 <span data-ttu-id="e63db-336">`ReadToEnd` 빈 줄과 주석을 메서드를 무시 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-336">The `ReadToEnd` method does not ignore blank lines and comments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e63db-337">사용 하 여이 예제는 `ReadToEnd` 전체 파일을 읽는 메서드가 `ParserText.txt` 파일에 쓸 및 `Testfile.txt`합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-337">This example uses the `ReadToEnd` method to read the entire file `ParserText.txt` and write it to the file `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#10)]  
  
 <span data-ttu-id="e63db-338">경우 `Testfile.txt` 존재 하지 않는 의해 만들어집니다는 `WriteAllText` 메서드.</span><span class="sxs-lookup"><span data-stu-id="e63db-338">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="SetDelimiters">
      <MemberSignature Language="C#" Value="public void SetDelimiters (params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetDelimiters(string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDelimiters (ParamArray delimiters As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDelimiters(... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delimiters">
          <span data-ttu-id="e63db-339">
            <see langword="String" /> 형식의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-339">Array of type <see langword="String" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e63db-340">판독기의 구분 기호를 지정된 값으로 설정하고 필드 형식을 <see langword="Delimited" />로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-340">Sets the delimiters for the reader to the specified values, and sets the field type to <see langword="Delimited" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-341">기존 내용을 `Delimiters` 속성은이 메서드에 설정 된 경우 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-341">The existing contents of the `Delimiters` property are cleared when this method is set.</span></span>  
  
 <span data-ttu-id="e63db-342">이 메서드는 배열을 만들지 않고 구분 기호를 설정 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-342">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="e63db-343">다음 표에서 관련 된 작업의 예는 `SetDelimiters` 메서드.</span><span class="sxs-lookup"><span data-stu-id="e63db-343">The following table lists an example of a task involving the `SetDelimiters` method.</span></span>  
  
|<span data-ttu-id="e63db-344">후</span><span class="sxs-lookup"><span data-stu-id="e63db-344">To</span></span>|<span data-ttu-id="e63db-345">보기</span><span class="sxs-lookup"><span data-stu-id="e63db-345">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="e63db-346">텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="e63db-346">Parse a text file</span></span>|[<span data-ttu-id="e63db-347">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="e63db-347">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="e63db-348">이 예제에서는 텍스트 필드 파서를 열고로 구분 기호를 정의 `vbTab`합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-348">This example opens a text field parser and defines the delimiter as `vbTab`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#4)]  
  
 <span data-ttu-id="e63db-349">대체 경로 `C:\logs\test.log` 를 구문 분석할 파일의 이름 및 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-349">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e63db-350">구분 기호의 길이가 0인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-350">A delimiter is zero-length.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      </Docs>
    </Member>
    <Member MemberName="SetFieldWidths">
      <MemberSignature Language="C#" Value="public void SetFieldWidths (params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetFieldWidths(int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFieldWidths (ParamArray fieldWidths As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFieldWidths(... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fieldWidths">
          <span data-ttu-id="e63db-351">
            <see langword="Integer" />의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-351">Array of <see langword="Integer" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e63db-352">지정한 값에 대한 판독기의 구분 기호를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-352">Sets the delimiters for the reader to the specified values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-353">기존 내용을 `Delimiters` 설정 하면 속성이 지워집니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-353">The existing contents of the `Delimiters` property are cleared when this is set.</span></span>  
  
 <span data-ttu-id="e63db-354">이 메서드는 배열을 만들지 않고 구분 기호를 설정 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-354">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="e63db-355">다음 표에서 관련 된 작업의 예제는 `SetFieldWidths` 메서드.</span><span class="sxs-lookup"><span data-stu-id="e63db-355">The following table lists example of tasks involving the `SetFieldWidths` method.</span></span>  
  
|<span data-ttu-id="e63db-356">대상</span><span class="sxs-lookup"><span data-stu-id="e63db-356">To</span></span>|<span data-ttu-id="e63db-357">보기</span><span class="sxs-lookup"><span data-stu-id="e63db-357">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="e63db-358">텍스트 파일 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-358">Parse a text file.</span></span>|[<span data-ttu-id="e63db-359">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</span><span class="sxs-lookup"><span data-stu-id="e63db-359">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="e63db-360">로 필드 너비를 정의 하는이 예제 텍스트 필드 파서를 열고 `5`합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-360">This example opens a text-field parser and defines the field width as `5`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#12)]  
  
 <span data-ttu-id="e63db-361">대체 경로 `C:\logs\test.log` 를 구문 분석할 파일의 이름 및 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-361">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 <span data-ttu-id="e63db-362">다음 예제에서는 텍스트 필드 파서를 열고 필드 폭으로 정의 `5`, `10`, 및 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-362">The following example opens a text-field parser and defines the field widths as `5`, `10`, and variable.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#13)]  
  
 <span data-ttu-id="e63db-363">대체 경로 `C:\logs\test.log` 를 구문 분석할 파일의 이름 및 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-363">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="TextFieldType">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.FileIO.FieldType TextFieldType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFieldType As FieldType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::FileIO::FieldType TextFieldType { Microsoft::VisualBasic::FileIO::FieldType get(); void set(Microsoft::VisualBasic::FileIO::FieldType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.FieldType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e63db-364">구문 분석할 파일이 구분된 파일인지 또는 고정 너비 파일인지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-364">Indicates whether the file to be parsed is delimited or fixed-width.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e63db-365">구문 분석할 파일이 구분된 파일인지 또는 고정 너비 파일인지를 나타내는 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-365">A <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> value that indicates whether the file to be parsed is delimited or fixed-width.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-366">이 속성의 기본값을 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-366">The default value of this property is delimited.</span></span>  
  
 <span data-ttu-id="e63db-367">다음 표에서 관련 된 작업의 예를 보여 줍니다.는 `TextFieldType` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-367">The following table lists examples of tasks involving the `TextFieldType` property.</span></span>  
  
|<span data-ttu-id="e63db-368">대상</span><span class="sxs-lookup"><span data-stu-id="e63db-368">To</span></span>|<span data-ttu-id="e63db-369">보기</span><span class="sxs-lookup"><span data-stu-id="e63db-369">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="e63db-370">구분 기호로 분리 된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-370">Read from a delimited text file</span></span>|[<span data-ttu-id="e63db-371">방법: 쉼표로 구분된 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-371">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="e63db-372">고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-372">Read from a fixed-width text file</span></span>|[<span data-ttu-id="e63db-373">방법: 고정 너비 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-373">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="e63db-374">여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-374">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="e63db-375">방법: 여러 형식의 텍스트 파일에서 읽기</span><span class="sxs-lookup"><span data-stu-id="e63db-375">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="e63db-376">이 예제에서는 만듭니다는 `TextFieldParser`, `FileReader`, 구분 된을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-376">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is delimited.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#19)]  
  
 <span data-ttu-id="e63db-377">이 예제에서는 만듭니다는 `TextFieldParser`, `FileReader`, 고정 폭 임을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-377">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is fixed-width.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public bool TrimWhiteSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimWhiteSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property TrimWhiteSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimWhiteSpace { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e63db-378">필드 값에서 선행 및 후행 공백이 삭제되어야 하는지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-378">Indicates whether leading and trailing white space should be trimmed from field values.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e63db-379">필드 값에서 선행 및 후행 공백을 삭제해야 하는 경우 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e63db-379">
              <see langword="True" /> if leading and trailing white space should be trimmed from field values; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e63db-380">이 속성의 기본값은 `True`입니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-380">The default value for this property is `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e63db-381">이 예제에서는 만듭니다는 `TextFieldParser`, `FileReader`, 설정 및는 `TrimWhiteSpace` 속성을 `True`합니다.</span><span class="sxs-lookup"><span data-stu-id="e63db-381">This example creates a `TextFieldParser`, `FileReader`, and sets the `TrimWhiteSpace` property to `True`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>