<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SecureConversationServiceCredential.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b72d98fa2acd137838a7c052d4ad969b56418ff7ee2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d98fa2acd137838a7c052d4ad969b56418ff7ee2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Security.SecureConversationServiceCredential">
          <source>Provides credential settings for a secure conversation service.</source>
          <target state="translated">보안 대화 서비스의 자격 증명 설정을 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Security.SecureConversationServiceCredential">
          <source>Secure conversations involve the exchange of multiple messages and use a Security Context Token (SCT) to ensure security.</source>
          <target state="translated">보안 대화에서는 여러 메시지를 교환하며 SCT(보안 컨텍스트 토큰)를 사용하여 보안을 보장합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Security.SecureConversationServiceCredential">
          <source>The SCT is shared among the communicating parties for the lifetime of a communications session.</source>
          <target state="translated">SCT는 통신 세션의 수명이 끝날 때까지 통신 당사자 간에 공유됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Security.SecureConversationServiceCredential">
          <source>A service can issue two different kinds of SCTs:</source>
          <target state="translated">하나의 서비스는 두 가지 종류의 SCT를 발급할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Security.SecureConversationServiceCredential">
          <source>The first is a session-based SCT that contains a unique id. Messages carry only the id, and the service maintains a state-mapping cache that maps between the SCT ids and contents (such as claims, security keys, and so on).</source>
          <target state="translated">첫 번째는 고유한 ID를 포함하는 세션 기반의 SCT입니다. 메시지는 ID만 전달하고, 서비스에서 SCT ID와 콘텐츠(예: 클레임, 보안 키 등) 간을 매핑하는 상태 매핑 캐시를 유지합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Security.SecureConversationServiceCredential">
          <source>A well-behaved client must send an SCT cancellation to help the service optimize the cache resources.</source>
          <target state="translated">제대로 작동하는 클라이언트는 서비스가 캐시 리소스를 최적화할 수 있도록 SCT 취소를 보내야 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Security.SecureConversationServiceCredential">
          <source>If you instantiate this class by calling <ph id="ph1">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A&gt;</ph> with the <ph id="ph2">`requireCancellation`</ph> parameter equal to <ph id="ph3">`true`</ph>, the SCT is issued in this manner.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A&gt;</ph> 매개 변수를 <ph id="ph2">`requireCancellation`</ph>로 지정한 <ph id="ph3">`true`</ph>를 호출하여 이 클래스를 인스턴스화할 경우 SCT가 이러한 방식으로 발급됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Security.SecureConversationServiceCredential">
          <source>The second is a self-contained SCT that resides in a cookie on the client.</source>
          <target state="translated">두 번째는 클라이언트의 쿠키에 상주하는 독립적인 SCT입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Security.SecureConversationServiceCredential">
          <source>This SCT contains the entire state information, so requires neither state management from the service nor SCT cancellation from the client.</source>
          <target state="translated">이 SCT는 전체 상태 정보를 포함하므로 서비스의 상태 관리나 클라이언트의 SCT 취소가 필요하지 않습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Security.SecureConversationServiceCredential">
          <source>This is sometimes called a "cookie-mode" SCT.</source>
          <target state="translated">이를 "쿠키 모드" SCT라고도 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Security.SecureConversationServiceCredential">
          <source>Because the SCT contains the entire state information, its size is larger than in the session-based case.</source>
          <target state="translated">SCT에 전체 상태 정보가 포함되므로 세션 기반 경우보다 SCT의 크기가 큽니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Security.SecureConversationServiceCredential">
          <source>With session-based SCTs, the service stores much of the state information.</source>
          <target state="translated">세션 기반 SCT에서는 상태 정보의 대부분이 서비스에 저장됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Security.SecureConversationServiceCredential">
          <source>However, because it is self-contained, it can be used across service lifetime and persists across service shutdown and restart.</source>
          <target state="translated">그러나 이 SCT는 독립적이므로 서비스 수명이 끝날 때까지 사용 가능하며 서비스 종료 후 다시 시작하더라도 지속됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes">
          <source>Gets a collection of the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> claims for cookie serialization.</source>
          <target state="translated">쿠키 serialization을 위한 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 클레임 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes">
          <source>A collection of the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> claims for cookie serialization.</source>
          <target state="translated">쿠키 serialization을 위한 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 클레임 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes">
          <source>To serialize claims into SCT cookies, <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> uses <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> as the default.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph>에서는 클레임을 SCT 쿠키로 serialize하는 데 <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>를 기본적으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes">
          <source>Because the Claim resource is extensible, WCF allows you to provide a list of known resource types.</source>
          <target state="translated">클레임 리소스는 확장이 가능 하기 때문에 WCF를 사용 하면 알려진된 리소스 형식의 목록을 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes">
          <source>This assists the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> during deserialization of the claims in the cookie so that it can return the original strongly-typed objects.</source>
          <target state="translated">이 목록은 <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>에서 쿠키의 클레임을 deserialize할 때 원래의 강력한 형식 개체를 반환할 수 있도록 지원합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes">
          <source>The following code shows how to get this property.</source>
          <target state="translated">다음 코드에서는 이 속성을 가져오는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder">
          <source>Gets or sets a customized <ph id="ph1">&lt;see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /&gt;</ph> for encoding and decoding cookie serialization.</source>
          <target state="translated">쿠키 serialization을 인코딩 및 디코딩하는 데 사용되는 사용자 지정 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /&gt;</ph>를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder">
          <source>A <ph id="ph1">&lt;see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /&gt;</ph> object, which is a customization of <ph id="ph2">&lt;see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /&gt;</ph>의 사용자 지정 <ph id="ph2">&lt;see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder">
          <source>In "cookie mode", a service issues the client a security context token (SCT) in the form of a cookie to the client so that it does not have to maintain any security state.</source>
          <target state="translated">"쿠키 모드"에서 서비스는 SCT(보안 컨텍스트 토큰)를 쿠키 형태로 클라이언트에 발급하므로 클라이언트가 보안 상태를 유지할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder">
          <source>The client sends the cookie back in the request message so that the service knows how to unprotect and verify the request message.</source>
          <target state="translated">클라이언트는 서비스에서 요청 메시지를 보호 해제하고 확인하는 방법을 알 수 있도록 요청 메시지에 쿠키를 돌려 보냅니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder">
          <source>Because the SCT is often transmitted over a non-secure network, it must be protected.</source>
          <target state="translated">SCT는 비보안 네트워크를 통해 전송되는 경우가 많으므로 보호해야 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder">
          <source>By default, <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> uses the <ph id="ph2">&lt;xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder&gt;</ph> class to protect the cookie using the Data Protection API (DPAPI).</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph>에서는 기본적으로 <ph id="ph2">&lt;xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder&gt;</ph> 클래스를 활용하여 DPAPI(데이터 보호 API)를 사용하는 쿠키를 보호합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder">
          <source>For DPAPI to work in a Web farm environment, all the backend services must run as the same domain user account.</source>
          <target state="translated">DPAPI가 웹 팜 환경에서 제대로 작동하려면 모든 백엔드 서비스가 동일한 도메인 사용자 계정으로 실행되어야 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder">
          <source>In other words, if the service is Web hosted, then the Internet Information Services (IIS) worker process must be configured to run as a domain user.</source>
          <target state="translated">즉 서비스가 웹 호스팅되는 경우 IIS(인터넷 정보 서비스) 작업자 프로세스는 도메인 사용자로 실행되도록 구성되어야 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder">
          <source>This property enables you to use a customized <ph id="ph1">&lt;xref:System.ServiceModel.Security.SecurityStateEncoder&gt;</ph> to encrypt and decrypt the cookie and not depend on DPAPI.</source>
          <target state="translated">이 속성을 사용하면 사용자 지정 <ph id="ph1">&lt;xref:System.ServiceModel.Security.SecurityStateEncoder&gt;</ph>를 사용하여 쿠키를 암호화하고 해독할 수 있으므로 DPAPI를 사용할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder">
          <source>The following code shows how to set this property.</source>
          <target state="translated">다음 코드에서는 이 속성을 설정하는 방법을 보여 줍니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>