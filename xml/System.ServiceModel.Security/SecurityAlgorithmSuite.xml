<Type Name="SecurityAlgorithmSuite" FullName="System.ServiceModel.Security.SecurityAlgorithmSuite">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bba205969a7d85a569c284e9353de5d99b749631" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48765071" /></Metadata><TypeSignature Language="C#" Value="public abstract class SecurityAlgorithmSuite" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract SecurityAlgorithmSuite extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SecurityAlgorithmSuite" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityAlgorithmSuite abstract" />
  <TypeSignature Language="F#" Value="type SecurityAlgorithmSuite = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ServiceModel.Configuration.SecurityAlgorithmSuiteConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="86ea0-101">알고리즘의 속성을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-101">Specifies properties of algorithms.</span></span> <span data-ttu-id="86ea0-102">이 클래스는 <see langword="abstract" /> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-102">This is an <see langword="abstract" /> class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-103">이 클래스의 인스턴스는 메시지에 보안을 설정할 때 사용되는 알고리즘의 암호화 특성을 지정하는 데 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-103">Instances of this class are used to specify the cryptographic characteristics of the algorithms used when securing messages.</span></span>  
  
 <span data-ttu-id="86ea0-104">이 클래스는 보안 알고리즘 모음을 인스턴스화할 파생 클래스에 의해 사용되며, 보안 알고리즘을 설명하는 속성을 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-104">This class is used by derived classes to instantiate security algorithm suites, and contains properties that describe the security algorithms.</span></span> <span data-ttu-id="86ea0-105">예를 들어 `wsBasicHttp` 바인딩은 내부 파생 클래스를 사용하여 보안 알고리즘의 속성을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-105">For example, the `wsBasicHttp` binding uses an internal derived class to specify the properties of its security algorithms.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SecurityAlgorithmSuite ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.SecurityAlgorithmSuite.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SecurityAlgorithmSuite();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86ea0-106"><see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-106">Initializes a new instance of the <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-107">이 클래스의 인스턴스는 정적 속성 및 읽기 전용 속성으로 구성되므로 생성자는 속성을 초기화하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-107">The instances of this class consist of static properties and read-only properties, so the constructor does not initialize any properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Basic128">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic128 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite Basic128" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Basic128 As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ Basic128 { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Basic128 : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-108">Basic128 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-108">Gets the Basic128 algorithm suite.</span></span></summary>
        <value><span data-ttu-id="86ea0-109">128비트 Basic <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-109">The 128-bit Basic <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-110">기본적으로 AES-128 암호화 알고리즘으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-110">By default, AES-128 is used as the encryption algorithm.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Basic128Rsa15">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic128Rsa15 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite Basic128Rsa15" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128Rsa15" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Basic128Rsa15 As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ Basic128Rsa15 { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Basic128Rsa15 : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128Rsa15" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-111">키 래핑 알고리즘으로 RSA15를 사용하고 메시지 암호화 알고리즘으로 128비트 Basic을 사용하는 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-111">Gets an algorithm suite that uses RSA15 as the key wrap algorithm and 128-bit Basic as the message encryption algorithm.</span></span></summary>
        <value><span data-ttu-id="86ea0-112">키 래핑 알고리즘으로 RSA15를 사용하고 메시지 암호화 알고리즘으로 128비트 Basic을 사용하는 알고리즘 모음입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-112">An algorithm suite that uses RSA15 as the key wrap algorithm and 128-bit Basic as the message encryption algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-113">반환된 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>는 기본값을 지정하는 일부 속성 및 일부 메서드를 재정의하는 내부 서브클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-113">The <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> returned is actually an internal subclass that overrides some of the properties specifying default values as well as some of the methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Basic128Sha256">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic128Sha256 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite Basic128Sha256" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128Sha256" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Basic128Sha256 As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ Basic128Sha256 { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Basic128Sha256 : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128Sha256" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-114">서명 다이제스트에 SHA256을 사용하고 메시지 암호화 알고리즘으로 128비트 Basic을 사용하는 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-114">Gets an algorithm suite that uses SHA256 for the signature digest and 128-bit Basic as the message encryption algorithm.</span></span></summary>
        <value><span data-ttu-id="86ea0-115">서명 다이제스트에 SHA256을 사용하고 메시지 암호화 알고리즘으로 128비트 Basic을 사용하는 알고리즘 모음입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-115">An algorithm suite that uses SHA256 for the signature digest and 128-bit Basic as the message encryption algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-116">반환된 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>는 기본값을 지정하는 일부 속성 및 일부 메서드를 재정의하는 내부 서브클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-116">The <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> returned is actually an internal subclass that overrides some of the properties specifying default values as well as some of the methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Basic128Sha256Rsa15">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic128Sha256Rsa15 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite Basic128Sha256Rsa15" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128Sha256Rsa15" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Basic128Sha256Rsa15 As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ Basic128Sha256Rsa15 { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Basic128Sha256Rsa15 : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.Basic128Sha256Rsa15" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-117">키 래핑 알고리즘으로 RSA15를 사용하고 서명 다이제스트에 SHA256을 사용하며 메시지 암호화 알고리즘으로 128비트 Basic을 사용하는 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-117">Gets an algorithm suite that uses RSA15 as the key wrap algorithm, SHA256 for the signature digest, and 128-bit Basic as the message encryption algorithm.</span></span></summary>
        <value><span data-ttu-id="86ea0-118">키 래핑 알고리즘으로 RSA15를 사용하고 서명 다이제스트에 SHA256을 사용하며 메시지 암호화 알고리즘으로 128비트 Basic을 사용하는 알고리즘 모음입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-118">An algorithm suite that uses RSA15 as the key wrap algorithm, SHA256 for the signature digest, and 128-bit Basic as the message encryption algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-119">반환된 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>는 기본값을 지정하는 일부 속성 및 일부 메서드를 재정의하는 내부 서브클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-119">The <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> returned is actually an internal subclass that overrides some of the properties specifying default values as well as some of the methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Basic192">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic192 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite Basic192" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic192" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Basic192 As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ Basic192 { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Basic192 : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.Basic192" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-120">메시지 암호화 알고리즘으로 192비트 Basic을 사용하는 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-120">Gets an algorithm suite that uses 192-bit Basic as the message encryption algorithm.</span></span></summary>
        <value><span data-ttu-id="86ea0-121">메시지 암호화 알고리즘으로 192비트 Basic을 사용하는 알고리즘 모음입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-121">An algorithm suite that uses 192-bit Basic as the message encryption algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-122">기본적으로 AES-192가 암호화 알고리즘으로 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-122">By default, AES-192 is used as the encryption algorithm.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Basic192Rsa15">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic192Rsa15 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite Basic192Rsa15" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic192Rsa15" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Basic192Rsa15 As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ Basic192Rsa15 { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Basic192Rsa15 : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.Basic192Rsa15" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-123">키 래핑 알고리즘으로 RSA15를 사용하고 메시지 암호화 알고리즘으로 192비트 Basic을 사용하는 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-123">Gets an algorithm suite that uses RSA15 as the key wrap algorithm and 192-bit Basic as the message encryption algorithm.</span></span></summary>
        <value><span data-ttu-id="86ea0-124">키 래핑 알고리즘으로 192 비트 Basic 메시지 암호화 알고리즘으로 RSA15를 사용 하는 알고리즘 모음입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-124">An algorithm suite that uses RSA15 as the key wrap algorithm and 192-bit Basic as the message encryption algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-125">반환된 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>는 기본값을 지정하는 일부 속성 및 일부 메서드를 재정의하는 내부 서브클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-125">The <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> returned is actually an internal subclass that overrides some of the properties specifying default values as well as some of the methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Basic192Sha256">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic192Sha256 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite Basic192Sha256" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic192Sha256" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Basic192Sha256 As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ Basic192Sha256 { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Basic192Sha256 : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.Basic192Sha256" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-126">서명 다이제스트에 SHA256을 사용하고 메시지 암호화 알고리즘으로 192비트 Basic을 사용하는 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-126">Gets an algorithm suite which uses SHA256 for the signature digest and 192-bit Basic as the message encryption algorithm.</span></span></summary>
        <value><span data-ttu-id="86ea0-127">서명 다이제스트에 SHA256을 사용하고 메시지 암호화 알고리즘으로 192비트 Basic을 사용하는 알고리즘 모음입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-127">An algorithm suite which uses SHA256 for the signature digest and 192-bit Basic as the message encryption algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-128">반환된 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>는 기본값을 지정하는 일부 속성 및 일부 메서드를 재정의하는 내부 서브클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-128">The <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> returned is actually an internal subclass that overrides some of the properties specifying default values as well as some of the methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Basic192Sha256Rsa15">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic192Sha256Rsa15 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite Basic192Sha256Rsa15" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic192Sha256Rsa15" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Basic192Sha256Rsa15 As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ Basic192Sha256Rsa15 { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Basic192Sha256Rsa15 : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.Basic192Sha256Rsa15" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-129">키 래핑 알고리즘으로 RSA15를 사용하고 서명 다이제스트에 SHA256을 사용하며 메시지 암호화 알고리즘으로 192비트 Basic을 사용하는 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-129">Gets an algorithm suite that uses RSA15 as the key wrap algorithm, SHA256 for the signature digest, and 192-bit Basic as the message encryption algorithm.</span></span></summary>
        <value><span data-ttu-id="86ea0-130">메시지 암호화 알고리즘으로 서명 다이제스트에 SHA256 및 192 비트 Basic 키 래핑 알고리즘으로 RSA15를 사용 하는 알고리즘 모음입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-130">An algorithm suite that uses RSA15 as the key wrap algorithm, SHA256 for the signature digest, and 192-bit Basic as the message encryption algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-131">반환된 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>는 기본값을 지정하는 일부 속성 및 일부 메서드를 재정의하는 내부 서브클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-131">The <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> returned is actually an internal subclass that overrides some of the properties specifying default values as well as some of the methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Basic256">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic256 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite Basic256" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Basic256 As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ Basic256 { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Basic256 : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-132">메시지 암호화 알고리즘으로 256비트 Basic을 사용하는 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-132">Gets an algorithm suite that uses 256-bit Basic as the message encryption algorithm.</span></span></summary>
        <value><span data-ttu-id="86ea0-133">메시지 암호화 알고리즘으로 256 비트 Basic을 사용 하는 알고리즘 모음입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-133">An algorithm suite that uses 256-bit Basic as the message encryption algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-134">기본적으로 AES-256이 암호화 알고리즘에 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-134">By default, AES-256 is used for the encryption algorithm.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86ea0-135">다음 코드에서는 <xref:System.ServiceModel.MessageSecurityOverHttp.AlgorithmSuite%2A>를 이 속성으로 설정하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-135">The following code shows how to set <xref:System.ServiceModel.MessageSecurityOverHttp.AlgorithmSuite%2A> to this property.</span></span>  
  
 [!code-csharp[c_ProgrammingSecurity#8](~/samples/snippets/csharp/VS_Snippets_CFX/c_programmingsecurity/cs/source.cs#8)]
 [!code-vb[c_ProgrammingSecurity#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_programmingsecurity/vb/source.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Basic256Rsa15">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic256Rsa15 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite Basic256Rsa15" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256Rsa15" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Basic256Rsa15 As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ Basic256Rsa15 { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Basic256Rsa15 : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256Rsa15" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-136">키 래핑 알고리즘으로 RSA15를 사용하고 메시지 암호화 알고리즘으로 256비트 Basic을 사용하는 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-136">Gets an algorithm suite that uses RSA15 as the key wrap algorithm and 256-bit Basic as the message encryption algorithm.</span></span></summary>
        <value><span data-ttu-id="86ea0-137">키 래핑 알고리즘으로 256 비트 Basic 메시지 암호화 알고리즘으로 RSA15를 사용 하는 알고리즘 모음입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-137">An algorithm suite that uses RSA15 as the key wrap algorithm and 256-bit Basic as the message encryption algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-138">반환된 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>는 기본값을 지정하는 일부 속성 및 일부 메서드를 재정의하는 내부 서브클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-138">The <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> returned is actually an internal subclass that overrides some of the properties specifying default values as well as some of the methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Basic256Sha256">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic256Sha256 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite Basic256Sha256" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256Sha256" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Basic256Sha256 As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ Basic256Sha256 { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Basic256Sha256 : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256Sha256" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-139">서명 다이제스트에 SHA256을 사용하고 메시지 암호화 알고리즘으로 256비트 Basic을 사용하는 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-139">Gets an algorithm suite that uses SHA256 for the signature digest and 256-bit Basic as the message encryption algorithm.</span></span></summary>
        <value><span data-ttu-id="86ea0-140">메시지 암호화 알고리즘으로 256 비트 Basic 서명 다이제스트에 SHA256을 사용 하는 알고리즘 모음입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-140">An algorithm suite that uses SHA256 for the signature digest and 256-bit Basic as the message encryption algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-141">반환된 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>는 기본값을 지정하는 일부 속성 및 일부 메서드를 재정의하는 내부 서브클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-141">The <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> returned is actually an internal subclass that overrides some of the properties specifying default values as well as some of the methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Basic256Sha256Rsa15">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite Basic256Sha256Rsa15 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite Basic256Sha256Rsa15" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256Sha256Rsa15" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Basic256Sha256Rsa15 As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ Basic256Sha256Rsa15 { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Basic256Sha256Rsa15 : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256Sha256Rsa15" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-142">키 래핑 알고리즘으로 RSA15를 사용하고 서명 다이제스트에 SHA256을 사용하며 메시지 암호화 알고리즘으로 256비트 Basic을 사용하는 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-142">Gets an algorithm suite that uses RSA15 as the key wrap algorithm, SHA256 for the signature digest, and 256-bit Basic as the message encryption algorithm.</span></span></summary>
        <value><span data-ttu-id="86ea0-143">키 래핑 알고리즘으로 RSA15를 사용하고 서명 다이제스트에 SHA256을 사용하며 메시지 암호화 알고리즘으로 256비트 Basic을 사용하는 알고리즘 모음입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-143">An algorithm suite that uses RSA15 as the key wrap algorithm, SHA256 for the signature digest, and 256-bit Basic as the message encryption algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-144">반환된 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>는 기본값을 지정하는 일부 속성 및 일부 메서드를 재정의하는 내부 서브클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-144">The <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> returned is actually an internal subclass that overrides some of the properties specifying default values as well as some of the methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite Default" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ Default { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-145">기본 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-145">Gets the default algorithm suite.</span></span></summary>
        <value><span data-ttu-id="86ea0-146">기본 <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />는 256비트 AES(Advanced Encryption Standard)를 대칭 암호화 알고리즘으로 지정하는<see cref="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" />입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-146">The default <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> is <see cref="P:System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256" />, which specifies 256-bit Advanced Encryption Standard (AES) as the symmetric encryption algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-147">반환된 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>는 기본값을 지정하는 속성 및 메서드를 재정의하는 내부 서브클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-147">The <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> returned is actually an internal subclass that overrides the properties specifying default values as well as the methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultAsymmetricKeyWrapAlgorithm">
      <MemberSignature Language="C#" Value="public abstract string DefaultAsymmetricKeyWrapAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultAsymmetricKeyWrapAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DefaultAsymmetricKeyWrapAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DefaultAsymmetricKeyWrapAlgorithm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultAsymmetricKeyWrapAlgorithm : string" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-148">기본 비대칭 키 래핑 알고리즘을 문자열로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-148">Gets the default asymmetric key wrap algorithm as a string.</span></span></summary>
        <value><span data-ttu-id="86ea0-149">기본 비대칭 키 래핑 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-149">The default asymmetric key wrap algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-150">재정의 시 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.IsAsymmetricKeyWrapAlgorithmSupported%2A> 메서드에서의 비교에 사용할 문자열 값을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-150">When overridden, provides a string value that will be used for comparison in the <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.IsAsymmetricKeyWrapAlgorithmSupported%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultAsymmetricSignatureAlgorithm">
      <MemberSignature Language="C#" Value="public abstract string DefaultAsymmetricSignatureAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultAsymmetricSignatureAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DefaultAsymmetricSignatureAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DefaultAsymmetricSignatureAlgorithm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultAsymmetricSignatureAlgorithm : string" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-151">기본 비대칭 서명 알고리즘을 문자열로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-151">Gets the default asymmetric signature algorithm as a string.</span></span></summary>
        <value><span data-ttu-id="86ea0-152">기본 비대칭 서명 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-152">The default asymmetric signature algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-153">재정의 시 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.IsAsymmetricSignatureAlgorithmSupported%2A> 메서드에서의 비교에 사용할 문자열 값을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-153">When overridden, provides a string value that will be used for comparison in the <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.IsAsymmetricSignatureAlgorithmSupported%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultCanonicalizationAlgorithm">
      <MemberSignature Language="C#" Value="public abstract string DefaultCanonicalizationAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultCanonicalizationAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DefaultCanonicalizationAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DefaultCanonicalizationAlgorithm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultCanonicalizationAlgorithm : string" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-154">기본 정형화 알고리즘을 문자열로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-154">Gets the default canonicalization algorithm as a string.</span></span></summary>
        <value><span data-ttu-id="86ea0-155">기본 정식화 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-155">The default canonicalization algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-156">재정의 시 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.IsCanonicalizationAlgorithmSupported%2A> 메서드에서의 비교에 사용할 문자열 값을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-156">When overridden, provides a string value that will be used for comparison in the method <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.IsCanonicalizationAlgorithmSupported%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultDigestAlgorithm">
      <MemberSignature Language="C#" Value="public abstract string DefaultDigestAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultDigestAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultDigestAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DefaultDigestAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DefaultDigestAlgorithm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultDigestAlgorithm : string" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultDigestAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-157">기본 다이제스트 알고리즘을 문자열로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-157">Gets the default digest algorithm as a string.</span></span></summary>
        <value><span data-ttu-id="86ea0-158">기본 다이제스트 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-158">The default digest algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-159">재정의 시 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.IsDigestAlgorithmSupported%2A> 메서드에서의 비교에 사용할 문자열 값을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-159">When overridden, provides a string value that will be used for comparison in the <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.IsDigestAlgorithmSupported%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultEncryptionAlgorithm">
      <MemberSignature Language="C#" Value="public abstract string DefaultEncryptionAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultEncryptionAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultEncryptionAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DefaultEncryptionAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DefaultEncryptionAlgorithm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultEncryptionAlgorithm : string" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultEncryptionAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-160">기본 암호화 알고리즘을 문자열로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-160">Gets the default encryption algorithm as a string.</span></span></summary>
        <value><span data-ttu-id="86ea0-161">기본 암호화 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-161">The default encryption algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-162">재정의 시 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.IsEncryptionAlgorithmSupported%2A> 메서드에서의 비교에 사용할 문자열 값을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-162">When overridden, provides a string value that will be used for comparison in the <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.IsEncryptionAlgorithmSupported%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultEncryptionKeyDerivationLength">
      <MemberSignature Language="C#" Value="public abstract int DefaultEncryptionKeyDerivationLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DefaultEncryptionKeyDerivationLength" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultEncryptionKeyDerivationLength" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DefaultEncryptionKeyDerivationLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int DefaultEncryptionKeyDerivationLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultEncryptionKeyDerivationLength : int" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultEncryptionKeyDerivationLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-163"><see cref="T:System.Int32" /> 값으로 기본 암호화 키 파생 길이를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-163">Gets the default encryption key derivation length as an <see cref="T:System.Int32" /> value.</span></span></summary>
        <value><span data-ttu-id="86ea0-164">기본 암호화 키 파생 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-164">The default encryption key derivation length.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-165">반환되는 값은 이를 구현하는 서브클래스에 따라 달라집니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-165">The returned value will vary depending on the subclass that implements it.</span></span> <span data-ttu-id="86ea0-166">`Basic256` 암호화의 경우 256을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-166">For `Basic256` encryption, it returns 256.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSignatureKeyDerivationLength">
      <MemberSignature Language="C#" Value="public abstract int DefaultSignatureKeyDerivationLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DefaultSignatureKeyDerivationLength" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultSignatureKeyDerivationLength" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DefaultSignatureKeyDerivationLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int DefaultSignatureKeyDerivationLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSignatureKeyDerivationLength : int" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultSignatureKeyDerivationLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-167"><see cref="T:System.Int32" /> 값으로 기본 서명 키 파생 길이를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-167">Gets the default signature key derivation length as an <see cref="T:System.Int32" /> value.</span></span></summary>
        <value><span data-ttu-id="86ea0-168">기본 서명 키 파생 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-168">The default signature key derivation length.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-169">반환되는 값은 이를 구현하는 서브클래스에 따라 달라집니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-169">The returned value will vary depending on the subclass that implements it.</span></span> <span data-ttu-id="86ea0-170">에 대 한 `Basic256` 암호화, 192 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-170">For `Basic256` encryption, it returns 192.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSymmetricKeyLength">
      <MemberSignature Language="C#" Value="public abstract int DefaultSymmetricKeyLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DefaultSymmetricKeyLength" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultSymmetricKeyLength" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DefaultSymmetricKeyLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int DefaultSymmetricKeyLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSymmetricKeyLength : int" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultSymmetricKeyLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-171"><see cref="T:System.Int32" /> 값으로 기본 대칭 키 길이를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-171">Gets the default symmetric key length as an <see cref="T:System.Int32" /> value.</span></span></summary>
        <value><span data-ttu-id="86ea0-172">기본 대칭 키 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-172">The default symmetric key length.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-173">반환되는 값은 이를 구현하는 서브클래스에 따라 달라집니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-173">The returned value will vary depending on the subclass that implements it.</span></span> <span data-ttu-id="86ea0-174">`Basic256` 암호화의 경우 256을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-174">For `Basic256` encryption, it returns 256.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSymmetricKeyWrapAlgorithm">
      <MemberSignature Language="C#" Value="public abstract string DefaultSymmetricKeyWrapAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultSymmetricKeyWrapAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultSymmetricKeyWrapAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DefaultSymmetricKeyWrapAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DefaultSymmetricKeyWrapAlgorithm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSymmetricKeyWrapAlgorithm : string" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultSymmetricKeyWrapAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-175">기본 대칭 키 래핑 알고리즘을 문자열로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-175">Gets the default symmetric key wrap algorithm as a string.</span></span></summary>
        <value><span data-ttu-id="86ea0-176">기본 대칭 키 래핑 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-176">The default symmetric key wrap algorithm.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSymmetricSignatureAlgorithm">
      <MemberSignature Language="C#" Value="public abstract string DefaultSymmetricSignatureAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultSymmetricSignatureAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultSymmetricSignatureAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DefaultSymmetricSignatureAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DefaultSymmetricSignatureAlgorithm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSymmetricSignatureAlgorithm : string" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultSymmetricSignatureAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-177">기본 대칭 서명 알고리즘을 문자열로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-177">Gets the default symmetric signature algorithm as a string.</span></span></summary>
        <value><span data-ttu-id="86ea0-178">기본 대칭 서명 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-178">The default symmetric signature algorithm.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAsymmetricKeyLengthSupported">
      <MemberSignature Language="C#" Value="public abstract bool IsAsymmetricKeyLengthSupported (int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAsymmetricKeyLengthSupported(int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsAsymmetricKeyLengthSupported(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsAsymmetricKeyLengthSupported (length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsAsymmetricKeyLengthSupported(int length);" />
      <MemberSignature Language="F#" Value="abstract member IsAsymmetricKeyLengthSupported : int -&gt; bool" Usage="securityAlgorithmSuite.IsAsymmetricKeyLengthSupported length" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="length"><span data-ttu-id="86ea0-179">확인할 키 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-179">The key length to check.</span></span></param>
        <summary><span data-ttu-id="86ea0-180">특정 키 길이를 비대칭 알고리즘에서 지원할지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-180">Indicates whether a particular key length is supported by the asymmetric algorithm.</span></span></summary>
        <returns><span data-ttu-id="86ea0-181">키 길이가 비대칭 알고리즘에서 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-181"><see langword="true" /> if the key length is supported by the asymmetric algorithm; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-182">일반적인 키 길이는 128, 192 및 256비트입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-182">Typical key lengths are 128, 192, and 256 bits.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAsymmetricKeyWrapAlgorithmSupported">
      <MemberSignature Language="C#" Value="public virtual bool IsAsymmetricKeyWrapAlgorithmSupported (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAsymmetricKeyWrapAlgorithmSupported(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsAsymmetricKeyWrapAlgorithmSupported(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsAsymmetricKeyWrapAlgorithmSupported (algorithm As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAsymmetricKeyWrapAlgorithmSupported(System::String ^ algorithm);" />
      <MemberSignature Language="F#" Value="abstract member IsAsymmetricKeyWrapAlgorithmSupported : string -&gt; bool&#xA;override this.IsAsymmetricKeyWrapAlgorithmSupported : string -&gt; bool" Usage="securityAlgorithmSuite.IsAsymmetricKeyWrapAlgorithmSupported algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="86ea0-183">확인할 알고리즘입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-183">The algorithm to check.</span></span></param>
        <summary><span data-ttu-id="86ea0-184">비대칭 키 래핑 알고리즘이 지원되는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-184">Indicates whether an asymmetric key wrap algorithm is supported.</span></span></summary>
        <returns><span data-ttu-id="86ea0-185">비대칭 키 래핑 알고리즘이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-185"><see langword="true" /> if the asymmetric key wrap algorithm is supported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-186">`algorithm`은 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm%2A>에서 반환하는 문자열과 비교됩니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-186">`algorithm` gets compared to the string returned from <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAsymmetricSignatureAlgorithmSupported">
      <MemberSignature Language="C#" Value="public virtual bool IsAsymmetricSignatureAlgorithmSupported (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAsymmetricSignatureAlgorithmSupported(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsAsymmetricSignatureAlgorithmSupported(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsAsymmetricSignatureAlgorithmSupported (algorithm As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAsymmetricSignatureAlgorithmSupported(System::String ^ algorithm);" />
      <MemberSignature Language="F#" Value="abstract member IsAsymmetricSignatureAlgorithmSupported : string -&gt; bool&#xA;override this.IsAsymmetricSignatureAlgorithmSupported : string -&gt; bool" Usage="securityAlgorithmSuite.IsAsymmetricSignatureAlgorithmSupported algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="86ea0-187">확인할 알고리즘 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-187">The algorithm name to check.</span></span></param>
        <summary><span data-ttu-id="86ea0-188">비대칭 서명 알고리즘이 지원되는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-188">Indicates whether an asymmetric signature algorithm is supported.</span></span></summary>
        <returns><span data-ttu-id="86ea0-189">비대칭 서명 알고리즘이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-189"><see langword="true" /> if the asymmetric signature algorithm is supported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-190">`algorithm`은 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm%2A>에서 반환하는 문자열과 비교됩니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-190">`algorithm` gets compared to the string returned from <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCanonicalizationAlgorithmSupported">
      <MemberSignature Language="C#" Value="public virtual bool IsCanonicalizationAlgorithmSupported (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsCanonicalizationAlgorithmSupported(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsCanonicalizationAlgorithmSupported(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsCanonicalizationAlgorithmSupported (algorithm As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsCanonicalizationAlgorithmSupported(System::String ^ algorithm);" />
      <MemberSignature Language="F#" Value="abstract member IsCanonicalizationAlgorithmSupported : string -&gt; bool&#xA;override this.IsCanonicalizationAlgorithmSupported : string -&gt; bool" Usage="securityAlgorithmSuite.IsCanonicalizationAlgorithmSupported algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="86ea0-191">확인할 알고리즘 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-191">The algorithm name to check.</span></span></param>
        <summary><span data-ttu-id="86ea0-192">정형화 알고리즘이 지원되는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-192">Indicates whether a canonicalization algorithm is supported.</span></span></summary>
        <returns><span data-ttu-id="86ea0-193">정형화 알고리즘이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-193"><see langword="true" /> if the canonicalization algorithm is supported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-194">`algorithm`은 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm%2A>에서 반환하는 문자열과 비교됩니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-194">`algorithm` gets compared to the string returned from <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDigestAlgorithmSupported">
      <MemberSignature Language="C#" Value="public virtual bool IsDigestAlgorithmSupported (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDigestAlgorithmSupported(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsDigestAlgorithmSupported(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsDigestAlgorithmSupported (algorithm As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsDigestAlgorithmSupported(System::String ^ algorithm);" />
      <MemberSignature Language="F#" Value="abstract member IsDigestAlgorithmSupported : string -&gt; bool&#xA;override this.IsDigestAlgorithmSupported : string -&gt; bool" Usage="securityAlgorithmSuite.IsDigestAlgorithmSupported algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="86ea0-195">확인할 알고리즘 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-195">The algorithm name to check.</span></span></param>
        <summary><span data-ttu-id="86ea0-196">다이제스트 알고리즘이 지원되는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-196">Indicates whether a digest algorithm is supported.</span></span></summary>
        <returns><span data-ttu-id="86ea0-197">다이제스트 알고리즘이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-197"><see langword="true" /> if the digest algorithm is supported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-198">`algorithm`은 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultDigestAlgorithm%2A>에서 반환하는 문자열과 비교됩니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-198">`algorithm` gets compared to the string returned from <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultDigestAlgorithm%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncryptionAlgorithmSupported">
      <MemberSignature Language="C#" Value="public virtual bool IsEncryptionAlgorithmSupported (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEncryptionAlgorithmSupported(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsEncryptionAlgorithmSupported(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEncryptionAlgorithmSupported (algorithm As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEncryptionAlgorithmSupported(System::String ^ algorithm);" />
      <MemberSignature Language="F#" Value="abstract member IsEncryptionAlgorithmSupported : string -&gt; bool&#xA;override this.IsEncryptionAlgorithmSupported : string -&gt; bool" Usage="securityAlgorithmSuite.IsEncryptionAlgorithmSupported algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="86ea0-199">확인할 알고리즘 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-199">The algorithm name to check.</span></span></param>
        <summary><span data-ttu-id="86ea0-200">암호화 알고리즘이 지원되는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-200">Indicates whether an encryption algorithm is supported.</span></span></summary>
        <returns><span data-ttu-id="86ea0-201">암호화 알고리즘이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-201"><see langword="true" /> if the encryption algorithm is supported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-202">`algorithm`은 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultEncryptionAlgorithm%2A>에서 반환하는 문자열과 비교됩니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-202">`algorithm` gets compared to the string returned from <xref:System.ServiceModel.Security.SecurityAlgorithmSuite.DefaultEncryptionAlgorithm%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncryptionKeyDerivationAlgorithmSupported">
      <MemberSignature Language="C#" Value="public virtual bool IsEncryptionKeyDerivationAlgorithmSupported (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEncryptionKeyDerivationAlgorithmSupported(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsEncryptionKeyDerivationAlgorithmSupported(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEncryptionKeyDerivationAlgorithmSupported (algorithm As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEncryptionKeyDerivationAlgorithmSupported(System::String ^ algorithm);" />
      <MemberSignature Language="F#" Value="abstract member IsEncryptionKeyDerivationAlgorithmSupported : string -&gt; bool&#xA;override this.IsEncryptionKeyDerivationAlgorithmSupported : string -&gt; bool" Usage="securityAlgorithmSuite.IsEncryptionKeyDerivationAlgorithmSupported algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="86ea0-203">확인할 알고리즘 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-203">The algorithm name to check.</span></span></param>
        <summary><span data-ttu-id="86ea0-204">암호화 키 파생 알고리즘이 지원되는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-204">Indicates whether an encryption key derivation algorithm is supported.</span></span></summary>
        <returns><span data-ttu-id="86ea0-205">암호화 키 파생 알고리즘이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-205"><see langword="true" /> if the encryption key derivation algorithm is supported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSignatureKeyDerivationAlgorithmSupported">
      <MemberSignature Language="C#" Value="public virtual bool IsSignatureKeyDerivationAlgorithmSupported (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSignatureKeyDerivationAlgorithmSupported(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsSignatureKeyDerivationAlgorithmSupported(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSignatureKeyDerivationAlgorithmSupported (algorithm As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSignatureKeyDerivationAlgorithmSupported(System::String ^ algorithm);" />
      <MemberSignature Language="F#" Value="abstract member IsSignatureKeyDerivationAlgorithmSupported : string -&gt; bool&#xA;override this.IsSignatureKeyDerivationAlgorithmSupported : string -&gt; bool" Usage="securityAlgorithmSuite.IsSignatureKeyDerivationAlgorithmSupported algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="86ea0-206">확인할 알고리즘 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-206">The algorithm name to check.</span></span></param>
        <summary><span data-ttu-id="86ea0-207">서명 키 파생 알고리즘이 지원되는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-207">Indicates whether a signature key derivation algorithm is supported.</span></span></summary>
        <returns><span data-ttu-id="86ea0-208">서명 키 파생 알고리즘이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-208"><see langword="true" /> if the signature key derivation algorithm is supported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSymmetricKeyLengthSupported">
      <MemberSignature Language="C#" Value="public abstract bool IsSymmetricKeyLengthSupported (int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSymmetricKeyLengthSupported(int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsSymmetricKeyLengthSupported(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsSymmetricKeyLengthSupported (length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsSymmetricKeyLengthSupported(int length);" />
      <MemberSignature Language="F#" Value="abstract member IsSymmetricKeyLengthSupported : int -&gt; bool" Usage="securityAlgorithmSuite.IsSymmetricKeyLengthSupported length" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="length"><span data-ttu-id="86ea0-209">확인할 키 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-209">The key length to check.</span></span></param>
        <summary><span data-ttu-id="86ea0-210">파생 클래스에서 재정의할 때 특정 대칭 키 길이가 지원되는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-210">When overridden in a derived class, indicates whether a particular symmetric key length is supported.</span></span></summary>
        <returns><span data-ttu-id="86ea0-211">대칭 키 길이가 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-211"><see langword="true" /> if the symmetric key length is supported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-212">`length`는 서브클래스에 따른 값의 범위와 비교됩니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-212">The `length` is compared to a range of values depending on the subclass.</span></span> <span data-ttu-id="86ea0-213">예를 들어 `TripleDES` 서브클래스에서 이 메서드는 `length`가 192와 256의 사이에 있음을 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-213">For example, in the `TripleDES` subclass, this method verifies that `length` is between 192 and 256, inclusive.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSymmetricKeyWrapAlgorithmSupported">
      <MemberSignature Language="C#" Value="public virtual bool IsSymmetricKeyWrapAlgorithmSupported (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSymmetricKeyWrapAlgorithmSupported(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsSymmetricKeyWrapAlgorithmSupported(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSymmetricKeyWrapAlgorithmSupported (algorithm As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSymmetricKeyWrapAlgorithmSupported(System::String ^ algorithm);" />
      <MemberSignature Language="F#" Value="abstract member IsSymmetricKeyWrapAlgorithmSupported : string -&gt; bool&#xA;override this.IsSymmetricKeyWrapAlgorithmSupported : string -&gt; bool" Usage="securityAlgorithmSuite.IsSymmetricKeyWrapAlgorithmSupported algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="86ea0-214">확인할 알고리즘 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-214">The algorithm name to check.</span></span></param>
        <summary><span data-ttu-id="86ea0-215">대칭 키 래핑 알고리즘이 지원되는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-215">Indicates whether a symmetric key wrap algorithm is supported.</span></span></summary>
        <returns><span data-ttu-id="86ea0-216">대칭 키 래핑 알고리즘이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-216"><see langword="true" /> if the symmetric key wrap algorithm is supported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSymmetricSignatureAlgorithmSupported">
      <MemberSignature Language="C#" Value="public virtual bool IsSymmetricSignatureAlgorithmSupported (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSymmetricSignatureAlgorithmSupported(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.SecurityAlgorithmSuite.IsSymmetricSignatureAlgorithmSupported(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSymmetricSignatureAlgorithmSupported (algorithm As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSymmetricSignatureAlgorithmSupported(System::String ^ algorithm);" />
      <MemberSignature Language="F#" Value="abstract member IsSymmetricSignatureAlgorithmSupported : string -&gt; bool&#xA;override this.IsSymmetricSignatureAlgorithmSupported : string -&gt; bool" Usage="securityAlgorithmSuite.IsSymmetricSignatureAlgorithmSupported algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm"><span data-ttu-id="86ea0-217">확인할 알고리즘 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-217">The algorithm name to check.</span></span></param>
        <summary><span data-ttu-id="86ea0-218">대칭 서명 알고리즘이 지원되는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-218">Indicates whether a symmetric signature algorithm is supported.</span></span></summary>
        <returns><span data-ttu-id="86ea0-219">대칭 서명 알고리즘이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-219"><see langword="true" /> if the symmetric signature algorithm is supported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TripleDes">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite TripleDes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite TripleDes" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.TripleDes" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TripleDes As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ TripleDes { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TripleDes : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.TripleDes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-220">Triple DES(Data Encryption Standard) 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-220">Gets the Triple Data Encryption Standard (DES) algorithm suite.</span></span></summary>
        <value><span data-ttu-id="86ea0-221">Triple DES <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-221">The Triple DES <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-222">반환된 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>는 기본값을 지정하는 일부 속성 및 일부 메서드를 재정의하는 내부 서브클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-222">The <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> returned is actually an internal subclass that overrides some of the properties specifying default values as well as some of the methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TripleDesRsa15">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite TripleDesRsa15 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite TripleDesRsa15" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.TripleDesRsa15" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TripleDesRsa15 As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ TripleDesRsa15 { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TripleDesRsa15 : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.TripleDesRsa15" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-223">키 래핑 알고리즘으로 RSA15를 사용하고 메시지 암호화 알고리즘으로 192비트 Triple DES(Data Encryption Standard)를 사용하는 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-223">Gets an algorithm suite that uses RSA15 as the key wrap algorithm and 192-bit Triple Data Encryption Standard (DES) as the message encryption algorithm.</span></span></summary>
        <value><span data-ttu-id="86ea0-224">키 래핑 알고리즘으로 RSA15를 사용하고 메시지 암호화 알고리즘으로 192비트 Triple DES(Data Encryption Standard)를 사용하는 알고리즘 모음입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-224">An algorithm suite that uses RSA15 as the key wrap algorithm and 192-bit Triple Data Encryption Standard (DES) as the message encryption algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-225">반환된 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>는 기본값을 지정하는 일부 속성 및 일부 메서드를 재정의하는 내부 서브클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-225">The <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> returned is actually an internal subclass that overrides some of the properties specifying default values as well as some of the methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TripleDesSha256">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite TripleDesSha256 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite TripleDesSha256" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.TripleDesSha256" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TripleDesSha256 As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ TripleDesSha256 { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TripleDesSha256 : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.TripleDesSha256" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-226">서명 다이제스트에 SHA256을 사용하고 메시지 암호화 알고리즘으로 192비트 Triple DES(Data Encryption Standard)를 사용하는 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-226">Gets an algorithm suite that uses SHA256 for the signature digest and 192-bit Triple Data Encryption Standard (DES) as the message encryption algorithm.</span></span></summary>
        <value><span data-ttu-id="86ea0-227">서명 다이제스트에 SHA256을 사용하고 메시지 암호화 알고리즘으로 192비트 Triple DES(Data Encryption Standard)를 사용하는 알고리즘 모음입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-227">An algorithm suite that uses SHA256 for the signature digest and 192-bit Triple Data Encryption Standard (DES) as the message encryption algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-228">반환된 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>는 기본값을 지정하는 일부 속성 및 일부 메서드를 재정의하는 내부 서브클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-228">The <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> returned is actually an internal subclass that overrides some of the properties specifying default values as well as some of the methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TripleDesSha256Rsa15">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityAlgorithmSuite TripleDesSha256Rsa15 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Security.SecurityAlgorithmSuite TripleDesSha256Rsa15" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecurityAlgorithmSuite.TripleDesSha256Rsa15" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TripleDesSha256Rsa15 As SecurityAlgorithmSuite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Security::SecurityAlgorithmSuite ^ TripleDesSha256Rsa15 { System::ServiceModel::Security::SecurityAlgorithmSuite ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TripleDesSha256Rsa15 : System.ServiceModel.Security.SecurityAlgorithmSuite" Usage="System.ServiceModel.Security.SecurityAlgorithmSuite.TripleDesSha256Rsa15" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityAlgorithmSuite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86ea0-229">키 래핑 알고리즘으로 RSA15를 사용하고 서명 다이제스트에 SHA256을 사용하며 메시지 암호화 알고리즘으로 192비트 Triple DES(Data Encryption Standard)를 사용하는 알고리즘 모음을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-229">Gets an algorithm suite that uses RSA15 as the key wrap algorithm, SHA256 for the signature digest, and 192-bit Triple Data Encryption Standard (DES) as the message encryption algorithm.</span></span></summary>
        <value><span data-ttu-id="86ea0-230">키 래핑 알고리즘으로 RSA15를 사용하고 서명 다이제스트에 SHA256을 사용하며 메시지 암호화 알고리즘으로 192비트 Triple DES(Data Encryption Standard)를 사용하는 알고리즘 모음입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-230">An algorithm suite that uses RSA15 as the key wrap algorithm, SHA256 for the signature digest, and 192-bit Triple Data Encryption Standard (DES) as the message encryption algorithm.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86ea0-231">반환된 <xref:System.ServiceModel.Security.SecurityAlgorithmSuite>는 기본값을 지정하는 일부 속성 및 일부 메서드를 재정의하는 내부 서브클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="86ea0-231">The <xref:System.ServiceModel.Security.SecurityAlgorithmSuite> returned is actually an internal subclass that overrides some of the properties specifying default values as well as some of the methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>