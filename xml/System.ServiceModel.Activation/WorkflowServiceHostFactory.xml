<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WorkflowServiceHostFactory.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b4cd85ec17e400d6a52c67d79ab9a3ebb6227eb3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b4cd85ec17e400d6a52c67d79ab9a3ebb6227eb3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Activation.WorkflowServiceHostFactory">
          <source>Factory that provides instances of <ph id="ph1">&lt;see cref="T:System.ServiceModel.WorkflowServiceHost" /&gt;</ph> in managed hosting environments where the host instance is created dynamically in response to incoming messages.</source>
          <target state="translated">호스트 인스턴스가 들어오는 메시지에 응답하여 동적으로 생성되는 관리 호스팅 환경에서 <ph id="ph1">&lt;see cref="T:System.ServiceModel.WorkflowServiceHost" /&gt;</ph>의 인스턴스를 제공하는 팩터리입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Activation.WorkflowServiceHostFactory">
          <source>The managed hosting environments that support dynamic activation are Internet Information Services (IIS) and Windows Process Activation Service (WAS).</source>
          <target state="translated">동적 활성화를 지원하는 관리되는 호스팅 환경은 IIS(인터넷 정보 서비스) 및 WAS(Windows Process Activation Service)입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Activation.WorkflowServiceHostFactory">
          <source>If you have implemented a custom derivative of <ph id="ph1">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph>, consider also implementing a factory that derives from the <ph id="ph2">&lt;xref:System.ServiceModel.Activation.WorkflowServiceHostFactory&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph>의 사용자 지정 파생 클래스를 구현한 경우 <ph id="ph2">&lt;xref:System.ServiceModel.Activation.WorkflowServiceHostFactory&gt;</ph> 클래스에서 파생되는 팩터리의 구현도 고려해야 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Activation.WorkflowServiceHostFactory">
          <source>If you have implemented a custom derivative of <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph> instead, then consider also implementing a factory that derives your factory from <ph id="ph2">&lt;xref:System.ServiceModel.Activation.ServiceHostFactoryBase&gt;</ph> directly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph>의 사용자 지정 파생 클래스를 구현한 경우에는 <ph id="ph2">&lt;xref:System.ServiceModel.Activation.ServiceHostFactoryBase&gt;</ph>에서 직접 팩터리를 파생시키는 팩터리의 구현도 고려합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Activation.WorkflowServiceHostFactory.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.Activation.WorkflowServiceHostFactory" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Activation.WorkflowServiceHostFactory" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
          <source>The file name of the workflow markup file that defines the workflow service or the type name of the workflow service type.</source>
          <target state="translated">워크플로 서비스를 정의하는 워크플로 마크업 파일의 파일 이름 또는 워크플로 서비스 형식의 형식 이름입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> that contains the base addresses for the hosted service.</source>
          <target state="translated">호스팅된 서비스의 기본 주소를 포함하는 <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> 형식의 배열입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.ServiceModel.WorkflowServiceHost" /&gt;</ph> from a string that contains either the file name of the workflow markup file or the type name of the workflow service type and the base address of the service specified.</source>
          <target state="translated">워크플로 마크업 파일의 파일 이름이나 워크플로 서비스 형식의 형식 이름 및 지정된 서비스의 기본 주소를 포함하는 문자열로 <ph id="ph1">&lt;see cref="T:System.ServiceModel.WorkflowServiceHost" /&gt;</ph>를 만듭니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceHostBase" /&gt;</ph> object associated with the workflow service.</source>
          <target state="translated">워크플로 서비스와 연결된 <ph id="ph1">&lt;see cref="T:System.ServiceModel.ServiceHostBase" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
          <source>The default implementation returns a <ph id="ph1">&lt;see cref="T:System.ServiceModel.WorkflowServiceHost" /&gt;</ph> object with the specified base addresses.</source>
          <target state="translated">기본 구현에서는 지정된 기본 주소를 사용하는 <ph id="ph1">&lt;see cref="T:System.ServiceModel.WorkflowServiceHost" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
          <source>The <ph id="ph1">`constructorString`</ph> argument could be either a fully qualified workflow type name or it could be the relative file path of the workflow definition file declared in the .svc file in which <ph id="ph2">&lt;xref:System.ServiceModel.Activation.ServiceHostFactory&gt;</ph> directives are placed.</source>
          <target state="translated"><ph id="ph1">`constructorString`</ph> 인수는 정규화된 워크플로 형식 이름이거나 <ph id="ph2">&lt;xref:System.ServiceModel.Activation.ServiceHostFactory&gt;</ph> 지시문이 있는 .svc 파일에 선언된 워크플로 정의 파일의 상대 파일 경로일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
          <source>To associate a rule definition with a workflow definition, name the rule definition file the same name as the workflow definition file with a .rules extension and place it in same directory as the workflow definition file.</source>
          <target state="translated">워크플로 정의와 규칙 정의를 연결하려면 .rules 확장명을 사용하여 워크플로 정의 파일과 같은 이름으로 규칙 정의 파일의 이름을 지정하고 워크플로 정의 파일과 같은 디렉터리에 해당 규칙 정의 파일을 넣습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
          <source>For example, the rules definition file CalculatorServiceWorkflow.rules must be in the same directory as CalculatorServiceWorkflow.xoml.</source>
          <target state="translated">예를 들어 규칙 정의 파일 CalculatorServiceWorkflow.rules는 CalculatorServiceWorkflow.xoml과 같은 디렉터리에 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
          <source>The following is an example of a type-based reference to the workflow service CalculatorServiceWorkflow.</source>
          <target state="translated">다음은 워크플로 서비스 CalculatorServiceWorkflow에 대한 형식 기반 참조의 예입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Activation.WorkflowServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
          <source>The following is an example of a workflow definition file reference to the workflow service CalculatorServiceWorkflow.</source>
          <target state="translated">다음은 워크플로 서비스 CalculatorServiceWorkflow에 대한 워크플로 정의 파일 참조의 예입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>