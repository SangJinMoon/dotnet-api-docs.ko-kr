<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ContentPropertyAttribute.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b72fccb72bf425ea39ebd2388db38ab8ee9c1c77e49.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fccb72bf425ea39ebd2388db38ab8ee9c1c77e49</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>Indicates which property of a type is the XAML content property.</source>
          <target state="translated">XAML 콘텐츠 속성인 형식의 속성을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>A XAML processor uses this information when processing XAML child elements of XAML representations of the attributed type.</source>
          <target state="translated">XAML 프로세서는 특성 형식 XAML 표현의 XAML 자식 요소를 처리할 때 이 정보를 사용합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>If the associated property of a <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> is not of type <ph id="ph2">`string`</ph> or <ph id="ph3">`object`</ph>, a XAML processor attempts to identify a value conversion technique.</source>
          <target state="translated">하는 경우 연결된 된 속성의는 <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> 다른 형식의 <ph id="ph2">`string`</ph> 또는 <ph id="ph3">`object`</ph>, XAML 프로세서는 값 변환 기법을 확인 하려고 시도 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>The first check is for native type conversion, either of the XAML language primitives or of specific native conversions enabled by that particular XAML writer implementation.</source>
          <target state="translated">첫 번째 확인은 XAML 언어 기본 형식 또는 해당 특정 XAML 작성기 구현으로 사용 하도록 설정 하는 특정 기본 변환의 네이티브 형식 변환 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>The next step is to look for a type converter.</source>
          <target state="translated">다음 단계는 형식 변환기에 대 한 확인 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>In the .NET implementations, a type converter is identified based on <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> on either the member level or type level definition that applies.</source>
          <target state="translated">기준 형식 변환기를 식별 하는.NET 구현에서 <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> 중 하나는 멤버 수준 또는 형식 수준 정의에 적용 되는 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>If no value conversion can be identified, a XAML object writer typically throws an exception.</source>
          <target state="translated">값 변환 작업 없이 식별할 수 있는 경우 XAML 개체 작성기는 일반적으로 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>In order to accept more than a single object element as content, the type of the XAML content property must be supportable as a collection type.</source>
          <target state="translated">사용 하려면 두 개 이상의 단일 개체 요소 내용으로 XAML 콘텐츠 속성의 형식 이어야 합니다 컬렉션 형식으로 지원 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>Because of the <ph id="ph1">`Inherited=true`</ph> declaration of the attribute, a value for a <ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> normally applies a content property designation to all derived classes as well.</source>
          <target state="translated">때문에 <ph id="ph1">`Inherited=true`</ph> 특성에 대 한 값의 선언 된 <ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> 일반적으로 파생 된 모든 클래스도 콘텐츠 속성 지정을 적용 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>Applying an empty <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> enables a derived class to remove a declaration of a content property attribute by a base class (and to note that the class has no content property).</source>
          <target state="translated">빈 적용 <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> 콘텐츠 속성 특성의 선언이 기본 클래스에 의해 제거 하려면 (및 클래스에는 콘텐츠 속성이 없는를) 파생된 클래스를 사용 하도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>Applying a differently named <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> replaces the inherited <ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> with the new one.</source>
          <target state="translated">다르게 명명 된 적용 <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> 상속 된 대체 <ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> 새 항목으로 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase, and also had a parallel implementation in Windows Communication Foundation (WCF).</source>
          <target state="translated">.NET Framework의 이전 버전에서는이 클래스는 WindowsBase, 특정 WPF 어셈블리에 하며도 병렬 구현을 Windows Communication Foundation (WCF)이 있었습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>Starting with the .NET Framework 4.0, <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> is in the System.Xaml assembly.</source>
          <target state="translated">.NET Framework 4.0부터 <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> System.Xaml 어셈블리에 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>For more information, see <bpt id="p1">[</bpt>Types Migrated from WPF to System.Xaml<ept id="p1">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>WPF에서 System.Xaml로 마이그레이션된 형식<ept id="p1">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>WPF Usage Notes</source>
          <target state="translated">WPF 사용 정보</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>An example of a class in Windows Presentation Foundation (WPF) that uses the <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> is <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, which the <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> class inherits from.</source>
          <target state="translated">WPF Windows Presentation Foundation ()를 사용 하는 클래스의 예는 <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> 은 <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>되는 <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> 클래스에서 상속 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType&gt;</ph> property is the content property set by the <ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType&gt;</ph> 속성은 설정한 콘텐츠 속성은 <ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is instantiated in XAML, the <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph> of the <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> will be set to the element that is between the start and end button tags.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> XAML에서 인스턴스화될는 <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph> 의 <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> 시작 및 끝 단추 태그 사이 있는 요소에 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>The following example creates a class named <ph id="ph1">`Film`</ph> that has a <ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> applied.</source>
          <target state="translated">다음 예에서는 라는 클래스를 만들고 <ph id="ph1">`Film`</ph> 올려진는 <ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> 적용 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>The property named <ph id="ph1">`Title`</ph> is indicated as the content property.</source>
          <target state="translated">라는 속성이 <ph id="ph1">`Title`</ph> 콘텐츠 속성으로 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.ContentPropertyAttribute">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ContentPropertyAttribute" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Markup.ContentPropertyAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ContentPropertyAttribute" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Markup.ContentPropertyAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
          <source>Because of the <ph id="ph1">`Inherited=true`</ph> declaration of the attribute, a value for a <ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> normally applies a content property designation to all derived classes as well.</source>
          <target state="translated">때문에 <ph id="ph1">`Inherited=true`</ph> 특성에 대 한 값의 선언 된 <ph id="ph2">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> 일반적으로 파생 된 모든 클래스도 콘텐츠 속성 지정을 적용 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
          <source>Using this signature, or applying an empty <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>, enables a derived class to remove a declaration of a content property attribute by a base class (and note that the class has no content property).</source>
          <target state="translated">이 서명을 사용 하 여 하거나 적용 하는 빈 <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph>, 콘텐츠 속성 특성의 선언이 기본 클래스에 의해 제거 (및 클래스에는 콘텐츠 속성이 없는) 하려면 파생된 클래스를 사용 하도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
          <source>The property name for the property that is the content property.</source>
          <target state="translated">콘텐츠 속성인 속성의 속성 이름입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ContentPropertyAttribute" /&gt;</ph> class, by using the specified name.</source>
          <target state="translated">지정된 이름을 사용하여 <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ContentPropertyAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
          <source>Assuming CLR backing, the provided <ph id="ph1">`name`</ph> should match the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.Name%2A?displayProperty=nameWithType&gt;</ph> of the relevant property in the CLR type system.</source>
          <target state="translated">CLR 지원, 제공 된 <ph id="ph1">`name`</ph> 일치 해야는 <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.Name%2A?displayProperty=nameWithType&gt;</ph> CLR에서 관련 속성의 형식 시스템.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Windows.Markup.ContentPropertyAttribute.Name">
          <source>Gets the name of the property that is the content property.</source>
          <target state="translated">콘텐츠 속성인 속성의 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Markup.ContentPropertyAttribute.Name">
          <source>The name of the property that is the content property.</source>
          <target state="translated">콘텐츠 속성인 속성의 이름입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>