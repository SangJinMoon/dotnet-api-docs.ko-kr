<Type Name="SqlTransaction" FullName="System.Data.SqlClient.SqlTransaction">
  <TypeSignature Language="C#" Value="public sealed class SqlTransaction : System.Data.Common.DbTransaction, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlTransaction extends System.Data.Common.DbTransaction implements class System.Data.IDbTransaction, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlTransaction" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlTransaction&#xA;Inherits DbTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlTransaction sealed : System::Data::Common::DbTransaction, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbTransaction</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="7a526-101">SQL Server 데이터베이스에 만들 Transact-SQL 트랜잭션을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-101">Represents a Transact-SQL transaction to be made in a SQL Server database.</span></span> <span data-ttu-id="7a526-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a526-103">응용 프로그램을 만듭니다는 <xref:System.Data.SqlClient.SqlTransaction> 호출 하 여 개체 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> 에 <xref:System.Data.SqlClient.SqlConnection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-103">The application creates a <xref:System.Data.SqlClient.SqlTransaction> object by calling <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> on the <xref:System.Data.SqlClient.SqlConnection> object.</span></span> <span data-ttu-id="7a526-104">트랜잭션 (예를 들어, 커밋 또는 트랜잭션을 중단)와 관련 된 모든 후속 작업이 수행 되는 <xref:System.Data.SqlClient.SqlTransaction> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-104">All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the <xref:System.Data.SqlClient.SqlTransaction> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a526-105">`Try`/`Catch` 예외 처리 커밋 또는 롤백 때 항상 사용 해야는 <xref:System.Data.SqlClient.SqlTransaction>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-105">`Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="7a526-106">둘 다 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> 및 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> 생성 한 <xref:System.InvalidOperationException> 연결을 종료 하거나 서버에서 트랜잭션이 이미 롤백된 경우.</span><span class="sxs-lookup"><span data-stu-id="7a526-106">Both <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generate an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.</span></span>  
  
 <span data-ttu-id="7a526-107">SQL Server 트랜잭션에 대 한 자세한 내용은 참조 하십시오. [명시적 트랜잭션을](http://msdn.microsoft.com/library/ms175127\(SQL.105\).aspx) 및 [효율적인 트랜잭션 코딩](http://msdn.microsoft.com/library/ms187484\(SQL.105\).aspx)합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-107">For more information on SQL Server transactions, see [Explicit Transactions](http://msdn.microsoft.com/library/ms175127\(SQL.105\).aspx) and [Coding Efficient Transactions](http://msdn.microsoft.com/library/ms187484\(SQL.105\).aspx).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a526-108">다음 예제에서는 한 <xref:System.Data.SqlClient.SqlConnection> 및 <xref:System.Data.SqlClient.SqlTransaction>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-108">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="7a526-109">사용 하는 방법을 보여 줍니다는 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, 및 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a526-109">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span> <span data-ttu-id="7a526-110">트랜잭션이 모든 오류에 대해 동시에 롤백 커밋 또는 처음 하지 않고 삭제 되는 경우.</span><span class="sxs-lookup"><span data-stu-id="7a526-110">The transaction is rolled back on any error, or if it is disposed without first being committed.</span></span> <span data-ttu-id="7a526-111">`Try`/`Catch` 트랜잭션을 커밋하거나 하려고 할 때 오류를 처리 하는 오류 처리가 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-111">`Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbTransaction.Commit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a526-112">데이터베이스 트랜잭션을 커밋합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-112">Commits the database transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a526-113"><xref:System.Data.SqlClient.SqlTransaction.Commit%2A> TRANSACT-SQL COMMIT TRANSACTION 문에 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-113">The <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> method is equivalent to the Transact-SQL COMMIT TRANSACTION statement.</span></span> <span data-ttu-id="7a526-114">롤백할 수 없습니다 트랜잭션이 커밋된 후 모든 수정 내용이 데이터베이스의 영구적인 부분이 있어야 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-114">You cannot roll back a transaction once it has been committed, because all modifications have become a permanent part of the database.</span></span> <span data-ttu-id="7a526-115">자세한 내용은 SQL Server 온라인 설명서를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7a526-115">For more information, see SQL Server Books Online.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a526-116">`Try`/`Catch` 예외 처리 커밋 또는 롤백 때 항상 사용 해야는 <xref:System.Data.SqlClient.SqlTransaction>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-116">`Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="7a526-117">둘 다 `Commit` 및 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> 생성 한 <xref:System.InvalidOperationException> 연결을 종료 하거나 서버에서 트랜잭션이 이미 롤백된 경우.</span><span class="sxs-lookup"><span data-stu-id="7a526-117">Both `Commit` and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.</span></span>  
  
 <span data-ttu-id="7a526-118">SQL Server 트랜잭션에 대 한 자세한 내용은 "명시적 트랜잭션" 및 SQL Server 온라인 설명서의 "효율적인 트랜잭션 코딩"를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="7a526-118">For more information on SQL Server transactions, see "Explicit Transactions" and "Coding Efficient Transactions" in SQL Server Books Online.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a526-119">다음 예제에서는 한 <xref:System.Data.SqlClient.SqlConnection> 및 <xref:System.Data.SqlClient.SqlTransaction>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-119">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="7a526-120">사용 하는 방법을 보여 줍니다는 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, 및 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a526-120">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span> <span data-ttu-id="7a526-121">모든 오류에 대해 트랜잭션이 롤백됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-121">The transaction is rolled back on any error.</span></span> <span data-ttu-id="7a526-122">`Try`/`Catch` 트랜잭션을 커밋하거나 하려고 할 때 오류를 처리 하는 오류 처리가 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-122">`Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><span data-ttu-id="7a526-123">트랜잭션을 커밋하는 동안 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="7a526-123">An error occurred while trying to commit the transaction.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a526-124">트랜잭션이 이미 커밋 또는 롤백된 경우</span><span class="sxs-lookup"><span data-stu-id="7a526-124">The transaction has already been committed or rolled back.</span></span>  
  
 <span data-ttu-id="7a526-125">또는</span><span class="sxs-lookup"><span data-stu-id="7a526-125">-or-</span></span>  
  
 <span data-ttu-id="7a526-126">연결이 손상된 경우</span><span class="sxs-lookup"><span data-stu-id="7a526-126">The connection is broken.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlTransaction.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As SqlConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlConnection ^ Connection { System::Data::SqlClient::SqlConnection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a526-127">트랜잭션과 관련된 <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체를 가져오거나 트랜잭션이 더 이상 유효하지 않으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-127">Gets the <see cref="T:System.Data.SqlClient.SqlConnection" /> object associated with the transaction, or <see langword="null" /> if the transaction is no longer valid.</span></span></summary>
        <value><span data-ttu-id="7a526-128">트랜잭션과 연결된 <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-128">The <see cref="T:System.Data.SqlClient.SqlConnection" /> object associated with the transaction.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a526-129">단일 응용 프로그램에는 각각 0 개 이상의 트랜잭션을 사용 하 여 여러 데이터베이스 연결을 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-129">A single application may have multiple database connections, each with zero or more transactions.</span></span> <span data-ttu-id="7a526-130">이 속성을 사용 하 여 만든 특정 트랜잭션에 연결 된 연결 개체를 결정할 수 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-130">This property lets you determine the connection object associated with a particular transaction created by <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbConnection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbConnection DbConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection DbConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlTransaction.DbConnection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbConnection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbConnection ^ DbConnection { System::Data::Common::DbConnection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsolationLevel">
      <MemberSignature Language="C#" Value="public override System.Data.IsolationLevel IsolationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.IsolationLevel IsolationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlTransaction.IsolationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsolationLevel As IsolationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::IsolationLevel IsolationLevel { System::Data::IsolationLevel get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbTransaction.IsolationLevel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a526-131">이 트랜잭션에 대한 <see cref="T:System.Data.IsolationLevel" />을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-131">Specifies the <see cref="T:System.Data.IsolationLevel" /> for this transaction.</span></span></summary>
        <value><span data-ttu-id="7a526-132">이 트랜잭션에 대한 <see cref="T:System.Data.IsolationLevel" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-132">The <see cref="T:System.Data.IsolationLevel" /> for this transaction.</span></span> <span data-ttu-id="7a526-133">기본값은 <see langword="ReadCommitted" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-133">The default is <see langword="ReadCommitted" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a526-134">병렬 트랜잭션은 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-134">Parallel transactions are not supported.</span></span> <span data-ttu-id="7a526-135">따라서는 <xref:System.Data.IsolationLevel> 전체 트랜잭션에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-135">Therefore, the <xref:System.Data.IsolationLevel> applies to the whole transaction.</span></span>  
  
 <span data-ttu-id="7a526-136">SQL Server 격리 수준에 대 한 자세한 내용은 "격리 수준에서" 데이터베이스 엔진의 SQL Server 온라인 설명서를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="7a526-136">For more information on SQL Server isolation levels, see "Isolation Levels in the Database Engine" in SQL Server Books Online.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Rollback">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7a526-137">보류 상태에서 트랜잭션을 롤백합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-137">Rolls back a transaction from a pending state.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Rollback" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbTransaction.Rollback</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a526-138">보류 상태에서 트랜잭션을 롤백합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-138">Rolls back a transaction from a pending state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a526-139"><xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> TRANSACT-SQL ROLLBACK TRANSACTION 문을 하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-139">The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement.</span></span> <span data-ttu-id="7a526-140">자세한 내용은 SQL Server 온라인 설명서를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="7a526-140">For more information, see SQL Server Books Online.</span></span>  
  
 <span data-ttu-id="7a526-141">트랜잭션이 롤백할 수 보류 상태에서 (후 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> 호출 하기 전에 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> 라고).</span><span class="sxs-lookup"><span data-stu-id="7a526-141">The transaction can only be rolled back from a pending state (after <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> is called).</span></span> <span data-ttu-id="7a526-142">다시 이벤트 삭제 하기 전에 트랜잭션이 `Commit` 또는 `Rollback` 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-142">The transaction is rolled back in the event it is disposed before `Commit` or `Rollback` is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a526-143">`Try`/`Catch` 예외 처리는 트랜잭션을 롤백할 때 항상 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-143">`Try`/`Catch` exception handling should always be used when rolling back a transaction.</span></span> <span data-ttu-id="7a526-144">A `Rollback` 생성 한 <xref:System.InvalidOperationException> 연결을 종료 하거나 서버에서 트랜잭션이 이미 롤백된 경우.</span><span class="sxs-lookup"><span data-stu-id="7a526-144">A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.</span></span>  
  
 <span data-ttu-id="7a526-145">SQL Server 트랜잭션에 대 한 자세한 내용은 "명시적 트랜잭션" 및 SQL Server 온라인 설명서의 "효율적인 트랜잭션 코딩"를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="7a526-145">For more information on SQL Server transactions, see "Explicit Transactions" and "Coding Efficient Transactions" in SQL Server Books Online.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a526-146">다음 예제에서는 한 <xref:System.Data.SqlClient.SqlConnection> 및 <xref:System.Data.SqlClient.SqlTransaction>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-146">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="7a526-147">사용 하는 방법을 보여 줍니다는 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, 및 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a526-147">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span> <span data-ttu-id="7a526-148">모든 오류에 대해 트랜잭션이 롤백됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-148">The transaction is rolled back on any error.</span></span> <span data-ttu-id="7a526-149">`Try`/`Catch` 트랜잭션을 커밋하거나 하려고 할 때 오류를 처리 하는 오류 처리가 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-149">`Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><span data-ttu-id="7a526-150">트랜잭션을 커밋하는 동안 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="7a526-150">An error occurred while trying to commit the transaction.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a526-151">트랜잭션이 이미 커밋 또는 롤백된 경우</span><span class="sxs-lookup"><span data-stu-id="7a526-151">The transaction has already been committed or rolled back.</span></span>  
  
 <span data-ttu-id="7a526-152">또는</span><span class="sxs-lookup"><span data-stu-id="7a526-152">-or-</span></span>  
  
 <span data-ttu-id="7a526-153">연결이 손상된 경우</span><span class="sxs-lookup"><span data-stu-id="7a526-153">The connection is broken.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback (string transactionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rollback(string transactionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Rollback(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rollback (transactionName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rollback(System::String ^ transactionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionName"><span data-ttu-id="7a526-154">롤백할 트랜잭션 또는 롤백될 저장점의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-154">The name of the transaction to roll back, or the savepoint to which to roll back.</span></span></param>
        <summary><span data-ttu-id="7a526-155">트랜잭션을 보류 상태에서 롤백하고, 트랜잭션이나 저장점 이름을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-155">Rolls back a transaction from a pending state, and specifies the transaction or savepoint name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a526-156"><xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> TRANSACT-SQL ROLLBACK TRANSACTION 문을 하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-156">The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement.</span></span> <span data-ttu-id="7a526-157">자세한 내용은 "명시적 트랜잭션" 및 SQL Server 온라인 설명서의 "트랜잭션 저장점"를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="7a526-157">For more information, see "Explicit Transactions" and "Transaction Savepoints" in SQL Server Books Online.</span></span>  
  
 <span data-ttu-id="7a526-158">트랜잭션이 롤백할 수 보류 상태에서 (후 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> 호출 하기 전에 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> 라고).</span><span class="sxs-lookup"><span data-stu-id="7a526-158">The transaction can only be rolled back from a pending state (after <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> is called).</span></span> <span data-ttu-id="7a526-159">하기 전에 삭제 되는 경우 트랜잭션이 `Commit` 또는 `Rollback` 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-159">The transaction is rolled back if it is disposed before `Commit` or `Rollback` is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a526-160">`Try`/`Catch` 예외 처리는 트랜잭션을 롤백할 때 항상 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-160">`Try`/`Catch` exception handling should always be used when rolling back a transaction.</span></span> <span data-ttu-id="7a526-161">A `Rollback` 생성 한 <xref:System.InvalidOperationException> 연결을 종료 하거나 서버에서 트랜잭션이 이미 롤백된 경우.</span><span class="sxs-lookup"><span data-stu-id="7a526-161">A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.</span></span>  
  
 <span data-ttu-id="7a526-162">SQL Server 트랜잭션에 대 한 자세한 내용은 "명시적 트랜잭션" 및 SQL Server 온라인 설명서의 "효율적인 트랜잭션 코딩"를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="7a526-162">For more information on SQL Server transactions, see "Explicit Transactions" and "Coding Efficient Transactions" in SQL Server Books Online.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a526-163">다음 예제에서는 한 <xref:System.Data.SqlClient.SqlConnection> 및 <xref:System.Data.SqlClient.SqlTransaction>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-163">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="7a526-164">사용 하는 방법을 보여 줍니다는 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, 및 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a526-164">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span> <span data-ttu-id="7a526-165">모든 오류에 대해 트랜잭션이 롤백됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-165">The transaction is rolled back on any error.</span></span> <span data-ttu-id="7a526-166">`Try`/`Catch` 트랜잭션을 커밋하거나 하려고 할 때 오류를 처리 하는 오류 처리가 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-166">`Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a526-167">트랜잭션 이름이 지정되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="7a526-167">No transaction name was specified.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a526-168">트랜잭션이 이미 커밋 또는 롤백된 경우</span><span class="sxs-lookup"><span data-stu-id="7a526-168">The transaction has already been committed or rolled back.</span></span>  
  
 <span data-ttu-id="7a526-169">또는</span><span class="sxs-lookup"><span data-stu-id="7a526-169">-or-</span></span>  
  
 <span data-ttu-id="7a526-170">연결이 손상된 경우</span><span class="sxs-lookup"><span data-stu-id="7a526-170">The connection is broken.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string savePointName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string savePointName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (savePointName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ savePointName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savePointName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="savePointName"><span data-ttu-id="7a526-171">저장점의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-171">The name of the savepoint.</span></span></param>
        <summary><span data-ttu-id="7a526-172">트랜잭션의 일부를 롤백하는 데 사용할 수 있는 트랜잭션에 저장점을 만들고, 저장점 이름을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-172">Creates a savepoint in the transaction that can be used to roll back a part of the transaction, and specifies the savepoint name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a526-173"><xref:System.Data.SqlClient.SqlTransaction.Save%2A> 메서드-SAVE TRANSACTION 문을 하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-173"><xref:System.Data.SqlClient.SqlTransaction.Save%2A> method is equivalent to the Transact-SQL SAVE TRANSACTION statement.</span></span>  
  
 <span data-ttu-id="7a526-174">사용 되는 값은 `savePoint` 매개 변수에서 사용 하는 일 수는 `transactionName` 일부 구현의 매개 변수는 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a526-174">The value used in the `savePoint` parameter can be the same value used in the `transactionName` parameter of some implementations of the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> method.</span></span>  
  
 <span data-ttu-id="7a526-175">저장 점은 트랜잭션의 일부를 롤백해야 하는 메커니즘을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-175">Savepoints offer a mechanism to roll back parts of transactions.</span></span> <span data-ttu-id="7a526-176">사용 하는 저장 점을 만듭니다는 <xref:System.Data.SqlClient.SqlTransaction.Save%2A> 메서드와 다음 이후의 호출에서 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> 메서드를 트랜잭션의 시작 부분으로 롤백하는 대신 저장 점으로 롤백해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a526-176">You create a savepoint using the <xref:System.Data.SqlClient.SqlTransaction.Save%2A> method, and then later call the <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method to roll back to the savepoint instead of rolling back to the start of the transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><span data-ttu-id="7a526-177">트랜잭션을 커밋하는 동안 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="7a526-177">An error occurred while trying to commit the transaction.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a526-178">트랜잭션이 이미 커밋 또는 롤백된 경우</span><span class="sxs-lookup"><span data-stu-id="7a526-178">The transaction has already been committed or rolled back.</span></span>  
  
 <span data-ttu-id="7a526-179">또는</span><span class="sxs-lookup"><span data-stu-id="7a526-179">-or-</span></span>  
  
 <span data-ttu-id="7a526-180">연결이 손상된 경우</span><span class="sxs-lookup"><span data-stu-id="7a526-180">The connection is broken.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>