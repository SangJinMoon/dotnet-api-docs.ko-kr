<Type Name="SqlDataAdapter" FullName="System.Data.SqlClient.SqlDataAdapter">
  <TypeSignature Language="C#" Value="public sealed class SqlDataAdapter : System.Data.Common.DbDataAdapter, ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlDataAdapter extends System.Data.Common.DbDataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlDataAdapter&#xA;Inherits DbDataAdapter&#xA;Implements ICloneable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlDataAdapter sealed : System::Data::Common::DbDataAdapter, ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbDataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("RowUpdated")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.SqlDataAdapterDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IDesigner")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.SqlDataAdapterToolboxItem, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="60417-101"><see cref="T:System.Data.DataSet" />을 채우고 SQL Server 데이터베이스를 업데이트하는 데 사용되는 데이터 명령 집합과 데이터베이스 연결을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="60417-101">Represents a set of data commands and a database connection that are used to fill the <see cref="T:System.Data.DataSet" /> and update a SQL Server database.</span></span> <span data-ttu-id="60417-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-103"><xref:System.Data.SqlClient.SqlDataAdapter>, 사이의 브리지 역할을 <xref:System.Data.DataSet> 및 SQL Server를 검색 하 고 데이터를 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-103">The <xref:System.Data.SqlClient.SqlDataAdapter>, serves as a bridge between a <xref:System.Data.DataSet> and SQL Server for retrieving and saving data.</span></span> <span data-ttu-id="60417-104"><xref:System.Data.SqlClient.SqlDataAdapter> 매핑하는 방법으로이 연결을 제공 <xref:System.Data.Common.DbDataAdapter.Fill%2A>, 데이터를 변경 하는 <xref:System.Data.DataSet> 데이터 원본의 데이터와 일치 하도록 및 <xref:System.Data.Common.DbDataAdapter.Update%2A>의 데이터와 일치 하도록 데이터 원본에서 데이터를 변경는 <xref:System.Data.DataSet>를 사용 하 여는 데이터 원본에 대해 적절 한 TRANSACT-SQL 문입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-104">The <xref:System.Data.SqlClient.SqlDataAdapter> provides this bridge by mapping <xref:System.Data.Common.DbDataAdapter.Fill%2A>, which changes the data in the <xref:System.Data.DataSet> to match the data in the data source, and <xref:System.Data.Common.DbDataAdapter.Update%2A>, which changes the data in the data source to match the data in the <xref:System.Data.DataSet>, using the appropriate Transact-SQL statements against the data source.</span></span> <span data-ttu-id="60417-105">이 업데이트는 행 단위로에서 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60417-105">The update is performed on a by-row basis.</span></span> <span data-ttu-id="60417-106">모든 삽입, 수정 및 삭제 된 행에 대해는 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드에 수행 된 변경의 유형을 결정 (`Insert`, `Update`, 또는 `Delete`).</span><span class="sxs-lookup"><span data-stu-id="60417-106">For every inserted, modified, and deleted row, the <xref:System.Data.Common.DbDataAdapter.Update%2A> method determines the type of change that has been performed on it (`Insert`, `Update`, or `Delete`).</span></span> <span data-ttu-id="60417-107">변경 유형에 따라는 `Insert`, `Update`, 또는 `Delete` 명령 템플릿이 실행 데이터 원본에 수정된 된 행을 전파 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-107">Depending on the type of change, the `Insert`, `Update`, or `Delete` command template executes to propagate the modified row to the data source.</span></span> <span data-ttu-id="60417-108">경우는 <xref:System.Data.SqlClient.SqlDataAdapter> 채웁니다는 <xref:System.Data.DataSet>, 존재 하지 않을 경우 필요한 테이블 및 반환된 된 데이터에 대 한 열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="60417-108">When the <xref:System.Data.SqlClient.SqlDataAdapter> fills a <xref:System.Data.DataSet>, it creates the necessary tables and columns for the returned data if they do not already exist.</span></span> <span data-ttu-id="60417-109">그러나 기본 키 정보에에서 없는 암시적으로 만든된 스키마 하지 않는 한는 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> 속성이 <xref:System.Data.MissingSchemaAction.AddWithKey>합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-109">However, primary key information is not included in the implicitly created schema unless the <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> property is set to <xref:System.Data.MissingSchemaAction.AddWithKey>.</span></span> <span data-ttu-id="60417-110">설정할 수도 있습니다는 <xref:System.Data.SqlClient.SqlDataAdapter> 의 스키마를 만들기는 <xref:System.Data.DataSet>를 사용 하 여 데이터를 채우기 전에 기본 키 정보를 포함 하 여 `FillSchema`합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-110">You may also have the <xref:System.Data.SqlClient.SqlDataAdapter> create the schema of the <xref:System.Data.DataSet>, including primary key information, before filling it with data using `FillSchema`.</span></span> <span data-ttu-id="60417-111">자세한 내용은 참조 [기존 제약 조건 데이터 집합에 추가](~/docs/framework/data/adonet/adding-existing-constraints-to-a-dataset.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-111">For more information, see [Adding Existing Constraints to a DataSet](~/docs/framework/data/adonet/adding-existing-constraints-to-a-dataset.md).</span></span>  
  
 <span data-ttu-id="60417-112"><xref:System.Data.SqlClient.SqlDataAdapter> 와 함께에서 사용 되는 <xref:System.Data.SqlClient.SqlConnection> 및 <xref:System.Data.SqlClient.SqlCommand> SQL Server 데이터베이스에 연결할 때 성능을 향상 시키려면 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-112"><xref:System.Data.SqlClient.SqlDataAdapter> is used in conjunction with <xref:System.Data.SqlClient.SqlConnection> and <xref:System.Data.SqlClient.SqlCommand> to increase performance when connecting to a SQL Server database.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60417-113">SQL Server 저장 프로시저를 통해 `DataAdapter`로 데이터를 편집하거나 삭제하는 경우에는 저장 프로시저 정의에 SET NOCOUNT ON을 사용하면 안 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60417-113">If you are using SQL Server stored procedures to edit or delete data using a `DataAdapter`, make sure that you do not use SET NOCOUNT ON in the stored procedure definition.</span></span> <span data-ttu-id="60417-114">SET NOCOUNT ON을 사용하는 경우 반환되는 행 개수가 0이 되어 `DataAdapter`가 이를 동시성 충돌로 인식합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-114">This causes the rows affected count returned to be zero, which the `DataAdapter` interprets as a concurrency conflict.</span></span> <span data-ttu-id="60417-115">그 결과 <xref:System.Data.DBConcurrencyException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="60417-115">In this event, a <xref:System.Data.DBConcurrencyException> will be thrown.</span></span>  
  
 <span data-ttu-id="60417-116"><xref:System.Data.SqlClient.SqlDataAdapter> 도 포함 되어는 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, 및 <xref:System.Data.Common.DataAdapter.TableMappings%2A> 속성을 쉽게 로드 하 고 데이터를 업데이트 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-116">The <xref:System.Data.SqlClient.SqlDataAdapter> also includes the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and <xref:System.Data.Common.DataAdapter.TableMappings%2A> properties to facilitate the loading and updating of data.</span></span>  
  
 <span data-ttu-id="60417-117">인스턴스가 <xref:System.Data.SqlClient.SqlDataAdapter> 만들어지면 읽기/쓰기 속성은 초기 값으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60417-117">When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the read/write properties are set to initial values.</span></span> <span data-ttu-id="60417-118">이러한 값의 목록에 대 한 참조는 <xref:System.Data.SqlClient.SqlDataAdapter> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-118">For a list of these values, see the <xref:System.Data.SqlClient.SqlDataAdapter> constructor.</span></span>  
  
 <span data-ttu-id="60417-119"><xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>, 및 <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> 는 매개 변수 메커니즘을 통해 자동으로 수정 된 모든 행의 개별 값으로 채워진 제네릭 템플릿입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-119">The <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>, and <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> are generic templates that are automatically filled with individual values from every modified row through the parameters mechanism.</span></span>  
  
 <span data-ttu-id="60417-120">데이터 소스에 전파 하는 모든 열에 대 한 <xref:System.Data.Common.DbDataAdapter.Update%2A>에 추가 되어야 하는 매개 변수는 `InsertCommand`, `UpdateCommand`, 또는 `DeleteCommand`합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-120">For every column that you propagate to the data source on <xref:System.Data.Common.DbDataAdapter.Update%2A>, a parameter should be added to the `InsertCommand`, `UpdateCommand`, or `DeleteCommand`.</span></span> <span data-ttu-id="60417-121"><xref:System.Data.Common.DbParameter.SourceColumn%2A> 의 속성은 <xref:System.Data.Common.DbParameter> 개체의 열 이름으로 설정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-121">The <xref:System.Data.Common.DbParameter.SourceColumn%2A> property of the <xref:System.Data.Common.DbParameter> object should be set to the name of the column.</span></span> <span data-ttu-id="60417-122">이 설정은 매개 변수의 값을 수동으로 설정 되어 있지 않지만 현재 처리 된 행의 특정 열에서 가져온 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="60417-122">This setting indicates that the value of the parameter is not set manually, but is taken from the particular column in the currently processed row.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60417-123"><xref:System.InvalidOperationException> 경우 발생 합니다는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드가 호출 되 고 테이블에는 클라이언트 컴퓨터에서 사용할 수 없는 사용자 정의 형식이 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-123">An <xref:System.InvalidOperationException> will occur if the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method is called and the table contains a user-defined type that is not available on the client computer.</span></span> <span data-ttu-id="60417-124">자세한 내용은 참조 [만들기 및 사용자 형식](http://go.microsoft.com/fwlink/?LinkId=139492) SQL Server 온라인 설명서의 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-124">For more information, see [Creating and Using User-Defined Types](http://go.microsoft.com/fwlink/?LinkId=139492) in SQL Server Books Online.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60417-125">다음 예제에서는 <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, 및 <xref:System.Data.SqlClient.SqlConnection> 레코드를 선택 하는 데이터베이스에서 채우기는 <xref:System.Data.DataSet> 선택한 행과 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-125">The following example uses the <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, and <xref:System.Data.SqlClient.SqlConnection> to select records from a database and populate a <xref:System.Data.DataSet> with the selected rows.</span></span> <span data-ttu-id="60417-126">채워진 <xref:System.Data.DataSet> 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60417-126">The filled <xref:System.Data.DataSet> is then returned.</span></span> <span data-ttu-id="60417-127">이를 위해 메서드를 전달 초기화 된 <xref:System.Data.DataSet>, 연결 문자열 및 쿼리 문자열은 TRANSACT-SQL SELECT 문입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-127">To accomplish this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.</span></span>  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="60417-128"><see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-128">Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60417-129"><see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-129">Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-130">인스턴스가 <xref:System.Data.SqlClient.SqlDataAdapter> 만들어지면 다음 읽기/쓰기 속성은 다음과 같은 초기 값으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60417-130">When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the following read/write properties are set to the following initial values.</span></span>  
  
|<span data-ttu-id="60417-131">속성</span><span class="sxs-lookup"><span data-stu-id="60417-131">Properties</span></span>|<span data-ttu-id="60417-132">초기 값</span><span class="sxs-lookup"><span data-stu-id="60417-132">Initial value</span></span>|  
|----------------|-------------------|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 <span data-ttu-id="60417-133">속성에 대 한 별도 호출을 통해 이러한 속성의 값을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-133">You can change the value of any of these properties through a separate call to the property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60417-134">다음 예제에서는 한 <xref:System.Data.SqlClient.SqlDataAdapter> 속성 중 일부를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-134">The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets some of its properties.</span></span>  
  
 [!code-csharp[Classic WebData SqlDataAdapter.SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter.SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter.SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter.SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataAdapter (System.Data.SqlClient.SqlCommand selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlCommand selectCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDataAdapter.#ctor(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (selectCommand As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataAdapter(System::Data::SqlClient::SqlCommand ^ selectCommand);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="selectCommand" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="selectCommand"><span data-ttu-id="60417-135">Transact-SQL SELECT 문 또는 저장 프로시저이고 <see cref="T:System.Data.SqlClient.SqlCommand" />의 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 속성으로 설정될 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-135">A <see cref="T:System.Data.SqlClient.SqlCommand" /> that is a Transact-SQL SELECT statement or stored procedure and is set as the <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" />.</span></span></param>
        <summary><span data-ttu-id="60417-136"><see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 속성으로서 지정된 <see cref="T:System.Data.SqlClient.SqlCommand" />를 사용하여 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-136">Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> class with the specified <see cref="T:System.Data.SqlClient.SqlCommand" /> as the <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-137">이 구현에서 <xref:System.Data.SqlClient.SqlDataAdapter> 생성자는 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> 속성에 지정 된 값을는 `selectCommand` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-137">This implementation of the <xref:System.Data.SqlClient.SqlDataAdapter> constructor sets the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property to the value specified in the `selectCommand` parameter.</span></span>  
  
 <span data-ttu-id="60417-138">인스턴스가 <xref:System.Data.SqlClient.SqlDataAdapter> 만들어지면 다음 읽기/쓰기 속성은 다음과 같은 초기 값으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60417-138">When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the following read/write properties are set to the following initial values.</span></span>  
  
|<span data-ttu-id="60417-139">속성</span><span class="sxs-lookup"><span data-stu-id="60417-139">Properties</span></span>|<span data-ttu-id="60417-140">초기 값</span><span class="sxs-lookup"><span data-stu-id="60417-140">Initial value</span></span>|  
|----------------|-------------------|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 <span data-ttu-id="60417-141">속성에 대 한 별도 호출을 통해 이러한 속성의 값을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-141">You can change the value of any of these properties through a separate call to the property.</span></span>  
  
 <span data-ttu-id="60417-142">때 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> (또는 다른 명령 속성 중 하나) 할당 되는 이전에 만든 <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlCommand> 가 복제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-142">When <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> (or any of the other command properties) is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned.</span></span> <span data-ttu-id="60417-143"><xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> 이전에 만든에 대 한 참조를 유지 관리 <xref:System.Data.SqlClient.SqlCommand> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-143">The <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60417-144">다음 예제에서는 한 <xref:System.Data.SqlClient.SqlDataAdapter> 속성 중 일부를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-144">The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets some of its properties.</span></span>  
  
 [!code-csharp[Classic WebData SqlDataAdapter.SqlDataAdapter1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter.SqlDataAdapter1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter.SqlDataAdapter1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter.SqlDataAdapter1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataAdapter (string selectCommandText, System.Data.SqlClient.SqlConnection selectConnection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string selectCommandText, class System.Data.SqlClient.SqlConnection selectConnection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (selectCommandText As String, selectConnection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataAdapter(System::String ^ selectCommandText, System::Data::SqlClient::SqlConnection ^ selectConnection);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="selectCommandText" Type="System.String" />
        <Parameter Name="selectConnection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="selectCommandText"><span data-ttu-id="60417-145">Transact-SQL SELECT 문 또는 저장 프로시저이고 <see cref="T:System.String" />의 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 속성에서 사용될 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-145">A <see cref="T:System.String" /> that is a Transact-SQL SELECT statement or stored procedure to be used by the <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" />.</span></span></param>
        <param name="selectConnection"><span data-ttu-id="60417-146">해당 연결을 나타내는 <see cref="T:System.Data.SqlClient.SqlConnection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-146">A <see cref="T:System.Data.SqlClient.SqlConnection" /> that represents the connection.</span></span> <span data-ttu-id="60417-147">연결 문자열에서 <see langword="Integrated Security = true" />를 사용 중이 아니면 <see cref="T:System.Data.SqlClient.SqlCredential" />을 사용하여 연결 문자열에서 사용자 ID와 암호를 텍스트로 지정할 때보다 사용자 ID와 암호를 보다 안전하게 전달할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-147">If your connection string does not use <see langword="Integrated Security = true" />, you can use <see cref="T:System.Data.SqlClient.SqlCredential" /> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</span></span></param>
        <summary><span data-ttu-id="60417-148"><see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 및 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 개체를 사용하여 <see cref="T:System.Data.SqlClient.SqlConnection" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-148">Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> class with a <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> and a <see cref="T:System.Data.SqlClient.SqlConnection" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-149">이 구현에서 <xref:System.Data.SqlClient.SqlDataAdapter> 열고 닫습니다는 <xref:System.Data.SqlClient.SqlConnection> 열려 있지 않으면입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-149">This implementation of the <xref:System.Data.SqlClient.SqlDataAdapter> opens and closes a <xref:System.Data.SqlClient.SqlConnection> if it is not already open.</span></span> <span data-ttu-id="60417-150">이 호출 해야 하는 응용 프로그램에 유용할 수 있습니다는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 둘 이상에 대 한 메서드 <xref:System.Data.SqlClient.SqlDataAdapter> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-150">This can be useful in an application that must call the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method for two or more <xref:System.Data.SqlClient.SqlDataAdapter> objects.</span></span> <span data-ttu-id="60417-151">경우는 <xref:System.Data.SqlClient.SqlConnection> 가 이미 열려 명시적으로 호출 해야 **닫습니다** 또는 **Dispose** 를 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-151">If the <xref:System.Data.SqlClient.SqlConnection> is already open, you must explicitly call **Close** or **Dispose** to close it.</span></span>  
  
 <span data-ttu-id="60417-152">인스턴스가 <xref:System.Data.SqlClient.SqlDataAdapter> 만들어지면 다음 읽기/쓰기 속성은 다음과 같은 초기 값으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60417-152">When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the following read/write properties are set to the following initial values.</span></span>  
  
|<span data-ttu-id="60417-153">속성</span><span class="sxs-lookup"><span data-stu-id="60417-153">Properties</span></span>|<span data-ttu-id="60417-154">초기 값</span><span class="sxs-lookup"><span data-stu-id="60417-154">Initial value</span></span>|  
|----------------|-------------------|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 <span data-ttu-id="60417-155">속성에 별도 호출을 통해 이러한 속성 중 하나의 값을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-155">You can change the value of either of these properties through a separate call to the property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60417-156">다음 예제에서는 한 <xref:System.Data.SqlClient.SqlDataAdapter> 속성 중 일부를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-156">The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets some of its properties.</span></span>  
  
 [!code-csharp[Classic WebData SqlDataAdapter.SqlDataAdapter3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter.SqlDataAdapter3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter.SqlDataAdapter3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter.SqlDataAdapter3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataAdapter (string selectCommandText, string selectConnectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string selectCommandText, string selectConnectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (selectCommandText As String, selectConnectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlDataAdapter(System::String ^ selectCommandText, System::String ^ selectConnectionString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="selectCommandText" Type="System.String" />
        <Parameter Name="selectConnectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="selectCommandText"><span data-ttu-id="60417-157">Transact-SQL SELECT 문 또는 저장 프로시저이고 <see cref="T:System.String" />의 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 속성에서 사용될 <see cref="T:System.Data.SqlClient.SqlDataAdapter" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-157">A <see cref="T:System.String" /> that is a Transact-SQL SELECT statement or stored procedure to be used by the <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" />.</span></span></param>
        <param name="selectConnectionString"><span data-ttu-id="60417-158">연결 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-158">The connection string.</span></span> <span data-ttu-id="60417-159">연결 문자열에서 <see langword="Integrated Security = true" />를 사용 중이 아니면 <see cref="M:System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.Data.SqlClient.SqlConnection)" /> 및 <see cref="T:System.Data.SqlClient.SqlCredential" />을 사용하여 연결 문자열에서 사용자 ID와 암호를 텍스트로 지정할 때보다 사용자 ID와 암호를 보다 안전하게 전달할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-159">If your connection string does not use <see langword="Integrated Security = true" />, you can use <see cref="M:System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.Data.SqlClient.SqlConnection)" /> and <see cref="T:System.Data.SqlClient.SqlCredential" /> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</span></span></param>
        <summary><span data-ttu-id="60417-160"><see cref="T:System.Data.SqlClient.SqlDataAdapter" />와 연결 문자열을 사용하여 <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-160">Initializes a new instance of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> class with a <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> and a connection string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-161">이 오버 로드는 <xref:System.Data.SqlClient.SqlDataAdapter> 생성자 사용 하 여는 `selectCommandText` 매개 변수를 설정의 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-161">This overload of the <xref:System.Data.SqlClient.SqlDataAdapter> constructor uses the `selectCommandText` parameter to set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property.</span></span> <span data-ttu-id="60417-162"><xref:System.Data.SqlClient.SqlDataAdapter> 만들고 사용 하 여 만든 연결을 유지 하는 `selectConnectionString` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-162">The <xref:System.Data.SqlClient.SqlDataAdapter> will create and maintain the connection created with the `selectConnectionString` parameter.</span></span>  
  
 <span data-ttu-id="60417-163">인스턴스가 <xref:System.Data.SqlClient.SqlDataAdapter> 만들어지면 다음 읽기/쓰기 속성은 다음과 같은 초기 값으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60417-163">When an instance of <xref:System.Data.SqlClient.SqlDataAdapter> is created, the following read/write properties are set to the following initial values.</span></span>  
  
|<span data-ttu-id="60417-164">속성</span><span class="sxs-lookup"><span data-stu-id="60417-164">Properties</span></span>|<span data-ttu-id="60417-165">초기 값</span><span class="sxs-lookup"><span data-stu-id="60417-165">Initial value</span></span>|  
|----------------|-------------------|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 <span data-ttu-id="60417-166">속성에 대 한 별도 호출을 통해 이러한 속성의 값을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-166">You can change the value of any of these properties through a separate call to the property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60417-167">다음 예제에서는 한 <xref:System.Data.SqlClient.SqlDataAdapter> 속성 중 일부를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-167">The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets some of its properties.</span></span>  
  
 [!code-csharp[Classic WebData SqlDataAdapter.SqlDataAdapter2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter.SqlDataAdapter2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter.SqlDataAdapter2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter.SqlDataAdapter2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToBatch">
      <MemberSignature Language="C#" Value="protected override int AddToBatch (System.Data.IDbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 AddToBatch(class System.Data.IDbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDataAdapter.AddToBatch(System.Data.IDbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function AddToBatch (command As IDbCommand) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override int AddToBatch(System::Data::IDbCommand ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.IDbCommand" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearBatch">
      <MemberSignature Language="C#" Value="protected override void ClearBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDataAdapter.ClearBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ClearBatch ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ClearBatch();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">To be added.</param>
        <param name="command">To be added.</param>
        <param name="statementType">To be added.</param>
        <param name="tableMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">To be added.</param>
        <param name="command">To be added.</param>
        <param name="statementType">To be added.</param>
        <param name="tableMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlCommand ^ DeleteCommand { System::Data::SqlClient::SqlCommand ^ get(); void set(System::Data::SqlClient::SqlCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60417-168">레코드를 데이터 집합으로부터 삭제할 Transact-SQL 문이나 저장 프로시저를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-168">Gets or sets a Transact-SQL statement or stored procedure to delete records from the data set.</span></span></summary>
        <value><span data-ttu-id="60417-169"><see cref="T:System.Data.SqlClient.SqlCommand" />의 삭제된 행과 일치하는 데이터베이스의 레코드를 삭제하는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 중에 사용되는 <see cref="T:System.Data.DataSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-169">A <see cref="T:System.Data.SqlClient.SqlCommand" /> used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> to delete records in the database that correspond to deleted rows in the <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-170">동안 <xref:System.Data.Common.DbDataAdapter.Update%2A>경우이 속성은 설정 되지 않으며 기본 키 정보에 있는지는 <xref:System.Data.DataSet>, <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> 설정 하는 경우 자동으로 생성할 수는 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> 속성을 사용 하 여는 <xref:System.Data.SqlClient.SqlCommandBuilder>합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-170">During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> can be generated automatically if you set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.SqlClient.SqlCommandBuilder>.</span></span> <span data-ttu-id="60417-171">설정 하지 않으면 모든 추가 명령이 생성 한 다음,는 <xref:System.Data.SqlClient.SqlCommandBuilder>합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-171">Then, any additional commands that you do not set are generated by the <xref:System.Data.SqlClient.SqlCommandBuilder>.</span></span> <span data-ttu-id="60417-172">이 생성 논리는 키 열에 대 한 정보가 필요는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-172">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="60417-173">자세한 내용은 참조 [commandbuilder 생성 명령을](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-173">For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 <span data-ttu-id="60417-174">때 <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> 할당 되는 이전에 만든 <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlCommand> 가 복제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-174">When <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned.</span></span> <span data-ttu-id="60417-175"><xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> 이전에 만든에 대 한 참조를 유지 관리 <xref:System.Data.SqlClient.SqlCommand> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-175">The <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object.</span></span>  
  
 <span data-ttu-id="60417-176">데이터 소스에 전파 하는 모든 열에 대 한 <xref:System.Data.Common.DbDataAdapter.Update%2A>에 추가 되어야 하는 매개 변수는 `InsertCommand`, `UpdateCommand`, 또는 `DeleteCommand`합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-176">For every column that you propagate to the data source on <xref:System.Data.Common.DbDataAdapter.Update%2A>, a parameter should be added to the `InsertCommand`, `UpdateCommand`, or `DeleteCommand`.</span></span> <span data-ttu-id="60417-177">`SourceColumn` 매개 변수의 속성 열의 이름으로 설정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-177">The `SourceColumn` property of the parameter should be set to the name of the column.</span></span> <span data-ttu-id="60417-178">이 매개 변수 값을 수동으로 설정 되어 있지 않지만 현재 처리 된 행의 특정 열에서 가져온 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="60417-178">This indicates that the value of the parameter is not set manually, but is taken from the particular column in the currently processed row.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60417-179">다음 예제에서는 한 <xref:System.Data.SqlClient.SqlDataAdapter> 설정는 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, 및 <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-179">The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> properties.</span></span> <span data-ttu-id="60417-180">이미 만든 것으로 간주 한 <xref:System.Data.SqlClient.SqlConnection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-180">It assumes you have already created a <xref:System.Data.SqlClient.SqlConnection> object.</span></span>  
  
 [!code-csharp[DataWorks SqlDataAdapter.Command#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlDataAdapter.Command/CS/source.cs#1)]
 [!code-vb[DataWorks SqlDataAdapter.Command#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlDataAdapter.Command/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteBatch">
      <MemberSignature Language="C#" Value="protected override int ExecuteBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 ExecuteBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDataAdapter.ExecuteBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteBatch () As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override int ExecuteBatch();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedParameter">
      <MemberSignature Language="C#" Value="protected override System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.IDataParameter GetBatchedParameter(int32 commandIdentifier, int32 parameterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDataAdapter.GetBatchedParameter(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetBatchedParameter (commandIdentifier As Integer, parameterIndex As Integer) As IDataParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::IDataParameter ^ GetBatchedParameter(int commandIdentifier, int parameterIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" />
        <Parameter Name="parameterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">To be added.</param>
        <param name="parameterIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedRecordsAffected">
      <MemberSignature Language="C#" Value="protected override bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool GetBatchedRecordsAffected(int32 commandIdentifier, [out] int32&amp; recordsAffected, [out] class System.Exception&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetBatchedRecordsAffected (commandIdentifier As Integer, ByRef recordsAffected As Integer, ByRef error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool GetBatchedRecordsAffected(int commandIdentifier, [Runtime::InteropServices::Out] int % recordsAffected, [Runtime::InteropServices::Out] Exception ^ % error);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" />
        <Parameter Name="recordsAffected" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="error" Type="System.Exception&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">To be added.</param>
        <param name="recordsAffected">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeBatching">
      <MemberSignature Language="C#" Value="protected override void InitializeBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InitializeBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDataAdapter.InitializeBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InitializeBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InitializeBatching();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlCommand ^ InsertCommand { System::Data::SqlClient::SqlCommand ^ get(); void set(System::Data::SqlClient::SqlCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60417-181">새로운 레코드를 데이터 소스에 삽입할 Transact-SQL 문이나 저장 프로시저를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-181">Gets or sets a Transact-SQL statement or stored procedure to insert new records into the data source.</span></span></summary>
        <value><span data-ttu-id="60417-182"><see cref="T:System.Data.SqlClient.SqlCommand" />의 새 행과 일치하는 데이터베이스에 레코드를 삽입하는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 중에 사용되는 <see cref="T:System.Data.DataSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-182">A <see cref="T:System.Data.SqlClient.SqlCommand" /> used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> to insert records into the database that correspond to new rows in the <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-183">동안 <xref:System.Data.Common.DbDataAdapter.Update%2A>경우이 속성은 설정 되지 않으며 기본 키 정보에 있는지는 <xref:System.Data.DataSet>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A> 설정 하는 경우 자동으로 생성할 수는 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> 속성을 사용 하 여는 <xref:System.Data.SqlClient.SqlCommandBuilder>합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-183">During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A> can be generated automatically if you set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.SqlClient.SqlCommandBuilder>.</span></span> <span data-ttu-id="60417-184">설정 하지 않으면 모든 추가 명령이 생성 한 다음,는 <xref:System.Data.SqlClient.SqlCommandBuilder>합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-184">Then, any additional commands that you do not set are generated by the <xref:System.Data.SqlClient.SqlCommandBuilder>.</span></span> <span data-ttu-id="60417-185">이 생성 논리는 키 열에 대 한 정보가 필요는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-185">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="60417-186">자세한 내용은 참조 [commandbuilder 생성 명령을](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-186">For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 <span data-ttu-id="60417-187">때 <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A> 할당 되는 이전에 만든 <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlCommand> 가 복제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-187">When <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A> is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned.</span></span> <span data-ttu-id="60417-188"><xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A> 이전에 만든에 대 한 참조를 유지 관리 <xref:System.Data.SqlClient.SqlCommand> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-188">The <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A> maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object.</span></span>  
  
 <span data-ttu-id="60417-189">이 명령 실행 하 여 행이 반환 하는 경우 이러한 행에 추가할 수 있습니다는 <xref:System.Data.DataSet> 어떻게 설정 하느냐에 따라는 **UpdatedRowSource** 의 속성은 <xref:System.Data.SqlClient.SqlCommand> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-189">If execution of this command returns rows, these rows can be added to the <xref:System.Data.DataSet> depending on how you set the **UpdatedRowSource** property of the <xref:System.Data.SqlClient.SqlCommand> object.</span></span>  
  
 <span data-ttu-id="60417-190">데이터 소스에 전파 하는 모든 열에 대 한 <xref:System.Data.Common.DbDataAdapter.Update%2A>에 매개 변수를 추가 해야 `InsertCommand`, `UpdateCommand`, 또는 `DeleteCommand`합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-190">For every column that you propagate to the data source on <xref:System.Data.Common.DbDataAdapter.Update%2A>, a parameter should be added to `InsertCommand`, `UpdateCommand`, or `DeleteCommand`.</span></span> <span data-ttu-id="60417-191">`SourceColumn` 매개 변수의 속성 열의 이름으로 설정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-191">The `SourceColumn` property of the parameter should be set to the name of the column.</span></span> <span data-ttu-id="60417-192">이 매개 변수 값을 수동으로 설정 되어 있지 않지만 현재 처리 된 행의 특정 열에서 가져온 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="60417-192">This indicates that the value of the parameter is not set manually, but is taken from the particular column in the currently processed row.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60417-193">다음 예제에서는 한 <xref:System.Data.SqlClient.SqlDataAdapter> 설정는 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, 및 <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-193">The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> properties.</span></span> <span data-ttu-id="60417-194">이미 만든 것으로 간주 한 <xref:System.Data.SqlClient.SqlConnection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-194">It assumes you have already created a <xref:System.Data.SqlClient.SqlConnection> object.</span></span>  
  
 [!code-csharp[DataWorks SqlDataAdapter.Command#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlDataAdapter.Command/CS/source.cs#1)]
 [!code-vb[DataWorks SqlDataAdapter.Command#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlDataAdapter.Command/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected override void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnRowUpdated (value As RowUpdatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected override void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnRowUpdating (value As RowUpdatingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowUpdated">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowUpdatedEventHandler RowUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowUpdatedEventHandler RowUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlDataAdapter.RowUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowUpdated As SqlRowUpdatedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowUpdatedEventHandler ^ RowUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowUpdatedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60417-195">데이터 소스에 대해 명령이 실행된 후에 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />를 수행하는 동안 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-195">Occurs during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> after a command is executed against the data source.</span></span> <span data-ttu-id="60417-196">업데이트를 시도했으므로 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-196">The attempt to update is made, so the event fires.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-197">사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Update%2A>, 업데이트 하는 데이터 행 단위로 발생 하는 두 가지 이벤트가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-197">When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, there are two events that occur per data row updated.</span></span> <span data-ttu-id="60417-198">실행 순서는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-198">The order of execution is as follows:</span></span>  
  
1.  <span data-ttu-id="60417-199">값은 <xref:System.Data.DataRow> 매개 변수 값으로 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60417-199">The values in the <xref:System.Data.DataRow> are moved to the parameter values.</span></span>  
  
2.  <span data-ttu-id="60417-200"><xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-200">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.</span></span>  
  
3.  <span data-ttu-id="60417-201">명령을 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-201">The command executes.</span></span>  
  
4.  <span data-ttu-id="60417-202">명령으로 설정 되어 있으면 `FirstReturnedRecord`, 첫 번째 반환 결과에 배치 되는 <xref:System.Data.DataRow>합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-202">If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>.</span></span>  
  
5.  <span data-ttu-id="60417-203">에 지정 되므로 출력 매개 변수가 있는 경우는 <xref:System.Data.DataRow>합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-203">If there are output parameters, they are placed in the <xref:System.Data.DataRow>.</span></span>  
  
6.  <span data-ttu-id="60417-204"><xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-204">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.</span></span>  
  
7.  <span data-ttu-id="60417-205"><xref:System.Data.DataRow.AcceptChanges%2A>가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="60417-205"><xref:System.Data.DataRow.AcceptChanges%2A> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60417-206">모두를 사용 하는 방법을 보여 주는 다음 예제는 <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> 및 <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdated> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-206">The following example shows how to use both the <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> and <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdated> events.</span></span>  
  
 <span data-ttu-id="60417-207"><xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> 이 출력 이벤트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-207">The <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> event returns this output:</span></span>  
  
 <span data-ttu-id="60417-208">이벤트 인수: (command=System.Data.SqlClient.SqlCommand commandType 2 상태 = = 0)</span><span class="sxs-lookup"><span data-stu-id="60417-208">event args: (command=System.Data.SqlClient.SqlCommand commandType=2 status=0)</span></span>  
  
 <span data-ttu-id="60417-209"><xref:System.Data.SqlClient.SqlDataAdapter.RowUpdated> 이 출력 이벤트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-209">The <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdated> event returns this output:</span></span>  
  
 <span data-ttu-id="60417-210">이벤트 인수: (command=System.Data.SqlClient.SqlCommand commandType recordsAffected 2 = = 1 row=System.Data.DataRow[37] 상태 = 0)</span><span class="sxs-lookup"><span data-stu-id="60417-210">event args: (command=System.Data.SqlClient.SqlCommand commandType=2 recordsAffected=1 row=System.Data.DataRow[37] status=0)</span></span>  
  
 [!code-csharp[Classic WebData SqlDataAdapter.RowUpdated Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter.RowUpdated Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter.RowUpdated Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter.RowUpdated Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowUpdating">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowUpdatingEventHandler RowUpdating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowUpdatingEventHandler RowUpdating" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlDataAdapter.RowUpdating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowUpdating As SqlRowUpdatingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowUpdatingEventHandler ^ RowUpdating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowUpdatingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60417-211">데이터 소스에 대해 명령이 실행되기 전에 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />를 수행하는 동안 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-211">Occurs during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> before a command is executed against the data source.</span></span> <span data-ttu-id="60417-212">업데이트를 시도했으므로 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-212">The attempt to update is made, so the event fires.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-213">사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Update%2A>, 업데이트 하는 데이터 행 단위로 발생 하는 두 가지 이벤트가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-213">When using <xref:System.Data.Common.DbDataAdapter.Update%2A>, there are two events that occur per data row updated.</span></span> <span data-ttu-id="60417-214">실행 순서는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-214">The order of execution is as follows:</span></span>  
  
1.  <span data-ttu-id="60417-215">값은 <xref:System.Data.DataRow> 매개 변수 값으로 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="60417-215">The values in the <xref:System.Data.DataRow> are moved to the parameter values.</span></span>  
  
2.  <span data-ttu-id="60417-216"><xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-216">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.</span></span>  
  
3.  <span data-ttu-id="60417-217">명령을 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-217">The command executes.</span></span>  
  
4.  <span data-ttu-id="60417-218">명령으로 설정 되어 있으면 `FirstReturnedRecord`, 첫 번째 반환 결과에 배치 되는 <xref:System.Data.DataRow>합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-218">If the command is set to `FirstReturnedRecord`, the first returned result is placed in the <xref:System.Data.DataRow>.</span></span>  
  
5.  <span data-ttu-id="60417-219">에 지정 되므로 출력 매개 변수가 있는 경우는 <xref:System.Data.DataRow>합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-219">If there are output parameters, they are placed in the <xref:System.Data.DataRow>.</span></span>  
  
6.  <span data-ttu-id="60417-220"><xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-220">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.</span></span>  
  
7.  <span data-ttu-id="60417-221"><xref:System.Data.DataRow.AcceptChanges%2A>가 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="60417-221"><xref:System.Data.DataRow.AcceptChanges%2A> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60417-222">모두를 사용 하는 방법을 보여 주는 다음 예제는 <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> 및 <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdated> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-222">The following example shows how to use both the <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> and <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdated> events.</span></span>  
  
 <span data-ttu-id="60417-223"><xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> 이 출력 이벤트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-223">The <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> event returns this output:</span></span>  
  
 <span data-ttu-id="60417-224">이벤트 인수: (command=System.Data.SqlClient.SqlCommand commandType 2 상태 = = 0)</span><span class="sxs-lookup"><span data-stu-id="60417-224">event args: (command=System.Data.SqlClient.SqlCommand commandType=2 status=0)</span></span>  
  
 <span data-ttu-id="60417-225"><xref:System.Data.SqlClient.SqlDataAdapter.RowUpdated> 이 출력 이벤트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-225">The <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdated> event returns this output:</span></span>  
  
 <span data-ttu-id="60417-226">이벤트 인수: (command=System.Data.SqlClient.SqlCommand commandType recordsAffected 2 = = 1 row=System.Data.DataRow[37] 상태 = 0)</span><span class="sxs-lookup"><span data-stu-id="60417-226">event args: (command=System.Data.SqlClient.SqlCommand commandType=2 recordsAffected=1 row=System.Data.DataRow[37] status=0)</span></span>  
  
 [!code-csharp[Classic WebData SqlDataAdapter.RowUpdated Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter.RowUpdated Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter.RowUpdated Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter.RowUpdated Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlCommand ^ SelectCommand { System::Data::SqlClient::SqlCommand ^ get(); void set(System::Data::SqlClient::SqlCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60417-227">데이터 소스에서 레코드를 선택하는 데 사용하는 Transact-SQL 문이나 저장 프로시저를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-227">Gets or sets a Transact-SQL statement or stored procedure used to select records in the data source.</span></span></summary>
        <value><span data-ttu-id="60417-228"><see cref="T:System.Data.SqlClient.SqlCommand" />의 배치를 위한 데이터베이스에서 레코드를 선택하는 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 중에 사용되는 <see cref="T:System.Data.DataSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-228">A <see cref="T:System.Data.SqlClient.SqlCommand" /> used during <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> to select records from the database for placement in the <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-229">때 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> 할당 되는 이전에 만든 <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlCommand> 가 복제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-229">When <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned.</span></span> <span data-ttu-id="60417-230"><xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> 이전에 만든에 대 한 참조를 유지 관리 <xref:System.Data.SqlClient.SqlCommand> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-230">The <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object.</span></span>  
  
 <span data-ttu-id="60417-231">경우는 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> 모든 행을 반환 하지 않는에 테이블이 추가 되는 <xref:System.Data.DataSet>, 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-231">If the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60417-232">다음 예제에서는 한 <xref:System.Data.SqlClient.SqlDataAdapter> 설정는 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, 및 <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-232">The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> properties.</span></span> <span data-ttu-id="60417-233">이미 만든 것으로 간주 한 <xref:System.Data.SqlClient.SqlConnection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-233">It assumes you have already created a <xref:System.Data.SqlClient.SqlConnection> object.</span></span>  
  
 [!code-csharp[DataWorks SqlDataAdapter.Command#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlDataAdapter.Command/CS/source.cs#1)]
 [!code-vb[DataWorks SqlDataAdapter.Command#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlDataAdapter.Command/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberSignature Language="VB.NET" Value=" Property DeleteCommand As IDbCommand Implements IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.DeleteCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60417-234">이 멤버에 대한 설명은 <see cref="P:System.Data.IDbDataAdapter.DeleteCommand" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="60417-234">For a description of this member, see <see cref="P:System.Data.IDbDataAdapter.DeleteCommand" />.</span></span></summary>
        <value><span data-ttu-id="60417-235">데이터 집합에서 삭제된 행에 대해 데이터 소스의 레코드를 삭제하기 위해 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 중에 사용되는 <see cref="T:System.Data.IDbCommand" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-235">An <see cref="T:System.Data.IDbCommand" /> that is used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> to delete records in the data source for deleted rows in the data set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-236">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="60417-236">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="60417-237"><xref:System.Data.SqlClient.SqlDataAdapter> 인스턴스가 <xref:System.Data.IDbDataAdapter> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-237">It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberSignature Language="VB.NET" Value=" Property InsertCommand As IDbCommand Implements IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.InsertCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60417-238">이 멤버에 대한 설명은 <see cref="P:System.Data.IDbDataAdapter.InsertCommand" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="60417-238">For a description of this member, see <see cref="P:System.Data.IDbDataAdapter.InsertCommand" />.</span></span></summary>
        <value><span data-ttu-id="60417-239"><see cref="T:System.Data.IDbCommand" />를 수행하는 동안 데이터 집합의 새 행에 대한 레코드를 데이터 소스에 삽입하는 데 사용되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-239">An <see cref="T:System.Data.IDbCommand" /> that is used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> to insert records in the data source for new rows in the data set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-240">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="60417-240">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="60417-241"><xref:System.Data.SqlClient.SqlDataAdapter> 인스턴스가 <xref:System.Data.IDbDataAdapter> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-241">It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberSignature Language="VB.NET" Value=" Property SelectCommand As IDbCommand Implements IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.SelectCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60417-242">이 멤버에 대한 설명은 <see cref="P:System.Data.IDbDataAdapter.SelectCommand" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="60417-242">For a description of this member, see <see cref="P:System.Data.IDbDataAdapter.SelectCommand" />.</span></span></summary>
        <value><span data-ttu-id="60417-243"><see cref="T:System.Data.IDbCommand" />을 수행하는 동안 데이터 소스에서 데이터 집합에 배치할 레코드를 선택하는 데 사용되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-243">An <see cref="T:System.Data.IDbCommand" /> that is used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> to select records from data source for placement in the data set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-244">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="60417-244">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="60417-245"><xref:System.Data.SqlClient.SqlDataAdapter> 인스턴스가 <xref:System.Data.IDbDataAdapter> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-245">It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberSignature Language="VB.NET" Value=" Property UpdateCommand As IDbCommand Implements IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.UpdateCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60417-246">이 멤버에 대한 설명은 <see cref="P:System.Data.IDbDataAdapter.UpdateCommand" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="60417-246">For a description of this member, see <see cref="P:System.Data.IDbDataAdapter.UpdateCommand" />.</span></span></summary>
        <value><span data-ttu-id="60417-247"><see cref="T:System.Data.IdbCommand" />를 수행하는 동안 데이터 집합의 수정된 행에 대한 레코드를 데이터 소스에서 업데이트하는 데 사용되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-247">An <see cref="T:System.Data.IdbCommand" /> that is used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> to update records in the data source for modified rows in the data set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-248">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="60417-248">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="60417-249"><xref:System.Data.SqlClient.SqlDataAdapter> 인스턴스가 <xref:System.Data.IDbDataAdapter> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-249">It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.Data.IDbDataAdapter> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDataAdapter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="60417-250">이 멤버에 대한 설명은 <see cref="M:System.ICloneable.Clone" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="60417-250">For a description of this member, see <see cref="M:System.ICloneable.Clone" />.</span></span></summary>
        <returns><span data-ttu-id="60417-251">현재 인스턴스의 복사본인 새 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-251">A new object that is a copy of the current instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-252">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="60417-252">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="60417-253"><xref:System.Data.SqlClient.SqlDataAdapter> 인스턴스가 <xref:System.ICloneable> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-253">It can be used only when the <xref:System.Data.SqlClient.SqlDataAdapter> instance is cast to an <xref:System.ICloneable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TerminateBatching">
      <MemberSignature Language="C#" Value="protected override void TerminateBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TerminateBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlDataAdapter.TerminateBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TerminateBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TerminateBatching();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateBatchSize">
      <MemberSignature Language="C#" Value="public override int UpdateBatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UpdateBatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property UpdateBatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UpdateBatchSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60417-254">서버에 대한 각 라운드트립에서 처리된 행의 수를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-254">Gets or sets the number of rows that are processed in each round-trip to the server.</span></span></summary>
        <value><span data-ttu-id="60417-255">일괄 작업 당 처리할 행의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-255">The number of rows to process per-batch.</span></span>  
  
 <span data-ttu-id="60417-256"><list type="table"><listheader><term> 값은</span><span class="sxs-lookup"><span data-stu-id="60417-256"><list type="table"><listheader><term> Value is</span></span>  
  
 <span data-ttu-id="60417-257"></term><description> 효과</span><span class="sxs-lookup"><span data-stu-id="60417-257"></term><description> Effect</span></span>  
  
 <span data-ttu-id="60417-258"></description></listheader><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="60417-258"></description></listheader><item><term> 0</span></span>  
  
 <span data-ttu-id="60417-259"></term><description> 일괄 처리 크기에는 제한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-259"></term><description> There is no limit on the batch size..</span></span>  
  
 <span data-ttu-id="60417-260"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="60417-260"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="60417-261"></term><description> 일괄 처리 업데이트를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-261"></term><description> Disables batch updating.</span></span>  
  
 <span data-ttu-id="60417-262"></description></item><item><term> &gt;1</span><span class="sxs-lookup"><span data-stu-id="60417-262"></description></item><item><term> &gt;1</span></span>  
  
 <span data-ttu-id="60417-263"></term><description> 변경 내용의 일괄 처리를 사용 하 여 전송 되므로 <see cref="P:System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize" /> 한 번에 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-263"></term><description> Changes are sent using batches of <see cref="P:System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize" /> operations at a time.</span></span>  
  
 </description></item></list>  
  
 <span data-ttu-id="60417-264">연결 된 모든 명령을이 값 1이 아닌 값을 설정 하는 경우는 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 있어야 해당 **UpdatedRowSource** 속성이로 설정 <see langword="None" /> 또는 <see langword="OutputParameters" />합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-264">When setting this to a value other than 1, all the commands associated with the <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> have to have their **UpdatedRowSource** property set to <see langword="None" /> or <see langword="OutputParameters" />.</span></span> <span data-ttu-id="60417-265">그렇지 않으면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="60417-265">An exception is thrown otherwise.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-266">일괄 작업 처리 지원을 활성화하거나 비활성화하는 값을 가져오거나 설정하고 일괄 작업에서 실행할 수 있는 명령의 수를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-266">Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.</span></span>  
  
 <span data-ttu-id="60417-267">사용 하 여는 <xref:System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize%2A> 속성 변경 내용으로 데이터 소스를 업데이트 하는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-267">Use the <xref:System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize%2A> property to update a data source with changes from a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="60417-268">서버에 왕복 횟수를 줄여 응용 프로그램 성능을 향상 시킬 수이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-268">This can increase application performance by reducing the number of round-trips to the server.</span></span>  
  
 <span data-ttu-id="60417-269">너무 큰 배치를 실행하면 성능이 저하될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-269">Executing an extremely large batch could decrease performance.</span></span> <span data-ttu-id="60417-270">따라서 응용 프로그램을 구현하기 전에 최적의 배치 크기 설정을 테스트해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-270">Therefore, you should test for the optimum batch size setting before implementing your application.</span></span>  
  
 <span data-ttu-id="60417-271"><xref:System.ArgumentOutOfRangeException> 값 수로 설정 된 경우 throw 되 0 보다 작은 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-271">An <xref:System.ArgumentOutOfRangeException> is thrown if the value is set to a number less than zero.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlCommand ^ UpdateCommand { System::Data::SqlClient::SqlCommand ^ get(); void set(System::Data::SqlClient::SqlCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="60417-272">데이터 소스에서 레코드를 업데이트하는 데 사용하는 Transact-SQL 문이나 저장 프로시저를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-272">Gets or sets a Transact-SQL statement or stored procedure used to update records in the data source.</span></span></summary>
        <value><span data-ttu-id="60417-273"><see cref="T:System.Data.SqlClient.SqlCommand" />의 수정된 행과 일치하는 데이터베이스의 레코드를 업데이트하는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 중에 사용되는 <see cref="T:System.Data.DataSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-273">A <see cref="T:System.Data.SqlClient.SqlCommand" /> used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> to update records in the database that correspond to modified rows in the <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60417-274">동안 <xref:System.Data.Common.DbDataAdapter.Update%2A>경우이 속성은 설정 되지 않으며 기본 키 정보에 있는지는 <xref:System.Data.DataSet>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> 설정 하는 경우 자동으로 생성할 수는 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> 속성을 사용 하 여는 <xref:System.Data.SqlClient.SqlCommandBuilder>합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-274">During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> can be generated automatically if you set the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.SqlClient.SqlCommandBuilder>.</span></span> <span data-ttu-id="60417-275">설정 하지 않으면 모든 추가 명령이 생성 한 다음,는 <xref:System.Data.SqlClient.SqlCommandBuilder>합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-275">Then, any additional commands that you do not set are generated by the <xref:System.Data.SqlClient.SqlCommandBuilder>.</span></span> <span data-ttu-id="60417-276">이 생성 논리는 키 열에 대 한 정보가 필요는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-276">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="60417-277">자세한 내용은 참조 [commandbuilder 생성 명령을](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-277">For more information, see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 <span data-ttu-id="60417-278">때 <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> 할당 되는 이전에 만든 <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlCommand> 가 복제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="60417-278">When <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> is assigned to a previously created <xref:System.Data.SqlClient.SqlCommand>, the <xref:System.Data.SqlClient.SqlCommand> is not cloned.</span></span> <span data-ttu-id="60417-279"><xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> 이전에 만든에 대 한 참조를 유지 관리 <xref:System.Data.SqlClient.SqlCommand> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-279">The <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> maintains a reference to the previously created <xref:System.Data.SqlClient.SqlCommand> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60417-280">행을 반환 하는이 명령 실행 하는 경우 업데이트 된 행으로 병합 될 수 있습니다는 <xref:System.Data.DataSet> 어떻게 설정 하느냐에 따라는 **UpdatedRowSource** 의 속성은 <xref:System.Data.SqlClient.SqlCommand> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-280">If execution of this command returns rows, the updated rows may be merged with the <xref:System.Data.DataSet> depending on how you set the **UpdatedRowSource** property of the <xref:System.Data.SqlClient.SqlCommand> object.</span></span>  
  
 <span data-ttu-id="60417-281">데이터 소스에 전파 하는 모든 열에 대 한 <xref:System.Data.Common.DbDataAdapter.Update%2A>에 매개 변수를 추가 해야 `InsertCommand`, `UpdateCommand`, 또는 `DeleteCommand`합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-281">For every column that you propagate to the data source on <xref:System.Data.Common.DbDataAdapter.Update%2A>, a parameter should be added to `InsertCommand`, `UpdateCommand`, or `DeleteCommand`.</span></span>  
  
 <span data-ttu-id="60417-282">`SourceColumn` 매개 변수의 속성 열의 이름으로 설정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="60417-282">The `SourceColumn` property of the parameter should be set to the name of the column.</span></span> <span data-ttu-id="60417-283">이 매개 변수 값은 수동으로 설정 되지 않고 현재 처리 된 행의 특정 열에서 가져온 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="60417-283">This indicates that the value of the parameter is not set manually, but taken from the particular column in the currently processed row.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60417-284">다음 예제에서는 한 <xref:System.Data.SqlClient.SqlDataAdapter> 설정는 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> 및 <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-284">The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> and <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> properties.</span></span> <span data-ttu-id="60417-285">이미 만든 것으로 간주 한 <xref:System.Data.SqlClient.SqlConnection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="60417-285">It assumes you have already created a <xref:System.Data.SqlClient.SqlConnection> object.</span></span>  
  
 [!code-csharp[DataWorks SqlDataAdapter.Command#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlDataAdapter.Command/CS/source.cs#1)]
 [!code-vb[DataWorks SqlDataAdapter.Command#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlDataAdapter.Command/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>