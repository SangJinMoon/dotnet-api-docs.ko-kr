<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="241fd0ba7a347cff7d7803a0904f74473d27fbc8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36464422" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <TypeSignature Language="F#" Value="type Dispatcher = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="2f267-101">Provides services for managing the queue of work items for a thread.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2f267-101">Provides services for managing the queue of work items for a thread.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-102"><xref:System.Windows.Threading.Dispatcher> 특정 스레드에 대 한 작업 항목의 우선 순위가 지정 된 큐를 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-102">The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.</span></span>  
  
 <span data-ttu-id="2f267-103">때는 <xref:System.Windows.Threading.Dispatcher> 만들어집니다는 스레드에서 유일한 됩니다 <xref:System.Windows.Threading.Dispatcher> 스레드를에 연결할 수 있는 경우에는 <xref:System.Windows.Threading.Dispatcher> 를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-103">When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.</span></span>  
  
 <span data-ttu-id="2f267-104">얻으려고 시도 하는 경우는 <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> 현재 스레드에 대 한 및 <xref:System.Windows.Threading.Dispatcher> 는 스레드와 연결 되어 있지 않습니다는 <xref:System.Windows.Threading.Dispatcher> 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-104">If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created.</span></span> <span data-ttu-id="2f267-105">A <xref:System.Windows.Threading.Dispatcher> 만들 때 만들어집니다는 <xref:System.Windows.Threading.DispatcherObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-105">A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>.</span></span> <span data-ttu-id="2f267-106">만드는 경우는 <xref:System.Windows.Threading.Dispatcher> 백그라운드 스레드에서 수 발송자 스레드를 종료 하기 전에 종료 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-106">If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.</span></span>  
  
 <span data-ttu-id="2f267-107">경우는 <xref:System.Windows.Threading.Dispatcher> 될 아래, 시작할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-107">If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.</span></span>  
  
 <span data-ttu-id="2f267-108">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], <xref:System.Windows.Threading.DispatcherObject> 만 액세스할 수는 <xref:System.Windows.Threading.Dispatcher> 연결 된입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-108">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.</span></span>  <span data-ttu-id="2f267-109">예를 들어, 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 연관 된는 <xref:System.Windows.Threading.Dispatcher> 에 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-109">For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="2f267-110">에 액세스 하는 백그라운드 스레드는 <xref:System.Windows.Controls.ContentControl.Content%2A> 속성의는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> 와 관련 된는 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-110">In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="2f267-111">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-111">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="2f267-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="2f267-113">작업의 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-113">The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-114">경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 된 경우 반환 된 status 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-114">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 <span data-ttu-id="2f267-115">모든 방법에서 <xref:System.Windows.Threading.Dispatcher>, 제외 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>는 자유 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-115">All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.</span></span>  
  
 <span data-ttu-id="2f267-116">파생 된 개체 <xref:System.Windows.Threading.DispatcherObject> 스레드 선호도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-116">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="2f267-117">파생 된 개체 <xref:System.Windows.Freezable> 는 자유 스레드 때 고정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-117">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="2f267-118">자세한 내용은 [Freezable 개체 개요](~/docs/framework/wpf/advanced/freezable-objects-overview.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="2f267-118">For more information, see [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f267-119">에 작업을 배치 하는 방법을 보여 주는 다음 예제는 <xref:System.Windows.Threading.Dispatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-119">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="2f267-120">이 예에서는 전체 소스 코드에 대 한 참조 [장기 실행 계산 샘플에는 단일 응용 프로그램](http://go.microsoft.com/fwlink/?LinkID=160038)합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-120">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="2f267-121">먼저 인수가 없는 대리자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-121">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="2f267-122">그런 다음, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-122">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="2f267-123">이 호출으로 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 두 개의 매개 변수:으로 설정 된 우선 순위 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, 대리자의 인스턴스를 통해 전달 되는 콜백 `NextPrimeDelegate`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-123">This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2f267-124">Executes a delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-124">Executes a delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-125">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-125">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="2f267-126">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-126">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="2f267-127">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-127">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="2f267-128">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-128">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="2f267-129"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-129"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="2f267-130">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-130">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-131"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-131"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="2f267-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 반환 된 <xref:System.Windows.Threading.DispatcherOperation> 대리자가 이벤트 큐 때 대리자와 상호 작용 하는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="2f267-133"><xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-133">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="2f267-134">변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의이 보류 중 이므로 실행 이벤트 큐에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-134">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="2f267-135">이벤트 큐에서 대리자를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-135">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="2f267-136">반환할 대리자를 기다리는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-136">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="2f267-137">실행 후 대리자에서 반환 하는 값을 가져오기</span><span class="sxs-lookup"><span data-stu-id="2f267-137">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="2f267-138">여러 개인 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 동시 호출 <xref:System.Windows.Threading.DispatcherPriority>, 호출 된 순서 대로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-138">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="2f267-139">경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 된 경우 반환 된 status 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-139">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="2f267-140">The delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-140">The delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="2f267-141">An array of objects to pass as arguments to the given method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-141">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="2f267-142">Can be <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-142">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-143">Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-143">Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-144">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-144">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-145"><xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-145">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="2f267-146">변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의이 보류 중 이므로 실행 이벤트 큐에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-146">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="2f267-147">이벤트 큐에서 대리자를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-147">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="2f267-148">반환할 대리자를 기다리는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-148">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="2f267-149">실행 후 대리자에서 반환 하는 값을 가져오기</span><span class="sxs-lookup"><span data-stu-id="2f267-149">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="2f267-150"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-150"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="2f267-151">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-151">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="2f267-152">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-152">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="2f267-153">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-153">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="2f267-154">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-154">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="2f267-155"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-155"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="2f267-156">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-156">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-157">경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 된 경우 반환 된 status 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-157">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="2f267-158">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-158">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="2f267-159">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-159">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-160">Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-160">Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-161">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-161">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-162">여러 개인 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 동시 호출 <xref:System.Windows.Threading.DispatcherPriority>, 호출 된 순서 대로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-162">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="2f267-163"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 반환 된 <xref:System.Windows.Threading.DispatcherOperation> 대리자가 이벤트 큐 때 대리자와 상호 작용 하는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-163"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="2f267-164"><xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-164">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="2f267-165">변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의이 보류 중 이므로 실행 이벤트 큐에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-165">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="2f267-166">이벤트 큐에서 대리자를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-166">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="2f267-167">반환할 대리자를 기다리는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-167">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="2f267-168">실행 후 대리자에서 반환 하는 값을 가져오기</span><span class="sxs-lookup"><span data-stu-id="2f267-168">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="2f267-169"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-169"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="2f267-170">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-170">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="2f267-171">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-171">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="2f267-172">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-172">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="2f267-173">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-173">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="2f267-174"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-174"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="2f267-175">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-175">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-176">경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 된 경우 반환 된 status 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-176">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f267-177">에 작업을 배치 하는 방법을 보여 주는 다음 예제는 <xref:System.Windows.Threading.Dispatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-177">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="2f267-178">이 예에서는 전체 소스 코드에 대 한 참조 [장기 실행 계산 샘플에는 단일 응용 프로그램](http://go.microsoft.com/fwlink/?LinkID=160038)합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-178">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="2f267-179">먼저 인수가 없는 대리자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-179">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="2f267-180">그런 다음, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-180">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="2f267-181">때문에 모든 <xref:System.Windows.Threading.DispatcherObject> 반환 하는 속성에는 <xref:System.Windows.Threading.Dispatcher> 원하는와 연결 되어 <xref:System.Windows.Threading.Dispatcher> 쿼리하여 가져오고는 <xref:System.Windows.Threading.DispatcherObject>,이 경우에 <xref:System.Windows.Controls.Button> 라는 `startStopButton`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-181">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.</span></span>   <span data-ttu-id="2f267-182">에 대 한 호출 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 두 개의 매개 변수:으로 설정 된 우선 순위 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, 대리자의 인스턴스를 통해 전달 되는 콜백 `NextPrimeDelegate`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-182">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2f267-183">
            <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-183">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="2f267-184">
            <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-184">
              <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="2f267-185">The delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-185">The delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="2f267-186">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-186">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="2f267-187">An array of objects to pass as arguments to the given method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-187">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="2f267-188">Can be <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-188">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-189">Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-189">Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-190">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-190">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-191"><xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-191">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="2f267-192">변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의이 보류 중 이므로 실행 이벤트 큐에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-192">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="2f267-193">이벤트 큐에서 대리자를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-193">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="2f267-194">반환할 대리자를 기다리는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-194">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="2f267-195">실행 후 대리자에서 반환 하는 값을 가져오기</span><span class="sxs-lookup"><span data-stu-id="2f267-195">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="2f267-196"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-196"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="2f267-197">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-197">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="2f267-198">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-198">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="2f267-199">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-199">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="2f267-200">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-200">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="2f267-201"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-201"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="2f267-202">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-202">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-203">경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 된 경우 반환 된 status 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-203">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="2f267-204">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-204">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="2f267-205">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-205">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="2f267-206">The object to pass as an argument to the specified method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-206">The object to pass as an argument to the specified method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-207">Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-207">Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-208">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-208">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-209">`Arg` 수 `null` 없는 인수가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-209">`Arg` can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="2f267-210"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 반환 된 <xref:System.Windows.Threading.DispatcherOperation> 대리자가 이벤트 큐 때 대리자와 상호 작용 하는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-210"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="2f267-211"><xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-211">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="2f267-212">변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의이 보류 중 이므로 실행 이벤트 큐에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-212">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="2f267-213">이벤트 큐에서 대리자를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-213">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="2f267-214">반환할 대리자를 기다리는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-214">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="2f267-215">실행 후 대리자에서 반환 하는 값을 가져오기</span><span class="sxs-lookup"><span data-stu-id="2f267-215">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="2f267-216"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-216"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="2f267-217">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-217">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="2f267-218">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-218">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="2f267-219">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-219">In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="2f267-220">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-220">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="2f267-221"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-221"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="2f267-222">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-222">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-223">여러 개인 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 동시 호출 <xref:System.Windows.Threading.DispatcherPriority>, 호출 된 순서 대로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-223">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="2f267-224">경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 된 경우 반환 된 status 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-224">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f267-225">에 작업을 배치 하는 방법을 보여 주는 다음 예제는 <xref:System.Windows.Threading.Dispatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-225">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="2f267-226">먼저, 하나의 인수 즉,이 경우 문자열에서에서 허용 하는 대리자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-226">First, a delegate is created that accepts one argument, in this case a string.</span></span>  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 <span data-ttu-id="2f267-227">그런 다음, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-227">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> is called.</span></span>  <span data-ttu-id="2f267-228">때문에 모든 <xref:System.Windows.Threading.DispatcherObject> 반환 하는 속성에는 <xref:System.Windows.Threading.Dispatcher> 원하는와 연결 되어 <xref:System.Windows.Threading.Dispatcher> 쿼리하여 가져오고는 <xref:System.Windows.Threading.DispatcherObject>,이 경우에 <xref:System.Windows.Controls.Grid> 라는 `tomorrowsWeather`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-228">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`.</span></span> <span data-ttu-id="2f267-229">에 대 한 호출 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> 세 개의 매개 변수:으로 설정 된 우선 순위 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; 대리자의 인스턴스를 통해 전달 되는 콜백에 `OneArgDelegate`; 및 이라는 문자열 `weather`, 하는 콜백에 대 한 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-229">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.</span></span>  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2f267-230">
            <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-230">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="2f267-231">
            <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-231">
              <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="2f267-232">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-232">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="2f267-233">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-233">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="2f267-234">The object to pass as an argument to the specified method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-234">The object to pass as an argument to the specified method.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="2f267-235">An array of objects to pass as arguments to the specified method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-235">An array of objects to pass as arguments to the specified method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-236">Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-236">Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-237">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-237">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-238">`arg` 매개 변수 수 `null` 없는 인수가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-238">The `arg` parameter can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="2f267-239"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 반환 된 <xref:System.Windows.Threading.DispatcherOperation> 대리자가 이벤트 큐 때 대리자와 상호 작용 하는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-239"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="2f267-240"><xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-240">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="2f267-241">변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의이 보류 중 이므로 실행 이벤트 큐에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-241">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="2f267-242">이벤트 큐에서 대리자를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-242">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="2f267-243">반환할 대리자를 기다리는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-243">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="2f267-244">실행 후 대리자에서 반환 하는 값을 가져오기</span><span class="sxs-lookup"><span data-stu-id="2f267-244">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="2f267-245"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-245"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="2f267-246">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-246">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="2f267-247">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-247">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="2f267-248">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-248">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="2f267-249">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-249">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="2f267-250"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-250"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="2f267-251">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-251">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-252">여러 개인 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 동시 호출 <xref:System.Windows.Threading.DispatcherPriority>, 호출 된 순서 대로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-252">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="2f267-253">경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 된 경우 반환 된 status 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-253">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2f267-254">
            <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-254">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="2f267-255">
            <see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-255">
              <see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.BeginInvokeShutdown : System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.BeginInvokeShutdown priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="2f267-256">The priority at which to begin shutting down the dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-256">The priority at which to begin shutting down the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-257">Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-257">Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-258"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> 무제한 UI 권한을 요청 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-258"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="2f267-259">때는 <xref:System.Windows.Threading.Dispatcher> 시작, 종료 하는 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트가 발생 하 고 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 되어 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-259">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="2f267-260"><xref:System.Windows.Threading.Dispatcher> 종료 되지 않는 완전히 이벤트 큐 해제 될 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-260">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="2f267-261">발송자 종료, 완료 되 면는 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성이로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-261">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="2f267-262">종료 프로세스가 시작 되 면 모든 보류 중인 작업 항목 큐에 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-262">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="2f267-263">발송자를 종료 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-263">for shutting down the dispatcher.</span>
          </span>
          <span data-ttu-id="2f267-264">연결 된 열거형의 경우:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-264">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcher.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2f267-265">Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-265">Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-266">
            <see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-266">
              <see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-267">만 <xref:System.Windows.Threading.Dispatcher> 하는 <xref:System.Windows.Threading.DispatcherObject> 만들어집니다 개체 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-267">Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.</span></span>  <span data-ttu-id="2f267-268">사용 하 여 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 다른 스레드에서 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-268">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.</span></span>  
  
 <span data-ttu-id="2f267-269"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 모든 스레드에서 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-269"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.</span></span>  
  
 <span data-ttu-id="2f267-270">차이 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 및 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 은 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 호출 스레드가에 액세스할 수 있는지를 나타내는 부울을 반환 하는 <xref:System.Windows.Threading.Dispatcher> 및 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-270">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f267-271">다음 예제에서는 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 스레드에 대 한 액세스를 갖고 있는지 여부를 결정 하는 <xref:System.Windows.Controls.Button>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-271">The following example uses <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="2f267-272"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 에서 메서드는 <xref:System.Windows.Threading.Dispatcher> 연관는 <xref:System.Windows.Controls.Button> 스레드에 대 한 액세스를 확인 하기 위해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-272">The <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="2f267-273">호출 스레드가 액세스할 수 있으면는 <xref:System.Windows.Threading.Dispatcher>, <xref:System.Windows.Controls.Button> 의 멤버에 액세스 하 여 업데이트 되는 <xref:System.Windows.Controls.Button>, 그렇지 않으면 허용 하는 대리자는 <xref:System.Windows.Controls.Button> 를 인수로 배치는 <xref:System.Windows.Threading.Dispatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-273">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="2f267-274"><xref:System.Windows.Threading.Dispatcher> 에서 업데이트 작업을 위임 하는 <xref:System.Windows.Controls.Button>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-274">The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2f267-275">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-275">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2f267-276">현재 스레드와 연결 된 디스패처입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-276">The dispatcher associated with the current thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-277">경우는 <xref:System.Windows.Threading.Dispatcher> 현재 스레드와 연결 되어 있지 않습니다 새 <xref:System.Windows.Threading.Dispatcher> 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-277">If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.</span></span>  <span data-ttu-id="2f267-278">이것은 <xref:System.Windows.Threading.Dispatcher.FromThread%2A> 메서드의 경우가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-278">This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.</span></span>  <span data-ttu-id="2f267-279"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> 반환 `null` 가 없는 경우 지정 된 스레드에 연결 된 디스패처입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-279"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberSignature Language="F#" Value="member this.DisableProcessing : unit -&gt; System.Windows.Threading.DispatcherProcessingDisabled" Usage="dispatcher.DisableProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2f267-280">Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-280">Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-281">A structure used to re-enable dispatcher processing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-281">A structure used to re-enable dispatcher processing.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-282">해제 발송자 처리는 관련 없는 재입력 가능성을 제거 하려고 하는 고급 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-282">Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</span></span>  
  
 <span data-ttu-id="2f267-283">처리를 사용 하지 않도록 설정의 효과 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-283">The effects of disabling processing are as follows:</span></span>  
  
-   <span data-ttu-id="2f267-284">CLR 잠금은 내부적으로 메시지를 펌핑 하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-284">CLR locks will not pump messages internally.</span></span>  
  
-   <span data-ttu-id="2f267-285"><xref:System.Windows.Threading.DispatcherFrame> 개체는 푸시 허용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-285"><xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.</span></span>  
  
-   <span data-ttu-id="2f267-286">메시지 처리를 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-286">Message processing is not permitted.</span></span>  
  
 <span data-ttu-id="2f267-287"><xref:System.Windows.Threading.DispatcherProcessingDisabled> 구조체 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 반환 호출 될 때 다시 활성화 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-287">The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.</span></span>  <span data-ttu-id="2f267-288">호출 <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> 에 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 구조에는 다시 처리할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-288">Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.</span></span>  
  
 <span data-ttu-id="2f267-289"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 스레드에서 호출할 수 있습니다는 <xref:System.Windows.Threading.Dispatcher> 연관 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-289"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f267-290">다음 예제에서는 발송자 처리를 사용 하지 않도록 설정 하 고 다시 활성화 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-290">The following example shows how to disable dispatcher processing and re-enable dispatcher processing.</span></span>  <span data-ttu-id="2f267-291"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 호출 되는 **를 사용 하 여** 문.</span><span class="sxs-lookup"><span data-stu-id="2f267-291"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> is called in a **using** statement.</span></span>  <span data-ttu-id="2f267-292"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 반환 된 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 때 삭제 된 개체와 사용 되는 구조는 **를 사용 하 여** 블록이 끝날 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-292"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.</span></span>  <span data-ttu-id="2f267-293">때 <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> 라고 하는 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 구조, 발송자 처리를 다시 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-293">When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.</span></span>  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberSignature Language="F#" Value="static member ExitAllFrames : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ExitAllFrames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2f267-294">Requests that all frames exit, including nested frames.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-294">Requests that all frames exit, including nested frames.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="2f267-295">이 메서드를 호출 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-295">for calling this method.</span>
          </span>
          <span data-ttu-id="2f267-296">연결 된 열거형의 경우:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-296">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberSignature Language="F#" Value="static member FromThread : System.Threading.Thread -&gt; System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.FromThread thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread">
          <span data-ttu-id="2f267-297">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-297">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-298">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-298">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-299">The dispatcher for <paramref name="thread" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-299">The dispatcher for <paramref name="thread" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-300">디스패처에 대 한 지정 된 스레드를 사용할 수 없는 경우 `null` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-300">If a dispatcher is not available for the specified thread, `null` will be returned.</span></span>  
  
 <span data-ttu-id="2f267-301"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> 만들지 않고는 <xref:System.Windows.Threading.Dispatcher> 하지 않은 스레드에서 <xref:System.Windows.Threading.Dispatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-301"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.</span></span>   <span data-ttu-id="2f267-302">새 <xref:System.Windows.Threading.Dispatcher> 아직 포함 되지 않은 스레드에서 만들어집니다는 <xref:System.Windows.Threading.Dispatcher> 얻으려고 시도할 때는 <xref:System.Windows.Threading.Dispatcher> 를 사용 하 여는 <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-302">A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownFinished : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2f267-303">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-303">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2f267-304">
            <see langword="true" /> 발송자가 완전히; 종료 하는 경우 그렇지 않으면 <see langword="false" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-304">
              <see langword="true" /> if the dispatcher has finished shutting down; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-305">때는 <xref:System.Windows.Threading.Dispatcher> 시작, 종료 하는 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트가 발생 하 고 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 되어 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-305">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="2f267-306"><xref:System.Windows.Threading.Dispatcher> 이벤트 큐 해제 될 때까지 완전히 종료 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-306">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="2f267-307">발송자 종료, 완료 되 면는 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성이로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-307">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="2f267-308">종료 프로세스가 시작 되 면 모든 보류 중인 작업 항목 큐에 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-308">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownStarted : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2f267-309">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-309">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2f267-310">
            <see langword="true" /> 경우는 <see cref="T:System.Windows.Threading.Dispatcher" /> 종료 하 고 그렇지 않으면 시작 <see langword="false" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-310">
              <see langword="true" /> if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-311">때는 <xref:System.Windows.Threading.Dispatcher> 시작, 종료 하는 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트가 발생 하 고 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 되어 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-311">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="2f267-312"><xref:System.Windows.Threading.Dispatcher> 종료 되지 않는 완전히 이벤트 큐 해제 될 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-312">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="2f267-313">발송자 종료, 완료 되 면는 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성이로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-313">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="2f267-314">종료 프로세스가 시작 되 면 모든 보류 중인 작업 항목 큐에 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-314">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hooks : System.Windows.Threading.DispatcherHooks" Usage="System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2f267-315">Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-315">Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2f267-316">연결 된이 후크 <see cref="T:System.Windows.Threading.Dispatcher" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-316">The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-317"><xref:System.Windows.Threading.DispatcherHooks> 클래스에 대 한 추가 이벤트 정보를 제공는 <xref:System.Windows.Threading.Dispatcher>, 예를 들어는 <xref:System.Windows.Threading.Dispatcher> 활성화 되지 않은 작업이 완료 된 경우 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-317">The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="2f267-318">이 속성을 가져오는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-318">for getting this property.</span>
          </span>
          <span data-ttu-id="2f267-319">연결 된 열거형의 경우:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-319">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2f267-320">Executes the specified delegate synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-320">Executes the specified delegate synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-321">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-321">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="2f267-322">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-322">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="2f267-323">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-323">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="2f267-324">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-324">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="2f267-325"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-325"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="2f267-326">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-326">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-327"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 작업입니다. 따라서 제어 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-327"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f267-328">다음 예제에서는 대리자를 배치는 <xref:System.Windows.Threading.Dispatcher> 에서 <xref:System.Windows.Threading.DispatcherPriority.Normal> 를 사용 하 여 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-328">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action -&gt; unit" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="2f267-329">A delegate to invoke through the dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-329">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-330">Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-330">Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="2f267-331">A delegate to invoke through the dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-331">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="2f267-332">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-332">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-333">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-333">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="2f267-334">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-334">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="2f267-335">An array of objects to pass as arguments to the given method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-335">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="2f267-336">Can be <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-336">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-337">Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-337">Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-338">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-338">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-339">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-339">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="2f267-340">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-340">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="2f267-341">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-341">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="2f267-342">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-342">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="2f267-343"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-343"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="2f267-344">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-344">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-345"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 작업입니다. 따라서 제어 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-345"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="2f267-346">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-346">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="2f267-347">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-347">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-348">Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-348">Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-349">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-349">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-350">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-350">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="2f267-351">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-351">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="2f267-352">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-352">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="2f267-353">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-353">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="2f267-354"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-354"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="2f267-355">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-355">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-356"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 작업입니다. 따라서 제어 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-356"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f267-357">다음 예제에서는 대리자를 배치는 <xref:System.Windows.Threading.Dispatcher> 에서 <xref:System.Windows.Threading.DispatcherPriority.Normal> 를 사용 하 여 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-357">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2f267-358">
            <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-358">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="2f267-359">
            <paramref name="priority" /> is not a valid priority.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-359">
              <paramref name="priority" /> is not a valid priority.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2f267-360">
            <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-360">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="2f267-361">A delegate to invoke through the dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-361">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="2f267-362">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-362">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="2f267-363">An object that indicates whether to cancel the action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-363">An object that indicates whether to cancel the action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-364">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-364">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="2f267-365">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-365">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="2f267-366">The maximum amount of time to wait for the operation to complete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-366">The maximum amount of time to wait for the operation to complete.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="2f267-367">An array of objects to pass as arguments to the given method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-367">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="2f267-368">Can be <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-368">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-369">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-369">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-370">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-370">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-371">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-371">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="2f267-372">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-372">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="2f267-373">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-373">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="2f267-374">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-374">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="2f267-375"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-375"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="2f267-376">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-376">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-377"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 작업입니다. 따라서 제어 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-377"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="2f267-378">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-378">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="2f267-379">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-379">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="2f267-380">An array of objects to pass as arguments to the given method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-380">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="2f267-381">Can be <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-381">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-382">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-382">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-383">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-383">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-384">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-384">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="2f267-385">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-385">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="2f267-386">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-386">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="2f267-387">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-387">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="2f267-388"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-388"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="2f267-389">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-389">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-390"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 작업입니다. 따라서 제어 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-390"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="2f267-391">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-391">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="2f267-392">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-392">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="2f267-393">An object to pass as an argument to the given method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-393">An object to pass as an argument to the given method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-394">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-394">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-395">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-395">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-396">`Arg` 수 `null` 인수가 필요 하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2f267-396">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="2f267-397">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-397">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="2f267-398">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-398">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="2f267-399">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-399">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="2f267-400">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-400">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="2f267-401"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-401"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="2f267-402">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-402">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-403"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 작업입니다. 따라서 제어 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-403"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2f267-404">
            <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-404">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="2f267-405">
            <paramref name="priority" /> is not a valid priority.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-405">
              <paramref name="priority" /> is not a valid priority.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2f267-406">
            <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-406">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="2f267-407">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-407">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="2f267-408">The maximum time to wait for the operation to finish.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-408">The maximum time to wait for the operation to finish.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="2f267-409">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-409">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-410">Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-410">Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-411">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-411">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-412">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-412">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="2f267-413">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-413">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="2f267-414">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-414">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="2f267-415">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-415">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="2f267-416"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-416"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="2f267-417">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-417">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-418"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 작업입니다. 따라서 제어 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-418"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="2f267-419">A delegate to invoke through the dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-419">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="2f267-420">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-420">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="2f267-421">An object that indicates whether to cancel the action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-421">An object that indicates whether to cancel the action.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="2f267-422">The minimum amount of time to wait for the operation to start.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-422">The minimum amount of time to wait for the operation to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-423">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-423">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="2f267-424">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-424">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="2f267-425">The maximum amount of time to wait for the operation to complete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-425">The maximum amount of time to wait for the operation to complete.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="2f267-426">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-426">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="2f267-427">An array of objects to pass as arguments to the given method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-427">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="2f267-428">Can be <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-428">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-429">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-429">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-430">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-430">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-431">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-431">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="2f267-432">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-432">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="2f267-433">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-433">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="2f267-434">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-434">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="2f267-435"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-435"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="2f267-436">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-436">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-437"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 작업입니다. 따라서 제어 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-437"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="2f267-438">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-438">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="2f267-439">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-439">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="2f267-440">An object to pass as an argument to the given method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-440">An object to pass as an argument to the given method.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="2f267-441">An array of objects to pass as arguments to the given method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-441">An array of objects to pass as arguments to the given method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-442">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-442">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-443">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-443">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-444">`Arg` 수 `null` 인수가 필요 하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2f267-444">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="2f267-445">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-445">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="2f267-446">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-446">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="2f267-447">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-447">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="2f267-448">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-448">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="2f267-449"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-449"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="2f267-450">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-450">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-451"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 작업입니다. 따라서 제어 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-451"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2f267-452">
            <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-452">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="2f267-453">
            <paramref name="priority" /> is not a valid priority.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-453">
              <paramref name="priority" /> is not a valid priority.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2f267-454">
            <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-454">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="2f267-455">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-455">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="2f267-456">The maximum time to wait for the operation to finish.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-456">The maximum time to wait for the operation to finish.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="2f267-457">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-457">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="2f267-458">An object to pass as an argument to the given method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-458">An object to pass as an argument to the given method.</span>
          </span>
          <span data-ttu-id="2f267-459">This can be <see langword="null" /> if no arguments are needed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-459">This can be <see langword="null" /> if no arguments are needed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-460">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-460">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-461">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-461">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-462">`Arg` 수 `null` 인수가 필요 하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="2f267-462">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="2f267-463">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-463">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="2f267-464">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-464">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="2f267-465">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-465">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="2f267-466">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-466">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="2f267-467"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-467"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="2f267-468">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-468">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-469"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 작업입니다. 따라서 제어 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-469"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2f267-470">
            <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-470">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="2f267-471">
            <paramref name="priority" /> is not a valid priority.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-471">
              <paramref name="priority" /> is not a valid priority.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2f267-472">
            <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-472">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="2f267-473">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-473">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="2f267-474">The maximum time to wait for the operation to finish.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-474">The maximum time to wait for the operation to finish.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="2f267-475">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-475">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="2f267-476">An object to pass as an argument to the specified method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-476">An object to pass as an argument to the specified method.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="2f267-477">An array of objects to pass as arguments to the specified method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-477">An array of objects to pass as arguments to the specified method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-478">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-478">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-479">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-479">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-480">`Arg` 수 `null` 인수가 필요 하지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="2f267-480">`Arg` can be `null` if an argument is not needed.</span></span>  
  
 <span data-ttu-id="2f267-481">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], 작성 된 스레드에서 <xref:System.Windows.Threading.DispatcherObject> 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-481">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="2f267-482">예를 들어 주 UI 스레드가 분리 된 백그라운드 스레드의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 에 UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-482">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="2f267-483">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해는 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-483">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="2f267-484">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-484">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="2f267-485"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 메서드 됩니다 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-485"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="2f267-486">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 위치에서 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-486">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="2f267-487"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기 작업입니다. 따라서 제어 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-487"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2f267-488">
            <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-488">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="2f267-489">
            <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-489">
              <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2f267-490">
            <paramref name="method" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-490">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; -&gt; 'Result" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="2f267-491">지정된 된 대리자의 반환 값 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-491">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="2f267-492">A delegate to invoke through the dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-492">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-493">Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-493">Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-494">반환한 값 `callback`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-494">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="2f267-495">지정된 된 대리자의 반환 값 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-495">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="2f267-496">A delegate to invoke through the dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-496">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="2f267-497">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-497">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-498">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-498">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-499">반환한 값 `callback`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-499">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="2f267-500">지정된 된 대리자의 반환 값 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-500">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="2f267-501">A delegate to invoke through the dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-501">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="2f267-502">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-502">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="2f267-503">An object that indicates whether to cancel the operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-503">An object that indicates whether to cancel the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-504">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-504">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-505">반환한 값 `callback`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-505">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="2f267-506">지정된 된 대리자의 반환 값 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-506">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="2f267-507">A delegate to invoke through the dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-507">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="2f267-508">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-508">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="2f267-509">An object that indicates whether to cancel the operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-509">An object that indicates whether to cancel the operation.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="2f267-510">The minimum amount of time to wait for the operation to start.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-510">The minimum amount of time to wait for the operation to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-511">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-511">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-512">반환한 값 `callback`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-512">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2f267-513">Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-513">Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="2f267-514">A delegate to invoke through the dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-514">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-515">Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-515">Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-516">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-516">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="2f267-517">A delegate to invoke through the dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-517">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="2f267-518">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-518">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-519">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-519">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-520">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-520">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="2f267-521">A delegate to invoke through the dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-521">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="2f267-522">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-522">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="2f267-523">An object that indicates whether to cancel the action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-523">An object that indicates whether to cancel the action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-524">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-524">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-525">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-525">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="2f267-526">지정된 된 대리자의 반환 값 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-526">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="2f267-527">A delegate to invoke through the dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-527">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-528">Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-528">Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-529">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-529">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="2f267-530">지정된 된 대리자의 반환 값 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-530">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="2f267-531">A delegate to invoke through the dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-531">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="2f267-532">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-532">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-533">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-533">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-534">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-534">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="2f267-535">지정된 된 대리자의 반환 값 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-535">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="2f267-536">A delegate to invoke through the dispatcher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-536">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="2f267-537">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-537">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="2f267-538">An object that indicates whether to cancel the operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-538">An object that indicates whether to cancel the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-539">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-539">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-540">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-540">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberSignature Language="F#" Value="member this.InvokeShutdown : unit -&gt; unit" Usage="dispatcher.InvokeShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2f267-541">Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-541">Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-542"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> 무제한 UI 권한을 요청 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-542"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="2f267-543">때는 <xref:System.Windows.Threading.Dispatcher> 시작, 종료 하는 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트가 발생 하 고 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 되어 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-543">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="2f267-544"><xref:System.Windows.Threading.Dispatcher> 종료 되지 않는 완전히 이벤트 큐 해제 될 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-544">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="2f267-545">발송자 종료, 완료 되 면는 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성이로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-545">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="2f267-546">종료 프로세스가 시작 되 면 모든 보류 중인 작업 항목 큐에 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-546">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="2f267-547">발송자를 종료 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-547">for shutting down the dispatcher.</span>
          </span>
          <span data-ttu-id="2f267-548">연결 된 열거형의 경우:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-548">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberSignature Language="F#" Value="static member PushFrame : System.Windows.Threading.DispatcherFrame -&gt; unit" Usage="System.Windows.Threading.Dispatcher.PushFrame frame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame">
          <span data-ttu-id="2f267-549">The frame for the dispatcher to process.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-549">The frame for the dispatcher to process.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-550">Enters an execute loop.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-550">Enters an execute loop.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-551">A <xref:System.Windows.Threading.DispatcherFrame> 보류 중인 작업 항목을 처리 하는 루프를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-551">A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.</span></span>  
  
 <span data-ttu-id="2f267-552">발송자 루프에서 작업 항목 큐를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-552">The Dispatcher processes the work item queue in a loop.</span></span>  <span data-ttu-id="2f267-553">루프를 프레임 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-553">The loop is referred to as a frame.</span></span>  <span data-ttu-id="2f267-554">초기 루프는 일반적으로 시작 된 응용 프로그램에서 호출 하 여 <xref:System.Windows.Threading.Dispatcher.Run%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-554">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="2f267-555"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> 매개 변수가 나타내는 반복으로 진입 `frame`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-555"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.</span></span>  <span data-ttu-id="2f267-556">루프의 각 반복에서는 <xref:System.Windows.Threading.Dispatcher> 는 확인는 <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> 속성에는 <xref:System.Windows.Threading.DispatcherFrame> 루프가 계속 해야 하는지 여부 또는 중지 해야 하는 경우를 확인 하려면 클래스.</span><span class="sxs-lookup"><span data-stu-id="2f267-556">At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.</span></span>  
  
 <span data-ttu-id="2f267-557"><xref:System.Windows.Threading.DispatcherFrame> 에 대 한 허용는 <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> 속성을 명시적으로 설정 해야 하며는 존중는 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 속성에는 <xref:System.Windows.Threading.Dispatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-557"><xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="2f267-558">즉는 <xref:System.Windows.Threading.Dispatcher> 가 종료 되기 시작, 기본값을 사용 하는 프레임 <xref:System.Windows.Threading.DispatcherFrame> 종료 하려면 중첩 된 모든 프레임이를 통해 구현 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-558">This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f267-559">사용 하는 방법을 보여 주는 다음 예제는 <xref:System.Windows.Threading.DispatcherFrame> 비슷한 결과를 달성 하기 위해는 [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2f267-559">The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span>  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2f267-560">
            <paramref name="frame" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-560">
              <paramref name="frame" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2f267-561">
            <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" />  -or-  <paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-561">
              <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" />  -or-  <paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
          <span data-ttu-id="2f267-562">-or-  Dispatcher processing has been disabled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-562">-or-  Dispatcher processing has been disabled.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="2f267-563">실행 프레임 밀어 넣는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-563">for pushing an execution frame.</span>
          </span>
          <span data-ttu-id="2f267-564">연결 된 열거형의 경우:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-564">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2f267-565">Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-565">Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-566"><xref:System.Windows.Threading.Dispatcher> 루프에서 이벤트 큐를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-566">The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.</span></span>  <span data-ttu-id="2f267-567">루프를 프레임 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-567">The loop is referred to as a frame.</span></span>  <span data-ttu-id="2f267-568">초기 루프는 일반적으로 시작 된 응용 프로그램에서 호출 하 여 <xref:System.Windows.Threading.Dispatcher.Run%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-568">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="2f267-569">기본 실행 프레임 될 때까지 계속 됩니다는 <xref:System.Windows.Threading.Dispatcher> 이 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-569">The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberSignature Language="F#" Value="member this.ShutdownFinished : EventHandler " Usage="member this.ShutdownFinished : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2f267-570">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-570">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-571">때의 종료 프로세스는 <xref:System.Windows.Threading.Dispatcher> 시작 되는 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트는 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-571">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="2f267-572"><xref:System.Windows.Threading.Dispatcher> 이벤트 큐 해제 될 때까지 완전히 종료 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-572">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="2f267-573">발송자 종료, 완료 되 면는 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성이로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-573">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="2f267-574">종료 프로세스가 시작 되 면 모든 보류 중인 작업 항목 큐에 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-574">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberSignature Language="F#" Value="member this.ShutdownStarted : EventHandler " Usage="member this.ShutdownStarted : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2f267-575">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-575">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-576">때의 종료 프로세스는 <xref:System.Windows.Threading.Dispatcher> 시작 되는 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트는 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-576">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="2f267-577"><xref:System.Windows.Threading.Dispatcher> 이벤트 큐 해제 될 때까지 완전히 종료 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-577">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="2f267-578">발송자 종료, 완료 되 면는 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성이로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-578">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="2f267-579">종료 프로세스가 시작 되 면 모든 보류 중인 작업 항목 큐에 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-579">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Thread : System.Threading.Thread" Usage="System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2f267-580">Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-580">Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2f267-581">스레드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-581">The thread.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2f267-582">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-582">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-583">이 이벤트는 통해 대리자를 실행 하는 동안 throw 된 예외 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 가 검색 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-583">This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.</span></span>  
  
 <span data-ttu-id="2f267-584">처리기를 사용 하기 예외, 내부 예외 처리기가 호출 되지 못합니다입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-584">A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</span></span>  
  
 <span data-ttu-id="2f267-585">이 이벤트에 대 한 이벤트 처리기는 발생 하는 보조 예외 만들기를 방지 하 고 catch를 주의 하 여 작성 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-585">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span> <span data-ttu-id="2f267-586">메모리 할당 이나 리소스 처리기에서 복잡 한 작업을 수행 하 방지 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-586">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="2f267-587"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 이벤트 발생 시 키 지를 통해는 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-587">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="2f267-588"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 이벤트는 먼저 쓰고 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> 에 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> 로 설정 되어 `false`, <xref:System.Windows.Threading.Dispatcher.UnhandledException> 이벤트 발생 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-588">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberSignature Language="F#" Value="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " Usage="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2f267-589">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-589">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-590">통해 대리자를 실행 하는 동안 발생 하는 예외에 대 한 필터 단계 중에이 이벤트는 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 아니며 검색 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-590">This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.</span></span>  
  
 <span data-ttu-id="2f267-591">호출 스택이 (첫 번째 예외)이이 지점에서 스택이 해제 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-591">The call stack is not unwound at this point (first-chance exception).</span></span>  
  
 <span data-ttu-id="2f267-592">이 이벤트에 대 한 이벤트 처리기는 발생 하는 보조 예외 만들기를 방지 하 고 catch를 주의 하 여 작성 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-592">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span>  <span data-ttu-id="2f267-593">메모리 할당 이나 리소스 처리기에서 복잡 한 작업을 수행 하 방지 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-593">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="2f267-594"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 이벤트 발생 시 키 지를 통해는 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-594">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="2f267-595"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 이벤트는 먼저 쓰고 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> 에 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> 로 설정 되어 `false`, <xref:System.Windows.Threading.Dispatcher.UnhandledException> 이벤트 발생 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-595">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="2f267-596">추가 하거나이 이벤트에 대 한 처리기를 제거 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-596">for adding or removing a handler for this event.</span>
          </span>
          <span data-ttu-id="2f267-597">연결 된 열거형의 경우:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-597">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="static member ValidatePriority : System.Windows.Threading.DispatcherPriority * string -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ValidatePriority (priority, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="2f267-598">The priority to check.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-598">The priority to check.</span>
          </span>
        </param>
        <param name="parameterName">
          <span data-ttu-id="2f267-599">A string that will be returned by the exception that occurs if the priority is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-599">A string that will be returned by the exception that occurs if the priority is invalid.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-600">Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-600">Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="2f267-601">
            <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-601">
              <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcher.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2f267-602">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-602">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-603">스레드는 <xref:System.Windows.Threading.Dispatcher> 만들어집니다 액세스할 수 있습니다는 <xref:System.Windows.Threading.Dispatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-603">Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="2f267-604">이 메서드는 공용 필드 따라서 스레드에에 대 한 액세스를 포함 하는지 여부를 확인 확인 수는 <xref:System.Windows.Threading.Dispatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-604">This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="2f267-605">차이 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 및 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 은 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 호출 스레드를 권한이 없는 경우 부울 값을 반환 합니다.는 <xref:System.Windows.Threading.Dispatcher> 및 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-605">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2f267-606">다음 예제에서는 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 스레드가 스레드에 액세스할 수 있는지 확인 하려면 하는 <xref:System.Windows.Controls.Button> 에 만들었습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-606">The following example uses <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="2f267-607">로 캐스팅 되는 인수로 서 개체를 사용 하는 메서드는 <xref:System.Windows.Controls.Button>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-607">The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="2f267-608"><xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 에서 메서드는 <xref:System.Windows.Threading.Dispatcher> 의 <xref:System.Windows.Controls.Button> 스레드에 대 한 액세스를 확인 하기 위해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-608">The <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  
  
 <span data-ttu-id="2f267-609">호출 스레드가 액세스할 수 있으면는 <xref:System.Windows.Threading.Dispatcher>, <xref:System.Windows.Controls.Button> 방금의 멤버에 액세스 하 여 업데이트 되는 <xref:System.Windows.Controls.Button>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-609">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="2f267-610">호출 스레드가 액세스, 없는 경우는 <xref:System.InvalidOperationException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-610">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  <span data-ttu-id="2f267-611">이 예제에서는 예외를 catch 하 고 허용 하는 대리자를 푸시하는 <xref:System.Windows.Controls.Button> 를 인수로는 <xref:System.Windows.Threading.Dispatcher> 의 <xref:System.Windows.Controls.Button>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-611">This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="2f267-612">이 <xref:System.Windows.Threading.Dispatcher> 업데이트 작업을 수행 합니다는 <xref:System.Windows.Controls.Button>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-612">This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2f267-613">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-613">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2f267-614">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-614">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2f267-615">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-615">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-616">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-616">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-617">이 메서드는 다른 이벤트를 처리와 같은 다른 작업을 수행할 수 있도록 실행 제어가 현재 디스패처를 일시적으로 해제할 수 있는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-617">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="2f267-618">사용 하 여는 `await`, 또는 `Await` Visual basic에서는 현재 디스패처를 반환 값에 대 한 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-618">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="2f267-619">이 방법을 사용 하면 응용 프로그램은 많은 UI 스레드에서 작업을 수행 하는 동안 이벤트를 처리 하기 위해 앱 제공할 수 있도록 원하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-619">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="2f267-620">예를 들어이 메서드는 컨트롤을 업데이트 하는 장기 실행 루프에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-620">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 <span data-ttu-id="2f267-621">이 메서드는 호출에 해당 하는 <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> 메서드와 전달 <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-621">This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="static member Yield : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="2f267-622">The priority at which to schedule the continuation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-622">The priority at which to schedule the continuation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2f267-623">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-623">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
          <span data-ttu-id="2f267-624">The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-624">The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2f267-625">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2f267-625">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2f267-626">이 메서드는 다른 이벤트를 처리와 같은 다른 작업을 수행할 수 있도록 실행 제어가 현재 디스패처를 일시적으로 해제할 수 있는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-626">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="2f267-627">사용 하 여는 `await`, 또는 `Await` Visual basic에서는 현재 디스패처를 반환 값에 대 한 연산자입니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-627">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="2f267-628">이 방법을 사용 하면 응용 프로그램은 많은 UI 스레드에서 작업을 수행 하는 동안 이벤트를 처리 하기 위해 앱 제공할 수 있도록 원하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-628">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="2f267-629">예를 들어이 메서드는 컨트롤을 업데이트 하는 장기 실행 루프에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2f267-629">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>