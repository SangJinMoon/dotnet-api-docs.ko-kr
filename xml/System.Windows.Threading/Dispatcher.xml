<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5ad9e62b91662435080a893038a5962630437e09" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39942343" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <TypeSignature Language="F#" Value="type Dispatcher = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="1e539-101">스레드에 대한 작업 항목 큐를 관리하는 서비스를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1e539-101">Provides services for managing the queue of work items for a thread.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-102"><xref:System.Windows.Threading.Dispatcher> 특정 스레드에 대 한 작업 항목의 우선 순위가 지정 된 큐를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-102">The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.</span></span>  
  
 <span data-ttu-id="1e539-103">경우는 <xref:System.Windows.Threading.Dispatcher> 만들어집니다 스레드에서 유일한 되기 <xref:System.Windows.Threading.Dispatcher> 스레드를 사용 하 여 연결 될 수 있는 경우에를 <xref:System.Windows.Threading.Dispatcher> 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-103">When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.</span></span>  
  
 <span data-ttu-id="1e539-104">가져오려고 하는 경우는 <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> 현재 스레드에 대 한 및 <xref:System.Windows.Threading.Dispatcher> 스레드를 사용 하 여 연결 되지를 <xref:System.Windows.Threading.Dispatcher> 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-104">If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created.</span></span> <span data-ttu-id="1e539-105">A <xref:System.Windows.Threading.Dispatcher> 만들 때 만들어집니다는 <xref:System.Windows.Threading.DispatcherObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-105">A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>.</span></span> <span data-ttu-id="1e539-106">만드는 경우는 <xref:System.Windows.Threading.Dispatcher> 백그라운드 스레드에서 사용할 발송자 스레드를 종료 하기 전에 종료 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-106">If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.</span></span>  
  
 <span data-ttu-id="1e539-107">경우는 <xref:System.Windows.Threading.Dispatcher> 종료는 다운을 시작할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-107">If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.</span></span>  
  
 <span data-ttu-id="1e539-108">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], <xref:System.Windows.Threading.DispatcherObject> 만 액세스할 수는 <xref:System.Windows.Threading.Dispatcher> 연관 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-108">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.</span></span>  <span data-ttu-id="1e539-109">예를 들어, 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 연관 된 합니다 <xref:System.Windows.Threading.Dispatcher> 에 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 스레드.</span><span class="sxs-lookup"><span data-stu-id="1e539-109">For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="1e539-110">액세스 하는 백그라운드 스레드를 위해를 <xref:System.Windows.Controls.ContentControl.Content%2A> 의 속성을 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다를 <xref:System.Windows.Threading.Dispatcher> 연관를 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 스레드.</span><span class="sxs-lookup"><span data-stu-id="1e539-110">In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="1e539-111">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-111">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="1e539-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="1e539-113">작업의 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-113">The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-114">하는 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 반환 된 상태 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-114">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 <span data-ttu-id="1e539-115">모든에서 메서드의 <xref:System.Windows.Threading.Dispatcher>, 제외 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>는 자유 스레드이므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-115">All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.</span></span>  
  
 <span data-ttu-id="1e539-116">파생 된 개체 <xref:System.Windows.Threading.DispatcherObject> 스레드 선호도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-116">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="1e539-117">파생 된 개체 <xref:System.Windows.Freezable> 는 자유 스레드는 고정 되어 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="1e539-117">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="1e539-118">자세한 내용은 [Freezable 개체 개요](~/docs/framework/wpf/advanced/freezable-objects-overview.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="1e539-118">For more information, see [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e539-119">다음 예제에 작업을 배치 하는 방법을 보여 줍니다는 <xref:System.Windows.Threading.Dispatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-119">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="1e539-120">이 예제의 전체 소스 코드를 보려면 [장기 실행 계산 샘플을 사용 하 여 단일 스레드 응용 프로그램](http://go.microsoft.com/fwlink/?LinkID=160038)합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-120">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="1e539-121">먼저, 인수를 받지 않는 대리자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-121">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="1e539-122">다음으로, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-122">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="1e539-123">이 호출을 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 두 개의 매개 변수:로 설정 된 우선 순위 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, 및 대리자의 인스턴스를 통해 전달 된 콜백을 `NextPrimeDelegate`합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-123">This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1e539-124">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 대리자를 비동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-124">Executes a delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-125">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-125">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="1e539-126">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-126">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="1e539-127">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-127">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="1e539-128">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-128">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="1e539-129"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-129"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="1e539-130">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-130">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-131"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-131"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="1e539-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 반환 된 <xref:System.Windows.Threading.DispatcherOperation> 있는 경우 대리자가 큐에서 이벤트 대리자와 상호 작용 하는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="1e539-133">합니다 <xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-133">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="1e539-134">변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의 보류 중인 실행의 이벤트 큐에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-134">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="1e539-135">대리자를 이벤트 큐에서 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-135">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="1e539-136">반환할 대리자를 기다리는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-136">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="1e539-137">실행 후 대리자를 반환 하는 값을 가져오기</span><span class="sxs-lookup"><span data-stu-id="1e539-137">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="1e539-138">여러 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 동시 호출 <xref:System.Windows.Threading.DispatcherPriority>, 호출 된 순서 대로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-138">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="1e539-139">하는 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 반환 된 상태 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-139">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="1e539-140">
            <c>args</c>에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-140">The delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="1e539-141">주어진 메서드에 인수로 전달하는 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-141">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="1e539-142">
            <see langword="null" />일 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-142">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-143">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 만들어진 스레드에서 지정된 인수를 사용하여 지정된 대리자를 비동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-143">Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-144">
            <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-144">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-145">합니다 <xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-145">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="1e539-146">변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의 보류 중인 실행의 이벤트 큐에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-146">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="1e539-147">대리자를 이벤트 큐에서 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-147">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="1e539-148">반환할 대리자를 기다리는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-148">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="1e539-149">실행 후 대리자를 반환 하는 값을 가져오기</span><span class="sxs-lookup"><span data-stu-id="1e539-149">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="1e539-150"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-150"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="1e539-151">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-151">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="1e539-152">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-152">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="1e539-153">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-153">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="1e539-154">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-154">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="1e539-155"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-155"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="1e539-156">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-156">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-157">하는 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 반환 된 상태 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-157">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="1e539-158">
            <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-158">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1e539-159">인수가 없는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-159">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-160">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 대리자를 비동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-160">Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-161">
            <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-161">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-162">여러 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 동시 호출 <xref:System.Windows.Threading.DispatcherPriority>, 호출 된 순서 대로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-162">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="1e539-163"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 반환 된 <xref:System.Windows.Threading.DispatcherOperation> 있는 경우 대리자가 큐에서 이벤트 대리자와 상호 작용 하는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-163"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="1e539-164">합니다 <xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-164">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="1e539-165">변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의 보류 중인 실행의 이벤트 큐에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-165">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="1e539-166">대리자를 이벤트 큐에서 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-166">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="1e539-167">반환할 대리자를 기다리는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-167">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="1e539-168">실행 후 대리자를 반환 하는 값을 가져오기</span><span class="sxs-lookup"><span data-stu-id="1e539-168">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="1e539-169"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-169"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="1e539-170">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-170">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="1e539-171">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-171">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="1e539-172">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-172">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="1e539-173">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-173">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="1e539-174"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-174"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="1e539-175">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-175">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-176">하는 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 반환 된 상태 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-176">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e539-177">다음 예제에 작업을 배치 하는 방법을 보여 줍니다는 <xref:System.Windows.Threading.Dispatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-177">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="1e539-178">이 예제의 전체 소스 코드를 보려면 [장기 실행 계산 샘플을 사용 하 여 단일 스레드 응용 프로그램](http://go.microsoft.com/fwlink/?LinkID=160038)합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-178">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="1e539-179">먼저, 인수를 받지 않는 대리자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-179">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="1e539-180">다음으로, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-180">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="1e539-181">때문에 모든 <xref:System.Windows.Threading.DispatcherObject> 속성이 반환 하는 <xref:System.Windows.Threading.Dispatcher> 원하는와 연결 됩니다 <xref:System.Windows.Threading.Dispatcher> 쿼리하여 가져오고를 <xref:System.Windows.Threading.DispatcherObject>,이 경우에 <xref:System.Windows.Controls.Button> 라는 `startStopButton`합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-181">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.</span></span>   <span data-ttu-id="1e539-182">에 대 한 호출 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 두 개의 매개 변수:로 설정 된 우선 순위 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, 및 대리자의 인스턴스를 통해 전달 된 콜백을 `NextPrimeDelegate`합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-182">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1e539-183">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-183">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="1e539-184">
            <paramref name="priority" />은 유효한 <see cref="T:System.Windows.Threading.DispatcherPriority" />이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-184">
              <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="1e539-185">
            <c>args</c>에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-185">The delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="1e539-186">
            <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-186">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="1e539-187">주어진 메서드에 인수로 전달하는 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-187">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="1e539-188">
            <see langword="null" />일 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-188">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-189">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 만들어진 스레드에서 지정된 우선 순위에 지정된 인수를 사용하여 지정된 대리자를 비동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-189">Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-190">
            <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-190">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-191">합니다 <xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-191">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="1e539-192">변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의 보류 중인 실행의 이벤트 큐에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-192">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="1e539-193">대리자를 이벤트 큐에서 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-193">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="1e539-194">반환할 대리자를 기다리는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-194">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="1e539-195">실행 후 대리자를 반환 하는 값을 가져오기</span><span class="sxs-lookup"><span data-stu-id="1e539-195">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="1e539-196"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-196"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="1e539-197">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-197">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="1e539-198">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-198">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="1e539-199">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-199">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="1e539-200">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-200">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="1e539-201"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-201"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="1e539-202">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-202">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-203">하는 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 반환 된 상태 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-203">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="1e539-204">
            <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-204">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1e539-205">인수를 하나 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-205">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="1e539-206">지정된 메서드에 인수로 전달하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-206">The object to pass as an argument to the specified method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-207">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 비동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-207">Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-208">
            <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-208">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-209">`Arg` 수 `null` 경우 인수가 필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-209">`Arg` can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="1e539-210"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 반환 된 <xref:System.Windows.Threading.DispatcherOperation> 있는 경우 대리자가 큐에서 이벤트 대리자와 상호 작용 하는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-210"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="1e539-211">합니다 <xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-211">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="1e539-212">변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의 보류 중인 실행의 이벤트 큐에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-212">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="1e539-213">대리자를 이벤트 큐에서 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-213">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="1e539-214">반환할 대리자를 기다리는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-214">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="1e539-215">실행 후 대리자를 반환 하는 값을 가져오기</span><span class="sxs-lookup"><span data-stu-id="1e539-215">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="1e539-216"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-216"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="1e539-217">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-217">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="1e539-218">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-218">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="1e539-219">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-219">In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="1e539-220">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-220">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="1e539-221"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-221"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="1e539-222">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-222">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-223">여러 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 동시 호출 <xref:System.Windows.Threading.DispatcherPriority>, 호출 된 순서 대로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-223">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="1e539-224">하는 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 반환 된 상태 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-224">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e539-225">다음 예제에 작업을 배치 하는 방법을 보여 줍니다는 <xref:System.Windows.Threading.Dispatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-225">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="1e539-226">먼저 하나의 인수 즉,이 경우 문자열에서에서 허용 하는 대리자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-226">First, a delegate is created that accepts one argument, in this case a string.</span></span>  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 <span data-ttu-id="1e539-227">다음으로, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-227">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> is called.</span></span>  <span data-ttu-id="1e539-228">때문에 모든 <xref:System.Windows.Threading.DispatcherObject> 속성이 반환 하는 <xref:System.Windows.Threading.Dispatcher> 원하는와 연결 됩니다 <xref:System.Windows.Threading.Dispatcher> 쿼리하여 가져오고를 <xref:System.Windows.Threading.DispatcherObject>,이 경우에 <xref:System.Windows.Controls.Grid> 라는 `tomorrowsWeather`합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-228">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`.</span></span> <span data-ttu-id="1e539-229">에 대 한 호출 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> 3 개의 매개 변수:로 설정 된 우선 순위 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; 대리자의 인스턴스를 통해 전달 된 콜백 `OneArgDelegate`; 및 명명 된 문자열 `weather`, 콜백에 대 한 인수는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-229">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.</span></span>  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1e539-230">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-230">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="1e539-231">
            <paramref name="priority" />은 유효한 <see cref="T:System.Windows.Threading.DispatcherPriority" />이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-231">
              <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="1e539-232">
            <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-232">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1e539-233">인수를 여러 개 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-233">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="1e539-234">지정된 메서드에 인수로 전달하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-234">The object to pass as an argument to the specified method.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="1e539-235">지정된 메서드에 인수로 전달하는 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-235">An array of objects to pass as arguments to the specified method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-236">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수 배열을 사용하여 지정된 우선 순위에 있는 지정된 대리자를 비동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-236">Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-237">
            <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />가 호출된 후 즉시 반환되며, <see cref="T:System.Windows.Threading.Dispatcher" /> 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-237">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-238">합니다 `arg` 매개 변수 수 `null` 경우 인수가 필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-238">The `arg` parameter can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="1e539-239"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 반환 된 <xref:System.Windows.Threading.DispatcherOperation> 있는 경우 대리자가 큐에서 이벤트 대리자와 상호 작용 하는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-239"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="1e539-240">합니다 <xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-240">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="1e539-241">변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의 보류 중인 실행의 이벤트 큐에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-241">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="1e539-242">대리자를 이벤트 큐에서 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-242">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="1e539-243">반환할 대리자를 기다리는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-243">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="1e539-244">실행 후 대리자를 반환 하는 값을 가져오기</span><span class="sxs-lookup"><span data-stu-id="1e539-244">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="1e539-245"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-245"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="1e539-246">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-246">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="1e539-247">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-247">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="1e539-248">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-248">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="1e539-249">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-249">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="1e539-250"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-250"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="1e539-251">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-251">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-252">여러 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 동시 호출 <xref:System.Windows.Threading.DispatcherPriority>, 호출 된 순서 대로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-252">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="1e539-253">하는 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 반환 된 상태 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-253">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1e539-254">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-254">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="1e539-255">
            <see cref="T:System.Windows.Threading.DispatcherPriority" />가 올바른 속성이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-255">
              <see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.BeginInvokeShutdown : System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.BeginInvokeShutdown priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="1e539-256">Dispatcher 종료를 시작하는 우선 순위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-256">The priority at which to begin shutting down the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-257">비동기적으로 <see cref="T:System.Windows.Threading.Dispatcher" /> 종료를 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-257">Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-258"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> 무제한 UI 권한을 요청 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-258"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="1e539-259">경우는 <xref:System.Windows.Threading.Dispatcher> 종료를 시작 합니다 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트가 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 된 `true`.</span><span class="sxs-lookup"><span data-stu-id="1e539-259">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="1e539-260"><xref:System.Windows.Threading.Dispatcher> 종료 되지 않는 완전히 이벤트 큐 해제 될 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-260">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="1e539-261">Dispatcher 종료를 완료 하는 경우를 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트가 발생 하며 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성 `true`.</span><span class="sxs-lookup"><span data-stu-id="1e539-261">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="1e539-262">종료 프로세스 시작 되 면 모든 보류 중인 작업 항목이 큐에서 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-262">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="1e539-263">발송자를 종료 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-263">for shutting down the dispatcher.</span>
          </span>
          <span data-ttu-id="1e539-264">연관 된 열거형:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-264">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcher.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1e539-265">호출 스레드가 이 <see cref="T:System.Windows.Threading.Dispatcher" />에 연결된 스레드인지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-265">Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-266">호출 스레드가 이 <see cref="T:System.Windows.Threading.Dispatcher" />에 연결된 스레드이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-266">
              <see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-267">만 <xref:System.Windows.Threading.Dispatcher> 는 <xref:System.Windows.Threading.DispatcherObject> 만들어집니다 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-267">Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.</span></span>  <span data-ttu-id="1e539-268">사용 하 여 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 다른 스레드에서 개체를 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-268">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.</span></span>  
  
 <span data-ttu-id="1e539-269"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 모든 스레드에서 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-269"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.</span></span>  
  
 <span data-ttu-id="1e539-270">간의 차이 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 및 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 됩니다 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 호출 스레드에 있는지에 대 한 액세스를 나타내는 부울 값을 반환 합니다 <xref:System.Windows.Threading.Dispatcher> 및 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-270">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e539-271">다음 예제에서는 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 스레드가에 대 한 액세스에 있는지 확인 하는 <xref:System.Windows.Controls.Button>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-271">The following example uses <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="1e539-272"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 메서드를 <xref:System.Windows.Threading.Dispatcher> 연관는 <xref:System.Windows.Controls.Button> 스레드가 액세스할 수 있는지 확인 하기 위해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-272">The <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="1e539-273">호출 스레드를 액세스할 수 있는 경우는 <xref:System.Windows.Threading.Dispatcher>, <xref:System.Windows.Controls.Button> 의 멤버에 액세스 하 여 업데이트 됩니다는 <xref:System.Windows.Controls.Button>이 고, 그렇지 않으면 허용 되는 대리자를를 <xref:System.Windows.Controls.Button> 인수로 배치를 <xref:System.Windows.Threading.Dispatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-273">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="1e539-274">합니다 <xref:System.Windows.Threading.Dispatcher> 업데이트 작업을 위임 하는 <xref:System.Windows.Controls.Button>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-274">The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e539-275">스레드에 연결된 Dispatcher가 없는 경우 현재 실행 중인 스레드에 대한 <see cref="T:System.Windows.Threading.Dispatcher" />를 가져와서 새 <see cref="T:System.Windows.Threading.Dispatcher" />를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-275">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e539-276">현재 스레드에 연결된 Dispatcher입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-276">The dispatcher associated with the current thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-277">경우는 <xref:System.Windows.Threading.Dispatcher> 현재 스레드와 연결 되지 않은 새 <xref:System.Windows.Threading.Dispatcher> 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-277">If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.</span></span>  <span data-ttu-id="1e539-278">이것은 <xref:System.Windows.Threading.Dispatcher.FromThread%2A> 메서드의 경우가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-278">This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.</span></span>  <span data-ttu-id="1e539-279"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> 돌아갑니다 `null` 가 없는 경우 지정 된 스레드와 연결 된 디스패처입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-279"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberSignature Language="F#" Value="member this.DisableProcessing : unit -&gt; System.Windows.Threading.DispatcherProcessingDisabled" Usage="dispatcher.DisableProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1e539-280">
            <see cref="T:System.Windows.Threading.Dispatcher" /> 큐 프로세스를 비활성화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-280">Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-281">Dispatcher 처리를 다시 활성화하는 데 사용되는 구조체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-281">A structure used to re-enable dispatcher processing.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-282">디스패처 처리를 비활성화는 관련 되지 않은 재입력 가능성을 제거 하기 위한 고급 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-282">Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</span></span>  
  
 <span data-ttu-id="1e539-283">처리를 사용 하지 않도록 설정의 효과 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-283">The effects of disabling processing are as follows:</span></span>  
  
-   <span data-ttu-id="1e539-284">CLR 잠금 메시지를 내부적으로 펌프 되지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-284">CLR locks will not pump messages internally.</span></span>  
  
-   <span data-ttu-id="1e539-285"><xref:System.Windows.Threading.DispatcherFrame> 개체는 푸시할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-285"><xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.</span></span>  
  
-   <span data-ttu-id="1e539-286">메시지 처리를 허용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-286">Message processing is not permitted.</span></span>  
  
 <span data-ttu-id="1e539-287">합니다 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 구조체입니다 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 디스패처 처리를 다시 사용 하도록 호출 될 때 반환을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-287">The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.</span></span>  <span data-ttu-id="1e539-288">호출 <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> 에 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 구조에는 다시 처리할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-288">Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.</span></span>  
  
 <span data-ttu-id="1e539-289"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 스레드에서 호출할 수 있습니다는 <xref:System.Windows.Threading.Dispatcher> 연관 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-289"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e539-290">다음 예제에서는 디스패처 처리를 사용 하지 않도록 설정 하 고 다시 디스패처 처리를 사용 하도록 설정 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-290">The following example shows how to disable dispatcher processing and re-enable dispatcher processing.</span></span>  <span data-ttu-id="1e539-291"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 호출 되는 **를 사용 하 여** 문입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-291"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> is called in a **using** statement.</span></span>  <span data-ttu-id="1e539-292"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 반환를 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 하는 경우 삭제 된 개체와 사용 되는 구조는 **를 사용 하 여** 완료 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-292"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.</span></span>  <span data-ttu-id="1e539-293">때 <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> 라고 하는 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 구조 디스패처 처리를 다시 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-293">When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.</span></span>  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberSignature Language="F#" Value="static member ExitAllFrames : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ExitAllFrames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1e539-294">중첩된 프레임을 포함하여 모든 프레임을 종료하도록 요청합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-294">Requests that all frames exit, including nested frames.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="1e539-295">이 메서드를 호출 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-295">for calling this method.</span>
          </span>
          <span data-ttu-id="1e539-296">연관 된 열거형:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-296">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberSignature Language="F#" Value="static member FromThread : System.Threading.Thread -&gt; System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.FromThread thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread">
          <span data-ttu-id="1e539-297">
            <see cref="T:System.Windows.Threading.Dispatcher" />를 가져올 스레드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-297">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-298">지정된 스레드에 대한 <see cref="T:System.Windows.Threading.Dispatcher" />를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-298">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-299">
            <paramref name="thread" />에 대한 Dispatcher입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-299">The dispatcher for <paramref name="thread" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-300">디스패처를 지정 된 스레드를 사용할 수 없는 경우 `null` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-300">If a dispatcher is not available for the specified thread, `null` will be returned.</span></span>  
  
 <span data-ttu-id="1e539-301"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> 만들어지지는지 않습니다를 <xref:System.Windows.Threading.Dispatcher> 되지 않은 스레드에서 <xref:System.Windows.Threading.Dispatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-301"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.</span></span>   <span data-ttu-id="1e539-302">새 <xref:System.Windows.Threading.Dispatcher> 이미 있지 않은 스레드에서 만들어진를 <xref:System.Windows.Threading.Dispatcher> 가져오려고 시도 하는 경우를 <xref:System.Windows.Threading.Dispatcher> 사용 하 여는 <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-302">A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownFinished : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e539-303">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 완전히 종료되었는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-303">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e539-304">Dispatcher가 완전히 종료되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-304">
              <see langword="true" /> if the dispatcher has finished shutting down; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-305">경우는 <xref:System.Windows.Threading.Dispatcher> 종료를 시작 합니다 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트가 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 된 `true`.</span><span class="sxs-lookup"><span data-stu-id="1e539-305">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="1e539-306"><xref:System.Windows.Threading.Dispatcher> 이벤트 큐 해제 될 때까지 완전히 종료 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-306">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="1e539-307">Dispatcher 종료를 완료 하는 경우를 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트가 발생 하며 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성 `true`.</span><span class="sxs-lookup"><span data-stu-id="1e539-307">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="1e539-308">종료 프로세스 시작 되 면 모든 보류 중인 작업 항목이 큐에서 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-308">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownStarted : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e539-309">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 종료되었는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-309">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e539-310">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 종료되기 시작했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-310">
              <see langword="true" /> if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-311">경우는 <xref:System.Windows.Threading.Dispatcher> 종료를 시작 합니다 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트가 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 된 `true`.</span><span class="sxs-lookup"><span data-stu-id="1e539-311">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="1e539-312"><xref:System.Windows.Threading.Dispatcher> 종료 되지 않는 완전히 이벤트 큐 해제 될 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-312">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="1e539-313">Dispatcher 종료를 완료 하는 경우를 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트가 발생 하며 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성 `true`.</span><span class="sxs-lookup"><span data-stu-id="1e539-313">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="1e539-314">종료 프로세스 시작 되 면 모든 보류 중인 작업 항목이 큐에서 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-314">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hooks : System.Windows.Threading.DispatcherHooks" Usage="System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e539-315">
            <see cref="T:System.Windows.Threading.Dispatcher" />에 대한 추가 이벤트 정보를 제공하는 후크 컬렉션을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-315">Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e539-316">이 <see cref="T:System.Windows.Threading.Dispatcher" />에 연결된 후크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-316">The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-317"><xref:System.Windows.Threading.DispatcherHooks> 클래스에 대 한 추가 이벤트 정보를 제공 합니다 <xref:System.Windows.Threading.Dispatcher>, 경우와 같이 <xref:System.Windows.Threading.Dispatcher> 활성 상태가 아닙니다 작업이 완료 된 경우 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-317">The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="1e539-318">이 속성을 가져오는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-318">for getting this property.</span>
          </span>
          <span data-ttu-id="1e539-319">연관 된 열거형:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-319">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1e539-320">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 대리자를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-320">Executes the specified delegate synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-321">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-321">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="1e539-322">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-322">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="1e539-323">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-323">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="1e539-324">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-324">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="1e539-325"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-325"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="1e539-326">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-326">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-327"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-327"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e539-328">다음 예제에서는 대리자를 배치를 <xref:System.Windows.Threading.Dispatcher> 언제 <xref:System.Windows.Threading.DispatcherPriority.Normal> 사용 하 여 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-328">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action -&gt; unit" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="1e539-329">디스패처를 통해 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-329">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-330">
            <see cref="T:System.Action" />가 연결된 스레드에서 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-330">Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="1e539-331">디스패처를 통해 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-331">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="1e539-332">
            <see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-332">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-333">
            <see cref="T:System.Action" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-333">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="1e539-334">
            <c>args</c>에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-334">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="1e539-335">주어진 메서드에 인수로 전달하는 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-335">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="1e539-336">
            <see langword="null" />일 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-336">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-337">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 대리자를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-337">Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-338">호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-338">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-339">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-339">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="1e539-340">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-340">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="1e539-341">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-341">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="1e539-342">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-342">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="1e539-343"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-343"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="1e539-344">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-344">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-345"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-345"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="1e539-346">
            <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-346">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1e539-347">인수가 없는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-347">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-348">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-348">Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-349">호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-349">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-350">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-350">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="1e539-351">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-351">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="1e539-352">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-352">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="1e539-353">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-353">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="1e539-354"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-354"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="1e539-355">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-355">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-356"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-356"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e539-357">다음 예제에서는 대리자를 배치를 <xref:System.Windows.Threading.Dispatcher> 언제 <xref:System.Windows.Threading.DispatcherPriority.Normal> 사용 하 여 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-357">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1e539-358">
            <paramref name="priority" />가 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-358">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="1e539-359">
            <paramref name="priority" />가 올바른 속성이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-359">
              <paramref name="priority" /> is not a valid priority.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1e539-360">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-360">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="1e539-361">디스패처를 통해 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-361">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="1e539-362">
            <see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-362">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="1e539-363">동작을 취소할지 여부를 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-363">An object that indicates whether to cancel the action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-364">
            <see cref="T:System.Action" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-364">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="1e539-365">
            <c>args</c>에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-365">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1e539-366">작업이 완료될 때까지 대기하는 최대 시간입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-366">The maximum amount of time to wait for the operation to complete.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="1e539-367">주어진 메서드에 인수로 전달하는 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-367">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="1e539-368">
            <see langword="null" />일 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-368">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-369">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위의 지정된 기간 내에서 지정된 대리자를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-369">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-370">호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-370">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-371">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-371">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="1e539-372">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-372">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="1e539-373">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-373">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="1e539-374">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-374">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="1e539-375"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-375"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="1e539-376">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-376">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-377"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-377"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="1e539-378">
            <c>args</c>에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-378">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="1e539-379">
            <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-379">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="1e539-380">주어진 메서드에 인수로 전달하는 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-380">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="1e539-381">
            <see langword="null" />일 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-381">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-382">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-382">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-383">호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-383">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-384">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-384">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="1e539-385">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-385">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="1e539-386">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-386">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="1e539-387">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-387">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="1e539-388"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-388"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="1e539-389">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-389">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-390"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-390"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="1e539-391">
            <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-391">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1e539-392">인수를 하나 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-392">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="1e539-393">지정된 메서드에 인수로 전달하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-393">An object to pass as an argument to the given method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-394">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-394">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-395">호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-395">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-396">`Arg` 수 `null` 인수가 필요 하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="1e539-396">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="1e539-397">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-397">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="1e539-398">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-398">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="1e539-399">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-399">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="1e539-400">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-400">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="1e539-401"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-401"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="1e539-402">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-402">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-403"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-403"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1e539-404">
            <paramref name="priority" />가 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-404">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="1e539-405">
            <paramref name="priority" />가 올바른 속성이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-405">
              <paramref name="priority" /> is not a valid priority.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1e539-406">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-406">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="1e539-407">
            <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-407">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1e539-408">작업이 완료될 때까지 대기하는 최대 시간입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-408">The maximum time to wait for the operation to finish.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1e539-409">인수가 없는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-409">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-410">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 만들어진 스레드에서 지정된 제한 시간 값을 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-410">Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-411">호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-411">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-412">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-412">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="1e539-413">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-413">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="1e539-414">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-414">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="1e539-415">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-415">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="1e539-416"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-416"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="1e539-417">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-417">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-418"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-418"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="1e539-419">디스패처를 통해 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-419">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="1e539-420">
            <see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-420">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="1e539-421">동작을 취소할지 여부를 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-421">An object that indicates whether to cancel the action.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1e539-422">작업이 시작될 때까지 대기하는 최소 시간입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-422">The minimum amount of time to wait for the operation to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-423">
            <see cref="T:System.Action" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-423">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="1e539-424">
            <c>args</c>에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-424">A delegate to a method that takes parameters specified in <c>args</c>, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1e539-425">작업이 완료될 때까지 대기하는 최대 시간입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-425">The maximum amount of time to wait for the operation to complete.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="1e539-426">
            <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-426">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="1e539-427">주어진 메서드에 인수로 전달하는 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-427">An array of objects to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="1e539-428">
            <see langword="null" />일 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-428">Can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-429">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위의 지정된 기간 내에서 지정된 대리자를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-429">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-430">호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-430">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-431">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-431">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="1e539-432">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-432">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="1e539-433">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-433">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="1e539-434">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-434">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="1e539-435"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-435"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="1e539-436">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-436">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-437"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-437"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="1e539-438">
            <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-438">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1e539-439">인수를 여러 개 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-439">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="1e539-440">지정된 메서드에 인수로 전달하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-440">An object to pass as an argument to the given method.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="1e539-441">주어진 메서드에 인수로 전달하는 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-441">An array of objects to pass as arguments to the given method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-442">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-442">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-443">호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-443">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-444">`Arg` 수 `null` 인수가 필요 하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="1e539-444">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="1e539-445">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-445">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="1e539-446">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-446">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="1e539-447">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-447">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="1e539-448">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-448">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="1e539-449"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-449"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="1e539-450">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-450">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-451"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-451"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1e539-452">
            <paramref name="priority" />가 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-452">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="1e539-453">
            <paramref name="priority" />가 올바른 속성이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-453">
              <paramref name="priority" /> is not a valid priority.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1e539-454">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-454">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="1e539-455">
            <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-455">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1e539-456">작업이 완료될 때까지 대기하는 최대 시간입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-456">The maximum time to wait for the operation to finish.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1e539-457">인수를 여러 개 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-457">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="1e539-458">지정된 메서드에 인수로 전달하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-458">An object to pass as an argument to the given method.</span>
          </span>
          <span data-ttu-id="1e539-459">인수가 필요하지 않으면 <see langword="null" />일 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-459">This can be <see langword="null" /> if no arguments are needed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-460">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-460">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-461">호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-461">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-462">`Arg` 수 `null` 인수가 필요 하지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="1e539-462">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="1e539-463">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-463">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="1e539-464">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-464">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="1e539-465">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-465">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="1e539-466">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-466">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="1e539-467"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-467"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="1e539-468">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-468">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-469"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-469"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1e539-470">
            <paramref name="priority" />가 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-470">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="1e539-471">
            <paramref name="priority" />가 올바른 속성이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-471">
              <paramref name="priority" /> is not a valid priority.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1e539-472">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-472">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="1e539-473">
            <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-473">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1e539-474">작업이 완료될 때까지 대기하는 최대 시간입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-474">The maximum time to wait for the operation to finish.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="1e539-475">인수를 여러 개 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-475">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="1e539-476">지정된 메서드에 인수로 전달하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-476">An object to pass as an argument to the specified method.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="1e539-477">지정된 메서드에 인수로 전달하는 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-477">An array of objects to pass as arguments to the specified method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-478">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-478">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-479">호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-479">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-480">`Arg` 수 `null` 인수가 필요 하지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="1e539-480">`Arg` can be `null` if an argument is not needed.</span></span>  
  
 <span data-ttu-id="1e539-481">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-481">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="1e539-482">예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-482">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="1e539-483">콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.</span><span class="sxs-lookup"><span data-stu-id="1e539-483">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="1e539-484">사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-484">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="1e539-485"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-485"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="1e539-486">작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-486">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="1e539-487"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-487"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1e539-488">
            <paramref name="priority" />가 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-488">
              <paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="1e539-489">
            <paramref name="priority" />은 유효한 <see cref="T:System.Windows.Threading.DispatcherPriority" />이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-489">
              <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1e539-490">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-490">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; -&gt; 'Result" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="1e539-491">지정된 대리자의 반환 값 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-491">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="1e539-492">디스패처를 통해 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-492">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-493">
            <see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-493">Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-494">반환한 값 `callback`합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-494">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="1e539-495">지정된 대리자의 반환 값 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-495">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="1e539-496">디스패처를 통해 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-496">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="1e539-497">
            <see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-497">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-498">
            <see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-498">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-499">반환한 값 `callback`합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-499">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="1e539-500">지정된 대리자의 반환 값 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-500">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="1e539-501">디스패처를 통해 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-501">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="1e539-502">
            <see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-502">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="1e539-503">작업을 취소할지 여부를 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-503">An object that indicates whether to cancel the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-504">
            <see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-504">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-505">반환한 값 `callback`합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-505">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="1e539-506">지정된 대리자의 반환 값 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-506">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="1e539-507">디스패처를 통해 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-507">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="1e539-508">
            <see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-508">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="1e539-509">작업을 취소할지 여부를 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-509">An object that indicates whether to cancel the operation.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1e539-510">작업이 시작될 때까지 대기하는 최소 시간입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-510">The minimum amount of time to wait for the operation to start.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-511">
            <see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-511">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-512">반환한 값 `callback`합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-512">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1e539-513">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 대리자를 비동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-513">Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="1e539-514">디스패처를 통해 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-514">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-515">
            <see cref="T:System.Action" />가 연결된 스레드에서 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-515">Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-516">
            <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-516">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="1e539-517">디스패처를 통해 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-517">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="1e539-518">
            <see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-518">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-519">
            <see cref="T:System.Action" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-519">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-520">
            <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-520">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="1e539-521">디스패처를 통해 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-521">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="1e539-522">
            <see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-522">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="1e539-523">동작을 취소할지 여부를 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-523">An object that indicates whether to cancel the action.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-524">
            <see cref="T:System.Action" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-524">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-525">
            <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-525">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="1e539-526">지정된 대리자의 반환 값 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-526">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="1e539-527">디스패처를 통해 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-527">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-528">
            <see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-528">Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-529">
            <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-529">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="1e539-530">지정된 대리자의 반환 값 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-530">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="1e539-531">디스패처를 통해 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-531">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="1e539-532">
            <see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-532">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-533">
            <see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-533">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-534">
            <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-534">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="1e539-535">지정된 대리자의 반환 값 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-535">The return value type of the specified delegate.</span>
          </span>
        </typeparam>
        <param name="callback">
          <span data-ttu-id="1e539-536">디스패처를 통해 호출할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-536">A delegate to invoke through the dispatcher.</span>
          </span>
        </param>
        <param name="priority">
          <span data-ttu-id="1e539-537">
            <see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-537">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="1e539-538">작업을 취소할지 여부를 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-538">An object that indicates whether to cancel the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-539">
            <see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-539">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-540">
            <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-540">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberSignature Language="F#" Value="member this.InvokeShutdown : unit -&gt; unit" Usage="dispatcher.InvokeShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1e539-541">
            <see cref="T:System.Windows.Threading.Dispatcher" />의 종료 프로세스를 동기적으로 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-541">Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-542"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> 무제한 UI 권한을 요청 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-542"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="1e539-543">경우는 <xref:System.Windows.Threading.Dispatcher> 종료를 시작 합니다 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트가 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 된 `true`.</span><span class="sxs-lookup"><span data-stu-id="1e539-543">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="1e539-544"><xref:System.Windows.Threading.Dispatcher> 종료 되지 않는 완전히 이벤트 큐 해제 될 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-544">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="1e539-545">Dispatcher 종료를 완료 하는 경우를 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트가 발생 하며 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성 `true`.</span><span class="sxs-lookup"><span data-stu-id="1e539-545">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="1e539-546">종료 프로세스 시작 되 면 모든 보류 중인 작업 항목이 큐에서 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-546">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="1e539-547">발송자를 종료 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-547">for shutting down the dispatcher.</span>
          </span>
          <span data-ttu-id="1e539-548">연관 된 열거형:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-548">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberSignature Language="F#" Value="static member PushFrame : System.Windows.Threading.DispatcherFrame -&gt; unit" Usage="System.Windows.Threading.Dispatcher.PushFrame frame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame">
          <span data-ttu-id="1e539-549">처리할 Dispatcher의 프레임입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-549">The frame for the dispatcher to process.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-550">실행 루프로 들어갑니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-550">Enters an execute loop.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-551"><xref:System.Windows.Threading.DispatcherFrame> 보류 중인 작업 항목을 처리 하는 루프를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-551">A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.</span></span>  
  
 <span data-ttu-id="1e539-552">디스패처 루프에서 작업 항목 큐를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-552">The Dispatcher processes the work item queue in a loop.</span></span>  <span data-ttu-id="1e539-553">루프는 프레임으로 참조 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-553">The loop is referred to as a frame.</span></span>  <span data-ttu-id="1e539-554">초기 루프는 일반적으로 시작 된 응용 프로그램에서 호출 하 여 <xref:System.Windows.Threading.Dispatcher.Run%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-554">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="1e539-555"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> 매개 변수가 나타내는 루프로 `frame`합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-555"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.</span></span>  <span data-ttu-id="1e539-556">루프의 각 반복에서는 <xref:System.Windows.Threading.Dispatcher> 확인 합니다 <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> 속성을는 <xref:System.Windows.Threading.DispatcherFrame> 중지할지 또는 루프를 계속할지 여부를 결정 하는 클래스.</span><span class="sxs-lookup"><span data-stu-id="1e539-556">At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.</span></span>  
  
 <span data-ttu-id="1e539-557"><xref:System.Windows.Threading.DispatcherFrame> 허용 합니다 <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> 속성을 명시적으로 설정 해야 하며 준수를 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 속성에는 <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="1e539-557"><xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="1e539-558">즉 합니다 <xref:System.Windows.Threading.Dispatcher> 종료를 시작, 기본값을 사용 하는 프레임 <xref:System.Windows.Threading.DispatcherFrame> 구현 종료 하려면 중첩 된 모든 프레임을 사용 하도록 설정 하는 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-558">This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e539-559">다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Threading.DispatcherFrame> 와 비슷한 결과 달성 하는 [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="1e539-559">The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span>  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1e539-560">
            <paramref name="frame" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-560">
              <paramref name="frame" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1e539-561">
            <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />가 <see langword="true" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-561">
              <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" /></span>
          </span>
          <span data-ttu-id="1e539-562">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-562">-or-</span>
          </span>
          <span data-ttu-id="1e539-563">
            <paramref name="frame" />이 다른 <see cref="T:System.Windows.Threading.Dispatcher" />에서 실행 중인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-563">
              <paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
          <span data-ttu-id="1e539-564">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-564">-or-</span>
          </span>
          <span data-ttu-id="1e539-565">Dispatcher 처리가 비활성화된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-565">Dispatcher processing has been disabled.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="1e539-566">에 실행 프레임을 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-566">for pushing an execution frame.</span>
          </span>
          <span data-ttu-id="1e539-567">연관 된 열거형:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-567">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1e539-568">
            <see cref="T:System.Windows.Threading.Dispatcher" />의 이벤트 큐에서 기본 실행 프레임을 푸시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-568">Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-569"><xref:System.Windows.Threading.Dispatcher> 루프의 이벤트 큐를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-569">The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.</span></span>  <span data-ttu-id="1e539-570">루프는 프레임으로 참조 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-570">The loop is referred to as a frame.</span></span>  <span data-ttu-id="1e539-571">초기 루프는 일반적으로 시작 된 응용 프로그램에서 호출 하 여 <xref:System.Windows.Threading.Dispatcher.Run%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-571">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="1e539-572">기본 실행 프레임까지 계속 됩니다는 <xref:System.Windows.Threading.Dispatcher> 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-572">The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberSignature Language="F#" Value="member this.ShutdownFinished : EventHandler " Usage="member this.ShutdownFinished : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e539-573">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 종료되면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-573">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-574">때의 종료 프로세스를 <xref:System.Windows.Threading.Dispatcher> 시작 되는 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트가 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-574">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="1e539-575"><xref:System.Windows.Threading.Dispatcher> 이벤트 큐 해제 될 때까지 완전히 종료 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-575">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="1e539-576">Dispatcher 종료를 완료 하는 경우를 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트가 발생 하며 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성 `true`.</span><span class="sxs-lookup"><span data-stu-id="1e539-576">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="1e539-577">종료 프로세스 시작 되 면 모든 보류 중인 작업 항목이 큐에서 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-577">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberSignature Language="F#" Value="member this.ShutdownStarted : EventHandler " Usage="member this.ShutdownStarted : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e539-578">
            <see cref="T:System.Windows.Threading.Dispatcher" />가 종료되기 시작하면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-578">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-579">때의 종료 프로세스를 <xref:System.Windows.Threading.Dispatcher> 시작 되는 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트가 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-579">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="1e539-580"><xref:System.Windows.Threading.Dispatcher> 이벤트 큐 해제 될 때까지 완전히 종료 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-580">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="1e539-581">Dispatcher 종료를 완료 하는 경우를 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트가 발생 하며 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성 `true`.</span><span class="sxs-lookup"><span data-stu-id="1e539-581">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="1e539-582">종료 프로세스 시작 되 면 모든 보류 중인 작업 항목이 큐에서 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-582">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Thread : System.Threading.Thread" Usage="System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e539-583">이 <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-583">Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1e539-584">스레드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-584">The thread.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e539-585">
            <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 또는 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />를 통해 대리자를 실행하는 동안 스레드 예외가 throw되고 catch되지 않으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-585">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-586">이 이벤트는의 방식으로 대리자를 실행 하는 동안 throw 된 예외가 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 포착 되지 않으면.</span><span class="sxs-lookup"><span data-stu-id="1e539-586">This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.</span></span>  
  
 <span data-ttu-id="1e539-587">처리기를 표시할 수 예외를 처리 하는 대로 호출 되는 내부 예외 처리기 것을 방지할.</span><span class="sxs-lookup"><span data-stu-id="1e539-587">A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</span></span>  
  
 <span data-ttu-id="1e539-588">이 이벤트에 대 한 이벤트 처리기는 발생 하는 모든 보조 예외 만들기를 방지 하 고 catch 하려면 신중 하 게 작성 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-588">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span> <span data-ttu-id="1e539-589">메모리를 할당 하거나 리소스 집약적 작업 처리기에서 수행 하지 않도록 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-589">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="1e539-590">합니다 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 이벤트 발생 시 키 지 하는 방법을 제공 합니다 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-590">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="1e539-591">합니다 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 이벤트가 먼저 발생 경우 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> 에 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> 로 설정 되어 `false`, <xref:System.Windows.Threading.Dispatcher.UnhandledException> 이벤트 발생 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-591">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberSignature Language="F#" Value="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " Usage="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1e539-592">필터 단계에서 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 또는 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />를 통해 대리자를 실행하는 동안 스레드 예외가 throw되고 catch되지 않으면 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-592">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-593">방식으로 대리자를 실행 하는 동안 발생 하는 예외에 대 한 필터 단계 중에이 이벤트가 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 고 포착 되지 않으면.</span><span class="sxs-lookup"><span data-stu-id="1e539-593">This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.</span></span>  
  
 <span data-ttu-id="1e539-594">호출 스택 (첫째 예외)이이 지점에서 스택이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="1e539-594">The call stack is not unwound at this point (first-chance exception).</span></span>  
  
 <span data-ttu-id="1e539-595">이 이벤트에 대 한 이벤트 처리기는 발생 하는 모든 보조 예외 만들기를 방지 하 고 catch 하려면 신중 하 게 작성 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-595">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span>  <span data-ttu-id="1e539-596">메모리를 할당 하거나 리소스 집약적 작업 처리기에서 수행 하지 않도록 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-596">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="1e539-597">합니다 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 이벤트 발생 시 키 지 하는 방법을 제공 합니다 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-597">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="1e539-598">합니다 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 이벤트가 먼저 발생 경우 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> 에 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> 로 설정 되어 `false`, <xref:System.Windows.Threading.Dispatcher.UnhandledException> 이벤트 발생 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-598">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="1e539-599">에 더하거나이 이벤트에 대 한 처리기를 제거 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-599">for adding or removing a handler for this event.</span>
          </span>
          <span data-ttu-id="1e539-600">연관 된 열거형:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-600">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="static member ValidatePriority : System.Windows.Threading.DispatcherPriority * string -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ValidatePriority (priority, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="1e539-601">확인할 우선 순위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-601">The priority to check.</span>
          </span>
        </param>
        <param name="parameterName">
          <span data-ttu-id="1e539-602">우선 순위가 잘못된 경우 발생하는 예외에서 반환되는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-602">A string that will be returned by the exception that occurs if the priority is invalid.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-603">지정된 <see cref="T:System.Windows.Threading.DispatcherPriority" />가 유효한 우선 순위인지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-603">Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="1e539-604">
            <paramref name="priority" />은 유효한 <see cref="T:System.Windows.Threading.DispatcherPriority" />이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-604">
              <paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcher.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1e539-605">호출 스레드가 이 <see cref="T:System.Windows.Threading.Dispatcher" />에 액세스할 수 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-605">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-606">스레드만 합니다 <xref:System.Windows.Threading.Dispatcher> 만들어집니다에 액세스할 수는 <xref:System.Windows.Threading.Dispatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-606">Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="1e539-607">이 메서드는 공용입니다. 따라서 모든 스레드 수 확인 권한을 있는지 확인 합니다 <xref:System.Windows.Threading.Dispatcher>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-607">This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="1e539-608">간의 차이 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 및 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 됩니다 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 호출 스레드를 권한이 없는 경우 부울 값을 반환 합니다 <xref:System.Windows.Threading.Dispatcher> 및 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-608">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1e539-609">다음 예제에서는 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 스레드가 스레드에 액세스할 수 있는지 여부를 결정 하는 <xref:System.Windows.Controls.Button> 만들어진 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-609">The following example uses <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="1e539-610">로 캐스팅 되는 인수로 서 개체를 사용 하는 메서드를 <xref:System.Windows.Controls.Button>입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-610">The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="1e539-611"><xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 메서드를 <xref:System.Windows.Threading.Dispatcher> 의 <xref:System.Windows.Controls.Button> 스레드가 액세스할 수 있는지 확인 하기 위해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-611">The <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  
  
 <span data-ttu-id="1e539-612">호출 스레드를 액세스할 수 있는 경우는 <xref:System.Windows.Threading.Dispatcher>, <xref:System.Windows.Controls.Button> 만의 멤버에 액세스 하 여 업데이트 되는 <xref:System.Windows.Controls.Button>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-612">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="1e539-613">호출 스레드에서 액세스 되지 않은 경우는 <xref:System.InvalidOperationException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-613">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  <span data-ttu-id="1e539-614">이 예제에서는 예외를 catch 하 고 허용 되는 대리자를 푸시를 <xref:System.Windows.Controls.Button> 인수로는 <xref:System.Windows.Threading.Dispatcher> 의 <xref:System.Windows.Controls.Button>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-614">This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="1e539-615">이 <xref:System.Windows.Threading.Dispatcher> 는 업데이트 작업 수행을 <xref:System.Windows.Controls.Button>입니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-615">This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1e539-616">호출 스레드에서 이 <see cref="T:System.Windows.Threading.Dispatcher" />에 액세스할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-616">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1e539-617">현재 디스패처에 비동기적으로 제어를 다시 제공하여 다른 이벤트를 처리할 수 있는 기회를 디스패처에 제공하는 awaitable 개체를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-617">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1e539-618">현재 디스패처에 비동기적으로 제어를 다시 제공하여 다른 이벤트를 처리할 수 있는 기회를 디스패처에 제공하는 awaitable 개체를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-618">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-619">현재 디스패처에 제어를 비동기적으로 다시 제공하여 디스패처가 다른 이벤트를 처리할 수 있도록 기회를 제공하는 awaitable 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-619">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-620">이 메서드를 다른 이벤트를 처리할 같은 다른 작업을 수행할 수 있도록 현재 디스패처에 실행 제어가 일시적으로 해제할 수 있는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-620">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="1e539-621">사용 된 `await`, 또는 `Await` Visual basic의 경우 현재 디스패처에 제어를 반환 하는 반환 값에 연산자.</span><span class="sxs-lookup"><span data-stu-id="1e539-621">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="1e539-622">경우에이 메서드를 사용 하 여 앱을 앱에는 많은 UI 스레드에서 작업을 수행 하는 동안 이벤트를 처리 하는 데 수 있도록 하려면.</span><span class="sxs-lookup"><span data-stu-id="1e539-622">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="1e539-623">예를 들어, 컨트롤을 업데이트 하는 장기 실행 루프에서이 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-623">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 <span data-ttu-id="1e539-624">이 메서드는 호출에 해당 하는 <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> 메서드와 전달 <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-624">This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="static member Yield : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">
          <span data-ttu-id="1e539-625">연속 예약할 우선 순위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-625">The priority at which to schedule the continuation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1e539-626">현재 디스패처에 비동기적으로 제어를 다시 제공하여 다른 이벤트를 처리할 수 있는 기회를 디스패처에 제공하는 awaitable 개체를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-626">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
          <span data-ttu-id="1e539-627">이 메서드의 결과를 기다리는 코드에 제어를 반환할 때 발생하는 작업은 지정된 우선 순위를 사용하여 예약됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-627">The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1e539-628">현재 디스패처에 제어를 비동기적으로 다시 제공하여 디스패처가 다른 이벤트를 처리할 수 있도록 기회를 제공하는 awaitable 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1e539-628">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e539-629">이 메서드를 다른 이벤트를 처리할 같은 다른 작업을 수행할 수 있도록 현재 디스패처에 실행 제어가 일시적으로 해제할 수 있는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-629">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="1e539-630">사용 된 `await`, 또는 `Await` Visual basic의 경우 현재 디스패처에 제어를 반환 하는 반환 값에 연산자.</span><span class="sxs-lookup"><span data-stu-id="1e539-630">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="1e539-631">경우에이 메서드를 사용 하 여 앱을 앱에는 많은 UI 스레드에서 작업을 수행 하는 동안 이벤트를 처리 하는 데 수 있도록 하려면.</span><span class="sxs-lookup"><span data-stu-id="1e539-631">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="1e539-632">예를 들어, 컨트롤을 업데이트 하는 장기 실행 루프에서이 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e539-632">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>