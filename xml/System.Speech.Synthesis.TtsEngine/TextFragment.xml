<Type Name="TextFragment" FullName="System.Speech.Synthesis.TtsEngine.TextFragment">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c65eb49060676e2f1621fcb140f4dc28b7e291cf" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408737" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextFragment" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit TextFragment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFragment" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFragment" />
  <TypeSignature Language="F#" Value="type TextFragment = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>음성 신시사이저 엔진의 소비에 대한 텍스트 및 음성 특성 정보를 포함합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 음성 플랫폼 인프라 압축을 푼 SSML 입력 및 구문의 XML 기반 구조 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 개체입니다.  
  
 음성 콘텐츠를 통해 사용할 수는 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, 및 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> 의 속성을 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 인스턴스.  
  
 음성 특성 정보를 강조, 피치 및 속도에서 가져온 같은 <xref:System.Speech.Synthesis.TtsEngine.FragmentState> 에서 반환 된 개체는 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> 속성입니다.  
  
   
  
## Examples  
 아래 예제에서 상속 하는 사용자 지정 음성 합성 구현의 일부인 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, 및을 사용 하 여 <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, 및 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>합니다.  
  
 구현 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  형식의 배열을 받습니다 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 인스턴스를 새 배열을 만듭니다 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 전달 되는 인스턴스는 `Speak` 메서드는 기본 합성 엔진이를 합니다.  
  
     때는 특히 주의 준수 하는 데 사용 되는 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> 원래에 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 만들 때의 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> 새 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 인스턴스.  
  
2.  경우는 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> 에서 열거형 값으로 찾을 <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> 속성에는 <xref:System.Speech.Synthesis.TtsEngine.FragmentState> 에서 반환 되는 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> 각 속성 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 인스턴스가 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, 구현  
  
    -   읽을 텍스트의 Americanism Britishisms 변환 합니다.  
  
    -   경우는 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> 속성에는 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> 구현 지원에 제공 하는 인터페이스는 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> 이벤트 유형에 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> 인스턴스 이벤트 신시사이저 진행률 표시기가 만든 드라이브를 만드는 데 사용 됩니다.  
  
3.  음성 렌더링 엔진이 라고 다음으로 수정 된 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 배열입니다.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TextFragment.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFragment();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see langword="TextFragment" />의 새 인스턴스를 생성합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 생성자 <xref:System.Speech.Synthesis.TtsEngine.TextFragment>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.TtsEngine.FragmentState State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.TtsEngine.FragmentState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.State" />
      <MemberSignature Language="VB.NET" Value="Public Property State As FragmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::TtsEngine::FragmentState State { System::Speech::Synthesis::TtsEngine::FragmentState get(); void set(System::Speech::Synthesis::TtsEngine::FragmentState value); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Synthesis.TtsEngine.FragmentState with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.FragmentState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="TextFragment" />를 위한 음성 특성 정보를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Speech.Synthesis.TtsEngine.FragmentState" /> 인스턴스는 반환되거나, 또는 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />에 대한 음성 특성 정보를 설정하는데 사용됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 기본값은 `null`입니다.  
  
 인스턴스에서 prosody 정보를 가져올 수 있습니다 <xref:System.Speech.Synthesis.TtsEngine.Prosody> 에서 반환 되는 <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A> 의 인스턴스에 대 한 속성 <xref:System.Speech.Synthesis.TtsEngine.FragmentState> 반환한 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public int TextLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextLength : int with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>해당 조각의 음성 텍스트 길이를 가져오거나 설정합니다.</summary>
        <value>
          <see langword="int" />는 반환되거나 또는 읽을 이 조각과 관련된 텍스트 문자열의 길이(문자 수)를 설정하는 데 사용할 수 있습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 기본값은 0입니다.  
  
   
  
## Examples  
 아래 예제에서 상속 하는 사용자 지정 음성 합성 구현의 일부인 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, 및을 사용 하 여 <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, 및 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>합니다.  
  
 구현 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  형식의 배열을 받습니다 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 인스턴스를 새 배열을 만듭니다 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 전달 되는 인스턴스는 `Speak` 메서드는 기본 합성 엔진이를 합니다.  
  
     때는 특히 주의 준수 하는 데 사용 되는 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> 원래에 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 만들 때의 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> 새 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 인스턴스.  
  
2.  경우는 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> 에서 열거형 값으로 찾을 <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> 속성에는 <xref:System.Speech.Synthesis.TtsEngine.FragmentState> 에서 반환 되는 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> 각 속성 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 인스턴스가 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, 구현  
  
    -   읽을 텍스트의 Americanism Britishisms 변환 합니다.  
  
    -   경우는 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> 속성에는 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> 구현 지원에 제공 하는 인터페이스는 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> 이벤트 유형에 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> 인스턴스 이벤트 신시사이저 진행률 표시기가 만든 드라이브를 만드는 데 사용 됩니다.  
  
3.  음성 렌더링 엔진이 라고 다음으로 수정 된 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 배열입니다.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextOffset">
      <MemberSignature Language="C#" Value="public int TextOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextOffset" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property TextOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextOffset : int with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>조각에서 텍스트의 시작 길이를 가져오거나 설정합니다.</summary>
        <value>
          <see langword="int" />는 반환되거나 또는 읽을 이 조각과 관련된 텍스트 문자열의 일부의 시작 위치(문자)를 설정하는 데 사용할 수 있습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 기본값은 0입니다.  
  
   
  
## Examples  
 아래 예제에서 상속 하는 사용자 지정 음성 합성 구현의 일부인 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, 및을 사용 하 여 <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, 및 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>합니다.  
  
 구현 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  형식의 배열을 받습니다 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 인스턴스를 새 배열을 만듭니다 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 전달 되는 인스턴스는 `Speak` 메서드는 기본 합성 엔진이를 합니다.  
  
     때는 특히 주의 준수 하는 데 사용 되는 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> 원래에 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 만들 때의 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> 새 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 인스턴스.  
  
2.  경우는 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> 에서 열거형 값으로 찾을 <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> 속성에는 <xref:System.Speech.Synthesis.TtsEngine.FragmentState> 에서 반환 되는 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> 각 속성 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 인스턴스가 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, 구현  
  
    -   읽을 텍스트의 Americanism Britishisms 변환 합니다.  
  
    -   경우는 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> 속성에는 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> 구현 지원에 제공 하는 인터페이스는 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> 이벤트 유형에 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> 인스턴스 이벤트 신시사이저 진행률 표시기가 만든 드라이브를 만드는 데 사용 됩니다.  
  
3.  음성 렌더링 엔진이 라고 다음으로 수정 된 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 배열입니다.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextToSpeak">
      <MemberSignature Language="C#" Value="public string TextToSpeak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextToSpeak" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
      <MemberSignature Language="VB.NET" Value="Public Property TextToSpeak As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextToSpeak { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TextToSpeak : string with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>해당 조각의 음성 텍스트를 설정하거나 가져옵니다.</summary>
        <value>
          <see langword="System.String" />이 반환되었거나, 또는 음성 합성 엔진이 오디오 출력을 생성하는 데 사용할 음성 텍스트를 설정하는 데 사용할 수 있습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 기본값은 `System.String.Empty`입니다.  
  
 응용 프로그램은 값을 변경 해도 완전히 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>합니다.  
  
 값을 다시 설정 하면 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> 의 값이 변경 되지 것입니다 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A> 및 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>합니다.  
  
   
  
## Examples  
 아래 예제에서 상속 하는 사용자 지정 음성 합성 구현의 일부인 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, 및을 사용 하 여 <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, 및 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>합니다.  
  
 구현 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  형식의 배열을 받습니다 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 인스턴스를 새 배열을 만듭니다 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 전달 되는 인스턴스는 `Speak` 메서드는 기본 합성 엔진이를 합니다.  
  
     때는 특히 주의 준수 하는 데 사용 되는 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> 원래에 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 만들 때의 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> 새 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 인스턴스.  
  
2.  경우는 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> 에서 열거형 값으로 찾을 <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> 속성에는 <xref:System.Speech.Synthesis.TtsEngine.FragmentState> 에서 반환 되는 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> 각 속성 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 인스턴스가 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, 구현  
  
    -   읽을 텍스트의 Americanism Britishisms 변환 합니다.  
  
    -   경우는 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> 속성에는 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> 구현 지원에 제공 하는 인터페이스는 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> 이벤트 유형에 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> 인스턴스 이벤트 신시사이저 진행률 표시기가 만든 드라이브를 만드는 데 사용 됩니다.  
  
3.  음성 렌더링 엔진이 라고 다음으로 수정 된 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 배열입니다.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>