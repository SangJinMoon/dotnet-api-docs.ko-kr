<Type Name="CodeIterationStatement" FullName="System.CodeDom.CodeIterationStatement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a602afb36a6ac9c38da796d2c7aecfe2e5f27528" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30359317" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CodeIterationStatement : System.CodeDom.CodeStatement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeIterationStatement extends System.CodeDom.CodeStatement" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeIterationStatement" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeIterationStatement&#xA;Inherits CodeStatement" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeIterationStatement : System::CodeDom::CodeStatement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeStatement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="6a2dc-101">테스트 식을 반복 조건으로 사용하여 <see langword="for" /> 문 또는 문의 블록을 통한 루프를 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6a2dc-101">Represents a <see langword="for" /> statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a2dc-102">A <xref:System.CodeDom.CodeIterationStatement> 나타낼 수는 `for` 루프 또는 `while` 루프입니다.</span><span class="sxs-lookup"><span data-stu-id="6a2dc-102">A <xref:System.CodeDom.CodeIterationStatement> can represent a `for` loop or `while` loop.</span></span>  
  
 <span data-ttu-id="6a2dc-103"><xref:System.CodeDom.CodeIterationStatement.InitStatement%2A> 속성에는 첫 번째 루프 반복 되기 전에 실행할 문을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="6a2dc-103">The <xref:System.CodeDom.CodeIterationStatement.InitStatement%2A> property specifies the statement to execute before the first loop iteration.</span></span> <span data-ttu-id="6a2dc-104"><xref:System.CodeDom.CodeIterationStatement.TestExpression%2A> 속성으로 계산 되어야 하는 루프 계속 식을 지정 `true` 시작할 다른 반복을 각 루프 반복 끝에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6a2dc-104">The <xref:System.CodeDom.CodeIterationStatement.TestExpression%2A> property specifies the loop continuation expression, which must evaluate to `true` at the end of each loop iteration for another iteration to begin.</span></span> <span data-ttu-id="6a2dc-105"><xref:System.CodeDom.CodeIterationStatement.IncrementStatement%2A> 속성에는 각 루프 반복이 끝날 때 실행할 문을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="6a2dc-105">The <xref:System.CodeDom.CodeIterationStatement.IncrementStatement%2A> property specifies the statement to execute at the end of each loop iteration.</span></span> <span data-ttu-id="6a2dc-106"><xref:System.CodeDom.CodeIterationStatement.Statements%2A> 속성 루프 내에서 실행 하는 문의 컬렉션을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="6a2dc-106">The <xref:System.CodeDom.CodeIterationStatement.Statements%2A> property specifies the collection of statements to execute within the loop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6a2dc-107">사용 하 여 보여 주는이 예제는 <xref:System.CodeDom.CodeIterationStatement> 나타내기 위해는 `for` 루프입니다.</span><span class="sxs-lookup"><span data-stu-id="6a2dc-107">This example demonstrates using a <xref:System.CodeDom.CodeIterationStatement> to represent a `for` loop.</span></span>  
  
 [!code-cpp[CodeIterationStatementExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeIterationStatementExample/CPP/codeiterationstatementexample.cpp#2)]
 [!code-csharp[CodeIterationStatementExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeIterationStatementExample/CS/codeiterationstatementexample.cs#2)]
 [!code-vb[CodeIterationStatementExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeIterationStatementExample/VB/codeiterationstatementexample.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6a2dc-108">
            <see cref="T:System.CodeDom.CodeIterationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a2dc-108">Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeIterationStatement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeIterationStatement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeIterationStatement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6a2dc-109">
            <see cref="T:System.CodeDom.CodeIterationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a2dc-109">Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeIterationStatement (System.CodeDom.CodeStatement initStatement, System.CodeDom.CodeExpression testExpression, System.CodeDom.CodeStatement incrementStatement, params System.CodeDom.CodeStatement[] statements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeStatement initStatement, class System.CodeDom.CodeExpression testExpression, class System.CodeDom.CodeStatement incrementStatement, class System.CodeDom.CodeStatement[] statements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initStatement As CodeStatement, testExpression As CodeExpression, incrementStatement As CodeStatement, ParamArray statements As CodeStatement())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeIterationStatement(System::CodeDom::CodeStatement ^ initStatement, System::CodeDom::CodeExpression ^ testExpression, System::CodeDom::CodeStatement ^ incrementStatement, ... cli::array &lt;System::CodeDom::CodeStatement ^&gt; ^ statements);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initStatement" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="testExpression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="incrementStatement" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="statements" Type="System.CodeDom.CodeStatement[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="initStatement">
          <span data-ttu-id="6a2dc-110">루프 초기화 문이 포함된 <see cref="T:System.CodeDom.CodeStatement" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a2dc-110">A <see cref="T:System.CodeDom.CodeStatement" /> containing the loop initialization statement.</span>
          </span>
        </param>
        <param name="testExpression">
          <span data-ttu-id="6a2dc-111">종료 조건을 테스트할 식이 포함된 <see cref="T:System.CodeDom.CodeExpression" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a2dc-111">A <see cref="T:System.CodeDom.CodeExpression" /> containing the expression to test for exit condition.</span>
          </span>
        </param>
        <param name="incrementStatement">
          <span data-ttu-id="6a2dc-112">주기별 증분 문이 포함된 <see cref="T:System.CodeDom.CodeStatement" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a2dc-112">A <see cref="T:System.CodeDom.CodeStatement" /> containing the per-cycle increment statement.</span>
          </span>
        </param>
        <param name="statements">
          <span data-ttu-id="6a2dc-113">루프 내의 문이 포함된 <see cref="T:System.CodeDom.CodeStatement" /> 형식의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a2dc-113">An array of type <see cref="T:System.CodeDom.CodeStatement" /> containing the statements within the loop.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6a2dc-114">지정된 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeIterationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a2dc-114">Initializes a new instance of the <see cref="T:System.CodeDom.CodeIterationStatement" /> class using the specified parameters.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeStatement" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="IncrementStatement">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatement IncrementStatement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatement IncrementStatement" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.IncrementStatement" />
      <MemberSignature Language="VB.NET" Value="Public Property IncrementStatement As CodeStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatement ^ IncrementStatement { System::CodeDom::CodeStatement ^ get(); void set(System::CodeDom::CodeStatement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6a2dc-115">각 루프 주기 다음에 호출되는 문을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a2dc-115">Gets or sets the statement that is called after each loop cycle.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6a2dc-116">주기별 증분 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a2dc-116">A <see cref="T:System.CodeDom.CodeStatement" /> that indicates the per cycle increment statement.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a2dc-117">이 문은 각 반복 후 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6a2dc-117">This statement is called after each iteration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeStatement" />
      </Docs>
    </Member>
    <Member MemberName="InitStatement">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatement InitStatement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatement InitStatement" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.InitStatement" />
      <MemberSignature Language="VB.NET" Value="Public Property InitStatement As CodeStatement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatement ^ InitStatement { System::CodeDom::CodeStatement ^ get(); void set(System::CodeDom::CodeStatement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6a2dc-118">루프 초기화 문을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a2dc-118">Gets or sets the loop initialization statement.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6a2dc-119">루프 초기화 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a2dc-119">A <see cref="T:System.CodeDom.CodeStatement" /> that indicates the loop initialization statement.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a2dc-120">이 속성을 설정 하 여 빈 초기화 문을 지정할 수 있습니다는 <xref:System.CodeDom.CodeExpressionStatement> 를 포함 하는 <xref:System.CodeDom.CodeSnippetExpression> 빈 문자열을 포함 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="6a2dc-120">You can specify an empty initialization statement by setting this property to a <xref:System.CodeDom.CodeExpressionStatement> that contains a <xref:System.CodeDom.CodeSnippetExpression> that contains an empty string.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Statements">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeStatementCollection Statements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeStatementCollection Statements" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.Statements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Statements As CodeStatementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeStatementCollection ^ Statements { System::CodeDom::CodeStatementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeStatementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6a2dc-121">루프 내에서 실행되는 문의 컬렉션을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a2dc-121">Gets the collection of statements to be executed within the loop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6a2dc-122">루프 내의 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" /> 형식의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a2dc-122">An array of type <see cref="T:System.CodeDom.CodeStatement" /> that indicates the statements within the loop.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeStatement" />
      </Docs>
    </Member>
    <Member MemberName="TestExpression">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression TestExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression TestExpression" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeIterationStatement.TestExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property TestExpression As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpression ^ TestExpression { System::CodeDom::CodeExpression ^ get(); void set(System::CodeDom::CodeExpression ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6a2dc-123">루프를 계속할 조건으로 테스트할 식을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a2dc-123">Gets or sets the expression to test as the condition that continues the loop.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6a2dc-124">테스트할 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6a2dc-124">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the expression to test.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6a2dc-125">이 식이 `true`, 루프가 계속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6a2dc-125">If this expression resolves to `true`, the loop will continue.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
  </Members>
</Type>