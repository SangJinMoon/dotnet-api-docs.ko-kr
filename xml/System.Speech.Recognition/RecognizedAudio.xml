<Type Name="RecognizedAudio" FullName="System.Speech.Recognition.RecognizedAudio">
  <TypeSignature Language="C#" Value="public class RecognizedAudio" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedAudio extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedAudio" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedAudio" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedAudio" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="6ae09-101"><see cref="T:System.Speech.Recognition.RecognitionResult" />와 연결된 오디오 입력을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-101">Represents audio input that is associated with a <see cref="T:System.Speech.Recognition.RecognitionResult" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ae09-102">음성 인식기에서 인식 작업의 일부로 오디오 입력에 대 한 정보를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-102">A speech recognizer generates information about the audio input as part of the recognition operation.</span></span> <span data-ttu-id="6ae09-103">인식 된 오디오에 액세스 하려면 사용 된 <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> 속성 또는 <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> 의 메서드는 <xref:System.Speech.Recognition.RecognitionResult>합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-103">To access the recognized audio, use the <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property or the <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> method of the <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="6ae09-104">다음 이벤트 및의 메서드에 의해 인식 결과 생성할 수 있습니다는 <xref:System.Speech.Recognition.SpeechRecognizer> 및 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 클래스:</span><span class="sxs-lookup"><span data-stu-id="6ae09-104">A recognition result can be produced by the following events and methods of the <xref:System.Speech.Recognition.SpeechRecognizer> and <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes:</span></span>  
  
-   <span data-ttu-id="6ae09-105">이벤트:</span><span class="sxs-lookup"><span data-stu-id="6ae09-105">Events:</span></span>  
  
    -   <span data-ttu-id="6ae09-106"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized?displayProperty=nameWithType> 및 <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="6ae09-106"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized?displayProperty=nameWithType></span></span>  
  
    -   <span data-ttu-id="6ae09-107"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected?displayProperty=nameWithType> 및 <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="6ae09-107"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected?displayProperty=nameWithType></span></span>  
  
    -   <span data-ttu-id="6ae09-108"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> 및 <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="6ae09-108"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType></span></span>  
  
    -   <span data-ttu-id="6ae09-109"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted?displayProperty=nameWithType> 및 <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="6ae09-109"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted?displayProperty=nameWithType></span></span>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted?displayProperty=nameWithType>  
  
-   <span data-ttu-id="6ae09-110">메서드:</span><span class="sxs-lookup"><span data-stu-id="6ae09-110">Methods:</span></span>  
  
    -   <span data-ttu-id="6ae09-111"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A?displayProperty=nameWithType> 및 <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="6ae09-111"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A?displayProperty=nameWithType></span></span>  
  
    -   <span data-ttu-id="6ae09-112"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A?displayProperty=nameWithType> 및 <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="6ae09-112"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A?displayProperty=nameWithType></span></span>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A?displayProperty=nameWithType>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A?displayProperty=nameWithType>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6ae09-113">에뮬레이트된 음성 인식에서 생성 된 인식 결과 인식 된 오디오를 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-113">A recognition result produced by emulated speech recognition does not contain recognized audio.</span></span> <span data-ttu-id="6ae09-114">이러한는 인식 결과 대 한 해당 <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> 속성에서 반환 `null` 및 해당 <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> 메서드에서 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-114">For such a recognition result, its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property returns `null` and its <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> method throws an exception.</span></span> <span data-ttu-id="6ae09-115">에뮬레이트된 음성 인식 하는 방법에 대 한 자세한 내용은 참조는 `EmulateRecognize` 및 `EmulateRecognizeAsync` 의 메서드는 <xref:System.Speech.Recognition.SpeechRecognizer> 및 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-115">For more information about emulated speech recognition, see the `EmulateRecognize` and `EmulateRecognizeAsync` methods of the <xref:System.Speech.Recognition.SpeechRecognizer> and <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ae09-116">다음 예제에서는 핸들의 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, 또는 <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> 이벤트와 연결 된 인식 결과 인식 된 오디오에 대 한 콘솔 정보를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-116">The following example handles the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, or <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> event and outputs to the console information about the recognized audio that is associated with the recognition result.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  
  Console.WriteLine("Grammar({0}): {1}",  
    result.Grammar.Name, result.Text);  
  
  if (e.Result.Audio != null)  
  {  
    RecognizedAudio audio = e.Result.Audio;  
  
    Console.WriteLine("   start time: {0}", audio.StartTime);  
    Console.WriteLine("   encoding format: {0}", audio.Format.EncodingFormat);  
    Console.WriteLine("   position: {0}, duration: {1}",  
      audio.AudioPosition, audio.Duration);  
  }  
  
  // Add event handler code here.  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedAudio.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6ae09-117">인식된 오디오의 시작을 위한 입력 오디오 스트림의 위치를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-117">Gets the location in the input audio stream for the start of the recognized audio.</span></span></summary>
        <value><span data-ttu-id="6ae09-118">인식된 오디오에서 입력 오디오 스트림의 시작 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-118">The location in the input audio stream for the start of the recognized audio.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ae09-119">이 속성은 생성 된 오디오 스트림 입력된 장치에서에서 인식된 된 구와의 시작 부분에 위치를 참조합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-119">This property references the position at the beginning of the recognized phrase in the input device's generated audio stream.</span></span> <span data-ttu-id="6ae09-120">반면,는 `RecognizerAudioPosition` 속성은 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 및 <xref:System.Speech.Recognition.SpeechRecognizer> 클래스 오디오 입력 내의 인식기에서 위치를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-120">By contrast, the `RecognizerAudioPosition` property of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> and <xref:System.Speech.Recognition.SpeechRecognizer> classes reference the recognizer's position within its audio input.</span></span> <span data-ttu-id="6ae09-121">이 위치는 다를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-121">These positions can be different.</span></span> <span data-ttu-id="6ae09-122">자세한 내용은 참조 [음성 인식 이벤트를 사용 하 여](http://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482)합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-122">For more information, see [Using Speech Recognition Events](http://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482).</span></span>  
  
 <span data-ttu-id="6ae09-123"><xref:System.Speech.Recognition.RecognizedAudio.StartTime%2A> 속성 인식 작업의 시작 부분에 시스템 시간을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-123">The <xref:System.Speech.Recognition.RecognizedAudio.StartTime%2A> property gets the system time at the start of the recognition operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ae09-124">다음 예제에서는 핸들의 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> 또는 <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> 이벤트와 연결 된 인식 결과 인식 된 오디오에 대 한 콘솔 정보를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-124">The following example handles the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> or <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> event and outputs to the console information about the recognized audio that is associated with the recognition result.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  
  Console.WriteLine("Grammar({0}): {1}",  
    result.Grammar.Name, result.Text);  
  
  if (e.Result.Audio != null)  
  {  
    RecognizedAudio audio = e.Result.Audio;  
  
    Console.WriteLine("   start time: {0}", audio.StartTime);  
    Console.WriteLine("   encoding format: {0}", audio.Format.EncodingFormat);  
    Console.WriteLine("   position: {0}, duration: {1}",  
      audio.AudioPosition, audio.Duration);  
  }  
  
  // Add event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.Enabled" />
        <altmember cref="P:System.Speech.Recognition.RecognizedAudio.Duration" />
        <altmember cref="P:System.Speech.Recognition.RecognizedAudio.StartTime" />
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public TimeSpan Duration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Duration" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedAudio.Duration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Duration As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Duration { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6ae09-125">인식된 오디오의 입력 오디오 스트림의 지속 시간을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-125">Gets the duration of the input audio stream for the recognized audio.</span></span></summary>
        <value><span data-ttu-id="6ae09-126">인식된 오디오의 입력 오디오 스트림의 지속 시간입니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-126">The duration within the input audio stream for the recognized audio.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6ae09-127">다음 예제에서는 핸들의 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> 또는 <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> 이벤트와 연결 된 인식 결과 인식 된 오디오에 대 한 콘솔 정보를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-127">The following example handles the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> or <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> event and outputs to the console information about the recognized audio that is associated with the recognition result.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  
  Console.WriteLine("Grammar({0}): {1}",  
    result.Grammar.Name, result.Text);  
  
  if (e.Result.Audio != null)  
  {  
    RecognizedAudio audio = e.Result.Audio;  
  
    Console.WriteLine("   start time: {0}", audio.StartTime);  
    Console.WriteLine("   encoding format: {0}", audio.Format.EncodingFormat);  
    Console.WriteLine("   position: {0}, duration: {1}",  
      audio.AudioPosition, audio.Duration);  
  }  
  
  // Add event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognizedAudio.AudioPosition" />
        <altmember cref="P:System.Speech.Recognition.RecognizedAudio.StartTime" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public System.Speech.AudioFormat.SpeechAudioFormatInfo Format { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.AudioFormat.SpeechAudioFormatInfo Format" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedAudio.Format" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Format As SpeechAudioFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::AudioFormat::SpeechAudioFormatInfo ^ Format { System::Speech::AudioFormat::SpeechAudioFormatInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.AudioFormat.SpeechAudioFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6ae09-128">인식 엔진에 의해 처리되는 오디오 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-128">Gets the format of the audio processed by a recognition engine.</span></span></summary>
        <value><span data-ttu-id="6ae09-129">음성 인식기에 의해 처리되는 오디오 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-129">The format of the audio processed by the speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6ae09-130">다음 예제에서는 핸들의 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> 또는 <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> 이벤트와 연결 된 인식 결과 인식 된 오디오에 대 한 콘솔 정보를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-130">The following example handles the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> or <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> event and outputs to the console information about the recognized audio that is associated with the recognition result.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  
  Console.WriteLine("Grammar({0}): {1}",  
    result.Grammar.Name, result.Text);  
  
  if (e.Result.Audio != null)  
  {  
    RecognizedAudio audio = e.Result.Audio;  
  
    Console.WriteLine("   start time: {0}", audio.StartTime);  
    Console.WriteLine("   encoding format: {0}", audio.Format.EncodingFormat);  
    Console.WriteLine("   position: {0}, duration: {1}",  
      audio.AudioPosition, audio.Duration);  
  }  
  
  // Add event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="N:System.Speech.AudioFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizedAudio GetRange (TimeSpan audioPosition, TimeSpan duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognizedAudio GetRange(valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedAudio.GetRange(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRange (audioPosition As TimeSpan, duration As TimeSpan) As RecognizedAudio" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognizedAudio ^ GetRange(TimeSpan audioPosition, TimeSpan duration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizedAudio</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="duration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="audioPosition"><span data-ttu-id="6ae09-131">반환되는 오디오 데이터의 시작 지점입니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-131">The starting point of the audio data to be returned.</span></span></param>
        <param name="duration"><span data-ttu-id="6ae09-132">반환되는 세그먼트의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-132">The length of the segment to be returned.</span></span></param>
        <summary><span data-ttu-id="6ae09-133">선택 하 고 섹션을 현재 인식 이진 데이터로 오디오 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-133">Selects and returns a section of the current recognized audio as binary data.</span></span></summary>
        <returns><span data-ttu-id="6ae09-134"><paramref name="audioPosition" />과 <paramref name="duration" />으로 정의된 바와 같이 인식된 오디오의 하위 섹션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-134">Returns a subsection of the recognized audio, as defined by <paramref name="audioPosition" /> and <paramref name="duration" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6ae09-135">다음 예제에서는 이름 입력에 대 한 음성 인식 문법에 대 한 처리기를 추가 <xref:System.Speech.Recognition.Grammar.SpeechRecognized> 이벤트 문법 in process 음성 인식기로 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-135">The following example creates a speech recognition grammar for name input, adds a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event, and loads the grammar into an in-process speech recognizer.</span></span> <span data-ttu-id="6ae09-136">그런 다음 오디오 파일에 대 한 입력의 이름 부분에 대 한 오디오 정보를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-136">Then it writes the audio information for the name portion of the input to an audio file.</span></span> <span data-ttu-id="6ae09-137">오디오 파일을 입력으로 사용 되는 <xref:System.Speech.Synthesis.SpeechSynthesizer> 개체 녹음 된 오디오를 포함 하는 문구를 말합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-137">The audio file is used as input to a <xref:System.Speech.Synthesis.SpeechSynthesizer> object, which speaks a phrase that includes the recorded audio.</span></span>  
  
```  
private static void AddNameGrammar(SpeechRecognitionEngine recognizer)  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.Append("My name is");  
  builder.AppendWildcard();  
  
  Grammar nameGrammar = new Grammar(builder);  
  nameGrammar.Name = "Name Grammar";  
  nameGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      NameSpeechRecognized);  
  
  recognizer.LoadGrammar(nameGrammar);  
}  
  
// Handle the SpeechRecognized event of the name grammar.  
private static void NameSpeechRecognized(  
  object sender, SpeechRecognizedEventArgs e)  
{  
  Console.WriteLine("Grammar ({0}) recognized speech: {1}",  
    e.Result.Grammar.Name, e.Result.Text);  
  
  try  
  {  
  
    // The name phrase starts after the first three words.  
    if (e.Result.Words.Count < 4)  
    {  
  
      // Add code to check for an alternate that contains the wildcard.  
      return;  
    }  
  
    RecognizedAudio audio = e.Result.Audio;  
    TimeSpan start = e.Result.Words[3].AudioPosition;  
    TimeSpan duration = audio.Duration - start;  
  
    // Add code to verify and persist the audio.  
    string path = @"C:\temp\nameAudio.wav";  
    using (Stream outputStream = new FileStream(path, FileMode.Create))  
    {  
      RecognizedAudio nameAudio = audio.GetRange(start, duration);  
      nameAudio.WriteToWaveStream(outputStream);  
      outputStream.Close();  
    }  
  
    Thread testThread =  
      new Thread(new ParameterizedThreadStart(TestAudio));  
    testThread.Start(path);  
  }  
  catch (Exception ex)  
  {  
    Console.WriteLine("Exception thrown while processing audio:");  
    Console.WriteLine(ex.ToString());  
  }  
}  
  
// Use the speech synthesizer to play back the .wav file  
// that was created in the SpeechRecognized event handler.  
  
private static void TestAudio(object item)  
{  
  string path = item as string;  
  if (path != null && File.Exists(path))  
  {  
    SpeechSynthesizer synthesizer = new SpeechSynthesizer();  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("Hello");  
    builder.AppendAudio(path);  
    synthesizer.Speak(builder);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="6ae09-138"><paramref name="audioPosition" /> 및 <paramref name="duration" />은 현재 세그먼트의 범위 밖에 오디오 세그먼트를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-138"><paramref name="audioPosition" /> and <paramref name="duration" /> define a segment of audio outside the range of the current segment.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6ae09-139">현재 인식된 오디오에 데이터가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-139">The current recognized audio contains no data.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream(System.IO.Stream)" />
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="StartTime">
      <MemberSignature Language="C#" Value="public DateTime StartTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime StartTime" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedAudio.StartTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime StartTime { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6ae09-140">인식 작업을 시작할 때 시스템 시간을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-140">Gets the system time at the start of the recognition operation.</span></span></summary>
        <value><span data-ttu-id="6ae09-141">시스템에서 인식 작업을 시작하는 시간입니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-141">The system time at the start of the recognition operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ae09-142"><xref:System.Speech.Recognition.RecognizedAudio.StartTime%2A> 속성 대기 시간 및 성능 계산에 유용할 수 있는 인식 작업의 시작 부분에 시스템 시간을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-142">The <xref:System.Speech.Recognition.RecognizedAudio.StartTime%2A> property gets the system time at the start of the recognition operation, which can be useful for latency and performance calculations.</span></span>  
  
 <span data-ttu-id="6ae09-143"><xref:System.Speech.Recognition.RecognizedAudio.AudioPosition%2A> 속성 생성 된 오디오 스트림 입력된 장치에서에서 위치를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-143">The <xref:System.Speech.Recognition.RecognizedAudio.AudioPosition%2A> property gets the location in the input device's generated audio stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ae09-144">다음 예제에서는 핸들의 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> 또는 <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> 이벤트와 연결 된 인식 결과 인식 된 오디오에 대 한 콘솔 정보를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-144">The following example handles the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> or <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> event and outputs to the console information about the recognized audio that is associated with the recognition result.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  
  Console.WriteLine("Grammar({0}): {1}",  
    result.Grammar.Name, result.Text);  
  
  if (e.Result.Audio != null)  
  {  
    RecognizedAudio audio = e.Result.Audio;  
  
    Console.WriteLine("   start time: {0}", audio.StartTime);  
    Console.WriteLine("   encoding format: {0}", audio.Format.EncodingFormat);  
    Console.WriteLine("   position: {0}, duration: {1}",  
      audio.AudioPosition, audio.Duration);  
  }  
  
  // Add event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognizedAudio.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="WriteToAudioStream">
      <MemberSignature Language="C#" Value="public void WriteToAudioStream (System.IO.Stream outputStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToAudioStream(class System.IO.Stream outputStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToAudioStream (outputStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToAudioStream(System::IO::Stream ^ outputStream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="outputStream"><span data-ttu-id="6ae09-145">오디오 데이터를 받을 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-145">The stream that will receive the audio data.</span></span></param>
        <summary><span data-ttu-id="6ae09-146">전체 오디오를 스트림에 원시 데이터로 씁니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-146">Writes the entire audio to a stream as raw data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ae09-147">오디오 데이터에 기록 됩니다 `outputStream` 이진 형식에서입니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-147">Audio data is written to `outputStream` in binary form.</span></span> <span data-ttu-id="6ae09-148">없음 헤더 정보가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-148">No header information is included.</span></span>  
  
 <span data-ttu-id="6ae09-149"><xref:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream%2A> 메서드 웨이브 형식을 사용 하지만 웨이브 헤더를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-149">The <xref:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream%2A> method uses the Wave format, but does not include the Wave header.</span></span> <span data-ttu-id="6ae09-150">사용 하 여 웨이브 헤더를 포함 하려면는 <xref:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="6ae09-150">To include the Wave header, use the <xref:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.GetRange(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="WriteToWaveStream">
      <MemberSignature Language="C#" Value="public void WriteToWaveStream (System.IO.Stream outputStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToWaveStream(class System.IO.Stream outputStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToWaveStream (outputStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToWaveStream(System::IO::Stream ^ outputStream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="outputStream"><span data-ttu-id="6ae09-151">오디오 데이터를 받을 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-151">The stream that will receive the audio data.</span></span></param>
        <summary><span data-ttu-id="6ae09-152">웨이브 형식의 스트림에 오디오를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-152">Writes audio to a stream in Wave format.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6ae09-153">오디오 데이터에 기록 됩니다 `outputStream` 리소스 교환 파일 형식 (RIFF) 헤더에서 웨이브 형식을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-153">Audio data is written to `outputStream` in Wave format, which includes a resource interchange file format (RIFF) header.</span></span>  
  
 <span data-ttu-id="6ae09-154"><xref:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream%2A> 메서드 같은 이진 형식을 사용 하지만 웨이브 헤더를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-154">The <xref:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream%2A> method uses the same binary format, but does not include the Wave header.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6ae09-155">다음 예제에서는 이름 입력에 대 한 음성 인식 문법에 대 한 처리기를 추가 <xref:System.Speech.Recognition.Grammar.SpeechRecognized> 이벤트 문법 in process 음성 인식기로 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-155">The following example creates a speech recognition grammar for name input, adds a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event, and loads the grammar into an in-process speech recognizer.</span></span> <span data-ttu-id="6ae09-156">그런 다음 오디오 파일에 대 한 입력의 이름 부분에 대 한 오디오 정보를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-156">Then it writes the audio information for the name portion of the input to an audio file.</span></span> <span data-ttu-id="6ae09-157">오디오 파일을 입력으로 사용 되는 <xref:System.Speech.Synthesis.SpeechSynthesizer> 개체 녹음 된 오디오를 포함 하는 문구를 말합니다.</span><span class="sxs-lookup"><span data-stu-id="6ae09-157">The audio file is used as input to a <xref:System.Speech.Synthesis.SpeechSynthesizer> object, which speaks a phrase that includes the recorded audio.</span></span>  
  
```  
private static void AddNameGrammar(SpeechRecognitionEngine recognizer)  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.Append("My name is");  
  builder.AppendWildcard();  
  
  Grammar nameGrammar = new Grammar(builder);  
  nameGrammar.Name = "Name Grammar";  
  nameGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      NameSpeechRecognized);  
  
  recognizer.LoadGrammar(nameGrammar);  
}  
  
// Handle the SpeechRecognized event of the name grammar.  
private static void NameSpeechRecognized(  
  object sender, SpeechRecognizedEventArgs e)  
{  
  Console.WriteLine("Grammar ({0}) recognized speech: {1}",  
    e.Result.Grammar.Name, e.Result.Text);  
  
  try  
  {  
    // The name phrase starts after the first three words.  
    if (e.Result.Words.Count < 4)  
    {  
  
      // Add code to check for an alternate that contains the   
wildcard.  
      return;  
    }  
  
    RecognizedAudio audio = e.Result.Audio;  
    TimeSpan start = e.Result.Words[3].AudioPosition;  
    TimeSpan duration = audio.Duration - start;  
  
    // Add code to verify and persist the audio.  
    string path = @"C:\temp\nameAudio.wav";  
    using (Stream outputStream = new FileStream(path, FileMode.Create))  
    {  
      RecognizedAudio nameAudio = audio.GetRange(start, duration);  
      nameAudio.WriteToWaveStream(outputStream);  
      outputStream.Close();  
    }  
  
    Thread testThread =  
      new Thread(new ParameterizedThreadStart(TestAudio));  
    testThread.Start(path);  
  }  
  catch (Exception ex)  
  {  
    Console.WriteLine("Exception thrown while processing audio:");  
    Console.WriteLine(ex.ToString());  
  }  
}  
  
// Use the speech synthesizer to play back the .wav file  
// that was created in the SpeechRecognized event handler.  
  
private static void TestAudio(object item)  
{  
  string path = item as string;  
  if (path != null && File.Exists(path))  
  {  
    SpeechSynthesizer synthesizer = new SpeechSynthesizer();  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("Hello");  
    builder.AppendAudio(path);  
    synthesizer.Speak(builder);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.GetRange(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream(System.IO.Stream)" />
      </Docs>
    </Member>
  </Members>
</Type>