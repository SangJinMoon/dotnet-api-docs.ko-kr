<Type Name="DictationGrammar" FullName="System.Speech.Recognition.DictationGrammar">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="03cbcbf150eedd38688c32681c06070f0170c03d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30526407" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DictationGrammar : System.Speech.Recognition.Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DictationGrammar extends System.Speech.Recognition.Grammar" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.DictationGrammar" />
  <TypeSignature Language="VB.NET" Value="Public Class DictationGrammar&#xA;Inherits Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class DictationGrammar : System::Speech::Recognition::Grammar" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.Grammar</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>자유 텍스트 받아쓰기를 위해 사용하는 스피치 인식 그래머를 표현한다</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 클래스는 응용 프로그램 텍스트에 대 한 음성된 사용자 입력을 처리할 수 있는 미리 정의 된 언어 모델을 제공 합니다. 이 클래스는 기본 및 사용자 지정 둘 다 지원 <xref:System.Speech.Recognition.DictationGrammar> 개체입니다. 선택 받아쓰기 문법에 대 한 정보를 참조 하십시오.는 <xref:System.Speech.Recognition.DictationGrammar.%23ctor%28System.String%29> 생성자입니다.  
  
 기본적으로는 <xref:System.Speech.Recognition.DictationGrammar> 언어 모델에서 사용 가능한 컨텍스트. 특정 단어의 사용 하거나 순서를 식별 하 여 오디오 입력 해석 단어 만들지 않습니다. 받아쓰기 문법에 컨텍스트를 추가 하려면 사용 된 <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> 메서드.  
  
> [!NOTE]
>  <xref:System.Speech.Recognition.DictationGrammar> 개체는 지원 하지는 <xref:System.Speech.Recognition.Grammar.Priority%2A> 속성입니다. <xref:System.Speech.Recognition.DictationGrammar> throw 한 <xref:System.NotSupportedException> 경우 <xref:System.Speech.Recognition.Grammar.Priority%2A> 설정 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 세 받아쓰기 문법을 만들고, 새에 추가 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 개체를 새 개체를 반환 합니다. 첫 번째 문법 기본 받아쓰기 문법이입니다. 두 번째 문법 맞춤법 받아쓰기 문법이입니다. 세 번째 문법 컨텍스트 구를 포함 하는 기본 받아쓰기 문법이입니다. <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> 메서드에 로드 된 후 상황에 맞는 구 받아쓰기 문법을 연결할 때 사용 되는 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 개체입니다.  
  
```csharp  
  
private SpeechRecognitionEngine LoadDictationGrammars()  
{  
  
  // Create a default dictation grammar.  
  DictationGrammar defaultDictationGrammar = new DictationGrammar();  
  defaultDictationGrammar.Name = "default dictation";  
  defaultDictationGrammar.Enabled = true;  
  
  // Create the spelling dictation grammar.  
  DictationGrammar spellingDictationGrammar =  
    new DictationGrammar("grammar:dictation#spelling");  
  spellingDictationGrammar.Name = "spelling dictation";  
  spellingDictationGrammar.Enabled = true;  
  
  // Create the question dictation grammar.  
  DictationGrammar customDictationGrammar =  
    new DictationGrammar("grammar:dictation");  
  customDictationGrammar.Name = "question dictation";  
  customDictationGrammar.Enabled = true;  
  
  // Create a SpeechRecognitionEngine object and add the grammars to it.  
  SpeechRecognitionEngine recoEngine = new SpeechRecognitionEngine();  
  recoEngine.LoadGrammar(defaultDictationGrammar);  
  recoEngine.LoadGrammar(spellingDictationGrammar);  
  recoEngine.LoadGrammar(customDictationGrammar);  
  
  // Add a context to customDictationGrammar.  
  customDictationGrammar.SetDictationContext("How do you", null);  
  
  return recoEngine;  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Speech.Recognition.DictationGrammar" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DictationGrammar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DictationGrammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Windows 데스크톱 음성 기술을 통해 제공되는 기본 받아쓰기 문법에 대한 <see cref="T:System.Speech.Recognition.DictationGrammar" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 받아쓰기 문법 문장 부호를 포함 하 여 표준 받아쓰기 사례를 에뮬레이션 합니다. 단어의 맞춤법을 지원 하지는 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DictationGrammar (string topic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string topic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (topic As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DictationGrammar(System::String ^ topic);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="topic" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topic">받아쓰기 문법인 <c>grammar:dictation</c> 또는 <c>grammar:dictation#spelling</c>을 지정하는 XML 규격 URI(Universal Resource Identifier)입니다.</param>
        <summary>지정된 받아쓰기 문법을 사용하여 <see cref="T:System.Speech.Recognition.DictationGrammar" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 음성 플랫폼 특별 한 URI 구문을 사용 하 여 사용자 지정 받아쓰기 문법을 정의 합니다. 값 `grammar:dictation` 기본 받아쓰기 문법을 나타냅니다. 값 `grammar:dictation#spelling` 맞춤법 받아쓰기 문법을 나타냅니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDictationContext">
      <MemberSignature Language="C#" Value="public void SetDictationContext (string precedingText, string subsequentText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDictationContext(string precedingText, string subsequentText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.SetDictationContext(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDictationContext (precedingText As String, subsequentText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDictationContext(System::String ^ precedingText, System::String ^ subsequentText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precedingText" Type="System.String" />
        <Parameter Name="subsequentText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="precedingText">받아쓰기 컨텍스트의 시작을 나타내는 텍스트입니다.</param>
        <param name="subsequentText">받아쓰기 컨텍스트의 끝을 나타내는 텍스트입니다.</param>
        <summary>
          <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> 또는 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 개체에 의해 로드된 받아쓰기 문법에 컨텍스트를 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 받아쓰기 문법 미치지 않으며 특정 단어의 사용 또는 단어 순서를 식별 하 여 오디오 입력을 해석 합니다. 인식 엔진에 사용 하 여 컨텍스트를 받아쓰기 문법에 추가 되는 `precedingText` 및 `subsequentText` 음성 받아쓰기로 해석 하는 시기를 식별 하 합니다.  
  
> [!NOTE]
>  받아쓰기 문법을 로드 해야는 <xref:System.Speech.Recognition.SpeechRecognizer> 또는 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 개체를 사용 하려면 먼저 <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> 컨텍스트를 추가 하려면.  
  
 다음 표에서 인식 엔진 받아쓰기 문법을 사용 하는 시기를 결정 하는 두 개의 매개 변수를 사용 하는 방법을 설명 합니다.  
  
|`precedingText`|`subsequentText`|설명|  
|---------------------|----------------------|-----------------|  
|`null` 아님|`null` 아님|인식 엔진 용어를 사용 하 여 가능한 후보 구 묶습니다.|  
|`null`|`null` 아님|인식 엔진 사용 하 여는 `subsequentText` 받아쓰기 완료 합니다.|  
|`null` 아님|`null`|인식 엔진 사용 하 여는 `precedingText` 받아쓰기를 시작 합니다.|  
|`null`|`null`|인식 엔진 받아쓰기 문법을 사용 하는 경우 컨텍스트를 사용 하지 않습니다.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
  </Members>
</Type>