<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f52412e8d631d8da24af54bf1fab76a8bf4d7163" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52379780" /></Metadata><TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <TypeSignature Language="F#" Value="type RecognizedWordUnit = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="36cc6-101">인식된 음성을 원자 단위로 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-101">Provides the atomic unit of recognized speech.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36cc6-102">인식 엔진에 의해 반환 된 모든 결과의 생성 된 <xref:System.Speech.Recognition.RecognizedWordUnit> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-102">All results returned by a recognition engine are constructed of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span>  
  
 <span data-ttu-id="36cc6-103">배열을 <xref:System.Speech.Recognition.RecognizedWordUnit> 개체를 통해 모든 인식 작업을 위해 액세스할 수 합니다 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 속성에는 <xref:System.Speech.Recognition.RecognizedPhrase> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-103">An array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects is accessible for any recognition operation through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
 <span data-ttu-id="36cc6-104">인식의 확신도의 측정값을 제공 하는 것 외에도 (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>)는 <xref:System.Speech.Recognition.RecognizedWordUnit> 인스턴스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-104">In addition to providing a measure of recognition certainty (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) a <xref:System.Speech.Recognition.RecognizedWordUnit> instance provides:</span></span>  
  
-   <span data-ttu-id="36cc6-105">인식된 된 단어에 대 한 정규화 된 및 정확한 (또는 어휘) 텍스트 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-105">Normalized and exact (or lexical) text representations for a recognized word.</span></span> <span data-ttu-id="36cc6-106">자세한 내용은 <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> 및 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="36cc6-106">For more information, see <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</span></span>  
  
-   <span data-ttu-id="36cc6-107">International Phonetic Alphabet (IPA) 또는 유니버설 전화 설정 (UPS)와 같은 지원 되는 음성 알파벳에서 문자를 사용 하 여 발음 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-107">Pronunciation information using characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span></span> <span data-ttu-id="36cc6-108">자세한 내용은 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="36cc6-108">For more information see <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</span></span>  
  
-   <span data-ttu-id="36cc6-109">인쇄에 대 한 서식 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-109">Formatting for printing.</span></span> <span data-ttu-id="36cc6-110">자세한 내용은 참조는 <xref:System.Speech.Recognition.DisplayAttributes> 클래스 및 해당 <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-110">For more information see the <xref:System.Speech.Recognition.DisplayAttributes> class and its <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36cc6-111">다음 예제에서는 유틸리티 루틴을 보여 줍니다 (`stringFromWordArray`) 문자열을 생성 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-111">The following example shows a utility routine (`stringFromWordArray`) that generates strings.</span></span> <span data-ttu-id="36cc6-112">어휘 출력을 포함 하는 문자열 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), 텍스트 정규화 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), 또는 음성 국제 윗주 알파벳 문자 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="36cc6-112">The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="36cc6-113">문자열 서식을 사용 하 <xref:System.Speech.Recognition.DisplayAttributes> 에서 가져온 개체는 <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> 속성을 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 의 <xref:System.Speech.Recognition.RecognizedWordUnit> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-113">Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="36cc6-114"><xref:System.Speech.Recognition.RecognizedWordUnit> 개체에서 가져온 합니다 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 속성에는 <xref:System.Speech.Recognition.RecognizedPhrase> 개체.</span><span class="sxs-lookup"><span data-stu-id="36cc6-114">The <xref:System.Speech.Recognition.RecognizedWordUnit> objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.RecognizedWordUnit : string * single * string * string * System.Speech.Recognition.DisplayAttributes * TimeSpan * TimeSpan -&gt; System.Speech.Recognition.RecognizedWordUnit" Usage="new System.Speech.Recognition.RecognizedWordUnit (text, confidence, pronunciation, lexicalForm, displayAttributes, audioPosition, audioDuration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="36cc6-115">인식된 단어의 정규화된 텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-115">The normalized text for a recognized word.</span></span>  
  
<span data-ttu-id="36cc6-116">이 값은 <see langword="null" />, "" 또는 <see cref="F:System.String.Empty" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-116">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="confidence"><span data-ttu-id="36cc6-117">단어 인식의 확신도를 나타내는 0.0에서 1.0까지의 <see langword="float" /> 값</span><span class="sxs-lookup"><span data-stu-id="36cc6-117">A <see langword="float" /> value from 0.0 through 1.0 indicating the certainty of word recognition.</span></span></param>
        <param name="pronunciation"><span data-ttu-id="36cc6-118">인식된 단어의 발음 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-118">The phonetic spelling of a recognized word.</span></span>  
  
<span data-ttu-id="36cc6-119">이 값은 <see langword="null" />, "" 또는 <see cref="F:System.String.Empty" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-119">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="lexicalForm"><span data-ttu-id="36cc6-120">인식된 단어의 정규화되지 않은 텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-120">The unnormalized text for a recognized word.</span></span>  
  
<span data-ttu-id="36cc6-121">이 인수는 필수이며 <see langword="null" />, "" 또는 <see cref="F:System.String.Empty" />일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-121">This argument is required and may not be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="displayAttributes"><span data-ttu-id="36cc6-122">인식된 단어를 표시하기 위한 공백의 사용을 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-122">Defines the use of white space to display recognized words.</span></span></param>
        <param name="audioPosition"><span data-ttu-id="36cc6-123">오디오 입력 스트림에서 인식된 단어의 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-123">The location of the recognized word in the audio input stream.</span></span>  
  
<span data-ttu-id="36cc6-124">이 값은 <see cref="F:System.TimeSpan.Zero" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-124">This value can be <see cref="F:System.TimeSpan.Zero" />.</span></span></param>
        <param name="audioDuration"><span data-ttu-id="36cc6-125">인식된 단어에 해당하는 오디오 입력 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-125">The length of the audio input corresponding to the recognized word.</span></span>  
  
<span data-ttu-id="36cc6-126">이 값은 <see cref="F:System.TimeSpan.Zero" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-126">This value can be <see cref="F:System.TimeSpan.Zero" />.</span></span></param>
        <summary><span data-ttu-id="36cc6-127"><see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-127">Initializes a new instance of the <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36cc6-128">경우 `text` 또는 `pronunciation` 됩니다 `null`, "", 또는 <xref:System.String.Empty> 와 <xref:System.Speech.Recognition.RecognizedWordUnit> 는 인식 엔진은 출력에서 적절 한 값을 생성 하는 데 인식 작업에서 <xref:System.Speech.Recognition.RecognizedWordUnit> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="36cc6-128">If `text` or `pronunciation` are `null`, "", or <xref:System.String.Empty> and the <xref:System.Speech.Recognition.RecognizedWordUnit> is used in a recognition operation, the recognition engine will generate appropriate values in any output <xref:System.Speech.Recognition.RecognizedWordUnit> instance.</span></span>  
  
 <span data-ttu-id="36cc6-129">직접 생성 <xref:System.Speech.Recognition.RecognizedWordUnit> 인스턴스 일반적으로 사용 하 여 인식 작업을 에뮬레이션 하는 경우에 사용 되는 합니다 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> 또는 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> 의 메서드를 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 클래스 및 <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> 또는 <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> 메서드를 <xref:System.Speech.Recognition.SpeechRecognizer> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-129">Direct construction of <xref:System.Speech.Recognition.RecognizedWordUnit> instances is typically used only when emulating recognition operations using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognizer> class.</span></span>  
  
 <span data-ttu-id="36cc6-130">실제 애플리케이션에 대 한 직접를 생성 하지 마십시오 <xref:System.Speech.Recognition.RecognizedWordUnit>를 통해 가져오는 대신를 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 속성에는 <xref:System.Speech.Recognition.RecognizedPhrase> 개체.</span><span class="sxs-lookup"><span data-stu-id="36cc6-130">For actual applications, do not directly construct <xref:System.Speech.Recognition.RecognizedWordUnit>, rather obtain it through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36cc6-131">다음 예제는 다소 인위적인된 에뮬레이션, 여기서 새 단어 입력에서 생성 된 에뮬레이터에 전달 되 고 확인 한 다음 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-131">The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.</span></span>  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363"><span data-ttu-id="36cc6-132">International Phonetic Alphabet</span><span class="sxs-lookup"><span data-stu-id="36cc6-132">International Phonetic Alphabet</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36cc6-133">인식된 단어가 지정된 입력과 일치할 가능성을 나타내는 값(인식자가 할당)을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-133">Gets a value, assigned by the recognizer, that represents the likelihood that a recognized word matches a given input.</span></span></summary>
        <value><span data-ttu-id="36cc6-134">단어에 대한 올바른 인식의 확신도의 상대 측정</span><span class="sxs-lookup"><span data-stu-id="36cc6-134">A relative measure of the certainty of correct recognition for a word.</span></span> <span data-ttu-id="36cc6-135">값 범위는 각각 낮음에서 높음 신뢰도가 0.0에서 1.0 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-135">The value is from 0.0 to 1.0, for low to high confidence, respectively.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36cc6-136">신뢰성 점수는 단어를 제대로 인식 않았습니다 절대 가능성을 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-136">Confidence scores do not indicate the absolute likelihood that a word was recognized correctly.</span></span> <span data-ttu-id="36cc6-137">대신 신뢰성 점수는 지정된 된 입력에 대 한 여러 인식 대체 항목의 상대 정확도 비교 하는 메커니즘을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-137">Instead, confidence scores provide a mechanism for comparing the relative accuracy of multiple recognition alternates for a given input.</span></span> <span data-ttu-id="36cc6-138">이로써 가장 정확 하 게 인식 결과 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-138">This facilitates returning the most accurate recognition result.</span></span> <span data-ttu-id="36cc6-139">예를 들어, 인식된 된 단어 0.8의 신뢰성 점수는에 있는 경우이 아닙니다 단어에는 80 %0이 될 가능성 입력에 대해 정확 하 게 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-139">For example, if a recognized word has a confidence score of 0.8, this does not mean that the word has an 80% chance of being the correct match for the input.</span></span>  <span data-ttu-id="36cc6-140">단어 안심 하는 다른 결과 보다 입력에 대 한 올바른 일치 점수 0.8 보다 작은 일 가능성이 임을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-140">It means that the word is more likely to be the correct match for the input than other results that have confidence scores less than 0.8.</span></span>  
  
 <span data-ttu-id="36cc6-141">신뢰성 점수는 자체적으로 대체 결과 동일한 인식 작업에서 또는 동일한 입력의 이전 개 인식 비교를 경우가 아니라면 의미가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-141">A confidence score on its own is not meaningful unless you have alternative results to compare against, either from the same recognition operation or from previous recognitions of the same input.</span></span>  
  
 <span data-ttu-id="36cc6-142">반환한 값 <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> 각 인식 엔진은 상대 및 고유 합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-142">The values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> are relative and unique to each recognition engine.</span></span> <span data-ttu-id="36cc6-143">두 개의 다른 인식 엔진 사이의 신뢰도 값 비교 하는 방법의 정의가 없는 하는 방법을 <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> 개별 <xref:System.Speech.Recognition.RecognizedWordUnit> 개체를 정의 합니다 <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> 의 <xref:System.Speech.Recognition.RecognizedPhrase>.</span><span class="sxs-lookup"><span data-stu-id="36cc6-143">There is no definition of how confidence values between two different recognition engines compare, nor how the <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> of individual <xref:System.Speech.Recognition.RecognizedWordUnit> objects define the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> of a <xref:System.Speech.Recognition.RecognizedPhrase>.</span></span>  
  
 <span data-ttu-id="36cc6-144">음성 인식 엔진 백그라운드 간섭, inarticulate 음성 또는 예기치 않은 단어나 단어 시퀀스를 포함 하 여 여러 가지 이유로 음성된 입력에 신뢰성 점수는 낮습니다를 할당할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-144">A speech recognition engine may assign a low confidence score to spoken input for various reasons, including background interference, inarticulate speech, or unanticipated words or word sequences.</span></span> <span data-ttu-id="36cc6-145">애플리케이션을 사용 하는 경우는 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 인스턴스는 음성 입력을 수락 또는 거부할 중 하나를 사용 하 여 신뢰 수준을 수정할 수 있습니다는 <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="36cc6-145">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="36cc6-146">관리 하는 공유 인식기에 대 한 신뢰도 임계값 <xref:System.Speech.Recognition.SpeechRecognizer>, 사용자 프로필과 연결 되며 Windows 레지스트리에 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-146">Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry.</span></span> <span data-ttu-id="36cc6-147">애플리케이션 공유 된 인식기의 속성에 대 한 레지스트리 변경을 작성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-147">Applications should not write changes to the registry for the properties of the shared recognizer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayAttributes : System.Speech.Recognition.DisplayAttributes" Usage="System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36cc6-148">현재 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 인스턴스로부터 텍스트 출력을 만드는 데 사용된 서식 정보를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-148">Gets formatting information used to create the text output from the current <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> instance.</span></span></summary>
        <value><span data-ttu-id="36cc6-149"><see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 개체의 컨텍스트의 표시할 공백의 형식을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-149">Specifies the use of white space to display of the contents of a <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36cc6-150">합니다 <xref:System.Speech.Recognition.DisplayAttributes> 에서 반환 된 개체는 <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> 있으면 속성에 지정 된 단어를 사용할 선행 및 후행 공백을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-150">The <xref:System.Speech.Recognition.DisplayAttributes> object returned by the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property specifies the leading and trailing spaces to be used with a given word, if any.</span></span>  
  
 <span data-ttu-id="36cc6-151">이 서식 지정 정보를 사용 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.Speech.Recognition.DisplayAttributes> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-151">For more information about how to use this formatting information, see the <xref:System.Speech.Recognition.DisplayAttributes> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36cc6-152">다음 예제에서는 유틸리티 루틴을 보여 줍니다 (`stringFromWordArray`) 세 가지 방법 중 하나로 서식이 지정 된 문자열을 생성 하는: 어휘 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), 정규화 된 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), 또는 획 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="36cc6-152">The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="36cc6-153">텍스트 출력에서 가져온를 <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> 속성을 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 의 <xref:System.Speech.Recognition.RecognizedWordUnit> 에서 가져온 개체를 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 속성을를 <xref:System.Speech.Recognition.RecognizedPhrase> 개체.</span><span class="sxs-lookup"><span data-stu-id="36cc6-153">The text output is obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LexicalForm : string" Usage="System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36cc6-154">인식된 단어의 정규화되지 않은 텍스트를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-154">Gets the unnormalized text of a recognized word.</span></span></summary>
        <value><span data-ttu-id="36cc6-155">정규화하지 않고 인식된 단어의 텍스트가 포함된<see cref="T:System.String" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-155">Returns a <see cref="T:System.String" /> containing the text of a recognized word, without any normalization.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36cc6-156">대부분의 경우 반환 값 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> 고 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-156">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> are identical.</span></span> <span data-ttu-id="36cc6-157">그러나 인식 엔진은 보다 친숙 한 또는 colloquial의 텍스트 표현을 오디오 입력을 반환할 음성 정규화를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-157">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="36cc6-158">음성 표준화는 특수 구문 또는 기호에에서 음성 express를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-158">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="36cc6-159">예를 들어 정규화 "$1.16" 출력 텍스트에서를 사용 하 여 "달러 및 16 센트" 음성된 단어를 바꿀 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-159">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36cc6-160">다음 예제에서는 세 가지 형식 중 하나에서 텍스트를 생성 하는 유틸리티 루틴: 어휘 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), 정규화 된 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), 음성 및 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="36cc6-160">The following example shows a utility routine that generates text in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="36cc6-161">텍스트 출력에서 가져온를 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 의 <xref:System.Speech.Recognition.RecognizedWordUnit> 에서 가져온 개체는 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 속성에는 <xref:System.Speech.Recognition.RecognizedPhrase> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-161">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36cc6-162">인식된 단어의 발음 기호를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-162">Gets the phonetic spelling of a recognized word.</span></span></summary>
        <value><span data-ttu-id="36cc6-163">IPA(International Phonetic Alphabet), UPS(Universal Phone Set) 등 지원되는 음성 알파벳의 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-163">A string of characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36cc6-164">내용의 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> 음성 인식 엔진의 로드 중 하나를 음성 입력와 일치 하는 데는 발음 나타냅니다 <xref:System.Speech.Recognition.Grammar> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-164">The contents of <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="36cc6-165">발음을 인식 문법을 로드에서 연결 된 어휘 집 문서의 음성 인식 엔진의 내부 어휘 집에서 정의할 수 있습니다 <xref:System.Speech.Recognition.Grammar> 개체나 인식 문법 로드에서 인라인으로 <xref:System.Speech.Recognition.Grammar> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-165">Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object, or inline in a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="36cc6-166">음성 인식 엔진에서 해당 발음 어휘 집 또는 음성 인식 엔진 현재가 액세스할 수 있는 문법에 정의 되어 있지 않은 일반적이 지 않은 단어 발음을 만들 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-166">A speech recognition engine may also create pronunciations for uncommon words whose pronunciations are not defined in a lexicon or grammar to which the speech recognition engine currently has access.</span></span>  
  
 <span data-ttu-id="36cc6-167">Courier New 같은 많은 Windows 기반 유니코드 글꼴 IPA 문자열 표시를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-167">Many Windows-based Unicode fonts, such as Courier New, support the display of IPA strings.</span></span> <span data-ttu-id="36cc6-168">자세한 내용은 [International Phonetic Alphabet](https://go.microsoft.com/fwlink/?LinkId=58363)합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-168">For more information, see [International Phonetic Alphabet](https://go.microsoft.com/fwlink/?LinkId=58363).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36cc6-169">다음 예제에서는 세 가지 가능한 형식 중 하나를 사용 하 여 문자열을 생성 하는 유틸리티 루틴: 어휘 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), 정규화 된 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), 음성 및 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="36cc6-169">The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="36cc6-170">텍스트 출력에서 가져온를 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 의 <xref:System.Speech.Recognition.RecognizedWordUnit> 에서 가져온 개체는 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 속성에는 <xref:System.Speech.Recognition.RecognizedPhrase> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-170">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363"><span data-ttu-id="36cc6-171">International Phonetic Alphabet</span><span class="sxs-lookup"><span data-stu-id="36cc6-171">International Phonetic Alphabet</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36cc6-172">인식된 단어의 정규화된 텍스트를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-172">Gets the normalized text for a recognized word.</span></span></summary>
        <value><span data-ttu-id="36cc6-173">주어진 입력 단어에 대한 표준화 된 텍스트 출력을 포함하고 있는 문자열</span><span class="sxs-lookup"><span data-stu-id="36cc6-173">A string that contains the normalized text output for a given input word.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36cc6-174">대부분의 경우 반환 값 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> 고 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> 동일 하 게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-174">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> will be identical.</span></span> <span data-ttu-id="36cc6-175">그러나 인식 엔진은 보다 친숙 한 또는 colloquial의 텍스트 표현을 오디오 입력을 반환할 음성 정규화를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-175">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="36cc6-176">음성 표준화는 특수 구문 또는 기호에에서 음성 express를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-176">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="36cc6-177">예를 들어 정규화 "$1.16" 출력 텍스트에서를 사용 하 여 "달러 및 16 센트" 음성된 단어를 바꿀 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-177">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36cc6-178">다음 예제에서는 세 가지 형식 중 하나에서 문자열을 생성 하는 유틸리티 루틴: 어휘 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), 정규화 된 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), 음성 및 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="36cc6-178">The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="36cc6-179">텍스트 출력에서 가져온를 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 의 <xref:System.Speech.Recognition.RecognizedWordUnit> 에서 가져온 개체는 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 속성에는 <xref:System.Speech.Recognition.RecognizedPhrase> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="36cc6-179">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>