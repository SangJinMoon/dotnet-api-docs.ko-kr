<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7f2649b3a25f6265c8e90a862299324fd8788ca3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36608531" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <TypeSignature Language="F#" Value="type RecognizedWordUnit = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>인식된 음성을 원자 단위로 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인식 엔진에 의해 반환 된 모든 결과 구성 <xref:System.Speech.Recognition.RecognizedWordUnit> 개체입니다.  
  
 배열을 <xref:System.Speech.Recognition.RecognizedWordUnit> 개체는 인식 작업을 통해 액세스할 수는 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 속성에는 <xref:System.Speech.Recognition.RecognizedPhrase> 개체입니다.  
  
 인식 확신도 측정을 제공 하는 것 외에도 (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>)는 <xref:System.Speech.Recognition.RecognizedWordUnit> 인스턴스를 제공 합니다.  
  
-   인식 되는 단어에 대 한 정규화 된 및 정확한 (또는 어휘) 텍스트 표현입니다. 자세한 내용은 <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> 및 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>을 참조하십시오.  
  
-   International Phonetic Alphabet (IPA) 또는 유니버설 전화 설정 (UPS) 등 지원 되는 phonetic 알파벳에서 문자를 사용 하 여 발음 정보입니다. 자세한 내용은 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>을 참조하세요.  
  
-   인쇄를 위해 서식 지정 합니다. 자세한 내용은 참조는 <xref:System.Speech.Recognition.DisplayAttributes> 클래스 및 해당 <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 유틸리티 루틴 (`stringFromWordArray`) 하는 문자열을 생성 합니다. 어휘는 출력을 포함 하는 문자열 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), 텍스트 정규화 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), 또는 International Phonetic 알파벳에서 발음 문자 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). 문자열을 사용 하 여 지정 <xref:System.Speech.Recognition.DisplayAttributes> 에서 가져온 개체는 <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> 속성에서는 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 의 <xref:System.Speech.Recognition.RecognizedWordUnit> 개체입니다. <xref:System.Speech.Recognition.RecognizedWordUnit> 에서 가져온 개체는 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 속성에는 <xref:System.Speech.Recognition.RecognizedPhrase> 개체입니다.  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.RecognizedWordUnit : string * single * string * string * System.Speech.Recognition.DisplayAttributes * TimeSpan * TimeSpan -&gt; System.Speech.Recognition.RecognizedWordUnit" Usage="new System.Speech.Recognition.RecognizedWordUnit (text, confidence, pronunciation, lexicalForm, displayAttributes, audioPosition, audioDuration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text">인식된 단어의 정규화된 텍스트입니다.  이 값은 <see langword="null" />, "" 또는 <see cref="F:System.String.Empty" />일 수 있습니다.</param>
        <param name="confidence">단어 인식의 확신도를 나타내는 0.0에서 1.0까지의 <see langword="float" /> 값</param>
        <param name="pronunciation">인식된 단어의 발음 기호입니다.  이 값은 <see langword="null" />, "" 또는 <see cref="F:System.String.Empty" />일 수 있습니다.</param>
        <param name="lexicalForm">인식된 단어의 정규화되지 않은 텍스트입니다.  이 인수는 필수이며 <see langword="null" />, "" 또는 <see cref="F:System.String.Empty" />일 수 없습니다.</param>
        <param name="displayAttributes">인식된 단어를 표시하기 위한 공백의 사용을 정의합니다.</param>
        <param name="audioPosition">오디오 입력 스트림에서 인식된 단어의 위치입니다.  이 값은 <see cref="F:System.TimeSpan.Zero" />일 수 있습니다.</param>
        <param name="audioDuration">인식된 단어에 해당하는 오디오 입력 길이입니다.  이 값은 <see cref="F:System.TimeSpan.Zero" />일 수 있습니다.</param>
        <summary>
          <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `text` 또는 `pronunciation` 는 `null`, "", 또는 <xref:System.String.Empty> 및 <xref:System.Speech.Recognition.RecognizedWordUnit> 사용 인식 작업에 인식 엔진에서 어떠한 출력도 적절 한 값을 생성 하기 때문 <xref:System.Speech.Recognition.RecognizedWordUnit> 인스턴스.  
  
 직접 생성 <xref:System.Speech.Recognition.RecognizedWordUnit> 인스턴스 일반적으로 사용 하 여 인식 작업을 에뮬레이션 하는 경우에 사용 되는 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> 또는 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> 의 메서드는 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 클래스 및 <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> 또는 <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> 는 의메서드<xref:System.Speech.Recognition.SpeechRecognizer> 클래스입니다.  
  
 실제 응용 프로그램에 대 한 직접를 생성 하지 마십시오 <xref:System.Speech.Recognition.RecognizedWordUnit>, 아니라 전달할지를 가져올는 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 속성에는 <xref:System.Speech.Recognition.RecognizedPhrase> 개체입니다.  
  
   
  
## Examples  
 다음 예제에서는 새 단어 입력에서 생성 하 고는 에뮬레이터에 전달 된 및의 확인 된 에뮬레이션의 다소 인위적인된 테스트입니다.  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인식된 단어가 지정된 입력과 일치할 가능성을 나타내는 값(인식자가 할당)을 가져옵니다.</summary>
        <value>단어에 대한 올바른 인식의 확신도의 상대 측정 값 범위는 각각 낮음에서 높음 신뢰도가 0.0에서 1.0 사이입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 신뢰성 점수는 단어 제대로 인식 된 절대 가능성을 나타내지 않습니다. 대신, 신뢰성 점수는 지정된 된 입력에 대 한 여러 인식 대체 항목의 상대 정확도 비교 하기 위한 메커니즘을 제공 합니다. 이 가장 정확한 인식 결과 반환할 수 있습니다. 예를 들어 인식 되는 단어 0.8 신뢰성 점수는 있으면 아닙니다 단어에는 80 %0이 될 가능성은 입력에 대해 정확 하 게 일치 합니다.  단어 확신 하는 다른 결과 보다 입력에 대 한 정확한 일치 점수 0.8 보다 작은 일 가능성이 높다는 임을 의미 합니다.  
  
 대체 결과 또는 동일한 인식 작업에서 동일한 입력의 이전 인증 내역에서 비교할 수 없는 경우에 자체적으로 신뢰성 점수는 의미가 없습니다.  
  
 반환 값 <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> 각 인식 엔진은 상대 및 고유 합니다. 두 개의 서로 다른 인식 엔진 간에 신뢰도 값의 비교 방법 정의가 없음을 방법을 또는 <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> 개별 <xref:System.Speech.Recognition.RecognizedWordUnit> 개체 정의 <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> 의 <xref:System.Speech.Recognition.RecognizedPhrase>합니다.  
  
 음성 인식 엔진은 신뢰성 점수는 낮습니다 배경 간섭, inarticulate 음성 또는 예기치 않은 단어 또는 word 시퀀스를 포함 하 여 여러 가지 이유로 음성된 입력에 할당할 수 있습니다. 응용 프로그램을 사용 하는 경우는 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 인스턴스, 입력은 음성 승인 또는 거부 중 하나가 지정 된 신뢰 수준을 수정할 수 있습니다는 <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> 메서드. 관리 하는 공유 인식기에서에 대 한 신뢰도 임계값 <xref:System.Speech.Recognition.SpeechRecognizer>, 사용자 프로필에 연결 된 및 Windows 레지스트리에 저장 합니다. 응용 프로그램에 공유 인식기에서의 속성에 대 한 레지스트리 변경 내용을 작성 해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayAttributes : System.Speech.Recognition.DisplayAttributes" Usage="System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 인스턴스로부터 텍스트 출력을 만드는 데 사용된 서식 정보를 가져옵니다.</summary>
        <value>
          <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 개체의 컨텍스트의 표시할 공백의 형식을 지정합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.DisplayAttributes> 에서 반환 된 개체는 <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> 있는 경우 속성에 지정 된 단어를 사용할 선행 및 후행 공백을 지정 합니다.  
  
 이 서식 지정 정보를 사용 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.Speech.Recognition.DisplayAttributes> 열거형입니다.  
  
   
  
## Examples  
 다음 예제에서는 유틸리티 루틴 (`stringFromWordArray`) 세 가지 방법 중 하나로 서식이 지정 된 문자열을 생성 하는: 어휘 적으로 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), 정규화 된 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), 발음 또는 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). 텍스트 출력에서 가져온는 <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> 속성에는 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 의 <xref:System.Speech.Recognition.RecognizedWordUnit> 에서 가져온 개체는 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 속성에는 <xref:System.Speech.Recognition.RecognizedPhrase> 개체입니다.  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LexicalForm : string" Usage="System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인식된 단어의 정규화되지 않은 텍스트를 가져옵니다.</summary>
        <value>정규화하지 않고 인식된 단어의 텍스트가 포함된<see cref="T:System.String" />을 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에 반환 하는 값 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> 및 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> 는 동일 합니다. 그러나 인식 엔진 보다 알기 쉬운 또는 colloquial의 텍스트 표현을 오디오 입력을 반환할 음성 정규화에 사용할 수 있습니다.  
  
 음성 정규화는 특수 구문 또는 음성 쓰기의 표현 하는 기호를 사용 합니다. 예를 들어 정규화 "$1.16" 출력 텍스트의으로 음성을 "달러 및 16 개 센트"를 바꿀 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 세 가지 형식 중 하나에 텍스트를 생성 하는 유틸리티 루틴: 어휘 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), 정규화 된 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), 음성 및 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). 텍스트 출력에서 가져온는 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 의 <xref:System.Speech.Recognition.RecognizedWordUnit> 에서 가져온 개체는 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 속성에는 <xref:System.Speech.Recognition.RecognizedPhrase> 개체입니다.  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인식된 단어의 발음 기호를 가져옵니다.</summary>
        <value>IPA(International Phonetic Alphabet), UPS(Universal Phone Set) 등 지원되는 음성 알파벳의 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 내용을 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> 음성 인식 엔진의 로드 중 하나에 대 한 음성 입력에 일치 하는 데 사용 되는 발음 나타낼 <xref:System.Speech.Recognition.Grammar> 개체입니다. 발음 음성 인식 엔진의 내부 어휘 집, 로드에 인식 문법에서 연결 된 어휘 집 문서에 정의 되어 있을 수 <xref:System.Speech.Recognition.Grammar> 개체 또는 로드에 인식 문법에 인라인 <xref:System.Speech.Recognition.Grammar> 개체입니다. 음성 인식 엔진 인 발음 어휘 집 또는 음성 인식 엔진 현재에 액세스 문법에 정의 되어 있지 않은 경우를 흔히 볼 단어에 대 한 발음을 만들 수도 있습니다.  
  
 한 분수에 많은 Windows 기반 유니코드 글꼴 IPA 문자열 표시를 지원 합니다. 자세한 내용은 참조 [International Phonetic 알파벳](http://go.microsoft.com/fwlink/?LinkId=58363)합니다.  
  
   
  
## Examples  
 다음 예제에서는 세 가지 가능한 형식 중 하나가 지정 된 문자열을 생성 하는 유틸리티 루틴: 어휘 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), 정규화 된 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), 음성 및 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). 텍스트 출력에서 가져온는 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 의 <xref:System.Speech.Recognition.RecognizedWordUnit> 에서 가져온 개체는 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 속성에는 <xref:System.Speech.Recognition.RecognizedPhrase> 개체입니다.  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인식된 단어의 정규화된 텍스트를 가져옵니다.</summary>
        <value>주어진 입력 단어에 대한 표준화 된 텍스트 출력을 포함하고 있는 문자열</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에 반환 하는 값 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> 및 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> 동일 하 게 됩니다. 그러나 인식 엔진 보다 알기 쉬운 또는 colloquial의 텍스트 표현을 오디오 입력을 반환할 음성 정규화에 사용할 수 있습니다.  
  
 음성 정규화는 특수 구문 또는 음성 쓰기의 표현 하는 기호를 사용 합니다. 예를 들어 정규화 "$1.16" 출력 텍스트의으로 음성을 "달러 및 16 개 센트"를 바꿀 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 세 가지 형식 중 하나에 문자열을 생성 하는 유틸리티 루틴: 어휘 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), 정규화 된 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), 음성 및 (사용 하 여 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). 텍스트 출력에서 가져온는 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 의 <xref:System.Speech.Recognition.RecognizedWordUnit> 에서 가져온 개체는 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 속성에는 <xref:System.Speech.Recognition.RecognizedPhrase> 개체입니다.  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>