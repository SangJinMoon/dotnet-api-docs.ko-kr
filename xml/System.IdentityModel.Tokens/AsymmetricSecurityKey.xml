<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsymmetricSecurityKey.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b7234e0cdc59f92f5e8016b5aaf30b324be74393b0b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34e0cdc59f92f5e8016b5aaf30b324be74393b0b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.AsymmetricSecurityKey">
          <source>Base class for asymmetric keys.</source>
          <target state="translated">비대칭 키에 대한 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.AsymmetricSecurityKey">
          <source>You cannot use this class when Windows Communication Foundation is running under partial trust.</source>
          <target state="translated">Windows Communication Foundation 부분 신뢰 환경에서 실행 중인 경우에이 클래스를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
          <source>The asymmetric algorithm to create.</source>
          <target state="translated">만들 비대칭 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> when a private key is required to create the algorithm; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">알고리즘을 만드는 데 개인 키가 필요하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
          <source>When overridden in a derived class, gets the specified asymmetric cryptographic algorithm.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정된 비대칭 암호화 알고리즘을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /&gt;</ph> that represents the specified asymmetric cryptographic algorithm.</source>
          <target state="translated">지정된 비대칭 암호화 알고리즘을 나타내는 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
          <source>Typically, <ph id="ph1">&lt;see langword="true" /&gt;</ph> is passed into the <ph id="ph2">&lt;paramref name="privateKey" /&gt;</ph> parameter, as a private key is typically required for decryption.</source>
          <target state="translated">일반적으로 개인 키가 해독에 필요하므로 <ph id="ph1">&lt;see langword="true" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="privateKey" /&gt;</ph> 매개 변수에 전달됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetAsymmetricAlgorithm(System.String,System.Boolean)">
          <source>Use the static fields of the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.</source>
          <target state="translated">알고리즘을 지정하려면 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> 클래스의 정적 필드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)">
          <source>The hash algorithm.</source>
          <target state="translated">해시 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)">
          <source>When overridden in a derived class, gets a cryptographic algorithm that generates a hash for a digital signature.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 디지털 서명에 대한 해시를 생성하는 암호화 알고리즘을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HashAlgorithm" /&gt;</ph> that generates hashes for digital signatures.</source>
          <target state="translated">디지털 서명에 대한 해시를 생성하는 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HashAlgorithm" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)">
          <source>Use the static fields of the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.</source>
          <target state="translated">알고리즘을 지정하려면 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> 클래스의 정적 필드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)">
          <source>The deformatter algorithm for the digital signature.</source>
          <target state="translated">디지털 서명에 대한 디포맷터 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)">
          <source>When overridden in a derived class, gets the deformatter algorithm for the digital signature.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 디지털 서명에 대한 디포맷터 알고리즘을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /&gt;</ph> that represents the deformatter algorithm for the digital signature.</source>
          <target state="translated">디지털 서명에 대한 디포맷터 알고리즘을 나타내는 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)">
          <source>A signature deformatter is typically used to verify a digital signature.</source>
          <target state="translated">일반적으로 서명 디포맷터는 디지털 서명을 확인하는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)">
          <source>Use the static fields of the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.</source>
          <target state="translated">알고리즘을 지정하려면 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> 클래스의 정적 필드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)">
          <source>The formatter algorithm for the digital signature.</source>
          <target state="translated">디지털 서명에 대한 포맷터 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)">
          <source>When overridden in a derived class, gets the formatter algorithm for the digital signature.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 디지털 서명에 대한 포맷터 알고리즘을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /&gt;</ph> that represents the formatter algorithm for the digital signature.</source>
          <target state="translated">디지털 서명에 대한 포맷터 알고리즘을 나타내는 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)">
          <source>Typically, a signature formatter is used to generate a digital signature.</source>
          <target state="translated">일반적으로 서명 포맷터는 디지털 서명을 생성하는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)">
          <source>Use the static fields of the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.</source>
          <target state="translated">알고리즘을 지정하려면 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> 클래스의 정적 필드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey">
          <source>When overridden in a derived class, gets a value that indicates whether the private key is available.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 개인 키를 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> when the private key is available; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">개인 키를 사용할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>