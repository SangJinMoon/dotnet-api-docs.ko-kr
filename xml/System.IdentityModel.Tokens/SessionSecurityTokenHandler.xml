<Type Name="SessionSecurityTokenHandler" FullName="System.IdentityModel.Tokens.SessionSecurityTokenHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="698670494d510916b922e88a119093c8c15bf740" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36480117" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SessionSecurityTokenHandler : System.IdentityModel.Tokens.SecurityTokenHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SessionSecurityTokenHandler extends System.IdentityModel.Tokens.SecurityTokenHandler" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class SessionSecurityTokenHandler&#xA;Inherits SecurityTokenHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class SessionSecurityTokenHandler : System::IdentityModel::Tokens::SecurityTokenHandler" />
  <TypeSignature Language="F#" Value="type SessionSecurityTokenHandler = class&#xA;    inherit SecurityTokenHandler" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.Tokens.SecurityTokenHandler</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 형식의 보안 토큰을 처리하는 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />입니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 클래스를 serialize, deserialize 하 고 세션 토큰의 유효성을 검사 합니다. 세션 토큰은 토큰 형식의 <xref:System.IdentityModel.Tokens.SessionSecurityToken>합니다. <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 클래스를 쿠키 형식 토큰을 serialize 합니다. 기본적으로 클래스 Ws-secure Conversation Feb2005 또는 Ws-secure Conversation 1.3에 토큰을 serialize `<wsc:SecurityContextToken>` 요소입니다. 세션 토큰에서 사용 되는 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule> (WSFAM) 및 <xref:System.IdentityModel.Services.SessionAuthenticationModule> (SAM)는 세션에 대 한 정보를 저장 하는 주로 <xref:System.Security.Claims.ClaimsPrincipal> 세션 시작 및 만료 시간 및 인증된 된 사용자와 관련 된 합니다.  
  
 수동 시나리오에서는 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule> 호출는 <xref:System.IdentityModel.Services.SessionAuthenticationModule> (SAM)에서 세션 토큰을 만드는 인증 파이프라인에서는 <xref:System.Security.Claims.ClaimsPrincipal> 인증된 된 사용자를 나타내는입니다. SAM를 사용 하 여 구성 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 토큰을 만드는 쿠키로 serialize (고 이후 요청에서 쿠키에서 토큰을 deserialize 하는 데). SAM의 구성 된 인스턴스를 사용 하 여 <xref:System.IdentityModel.Services.CookieHandler> HTTP 응답에 쿠키를 다시 작성 하는 클래스입니다. 이 쿠키는 클라이언트에 반환 되 고 이후 요청에서 클라이언트 수 라운드트립이 다시 보안 토큰을 가져오는 데 id 공급자를 다시 수행 하지 않고 쿠키 제공 합니다. Wif 세션의 작동 방식에 대 한 자세한 내용은 참조 [WIF 세션 관리](~/docs/framework/security/wif-session-management.md)합니다.  
  
> [!NOTE]
>  \<securityTokenHandlers > 구성 요소를 지정 하려면 사용할 수는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 응용 프로그램의 세션을 보안 설정에 대 한 책임이 있는 합니다. 개발자가 주의 기울여야이 구성 설정을 변경 하는 경우 처럼 잘못 구성 된 시스템 응용 프로그램 손상 시킬 수 있습니다. 예를 들어 파생된 하이퍼링크 지정 "http://msdn.microsoft.com/library/hh193426%28v=vs.110%29.aspx" \t "_blank" <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 및 보호 된 쿠키로 serialize 되 고 사용자 id를 초래 하는 기본 빈 변환 (CookieTransform) 컬렉션을 전달 합니다. 이 id를 수정 하 고 따라서 액세스 권한을 변경 하면 공격자를 허용할 수 있습니다.  
  
 세션 토큰 모드에 있으면 참조, 즉, 해당 <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=nameWithType> 속성은 `true`, 토큰 처리기만 세션 토큰의 키를 다시 생성 하는 데 필요한 속성을 serialize 하는 세션의 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>합니다. 기본적인 경우는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey> 클래스는 캐시 키를 나타내기 위해 및 토큰 처리기 쓰기는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=nameWithType> 및 <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=nameWithType> 토큰의 속성입니다. 세션 토큰에에서 없으면 참조 모드 즉,는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=nameWithType> 속성은 `false`, 그런 다음 앞에서 언급 한 속성과 함께 처리기를 호출는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> 토큰 및 저장소에서 serialize 된 바이트 배열에 대 한 메서드는 결과 값도 쿠키입니다. 가 토큰을 serialize 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> 메서드.  
  
 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> 속성 변환 세션에 적용 되는 목록에서 토큰을 가져옵니다는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> 메서드. 모든 변환에서 파생 되는 <xref:System.IdentityModel.CookieTransform> 클래스입니다. 기본적으로 <xref:System.IdentityModel.DeflateCookieTransform> 및 <xref:System.IdentityModel.ProtectedDataCookieTransform> 적용 됩니다. <xref:System.IdentityModel.ProtectedDataCookieTransform> (DPAPI (데이터 보호 API)를 사용 하 여 쿠키 자료를 보호 합니다. DPAPI는 현재 실행 되 고 해당 보호 알고리즘에서 컴퓨터에만 적용 되는 키를 사용 합니다. 따라서 이러한 시나리오에서는 한 컴퓨터에서 작성 된 토큰을 다른 컴퓨터에서 읽을 수 해야 때문에 기본 세션 토큰 처리기는 웹 팜 시나리오에 사용할 수 없습니다. 이 문제를 방지 하기 위해 다양 한 전략을 사용할 수 있습니다. 예를 들어 다음 작업을 할 수 있습니다.  
  
-   기본 바꿉니다 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 와 <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>합니다. <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler> ASP.NET에서 서명 및 암호화 키를 지정할 수 있도록 `<machineKey>` 구성 파일의 요소입니다.  
  
-   에 대 한 처리기를 제공는 <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType> global.asax.cs 파일과 바꾸기 기본 세션에서 이벤트 처리기의 인스턴스를 토큰 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 있는 변환 목록을 포함 하는 <xref:System.IdentityModel.RsaSignatureCookieTransform> 및 <xref:System.IdentityModel.RsaEncryptionCookieTransform>합니다. 변환 목록을 사용 하는 생성자 중 하나를 호출 하 여 새 인스턴스를 만들 수 있습니다.  
  
-   사용자 지정 변환에서 파생 되는 <xref:System.IdentityModel.CookieTransform> 기본 클래스 및 위의 메서드를 사용 하 여 변환이 적용 목록에 포함 합니다.  
  
-   사용자 지정 토큰 처리기 파생 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 메커니즘을 구현 하 고 있습니다.  
  
 세션을 사용 하 여 웹 팜 시나리오에 대 한 자세한 내용은 참조 하십시오. [WIF 및 웹 팜](~/docs/framework/security/wif-and-web-farms.md)합니다.  
  
 그러나 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 기본 토큰 처리기 컬렉션에 포함 되어 바꾸시겠습니까 사용자 지정 세션 토큰 처리기로 첫 번째 지정 하 여 한 [ &lt;제거&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md) 요소는 아래의[ &lt;securityTokenHandlers&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md) 다음 사용 하 여 사용자 지정 토큰 처리기를 추가 하 고 컬렉션에서 기본 처리기를 제거 하는 요소는 [ &lt;추가&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md) 요소입니다. 기본적으로 포함 하 여 기본 토큰 수명은 지정할 수는 [ &lt;sessionTokenRequirement&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/sessiontokenrequirement.md) 요소 아래에서 `<add>` 요소입니다. 아래의 사용자 지정 구성 요소를 적용 하려면 사용자 지정 토큰 처리기를 디자인할 수 있습니다는 `<add>` 재정의 하 여 요소는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration%2A> 메서드를 처리할 논리를 제공 합니다.  
  
   
  
## Examples  
 다음 XML에서는 토큰 처리기 컬렉션에 기본 세션 보안 토큰 처리기의 인스턴스로 대체 하는 방법을 보여 줍니다.는 <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler> 구성에서 클래스입니다.  
  
```xml  
<securityTokenHandlers>  
  <remove type="System.IdentityModel.Tokens.SessionSecurityTokenHandler, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />  
  <add type="System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />  
</securityTokenHandlers>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" />
    <altmember cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />
    <altmember cref="T:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler" />
    <altmember cref="T:System.IdentityModel.CookieTransform" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionSecurityTokenHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SessionSecurityTokenHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>기본 쿠키 변환 및 토큰 수명을 사용하는 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A> 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> 속성으로 초기화 됩니다 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime> 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionSecurityTokenHandler (System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt; transforms);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.CookieTransform&gt; transforms) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (transforms As ReadOnlyCollection(Of CookieTransform))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SessionSecurityTokenHandler(System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::CookieTransform ^&gt; ^ transforms);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SessionSecurityTokenHandler : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt; -&gt; System.IdentityModel.Tokens.SessionSecurityTokenHandler" Usage="new System.IdentityModel.Tokens.SessionSecurityTokenHandler transforms" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transforms" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt;" />
      </Parameters>
      <Docs>
        <param name="transforms">쿠키를 인코딩하거나 디코딩할 때 적용할 변환입니다. <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> 속성을 설정합니다.</param>
        <summary>지정된 쿠키 변환을 사용하는 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A> 속성이 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime>으로 초기화됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="transforms" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionSecurityTokenHandler (System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt; transforms, TimeSpan tokenLifetime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.CookieTransform&gt; transforms, valuetype System.TimeSpan tokenLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (transforms As ReadOnlyCollection(Of CookieTransform), tokenLifetime As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SessionSecurityTokenHandler(System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::CookieTransform ^&gt; ^ transforms, TimeSpan tokenLifetime);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.SessionSecurityTokenHandler : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt; * TimeSpan -&gt; System.IdentityModel.Tokens.SessionSecurityTokenHandler" Usage="new System.IdentityModel.Tokens.SessionSecurityTokenHandler (transforms, tokenLifetime)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transforms" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt;" />
        <Parameter Name="tokenLifetime" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="transforms">쿠키를 인코딩하거나 디코딩할 때 적용할 변환입니다. <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> 속성을 설정합니다.</param>
        <param name="tokenLifetime">토큰에 대한 기본 수명입니다. <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime" /> 속성을 설정합니다.</param>
        <summary>지정된 쿠키 변환 및 토큰 수명을 사용하는 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="transforms" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="tokenLifetime" />이 <see cref="F:System.TimeSpan.Zero" />보다 작거나 같은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyTransforms">
      <MemberSignature Language="C#" Value="protected virtual byte[] ApplyTransforms (byte[] cookie, bool outbound);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] ApplyTransforms(unsigned int8[] cookie, bool outbound) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ApplyTransforms (cookie As Byte(), outbound As Boolean) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ ApplyTransforms(cli::array &lt;System::Byte&gt; ^ cookie, bool outbound);" />
      <MemberSignature Language="F#" Value="abstract member ApplyTransforms : byte[] * bool -&gt; byte[]&#xA;override this.ApplyTransforms : byte[] * bool -&gt; byte[]" Usage="sessionSecurityTokenHandler.ApplyTransforms (cookie, outbound)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="System.Byte[]" />
        <Parameter Name="outbound" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cookie">변환될 쿠키입니다.</param>
        <param name="outbound">쿠키를 인코딩해야 하는 경우 <see langword="true" />이고, 디코딩해야 하는 경우 <see langword="false" />입니다.</param>
        <summary>지정된 쿠키를 인코딩하거나 디코딩하기 위해 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> 속성으로 지정된 변환을 적용합니다.</summary>
        <returns>인코딩 또는 디코딩된 쿠키입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 표시 된 순서로 적용 쿠키 인코딩을 변환 하는 경우는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> 속성입니다. 쿠키를 디코딩, 반대 순서로 적용 됩니다.  
  
 호출 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A> 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A> 를 인코딩 및 디코딩하는 쿠키 자료 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> 속성은 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public override bool CanReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanReadToken (reader As XmlReader) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="override this.CanReadToken : System.Xml.XmlReader -&gt; bool" Usage="sessionSecurityTokenHandler.CanReadToken reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">들어오는 <see cref="T:System.Xml.XmlReader" />에 대한  <see cref="T:System.IdentityModel.Tokens.SecurityToken" />입니다. 판독기는 <see langword="&lt;wsc:SecurityContextToken&gt;" /> 요소에 있어야 합니다.</param>
        <summary>판독기가 <see langword="&lt;wsc:SecurityContextToken&gt;" /> 요소에 배치되었는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>판독기가 <see langword="true" /> 요소를 가리키면 <see langword="&lt;wsc:SecurityContextToken&gt;" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CanValidateToken">
      <MemberSignature Language="C#" Value="public override bool CanValidateToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanValidateToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanValidateToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanValidateToken { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanValidateToken : bool" Usage="System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 처리기가 형식이 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />인 토큰의 유효성 검사를 지원하는지 나타내는 값을 가져옵니다.</summary>
        <value>처리기가 형식이 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />인 토큰의 유효성 검사를 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 항상 <see langword="true" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteToken">
      <MemberSignature Language="C#" Value="public override bool CanWriteToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWriteToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWriteToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWriteToken { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWriteToken : bool" Usage="System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 처리기가 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 형식의 토큰을 쓸 수 있는지 나타내는 값을 가져옵니다.</summary>
        <value>처리기가 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 형식의 토큰을 쓸 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 항상 <see langword="true" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieElementName">
      <MemberSignature Language="C#" Value="public virtual string CookieElementName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CookieElementName" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CookieElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CookieElementName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieElementName : string" Usage="System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿠키 요소의 이름을 가져옵니다.</summary>
        <value>쿠키 요소의 이름입니다. 기본 요소 이름은 "쿠키"입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에서 사용 되는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A> 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A> 요소는 인코딩된 토큰 자료를 작성 하거나 읽을 수를 확인 하는 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace" />
        <altmember cref="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)" />
        <altmember cref="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)" />
      </Docs>
    </Member>
    <Member MemberName="CookieNamespace">
      <MemberSignature Language="C#" Value="public virtual string CookieNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CookieNamespace" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CookieNamespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CookieNamespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieNamespace : string" Usage="System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿠키 요소의 네임스페이스를 가져옵니다.</summary>
        <value>쿠키 요소의 네임스페이스입니다. 기본 네임 스페이스는 "http://schemas.microsoft.com/ws/2006/05/security"입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에서 사용 되는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A> 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A> 는 인코딩된 토큰 자료를 작성 하거나 읽을 수는 요소의 네임 스페이스를 확인 하는 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName" />
        <altmember cref="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)" />
        <altmember cref="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)" />
      </Docs>
    </Member>
    <Member MemberName="CreateSessionSecurityToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SessionSecurityToken CreateSessionSecurityToken (System.Security.Claims.ClaimsPrincipal principal, string context, string endpointId, DateTime validFrom, DateTime validTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SessionSecurityToken CreateSessionSecurityToken(class System.Security.Claims.ClaimsPrincipal principal, string context, string endpointId, valuetype System.DateTime validFrom, valuetype System.DateTime validTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSessionSecurityToken (principal As ClaimsPrincipal, context As String, endpointId As String, validFrom As DateTime, validTo As DateTime) As SessionSecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SessionSecurityToken ^ CreateSessionSecurityToken(System::Security::Claims::ClaimsPrincipal ^ principal, System::String ^ context, System::String ^ endpointId, DateTime validFrom, DateTime validTo);" />
      <MemberSignature Language="F#" Value="abstract member CreateSessionSecurityToken : System.Security.Claims.ClaimsPrincipal * string * string * DateTime * DateTime -&gt; System.IdentityModel.Tokens.SessionSecurityToken&#xA;override this.CreateSessionSecurityToken : System.Security.Claims.ClaimsPrincipal * string * string * DateTime * DateTime -&gt; System.IdentityModel.Tokens.SessionSecurityToken" Usage="sessionSecurityTokenHandler.CreateSessionSecurityToken (principal, context, endpointId, validFrom, validTo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SessionSecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="endpointId" Type="System.String" />
        <Parameter Name="validFrom" Type="System.DateTime" />
        <Parameter Name="validTo" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="principal">클레임 보안 주체입니다.</param>
        <param name="context">호출자 정의 컨텍스트 문자열입니다.</param>
        <param name="endpointId">토큰의 범위를 지정하는 끝점의 식별자입니다.</param>
        <param name="validFrom">토큰이 유효해지는 시간 인스턴스입니다.</param>
        <param name="validTo">토큰이 더 이상 유효하지 않게 된 이후 시간 인스턴스입니다.</param>
        <summary>지정된 클레임 보안 주체 및 토큰이 유효한 시간 범위를 기반으로 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />을 만듭니다.</summary>
        <returns>만든 세션 보안 토큰입니다. 새 세션 토큰의 속성은 지정된 매개 변수에 따라 설정됩니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="principal" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 속성은 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateToken">
      <MemberSignature Language="C#" Value="public override System.IdentityModel.Tokens.SecurityToken CreateToken (System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IdentityModel.Tokens.SecurityToken CreateToken(class System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateToken (tokenDescriptor As SecurityTokenDescriptor) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IdentityModel::Tokens::SecurityToken ^ CreateToken(System::IdentityModel::Tokens::SecurityTokenDescriptor ^ tokenDescriptor);" />
      <MemberSignature Language="F#" Value="override this.CreateToken : System.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="sessionSecurityTokenHandler.CreateToken tokenDescriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenDescriptor" Type="System.IdentityModel.Tokens.SecurityTokenDescriptor" />
      </Parameters>
      <Docs>
        <param name="tokenDescriptor">토큰을 만들 토큰 설명자입니다.</param>
        <summary>지정한 토큰 설명자를 기반으로 보안 토큰을 만듭니다.</summary>
        <returns>만든 보안 토큰입니다. 이는 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 인스턴스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 만들고 토큰 설명자의 다음 속성을 사용 하 여 세션 보안 토큰을 반환: <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject%2A?displayProperty=nameWithType>, 및 <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime%2A?displayProperty=nameWithType>합니다. 경우는 <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.SaveBootstrapContext%2A?displayProperty=nameWithType> 속성이 설정 되어 `true` 로 지정 된 토큰 처리기 구성에는 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> 속성 부트스트랩 컨텍스트가에서 만들어집니다는 <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Token%2A?displayProperty=nameWithType> 속성 세션 토큰에 저장 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tokenDescriptor" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 속성은 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultCookieTransforms">
      <MemberSignature Language="C#" Value="public static readonly System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt; DefaultCookieTransforms;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.CookieTransform&gt; DefaultCookieTransforms" />
      <MemberSignature Language="DocId" Value="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultCookieTransforms As ReadOnlyCollection(Of CookieTransform) " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::CookieTransform ^&gt; ^ DefaultCookieTransforms;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultCookieTransforms : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt;" Usage="System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿠키, <see cref="T:System.IdentityModel.DeflateCookieTransform" /> 및 <see cref="T:System.IdentityModel.ProtectedDataCookieTransform" />에 적용할 기본 변환 목록을 포함하고 있는 읽기 전용 컬렉션입니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultLifetime">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan DefaultLifetime;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan DefaultLifetime" />
      <MemberSignature Language="DocId" Value="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultLifetime As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan DefaultLifetime;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultLifetime : TimeSpan" Usage="System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿠키의 기본 수명을 지정하는 상수(10시간)입니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultTokenLifetime">
      <MemberSignature Language="C#" Value="public static TimeSpan DefaultTokenLifetime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan DefaultTokenLifetime" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultTokenLifetime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan DefaultTokenLifetime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultTokenLifetime : TimeSpan" Usage="System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>기본 토큰 수명을 가져옵니다.</summary>
        <value>기본 토큰 수명입니다. 항상 <see cref="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenTypeIdentifiers">
      <MemberSignature Language="C#" Value="public override string[] GetTokenTypeIdentifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetTokenTypeIdentifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetTokenTypeIdentifiers () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetTokenTypeIdentifiers();" />
      <MemberSignature Language="F#" Value="override this.GetTokenTypeIdentifiers : unit -&gt; string[]" Usage="sessionSecurityTokenHandler.GetTokenTypeIdentifiers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 처리기에서 처리할 수 있는 토큰 형식의 토큰 형식 URI를 가져옵니다.</summary>
        <returns>이 처리기에서 처리할 수 있는 토큰 형식의 토큰 형식 식별자 URI입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 형식 Uri 지원 됩니다: "http://schemas.microsoft.com/ws/2006/05/servicemodel/tokens/SecureConversation","http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/sct", 및 "http://schemas.xmlsoap.org/ws/2005/02/sc/sct"입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public override void LoadCustomConfiguration (System.Xml.XmlNodeList customConfigElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList customConfigElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub LoadCustomConfiguration (customConfigElements As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void LoadCustomConfiguration(System::Xml::XmlNodeList ^ customConfigElements);" />
      <MemberSignature Language="F#" Value="override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="sessionSecurityTokenHandler.LoadCustomConfiguration customConfigElements" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customConfigElements" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="customConfigElements">사용자 지정 구성 요소입니다.</param>
        <summary>XML에서 사용자 지정 구성을 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 초기화 하는 구성 인프라에 의해 호출 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 인스턴스. 초기화 합니다는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A> 속성은 `lifetime` 특성에는 [ &lt;sessionTokenRequirement&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/sessiontokenrequirement.md) 구성 파일의 요소입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="customConfigElements" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="customConfigElements" />로 지정한 구성이 잘못된 경우 예를 들어 <see langword="&lt;sessionTokenRequirement&gt;" /> 요소를 포함하지 않거나, 둘 이상의 <see langword="&lt;sessionTokenRequirement&gt;" /> 요소를 포함하거나, 유효한 <see cref="T:System.TimeSpan" /> 값을 <see langword="lifetime" /> 특성에서 읽을 수 없거나, <see langword="lifetime" /> 특성이 <see cref="F:System.TimeSpan.Zero" />보다 작은 값을 지정합니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />을 읽습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 구현은 Ws-secure Conversation Feb2005 또는 Ws-secure Conversation 1.3에서 토큰을 deserialize `<wsc:SecurityContextToken>` 요소입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public override System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadToken (reader As XmlReader) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="override this.ReadToken : System.Xml.XmlReader -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="sessionSecurityTokenHandler.ReadToken reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">들어오는 <see cref="T:System.Xml.XmlReader" />에 대한  <see cref="T:System.IdentityModel.Tokens.SecurityToken" />입니다.</param>
        <summary>지정된 XML 판독기를 사용하여 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />을 읽습니다.</summary>
        <returns>읽은 세션 보안 토큰이며, <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 인스턴스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 테이블 또는 Ws-secure Conversation Feb2005 Ws-secure Conversation 1.3 판독기를 배치 해야 `<wsc:SecurityContextToken>` 요소입니다.  
  
 기본 구현에서는 호출에서 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=nameWithType> 기본 토큰 확인 자가 사용 하는 방법입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">판독기가 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />에 배치되지 않거나 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />을 읽을 수 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (byte[] token, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(unsigned int8[] token, class System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (token As Byte(), tokenResolver As SecurityTokenResolver) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(cli::array &lt;System::Byte&gt; ^ token, System::IdentityModel::Selectors::SecurityTokenResolver ^ tokenResolver);" />
      <MemberSignature Language="F#" Value="override this.ReadToken : byte[] * System.IdentityModel.Selectors.SecurityTokenResolver -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="sessionSecurityTokenHandler.ReadToken (token, tokenResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.Byte[]" />
        <Parameter Name="tokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
      </Parameters>
      <Docs>
        <param name="token">토큰이 들어 있는 바이트의 스트림입니다.</param>
        <param name="tokenResolver">사용할 토큰 확인자입니다.</param>
        <summary>지정된 토큰 확인자를 사용하여 바이트의 스트림에서 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />을 읽습니다.</summary>
        <returns>읽은 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 구현은 만듭니다는 <xref:System.Xml.XmlDictionaryReader> 토큰을 통해 호출 하는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=nameWithType> 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public override System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadToken (reader As XmlReader, tokenResolver As SecurityTokenResolver) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenResolver ^ tokenResolver);" />
      <MemberSignature Language="F#" Value="override this.ReadToken : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenResolver -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="sessionSecurityTokenHandler.ReadToken (reader, tokenResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="tokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
      </Parameters>
      <Docs>
        <param name="reader">들어오는 <see cref="T:System.Xml.XmlReader" />에 대한  <see cref="T:System.IdentityModel.Tokens.SecurityToken" />입니다.</param>
        <param name="tokenResolver">
          <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />을 확인하는 데 사용할 수 있는 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />입니다.</param>
        <summary>
          <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />을 지정된 XML 판독기와 토큰 해결 프로그램으로 읽습니다.</summary>
        <returns>읽은 세션 보안 토큰이며, <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 인스턴스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 테이블 또는 Ws-secure Conversation Feb2005 Ws-secure Conversation 1.3 판독기를 배치 해야 `<wsc:SecurityContextToken>` 요소입니다.  
  
 인스턴스 토큰 캐시에서 읽힙니다 토큰 자료 캐시 되 면의 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache> 클래스입니다. 자식 요소에서 토큰 자료는 읽기,는 `<wsc:SecurityContextToken>` 변수로 지정 된 요소는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A> 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A> 속성 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> 디코딩할 쿠키에 메서드가 호출 되어 합니다.  
  
 세션 토큰을 serialize 하는 방법에 대 한 자세한 내용은 `<SecurityContextToken` 요소 참조는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" />가 <see langword="null" />인 경우  -또는-  <paramref name="tokenResolver" />이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">판독기가 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />에 배치되지 않거나 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />을 읽을 수 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="SetTransforms">
      <MemberSignature Language="C#" Value="protected void SetTransforms (System.Collections.Generic.IEnumerable&lt;System.IdentityModel.CookieTransform&gt; transforms);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetTransforms(class System.Collections.Generic.IEnumerable`1&lt;class System.IdentityModel.CookieTransform&gt; transforms) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetTransforms (transforms As IEnumerable(Of CookieTransform))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetTransforms(System::Collections::Generic::IEnumerable&lt;System::IdentityModel::CookieTransform ^&gt; ^ transforms);" />
      <MemberSignature Language="F#" Value="member this.SetTransforms : seq&lt;System.IdentityModel.CookieTransform&gt; -&gt; unit" Usage="sessionSecurityTokenHandler.SetTransforms transforms" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transforms" Type="System.Collections.Generic.IEnumerable&lt;System.IdentityModel.CookieTransform&gt;" />
      </Parameters>
      <Docs>
        <param name="transforms">사용할 변환입니다.</param>
        <summary>쿠키에 적용될 변환을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 변환에서 반환 된 목록 설정에서 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> 속성입니다. 변환은 표시 되는 쿠키를 인코딩할 때 목록에서 한 역순으로 쿠키를 디코딩하는 경우에 순서 대로 적용 됩니다.  
  
> [!WARNING]
>  경우는 `transforms` 매개 변수는 `null`에서 예외가 throw 됩니다는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> 을 인코딩 또는 디코딩하려면 쿠키 호출 될 때 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenLifetime">
      <MemberSignature Language="C#" Value="public virtual TimeSpan TokenLifetime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TokenLifetime" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TokenLifetime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property TimeSpan TokenLifetime { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.TokenLifetime : TimeSpan with get, set" Usage="System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>토큰 수명을 가져오거나 설정합니다.</summary>
        <value>토큰 수명입니다. 기본값은 <see cref="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 하는 경우는 [ &lt;sessionTokenRequirement&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/sessiontokenrequirement.md) 구성 파일에 지정 된 요소가 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A> 속성의 값으로 초기화 되는 `lifetime` 는기준특성<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">0보다 작거나 같은 시간 범위를 설정하려는 시도가 발생합니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public override Type TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TokenType" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TokenType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ TokenType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenType : Type" Usage="System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 처리기가 처리하는 토큰의 형식을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Type" />의 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transforms">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt; Transforms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.CookieTransform&gt; Transforms" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transforms As ReadOnlyCollection(Of CookieTransform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::CookieTransform ^&gt; ^ Transforms { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::CookieTransform ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transforms : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt;" Usage="System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿠키에 적용할 변환을 가져옵니다.</summary>
        <value>쿠키에 적용할 변환 목록입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 변환을 적용 되는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateSession">
      <MemberSignature Language="C#" Value="protected virtual void ValidateSession (System.IdentityModel.Tokens.SessionSecurityToken securityToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateSession(class System.IdentityModel.Tokens.SessionSecurityToken securityToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateSession (securityToken As SessionSecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ValidateSession(System::IdentityModel::Tokens::SessionSecurityToken ^ securityToken);" />
      <MemberSignature Language="F#" Value="abstract member ValidateSession : System.IdentityModel.Tokens.SessionSecurityToken -&gt; unit&#xA;override this.ValidateSession : System.IdentityModel.Tokens.SessionSecurityToken -&gt; unit" Usage="sessionSecurityTokenHandler.ValidateSession securityToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityToken" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
      </Parameters>
      <Docs>
        <param name="securityToken">검사할 토큰입니다.</param>
        <summary>지정된 토큰과 연결된 세션이 여전히 유효한지 여부를 확인합니다. 유효성 검사는 지정된 토큰의 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" /> 및 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> 속성을 확인하여 결정됩니다. 세션이 더 이상 유효하지 않은 경우 예외가 throw됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 토큰이 유효 하지 않은 경우 해당 <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> 나중에 발생 하는 값이 속성은 보다 <xref:System.DateTime.UtcNow%2A>, 또는 해당 <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> 발생 하는 값이 속성은 이전의 <xref:System.DateTime.UtcNow%2A>합니다.  
  
 호출 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%2A> 세션 유효성을 검사 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="securityToken" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 속성은 <see langword="null" />입니다.</exception>
        <exception cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException">토큰의 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" /> 속성이 <see cref="P:System.DateTime.UtcNow" /> 이후입니다.</exception>
        <exception cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException">토큰의 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> 속성이 <see cref="P:System.DateTime.UtcNow" /> 이전입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>토큰의 유효성을 검사하고 해당 클레임을 반환합니다.</summary>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateToken">
      <MemberSignature Language="C#" Value="public override System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt; ValidateToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Security.Claims.ClaimsIdentity&gt; ValidateToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ValidateToken (token As SecurityToken) As ReadOnlyCollection(Of ClaimsIdentity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Security::Claims::ClaimsIdentity ^&gt; ^ ValidateToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="override this.ValidateToken : System.IdentityModel.Tokens.SecurityToken -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;" Usage="sessionSecurityTokenHandler.ValidateToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">유효성을 검사할 토큰입니다. <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />에서 할당할 수 있어야 합니다.</param>
        <summary>지정된 토큰의 유효성을 검사하고 해당 클레임을 반환합니다.</summary>
        <returns>토큰에 포함된 ID입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession%2A> 메서드 토큰 유효성 검사를 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="token" />
          <see langword="null" />을 참조하십시오.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="token" />은 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />에서 할당할 수 없습니다.</exception>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken" />
      </Docs>
    </Member>
    <Member MemberName="ValidateToken">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt; ValidateToken (System.IdentityModel.Tokens.SessionSecurityToken token, string endpointId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Security.Claims.ClaimsIdentity&gt; ValidateToken(class System.IdentityModel.Tokens.SessionSecurityToken token, string endpointId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateToken (token As SessionSecurityToken, endpointId As String) As ReadOnlyCollection(Of ClaimsIdentity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Security::Claims::ClaimsIdentity ^&gt; ^ ValidateToken(System::IdentityModel::Tokens::SessionSecurityToken ^ token, System::String ^ endpointId);" />
      <MemberSignature Language="F#" Value="override this.ValidateToken : System.IdentityModel.Tokens.SessionSecurityToken * string -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;" Usage="sessionSecurityTokenHandler.ValidateToken (token, endpointId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
        <Parameter Name="endpointId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="token">유효성을 검사할 토큰입니다. <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />에서 할당할 수 있어야 합니다.</param>
        <param name="endpointId">토큰의 범위를 지정하는 끝점의 식별자입니다.</param>
        <summary>지정된 세션 토큰의 유효성을 검사하고 해당 클레임을 반환합니다.</summary>
        <returns>토큰에 포함된 ID입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 수행 되도록 지정된 된 토큰 범위 지정 된 끝점 ID에 한,이 경우 호출 하는 검사는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> 메서드도 있습니다; 그렇지 않으면 throw는 <xref:System.IdentityModel.Tokens.SecurityTokenException>합니다.  
  
> [!IMPORTANT]
>  세션 토큰을는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A> 않는 속성이 `null` 빈 범위를 전역으로 지정할 것으로 간주 됩니다. 이 인해 잠재적인 보안 위험이 있습니다. 이러한 이유로 확인 해야 하는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A> 세션 토큰에서 속성을 설정 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="token" />가 <see langword="null" />인 경우  -또는-  <paramref name="endpointId" />이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="token" />은 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />에서 할당할 수 없습니다.</exception>
        <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">지정된 토큰의 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId" /> 속성이 <see langword="null" />이 아니거나 비어 있고 해당 값이 <paramref name="endpointId" /> 매개 변수로 지정된 값과 다릅니다.</exception>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>토큰을 serialize합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 구현은 Ws-secure Conversation Feb2005 또는 Ws-secure Conversation 1.3에 토큰을 serialize `<wsc:SecurityContextToken>` 요소입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken" />
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public virtual byte[] WriteToken (System.IdentityModel.Tokens.SessionSecurityToken sessionToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] WriteToken(class System.IdentityModel.Tokens.SessionSecurityToken sessionToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteToken (sessionToken As SessionSecurityToken) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ WriteToken(System::IdentityModel::Tokens::SessionSecurityToken ^ sessionToken);" />
      <MemberSignature Language="F#" Value="override this.WriteToken : System.IdentityModel.Tokens.SessionSecurityToken -&gt; byte[]" Usage="sessionSecurityTokenHandler.WriteToken sessionToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionToken" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
      </Parameters>
      <Docs>
        <param name="sessionToken">쓸 토큰입니다.</param>
        <summary>지정된 토큰을 바이트 배열에 serialize합니다.</summary>
        <returns>인코딩된 바이트 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 통해 만들고 XML 작성기 하 여 지정된 된 토큰을 serialize 한 <xref:System.IO.MemoryStream> 을 호출 하는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> 메서드. 자세한 내용을 보려면 오버 로드 하는 참조 하십시오.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sessiontoken" />가 <see langword="null" />인 경우</exception>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken" />
      </Docs>
    </Member>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public override void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteToken(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteToken (writer As XmlWriter, token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteToken(System::Xml::XmlWriter ^ writer, System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberSignature Language="F#" Value="override this.WriteToken : System.Xml.XmlWriter * System.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="sessionSecurityTokenHandler.WriteToken (writer, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="writer">토큰을 serialize할 XML 작성기입니다.</param>
        <param name="token">serialize할 토큰입니다. <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />의 인스턴스입니다.</param>
        <summary>지정된 XML 작성기를 사용하여 지정된 토큰을 serialize합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 구현은 Ws-secure Conversation Feb2005 또는 Ws-secure Conversation 1.3 지정된 된 토큰을 serialize `<wsc:SecurityContextToken>` 값에 따라 요소는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion%2A?displayProperty=nameWithType> 속성입니다. <xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A?displayProperty=nameWithType> 속성으로 serialize 되는 `Id` 특성입니다. <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=nameWithType> 속성으로 serialize 되는 `<Identifier>` 자식 요소입니다. 그렇지 않은 경우 `null` 는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=nameWithType> 속성으로 serialize 되는 `<Instance>` 요소입니다. 마지막으로, 하는 경우는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=nameWithType> 속성은 `false`, 전체 토큰이 전달 되는 이진 배열로 serialize 되는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> 메서드를 인코딩할 수 있습니다. 인코딩된 토큰이 base64 인코딩 값으로에 기록 된 요소와 지정 된 네임 스페이스는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A> 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A> 속성입니다. 경우는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=nameWithType> 속성은 `true`, 토큰은 serialize 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" />가 <see langword="null" />인 경우  -또는-  <paramref name="token" />이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="token" />은 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />에서 할당할 수 없습니다.  -또는- 토큰의 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion" />은 처리기가 지원하지 않는 WS-Secure Conversation 버전을 지정합니다.</exception>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken" />
      </Docs>
    </Member>
  </Members>
</Type>