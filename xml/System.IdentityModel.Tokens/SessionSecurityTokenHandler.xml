<Type Name="SessionSecurityTokenHandler" FullName="System.IdentityModel.Tokens.SessionSecurityTokenHandler">
  <TypeSignature Language="C#" Value="public class SessionSecurityTokenHandler : System.IdentityModel.Tokens.SecurityTokenHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SessionSecurityTokenHandler extends System.IdentityModel.Tokens.SecurityTokenHandler" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class SessionSecurityTokenHandler&#xA;Inherits SecurityTokenHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class SessionSecurityTokenHandler : System::IdentityModel::Tokens::SecurityTokenHandler" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.Tokens.SecurityTokenHandler</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="00dab-101"><see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> 형식의 보안 토큰을 처리하는 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-101">A <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> that processes security tokens of type <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-102"><xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 클래스를 serialize, deserialize 하 고 세션 토큰의 유효성을 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-102">The <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> class serializes, deserializes, and validates session tokens.</span></span> <span data-ttu-id="00dab-103">세션 토큰은 토큰 형식의 <xref:System.IdentityModel.Tokens.SessionSecurityToken>합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-103">Session tokens are tokens of type <xref:System.IdentityModel.Tokens.SessionSecurityToken>.</span></span> <span data-ttu-id="00dab-104"><xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 클래스를 쿠키 형식 토큰을 serialize 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-104">The <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> class serializes the tokens to and from cookie format.</span></span> <span data-ttu-id="00dab-105">기본적으로 클래스 Ws-secure Conversation Feb2005 또는 Ws-secure Conversation 1.3에 토큰을 serialize `<wsc:SecurityContextToken>` 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-105">By default, the class serializes tokens into WS-Secure Conversation Feb2005 or WS-Secure Conversation 1.3 `<wsc:SecurityContextToken>` elements.</span></span> <span data-ttu-id="00dab-106">세션 토큰에서 사용 되는 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule> (WSFAM) 및 <xref:System.IdentityModel.Services.SessionAuthenticationModule> (SAM)는 세션에 대 한 정보를 저장 하는 주로 <xref:System.Security.Claims.ClaimsPrincipal> 세션 시작 및 만료 시간 및 인증된 된 사용자와 관련 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-106">Session tokens are used by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule> (WSFAM) and the <xref:System.IdentityModel.Services.SessionAuthenticationModule> (SAM) to store information about a session, this is primarily the <xref:System.Security.Claims.ClaimsPrincipal> associated with the authenticated user and the session start and expiration times.</span></span>  
  
 <span data-ttu-id="00dab-107">수동 시나리오에서는 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule> 호출는 <xref:System.IdentityModel.Services.SessionAuthenticationModule> (SAM)에서 세션 토큰을 만드는 인증 파이프라인에서는 <xref:System.Security.Claims.ClaimsPrincipal> 인증된 된 사용자를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-107">In passive scenarios, the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule> calls into the <xref:System.IdentityModel.Services.SessionAuthenticationModule> (SAM) from the authentication pipeline to create a session token from the <xref:System.Security.Claims.ClaimsPrincipal> that represents the authenticated user.</span></span> <span data-ttu-id="00dab-108">SAM를 사용 하 여 구성 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 토큰을 만드는 쿠키로 serialize (고 이후 요청에서 쿠키에서 토큰을 deserialize 하는 데).</span><span class="sxs-lookup"><span data-stu-id="00dab-108">The SAM uses its configured <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> to create the token and to serialize it into a cookie (and to deserialize the token from a cookie on subsequent requests).</span></span> <span data-ttu-id="00dab-109">SAM의 구성 된 인스턴스를 사용 하 여 <xref:System.IdentityModel.Services.CookieHandler> HTTP 응답에 쿠키를 다시 작성 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-109">The SAM uses an instance of its configured <xref:System.IdentityModel.Services.CookieHandler> class to write the cookie back to the HTTP Response.</span></span> <span data-ttu-id="00dab-110">이 쿠키는 클라이언트에 반환 되 고 이후 요청에서 클라이언트 수 라운드트립이 다시 보안 토큰을 가져오는 데 id 공급자를 다시 수행 하지 않고 쿠키 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-110">This cookie is then returned to the client and on subsequent requests the client can present the cookie rather than making a round trip back to the identity provider to re-obtain a security token.</span></span> <span data-ttu-id="00dab-111">Wif 세션의 작동 방식에 대 한 자세한 내용은 참조 [WIF 세션 관리](~/docs/framework/security/wif-session-management.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-111">For more information about how sessions operate with WIF, see [WIF Session Management](~/docs/framework/security/wif-session-management.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00dab-112">\<securityTokenHandlers > 구성 요소를 지정 하려면 사용할 수는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 응용 프로그램의 세션을 보안 설정에 대 한 책임이 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-112">The \<securityTokenHandlers> configuration element can be used to specify a <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> that has the responsibility for securing the application’s sessions.</span></span> <span data-ttu-id="00dab-113">개발자가 주의 기울여야이 구성 설정을 변경 하는 경우 처럼 잘못 구성 된 시스템 응용 프로그램 손상 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-113">Developers should use caution when changing this configuration setting, as a misconfigured system could result in application compromise.</span></span> <span data-ttu-id="00dab-114">예를 들어 파생된 하이퍼링크 지정 "http://msdn.microsoft.com/library/hh193426%28v=vs.110%29.aspx" \t "_blank" <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 및 보호 된 쿠키로 serialize 되 고 사용자 id를 초래 하는 기본 빈 변환 (CookieTransform) 컬렉션을 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-114">For example, specifying a derived  HYPERLINK "http://msdn.microsoft.com/library/hh193426%28v=vs.110%29.aspx" \t "_blank" <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> and passing an empty Transforms (CookieTransform) collection to the base, would result in the users identity being serialized into a cookie that was not protected.</span></span> <span data-ttu-id="00dab-115">이 id를 수정 하 고 따라서 액세스 권한을 변경 하면 공격자를 허용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-115">This could allow an attacker to modify the identity and therefore change access privileges.</span></span>  
  
 <span data-ttu-id="00dab-116">세션 토큰 모드에 있으면 참조, 즉, 해당 <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=nameWithType> 속성은 `true`, 토큰 처리기만 세션 토큰의 키를 다시 생성 하는 데 필요한 속성을 serialize 하는 세션의 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-116">If the session token is in reference mode, that is, its <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=nameWithType> property is `true`, the session token handler only serializes properties of the session token that are needed to regenerate its key in the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>.</span></span> <span data-ttu-id="00dab-117">기본적인 경우는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey> 클래스는 캐시 키를 나타내기 위해 및 토큰 처리기 쓰기는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=nameWithType> 및 <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=nameWithType> 토큰의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-117">In the default case, the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey> class is used to represent cache keys, and the token handler writes the <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=nameWithType> and <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=nameWithType> properties of the token.</span></span> <span data-ttu-id="00dab-118">세션 토큰에에서 없으면 참조 모드 즉,는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=nameWithType> 속성은 `false`, 그런 다음 앞에서 언급 한 속성과 함께 처리기를 호출는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> 토큰 및 저장소에서 serialize 된 바이트 배열에 대 한 메서드는 결과 값도 쿠키입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-118">If the session token is not in reference mode, that is, the <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=nameWithType> property is `false`, then, in addition to the properties mentioned previously, the handler invokes the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> method on a byte array serialized from the token and stores the resulting value in the cookie as well.</span></span> <span data-ttu-id="00dab-119">가 토큰을 serialize 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="00dab-119">For more details about how the token is serialized, see the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="00dab-120"><xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> 속성 변환 세션에 적용 되는 목록에서 토큰을 가져옵니다는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="00dab-120">The <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> property gets the list of transforms that are applied to the session token in the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> method.</span></span> <span data-ttu-id="00dab-121">모든 변환에서 파생 되는 <xref:System.IdentityModel.CookieTransform> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-121">All transforms derive from the <xref:System.IdentityModel.CookieTransform> class.</span></span> <span data-ttu-id="00dab-122">기본적으로 <xref:System.IdentityModel.DeflateCookieTransform> 및 <xref:System.IdentityModel.ProtectedDataCookieTransform> 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-122">In the default case the <xref:System.IdentityModel.DeflateCookieTransform> and the <xref:System.IdentityModel.ProtectedDataCookieTransform> are applied.</span></span> <span data-ttu-id="00dab-123"><xref:System.IdentityModel.ProtectedDataCookieTransform> (DPAPI (데이터 보호 API)를 사용 하 여 쿠키 자료를 보호 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-123">The <xref:System.IdentityModel.ProtectedDataCookieTransform> uses the Data Protection API (DPAPI) to protect the cookie material.</span></span> <span data-ttu-id="00dab-124">DPAPI는 현재 실행 되 고 해당 보호 알고리즘에서 컴퓨터에만 적용 되는 키를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-124">DPAPI uses a key that is specific to the computer on which it is running in its protection algorithms.</span></span> <span data-ttu-id="00dab-125">따라서 이러한 시나리오에서는 한 컴퓨터에서 작성 된 토큰을 다른 컴퓨터에서 읽을 수 해야 때문에 기본 세션 토큰 처리기는 웹 팜 시나리오에 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-125">For this reason, the default session token handler is not usable in Web farm scenarios because, in such scenarios, tokens written on one computer may need to be read on another computer.</span></span> <span data-ttu-id="00dab-126">이 문제를 방지 하기 위해 다양 한 전략을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-126">You can use many strategies to circumvent this issue.</span></span> <span data-ttu-id="00dab-127">예를 들어 다음 작업을 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-127">For example, you can:</span></span>  
  
-   <span data-ttu-id="00dab-128">기본 바꿉니다 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 와 <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-128">Replace the default <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> with the <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>.</span></span> <span data-ttu-id="00dab-129"><xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler> ASP.NET에서 서명 및 암호화 키를 지정할 수 있도록 `<machineKey>` 구성 파일의 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-129">The <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler> enables you to specify signing and encryption keys under the ASP.NET `<machineKey>` element in the configuration file.</span></span>  
  
-   <span data-ttu-id="00dab-130">에 대 한 처리기를 제공는 <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType> global.asax.cs 파일과 바꾸기 기본 세션에서 이벤트 처리기의 인스턴스를 토큰 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 있는 변환 목록을 포함 하는 <xref:System.IdentityModel.RsaSignatureCookieTransform> 및 <xref:System.IdentityModel.RsaEncryptionCookieTransform>합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-130">Provide a handler for the <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType> event in the global.asax.cs file and replace the default session token handler with an instance of <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> that has a list of transforms that includes the <xref:System.IdentityModel.RsaSignatureCookieTransform> and the <xref:System.IdentityModel.RsaEncryptionCookieTransform>.</span></span> <span data-ttu-id="00dab-131">변환 목록을 사용 하는 생성자 중 하나를 호출 하 여 새 인스턴스를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-131">You can create the new instance by invoking one of the constructors that takes a list of transforms.</span></span>  
  
-   <span data-ttu-id="00dab-132">사용자 지정 변환에서 파생 되는 <xref:System.IdentityModel.CookieTransform> 기본 클래스 및 위의 메서드를 사용 하 여 변환이 적용 목록에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-132">Derive a custom transform from the <xref:System.IdentityModel.CookieTransform> base class and use the method above to include it in the list of transforms to be applied.</span></span>  
  
-   <span data-ttu-id="00dab-133">사용자 지정 토큰 처리기 파생 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 메커니즘을 구현 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-133">Derive a custom token handler from <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> and implement your own mechanism.</span></span>  
  
 <span data-ttu-id="00dab-134">세션을 사용 하 여 웹 팜 시나리오에 대 한 자세한 내용은 참조 하십시오. [WIF 및 웹 팜](~/docs/framework/security/wif-and-web-farms.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-134">For more information about using sessions in Web farm scenarios, see [WIF and Web Farms](~/docs/framework/security/wif-and-web-farms.md).</span></span>  
  
 <span data-ttu-id="00dab-135">그러나 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 기본 토큰 처리기 컬렉션에 포함 되어 바꾸시겠습니까 사용자 지정 세션 토큰 처리기로 첫 번째 지정 하 여 한 [ &lt;제거&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md) 요소는 아래의[ &lt;securityTokenHandlers&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md) 다음 사용 하 여 사용자 지정 토큰 처리기를 추가 하 고 컬렉션에서 기본 처리기를 제거 하는 요소는 [ &lt;추가&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-135">The <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> is included in the default token handler collection; however, you can replace it with a custom session token handler by first specifying a [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md) element under the [&lt;securityTokenHandlers&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md) element to remove the default handler from the collection and then adding your custom token handler using the [&lt;add&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md) element.</span></span> <span data-ttu-id="00dab-136">기본적으로 포함 하 여 기본 토큰 수명은 지정할 수는 [ &lt;sessionTokenRequirement&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/sessiontokenrequirement.md) 요소 아래에서 `<add>` 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-136">By default, you can specify the default token lifetime by including the [&lt;sessionTokenRequirement&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/sessiontokenrequirement.md) element under the `<add>` element.</span></span> <span data-ttu-id="00dab-137">아래의 사용자 지정 구성 요소를 적용 하려면 사용자 지정 토큰 처리기를 디자인할 수 있습니다는 `<add>` 재정의 하 여 요소는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration%2A> 메서드를 처리할 논리를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-137">You can design a custom token handler to take custom configuration elements under the `<add>` element by overriding the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration%2A> method to provide the logic to process them.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="00dab-138">다음 XML에서는 토큰 처리기 컬렉션에 기본 세션 보안 토큰 처리기의 인스턴스로 대체 하는 방법을 보여 줍니다.는 <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler> 구성에서 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-138">The following XML shows how to replace the default session security token handler in a token handler collection with an instance of the <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler> class in configuration.</span></span>  
  
```xml  
<securityTokenHandlers>  
  <remove type="System.IdentityModel.Tokens.SessionSecurityTokenHandler, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />  
  <add type="System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />  
</securityTokenHandlers>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Tokens.SessionSecurityTokenCache" />
    <altmember cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />
    <altmember cref="T:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler" />
    <altmember cref="T:System.IdentityModel.CookieTransform" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="00dab-139"><see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-139">Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionSecurityTokenHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SessionSecurityTokenHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="00dab-140">기본 쿠키 변환 및 토큰 수명을 사용하는 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-140">Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> class that uses the default cookie transforms and token lifetime.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-141"><xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A> 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> 속성으로 초기화 됩니다 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime> 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms>합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-141">The <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A> and <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> properties are initialized to <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime> and <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionSecurityTokenHandler (System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt; transforms);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.CookieTransform&gt; transforms) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (transforms As ReadOnlyCollection(Of CookieTransform))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SessionSecurityTokenHandler(System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::CookieTransform ^&gt; ^ transforms);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transforms" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt;" />
      </Parameters>
      <Docs>
        <param name="transforms"><span data-ttu-id="00dab-142">쿠키를 인코딩하거나 디코딩할 때 적용할 변환입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-142">The transforms to apply when encoding or decoding the cookie.</span></span> <span data-ttu-id="00dab-143"><see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> 속성을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-143">Sets the <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> property.</span></span></param>
        <summary><span data-ttu-id="00dab-144">지정된 쿠키 변환을 사용하는 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-144">Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> class that uses the specified cookie transforms.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-145"><xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A> 속성이 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime>으로 초기화됩니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-145">The <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A> property is initialized to <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00dab-146"><paramref name="transforms" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-146"><paramref name="transforms" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionSecurityTokenHandler (System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt; transforms, TimeSpan tokenLifetime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.CookieTransform&gt; transforms, valuetype System.TimeSpan tokenLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (transforms As ReadOnlyCollection(Of CookieTransform), tokenLifetime As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SessionSecurityTokenHandler(System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::CookieTransform ^&gt; ^ transforms, TimeSpan tokenLifetime);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transforms" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt;" />
        <Parameter Name="tokenLifetime" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="transforms"><span data-ttu-id="00dab-147">쿠키를 인코딩하거나 디코딩할 때 적용할 변환입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-147">The transforms to apply when encoding or decoding the cookie.</span></span> <span data-ttu-id="00dab-148"><see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> 속성을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-148">Sets the <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> property.</span></span></param>
        <param name="tokenLifetime"><span data-ttu-id="00dab-149">토큰에 대한 기본 수명입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-149">The default lifetime for a token.</span></span> <span data-ttu-id="00dab-150"><see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime" /> 속성을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-150">Sets the <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime" /> property.</span></span></param>
        <summary><span data-ttu-id="00dab-151">지정된 쿠키 변환 및 토큰 수명을 사용하는 <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-151">Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> class that uses the specified cookie transforms and token lifetime.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00dab-152"><paramref name="transforms" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-152"><paramref name="transforms" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="00dab-153"><paramref name="tokenLifetime" />이 <see cref="F:System.TimeSpan.Zero" />보다 작거나 같은 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-153"><paramref name="tokenLifetime" /> is less than or equal to <see cref="F:System.TimeSpan.Zero" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyTransforms">
      <MemberSignature Language="C#" Value="protected virtual byte[] ApplyTransforms (byte[] cookie, bool outbound);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] ApplyTransforms(unsigned int8[] cookie, bool outbound) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ApplyTransforms (cookie As Byte(), outbound As Boolean) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ ApplyTransforms(cli::array &lt;System::Byte&gt; ^ cookie, bool outbound);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="System.Byte[]" />
        <Parameter Name="outbound" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cookie"><span data-ttu-id="00dab-154">변환될 쿠키입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-154">The cookie that will be transformed.</span></span></param>
        <param name="outbound">
          <span data-ttu-id="00dab-155">쿠키를 인코딩해야 하는 경우 <see langword="true" />이고, 디코딩해야 하는 경우 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-155"><see langword="true" /> if the cookie should be encoded; <see langword="false" /> if the cookie should be decoded.</span></span></param>
        <summary><span data-ttu-id="00dab-156">지정된 쿠키를 인코딩하거나 디코딩하기 위해 <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> 속성으로 지정된 변환을 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-156">Applies the transforms specified by the <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> property to either encode or decode the specified cookie.</span></span></summary>
        <returns><span data-ttu-id="00dab-157">인코딩 또는 디코딩된 쿠키입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-157">The encoded or decoded cookie.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-158">에 표시 된 순서로 적용 쿠키 인코딩을 변환 하는 경우는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-158">When encoding a cookie transforms are applied in the order in which they appear in the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> property.</span></span> <span data-ttu-id="00dab-159">쿠키를 디코딩, 반대 순서로 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-159">When decoding a cookie, they are applied in the reverse order.</span></span>  
  
 <span data-ttu-id="00dab-160">호출 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A> 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A> 를 인코딩 및 디코딩하는 쿠키 자료 메서드.</span><span class="sxs-lookup"><span data-stu-id="00dab-160">Called from the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A> and <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A> methods to encode and decode the cookie material.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="00dab-161"><see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> 속성은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-161">The <see cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" /> property is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public override bool CanReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanReadToken (reader As XmlReader) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="00dab-162">들어오는 <see cref="T:System.Xml.XmlReader" />에 대한  <see cref="T:System.IdentityModel.Tokens.SecurityToken" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-162">The <see cref="T:System.Xml.XmlReader" /> over the incoming <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</span></span> <span data-ttu-id="00dab-163">판독기는 <see langword="&lt;wsc:SecurityContextToken&gt;" /> 요소에 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-163">The reader should be positioned at a <see langword="&lt;wsc:SecurityContextToken&gt;" /> element.</span></span></param>
        <summary><span data-ttu-id="00dab-164">판독기가 <see langword="&lt;wsc:SecurityContextToken&gt;" /> 요소에 배치되었는지 여부를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-164">Returns a value that indicates whether the reader is positioned at a <see langword="&lt;wsc:SecurityContextToken&gt;" /> element.</span></span></summary>
        <returns>
          <span data-ttu-id="00dab-165">판독기가 <see langword="true" /> 요소를 가리키면 <see langword="&lt;wsc:SecurityContextToken&gt;" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-165"><see langword="true" /> if the reader points to a <see langword="&lt;wsc:SecurityContextToken&gt;" /> element; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00dab-166"><paramref name="reader" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-166"><paramref name="reader" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanValidateToken">
      <MemberSignature Language="C#" Value="public override bool CanValidateToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanValidateToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanValidateToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanValidateToken { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="00dab-167">이 처리기가 형식이 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />인 토큰의 유효성 검사를 지원하는지 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-167">Gets a value that indicates whether this handler supports validation of tokens of type <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</span></span></summary>
        <value>
          <span data-ttu-id="00dab-168">처리기가 형식이 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />인 토큰의 유효성 검사를 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-168"><see langword="true" /> if the handler supports validation of tokens of type <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="00dab-169">항상 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-169">Always <see langword="true" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteToken">
      <MemberSignature Language="C#" Value="public override bool CanWriteToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWriteToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWriteToken As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWriteToken { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="00dab-170">이 처리기가 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 형식의 토큰을 쓸 수 있는지 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-170">Gets a value that indicates whether this handler can write tokens of type <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</span></span></summary>
        <value>
          <span data-ttu-id="00dab-171">처리기가 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 형식의 토큰을 쓸 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-171"><see langword="true" /> if the handler can write tokens of type <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="00dab-172">항상 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-172">Always <see langword="true" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieElementName">
      <MemberSignature Language="C#" Value="public virtual string CookieElementName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CookieElementName" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CookieElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CookieElementName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="00dab-173">쿠키 요소의 이름을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-173">Gets the name for the cookie element.</span></span></summary>
        <value><span data-ttu-id="00dab-174">쿠키 요소의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-174">The name for the cookie element.</span></span> <span data-ttu-id="00dab-175">기본 요소 이름은 "쿠키"입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-175">The default element name is "Cookie".</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-176">이 속성에서 사용 되는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A> 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A> 요소는 인코딩된 토큰 자료를 작성 하거나 읽을 수를 확인 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="00dab-176">This property is used in the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A> and <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A> methods to determine the element under which the encoded token material should be written or read.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace" />
        <altmember cref="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)" />
        <altmember cref="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)" />
      </Docs>
    </Member>
    <Member MemberName="CookieNamespace">
      <MemberSignature Language="C#" Value="public virtual string CookieNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CookieNamespace" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CookieNamespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CookieNamespace { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="00dab-177">쿠키 요소의 네임스페이스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-177">Gets the namespace for the cookie element.</span></span></summary>
        <value><span data-ttu-id="00dab-178">쿠키 요소의 네임스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-178">The namespace for the cookie element.</span></span> <span data-ttu-id="00dab-179">기본 네임 스페이스는 "http://schemas.microsoft.com/ws/2006/05/security"입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-179">The default namespace is "http://schemas.microsoft.com/ws/2006/05/security".</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-180">이 속성에서 사용 되는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A> 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A> 는 인코딩된 토큰 자료를 작성 하거나 읽을 수는 요소의 네임 스페이스를 확인 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="00dab-180">This property is used in the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A> and <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A> methods to determine the namespace of the element under which the encoded token material should be written or read.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName" />
        <altmember cref="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)" />
        <altmember cref="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)" />
      </Docs>
    </Member>
    <Member MemberName="CreateSessionSecurityToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SessionSecurityToken CreateSessionSecurityToken (System.Security.Claims.ClaimsPrincipal principal, string context, string endpointId, DateTime validFrom, DateTime validTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SessionSecurityToken CreateSessionSecurityToken(class System.Security.Claims.ClaimsPrincipal principal, string context, string endpointId, valuetype System.DateTime validFrom, valuetype System.DateTime validTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSessionSecurityToken (principal As ClaimsPrincipal, context As String, endpointId As String, validFrom As DateTime, validTo As DateTime) As SessionSecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SessionSecurityToken ^ CreateSessionSecurityToken(System::Security::Claims::ClaimsPrincipal ^ principal, System::String ^ context, System::String ^ endpointId, DateTime validFrom, DateTime validTo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SessionSecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="endpointId" Type="System.String" />
        <Parameter Name="validFrom" Type="System.DateTime" />
        <Parameter Name="validTo" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="principal"><span data-ttu-id="00dab-181">클레임 보안 주체입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-181">The claims principal.</span></span></param>
        <param name="context"><span data-ttu-id="00dab-182">호출자 정의 컨텍스트 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-182">A caller-defined context string.</span></span></param>
        <param name="endpointId"><span data-ttu-id="00dab-183">토큰의 범위를 지정하는 끝점의 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-183">The identifier of the endpoint to which the token is scoped.</span></span></param>
        <param name="validFrom"><span data-ttu-id="00dab-184">토큰이 유효해지는 시간 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-184">The time instant at which the token becomes valid.</span></span></param>
        <param name="validTo"><span data-ttu-id="00dab-185">토큰이 더 이상 유효하지 않게 된 이후 시간 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-185">The time instant after which the token is no longer valid.</span></span></param>
        <summary><span data-ttu-id="00dab-186">지정된 클레임 보안 주체 및 토큰이 유효한 시간 범위를 기반으로 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-186">Creates a <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> based on the specified claims principal and time range during which the token is valid.</span></span></summary>
        <returns><span data-ttu-id="00dab-187">만든 세션 보안 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-187">The session security token that was created.</span></span> <span data-ttu-id="00dab-188">새 세션 토큰의 속성은 지정된 매개 변수에 따라 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-188">The properties on the new session token are set according to the specified parameters.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00dab-189"><paramref name="principal" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-189"><paramref name="principal" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="00dab-190"><see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 속성은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-190">The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateToken">
      <MemberSignature Language="C#" Value="public override System.IdentityModel.Tokens.SecurityToken CreateToken (System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IdentityModel.Tokens.SecurityToken CreateToken(class System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateToken (tokenDescriptor As SecurityTokenDescriptor) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IdentityModel::Tokens::SecurityToken ^ CreateToken(System::IdentityModel::Tokens::SecurityTokenDescriptor ^ tokenDescriptor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenDescriptor" Type="System.IdentityModel.Tokens.SecurityTokenDescriptor" />
      </Parameters>
      <Docs>
        <param name="tokenDescriptor"><span data-ttu-id="00dab-191">토큰을 만들 토큰 설명자입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-191">The token descriptor from which to create the token.</span></span></param>
        <summary><span data-ttu-id="00dab-192">지정한 토큰 설명자를 기반으로 보안 토큰을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-192">Creates a security token based on the specified token descriptor.</span></span></summary>
        <returns><span data-ttu-id="00dab-193">만든 보안 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-193">The security token that was created.</span></span> <span data-ttu-id="00dab-194">이는 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-194">This will be an instance of <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-195">만들고 토큰 설명자의 다음 속성을 사용 하 여 세션 보안 토큰을 반환: <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject%2A?displayProperty=nameWithType>, 및 <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-195">Creates and returns a session security token by using the following properties in the token descriptor: <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject%2A?displayProperty=nameWithType>, and <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="00dab-196">경우는 <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.SaveBootstrapContext%2A?displayProperty=nameWithType> 속성이 설정 되어 `true` 로 지정 된 토큰 처리기 구성에는 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> 속성 부트스트랩 컨텍스트가에서 만들어집니다는 <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Token%2A?displayProperty=nameWithType> 속성 세션 토큰에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-196">If the <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.SaveBootstrapContext%2A?displayProperty=nameWithType> property is set `true` on the token handler configuration specified by the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> property, the bootstrap context is created from the <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Token%2A?displayProperty=nameWithType> property and is saved in the session token.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00dab-197"><paramref name="tokenDescriptor" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-197"><paramref name="tokenDescriptor" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="00dab-198"><see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 속성은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-198">The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultCookieTransforms">
      <MemberSignature Language="C#" Value="public static readonly System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt; DefaultCookieTransforms;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.CookieTransform&gt; DefaultCookieTransforms" />
      <MemberSignature Language="DocId" Value="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultCookieTransforms As ReadOnlyCollection(Of CookieTransform) " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::CookieTransform ^&gt; ^ DefaultCookieTransforms;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="00dab-199">쿠키, <see cref="T:System.IdentityModel.DeflateCookieTransform" /> 및 <see cref="T:System.IdentityModel.ProtectedDataCookieTransform" />에 적용할 기본 변환 목록을 포함하고 있는 읽기 전용 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-199">A read only collection that contains the list of default transforms to be applied to cookies, the <see cref="T:System.IdentityModel.DeflateCookieTransform" /> and the <see cref="T:System.IdentityModel.ProtectedDataCookieTransform" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultLifetime">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan DefaultLifetime;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan DefaultLifetime" />
      <MemberSignature Language="DocId" Value="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultLifetime As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan DefaultLifetime;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="00dab-200">쿠키의 기본 수명을 지정하는 상수(10시간)입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-200">A constant that specifies the default lifetime for cookies, ten hours.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultTokenLifetime">
      <MemberSignature Language="C#" Value="public static TimeSpan DefaultTokenLifetime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan DefaultTokenLifetime" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultTokenLifetime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan DefaultTokenLifetime { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="00dab-201">기본 토큰 수명을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-201">Gets the default token lifetime.</span></span></summary>
        <value><span data-ttu-id="00dab-202">기본 토큰 수명입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-202">The default token lifetime.</span></span> <span data-ttu-id="00dab-203">항상 <see cref="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-203">Always <see cref="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenTypeIdentifiers">
      <MemberSignature Language="C#" Value="public override string[] GetTokenTypeIdentifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetTokenTypeIdentifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetTokenTypeIdentifiers () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetTokenTypeIdentifiers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="00dab-204">이 처리기에서 처리할 수 있는 토큰 형식의 토큰 형식 URI를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-204">Gets the token type URIs for the token types that can be processed by this handler.</span></span></summary>
        <returns><span data-ttu-id="00dab-205">이 처리기에서 처리할 수 있는 토큰 형식의 토큰 형식 식별자 URI입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-205">The token type identifier URIs for token types that can be processed by this handler.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-206">다음 형식 Uri 지원 됩니다: "http://schemas.microsoft.com/ws/2006/05/servicemodel/tokens/SecureConversation","http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/sct", 및 "http://schemas.xmlsoap.org/ws/2005/02/sc/sct"입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-206">The following type URIs are supported: "http://schemas.microsoft.com/ws/2006/05/servicemodel/tokens/SecureConversation", "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/sct", and "http://schemas.xmlsoap.org/ws/2005/02/sc/sct".</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public override void LoadCustomConfiguration (System.Xml.XmlNodeList customConfigElements);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList customConfigElements) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub LoadCustomConfiguration (customConfigElements As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void LoadCustomConfiguration(System::Xml::XmlNodeList ^ customConfigElements);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customConfigElements" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="customConfigElements"><span data-ttu-id="00dab-207">사용자 지정 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-207">The custom configuration elements.</span></span></param>
        <summary><span data-ttu-id="00dab-208">XML에서 사용자 지정 구성을 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-208">Loads custom configuration from XML.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-209">초기화 하는 구성 인프라에 의해 호출 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="00dab-209">Called by the configuration infrastructure to initialize the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> instance.</span></span> <span data-ttu-id="00dab-210">초기화 합니다는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A> 속성은 `lifetime` 특성에는 [ &lt;sessionTokenRequirement&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/sessiontokenrequirement.md) 구성 파일의 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-210">Initializes the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A> property from the `lifetime` attribute of the [&lt;sessionTokenRequirement&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/sessiontokenrequirement.md) element in the configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00dab-211"><paramref name="customConfigElements" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-211"><paramref name="customConfigElements" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="00dab-212"><paramref name="customConfigElements" />로 지정한 구성이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-212">The configuration specified by <paramref name="customConfigElements" /> is not valid.</span></span> <span data-ttu-id="00dab-213">예를 들어 <see langword="&lt;sessionTokenRequirement&gt;" /> 요소를 포함하지 않거나, 둘 이상의 <see langword="&lt;sessionTokenRequirement&gt;" /> 요소를 포함하거나, 유효한 <see cref="T:System.TimeSpan" /> 값을 <see langword="lifetime" /> 특성에서 읽을 수 없거나, <see langword="lifetime" /> 특성이 <see cref="F:System.TimeSpan.Zero" />보다 작은 값을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-213">For example, it does not contain a <see langword="&lt;sessionTokenRequirement&gt;" /> element, it contains more than one <see langword="&lt;sessionTokenRequirement&gt;" /> element, a valid <see cref="T:System.TimeSpan" /> value cannot be read from the <see langword="lifetime" /> attribute, or the <see langword="lifetime" /> attribute specifies a value that is less than <see cref="F:System.TimeSpan.Zero" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="00dab-214"><see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-214">Reads a <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-215">기본 구현은 Ws-secure Conversation Feb2005 또는 Ws-secure Conversation 1.3에서 토큰을 deserialize `<wsc:SecurityContextToken>` 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-215">The default implementation deserializes the token from either a WS-Secure Conversation Feb2005 or WS-Secure Conversation 1.3 `<wsc:SecurityContextToken>` element.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public override System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadToken (reader As XmlReader) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="00dab-216">들어오는 <see cref="T:System.Xml.XmlReader" />에 대한  <see cref="T:System.IdentityModel.Tokens.SecurityToken" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-216">The <see cref="T:System.Xml.XmlReader" /> over the incoming <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</span></span></param>
        <summary><span data-ttu-id="00dab-217">지정된 XML 판독기를 사용하여 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-217">Reads the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> using the specified XML reader.</span></span></summary>
        <returns><span data-ttu-id="00dab-218">읽은 세션 보안 토큰이며, <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-218">The session security token that was read, an instance of <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-219">테이블 또는 Ws-secure Conversation Feb2005 Ws-secure Conversation 1.3 판독기를 배치 해야 `<wsc:SecurityContextToken>` 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-219">The reader must be positioned at either a WS-Secure Conversation Feb2005 or a WS-Secure Conversation 1.3 `<wsc:SecurityContextToken>` element.</span></span>  
  
 <span data-ttu-id="00dab-220">기본 구현에서는 호출에서 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=nameWithType> 기본 토큰 확인 자가 사용 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-220">The default implementation invokes the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=nameWithType> method using a default token resolver.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00dab-221"><paramref name="reader" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-221"><paramref name="reader" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException"><span data-ttu-id="00dab-222">판독기가 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />에 배치되지 않거나 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />을 읽을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-222">The reader is not positioned at a <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> or the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> cannot be read.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (byte[] token, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(unsigned int8[] token, class System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadToken (token As Byte(), tokenResolver As SecurityTokenResolver) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ ReadToken(cli::array &lt;System::Byte&gt; ^ token, System::IdentityModel::Selectors::SecurityTokenResolver ^ tokenResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.Byte[]" />
        <Parameter Name="tokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
      </Parameters>
      <Docs>
        <param name="token"><span data-ttu-id="00dab-223">토큰이 들어 있는 바이트의 스트림입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-223">The stream of bytes that contains the token.</span></span></param>
        <param name="tokenResolver"><span data-ttu-id="00dab-224">사용할 토큰 확인자입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-224">The token resolver to use.</span></span></param>
        <summary><span data-ttu-id="00dab-225">지정된 토큰 확인자를 사용하여 바이트의 스트림에서 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-225">Reads the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> from a stream of bytes by using the specified token resolver.</span></span></summary>
        <returns><span data-ttu-id="00dab-226">읽은 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-226">The <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> that was read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-227">기본 구현은 만듭니다는 <xref:System.Xml.XmlDictionaryReader> 토큰을 통해 호출 하는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="00dab-227">The default implementation creates an <xref:System.Xml.XmlDictionaryReader> over the token and invokes the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public override System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadToken (reader As XmlReader, tokenResolver As SecurityTokenResolver) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IdentityModel::Tokens::SecurityToken ^ ReadToken(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenResolver ^ tokenResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="tokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="00dab-228">들어오는 <see cref="T:System.Xml.XmlReader" />에 대한  <see cref="T:System.IdentityModel.Tokens.SecurityToken" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-228">The <see cref="T:System.Xml.XmlReader" /> over the incoming <see cref="T:System.IdentityModel.Tokens.SecurityToken" />.</span></span></param>
        <param name="tokenResolver"><span data-ttu-id="00dab-229"><see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" />을 확인하는 데 사용할 수 있는 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-229">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that can used to resolve the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</span></span></param>
        <summary><span data-ttu-id="00dab-230"><see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />을 지정된 XML 판독기와 토큰 해결 프로그램으로 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-230">Reads the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> using the specified XML reader and token resolver.</span></span></summary>
        <returns><span data-ttu-id="00dab-231">읽은 세션 보안 토큰이며, <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-231">The session security token that was read, an instance of <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-232">테이블 또는 Ws-secure Conversation Feb2005 Ws-secure Conversation 1.3 판독기를 배치 해야 `<wsc:SecurityContextToken>` 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-232">The reader must be positioned at either a WS-Secure Conversation Feb2005 or a WS-Secure Conversation 1.3 `<wsc:SecurityContextToken>` element.</span></span>  
  
 <span data-ttu-id="00dab-233">인스턴스 토큰 캐시에서 읽힙니다 토큰 자료 캐시 되 면의 <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-233">If the token material is cached, it is read from the token cache, which is an instance of the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache> class.</span></span> <span data-ttu-id="00dab-234">자식 요소에서 토큰 자료는 읽기,는 `<wsc:SecurityContextToken>` 변수로 지정 된 요소는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A> 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A> 속성 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> 디코딩할 쿠키에 메서드가 호출 되어 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-234">Otherwise, the token material is read from the child element of the `<wsc:SecurityContextToken>` element that is specified by the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A> and <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A> properties and the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> method is invoked to decode the cookie.</span></span>  
  
 <span data-ttu-id="00dab-235">세션 토큰을 serialize 하는 방법에 대 한 자세한 내용은 `<SecurityContextToken` 요소 참조는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="00dab-235">For more information about how session tokens are serialized into a `<SecurityContextToken` element, see the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00dab-236"><paramref name="reader" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-236"><paramref name="reader" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="00dab-237">또는</span><span class="sxs-lookup"><span data-stu-id="00dab-237">-or-</span></span>  
  
 <span data-ttu-id="00dab-238"><paramref name="tokenResolver" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-238"><paramref name="tokenResolver" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException"><span data-ttu-id="00dab-239">판독기가 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />에 배치되지 않거나 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />을 읽을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-239">The reader is not positioned at a <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> or the <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> cannot be read.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetTransforms">
      <MemberSignature Language="C#" Value="protected void SetTransforms (System.Collections.Generic.IEnumerable&lt;System.IdentityModel.CookieTransform&gt; transforms);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetTransforms(class System.Collections.Generic.IEnumerable`1&lt;class System.IdentityModel.CookieTransform&gt; transforms) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetTransforms (transforms As IEnumerable(Of CookieTransform))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetTransforms(System::Collections::Generic::IEnumerable&lt;System::IdentityModel::CookieTransform ^&gt; ^ transforms);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transforms" Type="System.Collections.Generic.IEnumerable&lt;System.IdentityModel.CookieTransform&gt;" />
      </Parameters>
      <Docs>
        <param name="transforms"><span data-ttu-id="00dab-240">사용할 변환입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-240">The transforms to use.</span></span></param>
        <summary><span data-ttu-id="00dab-241">쿠키에 적용될 변환을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-241">Sets the transforms that will be applied to cookies.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-242">변환에서 반환 된 목록 설정에서 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-242">Sets the list of transforms returned by the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> property.</span></span> <span data-ttu-id="00dab-243">변환은 표시 되는 쿠키를 인코딩할 때 목록에서 한 역순으로 쿠키를 디코딩하는 경우에 순서 대로 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-243">Transforms will be applied in the order in which they appear in the list when encoding a cookie and in the reverse order when decoding a cookie.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="00dab-244">경우는 `transforms` 매개 변수는 `null`에서 예외가 throw 됩니다는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> 을 인코딩 또는 디코딩하려면 쿠키 호출 될 때 메서드.</span><span class="sxs-lookup"><span data-stu-id="00dab-244">If the `transforms` parameter is `null`, an exception will be thrown from the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> method when it is called to encode or decode the cookie.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenLifetime">
      <MemberSignature Language="C#" Value="public virtual TimeSpan TokenLifetime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TokenLifetime" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TokenLifetime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property TimeSpan TokenLifetime { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="00dab-245">토큰 수명을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-245">Gets or sets the token lifetime.</span></span></summary>
        <value><span data-ttu-id="00dab-246">토큰 수명입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-246">The token lifetime.</span></span> <span data-ttu-id="00dab-247">기본값은 <see cref="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-247">The default is <see cref="F:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-248">기본적으로 하는 경우는 [ &lt;sessionTokenRequirement&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/sessiontokenrequirement.md) 구성 파일에 지정 된 요소가 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A> 속성의 값으로 초기화 되는 `lifetime` 는기준특성<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="00dab-248">By default, if the [&lt;sessionTokenRequirement&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/sessiontokenrequirement.md) element is specified in the configuration file, the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A> property is initialized to the value of the `lifetime` attribute by the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="00dab-249">0보다 작거나 같은 시간 범위를 설정하려는 시도가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-249">An attempt to set a time span that is less than or equal to zero occurs.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public override Type TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TokenType" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TokenType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ TokenType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="00dab-250">이 처리기가 처리하는 토큰의 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-250">Gets the type of the tokens that this handler processes.</span></span></summary>
        <value><span data-ttu-id="00dab-251"><see cref="T:System.Type" />의 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-251">The <see cref="T:System.Type" /> of <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transforms">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt; Transforms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.CookieTransform&gt; Transforms" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transforms As ReadOnlyCollection(Of CookieTransform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::CookieTransform ^&gt; ^ Transforms { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::CookieTransform ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.CookieTransform&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="00dab-252">쿠키에 적용할 변환을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-252">Gets the transforms that will be applied to the cookie.</span></span></summary>
        <value><span data-ttu-id="00dab-253">쿠키에 적용할 변환 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-253">The list of transforms that will be applied to the cookie.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-254">에 변환을 적용 되는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="00dab-254">The transforms are applied in the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateSession">
      <MemberSignature Language="C#" Value="protected virtual void ValidateSession (System.IdentityModel.Tokens.SessionSecurityToken securityToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateSession(class System.IdentityModel.Tokens.SessionSecurityToken securityToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateSession (securityToken As SessionSecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ValidateSession(System::IdentityModel::Tokens::SessionSecurityToken ^ securityToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityToken" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
      </Parameters>
      <Docs>
        <param name="securityToken"><span data-ttu-id="00dab-255">검사할 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-255">The token to be checked.</span></span></param>
        <summary><span data-ttu-id="00dab-256">지정된 토큰과 연결된 세션이 여전히 유효한지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-256">Determines whether the session associated with the specified token is still valid.</span></span> <span data-ttu-id="00dab-257">유효성 검사는 지정된 토큰의 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" /> 및 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> 속성을 확인하여 결정됩니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-257">Validity is determined by checking the <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" /> and <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> properties of the specified token.</span></span> <span data-ttu-id="00dab-258">세션이 더 이상 유효하지 않은 경우 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-258">An exception is thrown if the session is no longer valid.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-259">토큰이 유효 하지 않은 경우 해당 <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> 나중에 발생 하는 값이 속성은 보다 <xref:System.DateTime.UtcNow%2A>, 또는 해당 <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> 발생 하는 값이 속성은 이전의 <xref:System.DateTime.UtcNow%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-259">The token is not valid if its <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> property is set to a value that occurs later than <xref:System.DateTime.UtcNow%2A>, or if its <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> property is set to a value that occurs earlier than <xref:System.DateTime.UtcNow%2A>.</span></span>  
  
 <span data-ttu-id="00dab-260">호출 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%2A> 세션 유효성을 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-260">Called from the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%2A> methods to validate the session.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00dab-261"><paramref name="securityToken" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-261"><paramref name="securityToken" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="00dab-262"><see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> 속성은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-262">The <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" /> property is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException"><span data-ttu-id="00dab-263">토큰의 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" /> 속성이 <see cref="P:System.DateTime.UtcNow" /> 이후입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-263">The <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" /> property of the token is later than <see cref="P:System.DateTime.UtcNow" />.</span></span></exception>
        <exception cref="T:System.IdentityModel.Tokens.SecurityTokenExpiredException"><span data-ttu-id="00dab-264">토큰의 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> 속성이 <see cref="P:System.DateTime.UtcNow" /> 이전입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-264">The <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> property of the token is earlier than <see cref="P:System.DateTime.UtcNow" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="00dab-265">토큰의 유효성을 검사하고 해당 클레임을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-265">Validates a token and returns its claims.</span></span></summary>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateToken">
      <MemberSignature Language="C#" Value="public override System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt; ValidateToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Security.Claims.ClaimsIdentity&gt; ValidateToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ValidateToken (token As SecurityToken) As ReadOnlyCollection(Of ClaimsIdentity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Security::Claims::ClaimsIdentity ^&gt; ^ ValidateToken(System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token"><span data-ttu-id="00dab-266">유효성을 검사할 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-266">The token to be validated.</span></span> <span data-ttu-id="00dab-267"><see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />에서 할당할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-267">Must be assignable from <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</span></span></param>
        <summary><span data-ttu-id="00dab-268">지정된 토큰의 유효성을 검사하고 해당 클레임을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-268">Validates the specified token and returns its claims.</span></span></summary>
        <returns><span data-ttu-id="00dab-269">토큰에 포함된 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-269">The identities that are contained in the token.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-270">호출 된 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession%2A> 메서드 토큰 유효성 검사를 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-270">Invokes the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession%2A> method to validate the token.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00dab-271"><paramref name="token" />
          <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="00dab-271"><paramref name="token" />
<see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="00dab-272"><paramref name="token" />은 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />에서 할당할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-272"><paramref name="token" /> is not assignable from <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</span></span></exception>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken" />
      </Docs>
    </Member>
    <Member MemberName="ValidateToken">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt; ValidateToken (System.IdentityModel.Tokens.SessionSecurityToken token, string endpointId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Security.Claims.ClaimsIdentity&gt; ValidateToken(class System.IdentityModel.Tokens.SessionSecurityToken token, string endpointId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateToken (token As SessionSecurityToken, endpointId As String) As ReadOnlyCollection(Of ClaimsIdentity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Security::Claims::ClaimsIdentity ^&gt; ^ ValidateToken(System::IdentityModel::Tokens::SessionSecurityToken ^ token, System::String ^ endpointId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
        <Parameter Name="endpointId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="token"><span data-ttu-id="00dab-273">유효성을 검사할 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-273">The token to be validated.</span></span> <span data-ttu-id="00dab-274"><see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />에서 할당할 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-274">Must be assignable from <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</span></span></param>
        <param name="endpointId"><span data-ttu-id="00dab-275">토큰의 범위를 지정하는 끝점의 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-275">The identifier of the endpoint to which the token is scoped.</span></span></param>
        <summary><span data-ttu-id="00dab-276">지정된 세션 토큰의 유효성을 검사하고 해당 클레임을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-276">Validates the specified session token and returns its claims.</span></span></summary>
        <returns><span data-ttu-id="00dab-277">토큰에 포함된 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-277">The identities that are contained in the token.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-278">수행 되도록 지정된 된 토큰 범위 지정 된 끝점 ID에 한,이 경우 호출 하는 검사는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> 메서드도 있습니다; 그렇지 않으면 throw는 <xref:System.IdentityModel.Tokens.SecurityTokenException>합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-278">Performs a check to make sure that the specified token is scoped for the specified endpoint ID and, if so, invokes the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> method; otherwise, throws a <xref:System.IdentityModel.Tokens.SecurityTokenException>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00dab-279">세션 토큰을는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A> 않는 속성이 `null` 빈 범위를 전역으로 지정할 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-279">Session tokens that have an <xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A> property that is `null` or empty are considered to be globally scoped.</span></span> <span data-ttu-id="00dab-280">이 인해 잠재적인 보안 위험이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-280">This presents a potential security risk.</span></span> <span data-ttu-id="00dab-281">이러한 이유로 확인 해야 하는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A> 세션 토큰에서 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-281">For this reason you should make sure that the <xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A> property is set in your session tokens.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00dab-282"><paramref name="token" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-282"><paramref name="token" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="00dab-283">또는</span><span class="sxs-lookup"><span data-stu-id="00dab-283">-or-</span></span>  
  
 <span data-ttu-id="00dab-284"><paramref name="endpointId" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-284"><paramref name="endpointId" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="00dab-285"><paramref name="token" />은 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />에서 할당할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-285"><paramref name="token" /> is not assignable from <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</span></span></exception>
        <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException"><span data-ttu-id="00dab-286">지정된 토큰의 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId" /> 속성이 <see langword="null" />이 아니거나 비어 있고 해당 값이 <paramref name="endpointId" /> 매개 변수로 지정된 값과 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-286">The <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId" /> property of the specified token is not <see langword="null" /> or empty and its value is different than that specified by the <paramref name="endpointId" /> parameter.</span></span></exception>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="00dab-287">토큰을 serialize합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-287">Serializes a token.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-288">기본 구현은 Ws-secure Conversation Feb2005 또는 Ws-secure Conversation 1.3에 토큰을 serialize `<wsc:SecurityContextToken>` 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-288">The default implementation serializes the token into either a WS-Secure Conversation Feb2005 or WS-Secure Conversation 1.3 `<wsc:SecurityContextToken>` element.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken" />
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public virtual byte[] WriteToken (System.IdentityModel.Tokens.SessionSecurityToken sessionToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] WriteToken(class System.IdentityModel.Tokens.SessionSecurityToken sessionToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteToken (sessionToken As SessionSecurityToken) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ WriteToken(System::IdentityModel::Tokens::SessionSecurityToken ^ sessionToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionToken" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
      </Parameters>
      <Docs>
        <param name="sessionToken"><span data-ttu-id="00dab-289">쓸 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-289">The token to write.</span></span></param>
        <summary><span data-ttu-id="00dab-290">지정된 토큰을 바이트 배열에 serialize합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-290">Serializes the specified token into a byte array.</span></span></summary>
        <returns><span data-ttu-id="00dab-291">인코딩된 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-291">An encoded byte array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-292">통해 만들고 XML 작성기 하 여 지정된 된 토큰을 serialize 한 <xref:System.IO.MemoryStream> 을 호출 하는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="00dab-292">Serializes the specified token by creating and XML writer over a <xref:System.IO.MemoryStream> and invoking the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="00dab-293">자세한 내용을 보려면 오버 로드 하는 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="00dab-293">See that overload for more details.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00dab-294"><paramref name="sessiontoken" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-294"><paramref name="sessiontoken" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken" />
      </Docs>
    </Member>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public override void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteToken(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteToken (writer As XmlWriter, token As SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteToken(System::Xml::XmlWriter ^ writer, System::IdentityModel::Tokens::SecurityToken ^ token);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="00dab-295">토큰을 serialize할 XML 작성기입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-295">The XML writer with which to serialize the token.</span></span></param>
        <param name="token"><span data-ttu-id="00dab-296">serialize할 토큰입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-296">The token to serialize.</span></span> <span data-ttu-id="00dab-297"><see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-297">An instance of <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</span></span></param>
        <summary><span data-ttu-id="00dab-298">지정된 XML 작성기를 사용하여 지정된 토큰을 serialize합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-298">Serializes the specified token by using the specified XML writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00dab-299">기본 구현은 Ws-secure Conversation Feb2005 또는 Ws-secure Conversation 1.3 지정된 된 토큰을 serialize `<wsc:SecurityContextToken>` 값에 따라 요소는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-299">The default implementation serializes the specified token as either a WS-Secure Conversation Feb2005 or WS-Secure Conversation 1.3 `<wsc:SecurityContextToken>` element, depending on the value of the <xref:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="00dab-300"><xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A?displayProperty=nameWithType> 속성으로 serialize 되는 `Id` 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-300">The <xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A?displayProperty=nameWithType> property is serialized as the `Id` attribute.</span></span> <span data-ttu-id="00dab-301"><xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=nameWithType> 속성으로 serialize 되는 `<Identifier>` 자식 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-301">The <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=nameWithType> property is serialized as the `<Identifier>` child element.</span></span> <span data-ttu-id="00dab-302">그렇지 않은 경우 `null` 는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=nameWithType> 속성으로 serialize 되는 `<Instance>` 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-302">If not `null` the <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=nameWithType> property is serialized as an `<Instance>` element.</span></span> <span data-ttu-id="00dab-303">마지막으로, 하는 경우는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=nameWithType> 속성은 `false`, 전체 토큰이 전달 되는 이진 배열로 serialize 되는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> 메서드를 인코딩할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-303">Finally, if the <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=nameWithType> property is `false`, the entire token is serialized into binary array which is passed to the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> method to be encoded.</span></span> <span data-ttu-id="00dab-304">인코딩된 토큰이 base64 인코딩 값으로에 기록 된 요소와 지정 된 네임 스페이스는 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A> 및 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-304">The encoded token is then written as a base64 encoded value to the element and namespace specified by the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A> and <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A> properties.</span></span> <span data-ttu-id="00dab-305">경우는 <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=nameWithType> 속성은 `true`, 토큰은 serialize 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-305">If the <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=nameWithType> property is `true`, the token is not serialized.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00dab-306"><paramref name="writer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-306"><paramref name="writer" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="00dab-307">또는</span><span class="sxs-lookup"><span data-stu-id="00dab-307">-or-</span></span>  
  
 <span data-ttu-id="00dab-308"><paramref name="token" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="00dab-308"><paramref name="token" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="00dab-309"><paramref name="token" />은 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />에서 할당할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-309"><paramref name="token" /> is not assignable from <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />.</span></span>  
  
 <span data-ttu-id="00dab-310">또는</span><span class="sxs-lookup"><span data-stu-id="00dab-310">-or-</span></span>  
  
 <span data-ttu-id="00dab-311">토큰의 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion" />는 처리기가 지원하지 않는 WS-Secure Conversation 버전을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="00dab-311">The <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion" /> of the token specifies a version of WS-Secure Conversation that is not supported by the handler.</span></span></exception>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken" />
      </Docs>
    </Member>
  </Members>
</Type>