<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SecurityTokenHandler.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5cbb9943aefb6ba2f295be7ff7f864be1ec607810.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cbb9943aefb6ba2f295be7ff7f864be1ec607810</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The abstract base class for security token handlers.</source>
          <target state="translated">보안 토큰 처리기에 대한 추상 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> class is the base class from which all security token handlers derive.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> 클래스는 모든 보안 토큰 처리기 파생 되는 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>A security token handler is responsible for:</source>
          <target state="translated">보안 토큰 처리기는 담당 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Validating security tokens (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityToken&gt;</ph>) of the type it is designed to process and packaging the claims contained in the token into a <ph id="ph2">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> object.</source>
          <target state="translated">보안 토큰의 유효성 검사 (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityToken&gt;</ph>) 프로세스를 패키징 클레임에는 토큰에 포함 하도록 설계 된 형식의 한 <ph id="ph2">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Serializing and deserializing security tokens of the type it is designed to process.</source>
          <target state="translated">직렬화 및 역직렬화 형식의 보안 토큰 처리 하도록 설계 되었습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Serializing and deserializing key identifier clauses (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>) that refer to tokens of the type it is designed to process to and from <ph id="ph2">`&lt;wsse:SecurityTokenReference&gt;`</ph> elements.</source>
          <target state="translated">직렬화 및 역직렬화 키 식별자 절 (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>)에서 처리 하도록 설계 되었습니다 형식의 토큰을 참조 하는 <ph id="ph2">`&lt;wsse:SecurityTokenReference&gt;`</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Creating security tokens from a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenDescriptor&gt;</ph> object passed by implementations of the <ph id="ph2">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
          <target state="translated">보안 토큰을 만들기는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenDescriptor&gt;</ph> 의 구현으로 전달 된 개체는 <ph id="ph2">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Creating key identifier clauses from a security token for implementations of the <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
          <target state="translated">구현에 대 한 보안 토큰에서 키 식별자 절을 만드는 <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Windows Identity Foundation (WIF) ships the following security token handlers out of the box:</source>
          <target state="translated">즉시 다음과 같은 보안 토큰 처리기를 제공 하는 Windows Identity Foundation (WIF):</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Most of these classes expose additional members that implement functionality that is specific to the processing of the tokens for which the class is designed.</source>
          <target state="translated">이 클래스는 클래스는 토큰의 처리에 관련 된 기능을 구현 하는 추가 멤버를 노출 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>In many cases it may be better to derive from one of these classes rather than directly from the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> class.</source>
          <target state="translated">대부분의 경우에서에서 직접 읽지 못하고 이러한 클래스 중 하나에서 파생 되는 것이 더 수 있습니다는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>A security token handler can be added or removed from  a token handler collection by specifying the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>add<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)</ept>, <bpt id="p2">[</bpt><ph id="ph3">&amp;lt;</ph>remove<ph id="ph4">&amp;gt;</ph><ept id="p2">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md)</ept>, or <bpt id="p3">[</bpt><ph id="ph5">&amp;lt;</ph>clear<ph id="ph6">&amp;gt;</ph><ept id="p3">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md)</ept> elements under the <bpt id="p4">[</bpt><ph id="ph7">&amp;lt;</ph>securityTokenHandlers<ph id="ph8">&amp;gt;</ph><ept id="p4">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md)</ept> element in a configuration file.</source>
          <target state="translated">보안 토큰 처리기를 추가 하거나 지정 하 여 토큰 처리기 컬렉션에서 제거할 수는 <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>추가<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)</ept>, <bpt id="p2">[</bpt> <ph id="ph3">&amp;lt;</ph>제거<ph id="ph4">&amp;gt;</ph><ept id="p2">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/remove.md)</ept>, 또는 <bpt id="p3">[</bpt> <ph id="ph5">&amp;lt;</ph>지우기<ph id="ph6">&amp;gt;</ph> <ept id="p3">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/clear.md)</ept> 아래의 요소는 <bpt id="p4">[</bpt> <ph id="ph7">&amp;lt;</ph>securityTokenHandlers<ph id="ph8">&amp;gt;</ph> <ept id="p4">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlers.md)</ept> 구성 파일의 요소입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration&gt;</ph> object that contains the configuration settings for the handler collection can be accessed through the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property and the handler collection that the token handler is a member of can be accessed from the <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration&gt;</ph> 처리기 컬렉션에 대 한 구성 설정이 포함 된 개체를 통해 액세스할 수는 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> 속성과 토큰 처리기의 구성원 인 처리기 컬렉션에서 액세스할 수는 <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>You can override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A&gt;</ph> method to process any custom configuration elements that your handler takes.</source>
          <target state="translated">재정의할 수 있습니다는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A&gt;</ph> 처리기를 사용 하는 모든 사용자 지정 구성 요소를 처리 하기 위해 메서드.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> class exposes several other properties and methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> 클래스는 다른 여러 속성 및 메서드를 노출 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Depending on the functionality that you choose to implement, you may override some or all of these members.</source>
          <target state="translated">구현 하도록 선택한 기능에 따라 이러한 멤버의 일부나 전부를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>You must override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> method to provide the WIF infrastructure with information about the type of security token that your class is designed to process.</source>
          <target state="translated">재정의 해야 합니다는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> 속성 및 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> 메서드 클래스는 보안 토큰의 형식에 대 한 정보는 WIF 인프라를 처리 하도록 설계 되었습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Validation, serialization, and deserialization functionality is exposed through properties or methods that indicate whether the handler can perform a specific function combined with the method or methods that implement the functionality.</source>
          <target state="translated">유효성 검사, serialization 및 deserialization 속성이 나 처리기 메서드 또는 기능을 구현 하는 메서드를 함께 특정 기능을 수행할 수 있는지 여부를 나타내는 방법을 통해 기능이 노출 됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The following list pairs the properties or methods that indicate functionality with the methods that implement that functionality:</source>
          <target state="translated">다음 목록에는 속성 또는 해당 기능을 구현 하는 방법을 사용 하 여 기능을 나타내는 방법을 쌍:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A&gt;</ph> property and  the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method: Validates a token and packages the claims contained in the token into a <ph id="ph3">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A&gt;</ph> 속성 및 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> 메서드:에 대 한 토큰에 포함 된 클레임을 패키지 하 고 토큰의 유효성을 검사 한 <ph id="ph3">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> methods: Token serialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> 속성 및 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> 메서드: serialization 토큰입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A&gt;</ph> methods and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A&gt;</ph> methods: Token deserialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A&gt;</ph> 메서드 및 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A&gt;</ph> 메서드: deserialization 토큰입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A&gt;</ph> method: Deserializing key identifier clauses.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph> 메서드 및 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A&gt;</ph> 메서드: 키 식별자 절을 역직렬화 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A&gt;</ph> method: Serializing key identifier clauses.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph> 메서드 및 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A&gt;</ph> 메서드: 키 식별자 절을 직렬화 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A&gt;</ph> methods are called from the pipeline in implementations of the <ph id="ph3">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A&gt;</ph> 메서드 구현에서 파이프라인에서 호출 됩니다는 <ph id="ph3">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A&gt;</ph> method is called by the WIF infrastructure to determine whether the specified token has already been received.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A&gt;</ph> 지정한 토큰이 이미 수신 여부를 결정 하는 WIF 인프라 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>By default this method returns <ph id="ph1">`false`</ph>, which indicates that the token has not already been received.</source>
          <target state="translated">기본적으로이 메서드는 다음과 같이 반환 됩니다. <ph id="ph1">`false`</ph>을 나타내는 토큰이 아직 수신 되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>You can override the method and provide logic to detect replayed tokens.</source>
          <target state="translated">메서드를 재정의할 수 있으며 재생 된 토큰을 검색 하는 논리를 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The code examples in all of the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> topics are taken from the <ph id="ph2">`Custom Token`</ph> sample.</source>
          <target state="translated">모든 코드 예제는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler&gt;</ph> 항목에서 가져온는 <ph id="ph2">`Custom Token`</ph> 샘플.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">이 예제는 단순 웹 토큰 (SWT)의 처리를 사용 하는 사용자 지정 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">이 샘플 및 WIF 및 다운로드 위치를 사용할 수 있는 다른 샘플에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>WIF 코드 샘플 인덱스<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The following XML shows how to add the SWT token handler to the token handlers collection.</source>
          <target state="translated">다음 XML SWT 토큰 처리기 토큰 처리기 컬렉션에 추가 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.#ctor">
          <source>Called from constructors in derived classes to initialize the <ph id="ph1">&lt;see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /&gt;</ph> 클래스를 초기화하기 위해 파생 클래스의 생성자에서 호출됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>An XML reader positioned at the start element.</source>
          <target state="translated">시작 요소에 배치된 XML 판독기입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>The reader should not be advanced by this method.</source>
          <target state="translated">판독기를 이 메서드에 의해 이동해서는 안 됩니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>Returns a value that indicates whether the XML element referred to by the specified XML reader is a key identifier clause that can be deserialized by this instance.</source>
          <target state="translated">지정된 XML 리더기가 키 식별자 절로 언급된 XML 요소가 이 인스턴스에 의해 역직렬화될 수 있는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /&gt;</ph> method can read the element; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /&gt;</ph> 메서드가 요소를 읽을 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>The default implementation returns <ph id="ph1">`false`</ph> to indicate that the key identifier clause cannot be read.</source>
          <target state="translated">기본 구현은 반환 <ph id="ph1">`false`</ph> 를 나타내는 키 식별자 절을 읽을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a key identifier clause.</source>
          <target state="translated">파생된 클래스는 인스턴스 키 식별자 절을 deserialize 할 수 있는지 여부를 결정 하기 위해 판독기가 참조 하는 요소를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>This is typically accomplished through a call to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=nameWithType&gt;</ph> method with the appropriate element and namespace strings specified.</source>
          <target state="translated">호출을 통해 일반적으로 이렇게는 <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=nameWithType&gt;</ph> 메서드를 지정 하는 적절 한 요소와 네임 스페이스 문자열.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>If you override <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>, you must also override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A&gt;</ph> method to provide the logic to deserialize the key identifier clause.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>를 재정의 해야는 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A&gt;</ph> 키 식별자 절을 deserialize 하는 데 논리를 제공 하는 메서드.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>Returns a value that indicates whether the specified token can be deserialized as a token of the type processed by this instance.</source>
          <target state="translated">지정된 토큰이 이 인스턴스에 의해 처리한 형식의 토큰으로 역직렬화될 수 있는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source>The token string to read.</source>
          <target state="translated">읽을 토큰 문자열입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source>Returns a value that indicates whether the specified string can be deserialized as a token of the type processed by this instance.</source>
          <target state="translated">지정된 문자열이 이 인스턴스에 의해 처리한 형식의 토큰으로 역직렬화될 수 있는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /&gt;</ph> method can read the element; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /&gt;</ph> 메서드가 요소를 읽을 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source>The default implementation always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">기본 구현에서는 항상 <ph id="ph1">`false`</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)">
          <source>If you override this method, you must also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> method to provide the logic to deserialize the token.</source>
          <target state="translated">이 메서드를 재정의 하는 경우 재정의 해야는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> 메서드 토큰을 deserialize 하는 데 논리를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>An XML reader positioned at a start element.</source>
          <target state="translated">시작 요소에 배치된 XML 판독기입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>The reader should not be advanced by this method.</source>
          <target state="translated">판독기를 이 메서드에 의해 이동해서는 안 됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>Returns a value that indicates whether the XML element referenced by the specified XML reader can be read as a token of the type processed by this instance.</source>
          <target state="translated">지정된 XML 리더기에 의해 참조된 XML 요소가 이 인스턴스에 의해 처리한 형식의 토큰으로 읽힐 수 있는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /&gt;</ph> method can read the element; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /&gt;</ph> 메서드가 요소를 읽을 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>The default implementation always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">기본 구현에서는 항상 <ph id="ph1">`false`</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>A derived class checks the element that the reader is referring to in order to determine whether the instance can deserialize a security token.</source>
          <target state="translated">파생된 클래스 인스턴스가 보안 토큰을 deserialize 할 수 있는지 여부를 결정 하기 위해 판독기가 참조 하는 요소를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>This is typically accomplished through a call to the <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A&gt;</ph> method with the appropriate element and namespace strings specified.</source>
          <target state="translated">호출을 통해 일반적으로 이렇게는 <ph id="ph1">&lt;xref:System.Xml.XmlReader.IsStartElement%2A&gt;</ph> 메서드를 지정 하는 적절 한 요소와 네임 스페이스 문자열.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>If you override <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>, you must also override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> method or the <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> method to provide the logic to deserialize the key identifier clause.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A&gt;</ph>를 재정의 해야는 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> 메서드 또는 <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> 키 식별자 절을 deserialize 하는 데 논리를 제공 하는 메서드.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A&gt;</ph> method to determine whether a token can be read by a handler.</source>
          <target state="translated">다음 코드에서는 재정의 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A&gt;</ph> 메서드를 처리기에서 토큰을 읽을 수 있는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">코드에서 가져온 것은 <ph id="ph1">`Custom Token`</ph> 샘플.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">이 예제는 단순 웹 토큰 (SWT)의 처리를 사용 하는 사용자 지정 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">이 샘플 및 WIF 및 다운로드 위치를 사용할 수 있는 다른 샘플에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>WIF 코드 샘플 인덱스<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>Gets a value that indicates whether the handler supports validation of security tokens.</source>
          <target state="translated">처리기가 보안 토큰의 유효성 검사를 지원하는지 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the class is capable of validating security tokens; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">클래스가 보안 토큰에 대한 유효성을 검사할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>To implement validation in a derived class, override this property to return <ph id="ph1">`true`</ph> and override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method to implement the validation logic.</source>
          <target state="translated">파생된 클래스에서 유효성 검사를 구현 하려면 반환 하도록이 속성을 재정의 <ph id="ph1">`true`</ph> 재정의 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> 메서드를 유효성 검사 논리를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A&gt;</ph> property to indicate that a custom handler can validate tokens.</source>
          <target state="translated">다음 코드를 재정의 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A&gt;</ph> 사용자 지정 처리기 토큰 유효성을 검사할 수를 나타내는 속성입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">코드에서 가져온 것은 <ph id="ph1">`Custom Token`</ph> 샘플.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">이 예제는 단순 웹 토큰 (SWT)의 처리를 사용 하는 사용자 지정 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">이 샘플 및 WIF 및 다운로드 위치를 사용할 수 있는 다른 샘플에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>WIF 코드 샘플 인덱스<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The key identifier clause to be checked.</source>
          <target state="translated">확인할 키 식별자 절입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>Returns a value that indicates whether the specified key identifier clause can be serialized by this instance.</source>
          <target state="translated">이 인스턴스가 지정된 키 식별자 절을 serialize할 수 있는지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the key identifier clause can be serialized; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">키 식별자 절을 serialize할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The default implementation always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">기본 구현에서는 항상 <ph id="ph1">`false`</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>If you override <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph>, you must also override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A&gt;</ph> method to provide the logic to serialize the key identifier clause.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph>를 재정의 해야는 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A&gt;</ph> 키 식별자 절을 serialize 하는 논리를 제공 하는 메서드.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>Gets a value that indicates whether the handler can serialize security tokens.</source>
          <target state="translated">처리기가 보안 토큰을 serialize할 수 있는지 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the class is capable of serializing tokens; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">클래스가 토큰을 serialize할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>To implement serialization in a derived class, override this property to return <ph id="ph1">`true`</ph> and override the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> methods to implement the serialization logic.</source>
          <target state="translated">파생된 클래스에서 serialization을 구현 하려면이 속성이 반환 하도록 재정의 <ph id="ph1">`true`</ph> 재정의 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> 직렬화 논리를 구현 하는 메서드.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property to indicate that a custom handler can serialize tokens.</source>
          <target state="translated">다음 코드에서는 재정의 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> 사용자 지정 처리기가 토큰을 serialize 할 수 있는지를 나타내는 속성입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">코드에서 가져온 것은 <ph id="ph1">`Custom Token`</ph> 샘플.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">이 예제는 단순 웹 토큰 (SWT)의 처리를 사용 하는 사용자 지정 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">이 샘플 및 WIF 및 다운로드 위치를 사용할 수 있는 다른 샘플에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>WIF 코드 샘플 인덱스<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /&gt;</ph> object that provides configuration for the current instance.</source>
          <target state="translated">현재 인스턴스에 대한 구성을 제공하는 <ph id="ph1">&lt;see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /&gt;</ph> 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration">
          <source>The configuration object for the current instance.</source>
          <target state="translated">현재 현스턴스에 대한 구성 개체입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property is typically set by the configuration infrastructure from the <bpt id="p1">[</bpt><ph id="ph2">&amp;lt;</ph>securityTokenHandlerConfiguration<ph id="ph3">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md)</ept> element in the configuration file during application start up.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> 속성은 일반적으로에서 구성 인프라에서 설정 된 <bpt id="p1">[</bpt> <ph id="ph2">&amp;lt;</ph>securityTokenHandlerConfiguration<ph id="ph3">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md)</ept> 하는 동안 응용 프로그램 구성 파일의 요소를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration">
          <source>In derived classes, you use the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property to access configuration settings; for example, the issuer name registry to use in the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method can be accessed from the <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType&gt;</ph> property of the configuration object.</source>
          <target state="translated">파생된 클래스에서 사용 하는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> 구성 설정에 액세스 하려면 속성; 예를 들어, 발급자 이름 레지스트리에서 사용 하는 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> 메서드에서 액세스할 수는 <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType&gt;</ph> 구성 개체의 속성입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection">
          <source>Gets the token handler collection that contains the current instance.</source>
          <target state="translated">현재 인스턴스를 포함하는 토큰 처리기 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection">
          <source>The token handler collection that contains the current instance.</source>
          <target state="translated">현재 인스턴스를 포함하는 토큰 처리기 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection">
          <source>When the token handler is added to a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection&gt;</ph> instance, this property is automatically set.</source>
          <target state="translated">토큰 처리기에 추가 된 경우는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection&gt;</ph> 인스턴스,이 속성이 자동 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>The token for which the reference is to be created.</source>
          <target state="translated">참조가 만들어지는 토큰입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an attached reference should be created; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if an unattached reference should be created.</source>
          <target state="translated">연결된 참조를 만들어야 하는 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 연결되지 않은 참조를 만들어야 하는 경우 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>When overridden in a derived class, creates the security token reference for tokens processed by that class.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 해당 클래스에 의해 처리되는 토큰에 대한 보안 토큰 참조를 만듭니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>This method is typically called by a security token service (STS).</source>
          <target state="translated">이 메서드는 STS(보안 토큰 서비스)에 의해 호출됩니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>A key identifier clause that references the specified token.</source>
          <target state="translated">지정된 토큰을 참조하는 키 식별자 절입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">기본적으로이 메서드에서 throw 된 <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>Derived classes override this method to return a key identifier clause (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>) that can be used to create a <ph id="ph2">`&lt;wsse:SecurityTokenReference&gt;`</ph> element for the specified token.</source>
          <target state="translated">파생된 클래스는 키 식별자 절을 반환 하려면이 메서드를 재정의 (<ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph>) 만드는 데 사용할 수 있는 한 <ph id="ph2">`&lt;wsse:SecurityTokenReference&gt;`</ph> 지정된 된 토큰에 대 한 요소입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>Called from implementations of the <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
          <target state="translated">구현에서 호출 된 <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>Typically, a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph> does not need to be used, other than when a custom security token service is created.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause&gt;</ph> 사용할 아닌 다른 사용자 지정 보안 토큰 서비스를 만들 때 필요 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens.</source>
          <target state="translated">보안 토큰 서비스에서 보안 토큰을 반환할 때 발급된 보안 토큰에는 연결된 보안 토큰과 연결되지 않은 보안 토큰에 대한 참조가 포함되어 있습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references reference security tokens that are not included within the security header of a SOAP message.</source>
          <target state="translated">연결된 참조는 SOAP 메시지의 보안 헤더에 포함된 보안 토큰을 나타내며 연결되지 않은 참조는 SOAP 메시지의 보안 헤더에 포함되지 않은 보안 토큰을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>These references typically affirm the authenticity of the issued security token.</source>
          <target state="translated">일반적으로 이러한 참조는 발급된 보안 토큰의 신뢰성을 확인합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A&gt;</ph> method to create a key identifier clause from the specified token.</source>
          <target state="translated">다음 코드에서는 재정의 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A&gt;</ph> 메서드를 지정된 된 토큰에서 키 식별자 절을 만듭니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">코드에서 가져온 것은 <ph id="ph1">`Custom Token`</ph> 샘플.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">이 예제는 단순 웹 토큰 (SWT)의 처리를 사용 하는 사용자 지정 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">이 샘플 및 WIF 및 다운로드 위치를 사용할 수 있는 다른 샘플에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>WIF 코드 샘플 인덱스<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>The security token descriptor from which the token is to be created.</source>
          <target state="translated">토큰이 만들어지는 보안 토큰 설명자입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>Properties of the token descriptor are set before this method is called.</source>
          <target state="translated">토큰 설명자의 속성이 이 메서드를 호출 하기 전에 설정됩니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>When overridden in a derived class, creates a security token using the specified token descriptor.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정된 설명자를 사용하여 보안 토큰을 만듭니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>This method is called by a security token service (STS).</source>
          <target state="translated">이 메서드는 STS(보안 토큰 서비스)에 의해 호출됩니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>A security token that matches the properties of the token descriptor.</source>
          <target state="translated">토큰 설명자의 속성과 일치하는 보안 토큰입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">기본적으로이 메서드에서 throw 된 <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>Called from implementations of the <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> class.</source>
          <target state="translated">구현에서 호출 된 <ph id="ph1">&lt;xref:System.IdentityModel.SecurityTokenService&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A&gt;</ph> method to create and return a token from a token descriptor.</source>
          <target state="translated">다음 코드에서는 재정의 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A&gt;</ph> 메서드를 만들고 토큰 설명자에서 토큰을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">코드에서 가져온 것은 <ph id="ph1">`Custom Token`</ph> 샘플.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">이 예제는 단순 웹 토큰 (SWT)의 처리를 사용 하는 사용자 지정 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">이 샘플 및 WIF 및 다운로드 위치를 사용할 수 있는 다른 샘플에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>WIF 코드 샘플 인덱스<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token to check for replay.</source>
          <target state="translated">재생을 확인할 토큰입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>When overridden in a derived class, throws an exception if the specified token is detected as being replayed.</source>
          <target state="translated">파생된 클래스에서 재정의된 경우 지정된 토큰이 재생 중인 것으로 검색되면 예외를 throw합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The default implementation does nothing.</source>
          <target state="translated">기본 구현은 아무 작업도 수행하지 않습니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>Derived classes should throw a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException&gt;</ph> if the token has already been used.</source>
          <target state="translated">파생된 클래스에서 throw 해야는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException&gt;</ph> 토큰이 이미 사용 되었습니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>Windows Identity Foundation (WIF) provides the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.TokenReplayCache&gt;</ph> class from which replay caches may be derived and the <bpt id="p1">[</bpt><ph id="ph2">&amp;lt;</ph>tokenReplayCache<ph id="ph3">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md)</ept> configuration element, which can be used to configure the replay cache used by token handlers in an application; however, the exact implementation of the <ph id="ph4">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A&gt;</ph> method is up to the designer of the derived class.</source>
          <target state="translated">Windows Identity Foundation (WIF) 제공 된 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.TokenReplayCache&gt;</ph> 클래스는 재생에서 캐시를 파생 될 수 있습니다 및 <bpt id="p1">[</bpt> <ph id="ph2">&amp;lt;</ph>tokenReplayCache<ph id="ph3">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/tokenreplaycache.md)</ept> 구성 하는 데 사용할 수 있는 구성 요소는 응용 프로그램에서 토큰 처리기에서 사용 하는 재생 캐시가 그러나 정확한 구현의 <ph id="ph4">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A&gt;</ph> 메서드는 파생된 클래스의 디자이너까지 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>When overridden in a derived class, returns the set of URIs that are used in requests to identify a token of the type processed by the derived class.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 요청에 사용된 URI를 반환하여 해당 클래스에 의해 처리된 형식의 토큰을 식별합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>The set of URIs that identify the token type that this handler supports.</source>
          <target state="translated">이 처리기에서 지원하는 토큰 형식을 식별하는 URI 집합입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>The <ph id="ph1">&lt;xref:System.Type&gt;</ph> of the token processed by the current instance is accessed through the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Type&gt;</ph> 현재 인스턴스에 의해 처리 된 토큰을 통해 액세스 됩니다는 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> method returns the set of acceptable identifiers that can be used in messages to refer to the token type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> 메서드 토큰 형식을 참조 하는 메시지에 사용할 수 있는 허용 가능한 식별자의 집합을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>For example, the URI value used in the <ph id="ph1">`&lt;wst:TokenType&gt;`</ph> element under the <ph id="ph2">`&lt;wst:RequestSecurityToken&gt;`</ph> element to request a specific kind of token (represented by the <ph id="ph3">&lt;xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=nameWithType&gt;</ph> property in the object model).</source>
          <target state="translated">URI 값에 사용 되는 예를 들어는 <ph id="ph1">`&lt;wst:TokenType&gt;`</ph> 에서 요소는 <ph id="ph2">`&lt;wst:RequestSecurityToken&gt;`</ph> 특정 종류의 토큰을 요청 하는 요소 (나타내는 <ph id="ph3">&lt;xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=nameWithType&gt;</ph> 개체 모델의 속성).</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> method to return the token type identifiers for a custom token.</source>
          <target state="translated">다음 코드에서는 재정의 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A&gt;</ph> 메서드를 사용자 지정 토큰에 대 한 토큰 유형 식별자를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">코드에서 가져온 것은 <ph id="ph1">`Custom Token`</ph> 샘플.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">이 예제는 단순 웹 토큰 (SWT)의 처리를 사용 하는 사용자 지정 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">이 샘플 및 WIF 및 다운로드 위치를 사용할 수 있는 다른 샘플에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>WIF 코드 샘플 인덱스<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>The configuration XML elements.</source>
          <target state="translated">구성 XML 요소입니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>Each node in the list is of type <ph id="ph1">&lt;see cref="T:System.Xml.XmlElement" /&gt;</ph>.</source>
          <target state="translated">형식 <ph id="ph1">&lt;see cref="T:System.Xml.XmlElement" /&gt;</ph>의 목록에 있는 각 노드입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>When overridden in a derived class, loads custom configuration from XML.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 XML에서 사용자 지정 구성을 로드합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A&gt;</ph> method is called by the configuration infrastructure.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A&gt;</ph> 구성 인프라 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>When this method is called, the <ph id="ph1">`nodelist`</ph> will contain the top-level child elements of the token handler’s <bpt id="p1">[</bpt><ph id="ph2">&amp;lt;</ph>add<ph id="ph3">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)</ept> element from the configuration file.</source>
          <target state="translated">이 메서드를 호출할 때는 <ph id="ph1">`nodelist`</ph> 토큰 처리기의 최상위 자식 요소가 포함 됩니다 <bpt id="p1">[</bpt> <ph id="ph2">&amp;lt;</ph>추가<ph id="ph3">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/add.md)</ept> 구성 파일에서 요소입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>Each of these may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.</source>
          <target state="translated">특성이 나 자식 요소가 파생 된 클래스에 대해 정의한 구성 스키마에 따라 이러한 각 들어 차례로 있습니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>The default implementation throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>.</source>
          <target state="translated">기본 구현은 throw 한 <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
          <source>Override this method in your derived class to enable initialization of your security token handler from a configuration file.</source>
          <target state="translated">구성 파일에서 보안 토큰 처리기의 초기화를 사용 하도록 설정 하려면 파생된 클래스에서이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>An XML reader positioned at the start element of the XML to be deserialized into the key identifier clause.</source>
          <target state="translated">키 식별자 절로 deserialize될 XML의 시작 요소에 배치된 XML 판독기입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a key identifier clause that references a token processed by the derived class.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 지정된 XML 판독기에 의해 참조된 XML을 파생 클래스에 의해 처리된 키 식별자 절로 deserialize합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>The key identifier clause that was deserialized from the XML.</source>
          <target state="translated">XML에서 deserialize된 키 식별자 절입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">기본적으로이 메서드에서 throw 된 <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>Override this method to provide the logic to deserialize a key identifier clause from XML.</source>
          <target state="translated">XML에서 키 식별자 절을 deserialize 하는 논리를 제공 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">또한 재정의 해야이 메서드를 재정의 하는 경우는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>When overridden in a derived class, deserializes the specified XML to a token of the type processed by the derived class.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정된 XML을 파생 클래스에 의해 처리된 유형의 토큰으로 deserialize합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>The string to be deserialized.</source>
          <target state="translated">deserialize할 문자열입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>When overridden in a derived class, deserializes the specified string to a token of the type processed by the derived class.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정된 문자열을 파생된 클래스에 의해 처리된 유형의 토큰으로 deserialize합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>The security token that was deserialized from the specified string.</source>
          <target state="translated">지정된 문자열에서 deserialize된 보안 토큰입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>Calling this method with untrusted data is a security risk.</source>
          <target state="translated">신뢰할 수 없는 데이터로이 메서드를 호출 하는 것은 보안상 위험 합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>Call this method only with trusted data.</source>
          <target state="translated">신뢰할 수 있는 데이터에만이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 유효성 검사<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">기본적으로이 메서드에서 throw 된 <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>Override this method to provide functionality that can deserialize a security token from a string.</source>
          <target state="translated">문자열에서 보안 토큰을 deserialize 할 수 있는 기능을 제공 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)">
          <source>If you override, this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">또한 재정의 해야를 재정의할 경우이 메서드는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>An XML reader positioned at the start element of the token.</source>
          <target state="translated">토큰의 시작 요소에 배치된 XML 판독기입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정된 문자열을 파생 클래스에 의해 처리된 유형의 토큰으로 deserialize합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>The security token that was deserialized from the XML.</source>
          <target state="translated">XML에서 deserialize된 보안 토큰입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>Calling this method with untrusted data is a security risk.</source>
          <target state="translated">신뢰할 수 없는 데이터로이 메서드를 호출 하는 것은 보안상 위험 합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>Call this method only with trusted data.</source>
          <target state="translated">신뢰할 수 있는 데이터에만이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 유효성 검사<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">기본적으로이 메서드에서 throw 된 <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>Override this method to provide the logic to deserialize a security token from XML.</source>
          <target state="translated">XML에서 보안 토큰을 deserialize 하는 논리를 제공 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">또한 재정의 해야이 메서드를 재정의 하는 경우는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph>.</source>
          <target state="translated">일반적으로 파생된 클래스에서 메서드는 참조 된 XML에서 토큰을 deserialize 할 수 없습니다 경우 throw는 <ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A&gt;</ph> method to read a custom token from the specified XML reader.</source>
          <target state="translated">다음 코드에서는 재정의 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A&gt;</ph> 메서드를 지정된 된 XML 판독기에서 사용자 지정 토큰을 읽도록 합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">코드에서 가져온 것은 <ph id="ph1">`Custom Token`</ph> 샘플.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">이 예제는 단순 웹 토큰 (SWT)의 처리를 사용 하는 사용자 지정 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">이 샘플 및 WIF 및 다운로드 위치를 사용할 수 있는 다른 샘플에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>WIF 코드 샘플 인덱스<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>An XML reader positioned at the start element of the token.</source>
          <target state="translated">토큰의 시작 요소에 배치된 XML 판독기입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>A token resolver that contains out-of-band and cached tokens.</source>
          <target state="translated">out-of-band 및 캐시된 토큰을 포함하는 토큰 확인자입니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>When overridden in a derived class, deserializes the XML referenced by the specified XML reader to a token of the type processed by the derived class by using the specified token resolver.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정된 XML 판독기에 의해 참조된 XML을 지정된 토큰 확인자를 사용하여 파생 클래스에 의해 처리된 형식의 토큰으로 deserialize합니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>The security token that was deserialized from the XML.</source>
          <target state="translated">XML에서 deserialize된 보안 토큰입니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>Calling this method with untrusted data is a security risk.</source>
          <target state="translated">신뢰할 수 없는 데이터로이 메서드를 호출 하는 것은 보안상 위험 합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>Call this method only with trusted data.</source>
          <target state="translated">신뢰할 수 있는 데이터에만이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>데이터 유효성 검사<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>The default implementation ignores the <ph id="ph1">`tokenResolver`</ph> parameter and delegates the call to the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">기본 구현에서 무시 된 <ph id="ph1">`tokenResolver`</ph> 매개 변수 호출을 위임 하 고는 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>Override this method to provide the logic to deserialize a security token from XML.</source>
          <target state="translated">XML에서 보안 토큰을 deserialize 하는 논리를 제공 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">또한 재정의 해야이 메서드를 재정의 하는 경우는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
          <source>Typically, in derived classes, if the method cannot deserialize the token from the referenced XML, it throws an <ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph>.</source>
          <target state="translated">일반적으로 파생된 클래스에서 메서드는 참조 된 XML에서 토큰을 deserialize 할 수 없습니다 경우 throw는 <ph id="ph1">&lt;xref:System.Xml.XmlException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>When overridden in a derived class, gets the type of the security token that is processed by this instance.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 이 인스턴스에서 처리하는 보안 토큰의 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>The type of the security token that is processed by this instance.</source>
          <target state="translated">이 인스턴스에서 처리하는 보안 토큰의 형식입니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>You must override this property in derived classes and return the <ph id="ph1">&lt;xref:System.Type&gt;</ph> of the security token (<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityToken&gt;</ph>) that is processed by the derived class.</source>
          <target state="translated">파생된 클래스에서이 속성을 재정의 하 고 반환 해야는 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 보안 토큰의 (<ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityToken&gt;</ph>) 하는 파생된 클래스에 의해 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> property to return the <ph id="ph2">&lt;xref:System.Type&gt;</ph> of the security tokens that are processed by a custom handler.</source>
          <target state="translated">다음 코드에서는 재정의 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A&gt;</ph> 반환 하는 <ph id="ph2">&lt;xref:System.Type&gt;</ph> 의 사용자 지정 처리기에 의해 처리 되는 보안 토큰입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">코드에서 가져온 것은 <ph id="ph1">`Custom Token`</ph> 샘플.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">이 예제는 단순 웹 토큰 (SWT)의 처리를 사용 하는 사용자 지정 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">이 샘플 및 WIF 및 다운로드 위치를 사용할 수 있는 다른 샘플에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>WIF 코드 샘플 인덱스<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)">
          <source>The security token that is being validated.</source>
          <target state="translated">유효성 검사 중인 보안 토큰입니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)">
          <source>The message to write to the trace.</source>
          <target state="translated">추적에 쓸 메시지입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)">
          <source>Traces the failure event during the validation of security tokens when tracing is enabled.</source>
          <target state="translated">추적 기능이 설정된 경우 보안 토큰의 유효성 검사 중 오류 이벤트를 추적합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)">
          <source>This method should be called from the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method when validation of the token fails.</source>
          <target state="translated">이 메서드를 호출 해야는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> 토큰의 유효성 검사가 실패할 때 메서드.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token that was validated.</source>
          <target state="translated">유효성을 검사한 토큰입니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)">
          <source>Traces the successful validation of security tokens event when tracing is enabled.</source>
          <target state="translated">추적 기능이 설정된 경우 보안 토큰 이벤트의 성공적인 유효성 검사를 추적합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)">
          <source>This method should be called from the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method after the token has been successfully validated.</source>
          <target state="translated">이 메서드를 호출 해야는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> 토큰 유효성 검사가 끝난 후 메서드.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token to validate.</source>
          <target state="translated">유효성을 검사할 토큰입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>When overridden in a derived class, validates the specified security token.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정한 보안 토큰의 유효성을 검사합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token must be of the type processed by the derived class.</source>
          <target state="translated">토큰은 파생된 클래스에서 처리되는 형식이어야 합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The identities contained in the token.</source>
          <target state="translated">토큰에 포함되어 있는 ID입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">기본적으로이 메서드에서 throw 된 <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method is called by the infrastructure to validate and extract the claims from the deserialized security token.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> 메서드 유효성을 검사 하 고 역직렬화 된 보안 토큰에서 클레임을 추출 하도록 인프라에 의해 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>These claims are returned in the collection of <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> objects returned by the method.</source>
          <target state="translated">이러한 클레임의 컬렉션에 반환될지 <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> 메서드에 의해 반환 되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>In the typical case, this collection will contain a single identity.</source>
          <target state="translated">일반적인 경우이 컬렉션에는 단일 id를 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>In derived classes, validation typically includes validating the intended audience specified in the token against the audience URIs specified in the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=nameWithType&gt;</ph> property of the token handler configuration object specified on the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property.</source>
          <target state="translated">파생된 클래스에서 유효성 검사 일반적으로 포함 Uri에 지정 된 대상 그룹에 대해 토큰에 지정 된 대상은 유효성을 검사 하는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=nameWithType&gt;</ph> 에 지정 된 토큰 처리기 구성 개체의 속성은 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>These URIs are typically set in the configuration file under the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>audienceUris<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md)</ept> element.</source>
          <target state="translated">이러한 Uri는 일반적으로 아래에 있는 구성 파일에서 설정 된 <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>audienceUris<ph id="ph2">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/audienceuris.md)</ept> 요소입니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>If the audience cannot be validated, an <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException&gt;</ph> exception should be thrown.</source>
          <target state="translated">대상 그룹을 확인할 수 없는 경우는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException&gt;</ph> 예외를 throw 해야 합니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>When processing the token, the issuer is typically validated by passing the issuer token to one of the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> methods on the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry&gt;</ph> object that is configured for the handler through the <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> property.</source>
          <target state="translated">발급자 중 하나에 발급자 토큰을 전달 하 여 유효성 검사 일반적으로 토큰을 처리 하는 경우는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> 에 대 한 메서드는 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry&gt;</ph> 를 통해 처리기에 대 한 구성 개체에는 <ph id="ph3">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The issuer name registry is typically configured through the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>issuerNameRegistry<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md)</ept> element in the configuration file.</source>
          <target state="translated">일반적으로 발급자 이름 레지스트리를 통해 구성 된 <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>issuerNameRegistry<ph id="ph2">&amp;gt;</ph> <ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md)</ept> 구성 파일의 요소입니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> returns the name of the issuer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> 발급자의 이름을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>This name should be used to set the <ph id="ph1">&lt;xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=nameWithType&gt;</ph> property in claims contained in the token.</source>
          <target state="translated">이 이름은 설정 하는 데 사용 해야는 <ph id="ph1">&lt;xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=nameWithType&gt;</ph> 토큰에 포함 된 클레임의 속성입니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>If the issuer name registry does not contain an entry for the issuer token, <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">발급자 이름 레지스트리 발급자 토큰에 대 한 항목이 포함 되어 있지 않으면 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A&gt;</ph> 반환 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>In this case a <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenException&gt;</ph> is typically thrown in derived classes, but this behavior is up to the designer of the class.</source>
          <target state="translated">이 경우에 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenException&gt;</ph> 는 일반적으로 파생된 클래스에서 throw 있지만이 동작은 디자이너 클래스의 최대는 합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The following code shows an override of the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method for a security token handler that processes simple web tokens (SWT).</source>
          <target state="translated">다음 코드와의 재정의 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> 단순 웹 토큰 (SWT) 처리 하는 보안 토큰 처리기에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The code is taken from the <ph id="ph1">`CustomToken`</ph> sample.</source>
          <target state="translated">코드에서 가져온 것은 <ph id="ph1">`CustomToken`</ph> 샘플.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">이 샘플 및 WIF 및 다운로드 위치를 사용할 수 있는 다른 샘플에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>WIF 코드 샘플 인덱스<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The following code shows <ph id="ph1">`CreateClaims`</ph> method that is invoked from the override of the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method in the previous example.</source>
          <target state="translated">다음 코드 <ph id="ph1">`CreateClaims`</ph> 의 재정의에서 호출 되는 메서드는 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> 이전 예제의 메서드.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>This method returns a <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> object that is created from the claims in the token.</source>
          <target state="translated">이 메서드는 반환 된 <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsIdentity&gt;</ph> 토큰에 있는 클레임에서 만들어지는 개체입니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The code is taken from the <ph id="ph1">`CustomToken`</ph> sample.</source>
          <target state="translated">코드에서 가져온 것은 <ph id="ph1">`CustomToken`</ph> 샘플.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">이 샘플 및 WIF 및 다운로드 위치를 사용할 수 있는 다른 샘플에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>WIF 코드 샘플 인덱스<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The following code shows <ph id="ph1">`ValidateSignature`</ph> method that is invoked from the override of the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method in the simple web token handler.</source>
          <target state="translated">다음 코드 <ph id="ph1">`ValidateSignature`</ph> 의 재정의에서 호출 되는 메서드는 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> 단순 웹 토큰 처리기에서 메서드.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>This method validates the signature on the token by using the configured <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerTokenResolver&gt;</ph>.</source>
          <target state="translated">이 메서드는 토큰에 서명 구성 된를 사용 하 여 유효성을 검사 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.IssuerTokenResolver&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The code is taken from the <ph id="ph1">`CustomToken`</ph> sample.</source>
          <target state="translated">코드에서 가져온 것은 <ph id="ph1">`CustomToken`</ph> 샘플.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">이 샘플 및 WIF 및 다운로드 위치를 사용할 수 있는 다른 샘플에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>WIF 코드 샘플 인덱스<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The following code shows <ph id="ph1">`ValidateAudience`</ph> method that is invoked from the override of the <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> method in the simple web token handler.</source>
          <target state="translated">다음 코드 <ph id="ph1">`ValidateAudience`</ph> 의 재정의에서 호출 되는 메서드는 <ph id="ph2">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A&gt;</ph> 단순 웹 토큰 처리기에서 메서드.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>This method validates the audience contained in the token against the audience URIs that were specified in configuration.</source>
          <target state="translated">이 메서드는 대상 구성에 지정 된 Uri에 대 한 토큰에 포함 된 대상 그룹의 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The code is taken from the <ph id="ph1">`CustomToken`</ph> sample.</source>
          <target state="translated">코드에서 가져온 것은 <ph id="ph1">`CustomToken`</ph> 샘플.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">이 샘플 및 WIF 및 다운로드 위치를 사용할 수 있는 다른 샘플에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>WIF 코드 샘플 인덱스<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The XML writer.</source>
          <target state="translated">XML 작성기입니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The key identifier clause to serialize.</source>
          <target state="translated">serialize할 키 식별자 절입니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>When overridden in a derived class, serializes the specified key identifier clause to XML.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정한 키 식별자 절을 XML에 serialize합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>The key identifier clause must be of the type supported by the derived class.</source>
          <target state="translated">키 식별자 절은 파생된 클래스에서 지원되는 형식이어야 합니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">기본적으로이 메서드에서 throw 된 <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>Override this method to provide the logic to serialize a key identifier clause to XML.</source>
          <target state="translated">XML에는 키 식별자 절을 serialize 하는 논리를 제공 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph> method.</source>
          <target state="translated">또한 재정의 해야이 메서드를 재정의 하는 경우는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>When overridden in a derived class, serializes the specified security token.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정한 보안 토큰을 serialize합니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.SecurityTokenHandler">
          <source>The token must be of the type processed by the derived class.</source>
          <target state="translated">토큰은 파생된 클래스에서 처리되는 형식이어야 합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token to serialize.</source>
          <target state="translated">serialize할 토큰입니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>When overridden in a derived class, serializes the specified security token to a string.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정한 보안 토큰을 문자열에 serialize합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The token must be of the type processed by the derived class.</source>
          <target state="translated">토큰은 파생된 클래스에서 처리되는 형식이어야 합니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>The serialized token.</source>
          <target state="translated">serialize된 토큰입니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">기본적으로이 메서드에서 throw 된 <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>Override this method to provide the logic to serialize a security token to XML.</source>
          <target state="translated">보안 토큰 XML serialize 하는 논리를 제공 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property.</source>
          <target state="translated">또한 재정의 해야이 메서드를 재정의 하는 경우는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>The XML writer.</source>
          <target state="translated">XML 작성기입니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>The token to serialize.</source>
          <target state="translated">serialize할 토큰입니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>When overridden in a derived class, serializes the specified security token to XML.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정한 보안 토큰을 XML에 serialize합니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>The token must be of the type processed by the derived class.</source>
          <target state="translated">토큰은 파생된 클래스에서 처리되는 형식이어야 합니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>By default this method throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> exception.</source>
          <target state="translated">기본적으로이 메서드에서 throw 된 <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>Override this method to provide the logic to serialize a security token to XML.</source>
          <target state="translated">보안 토큰 XML serialize 하는 논리를 제공 하려면이 메서드를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>If you override this method, you should also override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> property.</source>
          <target state="translated">또한 재정의 해야이 메서드를 재정의 하는 경우는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>The following code shows how to override the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> method to serialize a custom token.</source>
          <target state="translated">다음 코드에서는 재정의 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A&gt;</ph> 메서드를 사용자 지정 토큰을 serialize 합니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>The code is taken from the <ph id="ph1">`Custom Token`</ph> sample.</source>
          <target state="translated">코드에서 가져온 것은 <ph id="ph1">`Custom Token`</ph> 샘플.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>This sample provides custom classes that enable processing of Simple Web Tokens (SWT).</source>
          <target state="translated">이 예제는 단순 웹 토큰 (SWT)의 처리를 사용 하는 사용자 지정 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
          <source>For information about this sample and other samples available for WIF and where to download them, see <bpt id="p1">[</bpt>WIF Code Sample Index<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>.</source>
          <target state="translated">이 샘플 및 WIF 및 다운로드 위치를 사용할 수 있는 다른 샘플에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>WIF 코드 샘플 인덱스<ept id="p1">](~/docs/framework/security/wif-code-sample-index.md)</ept>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>