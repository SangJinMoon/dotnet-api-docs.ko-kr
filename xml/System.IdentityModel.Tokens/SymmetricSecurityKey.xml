<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SymmetricSecurityKey.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55cf8406bae2fec33eb98ef443bd7dd65bedab491.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5cf8406bae2fec33eb98ef443bd7dd65bedab491</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IdentityModel.Tokens.SymmetricSecurityKey">
          <source>Represents the abstract base class for all keys that are generated using symmetric algorithms.</source>
          <target state="translated">대칭 알고리즘을 사용하여 생성되는 모든 키에 대한 추상 기본 클래스를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IdentityModel.Tokens.SymmetricSecurityKey">
          <source>Typically, this class is used by the infrastructure to transform XML using a symmetric key.</source>
          <target state="translated">일반적으로 이 클래스는 인프라에서 대칭 키를 사용하여 XML을 변환하는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
          <source>A URI that represents the cryptographic algorithm to use to generate the derived key.</source>
          <target state="translated">파생 키를 생성하는 데 사용할 암호화 알고리즘을 나타내는 URI입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that contains the label parameter for the cryptographic algorithm.</source>
          <target state="translated">암호화 알고리즘의 레이블 매개 변수를 포함하는 <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph>의 배열입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that contains the nonce that is used to create a derived key.</source>
          <target state="translated">파생 키를 만드는 데 사용되는 nonce를 포함하는 <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph>의 배열입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
          <source>The size of the derived key.</source>
          <target state="translated">파생 키의 크기입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
          <source>The position at which the derived key is located in the byte array that is returned from this method.</source>
          <target state="translated">이 메서드에서 반환되는 바이트 배열에서 파생 키가 있는 위치입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, generates a derived key using the specified cryptographic algorithm and parameters for the current key.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정된 암호화 알고리즘과 현재 키에 대한 매개 변수를 사용하여 파생 키를 생성합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that contains the derived key.</source>
          <target state="translated">파생 키를 포함하는 <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph>의 배열입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
          <source>To specify P-SHA1 as the cryptographic algorithm, use the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation&gt;</ph> field.</source>
          <target state="translated">P-SHA1을 암호화 알고리즘으로 지정하려면 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation&gt;</ph> 필드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])">
          <source>A cryptographic algorithm that decrypts cipher text, such as encrypted XML.</source>
          <target state="translated">암호화된 XML과 같은 암호화 텍스트를 해독하는 암호화 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that contains the initialization vector (<ph id="ph2">&lt;see langword="IV" /&gt;</ph>) for the specified algorithm.</source>
          <target state="translated">지정된 알고리즘의 <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph>(초기화 벡터)를 포함하는 <ph id="ph2">&lt;see langword="IV" /&gt;</ph>의 배열입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])">
          <source>When overridden in a derived class, gets a transform that decrypts cipher text using the specified cryptographic algorithm.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정된 암호화 알고리즘을 사용하여 암호화 텍스트를 해독하는 변형을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ICryptoTransform" /&gt;</ph> that represents the decryption transform.</source>
          <target state="translated">해독 변환을 나타내는 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ICryptoTransform" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])">
          <source>Use the fields that represent decryption algorithms in the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.</source>
          <target state="translated">알고리즘을 지정하려면 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> 클래스에서 해독 알고리즘을 나타내는 필드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])">
          <source>A cryptographic algorithm that encrypts XML.</source>
          <target state="translated">XML을 암호화하는 암호화 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that contains the initialization vector (<ph id="ph2">&lt;see langword="IV" /&gt;</ph>) for the specified algorithm.</source>
          <target state="translated">지정된 알고리즘의 <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph>(초기화 벡터)를 포함하는 <ph id="ph2">&lt;see langword="IV" /&gt;</ph>의 배열입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])">
          <source>When overridden in a derived class, gets a transform that encrypts XML using the specified cryptographic algorithm.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정된 암호화 알고리즘을 사용하여 XML을 암호화하는 변형을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ICryptoTransform" /&gt;</ph> that represents the encryption transform.</source>
          <target state="translated">암호화 변환을 나타내는 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ICryptoTransform" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])">
          <source>Use the fields that represent decryption algorithms in the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.</source>
          <target state="translated">알고리즘을 지정하려면 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> 클래스에서 해독 알고리즘을 나타내는 필드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)">
          <source>The cryptographic algorithm to get the size of the initialization vector (<ph id="ph1">&lt;see langword="IV" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;see langword="IV" /&gt;</ph>(초기화 벡터)의 크기를 가져올 암호화 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)">
          <source>When overridden in a derived class, gets the size, in bits, of the initialization vector (<ph id="ph1">&lt;see langword="IV" /&gt;</ph>) that is required for the specified cryptographic algorithm.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정된 암호화 알고리즘에 필요한 <ph id="ph1">&lt;see langword="IV" /&gt;</ph>(초기화 벡터)의 크기(비트)를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetIVSize(System.String)">
          <source>The size, in bits, of the initialization vector (<ph id="ph1">&lt;see langword="IV" /&gt;</ph>) that is required for the cryptographic algorithm specified in the <ph id="ph2">&lt;paramref name="algorithm" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="IV" /&gt;</ph> 매개 변수에 지정된 암호화 알고리즘에 필요한 <ph id="ph2">&lt;paramref name="algorithm" /&gt;</ph>(초기화 벡터)의 크기(비트)입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)">
          <source>The keyed hash algorithm to get an instance of.</source>
          <target state="translated">인스턴스를 가져올 키 지정 해시 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)">
          <source>When overridden in a derived class, gets an instance of the specified keyed hash algorithm.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정된 키 지정 해시 알고리즘의 인스턴스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /&gt;</ph> that represents the keyed hash algorithm.</source>
          <target state="translated">키 지정 해시 알고리즘을 나타내는 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)">
          <source>Use the fields that represent keyed hash algorithms in the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.</source>
          <target state="translated">알고리즘을 지정하려면 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> 클래스에서 키 지정 해시 알고리즘을 나타내는 필드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)">
          <source>The symmetric algorithm to get an instance of.</source>
          <target state="translated">인스턴스를 가져올 대칭 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)">
          <source>When overridden in a derived class, gets an instance of the specified symmetric algorithm.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 지정된 대칭 알고리즘의 인스턴스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /&gt;</ph> that represents the symmetric algorithm.</source>
          <target state="translated">대칭 알고리즘을 나타내는 <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricAlgorithm(System.String)">
          <source>Use the fields that represent symmetric algorithms in the <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.</source>
          <target state="translated">알고리즘을 지정하려면 <ph id="ph1">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> 클래스에서 대칭 알고리즘을 나타내는 필드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey">
          <source>When overridden in a derived class, gets the bytes that represent the symmetric key.</source>
          <target state="translated">파생 클래스에서 재정의되는 경우 대칭 키를 나타내는 바이트를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that contains the symmetric key.</source>
          <target state="translated">대칭 키를 포함하는 <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph>의 배열입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>