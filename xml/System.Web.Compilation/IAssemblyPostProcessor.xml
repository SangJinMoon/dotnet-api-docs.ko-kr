<Type Name="IAssemblyPostProcessor" FullName="System.Web.Compilation.IAssemblyPostProcessor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d0252eeffff662891a4fb72718c963444a8ee8c6" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37607972" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAssemblyPostProcessor implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.IAssemblyPostProcessor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAssemblyPostProcessor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="F#" Value="type IAssemblyPostProcessor = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="6b824-101">어셈블리가 빌드된 후에 어셈블리 처리를 위해 클래스가 구현하는 메서드를 정의합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6b824-101">Defines the method a class implements to process an assembly after the assembly has been built.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b824-102">이 인터페이스를 구현 하는 클래스는 컴파일된 후 어셈블리를 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-102">A class implementing this interface can access an assembly after it has been compiled.</span></span> <span data-ttu-id="6b824-103">합니다 <xref:System.Web.Compilation.AssemblyBuilder> 클래스 어셈블리를 컴파일하고 확인 여부를 <xref:System.Web.Compilation.IAssemblyPostProcessor> 웹 구성 파일에 등록 된 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-103">The <xref:System.Web.Compilation.AssemblyBuilder> class compiles assemblies and then checks to see whether an <xref:System.Web.Compilation.IAssemblyPostProcessor> interface has been registered in the Web configuration file.</span></span> <span data-ttu-id="6b824-104">그렇다면 합니다 <xref:System.Web.Compilation.AssemblyBuilder> 호출 인스턴스를 <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> 에 대 한 메서드는 <xref:System.Web.Compilation.IAssemblyPostProcessor> 컴파일 후 어셈블리를 로드 하기 전에 작업을 수행 하는 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-104">If so, the <xref:System.Web.Compilation.AssemblyBuilder> instance calls the <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> method for the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface to perform any action after the compilation and before loading the assembly.</span></span> <span data-ttu-id="6b824-105">예를 들어 프로파일러 도구 어셈블리에 프로브를 설정 하려면이 인터페이스를 구현할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-105">For example, a profiler tool could implement this interface to establish probes in the assembly.</span></span>  
  
 <span data-ttu-id="6b824-106">경우는 <xref:System.Web.Compilation.IAssemblyPostProcessor> 인터페이스 등록 되 면 ASP.NET 응용 프로그램 및 해당 어셈블리는 항상 컴파일됩니다 디버그 모드에서.</span><span class="sxs-lookup"><span data-stu-id="6b824-106">When an <xref:System.Web.Compilation.IAssemblyPostProcessor> interface is registered, the ASP.NET application and its assemblies will always be compiled in debug mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b824-107">다음 코드 예제에서는 구현 하는 방법에 설명 합니다 <xref:System.Web.Compilation.IAssemblyPostProcessor> 인터페이스 및 웹 응용 프로그램의 Web.config 파일에 등록 합니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-107">The following code example demonstrates how to create an implementation of the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface, and register it in the Web.config file of a Web application.</span></span>  
  
 <span data-ttu-id="6b824-108">코드 예제의 첫 번째 부분 이라는 클래스를 만듭니다 `Samples.Process.postProcessTest` 를 구현 하는 <xref:System.Web.Compilation.IAssemblyPostProcessor> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-108">The first part of the code example creates a class named `Samples.Process.postProcessTest` that implements the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface.</span></span> <span data-ttu-id="6b824-109">이 클래스는 파일을 작성 하는 간단한 작업을 수행 하면는 <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-109">This class performs the simple action of writing a file when the <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> method is called.</span></span>  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 <span data-ttu-id="6b824-110">클래스를 컴파일하여 명령 사용 하 여.dll 파일 `csc /target:library postProcessTest.cs`합니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-110">Compile the class into a .dll file with the command `csc /target:library postProcessTest.cs`.</span></span> <span data-ttu-id="6b824-111">ASP.NET 응용 프로그램의 Bin 폴더에 있는 결과.dll 파일을 추가 하 고 다음 코드 에서처럼 Web.config 파일에.dll을 등록 합니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-111">Add the resulting .dll file to the Bin folder of an ASP.NET application and register the .dll in the Web.config file, as shown in the following code.</span></span>  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 <span data-ttu-id="6b824-112">사용자가 웹 사이트를 방문 하면 웹 응용 프로그램 동적으로 컴파일되고 파일 C:\compile에 MyTest.txt 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-112">When a user visits the Web site, the Web application is dynamically compiled and the file MyTest.txt will be written to C:\compile.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="PostProcessAssembly">
      <MemberSignature Language="C#" Value="public void PostProcessAssembly (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostProcessAssembly(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostProcessAssembly (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostProcessAssembly(System::String ^ path);" />
      <MemberSignature Language="F#" Value="abstract member PostProcessAssembly : string -&gt; unit" Usage="iAssemblyPostProcessor.PostProcessAssembly path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="6b824-113">어셈블리에 대한 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b824-113">The path to the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6b824-114">어셈블리가 로드되기 전에 호출되어 구현 클래스를 통해 어셈블리를 수정할 수 있도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6b824-114">Called before the assembly is loaded to allow the implementing class to modify the assembly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b824-115"><xref:System.Web.Compilation.AssemblyBuilder> 클래스는 어셈블리를 컴파일한 후에이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-115">The <xref:System.Web.Compilation.AssemblyBuilder> class calls this method after the assembly has been compiled.</span></span> <span data-ttu-id="6b824-116">이 메서드에서 어셈블리를 로드 하기 전에 수행할 작업을 포함 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-116">Any actions to be taken before loading the assembly should be included in this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b824-117">다음 코드 예제에서는 구현 하는 방법에 설명 합니다 <xref:System.Web.Compilation.IAssemblyPostProcessor> 인터페이스 및 웹 응용 프로그램의 Web.config 파일에 등록 합니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-117">The following code example demonstrates how to create an implementation of the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface, and register it in the Web.config file of a Web application.</span></span>  
  
 <span data-ttu-id="6b824-118">코드 예제의 첫 번째 부분 이라는 클래스를 만듭니다 `Samples.Process.postProcessTest` 를 구현 하는 <xref:System.Web.Compilation.IAssemblyPostProcessor> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-118">The first part of the code example creates a class named `Samples.Process.postProcessTest` that implements the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface.</span></span> <span data-ttu-id="6b824-119">이 클래스는 파일을 작성 하는 간단한 작업을 수행 하면는 <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-119">This class performs the simple action of writing a file when the <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> method is called.</span></span>  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 <span data-ttu-id="6b824-120">클래스를 컴파일하여 명령 사용 하 여.dll 파일 `csc /target:library postProcessTest.cs`합니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-120">Compile the class into a .dll file with the command `csc /target:library postProcessTest.cs`.</span></span> <span data-ttu-id="6b824-121">ASP.NET 응용 프로그램의 Bin 폴더에 있는 결과.dll 파일을 추가 하 고 다음 코드 에서처럼 Web.config 파일에.dll을 등록 합니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-121">Add the resulting .dll file to the Bin folder of an ASP.NET application and register the .dll in the Web.config file, as shown in the following code.</span></span>  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 <span data-ttu-id="6b824-122">사용자가 웹 사이트를 방문 하면 웹 응용 프로그램 동적으로 컴파일되고 파일 C:\compile에 MyTest.txt 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="6b824-122">When a user visits the Web site, the Web application is dynamically compiled and the file MyTest.txt will be written to C:\compile.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>