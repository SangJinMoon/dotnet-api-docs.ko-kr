<Type Name="File" FullName="System.IO.File">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="33ff20675af33b874a1f85321d5e07899d6d1ef4" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/13/2018" />
    <Meta Name="ms.locfileid" Value="35417279" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class File" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit File extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.File" />
  <TypeSignature Language="VB.NET" Value="Public Class File" />
  <TypeSignature Language="C++ CLI" Value="public ref class File abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>단일 파일에 대한 만들기, 복사, 삭제, 이동 및 열기를 위한 정적 메서드를 제공하고 <see cref="T:System.IO.FileStream" /> 개체 만들기를 지원합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 <xref:System.IO.File> 복사, 이동, 이름 바꾸기, 만들기, 열기, 삭제 하 고 한 번에는 단일 파일에 추가 같은 일반적인 작업에 대 한 클래스입니다. 사용할 수도 있습니다는 <xref:System.IO.File> 가져오고 파일 특성을 설정 하는 클래스 또는 <xref:System.DateTime> 만들기, 관련 정보를 액세스 하 고 파일의 작성 합니다. 여러 파일에 대해 작업을 수행 하는 경우 참조 <xref:System.IO.Directory.GetFiles%2A?displayProperty=nameWithType> 또는 <xref:System.IO.DirectoryInfo.GetFiles%2A?displayProperty=nameWithType>합니다.  
  
 대부분의 <xref:System.IO.File> 메서드를 만들거나 파일을 열 때 다른 I/O 형식을 반환 합니다. 추가 파일을 조작 하기 위한 다른 형식을 이러한 사용할 수 있습니다. 자세한 내용은 참조 특정 <xref:System.IO.File> 멤버와 같은 <xref:System.IO.File.OpenText%2A>, <xref:System.IO.File.CreateText%2A>, 또는 <xref:System.IO.File.Create%2A>합니다.  
  
 때문에 모든 <xref:System.IO.File> 메서드는 정적, 보다 효율적으로 사용할 수 있습니다는 <xref:System.IO.File> 메서드는 해당 하는 대신 <xref:System.IO.FileInfo> 인스턴스 메서드를 한 작업만 수행 하려는 경우. 모든 <xref:System.IO.File> 방법에는 조작 하 고 있는 파일의 경로 필요 합니다.  
  
 정적 메서드는 <xref:System.IO.File> 클래스는 모든 메서드에 대 한 보안 검사를 수행 합니다. 해당 인스턴스 메서드를 사용 하 여 고려 하는 개체를 여러 번 다시 경우 <xref:System.IO.FileInfo> 보안 검사는 항상 때문에 필요할 수 대신 합니다.  
  
 새 파일에 대 한 모든 읽기/쓰기 액세스는 기본적으로 모든 사용자에 게 부여 됩니다.  
  
 다음 표에서 다양 한의 동작을 사용자 지정 하는 데 사용 되는 열거형을 설명 <xref:System.IO.File> 메서드.  
  
|열거형|설명|  
|-----------------|-----------------|  
|<xref:System.IO.FileAccess>|읽기 및 쓰기 파일에 대 한 액세스를 지정합니다.|  
|<xref:System.IO.FileShare>|이미 사용 중인 파일에 대 한 허용 되는 액세스 수준을 지정 합니다.|  
|<xref:System.IO.FileMode>|기존 파일의 내용을 유지 여부를 덮어쓸 및 기존 파일을 만드는 요청 하면 예외가 발생 하는지 여부를 지정 합니다.|  
  
> [!NOTE]
>  가 경로 입력된 문자열을 허용 하는 멤버에 해당 경로 올바른 형식 이어야 합니다 또는 예외가 발생 합니다. 예를 들어 경로 정규화 된 표시 되지만 공백으로 시작 경로 클래스의 메서드에서 잘리지 않습니다. 따라서 경로 잘못 되었으며 예외가 발생 합니다. 마찬가지로, 경로 또는 경로의 조합 두 번 정규화 될 수 없습니다. 예를 들어 "c:\temp c:\windows"는 또한 대부분의 경우에서 예외가 발생합니다. 경로 문자열을 허용 하는 메서드를 사용 하는 경우 경로 형식이 있는지 확인 합니다.  
  
 경로 허용 하는 멤버를 파일이 나 디렉터리 경로 참조할 수 있습니다. 지정된 된 경로 상대 경로 또는 서버 및 공유 이름에 대 한 범용 명명 규칙 (UNC) 경로를 참조할 수도 있습니다. 예를 들어 다음은 허용 가능한 경로.  
  
-   "c:\\\MyDir\\\MyFile.txt" C# 또는 Visual Basic의 "c:\MyDir\MyFile.txt"입니다.  
  
-   "c:\\\MyDir" C# 또는 Visual Basic의 "c:\MyDir"입니다.  
  
-   "MyDir\\\MySubdir" C# 또는 Visual Basic의 "MyDir\MySubDir"입니다.  
  
-   "\\\\\\\MyServer\\\MyShare" C# 또는 "\\\MyServer\MyShare" Visual Basic의 합니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 <xref:System.IO.File> 여부 파일이 있는 및 결과 따라 하거나 새 파일을 만들 및에서 쓸 수 또는 기존 파일을 열고 여기에서 읽고 확인 하는 클래스입니다. 코드를 실행 하기 전에 작성 한 `c:\temp` 폴더입니다.  
  
 [!code-cpp[File Class Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/File Class Example/CPP/file class example.cpp#1)]
 [!code-csharp[File Class Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/File Class Example/CS/file class example.cs#1)]
 [!code-vb[File Class Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File Class Example/VB/file class example.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.DriveInfo" />
    <altmember cref="T:System.IO.FileSystemWatcher" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AppendAllLines">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>파일에 줄을 추가한 다음 파일을 닫습니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendAllLines">
      <MemberSignature Language="C#" Value="public static void AppendAllLines (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AppendAllLines(string path, class System.Collections.Generic.IEnumerable`1&lt;string&gt; contents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AppendAllLines (path As String, contents As IEnumerable(Of String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppendAllLines(System::String ^ path, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ contents);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="path">줄을 추가할 파일입니다. 파일이 아직 없으면 새로 만들어집니다.</param>
        <param name="contents">파일에 추가할 줄입니다.</param>
        <summary>파일에 줄을 추가한 다음 파일을 닫습니다. 지정한 파일이 없는 경우 이 메서드는 파일을 만들고 지정된 줄을 파일에 쓴 다음 파일을 닫습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드는 존재 하지 않는 하지만 새 디렉터리를 만들지는 않습니다 경우 파일을 만듭니다. 따라서의 값은 `path` 매개 변수는 기존 디렉터리를 포함 해야 합니다.  
  
   
  
## Examples  
 다음 예제에서는 선택한 줄에서 예제 데이터 파일을 파일에 쓰고 줄을 추가 합니다. 명명 된 디렉터리 `temp` 드라이브 C 예제가 성공적으로 완료 되려면 존재 해야 합니다.  
  
 [!code-csharp[System.IO.File.WriteAllAppendAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.file.writeallappendall/cs/program.cs#1)]
 [!code-vb[System.IO.File.WriteAllAppendAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.file.writeallappendall/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 메서드로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 또는 <paramref name="contents" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" />가 잘못되었습니다(예: 디렉터리가 없거나 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" />로 지정된 파일을 찾을 수 없습니다.</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="path" />가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 파일에 쓸 수 있는 사용 권한이 없습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />가 읽기 전용 파일을 지정합니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />는 디렉터리입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="AppendAllLines">
      <MemberSignature Language="C#" Value="public static void AppendAllLines (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AppendAllLines(string path, class System.Collections.Generic.IEnumerable`1&lt;string&gt; contents, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppendAllLines(System::String ^ path, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ contents, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">줄을 추가할 파일입니다. 파일이 아직 없으면 새로 만들어집니다.</param>
        <param name="contents">파일에 추가할 줄입니다.</param>
        <param name="encoding">사용할 문자 인코딩입니다.</param>
        <summary>지정된 인코딩을 사용하여 파일에 줄을 추가한 다음 파일을 닫습니다. 지정한 파일이 없는 경우 이 메서드는 파일을 만들고 지정된 줄을 파일에 쓴 다음 파일을 닫습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드는 존재 하지 않는 하지만 새 디렉터리를 만들지는 않습니다 경우 파일을 만듭니다. 따라서의 값은 `path` 매개 변수는 기존 디렉터리를 포함 해야 합니다.  
  
 다음을 포함 하는 파일을 만들려면이 메서드를 사용할 수 있습니다.  
  
-   결과 [LINQ to Objects](http://msdn.microsoft.com/library/73cafe73-37cf-46e7-bfa7-97c7eea7ced9) 는 파일의 줄에서 쿼리를 사용 하 여 얻어지는 <xref:System.IO.File.ReadLines%2A> 메서드.  
  
-   구현 하는 컬렉션의 내용을 <xref:System.Collections.Generic.IEnumerable%601> 문자열입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 메서드로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />, <paramref name="contents" /> 또는 <paramref name="encoding" />이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" />가 잘못되었습니다(예: 디렉터리가 없거나 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" />로 지정된 파일을 찾을 수 없습니다.</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="path" />가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />가 읽기 전용 파일을 지정합니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />는 디렉터리입니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="AppendAllLinesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AppendAllLinesAsync (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AppendAllLinesAsync(string path, class System.Collections.Generic.IEnumerable`1&lt;string&gt; contents, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAllLinesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AppendAllLinesAsync (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AppendAllLinesAsync(string path, class System.Collections.Generic.IEnumerable`1&lt;string&gt; contents, class System.Text.Encoding encoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendAllText">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 문자열을 파일에 추가합니다. 파일이 아직 없으면 만듭니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendAllText">
      <MemberSignature Language="C#" Value="public static void AppendAllText (string path, string contents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AppendAllText(string path, string contents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendAllText(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AppendAllText (path As String, contents As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppendAllText(System::String ^ path, System::String ^ contents);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">지정된 문자열을 추가할 파일입니다.</param>
        <param name="contents">파일에 추가할 문자열입니다.</param>
        <summary>파일을 열고 지정된 문자열을 파일에 추가한 다음 파일을 닫습니다. 파일이 없는 경우 이 메서드는 파일을 만들고 지정된 문자열을 파일에 쓴 다음 파일을 닫습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 문자열로 파일 경로 매개 변수로 받아이 지정된 된 파일 열고, 문자열 파일의 끝에 추가 메서드와 다음 파일을 닫습니다. 파일 핸들은 예외가 발생 하는 경우에이 메서드에 의해 닫혀야 보장 됩니다.  
  
 메서드는 존재 하지 않는 하지만 새 디렉터리를 만들지는 않습니다 경우 파일을 만듭니다. 따라서의 값은 `path` 매개 변수는 기존 디렉터리를 포함 해야 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.IO.File.AppendAllText%2A> 메서드를 추가 텍스트 파일의 끝에 추가 합니다. 이 예제에서는 파일에 존재 하지 않는 및 텍스트에 추가 된 경우 만들어집니다. 그러나 디렉터리 라는 `temp` 드라이브 C 예제가 성공적으로 완료 되려면 존재 해야 합니다.  
  
 [!code-csharp[System.IO.File.AllText#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllText/cs/AllText.cs#00)]
 [!code-vb[System.IO.File.AllText#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllText/vb/AllText.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 디렉터리가 없거나 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />에 읽기 전용인 파일이 지정되었습니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 또는 디렉터리에 기록에 액세스 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /></permission>
      </Docs>
    </Member>
    <Member MemberName="AppendAllText">
      <MemberSignature Language="C#" Value="public static void AppendAllText (string path, string contents, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AppendAllText(string path, string contents, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AppendAllText(System::String ^ path, System::String ^ contents, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">지정된 문자열을 추가할 파일입니다.</param>
        <param name="contents">파일에 추가할 문자열입니다.</param>
        <param name="encoding">사용할 문자 인코딩입니다.</param>
        <summary>지정된 문자열을 파일에 추가합니다. 파일이 아직 없으면 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 문자열로 파일 경로 매개 변수로 받아이 지정된 된 파일 열고, 지정 된 인코딩을 사용 하 여 파일의 끝에는 문자열을 추가 메서드와 다음 파일을 닫습니다. 파일 핸들은 예외가 발생 하는 경우에이 메서드에 의해 닫혀야 보장 됩니다.  
  
 메서드는 존재 하지 않는 하지만 새 디렉터리를 만들지는 않습니다 경우 파일을 만듭니다. 따라서의 값은 `path` 매개 변수는 기존 디렉터리를 포함 해야 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.IO.File.AppendAllText%2A> 메서드를 추가 텍스트 파일의 끝에 추가 합니다. 이 예제에서는 파일에 존재 하지 않는 및 텍스트에 추가 된 경우 만들어집니다. 그러나 디렉터리 라는 `temp` 드라이브 C 예제가 성공적으로 완료 되려면 존재 해야 합니다.  
  
 [!code-csharp[System.IO.File.AllText_Encoding#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllText_Encoding/cs/AllText.cs#00)]
 [!code-vb[System.IO.File.AllText_Encoding#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllText_Encoding/vb/AllText.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 디렉터리가 없거나 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />에 읽기 전용인 파일이 지정되었습니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 또는 디렉터리에 기록에 액세스 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /></permission>
      </Docs>
    </Member>
    <Member MemberName="AppendAllTextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AppendAllTextAsync (string path, string contents, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendAllTextAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAllTextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AppendAllTextAsync (string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AppendAllTextAsync(string path, string contents, class System.Text.Encoding encoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter AppendText (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter AppendText(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.AppendText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AppendText (path As String) As StreamWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamWriter ^ AppendText(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">추가 대상인 파일에 대한 경로입니다.</param>
        <summary>기존 파일 또는 지정된 파일이 존재하지 않는 경우 새 파일에 UTF-8 인코딩된 텍스트를 추가하는 <see cref="T:System.IO.StreamWriter" />를 만듭니다.</summary>
        <returns>UTF-8로 인코딩된 텍스트를 지정된 파일 또는 새 파일에 추가하는 스트림 작성기입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 해당 하는 <xref:System.IO.StreamWriter.%23ctor%28System.String%2CSystem.Boolean%29> 생성자 오버 로드 합니다. 으로 지정한 파일이 있으면 `path` 존재 하지 않는 생성 됩니다. 파일이 있으면 쓰기 작업을는 <xref:System.IO.StreamWriter> 파일에 텍스트를 추가 합니다. 추가 스레드는 열려 있는 동안 파일을 읽을 수 있습니다.  
  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 `path` 매개 변수는 대/소문자 구분 하지 않습니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 파일에 텍스트를 추가합니다. 파일이 존재 하지 않는 경우 메서드는 새 파일을 만듭니다. 그러나 디렉터리 라는 `temp` 드라이브 C 예제가 성공적으로 완료 되려면 존재 해야 합니다.  
  
 [!code-cpp[File_AppendText#1](~/samples/snippets/cpp/VS_Snippets_CLR/File_AppendText/CPP/file_appendtext.cpp#1)]
 [!code-csharp[File_AppendText#1](~/samples/snippets/csharp/VS_Snippets_CLR/File_AppendText/CS/file_appendtext.cs#1)]
 [!code-vb[File_AppendText#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File_AppendText/VB/file_appendtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 디렉터리가 없거나 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에 추가 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /></permission>
        <altmember cref="T:System.IO.StreamWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Copy">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>새 파일에 기존 파일을 복사합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (string sourceFileName, string destFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(string sourceFileName, string destFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Copy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (sourceFileName As String, destFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(System::String ^ sourceFileName, System::String ^ destFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">복사할 파일입니다.</param>
        <param name="destFileName">대상 파일 이름입니다. 대상 파일 이름은 디렉터리나 기존 파일일 수 없습니다.</param>
        <summary>새 파일에 기존 파일을 복사합니다. 같은 이름의 파일을 덮어쓸 수는 없습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 해당 하는 <xref:System.IO.File.Copy%28System.String%2CSystem.String%2CSystem.Boolean%29> 메서드 오버 로드와는 `overwrite` 매개 변수 설정 `false`합니다.  
  
 `sourceFileName` 및 `destFileName` 매개 변수는 상대 또는 절대 경로 정보를 지정할 수 있습니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조는 <xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=nameWithType> 메서드. 이 메서드는 매개 변수에서 와일드 카드 문자를 지원 하지 않습니다.  
  
 원본 파일의 특성 복사 된 파일에 유지 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 C:\archives\2008 백업 폴더에 파일을 복사합니다. 두 오버 로드를 사용 하 여는 <xref:System.IO.File.Copy%2A> 메서드를 다음과 같이 합니다.  
  
-   먼저 사용 하 여는 <xref:System.IO.File.Copy%28System.String%2CSystem.String%29?displayProperty=nameWithType> 메서드 오버 로드 텍스트 (.txt) 파일을 복사 합니다. 코드는이 오버 로드 하지 못하도록 이미 복사 된 파일을 덮어쓰지 보여줍니다.  
  
-   다음 사용 하 여는 <xref:System.IO.File.Copy%28System.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=nameWithType> 사진 (.jpg 파일) 메서드 오버 로드를 복사 합니다. 코드는이 오버 로드 이미 복사 된 파일을 덮어쓰지 못하도록 하는 방법을 보여 줍니다.  
  
 [!code-csharp[FileCopyDelete#1](~/samples/snippets/csharp/VS_Snippets_CLR/filecopydelete/cs/program.cs#1)]
 [!code-vb[FileCopyDelete#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/filecopydelete/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceFileName" /> 또는 <paramref name="destFileName" />이 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.  -또는-  <paramref name="sourceFileName" /> 또는 <paramref name="destFileName" />이 디렉터리를 지정합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceFileName" /> 또는 <paramref name="destFileName" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceFileName" /> 또는 <paramref name="destFileName" />에 지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="sourceFileName" />을 찾을 수 없습니다.</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="destFileName" />이 있습니다.  -또는-  I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceFileName" /> 또는 <paramref name="destFileName" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">읽는 <paramref name="sourceFileName" /> 및 쓰기 <paramref name="destFileName" />합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="M:System.IO.Directory.Move(System.String,System.String)" />
        <altmember cref="M:System.IO.File.Move(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (string sourceFileName, string destFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(string sourceFileName, string destFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Copy(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Copy (sourceFileName As String, destFileName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Copy(System::String ^ sourceFileName, System::String ^ destFileName, bool overwrite);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">복사할 파일입니다.</param>
        <param name="destFileName">대상 파일 이름입니다. 대상 파일 이름은 디렉터리가 될 수 없습니다.</param>
        <param name="overwrite">대상 파일을 덮어쓸 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>새 파일에 기존 파일을 복사합니다. 같은 이름의 파일을 덮어쓸 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `sourceFileName` 및 `destFileName` 매개 변수는 상대 또는 절대 경로 정보를 지정할 수 있습니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 이 메서드는 매개 변수에서 와일드 카드 문자를 지원 하지 않습니다.  
  
 원본 파일의 특성 복사 된 파일에 유지 됩니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 C:\archives\2008 백업 폴더에 파일을 복사합니다. 두 오버 로드를 사용 하 여는 <xref:System.IO.File.Copy%2A> 메서드를 다음과 같이 합니다.  
  
-   먼저 사용 하 여는 <xref:System.IO.File.Copy%28System.String%2CSystem.String%29?displayProperty=nameWithType> 메서드 오버 로드 텍스트 (.txt) 파일을 복사 합니다. 코드는이 오버 로드 하지 못하도록 이미 복사 된 파일을 덮어쓰지 보여줍니다.  
  
 다음 사용 하 여는 <xref:System.IO.File.Copy%28System.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=nameWithType> 사진 (.jpg 파일) 메서드 오버 로드를 복사 합니다. 코드는이 오버 로드 이미 복사 된 파일을 덮어쓰지 못하도록 하는 방법을 보여 줍니다.  
  
 [!code-csharp[FileCopyDelete#1](~/samples/snippets/csharp/VS_Snippets_CLR/filecopydelete/cs/program.cs#1)]
 [!code-vb[FileCopyDelete#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/filecopydelete/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우  -또는-  <paramref name="destFileName" />이 읽기 전용입니다.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceFileName" /> 또는 <paramref name="destFileName" />이 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.  -또는-  <paramref name="sourceFileName" /> 또는 <paramref name="destFileName" />이 디렉터리를 지정합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceFileName" /> 또는 <paramref name="destFileName" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceFileName" /> 또는 <paramref name="destFileName" />에 지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="sourceFileName" />을 찾을 수 없습니다.</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="destFileName" />이(가) 있으며 <paramref name="overwrite" />이(가) <see langword="false" />입니다.  -또는-  I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceFileName" /> 또는 <paramref name="destFileName" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">읽는 <paramref name="sourceFileName" /> 및 쓰기 <paramref name="destFileName" />합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="M:System.IO.Directory.Move(System.String,System.String)" />
        <altmember cref="M:System.IO.File.Move(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 경로에 파일을 만듭니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream Create (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream Create(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (path As String) As FileStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::FileStream ^ Create(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">만들 파일의 경로와 이름입니다.</param>
        <summary>지정된 경로에 파일을 만들거나 지정된 경로의 파일을 덮어씁니다.</summary>
        <returns>
          <see cref="T:System.IO.FileStream" />에 지정된 파일에 대한 읽기/쓰기 권한을 제공하는 <paramref name="path" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.FileStream> 이 메서드에서 만든 개체에는 기본 <xref:System.IO.FileShare> 값 <xref:System.IO.FileShare.None>; 다른 프로세스 또는 코드 원본 파일 핸들이 닫힐 때까지 파일에 액세스할 수 있습니다.  
  
 이 메서드는 해당 하는 <xref:System.IO.File.Create%28System.String%2CSystem.Int32%29> 기본 버퍼 크기를 사용 하 여 메서드 오버 로드 합니다.  
  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 지정된 된 파일이 없는 경우 자동으로 만들어집니다. 파일이 읽기 전용으로 설정 되지 않은 경우, 내용은 덮어씁니다.  
  
 새 파일에 대 한 모든 읽기/쓰기 액세스는 기본적으로 모든 사용자에 게 부여 됩니다. 파일 읽기/쓰기 권한으로 열리고 닫아야 다른 응용 프로그램에서 열 수 있습니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 지정된 된 경로에 파일을 만듭니다, 그리고 파일에 몇 가지 정보를 기록 및 해당 파일에서 읽습니다.  
  
 [!code-cpp[File Create1#1](~/samples/snippets/cpp/VS_Snippets_CLR/File Create1/CPP/file create1.cpp#1)]
 [!code-csharp[File Create1#1](~/samples/snippets/csharp/VS_Snippets_CLR/File Create1/CS/file create1.cs#1)]
 [!code-vb[File Create1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File Create1/VB/file create1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우  -또는-  <paramref name="path" />가 읽기 전용인 파일을 지정했습니다.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 만드는 중 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">설명 하는 파일을 읽고 쓸 수 있는 권한는 <paramref name="path" /> 매개 변수입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.Demand" /> 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream Create (string path, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream Create(string path, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Create(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (path As String, bufferSize As Integer) As FileStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::FileStream ^ Create(System::String ^ path, int bufferSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="path">파일의 이름입니다.</param>
        <param name="bufferSize">파일 읽기 및 쓰기를 위해 버퍼링할 바이트 수입니다.</param>
        <summary>지정된 파일을 만들거나 덮어씁니다.</summary>
        <returns>
          <see cref="T:System.IO.FileStream" />에 지정된 파일에 대한 읽기/쓰기 권한을 제공하는 지정된 버퍼 크기의 <paramref name="path" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.FileStream> 이 메서드에서 만든 개체에는 기본 <xref:System.IO.FileShare> 값 <xref:System.IO.FileShare.None>; 다른 프로세스 또는 코드 원본 파일 핸들이 닫힐 때까지 파일에 액세스할 수 있습니다.  
  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 이 메서드는 해당 하는 <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%29> 생성자 오버 로드 합니다. 지정된 된 파일이 없는 경우 자동으로 만들어집니다. 파일이 읽기 전용으로 설정 되지 않은 경우, 내용은 덮어씁니다.  
  
 새 파일에 대 한 모든 읽기/쓰기 액세스는 기본적으로 모든 사용자에 게 부여 됩니다. 파일 읽기/쓰기 권한으로 열리고 닫아야 다른 응용 프로그램에서 열 수 있습니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 지정 된 버퍼 크기는 파일을 만듭니다.  
  
 [!code-cpp[File Create2#1](~/samples/snippets/cpp/VS_Snippets_CLR/File Create2/CPP/file create2.cpp#1)]
 [!code-csharp[File Create2#1](~/samples/snippets/csharp/VS_Snippets_CLR/File Create2/CS/file create2.cs#1)]
 [!code-vb[File Create2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File Create2/VB/file create2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우  -또는-  <paramref name="path" />가 읽기 전용인 파일을 지정했습니다.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 만드는 중 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">설명 하는 파일을 읽고 쓸 수 있는 권한는 <paramref name="path" /> 매개 변수입니다. 보안 동작: 요청 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream Create (string path, int bufferSize, System.IO.FileOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream Create(string path, int32 bufferSize, valuetype System.IO.FileOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (path As String, bufferSize As Integer, options As FileOptions) As FileStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::FileStream ^ Create(System::String ^ path, int bufferSize, System::IO::FileOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="options" Type="System.IO.FileOptions" />
      </Parameters>
      <Docs>
        <param name="path">파일의 이름입니다.</param>
        <param name="bufferSize">파일 읽기 및 쓰기를 위해 버퍼링할 바이트 수입니다.</param>
        <param name="options">파일을 만들거나 덮어쓸 방식을 설명하는 <see cref="T:System.IO.FileOptions" /> 값 중 하나입니다.</param>
        <summary>버퍼 크기와 파일을 만들거나 덮어쓸 방식을 설명하는 <see cref="T:System.IO.FileOptions" /> 값을 지정하여 지정된 파일을 만들거나 덮어씁니다.</summary>
        <returns>지정된 버퍼 크기의 새 파일입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 이 메서드는 해당 하는 <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%29> 생성자 오버 로드 합니다. 지정된 된 파일이 없는 경우 자동으로 만들어집니다. 파일이 읽기 전용으로 설정 되지 않은 경우, 내용은 덮어씁니다.  
  
 새 파일에 대 한 모든 읽기/쓰기 액세스는 기본적으로 모든 사용자에 게 부여 됩니다. 파일 읽기/쓰기 권한으로 열리고 닫아야 다른 응용 프로그램에서 열 수 있습니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우  -또는-  <paramref name="path" />가 읽기 전용인 파일을 지정했습니다.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 만드는 중 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">설명 하는 파일을 읽고 쓸 수 있는 권한는 <paramref name="path" /> 매개 변수입니다. 보안 동작: 요청 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream Create (string path, int bufferSize, System.IO.FileOptions options, System.Security.AccessControl.FileSecurity fileSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream Create(string path, int32 bufferSize, valuetype System.IO.FileOptions options, class System.Security.AccessControl.FileSecurity fileSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::FileStream ^ Create(System::String ^ path, int bufferSize, System::IO::FileOptions options, System::Security::AccessControl::FileSecurity ^ fileSecurity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="options" Type="System.IO.FileOptions" />
        <Parameter Name="fileSecurity" Type="System.Security.AccessControl.FileSecurity" />
      </Parameters>
      <Docs>
        <param name="path">파일의 이름입니다.</param>
        <param name="bufferSize">파일 읽기 및 쓰기를 위해 버퍼링할 바이트 수입니다.</param>
        <param name="options">파일을 만들거나 덮어쓸 방식을 설명하는 <see cref="T:System.IO.FileOptions" /> 값 중 하나입니다.</param>
        <param name="fileSecurity">파일에 대한 액세스 제어 및 감사 보안을 결정하는 <see cref="T:System.Security.AccessControl.FileSecurity" /> 값 중 하나입니다.</param>
        <summary>지정된 버퍼 크기, 파일 옵션 및 파일 보안으로 지정된 파일을 만들거나 덮어씁니다.</summary>
        <returns>지정된 버퍼 크기, 파일 옵션 및 파일 보안이 적용된 새 파일입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 이 메서드는 해당 하는 <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%29> 생성자 오버 로드 합니다. 지정된 된 파일이 없는 경우 자동으로 만들어집니다. 파일이 읽기 전용으로 설정 되지 않은 경우, 내용은 덮어씁니다.  
  
 새 파일에 대 한 모든 읽기/쓰기 액세스는 기본적으로 모든 사용자에 게 부여 됩니다. 파일 읽기/쓰기 권한으로 열리고 닫아야 다른 응용 프로그램에서 열 수 있습니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우  -또는-  <paramref name="path" />가 읽기 전용인 파일을 지정했습니다.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 만드는 중 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">설명 하는 파일을 읽고 쓸 수 있는 권한는 <paramref name="path" /> 매개 변수입니다. 보안 동작: 요청 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateText">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter CreateText (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamWriter CreateText(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.CreateText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateText (path As String) As StreamWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamWriter ^ CreateText(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">쓰기용으로 열 파일입니다.</param>
        <summary>UTF-8로 인코딩된 텍스트를 쓰기 위해 파일을 만들거나 엽니다. 파일이 이미 있으면 해당 콘텐츠를 덮어씁니다.</summary>
        <returns>UTF-8 인코딩을 사용하여 지정된 파일에 쓸 <see cref="T:System.IO.StreamWriter" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 해당 하는 <xref:System.IO.StreamWriter.%23ctor%28System.String%2CSystem.Boolean%29> 생성자 오버 로드와는 `append` 매개 변수 설정 `false`합니다. 으로 지정한 파일이 있으면 `path` 존재 하지 않는 생성 됩니다. 파일이 없으면 해당 내용은 덮어씁니다. 추가 스레드는 열려 있는 동안 파일을 읽을 수 있습니다.  
  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 텍스트 쓰기와 읽기에 대 한 파일을 만듭니다.  
  
 [!code-cpp[File CreateText#1](~/samples/snippets/cpp/VS_Snippets_CLR/File CreateText/CPP/file createtext.cpp#1)]
 [!code-csharp[File CreateText#1](~/samples/snippets/csharp/VS_Snippets_CLR/File CreateText/CS/file createtext.cs#1)]
 [!code-vb[File CreateText#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File CreateText/VB/file createtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에 작성 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Decrypt">
      <MemberSignature Language="C#" Value="public static void Decrypt (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Decrypt(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Decrypt(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Decrypt (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Decrypt(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">해독할 파일을 나타내는 경로입니다.</param>
        <summary>현재 계정으로 <see cref="M:System.IO.File.Encrypt(System.String)" /> 메서드를 통해 암호화된 파일을 해독합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.File.Decrypt%2A> 메서드를 사용 하 여 암호화 된 파일을 암호 해독할 수 있습니다는 <xref:System.IO.File.Encrypt%2A> 메서드.  <xref:System.IO.File.Decrypt%2A> 메서드는 현재 사용자 계정을 사용 하 여 암호화 된 파일에만 해독할 수 있습니다.  
  
 <xref:System.IO.File.Decrypt%2A> 메서드를 해독 하는 파일에 대 한 단독 액세스 차지 하며 다른 프로세스에서 파일을 사용 하는 경우 예외가 발생 합니다. 파일이 암호화 되지 않은 경우 <xref:System.IO.File.Decrypt%2A> 성공을 의미 하는 0이 아닌 값을 반환 합니다.  
  
 두는 <xref:System.IO.File.Encrypt%2A> 메서드 및 <xref:System.IO.File.Decrypt%2A> 메서드에서 컴퓨터와 메서드를 호출 하는 프로세스의 파일 암호화 키에 설치 된 암호화 서비스 공급자 (CSP)을 사용 합니다.  
  
 현재 파일 시스템 NTFS 및 현재 운영 체제가 Windows NT 이루어야 서식이 지정 되거나 이상 이어야 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.IO.File.Encrypt%2A> 메서드 및 <xref:System.IO.File.Decrypt%2A> 메서드를 암호화 한 다음 파일을 해독 합니다. 이 예제에 대 한 파일이 있어야 합니다.  
  
 [!code-cpp[IO.File.Encrypt-Decrypt#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.Encrypt-Decrypt/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.Encrypt-Decrypt#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.Encrypt-Decrypt/CS/sample.cs#1)]
 [!code-vb[IO.File.Encrypt-Decrypt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.Encrypt-Decrypt/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> 매개 변수가 길이가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.DriveNotFoundException">잘못된 드라이브를 지정했습니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> 매개 변수에 설명된 파일을 찾을 수 없습니다.</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다. 예를 들어 암호화된 파일이 이미 열려 있습니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.PlatformNotSupportedException">현재 운영 체제가 Windows NT 이상이 아닙니다.</exception>
        <exception cref="T:System.NotSupportedException">NTFS 파일 시스템이 아닙니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> 매개 변수가 읽기 전용 파일을 지정합니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" /> 매개 변수가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">설명 하는 파일을 읽고 쓸 수 있는 권한는 <paramref name="path" /> 매개 변수입니다. 보안 동작: 요청 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Delete(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Delete (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Delete(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">삭제할 파일의 이름입니다. 와일드카드 문자는 지원되지 않습니다.</param>
        <summary>지정한 파일을 삭제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파일 이름에 대 한 모든 상대 또는 절대 경로 사용 하 여 지정 된 `path` 매개 변수입니다. 와일드 카드 문자를 포함할 수 없습니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 파일을 삭제할 수 없으면 예외가 발생 하지 않습니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 파일 그룹을 C:\archives\2008 백업 폴더에 복사한 다음 원본 폴더에서 삭제 합니다.  
  
 [!code-csharp[FileCopyDelete#1](~/samples/snippets/csharp/VS_Snippets_CLR/filecopydelete/cs/program.cs#1)]
 [!code-vb[FileCopyDelete#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/filecopydelete/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">지정된 파일이 사용 중입니다.  -또는-  파일에 대해 열린 핸들이 있고 운영 체제가 Windows XP 또는 이전 버전입니다. 이 열린 핸들은 디렉터리 및 파일을 열거하면 발생할 수 있습니다. 자세한 내용은 [방법: 디렉터리 및 파일 열거](~/docs/standard/io/how-to-enumerate-directories-and-files.md)를 참조하세요.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우  -또는-  파일이 사용 중인 실행 파일입니다.  -또는-  <paramref name="path" />는 디렉터리입니다.  -또는-  <paramref name="path" />가 읽기 전용 파일을 지정했습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일을 삭제 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public static void Encrypt (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Encrypt(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Encrypt(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Encrypt (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Encrypt(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">암호화할 파일을 나타내는 경로입니다.</param>
        <summary>파일을 암호화하는 데 사용된 계정으로만 해독할 수 있도록 암호화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.File.Encrypt%2A> 메서드를 사용 하면이 메서드를 호출 하는 데 사용 하는 계정 으로만 해독할 수 있도록 파일을 암호화할 수 있습니다. 사용 하 여는 <xref:System.IO.File.Decrypt%2A> 로 암호화 된 파일을 해독 하는 메서드는 <xref:System.IO.File.Encrypt%2A> 메서드.  
  
 <xref:System.IO.File.Encrypt%2A> 메서드 되 고 암호화 한 파일에 대 한 단독 액세스를 해야 하며 다른 프로세스에서 파일을 사용 하는 경우 되지 것입니다.  
  
 두는 <xref:System.IO.File.Encrypt%2A> 메서드 및 <xref:System.IO.File.Decrypt%2A> 메서드에서 컴퓨터와 메서드를 호출 하는 프로세스의 파일 암호화 키에 설치 된 암호화 서비스 공급자 (CSP)을 사용 합니다.  
  
 이 메서드는 모든 버전의 Windows에서 사용할 수 없습니다. 예를 들어 Home edition에서 사용할 수는 없습니다.  
  
 현재 파일 시스템을 NTFS로 포맷 되어야 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.IO.File.Encrypt%2A> 메서드 및 <xref:System.IO.File.Decrypt%2A> 메서드를 암호화 한 다음 파일을 해독 합니다. 이 예제에 대 한 파일이 있어야 합니다.  
  
 [!code-cpp[IO.File.Encrypt-Decrypt#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.Encrypt-Decrypt/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.Encrypt-Decrypt#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.Encrypt-Decrypt/CS/sample.cs#1)]
 [!code-vb[IO.File.Encrypt-Decrypt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.Encrypt-Decrypt/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> 매개 변수가 길이가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.DriveNotFoundException">잘못된 드라이브를 지정했습니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" /> 매개 변수에 설명된 파일을 찾을 수 없습니다.</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.PlatformNotSupportedException">현재 운영 체제가 Windows NT 이상이 아닙니다.</exception>
        <exception cref="T:System.NotSupportedException">NTFS 파일 시스템이 아닙니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> 매개 변수가 읽기 전용 파일을 지정합니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" /> 매개 변수가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">설명 하는 파일을 읽고 쓸 수 있는 권한는 <paramref name="path" /> 매개 변수입니다. 보안 동작: 요청 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Exists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Exists(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">확인할 파일입니다.</param>
        <summary>지정된 파일이 있는지를 확인합니다.</summary>
        <returns>호출자에게 필요한 권한이 있고 <paramref name="path" />에 기존 파일의 이름이 포함되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 또한 이 메서드는 <see langword="false" />가 <paramref name="path" />이거나 잘못된 경로이거나 빈 문자열이면 <see langword="null" />를 반환합니다. 호출자에게 지정된 파일을 읽을 권한이 없는 경우 예외가 throw되지 않으며 <see langword="false" />가 있는지 여부와 관계없이 <paramref name="path" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.File.Exists%2A> 메서드 경로 유효성 검사에 사용할 수 없습니다, 검사 파일에 지정 된 경우 `path` 존재 합니다. 잘못 된 경로를 전달 <xref:System.IO.File.Exists%2A> 반환 `false`합니다. 경로 잘못 된 문자가 포함 된 여부를 확인 하려면 호출할 수 있습니다는 <xref:System.IO.Path.GetInvalidPathChars%2A> 파일 시스템에 대 한 유효 하지 않은 문자를 검색 하는 메서드입니다. 여부를 테스트 하는 정규식을 만들 수도 있습니다 경로가 사용자 환경에 대 한 유효 합니다. 허용 가능한 경로의 예 참조 <xref:System.IO.File>합니다.  
  
 디렉터리가 있는지를 확인 하려면 참조 <xref:System.IO.Directory.Exists%2A?displayProperty=nameWithType>합니다.  
  
 다른 프로세스 조치할 수 있는 잠재적으로 파일 사이 호출할 때 유의 <xref:System.IO.File.Exists%2A> 메서드와 같은 파일에서 다른 작업을 수행 하 고 <xref:System.IO.File.Delete%2A>합니다.  
  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 경우 `path` 이 메서드가 반환 디렉터리를 나타내면 `false`합니다. 후행 공백을 제거는 `path` 파일이 있는 경우를 결정 하기 전에 매개 변수입니다.  
  
 <xref:System.IO.File.Exists%2A> 메서드 반환 `false` 지정한 파일이 있는지 확인 하는 동안 오류가 발생 하는 경우. 이 파일 이름에 잘못 된 문자 또는 실패 나 누락 된 디스크에 문자가 너무 많습니다. 전달할 때 예외를 발생 시키는 상황에서 발생할 수 있습니다 또는 호출자에 게 파일을 읽을 수 있는 사용 권한이 없습니다.  
  
   
  
## Examples  
 다음 예제에서는 파일이 있는지 확인 합니다.  
  
 [!code-csharp[File Exists#1](~/samples/snippets/csharp/VS_Snippets_CLR/File Exists/CS/program.cs#1)]
 [!code-vb[File Exists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File Exists/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에서 계속 하십시오. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="M:System.IO.Directory.Exists(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAccessControl">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 파일에 대한 ACL(액세스 제어 목록) 항목을 캡슐화하는 <see cref="T:System.Security.AccessControl.FileSecurity" /> 개체를 가져옵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.IO.FileInfo.GetAccessControl%2A> 액세스를 검색 하는 메서드 지정된 된 파일에 대 한 목록 (ACL) 항목을 제어 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public static System.Security.AccessControl.FileSecurity GetAccessControl (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.AccessControl.FileSecurity GetAccessControl(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetAccessControl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAccessControl (path As String) As FileSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::AccessControl::FileSecurity ^ GetAccessControl(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.FileSecurity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">파일의 ACL(액세스 제어 목록) 정보를 설명하는 <see cref="T:System.Security.AccessControl.FileSecurity" /> 개체가 포함된 파일의 경로입니다.</param>
        <summary>지정된 파일에 대한 ACL(액세스 제어 목록) 항목을 캡슐화하는 <see cref="T:System.Security.AccessControl.FileSecurity" /> 개체를 가져옵니다.</summary>
        <returns>
          <see cref="T:System.Security.AccessControl.FileSecurity" /> 매개 변수에 설명된 파일의 액세스 제어 규칙을 캡슐화하는 <paramref name="path" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.IO.File.GetAccessControl%2A> 파일에 대 한 액세스 제어 목록 (ACL) 항목을 검색 하는 메서드입니다.  
  
 개인 및/또는 나 갖지 않고에 지정된 된 파일에서 특정 작업을 수행할 권한을 그룹이 ACL에 설명 합니다. 자세한 내용은 [방법: Access Control 목록 항목 추가 또는 제거](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)를 참조하세요.  
  
 NTFS 환경에서 <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> 및 <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes> 사용자에 게 하는 경우 사용자에 게 권한이 부여 됩니다 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 부모 폴더에 대 한 합니다. 거부 하려면 <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> 및 <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>, 거부 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 부모 디렉터리에 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.IO.File.GetAccessControl%2A> 및 <xref:System.IO.File.SetAccessControl%2A> 목록 (ACL) 항목을 파일을 제어 하는 메서드를 추가 하 고 액세스를 제거 하십시오.  이 예제를 실행하려면 유효한 사용자 또는 그룹 계정을 제공해야 합니다.  
  
 [!code-cpp[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.Runtime.InteropServices.SEHException">
          <paramref name="path" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.SystemException">파일을 찾을 수 없습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> 매개 변수가 읽기 전용 파일을 지정합니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" /> 매개 변수가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">액세스 제어 목록을 읽을 수 있는 권한입니다. 보안 동작: 요청 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" />, <see cref="F:System.Security.AccessControl.AccessControlActions.View" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public static System.Security.AccessControl.FileSecurity GetAccessControl (string path, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.AccessControl.FileSecurity GetAccessControl(string path, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAccessControl (path As String, includeSections As AccessControlSections) As FileSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::AccessControl::FileSecurity ^ GetAccessControl(System::String ^ path, System::Security::AccessControl::AccessControlSections includeSections);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.FileSecurity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
      </Parameters>
      <Docs>
        <param name="path">파일의 ACL(액세스 제어 목록) 정보를 설명하는 <see cref="T:System.Security.AccessControl.FileSecurity" /> 개체가 포함된 파일의 경로입니다.</param>
        <param name="includeSections">가져올 ACL(액세스 제어 목록) 정보의 형식을 지정하는 <see cref="T:System.Security.AccessControl.AccessControlSections" /> 값 중 하나입니다.</param>
        <summary>특정 파일에 대해 지정된 형식의 ACL(액세스 제어 목록) 항목을 캡슐화하는 <see cref="T:System.Security.AccessControl.FileSecurity" /> 개체를 가져옵니다.</summary>
        <returns>
          <see cref="T:System.Security.AccessControl.FileSecurity" /> 매개 변수에 설명된 파일의 액세스 제어 규칙을 캡슐화하는 <paramref name="path" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.IO.File.GetAccessControl%2A> 파일에 대 한 액세스 제어 목록 (ACL) 항목을 검색 하는 메서드입니다.  
  
 개인 및/또는 나 갖지 않고에 지정된 된 파일에서 특정 작업을 수행할 권한을 그룹이 ACL에 설명 합니다. 자세한 내용은 [방법: Access Control 목록 항목 추가 또는 제거](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)를 참조하세요.  
  
 NTFS 환경에서 <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> 및 <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes> 사용자에 게 하는 경우 사용자에 게 권한이 부여 됩니다 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 부모 폴더에 대 한 합니다. 거부 하려면 <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> 및 <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>, 거부 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 부모 디렉터리에 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.Runtime.InteropServices.SEHException">
          <paramref name="path" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.SystemException">파일을 찾을 수 없습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> 매개 변수가 읽기 전용 파일을 지정합니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" /> 매개 변수가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">액세스 제어 목록을 읽을 수 있는 권한입니다. 보안 동작: 요청 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" />, <see cref="F:System.Security.AccessControl.AccessControlActions.View" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetAttributes">
      <MemberSignature Language="C#" Value="public static System.IO.FileAttributes GetAttributes (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.IO.FileAttributes GetAttributes(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetAttributes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAttributes (path As String) As FileAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::FileAttributes GetAttributes(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">파일의 경로입니다.</param>
        <summary>경로에 있는 파일의 <see cref="T:System.IO.FileAttributes" />를 가져옵니다.</summary>
        <returns>경로에 있는 파일의 <see cref="T:System.IO.FileAttributes" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예제는 `GetAttributes` 및 `SetAttributes` 적용 하 여 메서드는 `Archive` 및 `Hidden` 특성을 파일입니다.  
  
 [!code-cpp[File GetAttributes#1](~/samples/snippets/cpp/VS_Snippets_CLR/File GetAttributes/CPP/file getattributes.cpp#1)]
 [!code-csharp[File GetAttributes#1](~/samples/snippets/csharp/VS_Snippets_CLR/File GetAttributes/CS/file getattributes.cs#1)]
 [!code-vb[File GetAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File GetAttributes/VB/file getattributes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />이 비어 있거나, 공백만 포함하거나 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" />가 파일을 나타내며 유효하지 않은 경우(예: 매핑되지 않은 드라이브의 경로를 지정한 경우나 파일을 찾을 수 없는 경우)</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" />가 디렉터리를 나타내며 유효하지 않은 경우(예: 매핑되지 않은 드라이브의 경로를 지정한 경우나 디렉터리를 찾을 수 없는 경우)</exception>
        <exception cref="T:System.IO.IOException">이 파일을 다른 프로세서에서 사용 중입니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 읽기입니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetCreationTime">
      <MemberSignature Language="C#" Value="public static DateTime GetCreationTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetCreationTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetCreationTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCreationTime (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetCreationTime(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">만든 날짜와 시간 정보를 가져올 파일 또는 디렉터리입니다.</param>
        <summary>지정된 파일 또는 디렉터리의 만든 날짜와 시간을 반환합니다.</summary>
        <returns>지정된 파일이나 디렉터리를 만든 날짜와 시간으로 설정된 <see cref="T:System.DateTime" /> 구조체입니다. 이 값은 현지 시간으로 표현됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  이 메서드는 운영 체제에 의해 값을 가진 지속적으로 업데이트 되지 않을 수 있습니다는 네이티브 함수를 사용 하기 때문에 정확 하지 않은 값을 반환할 수 있습니다.  
  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 파일에서 설명 하는 경우는 `path` 매개 변수가 없는,이 메서드가 반환 서 기 1601 년 1 월 1 일 자정 12 시 (C.E.) Utc (협정 세계시)를 현지 시간으로 조정 합니다.  
  
 NTFS로 포맷 된 드라이브는 파일을 만든 시간, 짧은 시간 동안 등의 파일에 대 한 정보를 캐시할 수 있습니다. 결과적으로, 덮어쓰기 또는 기존 파일을 대체 하는 경우 파일의 생성 시간을 명시적으로 설정 해야 할 수도 있습니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 `GetCreationTime`합니다.  
  
 [!code-vb[System.IO.File.GetCreationTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.file.getcreationtime/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에서 계속 하십시오. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetCreationTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetCreationTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetCreationTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetCreationTimeUtc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCreationTimeUtc (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetCreationTimeUtc(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">만든 날짜와 시간 정보를 가져올 파일 또는 디렉터리입니다.</param>
        <summary>지정된 파일이나 디렉터리를 만든 날짜와 시간을 UTC 기준으로 반환합니다.</summary>
        <returns>지정된 파일이나 디렉터리를 만든 날짜와 시간으로 설정된 <see cref="T:System.DateTime" /> 구조체입니다. 이 값은 UTC 시간으로 표현됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  이 메서드는 운영 체제에 의해 값을 가진 지속적으로 업데이트 되지 않을 수 있습니다는 네이티브 함수를 사용 하기 때문에 정확 하지 않은 값을 반환할 수 있습니다.  
  
 파일에서 설명 하는 경우는 `path` 매개 변수가 없는,이 메서드가 반환 서 기 1601 년 1 월 1 일 자정 12 시 (C.E.) Utc (협정 세계시)입니다.  
  
 NTFS로 포맷 된 드라이브는 파일을 만든 시간, 짧은 시간 동안 등의 파일에 대 한 정보를 캐시할 수 있습니다. 결과적으로, 덮어쓰기 또는 기존 파일을 대체 하는 경우 파일의 생성 시간을 명시적으로 설정 해야 할 수도 있습니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.IO.File.GetCreationTimeUtc%2A> 메서드.  
  
 [!code-vb[System.IO.File.GetCreationTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.file.getcreationtime/vb/module2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에서 계속 하십시오. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetLastAccessTime">
      <MemberSignature Language="C#" Value="public static DateTime GetLastAccessTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastAccessTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetLastAccessTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastAccessTime (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetLastAccessTime(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">액세스 날짜와 시간 정보를 가져올 파일 또는 디렉터리입니다.</param>
        <summary>지정된 파일 또는 디렉터리를 마지막으로 액세스한 날짜와 시간을 반환합니다.</summary>
        <returns>지정된 파일 또는 디렉터리를 마지막으로 액세스한 날짜와 시간으로 설정된 <see cref="T:System.DateTime" /> 구조체입니다. 이 값은 현지 시간으로 표현됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  이 메서드는 운영 체제에 의해 값을 가진 지속적으로 업데이트 되지 않을 수 있습니다는 네이티브 함수를 사용 하기 때문에 정확 하지 않은 값을 반환할 수 있습니다.  
  
 파일에서 설명 하는 경우는 `path` 매개 변수가 없는,이 메서드가 반환 서 기 1601 년 1 월 1 일 자정 12 시 (C.E.) Utc (협정 세계시)를 현지 시간으로 조정 합니다.  
  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 `GetLastAccessTime`합니다.  
  
 [!code-cpp[File GetLastAccess#1](~/samples/snippets/cpp/VS_Snippets_CLR/File GetLastAccess/CPP/file getlastaccess.cpp#1)]
 [!code-csharp[File GetLastAccess#1](~/samples/snippets/csharp/VS_Snippets_CLR/File GetLastAccess/CS/file getlastaccess.cs#1)]
 [!code-vb[File GetLastAccess#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File GetLastAccess/VB/file getlastaccess.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에서 계속 하십시오. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetLastAccessTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetLastAccessTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastAccessTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetLastAccessTimeUtc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastAccessTimeUtc (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetLastAccessTimeUtc(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">액세스 날짜와 시간 정보를 가져올 파일 또는 디렉터리입니다.</param>
        <summary>지정된 파일 또는 디렉터리를 마지막으로 액세스한 날짜와 시간을 UTC 기준으로 반환합니다.</summary>
        <returns>지정된 파일 또는 디렉터리를 마지막으로 액세스한 날짜와 시간으로 설정된 <see cref="T:System.DateTime" /> 구조체입니다. 이 값은 UTC 시간으로 표현됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  이 메서드는 운영 체제에 의해 값을 가진 지속적으로 업데이트 되지 않을 수 있습니다는 네이티브 함수를 사용 하기 때문에 정확 하지 않은 값을 반환할 수 있습니다.  
  
 파일에서 설명 하는 경우는 `path` 매개 변수가 없는,이 메서드가 반환 서 기 1601 년 1 월 1 일 자정 12 시 (C.E.) Utc (협정 세계시)입니다.  
  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에서 계속 하십시오. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetLastWriteTime">
      <MemberSignature Language="C#" Value="public static DateTime GetLastWriteTime (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastWriteTime(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetLastWriteTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastWriteTime (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetLastWriteTime(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">쓴 날짜와 시간 정보를 가져올 파일 또는 디렉터리입니다.</param>
        <summary>지정된 파일 또는 디렉터리를 마지막으로 쓴 날짜와 시간을 반환합니다.</summary>
        <returns>지정된 파일 또는 디렉터리를 마지막으로 쓴 날짜와 시간으로 설정된 <see cref="T:System.DateTime" /> 구조체입니다. 이 값은 현지 시간으로 표현됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  이 메서드는 운영 체제에 의해 값을 가진 지속적으로 업데이트 되지 않을 수 있습니다는 네이티브 함수를 사용 하기 때문에 정확 하지 않은 값을 반환할 수 있습니다. 각 운영 체제 자체 규칙에 따라 마지막으로 쓴 시간을 관리합니다. 성능 향상을 위해 운영 체제 마지막 쓰기 작업이의 정확한 시간에 마지막 쓰기 시간 값을 설정할 수 있습니다 있지만 수로 설정할 근사치 대신 합니다.  
  
 파일에서 설명 하는 경우는 `path` 매개 변수가 없는,이 메서드가 반환 서 기 1601 년 1 월 1 일 자정 12 시 (C.E.) Utc (협정 세계시)를 현지 시간으로 조정 합니다.  
  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 `GetLastWriteTime`합니다.  
  
 [!code-cpp[File GetLastWrite#1](~/samples/snippets/cpp/VS_Snippets_CLR/File GetLastWrite/CPP/file getlastwrite.cpp#1)]
 [!code-csharp[File GetLastWrite#1](~/samples/snippets/csharp/VS_Snippets_CLR/File GetLastWrite/CS/file getlastwrite.cs#1)]
 [!code-vb[File GetLastWrite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File GetLastWrite/VB/file getlastwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에서 계속 하십시오. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetLastWriteTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime GetLastWriteTimeUtc (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime GetLastWriteTimeUtc(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.GetLastWriteTimeUtc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastWriteTimeUtc (path As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime GetLastWriteTimeUtc(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">쓴 날짜와 시간 정보를 가져올 파일 또는 디렉터리입니다.</param>
        <summary>지정된 파일 또는 디렉터리에 마지막으로 쓴 날짜와 시간을 UTC 기준으로 반환합니다.</summary>
        <returns>지정된 파일 또는 디렉터리를 마지막으로 쓴 날짜와 시간으로 설정된 <see cref="T:System.DateTime" /> 구조체입니다. 이 값은 UTC 시간으로 표현됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  이 메서드는 운영 체제에 의해 값을 가진 지속적으로 업데이트 되지 않을 수 있습니다는 네이티브 함수를 사용 하기 때문에 정확 하지 않은 값을 반환할 수 있습니다. 각 운영 체제 자체 규칙에 따라 마지막으로 쓴 시간을 관리합니다. 성능 향상을 위해 운영 체제 마지막 쓰기 작업이의 정확한 시간에 마지막 쓰기 시간 값을 설정할 수 있습니다 있지만 수로 설정할 근사치 대신 합니다.  
  
 파일에서 설명 하는 경우는 `path` 매개 변수가 없는,이 메서드가 반환 서 기 1601 년 1 월 1 일 자정 12 시 (C.E.) Utc (협정 세계시)입니다.  
  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에서 계속 하십시오. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public static void Move (string sourceFileName, string destFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Move(string sourceFileName, string destFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Move(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Move (sourceFileName As String, destFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Move(System::String ^ sourceFileName, System::String ^ destFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">이동할 파일의 이름입니다. 상대 또는 절대 경로가 포함될 수 있습니다.</param>
        <param name="destFileName">파일에 대한 새 경로 및 이름입니다.</param>
        <summary>지정된 파일을 새 위치로 이동하고 새 파일의 이름을 지정할 수 있는 옵션을 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 디스크 볼륨에 걸쳐 사용할 수 있는이 방법 및 소스와 대상이 동일한 경우 예외를 throw 하지 않습니다. 동일한 이름의 파일이 해당 디렉터리로 이동 하 여 파일을 대체 하려고 하는 경우 유의 <xref:System.IO.IOException>합니다. 기존 파일을 덮어쓸지 Move 메서드를 사용할 수 없습니다.  
  
 `sourceFileName` 및 `destFileName` 인수는 상대 또는 절대 경로 정보를 포함할 수 있습니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 여러 디스크 볼륨에서 파일을 이동 하려고 하면 해당 파일을 사용 하는 경우 파일의 위치에 복사 하지만 소스에서 삭제 되지 않습니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 파일을 이동합니다.  
  
 [!code-cpp[File Move#1](~/samples/snippets/cpp/VS_Snippets_CLR/File Move/CPP/file move.cpp#1)]
 [!code-csharp[File Move#1](~/samples/snippets/csharp/VS_Snippets_CLR/File Move/CS/file move.cs#1)]
 [!code-vb[File Move#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File Move/VB/file move.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">대상 파일이 이미 있습니다.  -또는-  <paramref name="sourceFileName" />을 찾을 수 없습니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceFileName" /> 또는 <paramref name="destFileName" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceFileName" /> 또는 <paramref name="destFileName" />이 길이가 0인 문자열이거나, 공백만 포함하거나, <see cref="F:System.IO.Path.InvalidPathChars" />에 정의된 잘못된 문자를 포함하는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="sourceFileName" /> 또는 <paramref name="destFileName" />에 지정된 경로가 잘못된 경우(예: 매핑되지 않은 드라이브의 경로를 지정한 경우)</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="sourceFileName" /> 또는 <paramref name="destFileName" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">읽는 <paramref name="sourceFileName" /> 및 쓰기 <paramref name="destFileName" />합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 경로에서 <see cref="T:System.IO.FileStream" />을 엽니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream Open (string path, System.IO.FileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream Open(string path, valuetype System.IO.FileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Open(System.String,System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, mode As FileMode) As FileStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::FileStream ^ Open(System::String ^ path, System::IO::FileMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="path">열 파일입니다.</param>
        <param name="mode">파일이 없는 경우 파일을 만들 것인지를 지정하고, 기존 파일 내용을 유지할 것인지 덮어쓸 것인지를 결정하는 <see cref="T:System.IO.FileMode" /> 값입니다.</param>
        <summary>지정된 경로에서 <see cref="T:System.IO.FileStream" />을 공유하지 않고 읽기/쓰기 액세스로 엽니다.</summary>
        <returns>읽기/쓰기 액세스 및 공유하지 않는 상태로 지정된 모드와 경로에서 열린 <see cref="T:System.IO.FileStream" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 임시 파일을 만들고 일부 텍스트를 씁니다. 이 예제에서는 다음 T:System.IO.FileMode.Open;를 사용 하 여 파일을 엽니다. 즉, 파일이 이미 존재 하지 않는 경우이 만들어지지 않습니다.  
  
 [!code-cpp[File Open1#1](~/samples/snippets/cpp/VS_Snippets_CLR/File Open1/CPP/file open1.cpp#1)]
 [!code-csharp[File Open1#1](~/samples/snippets/csharp/VS_Snippets_CLR/File Open1/CS/file open1.cs#1)]
 [!code-vb[File Open1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File Open1/VB/file open1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />에 읽기 전용인 파일이 지정되었습니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.  -또는-  <paramref name="mode" />가 <see cref="F:System.IO.FileMode.Create" />이고 지정된 파일이 숨겨진 파일입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" />가 잘못된 값을 지정하는 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" />에 지정된 파일을 찾을 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">읽고 지정된 된 파일에 작성 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream Open (string path, System.IO.FileMode mode, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream Open(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, mode As FileMode, access As FileAccess) As FileStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::FileStream ^ Open(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="path">열 파일입니다.</param>
        <param name="mode">파일이 없는 경우 파일을 만들 것인지를 지정하고, 기존 파일 내용을 유지할 것인지 덮어쓸 것인지를 결정하는 <see cref="T:System.IO.FileMode" /> 값입니다.</param>
        <param name="access">파일에 수행할 수 있는 작업을 지정하는 <see cref="T:System.IO.FileAccess" /> 값입니다.</param>
        <summary>지정된 경로에서 <see cref="T:System.IO.FileStream" />을 공유하지 않고 지정된 모드와 액세스로 엽니다.</summary>
        <returns>지정된 모드와 액세스 권한으로 지정된 파일에 대한 액세스를 제공하는 공유되지 않는 <see cref="T:System.IO.FileStream" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
   
  
## Examples  
 다음 예에서는 읽기 전용 액세스 권한으로 파일을 엽니다.  
  
 [!code-cpp[file open2#1](~/samples/snippets/cpp/VS_Snippets_CLR/File Open2/CPP/file open2.cpp#1)]
 [!code-csharp[file open2#1](~/samples/snippets/csharp/VS_Snippets_CLR/File Open2/CS/file open2.cs#1)]
 [!code-vb[file open2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File Open2/VB/file open2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.  -또는-  <paramref name="access" />가 <see langword="Read" />를 지정하고, <paramref name="mode" />가 <see langword="Create" />, <see langword="CreateNew" />, <see langword="Truncate" /> 또는 <see langword="Append" />를 지정했습니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />가 읽기 전용인 파일을 지정하고 <paramref name="access" />가 <see langword="Read" />가 아닌 경우  -또는-  <paramref name="path" />가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.  -또는-  <paramref name="mode" />가 <see cref="F:System.IO.FileMode.Create" />이고 지정된 파일이 숨겨진 파일입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" /> 또는 <paramref name="access" />가 잘못된 값을 지정하는 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" />에 지정된 파일을 찾을 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">읽고 지정된 된 파일에 작성 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream Open (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream Open(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, mode As FileMode, access As FileAccess, share As FileShare) As FileStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::FileStream ^ Open(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="path">열 파일입니다.</param>
        <param name="mode">파일이 없는 경우 파일을 만들 것인지를 지정하고, 기존 파일 내용을 유지할 것인지 덮어쓸 것인지를 결정하는 <see cref="T:System.IO.FileMode" /> 값입니다.</param>
        <param name="access">파일에 수행할 수 있는 작업을 지정하는 <see cref="T:System.IO.FileAccess" /> 값입니다.</param>
        <param name="share">다른 스레드가 파일에 대해 가지는 액세스 형식을 지정하는 <see cref="T:System.IO.FileShare" /> 값입니다.</param>
        <summary>읽기, 쓰기 또는 읽기/쓰기 권한과 지정된 공유 옵션을 사용하여 지정된 경로에서 지정된 모드를 갖는 <see cref="T:System.IO.FileStream" />을 엽니다.</summary>
        <returns>읽기, 쓰기 또는 읽기/쓰기 권한과 지정된 공유 옵션을 사용하여 지정된 경로에서 지정된 모드를 갖는 <see cref="T:System.IO.FileStream" />을 엽니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예에서는 읽기 전용 액세스와 및 허용 되지 않는 파일 공유로 파일을 엽니다.  
  
 [!code-cpp[file open3#1](~/samples/snippets/cpp/VS_Snippets_CLR/File Open3/CPP/file open3.cpp#1)]
 [!code-csharp[file open3#1](~/samples/snippets/csharp/VS_Snippets_CLR/File Open3/CS/file open3.cs#1)]
 [!code-vb[file open3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File Open3/VB/file open3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.  -또는-  <paramref name="access" />가 <see langword="Read" />를 지정하고, <paramref name="mode" />가 <see langword="Create" />, <see langword="CreateNew" />, <see langword="Truncate" /> 또는 <see langword="Append" />를 지정했습니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />가 읽기 전용인 파일을 지정하고 <paramref name="access" />가 <see langword="Read" />가 아닌 경우  -또는-  <paramref name="path" />가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.  -또는-  <paramref name="mode" />가 <see cref="F:System.IO.FileMode.Create" />이고 지정된 파일이 숨겨진 파일입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" />, <paramref name="access" /> 또는 <paramref name="share" />가 잘못된 값을 지정하는 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" />에 지정된 파일을 찾을 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">읽고 지정된 된 파일에 작성 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream OpenRead (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream OpenRead(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.OpenRead(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenRead (path As String) As FileStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::FileStream ^ OpenRead(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">읽기용으로 열 파일입니다.</param>
        <summary>읽기용으로 기존 파일을 엽니다.</summary>
        <returns>지정된 경로에 있는 읽기 전용 <see cref="T:System.IO.FileStream" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 해당 하는 <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%29> 생성자 오버 로드와는 <xref:System.IO.FileMode> 값 <xref:System.IO.FileMode.Open>, <xref:System.IO.FileAccess> 값 <xref:System.IO.FileAccess.Read> 및 <xref:System.IO.FileShare> 의 값 <xref:System.IO.FileShare.Read>합니다.  
  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예에서는 읽기 위해 파일을 엽니다.  
  
 [!code-cpp[file openread#1](~/samples/snippets/cpp/VS_Snippets_CLR/File OpenRead/CPP/file openread.cpp#1)]
 [!code-csharp[file openread#1](~/samples/snippets/csharp/VS_Snippets_CLR/File OpenRead/CS/file openread.cs#1)]
 [!code-vb[file openread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File OpenRead/VB/file openread.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />에 디렉터리가 지정되었습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" />에 지정된 파일을 찾을 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에서 계속 하십시오. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="OpenText">
      <MemberSignature Language="C#" Value="public static System.IO.StreamReader OpenText (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.StreamReader OpenText(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.OpenText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenText (path As String) As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::StreamReader ^ OpenText(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">읽기용으로 열 파일입니다.</param>
        <summary>UTF-8로 인코딩된 기존 텍스트 파일을 읽기용으로 엽니다.</summary>
        <returns>지정된 경로에 있는 <see cref="T:System.IO.StreamReader" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 해당 하는 <xref:System.IO.StreamReader.%23ctor%28System.String%29> 생성자 오버 로드 합니다.  
  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예에서는 읽기에 대 한 텍스트 파일을 엽니다.  
  
 [!code-cpp[file opentext#1](~/samples/snippets/cpp/VS_Snippets_CLR/File OpenText/CPP/file opentext.cpp#1)]
 [!code-csharp[file opentext#1](~/samples/snippets/csharp/VS_Snippets_CLR/File OpenText/CS/file opentext.cs#1)]
 [!code-vb[file opentext#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File OpenText/VB/file opentext.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" />에 지정된 파일을 찾을 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에서 계속 하십시오. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public static System.IO.FileStream OpenWrite (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.FileStream OpenWrite(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.OpenWrite(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenWrite (path As String) As FileStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::FileStream ^ OpenWrite(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">쓰기용으로 열 파일입니다.</param>
        <summary>쓰기 위해 기존 파일을 열거나 새 파일을 만듭니다.</summary>
        <returns>
          <see cref="T:System.IO.FileStream" /> 액세스 권한이 있는 지정된 경로에서 공유되지 않은 <see cref="F:System.IO.FileAccess.Write" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 해당 하는 <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%29> 생성자 오버 로드로 설정 하는 파일 모드와 <xref:System.IO.FileMode.OpenOrCreate>로 설정 하는 액세스 <xref:System.IO.FileAccess.Write>, 공유 모드 설정 하 고 <xref:System.IO.FileShare.None>합니다.  
  
 <xref:System.IO.File.OpenWrite%2A> 메서드 하나 이미 파일 경로 대 한 존재 하거나 존재 하지 않는 경우 새 파일을 만듭니다는 파일을 엽니다. 기존 파일에 대 한 추가 하지 않습니다 새 텍스트를 기존 텍스트입니다. 대신, 새 문자를 사용한 기존 문자를 덮어씁니다. 파일 문자열을 혼합 하 여 포함 됩니다을 덮어쓴 경우 긴 문자열 (예: "있는 그대로"이 OpenWrite 메서드의 테스트) (예: "두 번째 실행") 짧은 문자열 ("OpenWrite 메서드의 두 번째 runtest").  
  
 `path` 매개 변수는 상대 또는 절대 경로 정보를 지정할 수 있습니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면는 <xref:System.IO.Directory.GetCurrentDirectory%2A> 메서드.  
  
 반환 된 <xref:System.IO.FileStream> 읽기를 지원 하지 않습니다. 사용 하 여 읽기 및 쓰기 모두에 대 한 파일을 열려면 <xref:System.IO.File.Open%2A>합니다.

 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예에서는 읽기 및 쓰기에 파일을 엽니다.  
  
 [!code-cpp[file openwrite#1](~/samples/snippets/cpp/VS_Snippets_CLR/File OpenWrite/CPP/file openwrite.cpp#1)]
 [!code-csharp[file openwrite#1](~/samples/snippets/csharp/VS_Snippets_CLR/File OpenWrite/CS/file openwrite.cs#1)]
 [!code-vb[file openwrite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File OpenWrite/VB/file openwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우  -또는-  <paramref name="path" />가 읽기 전용 파일 또는 디렉터리를 지정했습니다.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에 작성 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadAllBytes">
      <MemberSignature Language="C#" Value="public static byte[] ReadAllBytes (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] ReadAllBytes(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadAllBytes (path As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ ReadAllBytes(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">읽기 위해 열 파일입니다.</param>
        <summary>이진 파일을 열고 파일의 내용을 바이트 배열로 읽어 들인 다음 파일을 닫습니다.</summary>
        <returns>파일의 내용을 포함하는 바이트 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 파일 경로 지정 된 파일을 열고 파일의 내용을 바이트 배열로 읽고 파일을 닫습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">현재 플랫폼이 해당 작업을 지원하지 않는 경우  -또는-  <paramref name="path" />가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" />에 지정된 파일을 찾을 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 또는 디렉터리에서 읽기에 액세스 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadAllBytesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;byte[]&gt; ReadAllBytesAsync (string path, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; ReadAllBytesAsync(string path, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadAllLines">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>텍스트 파일을 열고 파일의 모든 줄을 문자열 배열로 읽어 들인 다음 파일을 닫습니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadAllLines">
      <MemberSignature Language="C#" Value="public static string[] ReadAllLines (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] ReadAllLines(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllLines(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadAllLines (path As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ ReadAllLines(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">읽기 위해 열 파일입니다.</param>
        <summary>텍스트 파일을 열고 파일의 모든 줄을 읽은 다음 파일을 닫습니다.</summary>
        <returns>파일의 모든 줄을 포함하는 문자열 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파일의 각 줄을 읽고이 메서드는 파일을 열고 문자열 배열의 요소와 각 줄을 추가 합니다. 다음 파일을 닫습니다. 문자 뒤에 캐리지 리턴 (\r)의 순서로 정의 줄 바꿈 ('\n') 또는 줄 바로 뒤에 캐리지 리턴 줄 바꿈 합니다. 결과 문자열에 종료 캐리지 리턴 및/또는 줄 바꿈 없습니다.  
  
 이 메서드는 바이트 순서 표시의 존재 여부에 따라 파일의 인코딩을 자동으로 검색 하려고 합니다. 인코딩은 u t F-8 서식과 u t F-32 (little endian 및 big endian)를 검색할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.IO.File.ReadAllLines%2A> 파일의 내용을 표시 하는 메서드. 이 예제에서는 존재 하지 않는 및 텍스트에 추가 된 경우 파일 생성 됩니다.  
  
 [!code-csharp[System.IO.File.AllLines#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllLines/cs/AllText.cs#00)]
 [!code-vb[System.IO.File.AllLines#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllLines/vb/AllText.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />에 읽기 전용인 파일이 지정되었습니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" />에 지정된 파일을 찾을 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 또는 디렉터리에서 읽기에 액세스 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadAllLines">
      <MemberSignature Language="C#" Value="public static string[] ReadAllLines (string path, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] ReadAllLines(string path, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllLines(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ ReadAllLines(System::String ^ path, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">읽기 위해 열 파일입니다.</param>
        <param name="encoding">파일의 내용에 적용되는 인코딩입니다.</param>
        <summary>파일을 열고 지정된 인코딩을 사용하여 파일의 모든 줄을 읽은 다음 파일을 닫습니다.</summary>
        <returns>파일의 모든 줄을 포함하는 문자열 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 파일을 열고 파일의 각 줄 읽고 문자열 배열의 요소와 각 줄을 추가 합니다. 다음 파일을 닫습니다. 문자 뒤에 캐리지 리턴 (\r)의 순서로 정의 줄 바꿈 ('\n') 또는 줄 바로 뒤에 캐리지 리턴 줄 바꿈 합니다. 결과 문자열에 종료 캐리지 리턴 및/또는 줄 바꿈 없습니다.  
  
 이 메서드는 바이트 순서 표시의 존재 여부에 따라 파일의 인코딩을 자동으로 검색 하려고 합니다. 인코딩은 u t F-8 서식과 u t F-32 (little endian 및 big endian)를 검색할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.IO.File.ReadAllLines%2A> 파일의 내용을 표시 하는 메서드. 이 예제에서는 존재 하지 않는 및 텍스트에 추가 된 경우 파일 생성 됩니다.  
  
 [!code-csharp[System.IO.File.AllLines_Encoding#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllLines_Encoding/cs/AllText_Encoding.cs#00)]
 [!code-vb[System.IO.File.AllLines_Encoding#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllLines_Encoding/vb/AllText_Encoding.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />에 읽기 전용인 파일이 지정되었습니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" />에 지정된 파일을 찾을 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 또는 디렉터리에서 읽기에 액세스 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadAllLinesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string[]&gt; ReadAllLinesAsync (string path, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string[]&gt; ReadAllLinesAsync(string path, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAllLinesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string[]&gt; ReadAllLinesAsync (string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string[]&gt; ReadAllLinesAsync(string path, class System.Text.Encoding encoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllLinesAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadAllText">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>텍스트 파일을 열고 파일의 모든 줄을 문자열로 읽어 들인 다음 파일을 닫습니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public static string ReadAllText (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadAllText(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadAllText (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ReadAllText(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">읽기 위해 열 파일입니다.</param>
        <summary>텍스트 파일을 열고 파일의 모든 줄을 읽은 다음 파일을 닫습니다.</summary>
        <returns>파일의 모든 줄을 포함하는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 파일을 열고 파일의 각 줄 읽고 요소는 문자열의 각 줄을 추가 합니다. 다음 파일을 닫습니다. 문자 뒤에 캐리지 리턴 (\r)의 순서로 정의 줄 바꿈 ('\n') 또는 줄 바로 뒤에 캐리지 리턴 줄 바꿈 합니다. 결과 문자열에 종료 캐리지 리턴 및/또는 줄 바꿈 없습니다.  
  
 이 메서드는 바이트 순서 표시의 존재 여부에 따라 파일의 인코딩을 자동으로 검색 하려고 합니다. 인코딩은 u t F-8 서식과 u t F-32 (little endian 및 big endian)를 검색할 수 있습니다.  
  
 사용 하 여 <xref:System.IO.File.ReadAllText%28System.String%2CSystem.Text.Encoding%29> 인식 되지 않는 문자에 가져온된 텍스트가 포함 될 수 있는 파일을 읽는 읽지 올바르게 메서드 오버 로드 합니다.  
  
 파일 핸들은 예외가 발생 하는 경우에이 메서드에 의해 닫혀야 보장 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.IO.File.ReadAllText%2A> 파일의 내용을 표시 하는 메서드. 이 예제에서는 존재 하지 않는 및 텍스트에 추가 된 경우 파일 생성 됩니다.  
  
 [!code-csharp[System.IO.File.AllText#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllText/cs/AllText.cs#00)]
 [!code-vb[System.IO.File.AllText#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllText/vb/AllText.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />에 읽기 전용인 파일이 지정되었습니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" />에 지정된 파일을 찾을 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 또는 디렉터리에서 읽기에 액세스 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public static string ReadAllText (string path, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadAllText(string path, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllText(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ReadAllText(System::String ^ path, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">읽기 위해 열 파일입니다.</param>
        <param name="encoding">파일의 내용에 적용되는 인코딩입니다.</param>
        <summary>파일을 열고 지정된 인코딩을 사용하여 파일의 모든 줄을 읽은 다음 파일을 닫습니다.</summary>
        <returns>파일의 모든 줄을 포함하는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 파일을 열고 파일의 각 줄 읽고 요소는 문자열의 각 줄을 추가 합니다. 다음 파일을 닫습니다. 문자 뒤에 캐리지 리턴 (\r)의 순서로 정의 줄 바꿈 ('\n') 또는 줄 바로 뒤에 캐리지 리턴 줄 바꿈 합니다. 결과 문자열에 종료 캐리지 리턴 및/또는 줄 바꿈 없습니다.  
  
 이 메서드는 바이트 순서 표시의 존재 여부에 따라 파일의 인코딩을 자동으로 검색 하려고 합니다. 인코딩은 u t F-8 서식과 u t F-32 (little endian 및 big endian)를 검색할 수 있습니다.  
  
 파일 핸들은 예외가 발생 하는 경우에이 메서드에 의해 닫혀야 보장 됩니다.  
  
 운영 체제에 구성 된 대로 인코딩 설정을 사용 하려면 지정 된 <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType> 속성에 대 한는 `encoding` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.IO.File.ReadAllText%2A> 파일의 내용을 표시 하는 메서드. 이 예제에서는 존재 하지 않는 및 텍스트에 추가 된 경우 파일 생성 됩니다.  
  
 [!code-csharp[System.IO.File.AllText_Encoding#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllText_Encoding/cs/AllText.cs#00)]
 [!code-vb[System.IO.File.AllText_Encoding#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllText_Encoding/vb/AllText.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />에 읽기 전용인 파일이 지정되었습니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" />에 지정된 파일을 찾을 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 또는 디렉터리에서 읽기에 액세스 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ReadAllTextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; ReadAllTextAsync (string path, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; ReadAllTextAsync(string path, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllTextAsync(System.String,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAllTextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; ReadAllTextAsync (string path, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; ReadAllTextAsync(string path, class System.Text.Encoding encoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadLines">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>파일의 줄을 읽습니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadLines">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; ReadLines (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; ReadLines(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadLines(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadLines (path As String) As IEnumerable(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ ReadLines(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">읽을 파일입니다.</param>
        <summary>파일의 줄을 읽습니다.</summary>
        <returns>파일의 모든 줄 또는 쿼리 결과의 줄입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.File.ReadLines%2A> 및 <xref:System.IO.File.ReadAllLines%2A> 방법은 다음과 같이 달라: 사용 하는 경우 <xref:System.IO.File.ReadLines%2A>, 문자열의 컬렉션을 열거 하 고, 전체 컬렉션을 반환 하기 전에 작업을 시작할 수 있습니다; 사용 하는 경우 <xref:System.IO.File.ReadAllLines%2A>, 문자열의 전체 배열에 대해 기다려야 배열에 액세스 하려면 먼저 반환 됩니다. 따라서 매우 큰 파일을 사용 하 여 작업할 때 <xref:System.IO.File.ReadLines%2A> 더 효과적일 수 있습니다.  
  
 사용할 수는 <xref:System.IO.File.ReadLines%2A> 다음을 수행 하는 메서드:  
  
-   수행 [LINQ to Objects](http://msdn.microsoft.com/library/73cafe73-37cf-46e7-bfa7-97c7eea7ced9) 라인 필터링 된 집합을 가져와서 파일에 대 한 쿼리 합니다.  
  
-   줄의 반환 된 컬렉션으로 파일에 쓰기는 <xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29?displayProperty=nameWithType> 메서드를 가진 기존 파일에 추가 <xref:System.IO.File.AppendAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29?displayProperty=nameWithType> 메서드.  
  
-   사용 하는 컬렉션의 지정된 된 즉시 인스턴스를 만들고는 <xref:System.Collections.Generic.IEnumerable%601> 해당 생성자에 대 한 문자열 컬렉션을와 같은 <xref:System.Collections.Generic.IList%601> 또는 <xref:System.Collections.Generic.Queue%601>합니다.  
  
 이 방법은 사용 하 여 <xref:System.Text.Encoding.UTF8%2A> 인코딩 값에 대 한 합니다.  
  
   
  
## Examples  
 다음 예제에서는 지정 된 문자열을 포함 하는 줄을 찾을 수 파일의 줄을 읽습니다.  
  
 [!code-csharp[System.IO.File.ReadLines#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.file.readlines/cs/program.cs#1)]
 [!code-vb[System.IO.File.ReadLines#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.file.readlines/vb/program.vb#1)]  
  
 다음 예제에서는 <xref:System.IO.File.ReadLines%2A> 확장명이.txt 인 파일에 대 한 모든 디렉터리를 열거 하는 LINQ 쿼리에서 메서드는 파일의 각 줄을 읽고 문자열 "Microsoft"를 포함 하는 경우 행이 표시 됩니다.  
  
 [!code-csharp[System.IO.Directory.EnumerateFiles#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directory.enumeratefiles/cs/program.cs#1)]
 [!code-vb[System.IO.Directory.EnumerateFiles#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directory.enumeratefiles/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 메서드로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" />가 잘못된 경우(예: 매핑되지 않은 드라이브의 경로를 지정한 경우)</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" />로 지정된 파일을 찾을 수 없습니다.</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="path" />가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />가 읽기 전용 파일을 지정합니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />는 디렉터리입니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadLines">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;string&gt; ReadLines (string path, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;string&gt; ReadLines(string path, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.ReadLines(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ ReadLines(System::String ^ path, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">읽을 파일입니다.</param>
        <param name="encoding">파일의 내용에 적용되는 인코딩입니다.</param>
        <summary>지정된 인코딩을 가진 파일의 줄을 읽습니다.</summary>
        <returns>파일의 모든 줄 또는 쿼리 결과의 줄입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하 여 파일을 읽을 인코딩을 사용 하 여 지정할 수 있습니다.  
  
 <xref:System.IO.File.ReadLines%2A> 및 <xref:System.IO.File.ReadAllLines%2A> 방법은 다음과 같이 달라: 사용 하는 경우 <xref:System.IO.File.ReadLines%2A>, 문자열의 컬렉션을 열거 하 고, 전체 컬렉션을 반환 하기 전에 작업을 시작할 수 있습니다. 사용 하는 경우 <xref:System.IO.File.ReadAllLines%2A>를 배열에 액세스 하기 전에 문자열의 전체 배열이 반환에 대해 기다려야 합니다. 따라서 매우 큰 파일을 사용 하 여 작업할 때 <xref:System.IO.File.ReadLines%2A> 더 효과적일 수 있습니다.  
  
 사용할 수는 <xref:System.IO.File.ReadLines%2A> 다음을 수행 하는 메서드:  
  
-   수행 [LINQ to Objects](http://msdn.microsoft.com/library/73cafe73-37cf-46e7-bfa7-97c7eea7ced9) 라인 필터링 된 집합을 가져와서 파일에 대 한 쿼리 합니다.  
  
-   줄의 반환 된 컬렉션으로 파일에 쓰기는 <xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.Text.Encoding%29?displayProperty=nameWithType> 메서드를 가진 기존 파일에 추가 <xref:System.IO.File.AppendAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.Text.Encoding%29?displayProperty=nameWithType> 메서드.  
  
-   사용 하는 컬렉션의 지정된 된 즉시 인스턴스를 만들고는 <xref:System.Collections.Generic.IEnumerable%601> 해당 생성자에 대 한 문자열 컬렉션을와 같은 <xref:System.Collections.Generic.IList%601> 또는 <xref:System.Collections.Generic.Queue%601>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 길이가 0인 문자열이거나, 공백만 포함하거나, <see cref="M:System.IO.Path.GetInvalidPathChars" /> 메서드에 정의된 하나 이상의 잘못된 문자를 포함하는 경우</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" />가 잘못된 경우(예: 매핑되지 않은 드라이브의 경로를 지정한 경우)</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="path" />로 지정된 파일을 찾을 수 없습니다.</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="path" />가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />가 읽기 전용 파일을 지정합니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />는 디렉터리입니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Replace">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 파일의 내용을 다른 파일의 내용으로 대체합니다. 이때 원래 파일은 삭제되고 대체된 파일의 백업이 만들어집니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.File.Replace%2A> 메서드 다른 파일의 내용이 지정된 된 파일의 내용을 바꿉니다.  대체 된 파일의 백업을 만들 수도 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static void Replace (string sourceFileName, string destinationFileName, string destinationBackupFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Replace(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Replace (sourceFileName As String, destinationFileName As String, destinationBackupFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Replace(System::String ^ sourceFileName, System::String ^ destinationFileName, System::String ^ destinationBackupFileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="destinationBackupFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">
          <c>destinationFileName</c>에서 지정한 파일을 대체할 파일의 이름입니다.</param>
        <param name="destinationFileName">대체할 파일의 이름입니다.</param>
        <param name="destinationBackupFileName">백업 파일의 이름입니다.</param>
        <summary>지정된 파일의 내용을 다른 파일의 내용으로 대체합니다. 이때 원래 파일은 삭제되고 대체된 파일의 백업이 만들어집니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.File.Replace%2A> 메서드는 지정된 된 파일의 내용을 다른 파일의 내용으로 대체 합니다.  또한 대체 된 파일의 백업을 만듭니다.  
  
 경우는 `sourceFileName` 및 `destinationFileName` 는 서로 다른 볼륨에이 메서드는 예외를 발생 시킵니다. 경우는 `destinationBackupFileName` 는 원본 파일에서 다른 볼륨에 백업 파일이 삭제 됩니다.  
  
 전달 `null` 에 `destinationBackupFileName` 교체 중인 파일의 백업을 만드는 하지 않을 경우 매개 변수입니다.  

 경우는 `destinationBackupFileName` 이미의 콘텐츠로 덮어씁니다는 `destinationFileName` 파일입니다.
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.IO.File.Replace%2A> 메서드 다른 파일과 파일을 대체 하 고 대체 된 파일의 백업을 만듭니다.  
  
 [!code-cpp[IO.File.Replace#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.Replace/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.Replace/CS/sample.cs#1)]
 [!code-vb[IO.File.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.Replace/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> 매개 변수에 의해 설명된 경로의 형식이 잘못되었습니다.  -또는-  <paramref name="destinationBackupFileName" /> 매개 변수에 의해 설명된 경로가 올바른 형식이 아닙니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.DriveNotFoundException">잘못된 드라이브를 지정했습니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">현재 <see cref="T:System.IO.FileInfo" /> 개체에 설명된 파일을 찾을 수 없습니다.  -또는-  <paramref name="destinationBackupFileName" /> 매개 변수에 의해 설명된 파일을 찾을 수 없습니다.</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.  \- 또는- <paramref name="sourceFileName" /> 및 <paramref name="destinationFileName" /> 매개 변수가 동일한 파일을 지정합니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.PlatformNotSupportedException">운영 체제가 Windows 98 Second Edition 또는 이전 버전이고 파일 시스템이 NTFS가 아닙니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="sourceFileName" /> 또는 <paramref name="destinationFileName" /> 매개 변수가 읽기 전용인 파일을 지정하는 경우  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  원본 또는 대상 매개 변수가 파일 대신 디렉터리를 지정합니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">쓰는 데 필요한 권한에서 설명 파일에는 <paramref name="destinationBackupFileName" /> 매개 변수 하나를 지정 하는 경우. 보안 동작: 요청 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static void Replace (string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.Replace(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Replace (sourceFileName As String, destinationFileName As String, destinationBackupFileName As String, ignoreMetadataErrors As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Replace(System::String ^ sourceFileName, System::String ^ destinationFileName, System::String ^ destinationBackupFileName, bool ignoreMetadataErrors);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="destinationBackupFileName" Type="System.String" />
        <Parameter Name="ignoreMetadataErrors" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">
          <c>destinationFileName</c>에서 지정한 파일을 대체할 파일의 이름입니다.</param>
        <param name="destinationFileName">대체할 파일의 이름입니다.</param>
        <param name="destinationBackupFileName">백업 파일의 이름입니다.</param>
        <param name="ignoreMetadataErrors">파일을 대체할 때 대체할 파일의 특성 및 ACL(액세스 제어 목록) 같은 병합 오류를 무시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>지정된 파일의 내용을 다른 파일의 내용으로 대체합니다. 이때 원래 파일은 삭제되고 대체된 파일의 백업이 만들어지며 선택적으로 병합 오류가 무시됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.File.Replace%2A> 메서드는 지정된 된 파일의 내용을 다른 파일의 내용으로 대체 합니다.  또한 대체 된 파일의 백업을 만듭니다.  
  
 경우는 `sourceFileName` 및 `destinationFileName` 는 서로 다른 볼륨에이 메서드는 예외를 발생 시킵니다. 경우는 `destinationBackupFileName` 는 원본 파일에서 다른 볼륨에 백업 파일이 삭제 됩니다.  
  
 전달 `null` 에 `destinationBackupFileName` 교체 중인 파일의 백업을 만드는 하지 않을 경우 매개 변수입니다.  

 경우는 `destinationBackupFileName` 이미의 콘텐츠로 덮어씁니다는 `destinationFileName` 파일입니다.
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.IO.File.Replace%2A> 메서드 다른 파일과 파일을 대체 하 고 대체 된 파일의 백업을 만듭니다.  
  
 [!code-cpp[IO.File.Replace#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.Replace/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.Replace/CS/sample.cs#1)]
 [!code-vb[IO.File.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.Replace/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName" /> 매개 변수에 의해 설명된 경로의 형식이 잘못되었습니다.  -또는-  <paramref name="destinationBackupFileName" /> 매개 변수에 의해 설명된 경로가 올바른 형식이 아닙니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.DriveNotFoundException">잘못된 드라이브를 지정했습니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">현재 <see cref="T:System.IO.FileInfo" /> 개체에 설명된 파일을 찾을 수 없습니다.  -또는-  <paramref name="destinationBackupFileName" /> 매개 변수에 의해 설명된 파일을 찾을 수 없습니다.</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.  \- 또는- <paramref name="sourceFileName" /> 및 <paramref name="destinationFileName" /> 매개 변수가 동일한 파일을 지정합니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.PlatformNotSupportedException">운영 체제가 Windows 98 Second Edition 또는 이전 버전이고 파일 시스템이 NTFS가 아닙니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="sourceFileName" /> 또는 <paramref name="destinationFileName" /> 매개 변수가 읽기 전용인 파일을 지정하는 경우  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  원본 또는 대상 매개 변수가 파일 대신 디렉터리를 지정합니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">쓰는 데 필요한 권한에서 설명 파일에는 <paramref name="destinationBackupFileName" /> 매개 변수 하나를 지정 하는 경우. 보안 동작: 요청 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public static void SetAccessControl (string path, System.Security.AccessControl.FileSecurity fileSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAccessControl(string path, class System.Security.AccessControl.FileSecurity fileSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAccessControl(System::String ^ path, System::Security::AccessControl::FileSecurity ^ fileSecurity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="fileSecurity" Type="System.Security.AccessControl.FileSecurity" />
      </Parameters>
      <Docs>
        <param name="path">ACL(액세스 제어 목록) 항목을 추가하거나 제거할 파일입니다.</param>
        <param name="fileSecurity">
          <c>경로</c> 매개 변수에 설명된 파일에 적용할 ACL 항목을 설명하는 <see cref="T:System.Security.AccessControl.FileSecurity" /> 개체입니다.</param>
        <summary>
          <see cref="T:System.Security.AccessControl.FileSecurity" /> 개체에 설명된 ACL(액세스 제어 목록) 항목을 지정된 파일에 적용합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.File.SetAccessControl%2A> 메서드는 상속 되지 않은 ACL 목록을 표시 하는 파일에 액세스 제어 목록 (ACL) 항목을 적용 됩니다.  
  
> [!CAUTION]
>  에 대해 지정 된 ACL은 `fileSecurity` 매개 변수는 파일에 대 한 기존 ACL을 대체 합니다. 새 사용자에 대 한 권한을 추가 하려면 사용는 <xref:System.IO.File.GetAccessControl%2A> 메서드를 추가 하려면 수정 하 고 다음 사용 하 여 <xref:System.IO.File.SetAccessControl%2A> 파일에 다시 적용 합니다.  
  
 개인 및/또는 나 갖지 않고에 지정된 된 파일에서 특정 작업을 수행할 권한을 그룹이 ACL에 설명 합니다. 자세한 내용은 [방법: Access Control 목록 항목 추가 또는 제거](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)를 참조하세요.  
  
 <xref:System.IO.File.SetAccessControl%2A> 메서드만 계속 되 면 <xref:System.Security.AccessControl.FileSecurity> 개체를 만든 후 수정 된 개체입니다.  경우는 <xref:System.Security.AccessControl.FileSecurity> 개체가 수정 되지 않은, 파일에 유지 되지 것입니다.  검색할 수 없으면 따라서는 <xref:System.Security.AccessControl.FileSecurity> 한 파일에서 개체를 다른 파일에 동일한 개체를 다시 적용 합니다.  
  
 다른 파일에서 ACL 정보를 복사 합니다.  
  
1.  사용 하 여는 <xref:System.IO.File.GetAccessControl%2A> 를 검색할 메서드는 <xref:System.Security.AccessControl.FileSecurity> 소스 파일에서 개체입니다.  
  
2.  새 <xref:System.Security.AccessControl.FileSecurity> 대상 파일에 대 한 개체입니다.  
  
3.  사용 하 여는 <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A> 또는 <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> 원본의 메서드 <xref:System.Security.AccessControl.FileSecurity> ACL 정보를 검색 하는 개체입니다.  
  
4.  사용 하 여는 <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A> 또는 <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> 대상에 3 단계에서 검색 메서드 정보를 복사 하려면 <xref:System.Security.AccessControl.FileSecurity> 개체입니다.  
  
5.  대상을 설정 <xref:System.Security.AccessControl.FileSecurity> 개체를 사용 하 여 대상 파일의 <xref:System.IO.File.SetAccessControl%2A> 메서드.  
  
 NTFS 환경에서 <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> 및 <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes> 사용자에 게 하는 경우 사용자에 게 권한이 부여 됩니다 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 부모 폴더에 대 한 합니다. 거부 하려면 <xref:System.Security.AccessControl.FileSystemRights.ReadAttributes> 및 <xref:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes>, 거부 <xref:System.Security.AccessControl.FileSystemRights.ListDirectory> 부모 디렉터리에 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.IO.File.GetAccessControl%2A> 및 <xref:System.IO.File.SetAccessControl%2A> 목록 (ACL) 항목을 파일을 제어 하는 메서드를 추가 하 고 액세스를 제거 하십시오.  이 예제를 실행하려면 유효한 사용자 또는 그룹 계정을 제공해야 합니다.  
  
 [!code-cpp[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.File.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.Runtime.InteropServices.SEHException">
          <paramref name="path" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.SystemException">파일을 찾을 수 없습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" /> 매개 변수가 읽기 전용 파일을 지정합니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" /> 매개 변수가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileSecurity" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일에 액세스할 수 있는 권한입니다. 보안 동작: 요청 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" />, <see cref="F:System.Security.AccessControl.AccessControlActions.Change" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetAttributes">
      <MemberSignature Language="C#" Value="public static void SetAttributes (string path, System.IO.FileAttributes fileAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAttributes(string path, valuetype System.IO.FileAttributes fileAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttributes(System::String ^ path, System::IO::FileAttributes fileAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="fileAttributes" Type="System.IO.FileAttributes" />
      </Parameters>
      <Docs>
        <param name="path">파일의 경로입니다.</param>
        <param name="fileAttributes">열거형 값의 비트 조합입니다.</param>
        <summary>지정된 경로에 있는 파일의 지정된 <see cref="T:System.IO.FileAttributes" />를 가져옵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 와 같은 특정 파일 특성 <xref:System.IO.FileAttributes.Hidden> 및 <xref:System.IO.FileAttributes.ReadOnly>를 결합할 수 있습니다. 와 같은 다른 특성 <xref:System.IO.FileAttributes.Normal>를 단독으로 사용 해야 합니다.  
  
 압축 상태를 변경 불가능 한 <xref:System.IO.File> 를 사용 하 여 개체는 <xref:System.IO.File.SetAttributes%2A> 메서드.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예제는 `GetAttributes` 및 `SetAttributes` 적용 하 여 메서드는 `Archive` 및 `Hidden` 특성을 파일입니다.  
  
 [!code-cpp[File GetAttributes#1](~/samples/snippets/cpp/VS_Snippets_CLR/File GetAttributes/CPP/file getattributes.cpp#1)]
 [!code-csharp[File GetAttributes#1](~/samples/snippets/csharp/VS_Snippets_CLR/File GetAttributes/CS/file getattributes.cs#1)]
 [!code-vb[File GetAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File GetAttributes/VB/file getattributes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 비어 있거나, 공백만 포함하거나, 잘못된 문자를 포함하거나 또는 파일 특성이 잘못된 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.FileNotFoundException">파일을 찾을 수 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />에 읽기 전용인 파일이 지정되었습니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">에 파일 읽기 및 쓰기입니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetCreationTime">
      <MemberSignature Language="C#" Value="public static void SetCreationTime (string path, DateTime creationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCreationTime(string path, valuetype System.DateTime creationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.SetCreationTime(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCreationTime (path As String, creationTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCreationTime(System::String ^ path, DateTime creationTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="creationTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">만든 날짜와 시간 정보를 설정할 파일입니다.</param>
        <param name="creationTime">
          <c>경로</c>의 생성 날짜와 시간을 설정할 값이 포함된 <see cref="T:System.DateTime" />입니다. 이 값은 현지 시간으로 표현됩니다.</param>
        <summary>파일이 만들어진 날짜와 시간을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 NTFS로 포맷 된 드라이브에 파일 메타 정보, 같은 파일을 만든 시간, 짧은 시간 동안 캐시할 수 있습니다. 결과적으로, 덮어쓰기 또는 기존 파일을 대체 하는 경우 파일의 생성 시간을 명시적으로 설정 해야 할 수도 있습니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">지정된 경로를 찾을 수 없습니다.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.IOException">작업을 수행하는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="creationTime" />에서 해당 작업에 허용된 날짜나 시간 또는 둘 모두의 범위를 벋어나는 값을 지정한 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에 작성 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetCreationTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetCreationTimeUtc (string path, DateTime creationTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCreationTimeUtc(string path, valuetype System.DateTime creationTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.SetCreationTimeUtc(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCreationTimeUtc (path As String, creationTimeUtc As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCreationTimeUtc(System::String ^ path, DateTime creationTimeUtc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="creationTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">만든 날짜와 시간 정보를 설정할 파일입니다.</param>
        <param name="creationTimeUtc">
          <c>경로</c>의 생성 날짜와 시간을 설정할 값이 포함된 <see cref="T:System.DateTime" />입니다. 이 값은 UTC 시간으로 표현됩니다.</param>
        <summary>파일을 만든 날짜와 시간을 UTC 기준으로 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 NTFS로 포맷 된 드라이브에 파일 메타 정보, 같은 파일을 만든 시간, 짧은 시간 동안 캐시할 수 있습니다. 결과적으로, 덮어쓰기 또는 기존 파일을 대체 하는 경우 파일의 생성 시간을 명시적으로 설정 해야 할 수도 있습니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">지정된 경로를 찾을 수 없습니다.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.IOException">작업을 수행하는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="creationTime" />에서 해당 작업에 허용된 날짜나 시간 또는 둘 모두의 범위를 벋어나는 값을 지정한 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에 작성 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetLastAccessTime">
      <MemberSignature Language="C#" Value="public static void SetLastAccessTime (string path, DateTime lastAccessTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastAccessTime(string path, valuetype System.DateTime lastAccessTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.SetLastAccessTime(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLastAccessTime (path As String, lastAccessTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLastAccessTime(System::String ^ path, DateTime lastAccessTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastAccessTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">액세스 날짜와 시간 정보를 설정할 파일입니다.</param>
        <param name="lastAccessTime">
          <c>경로</c>에 마지막으로 액세스한 날짜와 시간을 설정할 값이 포함된 <see cref="T:System.DateTime" />입니다. 이 값은 현지 시간으로 표현됩니다.</param>
        <summary>지정된 파일을 마지막으로 액세스한 날짜와 시간을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 만들어 필요한 경우 지정된 된 파일에 대 한 파일 시스템을 확인 하 고, 다음 설정 하 고, 마지막 액세스 시간을 가져옵니다.  
  
 [!code-cpp[file setlastaccess#1](~/samples/snippets/cpp/VS_Snippets_CLR/File SetLastAccess/CPP/file setlastaccess.cpp#1)]
 [!code-csharp[file setlastaccess#1](~/samples/snippets/csharp/VS_Snippets_CLR/File SetLastAccess/CS/file setlastaccess.cs#1)]
 [!code-vb[file setlastaccess#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File SetLastAccess/VB/file setlastaccess.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">지정된 경로를 찾을 수 없습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="lastAccessTime" />에서 해당 작업에 허용된 날짜나 시간 범위를 벗어나는 값을 지정한 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에 작성 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetLastAccessTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetLastAccessTimeUtc (string path, DateTime lastAccessTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastAccessTimeUtc(string path, valuetype System.DateTime lastAccessTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.SetLastAccessTimeUtc(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLastAccessTimeUtc (path As String, lastAccessTimeUtc As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLastAccessTimeUtc(System::String ^ path, DateTime lastAccessTimeUtc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastAccessTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">액세스 날짜와 시간 정보를 설정할 파일입니다.</param>
        <param name="lastAccessTimeUtc">
          <c>경로</c>에 마지막으로 액세스한 날짜와 시간을 설정할 값이 포함된 <see cref="T:System.DateTime" />입니다. 이 값은 UTC 시간으로 표현됩니다.</param>
        <summary>지정된 파일을 마지막으로 액세스한 날짜와 시간을 UTC 기준으로 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">지정된 경로를 찾을 수 없습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="lastAccessTimeUtc" />에서 해당 작업에 허용된 날짜나 시간 범위를 벗어나는 값을 지정한 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에 작성 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetLastWriteTime">
      <MemberSignature Language="C#" Value="public static void SetLastWriteTime (string path, DateTime lastWriteTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastWriteTime(string path, valuetype System.DateTime lastWriteTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.SetLastWriteTime(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLastWriteTime (path As String, lastWriteTime As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLastWriteTime(System::String ^ path, DateTime lastWriteTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastWriteTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">날짜와 시간 정보를 설정할 파일입니다.</param>
        <param name="lastWriteTime">
          <c>경로</c>에 마지막으로 쓴 날짜와 시간을 설정할 값이 포함된 <see cref="T:System.DateTime" />입니다. 이 값은 현지 시간으로 표현됩니다.</param>
        <summary>지정된 파일에 마지막으로 쓴 날짜와 시간을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 필요한 경우 파일을 만들어 지정된 된 파일에 대 한 파일 시스템을 확인 하 고, 다음 설정 하 고, 파일의 마지막으로 쓴 시간을 가져옵니다.  
  
 [!code-cpp[file setlastwrite#1](~/samples/snippets/cpp/VS_Snippets_CLR/File SetLastWrite/CPP/file setlastwrite.cpp#1)]
 [!code-csharp[file setlastwrite#1](~/samples/snippets/csharp/VS_Snippets_CLR/File SetLastWrite/CS/file setlastwrite.cs#1)]
 [!code-vb[file setlastwrite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/File SetLastWrite/VB/file setlastwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">지정된 경로를 찾을 수 없습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="lastWriteTime" />에서 해당 작업에 허용된 날짜나 시간 범위를 벗어나는 값을 지정한 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에 작성 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="SetLastWriteTimeUtc">
      <MemberSignature Language="C#" Value="public static void SetLastWriteTimeUtc (string path, DateTime lastWriteTimeUtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLastWriteTimeUtc(string path, valuetype System.DateTime lastWriteTimeUtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLastWriteTimeUtc (path As String, lastWriteTimeUtc As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetLastWriteTimeUtc(System::String ^ path, DateTime lastWriteTimeUtc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="lastWriteTimeUtc" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="path">날짜와 시간 정보를 설정할 파일입니다.</param>
        <param name="lastWriteTimeUtc">
          <c>경로</c>에 마지막으로 쓴 날짜와 시간을 설정할 값이 포함된 <see cref="T:System.DateTime" />입니다. 이 값은 UTC 시간으로 표현됩니다.</param>
        <summary>지정된 파일에 마지막으로 쓴 날짜와 시간을 UTC 기준으로 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path` 상대 또는 절대 경로 정보를 지정 하기 위해 매개 변수는 허용 합니다. 상대 경로 정보는 현재 작업 디렉터리에 상대적으로 해석 됩니다. 현재 작업 디렉터리를 가져오려면 참조 <xref:System.IO.Directory.GetCurrentDirectory%2A>합니다.  
  
 공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">지정된 경로를 찾을 수 없습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="lastWriteTimeUtc" />에서 해당 작업에 허용된 날짜나 시간 범위를 벗어나는 값을 지정한 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">지정된 된 파일에 작성 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="WriteAllBytes">
      <MemberSignature Language="C#" Value="public static void WriteAllBytes (string path, byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllBytes(string path, unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllBytes(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteAllBytes (path As String, bytes As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteAllBytes(System::String ^ path, cli::array &lt;System::Byte&gt; ^ bytes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="path">쓸 파일입니다.</param>
        <param name="bytes">파일에 쓸 바이트입니다.</param>
        <summary>새 파일을 만들고 지정된 바이트 배열을 파일에 쓴 다음 파일을 닫습니다. 대상 파일이 이미 있으면 덮어씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 바이트 배열 및 파일 경로 지정이 지정된 된 파일 열고, 파일에 바이트 배열의 내용을 씁니다 메서드와 다음 파일을 닫습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />이거나 바이트 배열이 비어 있는 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />에 읽기 전용인 파일이 지정되었습니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 또는 디렉터리에 기록에 액세스 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WriteAllBytesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WriteAllBytesAsync (string path, byte[] bytes, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WriteAllBytesAsync(string path, unsigned int8[] bytes, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="bytes">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAllLines">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>새 파일을 만들고 하나 이상의 문자열을 파일에 쓴 다음 파일을 닫습니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAllLines">
      <MemberSignature Language="C#" Value="public static void WriteAllLines (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllLines(string path, class System.Collections.Generic.IEnumerable`1&lt;string&gt; contents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteAllLines (path As String, contents As IEnumerable(Of String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteAllLines(System::String ^ path, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ contents);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="path">쓸 파일입니다.</param>
        <param name="contents">파일에 쓸 줄입니다.</param>
        <summary>새 파일을 만들고 문자열의 컬렉션을 파일에 쓴 다음 파일을 닫습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로는 <xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> 방법은 u t F-8 바이트 순서 표시가 (BOM) 인코딩을 사용 하 여 데이터를 작성 하는 것입니다. 같은 파일의 시작 부분에서 바이트 순서 표시를 u t F-8 식별자를 포함 하는 데 필요한 경우 사용 하 여는 <xref:System.IO.File.WriteAllLines%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.Text.Encoding%29> 메서드 오버 로드와 <xref:System.Text.Encoding.UTF8%2A> 인코딩입니다.  
  
 대상 파일이 이미 있으면 덮어씁니다.  
  
 이 메서드를 사용 하 여 사용 되는 컬렉션 클래스에 대 한 콘텐츠를 만들 수는 <xref:System.Collections.Generic.IEnumerable%601> 의 생성자에 같은 <xref:System.Collections.Generic.List%601.%23ctor%2A>, <xref:System.Collections.Generic.HashSet%601.%23ctor%2A>, 또는 <xref:System.Collections.Generic.SortedSet%601.%23ctor%2A> 클래스입니다.  
  
   
  
## Examples  
 다음 예제에서는 파일에 샘플 데이터 파일에서 선택한 줄을 씁니다.  
  
 [!code-csharp[System.IO.File.WriteAllAppendAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.file.writeallappendall/cs/program.cs#1)]
 [!code-vb[System.IO.File.WriteAllAppendAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.file.writeallappendall/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 메서드로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 또는 <paramref name="contents" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" />가 잘못된 경우(예: 매핑되지 않은 드라이브의 경로를 지정한 경우)</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="path" />가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />가 읽기 전용 파일을 지정합니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />는 디렉터리입니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAllLines">
      <MemberSignature Language="C#" Value="public static void WriteAllLines (string path, string[] contents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllLines(string path, string[] contents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllLines(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteAllLines (path As String, contents As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteAllLines(System::String ^ path, cli::array &lt;System::String ^&gt; ^ contents);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="path">쓸 파일입니다.</param>
        <param name="contents">파일에 쓸 문자열 배열입니다.</param>
        <summary>새 파일을 만들고 지정된 문자열 배열을 파일에 쓴 다음 파일을 닫습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대상 파일이 이미 있으면 덮어씁니다.  
  
 기본적으로는 <xref:System.IO.File.WriteAllLines%2A> 방법은 데이터를 u t F-8 바이트 순서 표시가 (BOM) 인코딩을 사용 하 여 작성 하는 것입니다. 같은 파일의 시작 부분에서 바이트 순서 표시를 u t F-8 식별자를 포함 하는 데 필요한 경우 사용 하 여는 <xref:System.IO.File.WriteAllLines%28System.String%2CSystem.String%5B%5D%2CSystem.Text.Encoding%29> 메서드 오버 로드와 <xref:System.Text.Encoding.UTF8%2A> 인코딩입니다.  
  
 문자열 배열을 파일 경로 매개 변수로 받아이 메서드 지정된 된 파일 열고, 문자열 배열을 파일에 쓴 다음 파일을 닫습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.IO.File.WriteAllLines%2A> 메서드는 파일에 텍스트를 쓸 수 있습니다. 이 예제에서는 존재 하지 않는 및 텍스트에 추가 된 경우 파일 생성 됩니다.  
  
 [!code-csharp[System.IO.File.AllLines#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllLines/cs/AllText.cs#00)]
 [!code-vb[System.IO.File.AllLines#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllLines/vb/AllText.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 또는 <paramref name="contents" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />에 읽기 전용인 파일이 지정되었습니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 또는 디렉터리에 기록에 액세스 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WriteAllLines">
      <MemberSignature Language="C#" Value="public static void WriteAllLines (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllLines(string path, class System.Collections.Generic.IEnumerable`1&lt;string&gt; contents, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteAllLines(System::String ^ path, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ contents, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">쓸 파일입니다.</param>
        <param name="contents">파일에 쓸 줄입니다.</param>
        <param name="encoding">사용할 문자 인코딩입니다.</param>
        <summary>지정된 인코딩을 사용하여 새 파일을 만들고 문자열의 컬렉션을 파일에 쓴 다음 파일을 닫습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대상 파일이 이미 있으면 덮어씁니다.  
  
 다음을 포함 하는 파일을 만들려면이 메서드를 사용할 수 있습니다.  
  
-   결과 [LINQ to Objects](http://msdn.microsoft.com/library/73cafe73-37cf-46e7-bfa7-97c7eea7ced9) 는 파일의 줄에서 쿼리를 사용 하 여 얻어지는 <xref:System.IO.File.ReadLines%2A> 메서드.  
  
-   구현 하는 컬렉션의 내용을 <xref:System.Collections.Generic.IEnumerable%601> 문자열입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 메서드로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />, <paramref name="contents" /> 또는 <paramref name="encoding" />이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" />가 잘못된 경우(예: 매핑되지 않은 드라이브의 경로를 지정한 경우)</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="path" />가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />가 읽기 전용 파일을 지정합니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />는 디렉터리입니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAllLines">
      <MemberSignature Language="C#" Value="public static void WriteAllLines (string path, string[] contents, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllLines(string path, string[] contents, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteAllLines(System::String ^ path, cli::array &lt;System::String ^&gt; ^ contents, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String[]" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">쓸 파일입니다.</param>
        <param name="contents">파일에 쓸 문자열 배열입니다.</param>
        <param name="encoding">문자열 배열에 적용되는 문자 인코딩을 나타내는 <see cref="T:System.Text.Encoding" /> 개체입니다.</param>
        <summary>새 파일을 만들고 지정된 인코딩을 사용하여 지정된 문자열 배열을 파일에 쓴 다음 파일을 닫습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대상 파일이 이미 있으면 덮어씁니다.  
  
 문자열 배열을 파일 경로 매개 변수로 받아이 지정된 된 파일 열고, 문자열 배열을 지정 된 인코딩을 사용 하 여 파일에 쓴 메서드와 다음 파일을 닫습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.IO.File.WriteAllLines%2A> 메서드는 파일에 텍스트를 쓸 수 있습니다. 이 예제에서는 존재 하지 않는 및 텍스트에 추가 된 경우 파일 생성 됩니다.  
  
 [!code-csharp[System.IO.File.AllLines_Encoding#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllLines_Encoding/cs/AllText_Encoding.cs#00)]
 [!code-vb[System.IO.File.AllLines_Encoding#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllLines_Encoding/vb/AllText_Encoding.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 또는 <paramref name="contents" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />에 읽기 전용인 파일이 지정되었습니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 또는 디렉터리에 기록에 액세스 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WriteAllLinesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WriteAllLinesAsync (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WriteAllLinesAsync(string path, class System.Collections.Generic.IEnumerable`1&lt;string&gt; contents, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAllLinesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WriteAllLinesAsync (string path, System.Collections.Generic.IEnumerable&lt;string&gt; contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WriteAllLinesAsync(string path, class System.Collections.Generic.IEnumerable`1&lt;string&gt; contents, class System.Text.Encoding encoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAllText">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>새 파일을 만들고 파일에 내용을 쓴 다음 파일을 닫습니다. 대상 파일이 이미 있으면 덮어씁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public static void WriteAllText (string path, string contents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllText(string path, string contents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllText(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteAllText (path As String, contents As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteAllText(System::String ^ path, System::String ^ contents);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">쓸 파일입니다.</param>
        <param name="contents">파일에 쓸 문자열입니다.</param>
        <summary>새 파일을 만들고 지정된 문자열을 파일에 쓴 다음 파일을 닫습니다. 대상 파일이 이미 있으면 덮어씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 바이트 순서 표시 (BOM) 없이 인코딩를 사용 하 여 u t F-8을 사용 하 여이 메서드는 <xref:System.Text.Encoding.GetPreamble%2A> 메서드는 빈 바이트 배열을 반환 합니다. 같은 파일의 시작 부분에서 바이트 순서 표시를 u t F-8 식별자를 포함 하는 데 필요한 경우 사용 하 여는 <xref:System.IO.File.WriteAllText%28System.String%2CSystem.String%2CSystem.Text.Encoding%29> 메서드 오버 로드와 <xref:System.Text.Encoding.UTF8%2A> 인코딩입니다.  
  
 문자열로 파일 경로 매개 변수로 받아이 지정된 된 파일 열고, 문자열을 파일에 쓴 메서드와 다음 파일을 닫습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.IO.File.WriteAllText%2A> 메서드는 파일에 텍스트를 쓸 수 있습니다. 이 예제에서는 존재 하지 않는 및 텍스트에 추가 된 경우 파일 생성 됩니다.  
  
 [!code-csharp[System.IO.File.AllText#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllText/cs/AllText.cs#00)]
 [!code-vb[System.IO.File.AllText#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllText/vb/AllText.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />이거나 <paramref name="contents" />가 비어 있는 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />에 읽기 전용인 파일이 지정되었습니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 또는 디렉터리에 기록에 액세스 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public static void WriteAllText (string path, string contents, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteAllText(string path, string contents, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteAllText(System::String ^ path, System::String ^ contents, System::Text::Encoding ^ encoding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">쓸 파일입니다.</param>
        <param name="contents">파일에 쓸 문자열입니다.</param>
        <param name="encoding">문자열에 적용할 인코딩입니다.</param>
        <summary>새 파일을 만들고 지정된 인코딩을 사용하여 지정된 문자열을 파일에 쓴 다음 파일을 닫습니다. 대상 파일이 이미 있으면 덮어씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 문자열로 파일 경로 매개 변수로 받아이 지정된 된 파일 열고, 문자열을 지정 된 인코딩을 사용 하 여 파일에 쓴 메서드와 다음 파일을 닫습니다. 파일 핸들은 예외가 발생 하는 경우에이 메서드에 의해 닫혀야 보장 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.IO.File.WriteAllText%2A> 메서드는 파일에 텍스트를 쓸 수 있습니다. 이 예제에서는 존재 하지 않는 및 텍스트에 추가 된 경우 파일 생성 됩니다.  
  
 [!code-csharp[System.IO.File.AllText_Encoding#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.File.AllText_Encoding/cs/AllText.cs#00)]
 [!code-vb[System.IO.File.AllText_Encoding#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.File.AllText_Encoding/vb/AllText.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" />가 <see langword="null" />이거나 <paramref name="contents" />가 비어 있는 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다. 예를 들어 Windows 기반 플랫폼에서 경로는 248자 미만이어야 하고 파일 이름은 260자 미만이어야 합니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
        <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="path" />에 읽기 전용인 파일이 지정되었습니다.  -또는-  현재 플랫폼이 해당 작업을 지원하지 않습니다.  -또는-  <paramref name="path" />가 디렉터리를 지정했습니다.  -또는-  호출자에게 필요한 권한이 없습니다.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" />의 형식이 잘못되었습니다.</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 또는 디렉터리에 기록에 액세스 합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WriteAllTextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WriteAllTextAsync (string path, string contents, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllTextAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAllTextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WriteAllTextAsync (string path, string contents, System.Text.Encoding encoding, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WriteAllTextAsync(string path, string contents, class System.Text.Encoding encoding, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.File.WriteAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="contents" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="contents">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>