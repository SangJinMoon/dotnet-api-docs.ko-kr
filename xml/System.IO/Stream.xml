<Type Name="Stream" FullName="System.IO.Stream">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c2a48ad6254044761826100b2be9db53d138b868" />
    <Meta Name="ms.sourcegitcommit" Value="f9e3295b6cc303a611a73a84c4b27f9da792ad0d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/26/2018" />
    <Meta Name="ms.locfileid" Value="31911274" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Stream : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Stream extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Stream" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Stream&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stream abstract : MarshalByRefObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="b0483-101">바이트 시퀀스에 대한 일반 뷰를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b0483-101">Provides a generic view of a sequence of bytes.</span>
      </span>
      <span data-ttu-id="b0483-102">이 클래스는 추상 클래스입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b0483-102">This is an abstract class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-103"><xref:System.IO.Stream> 모든 스트림의 추상 기본 클래스가입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-103"><xref:System.IO.Stream> is the abstract base class of all streams.</span></span> <span data-ttu-id="b0483-104">스트림은 파일, 입력/출력 장치, 프로세스 간 통신 파이프 또는 TCP/IP 소켓과 같은 바이트 시퀀스를 추상적으로 나타낸 것입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-104">A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket.</span></span> <span data-ttu-id="b0483-105"><xref:System.IO.Stream> 클래스와 해당 파생된 클래스 이러한 여러 형식의 입력 및 출력에 대 한 일반 뷰를 제공 하 고 프로그래머는 운영 체제 및 기본 장치의 세부 정보에서 격리 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-105">The <xref:System.IO.Stream> class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.</span></span>  
  
 <span data-ttu-id="b0483-106">스트림에는 다음의 세 가지 기본 작업이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-106">Streams involve three fundamental operations:</span></span>  
  
-   <span data-ttu-id="b0483-107">스트림에서 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-107">You can read from streams.</span></span> <span data-ttu-id="b0483-108">읽기는 스트림에서 데이터를 바이트 배열과 같은 데이터 구조로 전송입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-108">Reading is the transfer of data from a stream into a data structure, such as an array of bytes.</span></span>  
  
-   <span data-ttu-id="b0483-109">스트림에 쓸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-109">You can write to streams.</span></span> <span data-ttu-id="b0483-110">쓰기는 스트림으로 데이터 구조에서 데이터 전송을입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-110">Writing is the transfer of data from a data structure into a stream.</span></span>  
  
-   <span data-ttu-id="b0483-111">스트림이 검색을 지원할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-111">Streams can support seeking.</span></span> <span data-ttu-id="b0483-112">검색 쿼리 및 수정 된 스트림 내의 현재 위치를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-112">Seeking refers to querying and modifying the current position within a stream.</span></span> <span data-ttu-id="b0483-113">검색 기능을 스트림에서 백업 저장소의 종류에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-113">Seek capability depends on the kind of backing store a stream has.</span></span> <span data-ttu-id="b0483-114">예를 들어 네트워크 스트림을 현재 위치를 나타내는 통합 개념이 없으므로 고 따라서 일반적으로 지원 하지 않는 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-114">For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.</span></span>  
  
 <span data-ttu-id="b0483-115">일반적으로 사용 되는 일부 수록에서 상속 하는 스트림의 <xref:System.IO.Stream> 는 <xref:System.IO.FileStream>, 및 <xref:System.IO.MemoryStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-115">Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>.</span></span>  
  
 <span data-ttu-id="b0483-116">내부 데이터 소스 또는 리포지토리에 따라 스트림에서 이러한 기능 중 일부만 지원할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-116">Depending on the underlying data source or repository, streams might support only some of these capabilities.</span></span> <span data-ttu-id="b0483-117">해당 기능에 대 한 스트림을 사용 하 여 쿼리할 수 있습니다는 <xref:System.IO.Stream.CanRead%2A>, <xref:System.IO.Stream.CanWrite%2A>, 및 <xref:System.IO.Stream.CanSeek%2A> 의 속성은 <xref:System.IO.Stream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-117">You can query a stream for its capabilities by using the <xref:System.IO.Stream.CanRead%2A>, <xref:System.IO.Stream.CanWrite%2A>, and <xref:System.IO.Stream.CanSeek%2A> properties of the <xref:System.IO.Stream> class.</span></span>  
  
 <span data-ttu-id="b0483-118"><xref:System.IO.Stream.Read%2A> 및 <xref:System.IO.Stream.Write%2A> 메서드 데이터 읽기 및 쓰기 다양 한 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-118">The <xref:System.IO.Stream.Read%2A> and <xref:System.IO.Stream.Write%2A> methods read and write data in a variety of formats.</span></span> <span data-ttu-id="b0483-119">검색을 지 원하는 스트리밍을 사용 하 여는 <xref:System.IO.Stream.Seek%2A> 및 <xref:System.IO.Stream.SetLength%2A> 메서드 및 <xref:System.IO.Stream.Position%2A> 및 <xref:System.IO.Stream.Length%2A> 속성을 쿼리 및 현재 위치와 스트림의 길이 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-119">For streams that support seeking, use the <xref:System.IO.Stream.Seek%2A> and <xref:System.IO.Stream.SetLength%2A> methods and the <xref:System.IO.Stream.Position%2A> and <xref:System.IO.Stream.Length%2A> properties to query and modify the current position and length of a stream.</span></span>  
  
 <span data-ttu-id="b0483-120">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-120">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="b0483-121">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-121">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="b0483-122">직접 형식의 dispose를 호출 해당 <xref:System.IDisposable.Dispose%2A> 에서 메서드는 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-122">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="b0483-123">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-123">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="b0483-124">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-124">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="b0483-125">삭제 한 <xref:System.IO.Stream> 개체 버퍼링 된 모든 데이터를 플러시하고 호출 하는 <xref:System.IO.Stream.Flush%2A> 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-125">Disposing a <xref:System.IO.Stream> object flushes any buffered data, and essentially calls the <xref:System.IO.Stream.Flush%2A> method for you.</span></span> <span data-ttu-id="b0483-126"><xref:System.IO.Stream.Dispose%2A> 또한 파일 핸들, 네트워크 연결 또는 내부 버퍼링에 사용 되는 메모리와 같은 운영 체제 리소스를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-126"><xref:System.IO.Stream.Dispose%2A> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering.</span></span> <span data-ttu-id="b0483-127"><xref:System.IO.BufferedStream> 클래스의 버퍼링 된 스트림에 향상 읽기 및 쓰기 성능을 위해 다른 스트림에 래핑하는 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-127">The <xref:System.IO.BufferedStream> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.</span></span>  
  
 <span data-ttu-id="b0483-128">부터는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.IO.Stream> 클래스는 비동기 작업을 단순화 하는 비동기 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-128">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.IO.Stream> class includes async methods to simplify asynchronous operations.</span></span> <span data-ttu-id="b0483-129">비동기 메서드를 포함 `Async` 이름에 같은 <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, 및 <xref:System.IO.Stream.FlushAsync%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-129">An async method contains `Async` in its name, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>.</span></span> <span data-ttu-id="b0483-130">이러한 메서드를 사용 하 여 주 스레드를 차단 하지 않고 리소스 집중형 I/O 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-130">These methods enable you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="b0483-131">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 응용 프로그램 또는 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 응용 프로그램에서 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-131">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="b0483-132">비동기 메서드에와 함께 사용 되는 `async` 및 `await` Visual Basic 및 C# 키워드.</span><span class="sxs-lookup"><span data-stu-id="b0483-132">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="b0483-133">사용 될 때는 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 앱 <xref:System.IO.Stream> 두 확장 메서드가 포함 되어: <xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A> 및 <xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-133">When used in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app, <xref:System.IO.Stream> includes two extension methods: <xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A>.</span></span> <span data-ttu-id="b0483-134">이러한 메서드는 변환 된 <xref:System.IO.Stream> 에서 스트림으로 개체는 [!INCLUDE[wrt](~/includes/wrt-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-134">These methods convert a <xref:System.IO.Stream> object to a stream in the [!INCLUDE[wrt](~/includes/wrt-md.md)].</span></span> <span data-ttu-id="b0483-135">스트림에 변환할 수도 있습니다는 [!INCLUDE[wrt](~/includes/wrt-md.md)] 에 <xref:System.IO.Stream> 사용 하 여 개체는 <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A> 및 <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="b0483-135">You can also convert a stream in the [!INCLUDE[wrt](~/includes/wrt-md.md)] to a <xref:System.IO.Stream> object by using the <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A> methods.</span></span> <span data-ttu-id="b0483-136">자세한 내용은 참조 [하는 방법: 변환 간의.NET Framework 스트림과 Windows 런타임 스트림](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</span><span class="sxs-lookup"><span data-stu-id="b0483-136">For more information, see [How to: Convert Between .NET Framework Streams and Windows Runtime Streams](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</span></span>  
  
 <span data-ttu-id="b0483-137">일부 스트림 구현 성능 향상을 위해 기본 데이터의 로컬 버퍼링을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-137">Some stream implementations perform local buffering of the underlying data to improve performance.</span></span> <span data-ttu-id="b0483-138">이러한 스트림에서 사용할 수 있습니다는 <xref:System.IO.Stream.Flush%2A> 또는 <xref:System.IO.Stream.FlushAsync%2A> 메서드 내부 버퍼를 모두 지우고 모든 데이터에 기본 데이터 소스 또는 리포지토리에 기록 되었는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-138">For such streams, you can use the <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.FlushAsync%2A> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.</span></span>  
  
 <span data-ttu-id="b0483-139">(비트 버킷) 없는 백업 저장소 스트림이 필요한 경우 사용 된 <xref:System.IO.Stream.Null> 이 목적을 위해 설계 된 스트림 인스턴스를 검색 하는 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-139">If you need a stream with no backing store (also known as a bit bucket), use the <xref:System.IO.Stream.Null> field to retrieve an instance of a stream that is designed for this purpose.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0483-140">다음 예제에서는 두 개를 사용 하는 방법을 <xref:System.IO.FileStream> 개체를 비동기적으로 다른 디렉터리에 디렉터리에서 파일을 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-140">The following example demonstrates how to use two <xref:System.IO.FileStream> objects to asynchronously copy the files from one directory to another directory.</span></span> <span data-ttu-id="b0483-141"><xref:System.IO.FileStream> 클래스는 <xref:System.IO.Stream> 클래스에서 파생됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-141">The <xref:System.IO.FileStream> class derives from the <xref:System.IO.Stream> class.</span></span> <span data-ttu-id="b0483-142"><xref:System.Web.UI.WebControls.Button.Click> 컨트롤에 대한 <xref:System.Windows.Controls.Button> 이벤트 처리기는 비동기 메서드를 호출하므로 `async` 한정자로 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-142">Notice that the <xref:System.Web.UI.WebControls.Button.Click> event handler for the <xref:System.Windows.Controls.Button> control is marked with the `async` modifier because it calls an asynchronous method.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#1](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example.cs#1)]
 [!code-vb[Asynchronous_File_IO_async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="b0483-143">파생된 클래스를 구현 하는 경우 <see cref="T:System.IO.Stream" />에 대 한 구현을 제공 해야 합니다는 <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> 및 <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> 메서드.</span>
        <span class="sxs-lookup">
          <span data-stu-id="b0483-143">When you implement a derived class of <see cref="T:System.IO.Stream" />, you must provide implementations for the <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> methods.</span>
        </span>
        <span data-ttu-id="b0483-144">비동기 메서드는 <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />, <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />, 및 <see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" /> 동기 메서드를 사용 하 여 <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> 및 <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> 구현에서 합니다.</span>
        <span class="sxs-lookup">
          <span data-stu-id="b0483-144">The asynchronous methods <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />, <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />, and <see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" /> use the synchronous methods <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> in their implementations.</span>
        </span>
        <span data-ttu-id="b0483-145">따라서 사용자 구현 <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> 및 <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> 비동기 메서드는 제대로 작동 합니다.</span>
        <span class="sxs-lookup">
          <span data-stu-id="b0483-145">Therefore, your implementations of <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> will work correctly with the asynchronous methods.</span>
        </span>
        <span data-ttu-id="b0483-146">기본 구현과 <see cref="M:System.IO.Stream.ReadByte" /> 및 <see cref="M:System.IO.Stream.WriteByte(System.Byte)" /> 새 단일 요소 바이트 배열을 만들고 다음의 구현을 호출 <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> 및 <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />합니다.</span>
        <span class="sxs-lookup">
          <span data-stu-id="b0483-146">The default implementations of <see cref="M:System.IO.Stream.ReadByte" /> and <see cref="M:System.IO.Stream.WriteByte(System.Byte)" /> create a new single-element byte array, and then call your implementations of <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />.</span>
        </span>
        <span data-ttu-id="b0483-147">파생 시키는 경우 <see cref="T:System.IO.Stream" />, 있는 경우을 성능을 향상 시키려면에 대 한 내부 버퍼에 액세스 하려면 이러한 메서드를 재정의 하는 것이 좋습니다.</span>
        <span class="sxs-lookup">
          <span data-stu-id="b0483-147">When you derive from <see cref="T:System.IO.Stream" />, we recommend that you override these methods to access your internal buffer, if you have one, for substantially better performance.</span>
        </span>
        <span data-ttu-id="b0483-148">구현도 제공 해야 <see cref="P:System.IO.Stream.CanRead" />, <see cref="P:System.IO.Stream.CanSeek" />, <see cref="P:System.IO.Stream.CanWrite" />, <see cref="M:System.IO.Stream.Flush" />, <see cref="P:System.IO.Stream.Length" />, <see cref="P:System.IO.Stream.Position" />, <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" />, 및 <see cref="M:System.IO.Stream.SetLength(System.Int64)" />합니다.</span>
        <span class="sxs-lookup">
          <span data-stu-id="b0483-148">You must also provide implementations of <see cref="P:System.IO.Stream.CanRead" />, <see cref="P:System.IO.Stream.CanSeek" />, <see cref="P:System.IO.Stream.CanWrite" />, <see cref="M:System.IO.Stream.Flush" />, <see cref="P:System.IO.Stream.Length" />, <see cref="P:System.IO.Stream.Position" />, <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" />, and <see cref="M:System.IO.Stream.SetLength(System.Int64)" />.</span>
        </span>
        <span data-ttu-id="b0483-149">재정의 하지 않는 <see cref="M:System.IO.Stream.Close" /> 메서드를 대신 모든 배치는 <see cref="T:System.IO.Stream" /> 정리 논리는 <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> 메서드.</span>
        <span class="sxs-lookup">
          <span data-stu-id="b0483-149">Do not override the <see cref="M:System.IO.Stream.Close" /> method, instead, put all the <see cref="T:System.IO.Stream" /> cleanup logic in the <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> method.</span>
        </span>
        <span data-ttu-id="b0483-150">자세한 내용은 참조 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span>
        <span class="sxs-lookup">
          <span data-stu-id="b0483-150">For more information, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
        </span>
      </para>
    </block>
    <altmember cref="T:System.IO.FileStream" />
    <altmember cref="T:System.IO.MemoryStream" />
    <altmember cref="T:System.IO.BufferedStream" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Stream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Stream();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b0483-151">
            <see cref="T:System.IO.Stream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-151">Initializes a new instance of the <see cref="T:System.IO.Stream" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-152"><xref:System.IO.Stream> 모든 스트림의 추상 기본 클래스가입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-152"><xref:System.IO.Stream> is the abstract base class of all streams.</span></span>  
  
 <span data-ttu-id="b0483-153">일반적으로 사용 되는 일부 수록에서 상속 하는 스트림의 <xref:System.IO.Stream> 는 <xref:System.IO.FileStream>, 및 <xref:System.IO.MemoryStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-153">Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginRead (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="b0483-154">데이터를 읽을 버퍼입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-154">The buffer to read the data into.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="b0483-155">스트림의 데이터를 쓰기 시작할 <c>버퍼</c>의 바이트 오프셋입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-155">The byte offset in <c>buffer</c> at which to begin writing data read from the stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b0483-156">읽을 최대 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-156">The maximum number of bytes to read.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="b0483-157">읽기가 완료되면 호출되는 선택적 비동기 콜백입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-157">An optional asynchronous callback, to be called when the read is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b0483-158">다른 요청에서 특정 비동기 읽기 요청을 구별하는 사용자 제공 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-158">A user-provided object that distinguishes this particular asynchronous read request from other requests.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-159">비동기 읽기 작업을 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-159">Begins an asynchronous read operation.</span>
          </span>
          <span data-ttu-id="b0483-160">대신 <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />를 사용하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-160">(Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-161">보류 중인 비동기 읽기를 나타내는 <see cref="T:System.IAsyncResult" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-161">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous read, which could still be pending.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-162">.NET Framework 4 및 이전 버전에서 비동기 I/O 작업을 구현하려면 <xref:System.IO.Stream.BeginRead%2A> 및 <xref:System.IO.Stream.EndRead%2A> 와 같은 메서드를 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-162">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations.</span></span> <span data-ttu-id="b0483-163">그러나 이러한 메서드는에서 계속 사용할 수는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 레거시 코드를 지원 하기 위해 새로운 비동기 메서드 같은 <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, 및 <xref:System.IO.Stream.FlushAsync%2A>, 도움말 비동기 I/O 작업을 보다 쉽게 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-163">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.</span></span>  
  
 <span data-ttu-id="b0483-164">기본 구현은 `BeginRead` 스트림에서 호출은 <xref:System.IO.Stream.Read%2A> 메서드를 동기적으로 즉 `Read` 일부 스트림을 차단 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-164">The default implementation of `BeginRead` on a stream calls the <xref:System.IO.Stream.Read%2A> method synchronously, which means that `Read` might block on some streams.</span></span> <span data-ttu-id="b0483-165">그러나 인스턴스를 같은 클래스의 `FileStream` 및 `NetworkStream` 비동기적으로 열려 있을 경우 비동기 작업을 완벽 하 게 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-165">However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously.</span></span> <span data-ttu-id="b0483-166">따라서에 대 한 호출이 `BeginRead` 해당 스트림에서 차단 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-166">Therefore, calls to `BeginRead` will not block on those streams.</span></span> <span data-ttu-id="b0483-167">재정의할 수 있습니다 `BeginRead` (예를 들어 비동기 대리자를 사용 하 여) 하 여 비동기 동작을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-167">You can override `BeginRead` (by using async delegates, for example) to provide asynchronous behavior.</span></span>  
  
 <span data-ttu-id="b0483-168">전달 된 `IAsyncResult` 반환 값을는 <xref:System.IO.Stream.EndRead%2A> 읽은 바이트 수를 확인 하 고 읽는 데 사용 된 운영 체제 리소스를 해제 하는 스트림의 메서드가 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-168">Pass the `IAsyncResult` return value to the <xref:System.IO.Stream.EndRead%2A> method of the stream to determine how many bytes were read and to release operating system resources used for reading.</span></span> <span data-ttu-id="b0483-169"><xref:System.IO.Stream.EndRead%2A> 호출할 때마다 한 번씩 호출 해야 <xref:System.IO.Stream.BeginRead%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-169"><xref:System.IO.Stream.EndRead%2A> must be called once for every call to <xref:System.IO.Stream.BeginRead%2A>.</span></span> <span data-ttu-id="b0483-170">이렇게 하려면 호출 하는 동일한 코드를 사용 하 여 `BeginRead` 에 전달 된 콜백에서 `BeginRead`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-170">You can do this either by using the same code that called `BeginRead` or in a callback passed to `BeginRead`.</span></span>  
  
 <span data-ttu-id="b0483-171">비동기 읽기 또는 쓰기 실행 되는 I/O 작업이 완료 될 때가 아니라 스트림 내의 현재 위치 업데이트 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-171">The current position in the stream is updated when the asynchronous read or write is issued, not when the I/O operation completes.</span></span>  
  
 <span data-ttu-id="b0483-172">여러 개의 비동기 요청 렌더링 요청 완료 순서 불확실 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-172">Multiple simultaneous asynchronous requests render the request completion order uncertain.</span></span>  
  
 <span data-ttu-id="b0483-173">사용 하 여는 <xref:System.IO.Stream.CanRead%2A> 속성을 현재 인스턴스에 읽기를 지원 하는지를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-173">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
 <span data-ttu-id="b0483-174">예외가 즉시 throw 되는 스트림이 닫혀 있거나를 잘못 된 인수를 전달 하는 경우 `BeginRead`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-174">If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginRead`.</span></span> <span data-ttu-id="b0483-175">I/O 요청 중의 디스크 오류와 같은 비동기 읽기 요청 하는 동안 발생 하는 오류는 스레드 풀 스레드에서 발생 하 고 호출 시 예외를 throw `EndRead`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-175">Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndRead`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="b0483-176">스트림의 끝을 넘어 비동기 읽기를 시도했거나 디스크 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-176">Attempted an asynchronous read past the end of the stream, or a disk error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0483-177">하나 이상의 인수가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-177">One or more of the arguments is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-178">스트림이 닫힌 후에 메서드가 호출되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-178">Methods were called after the stream was closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-179">현재 <see langword="Stream" /> 구현이 읽기 작업을 지원하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-179">The current <see langword="Stream" /> implementation does not support the read operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginWrite (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="b0483-180">데이터를 쓸 버퍼입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-180">The buffer to write data from.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="b0483-181">쓰기를 시작할 <c>버퍼</c>의 바이트 오프셋입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-181">The byte offset in <c>buffer</c> from which to begin writing.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b0483-182">쓸 최대 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-182">The maximum number of bytes to write.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="b0483-183">쓰기가 완료되면 호출되는 선택적 비동기 콜백입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-183">An optional asynchronous callback, to be called when the write is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="b0483-184">다른 요청에서 특정 비동기 쓰기 요청을 구별하는 사용자 제공 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-184">A user-provided object that distinguishes this particular asynchronous write request from other requests.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-185">비동기 쓰기 작업을 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-185">Begins an asynchronous write operation.</span>
          </span>
          <span data-ttu-id="b0483-186">대신 <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />를 사용하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-186">(Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-187">보류 중인 비동기 쓰기를 나타내는 <see langword="IAsyncResult" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-187">An <see langword="IAsyncResult" /> that represents the asynchronous write, which could still be pending.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-188">.NET Framework 4 및 이전 버전에서 비동기 I/O 작업을 구현하려면 <xref:System.IO.Stream.BeginWrite%2A> 및 <xref:System.IO.Stream.EndWrite%2A>와 같은 메서드를 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-188">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations.</span></span> <span data-ttu-id="b0483-189">그러나 이러한 메서드는에서 계속 사용할 수는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 레거시 코드를 지원 하기 위해 새로운 비동기 메서드 같은 <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, 및 <xref:System.IO.Stream.FlushAsync%2A>, 도움말 비동기 I/O 작업을 보다 쉽게 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-189">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.</span></span>  
  
 <span data-ttu-id="b0483-190">기본 구현은 `BeginWrite` 스트림에서 호출은 <xref:System.IO.Stream.Write%2A> 메서드를 동기적으로 즉 `Write` 일부 스트림을 차단 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-190">The default implementation of `BeginWrite` on a stream calls the <xref:System.IO.Stream.Write%2A> method synchronously, which means that `Write` might block on some streams.</span></span> <span data-ttu-id="b0483-191">그러나 인스턴스를 같은 클래스의 `FileStream` 및 `NetworkStream` 비동기적으로 열려 있을 경우 비동기 작업을 완벽 하 게 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-191">However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously.</span></span> <span data-ttu-id="b0483-192">따라서에 대 한 호출이 `BeginWrite` 해당 스트림에서 차단 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-192">Therefore, calls to `BeginWrite` will not block on those streams.</span></span> <span data-ttu-id="b0483-193">재정의할 수 있습니다 `BeginWrite` (예를 들어 비동기 대리자를 사용 하 여) 하 여 비동기 동작을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-193">You can override `BeginWrite` (by using async delegates, for example) to provide asynchronous behavior.</span></span>  
  
 <span data-ttu-id="b0483-194">전달 된 `IAsyncResult` 를 현재 메서드에 의해 반환 된 <xref:System.IO.Stream.EndWrite%2A> 쓰기 완료 하 고 적절 하 게 리소스를 해제 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-194">Pass the `IAsyncResult` returned by the current method to <xref:System.IO.Stream.EndWrite%2A> to ensure that the write completes and frees resources appropriately.</span></span> <span data-ttu-id="b0483-195"><xref:System.IO.Stream.EndWrite%2A> 호출할 때마다 한 번씩 호출 해야 <xref:System.IO.Stream.BeginWrite%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-195"><xref:System.IO.Stream.EndWrite%2A> must be called once for every call to <xref:System.IO.Stream.BeginWrite%2A>.</span></span> <span data-ttu-id="b0483-196">이렇게 하려면 호출 하는 동일한 코드를 사용 하 여 `BeginWrite` 에 전달 된 콜백에서 `BeginWrite`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-196">You can do this either by using the same code that called `BeginWrite` or in a callback passed to `BeginWrite`.</span></span> <span data-ttu-id="b0483-197">비동기 쓰기 중에 오류가 발생 하기 전에 예외가 throw 되지 됩니다 `EndWrite` 로 호출 되는 `IAsyncResult` 이 메서드에서 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-197">If an error occurs during an asynchronous write, an exception will not be thrown until `EndWrite` is called with the `IAsyncResult` returned by this method.</span></span>  
  
 <span data-ttu-id="b0483-198">한 스트림이 쓰기 가능한 경우 스트림의 끝에 쓰기 스트림을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-198">If a stream is writable, writing at the end of the stream expands the stream.</span></span>  
  
 <span data-ttu-id="b0483-199">I/O 작업이 완료 될 때가 아니라 비동기 읽기 또는 쓰기 파일 그룹를 실행 하면 스트림의 현재 위치 업데이트 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-199">The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes.</span></span> <span data-ttu-id="b0483-200">여러 개의 비동기 요청 렌더링 요청 완료 순서 불확실 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-200">Multiple simultaneous asynchronous requests render the request completion order uncertain.</span></span>  
  
 <span data-ttu-id="b0483-201">사용 하 여는 <xref:System.IO.Stream.CanWrite%2A> 속성을 현재 인스턴스가 쓰기를 지원 하는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-201">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
 <span data-ttu-id="b0483-202">예외가 즉시 throw 되는 스트림이 닫혀 있거나를 잘못 된 인수를 전달 하는 경우 `BeginWrite`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-202">If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginWrite`.</span></span> <span data-ttu-id="b0483-203">I/O 요청 중의 디스크 오류와 같은 비동기 쓰기 요청을 하는 동안 발생 하는 오류는 스레드 풀 스레드에서 발생 하 고 호출 시 예외를 throw `EndWrite`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-203">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndWrite`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="b0483-204">스트림의 끝을 넘어 비동기 쓰기를 시도했거나 디스크 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-204">Attempted an asynchronous write past the end of the stream, or a disk error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0483-205">하나 이상의 인수가 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-205">One or more of the arguments is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-206">스트림이 닫힌 후에 메서드가 호출되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-206">Methods were called after the stream was closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-207">현재 <see langword="Stream" /> 구현이 쓰기 작업을 지원하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-207">The current <see langword="Stream" /> implementation does not support the write operation.</span>
          </span>
        </exception>
        <altmember cref="M:System.IO.Stream.EndWrite(System.IAsyncResult)" />
        <altmember cref="P:System.IO.Stream.CanWrite" />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public abstract bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanRead { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0483-208">파생 클래스에서 재정의되면 현재 스트림이 읽기를 지원하는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-208">When overridden in a derived class, gets a value indicating whether the current stream supports reading.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0483-209">스트림이 읽기를 지원하면 <see langword="true" />이고, 지원하지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-209">
              <see langword="true" /> if the stream supports reading; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-210">클래스에서 파생 하는 경우 <xref:System.IO.Stream> 읽기를 지원 하지 않습니다에 대 한 호출이 <xref:System.IO.Stream.Read%2A>, <xref:System.IO.Stream.ReadByte%2A>, 및 <xref:System.IO.Stream.BeginRead%2A> 메서드에서 throw 된 <xref:System.NotSupportedException>합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-210">If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.Stream.Read%2A>, <xref:System.IO.Stream.ReadByte%2A>, and <xref:System.IO.Stream.BeginRead%2A> methods throw a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="b0483-211">이 속성은 반환 된 스트림이 닫혀 있는지 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-211">If the stream is closed, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0483-212">다음은 사용 하는 예제는 `CanRead` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-212">The following is an example of using the `CanRead` property.</span></span>  
  
 [!code-cpp[Classic FileStream.CanRead Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FileStream.CanRead Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/CS/source.cs#1)]
 [!code-vb[Classic FileStream.CanRead Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public abstract bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanSeek { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0483-213">파생 클래스에서 재정의되면 현재 스트림이 검색을 지원하는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-213">When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0483-214">스트림이 검색을 지원하면 <see langword="true" />이고, 지원하지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-214">
              <see langword="true" /> if the stream supports seeking; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-215">클래스에서 파생 하는 경우 <xref:System.IO.Stream> 찾기를 지원 하지 않습니다에 대 한 호출이 <xref:System.IO.Stream.Length%2A>, <xref:System.IO.Stream.SetLength%2A>, <xref:System.IO.Stream.Position%2A>, 및 <xref:System.IO.Stream.Seek%2A> throw 한 <xref:System.NotSupportedException>합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-215">If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.Stream.Length%2A>, <xref:System.IO.Stream.SetLength%2A>, <xref:System.IO.Stream.Position%2A>, and <xref:System.IO.Stream.Seek%2A> throw a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="b0483-216">이 속성은 반환 된 스트림이 닫혀 있는지 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-216">If the stream is closed, this property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public virtual bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0483-217">현재 스트림이 시간 초과될 수 있는지를 결정하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-217">Gets a value that determines whether the current stream can time out.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0483-218">현재 스트림이 시간 초과될 수 있는지를 결정하는 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-218">A value that determines whether the current stream can time out.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-219"><xref:System.IO.Stream.CanTimeout%2A> 속성은 항상 `false`를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-219">The <xref:System.IO.Stream.CanTimeout%2A> property always returns `false`.</span></span> <span data-ttu-id="b0483-220">와 같은 일부 스트림 구현의 다른 동작이 필요 <xref:System.Net.Sockets.NetworkStream>, 시간 제한이 초과 되는 경우 네트워크 연결이 중단 되거나 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-220">Some stream implementations require different behavior, such as <xref:System.Net.Sockets.NetworkStream>, which times out if network connectivity is interrupted or lost.</span></span> <span data-ttu-id="b0483-221">이 속성을 반환 하도록 재정의 합니다 시간 초과 수 있어야 하는 스트림을 구현 하는 경우 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-221">If you are implementing a stream that must be able to time out, this property should be overridden to return `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.Stream.ReadTimeout" />
        <altmember cref="P:System.IO.Stream.WriteTimeout" />
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public abstract bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanWrite { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0483-222">파생 클래스에서 재정의되면 현재 스트림이 쓰기를 지원하는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-222">When overridden in a derived class, gets a value indicating whether the current stream supports writing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0483-223">스트림이 쓰기를 지원하면 <see langword="true" />이고, 지원하지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-223">
              <see langword="true" /> if the stream supports writing; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-224">클래스에서 파생 하는 경우 <xref:System.IO.Stream> 쓰기 호출을 지원 하지 않는 <xref:System.IO.Stream.Write%2A>, <xref:System.IO.Stream.BeginWrite%2A>, 또는 <xref:System.IO.Stream.WriteByte%2A> throw 한 <xref:System.NotSupportedException>합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-224">If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.Stream.Write%2A>, <xref:System.IO.Stream.BeginWrite%2A>, or <xref:System.IO.Stream.WriteByte%2A> throws a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="b0483-225">이 속성은 반환 된 스트림이 닫혀 있는지 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-225">If the stream is closed, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0483-226">다음은 사용 하는 예제는 `CanWrite` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-226">The following is an example of using the `CanWrite` property.</span></span>  
  
 [!code-cpp[Classic Stream.CanWrite Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stream.CanWrite Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stream.CanWrite Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stream.CanWrite Example/CS/source.cs#1)]
 [!code-vb[Classic Stream.CanWrite Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stream.CanWrite Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b0483-227">현재 스트림을 닫고 현재 스트림과 관련된 소켓과 파일 핸들 등의 리소스를 모두 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-227">Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.</span>
          </span>
          <span data-ttu-id="b0483-228">이 메서드를 호출하는 대신 스트림이 올바르게 삭제되었는지 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-228">Instead of calling this method, ensure that the stream is properly disposed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-229">이 메서드를 호출 <xref:System.IO.Stream.Dispose%2A>로 지정 하 여 `true` 모든 리소스를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-229">This method calls <xref:System.IO.Stream.Dispose%2A>, specifying `true` to release all resources.</span></span> <span data-ttu-id="b0483-230">명확 하 게 호출할 필요가 없습니다는 <xref:System.IO.Stream.Close%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="b0483-230">You do not have to specifically call the <xref:System.IO.Stream.Close%2A> method.</span></span> <span data-ttu-id="b0483-231">대신, 되도록 모든 <xref:System.IO.Stream> 개체가 제대로 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-231">Instead, ensure that every <xref:System.IO.Stream> object is properly disposed.</span></span> <span data-ttu-id="b0483-232">선언할 수 있습니다 <xref:System.IO.Stream> 내에서 개체는 `using` 블록 (또는 `Using` Visual Basic의 차단) 스트림과 모든 리소스가 삭제 되도록 하거나 명시적으로 호출할 수는 <xref:System.IO.Stream.Dispose%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="b0483-232">You can declare <xref:System.IO.Stream> objects within a `using` block (or `Using` block in Visual Basic) to ensure that the stream and all of its resources are disposed, or you can explicitly call the <xref:System.IO.Stream.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="b0483-233">구현에 명시적으로 호출 하지 않으면 스트림을 내부 인코더가 플러시되지 것입니다 <xref:System.IO.Stream.Flush%2A> 또는 `Close`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-233">Flushing the stream will not flush its underlying encoder unless you explicitly call an implementation of <xref:System.IO.Stream.Flush%2A> or `Close`.</span></span> <span data-ttu-id="b0483-234">설정 <xref:System.IO.StreamWriter.AutoFlush%2A> 를 `true` 스트림 버퍼에서 데이터를 플러시할 수는 있지만 인코더 상태 플러시되지 것입니다 있다는 것을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-234">Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="b0483-235">따라서 올바르게 문자의 다음 블록을 인코딩할 수 있도록 (부분 문자)의 상태를 유지 하기 위해 인코더 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-235">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="b0483-236">이 시나리오는 u t f 8와 UTF7 인코더는 인접 한 문자를 받은 후에 특정 문자를 인코딩할 수 있는 위치에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-236">This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.</span></span>  
  
 <span data-ttu-id="b0483-237">스트림이 닫힌 후 스트림을 조작 하려는 시도 throw 할 수는 <xref:System.ObjectDisposedException>합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-237">Attempts to manipulate the stream after the stream has been closed might throw an <xref:System.ObjectDisposedException>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b0483-238">파생된 클래스에서 재정의 하지 않는 <see cref="M:System.IO.Stream.Close" /> 메서드를 대신 모든 배치는 <see langword="Stream" /> 정리 논리는 <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> 메서드.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-238">In derived classes, do not override the <see cref="M:System.IO.Stream.Close" /> method, instead, put all of the <see langword="Stream" /> cleanup logic in the <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> method.</span>
            </span>
            <span data-ttu-id="b0483-239">자세한 내용은 참조 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-239">For more information, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b0483-240">현재 스트림에서 바이트를 읽어서 다른 스트림에 해당 바이트를 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-240">Reads the bytes from the current stream and writes them to another stream.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.IO.Stream destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.IO.Stream destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyTo(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(System::IO::Stream ^ destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="b0483-241">현재 스트림의 내용을 복사할 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-241">The stream to which the contents of the current stream will be copied.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-242">현재 스트림에서 바이트를 읽어서 다른 스트림에 해당 바이트를 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-242">Reads the bytes from the current stream and writes them to another stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-243">복사 현재 스트림의 현재 위치에서 시작 되 고 복사 작업이 완료 된 후 대상 스트림의 위치를 설정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-243">Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0483-244">콘텐츠를 복사 하는 다음 예제는 <xref:System.IO.FileStream> 에 <xref:System.IO.MemoryStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-244">The following example copies the contents of a <xref:System.IO.FileStream> to a <xref:System.IO.MemoryStream>.</span></span>  
  
 [!code-csharp[System.IO.Stream.CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stream.copyto/cs/program.cs#1)]
 [!code-vb[System.IO.Stream.CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stream.copyto/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0483-245">
            <paramref name="destination" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-245">
              <paramref name="destination" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-246">현재 스트림이 읽기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-246">The current stream does not support reading.</span>
          </span>
          <span data-ttu-id="b0483-247">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-247">-or-</span>
          </span>
          <span data-ttu-id="b0483-248">
            <paramref name="destination" />이 쓰기를 지원하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-248">
              <paramref name="destination" /> does not support writing.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-249">
            <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 메서드가 호출되기 전에 현재 스트림 또는 <paramref name="destination" />이 닫힌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-249">Either the current stream or <paramref name="destination" /> were closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> method was called.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="b0483-250">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-250">An I/O error occurred.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.IO.Stream destination, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.IO.Stream destination, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Stream, bufferSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(System::IO::Stream ^ destination, int bufferSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="b0483-251">현재 스트림의 내용을 복사할 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-251">The stream to which the contents of the current stream will be copied.</span>
          </span>
        </param>
        <param name="bufferSize">
          <span data-ttu-id="b0483-252">버퍼의 크기입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-252">The size of the buffer.</span>
          </span>
          <span data-ttu-id="b0483-253">이 값은 0보다 커야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-253">This value must be greater than zero.</span>
          </span>
          <span data-ttu-id="b0483-254">기본 크기는 81920입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-254">The default size is 81920.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-255">현재 스트림에서 바이트를 읽어서 지정된 버퍼 크기로 다른 스트림에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-255">Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-256">복사 현재 스트림의 현재 위치에서 시작 되 고 복사 작업이 완료 된 후 대상 스트림의 위치를 설정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-256">Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0483-257">
            <paramref name="destination" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-257">
              <paramref name="destination" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b0483-258">
            <paramref name="bufferSize" />가 음수이거나 0인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-258">
              <paramref name="bufferSize" /> is negative or zero.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-259">현재 스트림이 읽기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-259">The current stream does not support reading.</span>
          </span>
          <span data-ttu-id="b0483-260">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-260">-or-</span>
          </span>
          <span data-ttu-id="b0483-261">
            <paramref name="destination" />이 쓰기를 지원하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-261">
              <paramref name="destination" /> does not support writing.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-262">
            <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 메서드가 호출되기 전에 현재 스트림 또는 <paramref name="destination" />이 닫힌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-262">Either the current stream or <paramref name="destination" /> were closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> method was called.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="b0483-263">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-263">An I/O error occurred.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b0483-264">현재 스트림에서 모든 바이트를 비동기적으로 읽어 다른 스트림에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-264">Asynchronously reads the bytes from the current stream and writes them to another stream.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyToAsync (destination As Stream) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="b0483-265">현재 스트림의 내용을 복사할 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-265">The stream to which the contents of the current stream will be copied.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-266">현재 스트림에서 모든 바이트를 비동기적으로 읽어 다른 스트림에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-266">Asynchronously reads the bytes from the current stream and writes them to another stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-267">비동기 복사 작업을 나타내는 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-267">A task that represents the asynchronous copy operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-268"><xref:System.IO.Stream.CopyToAsync%2A> 메서드를 사용 하면 주 스레드를 차단 하지 않고 리소스 집중형 I/O 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-268">The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="b0483-269">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 응용 프로그램 또는 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 응용 프로그램에서 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-269">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="b0483-270">비동기 메서드에와 함께 사용 되는 `async` 및 `await` Visual Basic 및 C# 키워드.</span><span class="sxs-lookup"><span data-stu-id="b0483-270">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="b0483-271">현재 스트림의 현재 위치에서 복사 작업이 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-271">Copying begins at the current position in the current stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0483-272">다음 예제에서는 두 개를 사용 하는 방법을 <xref:System.IO.FileStream> 개체를 비동기적으로 다른 디렉터리에서 파일을 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-272">The following example demonstrates how to use two <xref:System.IO.FileStream> objects to asynchronously copy the files from one directory to another.</span></span> <span data-ttu-id="b0483-273"><xref:System.IO.FileStream> 클래스는 <xref:System.IO.Stream> 클래스에서 파생됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-273">The <xref:System.IO.FileStream> class derives from the <xref:System.IO.Stream> class.</span></span>  <span data-ttu-id="b0483-274">다음에 유의 <xref:System.Web.UI.WebControls.Button.Click> 에 대 한 이벤트 처리기는 <xref:System.Windows.Controls.Button> 컨트롤으로 표시 되는 `async` 한정자는 비동기 메서드를 호출 하기 때문에</span><span class="sxs-lookup"><span data-stu-id="b0483-274">Notice that the <xref:System.Web.UI.WebControls.Button.Click> event handler for the <xref:System.Windows.Controls.Button> control is marked with the `async` modifier because it calls an asynchronous method</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#1](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example.cs#1)]
 [!code-vb[Asynchronous_File_IO_async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0483-275">
            <paramref name="destination" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-275">
              <paramref name="destination" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-276">현재 스트림이나 대상 스트림이 삭제됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-276">Either the current stream or the destination stream is disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-277">현재 스트림이 읽기를 지원하지 않거나 대상 스트림이 쓰기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-277">The current stream does not support reading, or the destination stream does not support writing.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyToAsync (destination As Stream, bufferSize As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ destination, int bufferSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="b0483-278">현재 스트림의 내용을 복사할 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-278">The stream to which the contents of the current stream will be copied.</span>
          </span>
        </param>
        <param name="bufferSize">
          <span data-ttu-id="b0483-279">버퍼의 크기(바이트)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-279">The size, in bytes, of the buffer.</span>
          </span>
          <span data-ttu-id="b0483-280">이 값은 0보다 커야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-280">This value must be greater than zero.</span>
          </span>
          <span data-ttu-id="b0483-281">기본 크기는 81920입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-281">The default size is 81920.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-282">현재 스트림에서 바이트를 비동기적으로 읽어 지정된 버퍼 크기로 다른 스트림에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-282">Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-283">비동기 복사 작업을 나타내는 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-283">A task that represents the asynchronous copy operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-284"><xref:System.IO.Stream.CopyToAsync%2A> 메서드를 사용 하면 주 스레드를 차단 하지 않고 리소스 집중형 I/O 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-284">The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="b0483-285">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 응용 프로그램 또는 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 응용 프로그램에서 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-285">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="b0483-286">비동기 메서드에와 함께 사용 되는 `async` 및 `await` Visual Basic 및 C# 키워드.</span><span class="sxs-lookup"><span data-stu-id="b0483-286">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="b0483-287">현재 스트림의 현재 위치에서 복사 작업이 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-287">Copying begins at the current position in the current stream.</span></span>  
  
 <span data-ttu-id="b0483-288">두 스트림을 간에 복사의 예제를 참조 하십시오.는 <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-288">For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0483-289">
            <paramref name="destination" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-289">
              <paramref name="destination" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b0483-290">
            <paramref name="buffersize" />가 음수이거나 0인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-290">
              <paramref name="buffersize" /> is negative or zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-291">현재 스트림이나 대상 스트림이 삭제됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-291">Either the current stream or the destination stream is disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-292">현재 스트림이 읽기를 지원하지 않거나 대상 스트림이 쓰기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-292">The current stream does not support reading, or the destination stream does not support writing.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ destination, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, int bufferSize, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination, int32 bufferSize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ destination, int bufferSize, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="b0483-293">현재 스트림의 내용을 복사할 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-293">The stream to which the contents of the current stream will be copied.</span>
          </span>
        </param>
        <param name="bufferSize">
          <span data-ttu-id="b0483-294">버퍼의 크기(바이트)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-294">The size, in bytes, of the buffer.</span>
          </span>
          <span data-ttu-id="b0483-295">이 값은 0보다 커야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-295">This value must be greater than zero.</span>
          </span>
          <span data-ttu-id="b0483-296">기본 크기는 81920입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-296">The default size is 81920.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b0483-297">취소 요청을 모니터링할 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-297">The token to monitor for cancellation requests.</span>
          </span>
          <span data-ttu-id="b0483-298">기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-298">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-299">현재 스트림에서 바이트를 비동기적으로 읽어 지정된 버퍼 크기 및 취소 토큰을 사용하여 다른 스트림에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-299">Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-300">비동기 복사 작업을 나타내는 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-300">A task that represents the asynchronous copy operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-301"><xref:System.IO.Stream.CopyToAsync%2A> 메서드를 사용 하면 주 스레드를 차단 하지 않고 리소스 집중형 I/O 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-301">The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="b0483-302">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 응용 프로그램 또는 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 응용 프로그램에서 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-302">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="b0483-303">비동기 메서드에와 함께 사용 되는 `async` 및 `await` Visual Basic 및 C# 키워드.</span><span class="sxs-lookup"><span data-stu-id="b0483-303">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="b0483-304">반환된 된 작업에 포함 된 완료 되기 전에 작업이 취소 되는 경우는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 에 대 한 값은 <xref:System.Threading.Tasks.Task.Status%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-304">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span>  
  
 <span data-ttu-id="b0483-305">현재 스트림의 현재 위치에서 복사 작업이 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-305">Copying begins at the current position in the current stream.</span></span>  
  
 <span data-ttu-id="b0483-306">두 스트림을 간에 복사의 예제를 참조 하십시오.는 <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-306">For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0483-307">
            <paramref name="destination" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-307">
              <paramref name="destination" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b0483-308">
            <paramref name="buffersize" />가 음수이거나 0인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-308">
              <paramref name="buffersize" /> is negative or zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-309">현재 스트림이나 대상 스트림이 삭제됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-309">Either the current stream or the destination stream is disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-310">현재 스트림이 읽기를 지원하지 않거나 대상 스트림이 쓰기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-310">The current stream does not support reading, or the destination stream does not support writing.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWaitHandle">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.WaitHandle CreateWaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.WaitHandle CreateWaitHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CreateWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateWaitHandle () As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Threading::WaitHandle ^ CreateWaitHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("CreateWaitHandle will be removed eventually.  Please use "new ManualResetEvent(false)" instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b0483-311">
            <see cref="T:System.Threading.WaitHandle" /> 개체를 할당합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-311">Allocates a <see cref="T:System.Threading.WaitHandle" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-312">할당된 <see langword="WaitHandle" />에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-312">A reference to the allocated <see langword="WaitHandle" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-313">처음으로 호출 하는 경우 현재 메서드가 만듭니다는 `WaitHandle` 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-313">When called for the first time, the current method creates a `WaitHandle` object and returns it.</span></span> <span data-ttu-id="b0483-314">후속 호출에서 `CreateWaitHandle` 새 대기 핸들에 대 한 참조를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-314">On subsequent calls, `CreateWaitHandle` returns a reference to a new wait handle.</span></span>  
  
 <span data-ttu-id="b0483-315">비동기 메서드를 구현 하 고 차단 해야 하는 경우이 메서드를 사용 하 여 <xref:System.IO.Stream.EndRead%2A> 또는 <xref:System.IO.Stream.EndWrite%2A> 비동기 작업이 완료 될 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-315">Use this method if you implement the asynchronous methods and require a way of blocking in <xref:System.IO.Stream.EndRead%2A> or <xref:System.IO.Stream.EndWrite%2A> until the asynchronous operation is complete.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b0483-316">해당 <see cref="T:System.IO.Stream" /> 개체에서 사용하는 리소스를 모두 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-316">Releases all resources used by the <see cref="T:System.IO.Stream" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b0483-317">
            <see cref="T:System.IO.Stream" />에서 사용하는 모든 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-317">Releases all resources used by the <see cref="T:System.IO.Stream" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-318">이 메서드는 백업 저장소에 변경 내용을 기록 하 고 리소스를 해제 하기 위한 스트림을 닫아, 스트림을 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-318">This method disposes the stream, by writing any changes to the backing store and closing the stream to release resources.</span></span>  
  
 <span data-ttu-id="b0483-319">호출 `Dispose` 에서 사용 하는 리소스는 <xref:System.IO.Stream> 다른 용도에 다시 할당 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-319">Calling `Dispose` allows the resources used by the <xref:System.IO.Stream> to be reallocated for other purposes.</span></span> <span data-ttu-id="b0483-320">에 대 한 자세한 내용은 `Dispose`, 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-320">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b0483-321">스트림 개체에 대 한 모든 정리 논리 <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-321">Place all cleanup logic for your stream object in <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />.</span>
            </span>
            <span data-ttu-id="b0483-322">재정의 하지 않는 <see cref="M:System.IO.Stream.Close" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-322">Do not override <see cref="M:System.IO.Stream.Close" />.</span>
            </span>
            <span data-ttu-id="b0483-323">이전 버전과 호환성 요구 사항 때문에이 메서드의 구현은에서 다른 것 Dispose 패턴에 대 한 권장된 지침을 참고 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-323">Note that because of backward compatibility requirements, this method's implementation differs from the recommended guidance for the Dispose pattern.</span>
            </span>
            <span data-ttu-id="b0483-324">이 메서드를 호출 <see cref="M:System.IO.Stream.Close" />, 호출 <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-324">This method calls <see cref="M:System.IO.Stream.Close" />, which then calls <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="b0483-325">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-325">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-326">
            <see cref="T:System.IO.Stream" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-326">Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-327">지정 하 여 모든 리소스를 해제 해야 `true` 에 대 한 `disposing`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-327">You should release all resources by specifying `true` for `disposing`.</span></span> <span data-ttu-id="b0483-328">때 `disposing` 은 `true`, 데이터가 다른 종료 가능 개체에 액세스 하는 내부 버퍼에 플러시되는 스트림이 되도록 할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-328">When `disposing` is `true`, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects.</span></span>  <span data-ttu-id="b0483-329">이 종료자 간의 순서 부족으로 인해 종료자에서 호출 될 때 발생할 수 없습니다 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-329">This may not be possible when called from a finalizer due a lack of ordering among finalizers.</span></span>  
  
 <span data-ttu-id="b0483-330">스트림을 사용 중인 경우 운영 체제 핸들의 소스와 통신 하는 것이 좋습니다의 서브 클래스를 사용 하 여 <xref:System.Runtime.InteropServices.SafeHandle> 이 목적을 위해 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-330">If your stream is using an operating system handle to communicate with its source, consider using a subclass of <xref:System.Runtime.InteropServices.SafeHandle> for this purpose.</span></span>  
  
 <span data-ttu-id="b0483-331">이 메서드는 public <xref:System.ComponentModel.Component.Dispose%2A> 메서드 및 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="b0483-331">This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="b0483-332"><xref:System.ComponentModel.Component.Dispose%2A> 보호 된 호출 <xref:System.IO.Stream.Dispose%2A> 메서드는 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-332"><xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.Stream.Dispose%2A> method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="b0483-333"><xref:System.Object.Finalize%2A> 호출 <xref:System.IO.Stream.Dispose%2A> 와 `disposing` 로 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-333"><xref:System.Object.Finalize%2A> invokes <xref:System.IO.Stream.Dispose%2A> with `disposing` set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b0483-334">파생된 클래스에서 재정의 하지 않는 <see cref="M:System.IO.Stream.Close" /> 모든 스트림 정리 논리에 메서드를 대신 배치는 <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> 메서드.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-334">In derived classes, do not override the <see cref="M:System.IO.Stream.Close" /> method, instead, put all of the Stream cleanup logic in the <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> method.</span>
            </span>
            <span data-ttu-id="b0483-335">
              <see cref="M:System.ComponentModel.Component.Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-335">
                <see cref="M:System.ComponentModel.Component.Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="b0483-336">
              <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />를 재정의할 때 이전 <see cref="M:System.ComponentModel.Component.Dispose" /> 호출에서 삭제된 개체를 참조하지 않도록 주의하십시오.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-336">When overriding <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see cref="M:System.ComponentModel.Component.Dispose" />.</span>
            </span>
            <span data-ttu-id="b0483-337">구현 하는 방법에 대 한 자세한 내용은 <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />, 참조 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-337">For more information about how to implement <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="b0483-338">에 대 한 자세한 내용은 <see cref="M:System.ComponentModel.Component.Dispose" /> 및 <see cref="M:System.Object.Finalize" />, 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-338">For more information about <see cref="M:System.ComponentModel.Component.Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public virtual int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="b0483-339">완료할 보류 중인 비동기 요청에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-339">The reference to the pending asynchronous request to finish.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-340">보류 중인 비동기 읽기가 완료되기를 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-340">Waits for the pending asynchronous read to complete.</span>
          </span>
          <span data-ttu-id="b0483-341">대신 <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />를 사용하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-341">(Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-342">0과 요청한 바이트 수 사이의 스트림에서 읽은 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-342">The number of bytes read from the stream, between zero (0) and the number of bytes you requested.</span>
          </span>
          <span data-ttu-id="b0483-343">스트림은 스트림의 끝에서만 0을 반환하며, 그렇지 않으면 사용할 수 있는 바이트가 1바이트 이상이 될 때까지 차단됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-343">Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-344">.NET Framework 4 및 이전 버전에서 비동기 I/O 작업을 구현하려면 <xref:System.IO.Stream.BeginRead%2A> 및 <xref:System.IO.Stream.EndRead%2A> 와 같은 메서드를 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-344">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations.</span></span> <span data-ttu-id="b0483-345">그러나 이러한 메서드는에서 계속 사용할 수는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 레거시 코드를 지원 하기 위해 새로운 비동기 메서드 같은 <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, 및 <xref:System.IO.Stream.FlushAsync%2A>, 도움말 비동기 I/O 작업을 보다 쉽게 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-345">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.</span></span>  
  
 <span data-ttu-id="b0483-346">호출 `EndRead` 를 스트림에서 읽을 바이트 수를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-346">Call `EndRead` to determine how many bytes were read from the stream.</span></span>  
  
 <span data-ttu-id="b0483-347">`EndRead` 한 번 호출 될 모든 <xref:System.IAsyncResult> 에서 <xref:System.IO.Stream.BeginRead%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-347">`EndRead` can be called once on every <xref:System.IAsyncResult> from <xref:System.IO.Stream.BeginRead%2A>.</span></span>  
  
 <span data-ttu-id="b0483-348">이 메서드는 I/O 작업이 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-348">This method blocks until the I/O operation has completed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0483-349">
            <paramref name="asyncResult" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-349">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0483-350">보류 중인 읽기 작업에 대한 핸들을 사용할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-350">A handle to the pending read operation is not available.</span>
          </span>
          <span data-ttu-id="b0483-351">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-351">-or-</span>
          </span>
          <span data-ttu-id="b0483-352">보류 중인 작업이 읽기를 지원하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-352">The pending operation does not support reading.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b0483-353">
            <paramref name="asyncResult" />가 현재 스트림의 <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 메서드에서 시작되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-353">
              <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="b0483-354">스트림이 닫혔거나 내부 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-354">The stream is closed or an internal error has occurred.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public virtual void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="b0483-355">처리 중인 비동기 I/O 요청에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-355">A reference to the outstanding asynchronous I/O request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-356">비동기 쓰기 작업을 끝냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-356">Ends an asynchronous write operation.</span>
          </span>
          <span data-ttu-id="b0483-357">대신 <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />를 사용하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-357">(Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-358">.NET Framework 4 및 이전 버전에서 비동기 I/O 작업을 구현하려면 <xref:System.IO.Stream.BeginWrite%2A> 및 <xref:System.IO.Stream.EndWrite%2A>와 같은 메서드를 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-358">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations.</span></span> <span data-ttu-id="b0483-359">그러나 이러한 메서드는에서 계속 사용할 수는 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 레거시 코드를 지원 하기 위해 새로운 비동기 메서드 같은 <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, 및 <xref:System.IO.Stream.FlushAsync%2A>, 도움말 비동기 I/O 작업을 보다 쉽게 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-359">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.</span></span>  
  
 <span data-ttu-id="b0483-360">`EndWrite` 정확히 한 번만 호출 해야 모든 <xref:System.IAsyncResult> 에서 <xref:System.IO.Stream.BeginWrite%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-360">`EndWrite` must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.Stream.BeginWrite%2A>.</span></span>  
  
 <span data-ttu-id="b0483-361">이 메서드는 I/O 작업이 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-361">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="b0483-362">I/O 요청 중의 디스크 오류와 같은 비동기 쓰기 요청을 하는 동안 발생 하는 오류는 스레드 풀 스레드에서 발생 하 고 호출 시 표시 될 `EndWrite`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-362">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and become visible upon a call to `EndWrite`.</span></span> <span data-ttu-id="b0483-363">호출할 때 스레드 풀 스레드에서 throw 된 예외 표시 되지 것입니다 `EndWrite`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-363">Exceptions thrown by the thread pool thread will not be visible when calling `EndWrite`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0483-364">
            <paramref name="asyncResult" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-364">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0483-365">보류 중인 쓰기 작업에 대한 핸들을 사용할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-365">A handle to the pending write operation is not available.</span>
          </span>
          <span data-ttu-id="b0483-366">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-366">-or-</span>
          </span>
          <span data-ttu-id="b0483-367">보류 중인 작업이 쓰기를 지원하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-367">The pending operation does not support writing.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b0483-368">
            <paramref name="asyncResult" />가 현재 스트림의 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 메서드에서 시작되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-368">
              <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="b0483-369">스트림이 닫혔거나 내부 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-369">The stream is closed or an internal error has occurred.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public abstract void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b0483-370">파생 클래스에서 재정의되면 이 스트림에 대해 모든 버퍼를 지우고 버퍼링된 데이터가 내부 장치에 쓰여지도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-370">When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-371">재정의 `Flush` 버퍼를 구현 하는 스트림에 대해 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-371">Override `Flush` on streams that implement a buffer.</span></span> <span data-ttu-id="b0483-372">이 메서드를 사용 하 여 내부 버퍼에서 정보를 대상으로 이동을 하거나, 버퍼의 선택을 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-372">Use this method to move any information from an underlying buffer to its destination, clear the buffer, or both.</span></span> <span data-ttu-id="b0483-373">개체의 상태에 따라 (예를 들어 경우 내부 검색 지원 스트림) 스트림 내의 현재 위치를 수정 해야 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-373">Depending upon the state of the object, you might have to modify the current position within the stream (for example, if the underlying stream supports seeking).</span></span> <span data-ttu-id="b0483-374">자세한 내용은 <xref:System.IO.Stream.CanSeek%2A>를 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="b0483-374">For additional information see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
 <span data-ttu-id="b0483-375">사용 하는 경우는 <xref:System.IO.StreamWriter> 또는 <xref:System.IO.BinaryWriter> 클래스, 기본을 플러시하지 않은 <xref:System.IO.Stream> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-375">When using the <xref:System.IO.StreamWriter> or <xref:System.IO.BinaryWriter> class, do not flush the base <xref:System.IO.Stream> object.</span></span> <span data-ttu-id="b0483-376">대신,는 클래스를 사용 하 여 <xref:System.IO.Stream.Flush%2A> 또는 <xref:System.IO.Stream.Close%2A> 메서드 데이터를 기본 스트림으로 먼저 플러시 및 다음 파일에 기록 되어 있는지를 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-376">Instead, use the class's <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.Close%2A> method, which makes sure that the data is flushed to the underlying stream first and then written to the file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="b0483-377">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-377">An I/O error occurs.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FlushAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b0483-378">이 스트림에 대한 모든 버퍼를 비동기적으로 지우고 버퍼링된 모든 데이터가 내부 장치에 비동기적으로 쓰여지도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-378">Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FlushAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FlushAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.FlushAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function FlushAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FlushAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b0483-379">이 스트림에 대한 모든 버퍼를 비동기적으로 지우고 버퍼링된 모든 데이터가 내부 장치에 비동기적으로 쓰여지도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-379">Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-380">비동기 플러시 작업을 나타내는 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-380">A task that represents the asynchronous flush operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-381">파생 클래스와 같은 <xref:System.IO.Compression.DeflateStream> 또는 <xref:System.IO.Compression.GZipStream>, 구현에서 버퍼를 플러시하지 않습니다는 <xref:System.IO.Stream.Flush%2A> 메서드를는 <xref:System.IO.Stream.FlushAsync%2A> 메서드 버퍼가 플러시되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-381">If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the <xref:System.IO.Stream.FlushAsync%2A> method will not flush the buffer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-382">스트림이 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-382">The stream has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="b0483-383">취소 요청을 모니터링할 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-383">The token to monitor for cancellation requests.</span>
          </span>
          <span data-ttu-id="b0483-384">기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-384">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-385">이 스트림에 대해 모든 버퍼를 비동기적으로 지우고 버퍼링된 데이터가 내부 장치에 쓰여지도록 하고 취소 요청을 모니터링합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-385">Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-386">비동기 플러시 작업을 나타내는 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-386">A task that represents the asynchronous flush operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-387">반환된 된 작업에 포함 된 완료 되기 전에 작업이 취소 되는 경우는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 에 대 한 값은 <xref:System.Threading.Tasks.Task.Status%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-387">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span>  
  
 <span data-ttu-id="b0483-388">파생 클래스와 같은 <xref:System.IO.Compression.DeflateStream> 또는 <xref:System.IO.Compression.GZipStream>, 구현에서 버퍼를 플러시하지 않습니다는 <xref:System.IO.Stream.Flush%2A> 메서드를는 <xref:System.IO.Stream.FlushAsync%2A> 메서드 버퍼가 플러시되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-388">If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the <xref:System.IO.Stream.FlushAsync%2A> method will not flush the buffer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-389">스트림이 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-389">The stream has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public abstract long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.Length" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property long Length { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0483-390">파생 클래스에서 재정의되면 스트림 바이트의 길이를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-390">When overridden in a derived class, gets the length in bytes of the stream.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0483-391">스트림 길이(바이트)를 나타내는 long 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-391">A long value representing the length of the stream in bytes.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-392">
            <see langword="Stream" />에서 파생된 클래스가 검색을 지원하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-392">A class derived from <see langword="Stream" /> does not support seeking.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-393">스트림이 닫힌 후에 메서드가 호출되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-393">Methods were called after the stream was closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.IO.Stream Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.IO.Stream Null" />
      <MemberSignature Language="DocId" Value="F:System.IO.Stream.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As Stream " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::IO::Stream ^ Null;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0483-394">백업 저장소가 없는 <see langword="Stream" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-394">A <see langword="Stream" /> with no backing store.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-395">사용 하 여 `Null` 스트림으로 운영 체제 리소스를 사용 하지 않을 출력을 리디렉션할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-395">Use `Null` to redirect output to a stream that will not consume any operating system resources.</span></span> <span data-ttu-id="b0483-396">때의 메서드 `Stream` 으로 쓰기 호출을 제공 하는 `Null`, 호출이 반환 되 고 데이터가 기록 되지 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-396">When the methods of `Stream` that provide writing are invoked on `Null`, the call simply returns, and no data is written.</span></span> <span data-ttu-id="b0483-397">`Null` 또한 구현 하는 `Read` 데이터를 읽어 오지 않고 0을 반환 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="b0483-397">`Null` also implements a `Read` method that returns zero without reading data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectInvariant">
      <MemberSignature Language="C#" Value="protected virtual void ObjectInvariant ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ObjectInvariant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ObjectInvariant" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ObjectInvariant ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ObjectInvariant();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Do not call or override this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b0483-398">
            <see cref="T:System.Diagnostics.Contracts.Contract" />에 대한 지원을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-398">Provides support for a <see cref="T:System.Diagnostics.Contracts.Contract" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public abstract long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.Position" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property long Position { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0483-399">파생 클래스에서 재정의되면 현재 스트림 내의 위치를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-399">When overridden in a derived class, gets or sets the position within the current stream.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0483-400">스트림 내의 현재 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-400">The current position within the stream.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-401">스트림이 가져오거나 위치를 설정 하려면 검색을 지원 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-401">The stream must support seeking to get or set the position.</span></span> <span data-ttu-id="b0483-402">사용 하 여는 <xref:System.IO.Stream.CanSeek%2A> 스트림이 검색을 지원 하는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-402">Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the stream supports seeking.</span></span>  
  
 <span data-ttu-id="b0483-403">스트림의 길이 초과 하는 위치에 검색을 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-403">Seeking to any location beyond the length of the stream is supported.</span></span>  
  
 <span data-ttu-id="b0483-404">`Position` 속성 않습니다를 추적 하지 소비 된 생략 되었거나 하는 스트림 또는 둘 다에서 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-404">The `Position` property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="b0483-405">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-405">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-406">스트림이 검색을 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-406">The stream does not support seeking.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-407">스트림이 닫힌 후에 메서드가 호출되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-407">Methods were called after the stream was closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Read(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Read (buffer As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Read(Span&lt;System::Byte&gt; buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read([out] unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="b0483-408">바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-408">An array of bytes.</span>
          </span>
          <span data-ttu-id="b0483-409">이 메서드가 반환될 때 이 메서드가 반환될 때 현재 소스에서 읽은 바이트로 대체되는 (<c>오프셋</c> + <c>카운트</c> - 1)과 <c>오프셋</c> 사이의 값을 가진 지정된 바이트 배열을 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-409">When this method returns, the buffer contains the specified byte array with the values between <c>offset</c> and (<c>offset</c> + <c>count</c> - 1) replaced by the bytes read from the current source.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="b0483-410">현재 스트림에서 읽은 데이터를 저장하기 시작하는 <c>버퍼</c>의 바이트 오프셋(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-410">The zero-based byte offset in <c>buffer</c> at which to begin storing the data read from the current stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b0483-411">현재 스트림에서 읽을 최대 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-411">The maximum number of bytes to be read from the current stream.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-412">파생 클래스에서 재정의되면 현재 스트림에서 바이트의 시퀀스를 읽고, 읽은 바이트 수만큼 스트림 내에서 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-412">When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-413">버퍼로 읽어온 총 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-413">The total number of bytes read into the buffer.</span>
          </span>
          <span data-ttu-id="b0483-414">이 바이트 수는 현재 바이트가 충분하지 않은 경우 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달하면 0이 됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-414">This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-415">사용 하 여는 <xref:System.IO.Stream.CanRead%2A> 속성을 현재 인스턴스에 읽기를 지원 하는지를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-415">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span> <span data-ttu-id="b0483-416">사용 하 여는 <xref:System.IO.Stream.ReadAsync%2A> 현재 스트림을 비동기적으로 읽는 메서드.</span><span class="sxs-lookup"><span data-stu-id="b0483-416">Use the <xref:System.IO.Stream.ReadAsync%2A> method to read asynchronously from the current stream.</span></span>  
  
 <span data-ttu-id="b0483-417">이 메서드의 구현은 읽을 최대 `count` 바이트 스트림 및에 보관해 두면 `buffer` 부터 `offset`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-417">Implementations of this method read a maximum of `count` bytes from the current stream and store them in `buffer` beginning at `offset`.</span></span> <span data-ttu-id="b0483-418">스트림 내의 현재 위치는; 읽은 바이트 수로 앞에 그러나 예외가 발생할 경우 스트림 내의 현재 위치 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-418">The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged.</span></span> <span data-ttu-id="b0483-419">구현에서는 읽은 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-419">Implementations return the number of bytes read.</span></span> <span data-ttu-id="b0483-420">구현에 데이터가 없는 적어도 1 바이트의 데이터를 읽을 수 있고 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-420">The implementation will block until at least one byte of data can be read, in the event that no data is available.</span></span> <span data-ttu-id="b0483-421"><xref:System.IO.Stream.Read%2A> 스트림에서 더 이상 데이터 (예: 닫힌된 소켓 또는 파일의 끝) 더 이상 필요 합니다. 경우에 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-421"><xref:System.IO.Stream.Read%2A> returns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file).</span></span> <span data-ttu-id="b0483-422">구현을 스트림의 끝에 도달 하지 하는 경우에 요청 된 것 보다 적은 바이트를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-422">An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</span></span>  
  
 <span data-ttu-id="b0483-423">사용 하 여 <xref:System.IO.BinaryReader> 기본 데이터 형식을 읽기 위한 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-423">Use <xref:System.IO.BinaryReader> for reading primitive data types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0483-424">다음 예제에서는 사용 하는 방법을 보여 줍니다. <xref:System.IO.Stream.Read%2A> 데이터 블록을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-424">The following example shows how to use <xref:System.IO.Stream.Read%2A> to read a block of data.</span></span>  
  
 [!code-cpp[Classic Stream.Read Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stream.Read Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stream.Read Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stream.Read Example/CS/source.cs#1)]
 [!code-vb[Classic Stream.Read Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stream.Read Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0483-425">
            <paramref name="offset" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-425">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0483-426">
            <paramref name="buffer" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-426">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b0483-427">
            <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-427">
              <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="b0483-428">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-428">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-429">스트림이 읽기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-429">The stream does not support reading.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-430">스트림이 닫힌 후에 메서드가 호출되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-430">Methods were called after the stream was closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b0483-431">현재 스트림에서 바이트 시퀀스를 읽고 읽은 바이트 수만큼 스트림에서 위치를 비동기적으로 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-431">Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;int&gt; ReadAsync (Memory&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;int32&gt; ReadAsync(valuetype System.Memory`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Memory&lt;System.Byte&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAsync (buffer As Byte(), offset As Integer, count As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="b0483-432">데이터를 쓸 버퍼입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-432">The buffer to write the data into.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="b0483-433">스트림의 데이터를 쓰기 시작할 <c>버퍼</c>의 바이트 오프셋입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-433">The byte offset in <c>buffer</c> at which to begin writing data from the stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b0483-434">읽을 최대 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-434">The maximum number of bytes to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-435">현재 스트림에서 바이트 시퀀스를 읽고 읽은 바이트 수만큼 스트림에서 위치를 비동기적으로 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-435">Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-436">비동기 읽기 작업을 나타내는 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-436">A task that represents the asynchronous read operation.</span>
          </span>
          <span data-ttu-id="b0483-437">
            <paramref name="TResult" /> 매개 변수의 값은 버퍼 안으로 읽어들인 총 바이트 수를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-437">The value of the <paramref name="TResult" /> parameter contains the total number of bytes read into the buffer.</span>
          </span>
          <span data-ttu-id="b0483-438">현재 사용할 수 있는 바이트 수가 요청된 수보다 작을 경우 결과 값이 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-438">The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-439"><xref:System.IO.Stream.ReadAsync%2A> 메서드를 사용 하면 주 스레드를 차단 하지 않고 리소스 집중형 I/O 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-439">The <xref:System.IO.Stream.ReadAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="b0483-440">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 응용 프로그램 또는 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 응용 프로그램에서 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-440">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="b0483-441">비동기 메서드에와 함께 사용 되는 `async` 및 `await` Visual Basic 및 C# 키워드.</span><span class="sxs-lookup"><span data-stu-id="b0483-441">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="b0483-442">사용 하 여는 <xref:System.IO.Stream.CanRead%2A> 속성을 현재 인스턴스에 읽기를 지원 하는지를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-442">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0483-443">다음 예제에서는 비동기적으로 파일을 읽는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-443">The following example shows how to read from a file asynchronously.</span></span> <span data-ttu-id="b0483-444">이 예제에서는 사용 된 <xref:System.IO.FileStream> 클래스에서 파생 되는 <xref:System.IO.Stream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-444">The example uses the <xref:System.IO.FileStream> class, which derives from the <xref:System.IO.Stream> class.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#4](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example4.cs#4)]
 [!code-vb[Asynchronous_File_IO_async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0483-445">
            <paramref name="buffer" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-445">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b0483-446">
            <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-446">
              <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0483-447">
            <paramref name="offset" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-447">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-448">스트림이 읽기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-448">The stream does not support reading.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-449">스트림이 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-449">The stream has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b0483-450">스트림을 현재 이전 읽기 작업에서 사용 중입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-450">The stream is currently in use by a previous read operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="b0483-451">데이터를 쓸 버퍼입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-451">The buffer to write the data into.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="b0483-452">스트림의 데이터를 쓰기 시작할 <c>버퍼</c>의 바이트 오프셋입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-452">The byte offset in <c>buffer</c> at which to begin writing data from the stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b0483-453">읽을 최대 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-453">The maximum number of bytes to read.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b0483-454">취소 요청을 모니터링할 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-454">The token to monitor for cancellation requests.</span>
          </span>
          <span data-ttu-id="b0483-455">기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-455">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-456">현재 스트림에서 바이트의 시퀀스를 비동기적으로 읽고 읽은 바이트 수만큼 스트림 내에서 앞으로 이동하며 취소 요청을 모니터링합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-456">Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-457">비동기 읽기 작업을 나타내는 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-457">A task that represents the asynchronous read operation.</span>
          </span>
          <span data-ttu-id="b0483-458">
            <paramref name="TResult" /> 매개 변수의 값은 버퍼 안으로 읽어들인 총 바이트 수를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-458">The value of the <paramref name="TResult" /> parameter contains the total number of bytes read into the buffer.</span>
          </span>
          <span data-ttu-id="b0483-459">현재 사용할 수 있는 바이트 수가 요청된 수보다 작을 경우 결과 값이 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-459">The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-460"><xref:System.IO.Stream.ReadAsync%2A> 메서드를 사용 하면 주 스레드를 차단 하지 않고 리소스 집중형 I/O 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-460">The <xref:System.IO.Stream.ReadAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="b0483-461">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 응용 프로그램 또는 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 응용 프로그램에서 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-461">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="b0483-462">비동기 메서드에와 함께 사용 되는 `async` 및 `await` Visual Basic 및 C# 키워드.</span><span class="sxs-lookup"><span data-stu-id="b0483-462">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="b0483-463">사용 하 여는 <xref:System.IO.Stream.CanRead%2A> 속성을 현재 인스턴스에 읽기를 지원 하는지를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-463">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
 <span data-ttu-id="b0483-464">반환된 된 작업에 포함 된 완료 되기 전에 작업이 취소 되는 경우는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 에 대 한 값은 <xref:System.Threading.Tasks.Task.Status%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-464">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span>  
  
 <span data-ttu-id="b0483-465">예를 들어 참조는 <xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-465">For an example, see the <xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0483-466">
            <paramref name="buffer" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-466">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b0483-467">
            <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-467">
              <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0483-468">
            <paramref name="offset" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-468">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-469">스트림이 읽기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-469">The stream does not support reading.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-470">스트림이 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-470">The stream has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b0483-471">스트림을 현재 이전 읽기 작업에서 사용 중입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-471">The stream is currently in use by a previous read operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public virtual int ReadByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ReadByte" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadByte () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ReadByte();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b0483-472">스트림에서 바이트를 읽고 스트림 내 위치를 한 바이트씩 앞으로 이동하거나 스트림 끝일 경우 -1을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-472">Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-473">
            <see langword="Int32" />로 캐스팅된 부호 없는 바이트이거나 스트림의 끝에 있는 경우 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-473">The unsigned byte cast to an <see langword="Int32" />, or -1 if at the end of the stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-474">사용 하 여는 <xref:System.IO.Stream.CanRead%2A> 속성을 현재 인스턴스에 읽기를 지원 하는지를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-474">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
 <span data-ttu-id="b0483-475">스트림이 닫힌 후 스트림을 조작 하려는 시도 throw 할 수 있습니다는 <xref:System.ObjectDisposedException>합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-475">Attempts to manipulate the stream after the stream has been closed could throw an <xref:System.ObjectDisposedException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-476">스트림이 읽기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-476">The stream does not support reading.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-477">스트림이 닫힌 후에 메서드가 호출되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-477">Methods were called after the stream was closed.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b0483-478">기본 구현에서 <see langword="Stream" /> 새 단일 바이트 배열을 만들고 호출 합니다 <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-478">The default implementation on <see langword="Stream" /> creates a new single-byte array and then calls <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />.</span>
            </span>
            <span data-ttu-id="b0483-479">공식적으로 올바른 이지만, 것은 비효율적입니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-479">While this is formally correct, it is inefficient.</span>
            </span>
            <span data-ttu-id="b0483-480">내부 버퍼를 사용 하 여 모든 스트림을이 메서드를 재정의 하 고 버퍼 각 호출에서 추가 배열 할당 방지를 직접 읽는 훨씬 더 효율적으로 버전을 제공 해야 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-480">Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public virtual int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0483-481">스트림이 시간 초과 전 읽기를 시도할 기간을 결정하는 값(밀리초)을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-481">Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0483-482">스트림 읽기 시도가 만료되기 전까지 기다릴 시간을 결정하는 값(밀리초 단위)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-482">A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b0483-483">
            <see cref="P:System.IO.Stream.ReadTimeout" /> 메서드는 항상 <see cref="T:System.InvalidOperationException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-483">The <see cref="P:System.IO.Stream.ReadTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b0483-484">
              <see cref="P:System.IO.Stream.ReadTimeout" /> 스트림에 대 한 적절 한 동작을 제공 하도록 속성을 재정의 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-484">The <see cref="P:System.IO.Stream.ReadTimeout" /> property should be overridden to provide the appropriate behavior for the stream.</span>
            </span>
            <span data-ttu-id="b0483-485">이 속성을 발생 시켜야 스트림이 시간 초과 지원 하지 않는 경우는 <see cref="T:System.InvalidOperationException" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-485">If the stream does not support timing out, this property should raise an <see cref="T:System.InvalidOperationException" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public abstract long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">
          <span data-ttu-id="b0483-486">
            <c>원본</c> 매개 변수에 상대적인 바이트 오프셋입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-486">A byte offset relative to the <c>origin</c> parameter.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="b0483-487">새 위치를 가져오는 데 사용되는 참조 위치를 나타내는 <see cref="T:System.IO.SeekOrigin" /> 형식의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-487">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-488">파생 클래스를 재정의될 때 현재 스트림 내의 위치를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-488">When overridden in a derived class, sets the position within the current stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-489">현재 스트림 내의 새 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-489">The new position within the current stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-490">사용 하 여는 <xref:System.IO.Stream.CanSeek%2A> 속성을 현재 인스턴스 검색을 지원 하는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-490">Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the current instance supports seeking.</span></span>  
  
 <span data-ttu-id="b0483-491">경우 `offset` 가 음수 이면 새 위치 하는 데 필요한 앞에 지정 된 위치 `origin` 에 지정 된 바이트 수로 `offset`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-491">If `offset` is negative, the new position is required to precede the position specified by `origin` by the number of bytes specified by `offset`.</span></span> <span data-ttu-id="b0483-492">경우 `offset` 은 영 (0), 새 위치는에 지정 된 위치 수 `origin`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-492">If `offset` is zero (0), the new position is required to be the position specified by `origin`.</span></span> <span data-ttu-id="b0483-493">경우 `offset` 가 새 위치에 지정 된 위치 뒤에 양수 `origin` 에 지정 된 바이트 수로 `offset`합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-493">If `offset` is positive, the new position is required to follow the position specified by `origin` by the number of bytes specified by `offset`.</span></span>  
  
 <span data-ttu-id="b0483-494">클래스에서 파생 된 `Stream` 검색을 지원 위에서 설명한 기능을 제공 하려면이 메서드 재정의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-494">Classes derived from `Stream` that support seeking must override this method to provide the functionality described above.</span></span>  
  
 <span data-ttu-id="b0483-495">스트림의 길이 초과 하는 위치에 검색을 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-495">Seeking to any location beyond the length of the stream is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="b0483-496">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-496">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-497">예를 들어, 스트림이 파이프 또는 콘솔 출력에서 생성되는 경우 스트림은 검색을 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-497">The stream does not support seeking, such as if the stream is constructed from a pipe or console output.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-498">스트림이 닫힌 후에 메서드가 호출되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-498">Methods were called after the stream was closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public abstract void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetLength(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="b0483-499">원하는 현재 스트림의 길이(바이트)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-499">The desired length of the current stream in bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-500">파생 클래스에 재정의될 때 현재 스트림의 길이를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-500">When overridden in a derived class, sets the length of the current stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-501">지정된 된 값은 스트림의 현재 길이 보다 작은 경우는 스트림이 잘렸습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-501">If the specified value is less than the current length of the stream, the stream is truncated.</span></span> <span data-ttu-id="b0483-502">지정된 된 값은 스트림의 현재 길이 보다 큰 경우 스트림을 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-502">If the specified value is larger than the current length of the stream, the stream is expanded.</span></span> <span data-ttu-id="b0483-503">스트림을 확장 이전부터 새 길이 스트림의 내용은 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-503">If the stream is expanded, the contents of the stream between the old and the new length are not defined.</span></span>  
  
 <span data-ttu-id="b0483-504">스트림이 쓰기와 검색을 모두 지원 해야 `SetLength` 에서 실행 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-504">A stream must support both writing and seeking for `SetLength` to work.</span></span>  
  
 <span data-ttu-id="b0483-505">사용 하 여는 <xref:System.IO.Stream.CanWrite%2A> 현재 인스턴스가 쓰기를 지원 하는지 여부를 결정 하는 속성 및 <xref:System.IO.Stream.CanSeek%2A> 검색을 지원 하는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-505">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing, and the <xref:System.IO.Stream.CanSeek%2A> property to determine whether seeking is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="b0483-506">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-506">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-507">예를 들어, 스트림이 파이프 또는 콘솔 출력에서 생성되는 경우처럼 스트림이 쓰기와 검색을 모두 지원하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-507">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-508">스트림이 닫힌 후에 메서드가 호출되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-508">Methods were called after the stream was closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.IO.Stream Synchronized (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream Synchronized(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Synchronized(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ Synchronized(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="b0483-509">동기화할 <see cref="T:System.IO.Stream" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-509">The <see cref="T:System.IO.Stream" /> object to synchronize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-510">지정된 <see cref="T:System.IO.Stream" /> 개체에 대해 동기화되어 스레드로부터 안전한 래퍼를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-510">Creates a thread-safe (synchronized) wrapper around the specified <see cref="T:System.IO.Stream" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-511">스레드로부터 안전한 <see cref="T:System.IO.Stream" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-511">A thread-safe <see cref="T:System.IO.Stream" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-512">이 메서드는 지정 된 래핑하는 클래스를 반환 <xref:System.IO.Stream> 개체를 여러 스레드에서 액세스를 제한 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-512">This method returns a class that wraps the specified <xref:System.IO.Stream> object and restricts access to it from multiple threads.</span></span> <span data-ttu-id="b0483-513">에 대 한 모든 액세스는 <xref:System.IO.Stream> 개체는 스레드로부터 안전 하 게 보호 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-513">All access to the <xref:System.IO.Stream> object will be thread safe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0483-514">
            <paramref name="stream" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-514">
              <paramref name="stream" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ReadOnlySpan&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (buffer As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(ReadOnlySpan&lt;System::Byte&gt; buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="b0483-515">바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-515">An array of bytes.</span>
          </span>
          <span data-ttu-id="b0483-516">이 메서드는 <c>버퍼</c>의 <c>카운트</c> 바이트를 현재 스트림으로 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-516">This method copies <c>count</c> bytes from <c>buffer</c> to the current stream.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="b0483-517">현재 스트림으로 바이트를 복사하기 시작할 <c>buffer</c>의 바이트 오프셋(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-517">The zero-based byte offset in <c>buffer</c> at which to begin copying bytes to the current stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b0483-518">현재 스트림에 쓸 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-518">The number of bytes to be written to the current stream.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-519">파생 클래스를 재정의될 때 현재 스트림에 바이트의 시퀀스를 쓰고 쓰여진 바이트 수만큼 이 스트림 내에서 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-519">When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-520">사용 하 여는 <xref:System.IO.Stream.CanWrite%2A> 속성을 현재 인스턴스가 쓰기를 지원 하는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-520">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span> <span data-ttu-id="b0483-521">사용 된 <xref:System.IO.Stream.WriteAsync%2A> 메서드를 현재 스트림에 비동기적으로 씁니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-521">Use the <xref:System.IO.Stream.WriteAsync%2A> method to write asynchronously to the current stream.</span></span>  
  
 <span data-ttu-id="b0483-522">쓰기 작업을 완료 하는 경우 쓴 바이트 수 만큼 스트림 내 위치 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-522">If the write operation is successful, the position within the stream advances by the number of bytes written.</span></span> <span data-ttu-id="b0483-523">예외가 발생 하면 스트림 내의 위치 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-523">If an exception occurs, the position within the stream remains unchanged.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0483-524">
            <paramref name="offset" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-524">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0483-525">
            <paramref name="buffer" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-525">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b0483-526">
            <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-526">
              <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="b0483-527">지정된 파일을 찾을 수 없음과 같은 I/O 오류가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-527">An I/O error occured, such as the specified file cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-528">스트림이 쓰기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-528">The stream does not support writing.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-529">스트림이 닫힌 후에 <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />가 호출되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-529">
              <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> was called after the stream was closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b0483-530">현재 스트림에 바이트 시퀀스를 비동기적으로 쓰고 쓴 바이트 수만큼 이 스트림에서 현재 위치를 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-530">Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask WriteAsync (ReadOnlyMemory&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask WriteAsync(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteAsync (buffer As Byte(), offset As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="b0483-531">데이터를 쓸 버퍼입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-531">The buffer to write data from.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="b0483-532">스트림으로 바이트를 복사하기 시작할 <c>버퍼</c>의 바이트 오프셋(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-532">The zero-based byte offset in <c>buffer</c> from which to begin copying bytes to the stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b0483-533">쓸 최대 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-533">The maximum number of bytes to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-534">현재 스트림에 바이트 시퀀스를 비동기적으로 쓰고 쓴 바이트 수만큼 이 스트림에서 현재 위치를 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-534">Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-535">비동기 쓰기 작업을 나타내는 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-535">A task that represents the asynchronous write operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-536"><xref:System.IO.Stream.WriteAsync%2A> 메서드를 사용 하면 주 스레드를 차단 하지 않고 리소스 집중형 I/O 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-536">The <xref:System.IO.Stream.WriteAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="b0483-537">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 응용 프로그램 또는 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 응용 프로그램에서 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-537">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="b0483-538">비동기 메서드에와 함께 사용 되는 `async` 및 `await` Visual Basic 및 C# 키워드.</span><span class="sxs-lookup"><span data-stu-id="b0483-538">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="b0483-539">사용 하 여는 <xref:System.IO.Stream.CanWrite%2A> 속성을 현재 인스턴스가 쓰기를 지원 하는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-539">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0483-540">다음 예제에서는 파일에 비동기적으로 작성 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-540">The following example shows how to write asynchronously to a file.</span></span> <span data-ttu-id="b0483-541">이 예제에서는 사용 된 <xref:System.IO.FileStream> 클래스에서 파생 되는 <xref:System.IO.Stream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-541">The example uses the <xref:System.IO.FileStream> class, which derives from the <xref:System.IO.Stream> class.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#3](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example3.cs#3)]
 [!code-vb[Asynchronous_File_IO_async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0483-542">
            <paramref name="buffer" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-542">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b0483-543">
            <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-543">
              <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0483-544">
            <paramref name="offset" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-544">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-545">스트림이 쓰기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-545">The stream does not support writing.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-546">스트림이 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-546">The stream has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b0483-547">이전 쓰기 작업에서 현재 이 스트림을 사용하고 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-547">The stream is currently in use by a previous write operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="b0483-548">데이터를 쓸 버퍼입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-548">The buffer to write data from.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="b0483-549">스트림으로 바이트를 복사하기 시작할 <c>버퍼</c>의 바이트 오프셋(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-549">The zero-based byte offset in <c>buffer</c> from which to begin copying bytes to the stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="b0483-550">쓸 최대 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-550">The maximum number of bytes to write.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="b0483-551">취소 요청을 모니터링할 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-551">The token to monitor for cancellation requests.</span>
          </span>
          <span data-ttu-id="b0483-552">기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-552">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-553">바이트의 시퀀스를 현재 스트림에 비동기적으로 쓰고 쓰여진 바이트 수만큼 이 스트림 내의 현재 위치를 앞으로 이동한 후 취소 요청을 모니터링합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-553">Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b0483-554">비동기 쓰기 작업을 나타내는 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-554">A task that represents the asynchronous write operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-555"><xref:System.IO.Stream.WriteAsync%2A> 메서드를 사용 하면 주 스레드를 차단 하지 않고 리소스 집중형 I/O 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-555">The <xref:System.IO.Stream.WriteAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="b0483-556">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 응용 프로그램 또는 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 응용 프로그램에서 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-556">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="b0483-557">비동기 메서드에와 함께 사용 되는 `async` 및 `await` Visual Basic 및 C# 키워드.</span><span class="sxs-lookup"><span data-stu-id="b0483-557">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="b0483-558">사용 하 여는 <xref:System.IO.Stream.CanWrite%2A> 속성을 현재 인스턴스가 쓰기를 지원 하는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-558">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
 <span data-ttu-id="b0483-559">반환된 된 작업에 포함 된 완료 되기 전에 작업이 취소 되는 경우는 <xref:System.Threading.Tasks.TaskStatus.Canceled> 에 대 한 값은 <xref:System.Threading.Tasks.Task.Status%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-559">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span>  
  
 <span data-ttu-id="b0483-560">예를 들어 참조는 <xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-560">For an example, see the <xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="b0483-561">
            <paramref name="buffer" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-561">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b0483-562">
            <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-562">
              <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="b0483-563">
            <paramref name="offset" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-563">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-564">스트림이 쓰기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-564">The stream does not support writing.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-565">스트림이 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-565">The stream has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b0483-566">이전 쓰기 작업에서 현재 이 스트림을 사용하고 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-566">The stream is currently in use by a previous write operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public virtual void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteByte(System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="b0483-567">스트림에 쓸 바이트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-567">The byte to write to the stream.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b0483-568">스트림의 현재 위치에 바이트를 쓰고 스트림 내 위치를 1바이트씩 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-568">Writes a byte to the current position in the stream and advances the position within the stream by one byte.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0483-569">사용 하 여는 <xref:System.IO.Stream.CanWrite%2A> 속성을 현재 인스턴스가 쓰기를 지원 하는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="b0483-569">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="b0483-570">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-570">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="b0483-571">스트림이 쓰기를 지원하지 않거나 이미 닫힌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-571">The stream does not support writing, or the stream is already closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="b0483-572">스트림이 닫힌 후에 메서드가 호출되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-572">Methods were called after the stream was closed.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b0483-573">기본 구현에서 <see langword="Stream" /> 새 단일 바이트 배열을 만들고 호출 합니다 <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-573">The default implementation on <see langword="Stream" /> creates a new single-byte array and then calls <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />.</span>
            </span>
            <span data-ttu-id="b0483-574">공식적으로 올바른 이지만, 것은 비효율적입니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-574">While this is formally correct, it is inefficient.</span>
            </span>
            <span data-ttu-id="b0483-575">내부 버퍼를 사용 하 여 모든 스트림을이 메서드를 재정의 하 고 각 호출에서 추가 배열 할당 방지를 직접 버퍼에 기록 하는 훨씬 더 효율적으로 버전을 제공 해야 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-575">Any stream with an internal buffer should override this method and provide a much more efficient version that writes to the buffer directly, avoiding the extra array allocation on every call.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public virtual int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b0483-576">스트림이 시간 초과 전 쓰기를 시도할 기간을 결정하는 값(밀리초)을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-576">Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b0483-577">스트림 쓰기 시도가 만료되기 전까지 기다릴 시간을 결정하는 값(밀리초 단위)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-577">A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b0483-578">
            <see cref="P:System.IO.Stream.WriteTimeout" /> 메서드는 항상 <see cref="T:System.InvalidOperationException" />을 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b0483-578">The <see cref="P:System.IO.Stream.WriteTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b0483-579">
              <see cref="P:System.IO.Stream.WriteTimeout" /> 스트림에 대 한 적절 한 동작을 제공 하도록 속성을 재정의 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-579">The <see cref="P:System.IO.Stream.WriteTimeout" /> property should be overridden to provide the appropriate behavior for the stream.</span>
            </span>
            <span data-ttu-id="b0483-580">이 속성을 발생 시켜야 스트림이 시간 초과 지원 하지 않는 경우는 <see cref="T:System.InvalidOperationException" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b0483-580">If the stream does not support timing out, this property should raise an <see cref="T:System.InvalidOperationException" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>