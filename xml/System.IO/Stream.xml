<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Stream.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86cc2a48ad6254044761826100b2be9db53d138b868.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2a48ad6254044761826100b2be9db53d138b868</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Provides a generic view of a sequence of bytes.</source>
          <target state="translated">바이트 시퀀스에 대한 일반 뷰를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>This is an abstract class.</source>
          <target state="translated">이 클래스는 추상 클래스입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> is the abstract base class of all streams.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> 모든 스트림의 추상 기본 클래스가입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket.</source>
          <target state="translated">스트림은 파일, 입력/출력 장치, 프로세스 간 통신 파이프 또는 TCP/IP 소켓과 같은 바이트 시퀀스를 추상적으로 나타낸 것입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> 클래스와 해당 파생된 클래스 이러한 여러 형식의 입력 및 출력에 대 한 일반 뷰를 제공 하 고 프로그래머는 운영 체제 및 기본 장치의 세부 정보에서 격리 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Streams involve three fundamental operations:</source>
          <target state="translated">스트림에는 다음의 세 가지 기본 작업이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can read from streams.</source>
          <target state="translated">스트림에서 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Reading is the transfer of data from a stream into a data structure, such as an array of bytes.</source>
          <target state="translated">읽기는 스트림에서 데이터를 바이트 배열과 같은 데이터 구조로 전송입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can write to streams.</source>
          <target state="translated">스트림에 쓸 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Writing is the transfer of data from a data structure into a stream.</source>
          <target state="translated">쓰기는 스트림으로 데이터 구조에서 데이터 전송을입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Streams can support seeking.</source>
          <target state="translated">스트림이 검색을 지원할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Seeking refers to querying and modifying the current position within a stream.</source>
          <target state="translated">검색 쿼리 및 수정 된 스트림 내의 현재 위치를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Seek capability depends on the kind of backing store a stream has.</source>
          <target state="translated">검색 기능을 스트림에서 백업 저장소의 종류에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.</source>
          <target state="translated">예를 들어 네트워크 스트림을 현재 위치를 나타내는 통합 개념이 없으므로 고 따라서 일반적으로 지원 하지 않는 검색 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Some of the more commonly used streams that inherit from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> are <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">일반적으로 사용 되는 일부 수록에서 상속 하는 스트림의 <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> 는 <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Depending on the underlying data source or repository, streams might support only some of these capabilities.</source>
          <target state="translated">내부 데이터 소스 또는 리포지토리에 따라 스트림에서 이러한 기능 중 일부만 지원할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can query a stream for its capabilities by using the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> properties of the <ph id="ph4">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">해당 기능에 대 한 스트림을 사용 하 여 쿼리할 수 있습니다는 <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> 의 속성은 <ph id="ph4">&lt;xref:System.IO.Stream&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> methods read and write data in a variety of formats.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> 메서드 데이터 읽기 및 쓰기 다양 한 형식입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For streams that support seeking, use the <ph id="ph1">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph> methods and the <ph id="ph3">&lt;xref:System.IO.Stream.Position%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.Stream.Length%2A&gt;</ph> properties to query and modify the current position and length of a stream.</source>
          <target state="translated">검색을 지 원하는 스트리밍을 사용 하 여는 <ph id="ph1">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.IO.Stream.Position%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.IO.Stream.Length%2A&gt;</ph> 속성을 쿼리 및 현재 위치와 스트림의 길이 수정 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">이 형식이 구현 하는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">직접 형식의 dispose를 호출 해당 <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> 에서 메서드는 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> 블록입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 <ph id="ph1">`using`</ph> (C#에서) 또는 <ph id="ph2">`Using`</ph> (Visual Basic)에서는 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스 항목입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Disposing a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object flushes any buffered data, and essentially calls the <ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method for you.</source>
          <target state="translated">삭제 한 <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> 개체 버퍼링 된 모든 데이터를 플러시하고 호출 하는 <ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> 메서드를 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> 또한 파일 핸들, 네트워크 연결 또는 내부 버퍼링에 사용 되는 메모리와 같은 운영 체제 리소스를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> 클래스의 버퍼링 된 스트림에 향상 읽기 및 쓰기 성능을 위해 다른 스트림에 래핑하는 기능을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class includes async methods to simplify asynchronous operations.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> 클래스는 비동기 작업을 단순화 하는 비동기 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>An async method contains <ph id="ph1">`Async`</ph> in its name, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>.</source>
          <target state="translated">비동기 메서드를 포함 <ph id="ph1">`Async`</ph> 이름에 같은 <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>These methods enable you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated">이러한 메서드를 사용 하 여 주 스레드를 차단 하지 않고 리소스 집중형 I/O 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> 응용 프로그램 또는 <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> 응용 프로그램에서 중요합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">비동기 메서드에와 함께 사용 되는 <ph id="ph1">`async`</ph> 및 <ph id="ph2">`await`</ph> Visual Basic 및 C# 키워드.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When used in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app, <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> includes two extension methods: <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A&gt;</ph>.</source>
          <target state="translated">사용 될 때는 <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> 앱 <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> 두 확장 메서드가 포함 되어: <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>These methods convert a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object to a stream in the <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>.</source>
          <target state="translated">이러한 메서드는 변환 된 <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> 에서 스트림으로 개체는 <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You can also convert a stream in the <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> to a <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object by using the <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A&gt;</ph> methods.</source>
          <target state="translated">스트림에 변환할 수도 있습니다는 <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> 에 <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> 사용 하 여 개체는 <ph id="ph3">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Convert Between .NET Framework Streams and Windows Runtime Streams<ept id="p1">](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</ept></source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>하는 방법: 변환 간의.NET Framework 스트림과 Windows 런타임 스트림<ept id="p1">](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Some stream implementations perform local buffering of the underlying data to improve performance.</source>
          <target state="translated">일부 스트림 구현 성능 향상을 위해 기본 데이터의 로컬 버퍼링을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For such streams, you can use the <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.</source>
          <target state="translated">이러한 스트림에서 사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> 메서드 내부 버퍼를 모두 지우고 모든 데이터에 기본 데이터 소스 또는 리포지토리에 기록 되었는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>If you need a stream with no backing store (also known as a bit bucket), use the <ph id="ph1">&lt;xref:System.IO.Stream.Null&gt;</ph> field to retrieve an instance of a stream that is designed for this purpose.</source>
          <target state="translated">(비트 버킷) 없는 백업 저장소 스트림이 필요한 경우 사용 된 <ph id="ph1">&lt;xref:System.IO.Stream.Null&gt;</ph> 이 목적을 위해 설계 된 스트림 인스턴스를 검색 하는 필드입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The following example demonstrates how to use two <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> objects to asynchronously copy the files from one directory to another directory.</source>
          <target state="translated">다음 예제에서는 두 개를 사용 하는 방법을 <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> 개체를 비동기적으로 다른 디렉터리에 디렉터리에서 파일을 복사 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> 클래스는 <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> 클래스에서 파생됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> event handler for the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> control is marked with the <ph id="ph3">`async`</ph> modifier because it calls an asynchronous method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> 컨트롤에 대한 <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> 이벤트 처리기는 비동기 메서드를 호출하므로 <ph id="ph3">`async`</ph> 한정자로 표시됩니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When you implement a derived class of <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, you must provide implementations for the <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> methods.</source>
          <target state="translated">파생된 클래스를 구현 하는 경우 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>에 대 한 구현을 제공 해야 합니다는 <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> 및 <ph id="ph3">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The asynchronous methods <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, and <ph id="ph3">&lt;see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" /&gt;</ph> use the synchronous methods <ph id="ph4">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph5">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> in their implementations.</source>
          <target state="translated">비동기 메서드는 <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>, 및 <ph id="ph3">&lt;see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" /&gt;</ph> 동기 메서드를 사용 하 여 <ph id="ph4">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> 및 <ph id="ph5">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> 구현에서 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Therefore, your implementations of <ph id="ph1">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> will work correctly with the asynchronous methods.</source>
          <target state="translated">따라서 사용자 구현 <ph id="ph1">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> 비동기 메서드는 제대로 작동 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>The default implementations of <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadByte" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteByte(System.Byte)" /&gt;</ph> create a new single-element byte array, and then call your implementations of <ph id="ph3">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> and <ph id="ph4">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">기본 구현과 <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadByte" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="M:System.IO.Stream.WriteByte(System.Byte)" /&gt;</ph> 새 단일 요소 바이트 배열을 만들고 다음의 구현을 호출 <ph id="ph3">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> 및 <ph id="ph4">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>When you derive from <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, we recommend that you override these methods to access your internal buffer, if you have one, for substantially better performance.</source>
          <target state="translated">파생 시키는 경우 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, 있는 경우을 성능을 향상 시키려면에 대 한 내부 버퍼에 액세스 하려면 이러한 메서드를 재정의 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>You must also provide implementations of <ph id="ph1">&lt;see cref="P:System.IO.Stream.CanRead" /&gt;</ph>, <ph id="ph2">&lt;see cref="P:System.IO.Stream.CanSeek" /&gt;</ph>, <ph id="ph3">&lt;see cref="P:System.IO.Stream.CanWrite" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.IO.Stream.Length" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.IO.Stream.Position" /&gt;</ph>, <ph id="ph7">&lt;see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" /&gt;</ph>, and <ph id="ph8">&lt;see cref="M:System.IO.Stream.SetLength(System.Int64)" /&gt;</ph>.</source>
          <target state="translated">구현도 제공 해야 <ph id="ph1">&lt;see cref="P:System.IO.Stream.CanRead" /&gt;</ph>, <ph id="ph2">&lt;see cref="P:System.IO.Stream.CanSeek" /&gt;</ph>, <ph id="ph3">&lt;see cref="P:System.IO.Stream.CanWrite" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph>, <ph id="ph5">&lt;see cref="P:System.IO.Stream.Length" /&gt;</ph>, <ph id="ph6">&lt;see cref="P:System.IO.Stream.Position" /&gt;</ph>, <ph id="ph7">&lt;see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" /&gt;</ph>, 및 <ph id="ph8">&lt;see cref="M:System.IO.Stream.SetLength(System.Int64)" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>Do not override the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> method, instead, put all the <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> cleanup logic in the <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">재정의 하지 않는 <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> 메서드를 대신 모든 배치는 <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 정리 논리는 <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.Stream">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>Dispose 메서드를 구현<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.#ctor">
          <source><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> is the abstract base class of all streams.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> 모든 스트림의 추상 기본 클래스가입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.#ctor">
          <source>Some of the more commonly used streams that inherit from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> are <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">일반적으로 사용 되는 일부 수록에서 상속 하는 스트림의 <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> 는 <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.IO.MemoryStream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer to read the data into.</source>
          <target state="translated">데이터를 읽을 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data read from the stream.</source>
          <target state="translated">스트림의 데이터를 쓰기 시작할 <bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept>의 바이트 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">읽을 최대 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the read is complete.</source>
          <target state="translated">읽기가 완료되면 호출되는 선택적 비동기 콜백입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous read request from other requests.</source>
          <target state="translated">다른 요청에서 특정 비동기 읽기 요청을 구별하는 사용자 제공 개체입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous read operation.</source>
          <target state="translated">비동기 읽기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">대신 <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>를 사용하세요.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous read, which could still be pending.</source>
          <target state="translated">보류 중인 비동기 읽기를 나타내는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">.NET Framework 4 및 이전 버전에서 비동기 I/O 작업을 구현하려면 <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> 와 같은 메서드를 사용해야 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">그러나 이러한 메서드는에서 계속 사용할 수는 <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> 레거시 코드를 지원 하기 위해 새로운 비동기 메서드 같은 <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, 도움말 비동기 I/O 작업을 보다 쉽게 구현 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The default implementation of <ph id="ph1">`BeginRead`</ph> on a stream calls the <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> method synchronously, which means that <ph id="ph3">`Read`</ph> might block on some streams.</source>
          <target state="translated">기본 구현은 <ph id="ph1">`BeginRead`</ph> 스트림에서 호출은 <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> 메서드를 동기적으로 즉 <ph id="ph3">`Read`</ph> 일부 스트림을 차단 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>However, instances of classes such as <ph id="ph1">`FileStream`</ph> and <ph id="ph2">`NetworkStream`</ph> fully support asynchronous operations if the instances have been opened asynchronously.</source>
          <target state="translated">그러나 인스턴스를 같은 클래스의 <ph id="ph1">`FileStream`</ph> 및 <ph id="ph2">`NetworkStream`</ph> 비동기적으로 열려 있을 경우 비동기 작업을 완벽 하 게 지원 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Therefore, calls to <ph id="ph1">`BeginRead`</ph> will not block on those streams.</source>
          <target state="translated">따라서에 대 한 호출이 <ph id="ph1">`BeginRead`</ph> 해당 스트림에서 차단 하지 것입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can override <ph id="ph1">`BeginRead`</ph> (by using async delegates, for example) to provide asynchronous behavior.</source>
          <target state="translated">재정의할 수 있습니다 <ph id="ph1">`BeginRead`</ph> (예를 들어 비동기 대리자를 사용 하 여) 하 여 비동기 동작을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the <ph id="ph1">`IAsyncResult`</ph> return value to the <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> method of the stream to determine how many bytes were read and to release operating system resources used for reading.</source>
          <target state="translated">전달 된 <ph id="ph1">`IAsyncResult`</ph> 반환 값을는 <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> 읽은 바이트 수를 확인 하 고 읽는 데 사용 된 운영 체제 리소스를 해제 하는 스트림의 메서드가 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> 호출할 때마다 한 번씩 호출 해야 <ph id="ph2">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can do this either by using the same code that called <ph id="ph1">`BeginRead`</ph> or in a callback passed to <ph id="ph2">`BeginRead`</ph>.</source>
          <target state="translated">이렇게 하려면 호출 하는 동일한 코드를 사용 하 여 <ph id="ph1">`BeginRead`</ph> 에 전달 된 콜백에서 <ph id="ph2">`BeginRead`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current position in the stream is updated when the asynchronous read or write is issued, not when the I/O operation completes.</source>
          <target state="translated">비동기 읽기 또는 쓰기 실행 되는 I/O 작업이 완료 될 때가 아니라 스트림 내의 현재 위치 업데이트 됩니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Multiple simultaneous asynchronous requests render the request completion order uncertain.</source>
          <target state="translated">여러 개의 비동기 요청 렌더링 요청 완료 순서 불확실 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> 속성을 현재 인스턴스에 읽기를 지원 하는지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id="ph1">`BeginRead`</ph>.</source>
          <target state="translated">예외가 즉시 throw 되는 스트림이 닫혀 있거나를 잘못 된 인수를 전달 하는 경우 <ph id="ph1">`BeginRead`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling <ph id="ph1">`EndRead`</ph>.</source>
          <target state="translated">I/O 요청 중의 디스크 오류와 같은 비동기 읽기 요청 하는 동안 발생 하는 오류는 스레드 풀 스레드에서 발생 하 고 호출 시 예외를 throw <ph id="ph1">`EndRead`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Attempted an asynchronous read past the end of the stream, or a disk error occurs.</source>
          <target state="translated">스트림의 끝을 넘어 비동기 읽기를 시도했거나 디스크 오류가 발생한 경우</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">하나 이상의 인수가 잘못된 경우</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">스트림이 닫힌 후에 메서드가 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> implementation does not support the read operation.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> 구현이 읽기 작업을 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer to write data from.</source>
          <target state="translated">데이터를 쓸 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin writing.</source>
          <target state="translated">쓰기를 시작할 <bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept>의 바이트 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">쓸 최대 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the write is complete.</source>
          <target state="translated">쓰기가 완료되면 호출되는 선택적 비동기 콜백입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous write request from other requests.</source>
          <target state="translated">다른 요청에서 특정 비동기 쓰기 요청을 구별하는 사용자 제공 개체입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous write operation.</source>
          <target state="translated">비동기 쓰기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">대신 <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>를 사용하세요.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see langword="IAsyncResult" /&gt;</ph> that represents the asynchronous write, which could still be pending.</source>
          <target state="translated">보류 중인 비동기 쓰기를 나타내는 <ph id="ph1">&lt;see langword="IAsyncResult" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">.NET Framework 4 및 이전 버전에서 비동기 I/O 작업을 구현하려면 <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph>와 같은 메서드를 사용해야 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">그러나 이러한 메서드는에서 계속 사용할 수는 <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> 레거시 코드를 지원 하기 위해 새로운 비동기 메서드 같은 <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, 도움말 비동기 I/O 작업을 보다 쉽게 구현 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The default implementation of <ph id="ph1">`BeginWrite`</ph> on a stream calls the <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> method synchronously, which means that <ph id="ph3">`Write`</ph> might block on some streams.</source>
          <target state="translated">기본 구현은 <ph id="ph1">`BeginWrite`</ph> 스트림에서 호출은 <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph> 메서드를 동기적으로 즉 <ph id="ph3">`Write`</ph> 일부 스트림을 차단 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>However, instances of classes such as <ph id="ph1">`FileStream`</ph> and <ph id="ph2">`NetworkStream`</ph> fully support asynchronous operations if the instances have been opened asynchronously.</source>
          <target state="translated">그러나 인스턴스를 같은 클래스의 <ph id="ph1">`FileStream`</ph> 및 <ph id="ph2">`NetworkStream`</ph> 비동기적으로 열려 있을 경우 비동기 작업을 완벽 하 게 지원 합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Therefore, calls to <ph id="ph1">`BeginWrite`</ph> will not block on those streams.</source>
          <target state="translated">따라서에 대 한 호출이 <ph id="ph1">`BeginWrite`</ph> 해당 스트림에서 차단 하지 것입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can override <ph id="ph1">`BeginWrite`</ph> (by using async delegates, for example) to provide asynchronous behavior.</source>
          <target state="translated">재정의할 수 있습니다 <ph id="ph1">`BeginWrite`</ph> (예를 들어 비동기 대리자를 사용 하 여) 하 여 비동기 동작을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the <ph id="ph1">`IAsyncResult`</ph> returned by the current method to <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to ensure that the write completes and frees resources appropriately.</source>
          <target state="translated">전달 된 <ph id="ph1">`IAsyncResult`</ph> 를 현재 메서드에 의해 반환 된 <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> 쓰기 완료 하 고 적절 하 게 리소스를 해제 하 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> must be called once for every call to <ph id="ph2">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> 호출할 때마다 한 번씩 호출 해야 <ph id="ph2">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You can do this either by using the same code that called <ph id="ph1">`BeginWrite`</ph> or in a callback passed to <ph id="ph2">`BeginWrite`</ph>.</source>
          <target state="translated">이렇게 하려면 호출 하는 동일한 코드를 사용 하 여 <ph id="ph1">`BeginWrite`</ph> 에 전달 된 콜백에서 <ph id="ph2">`BeginWrite`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If an error occurs during an asynchronous write, an exception will not be thrown until <ph id="ph1">`EndWrite`</ph> is called with the <ph id="ph2">`IAsyncResult`</ph> returned by this method.</source>
          <target state="translated">비동기 쓰기 중에 오류가 발생 하기 전에 예외가 throw 되지 됩니다 <ph id="ph1">`EndWrite`</ph> 로 호출 되는 <ph id="ph2">`IAsyncResult`</ph> 이 메서드에서 반환 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is writable, writing at the end of the stream expands the stream.</source>
          <target state="translated">한 스트림이 쓰기 가능한 경우 스트림의 끝에 쓰기 스트림을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes.</source>
          <target state="translated">I/O 작업이 완료 될 때가 아니라 비동기 읽기 또는 쓰기 파일 그룹를 실행 하면 스트림의 현재 위치 업데이트 됩니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Multiple simultaneous asynchronous requests render the request completion order uncertain.</source>
          <target state="translated">여러 개의 비동기 요청 렌더링 요청 완료 순서 불확실 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> 속성을 현재 인스턴스가 쓰기를 지원 하는지 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id="ph1">`BeginWrite`</ph>.</source>
          <target state="translated">예외가 즉시 throw 되는 스트림이 닫혀 있거나를 잘못 된 인수를 전달 하는 경우 <ph id="ph1">`BeginWrite`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling <ph id="ph1">`EndWrite`</ph>.</source>
          <target state="translated">I/O 요청 중의 디스크 오류와 같은 비동기 쓰기 요청을 하는 동안 발생 하는 오류는 스레드 풀 스레드에서 발생 하 고 호출 시 예외를 throw <ph id="ph1">`EndWrite`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Attempted an asynchronous write past the end of the stream, or a disk error occurs.</source>
          <target state="translated">스트림의 끝을 넘어 비동기 쓰기를 시도했거나 디스크 오류가 발생한 경우</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>One or more of the arguments is invalid.</source>
          <target state="translated">하나 이상의 인수가 잘못된 경우</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">스트림이 닫힌 후에 메서드가 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> implementation does not support the write operation.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> 구현이 쓰기 작업을 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanRead">
          <source>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</source>
          <target state="translated">파생 클래스에서 재정의되면 현재 스트림이 읽기를 지원하는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports reading; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">스트림이 읽기를 지원하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 지원하지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support reading, calls to the <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> methods throw a <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">클래스에서 파생 하는 경우 <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> 읽기를 지원 하지 않습니다에 대 한 호출이 <ph id="ph2">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> 메서드에서 throw 된 <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">이 속성은 반환 된 스트림이 닫혀 있는지 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanRead">
          <source>The following is an example of using the <ph id="ph1">`CanRead`</ph> property.</source>
          <target state="translated">다음은 사용 하는 예제는 <ph id="ph1">`CanRead`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanSeek">
          <source>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</source>
          <target state="translated">파생 클래스에서 재정의되면 현재 스트림이 검색을 지원하는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanSeek">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports seeking; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">스트림이 검색을 지원하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 지원하지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanSeek">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support seeking, calls to <ph id="ph2">&lt;xref:System.IO.Stream.Length%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.Position%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> throw a <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">클래스에서 파생 하는 경우 <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> 찾기를 지원 하지 않습니다에 대 한 호출이 <ph id="ph2">&lt;xref:System.IO.Stream.Length%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.Position%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.IO.Stream.Seek%2A&gt;</ph> throw 한 <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanSeek">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">이 속성은 반환 된 스트림이 닫혀 있는지 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanTimeout">
          <source>Gets a value that determines whether the current stream can time out.</source>
          <target state="translated">현재 스트림이 시간 초과될 수 있는지를 결정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>A value that determines whether the current stream can time out.</source>
          <target state="translated">현재 스트림이 시간 초과될 수 있는지를 결정하는 값입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CanTimeout%2A&gt;</ph> property always returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CanTimeout%2A&gt;</ph> 속성은 항상 <ph id="ph2">`false`</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>Some stream implementations require different behavior, such as <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, which times out if network connectivity is interrupted or lost.</source>
          <target state="translated">와 같은 일부 스트림 구현의 다른 동작이 필요 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, 시간 제한이 초과 되는 경우 네트워크 연결이 중단 되거나 손실 됩니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanTimeout">
          <source>If you are implementing a stream that must be able to time out, this property should be overridden to return <ph id="ph1">`true`</ph>.</source>
          <target state="translated">이 속성을 반환 하도록 재정의 합니다 시간 초과 수 있어야 하는 스트림을 구현 하는 경우 <ph id="ph1">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.CanWrite">
          <source>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</source>
          <target state="translated">파생 클래스에서 재정의되면 현재 스트림이 쓰기를 지원하는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports writing; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">스트림이 쓰기를 지원하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 지원하지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support writing, a call to <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph> throws a <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">클래스에서 파생 하는 경우 <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> 쓰기 호출을 지원 하지 않는 <ph id="ph2">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>, 또는 <ph id="ph4">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph> throw 한 <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">이 속성은 반환 된 스트림이 닫혀 있는지 <ph id="ph1">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.CanWrite">
          <source>The following is an example of using the <ph id="ph1">`CanWrite`</ph> property.</source>
          <target state="translated">다음은 사용 하는 예제는 <ph id="ph1">`CanWrite`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Close">
          <source>Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.</source>
          <target state="translated">현재 스트림을 닫고 현재 스트림과 관련된 소켓과 파일 핸들 등의 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Close">
          <source>Instead of calling this method, ensure that the stream is properly disposed.</source>
          <target state="translated">이 메서드를 호출하는 대신 스트림이 올바르게 삭제되었는지 확인합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>This method calls <ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph>, specifying <ph id="ph2">`true`</ph> to release all resources.</source>
          <target state="translated">이 메서드를 호출 <ph id="ph1">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph>로 지정 하 여 <ph id="ph2">`true`</ph> 모든 리소스를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>You do not have to specifically call the <ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method.</source>
          <target state="translated">명확 하 게 호출할 필요가 없습니다는 <ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Instead, ensure that every <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object is properly disposed.</source>
          <target state="translated">대신, 되도록 모든 <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> 개체가 제대로 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>You can declare <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> objects within a <ph id="ph2">`using`</ph> block (or <ph id="ph3">`Using`</ph> block in Visual Basic) to ensure that the stream and all of its resources are disposed, or you can explicitly call the <ph id="ph4">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">선언할 수 있습니다 <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> 내에서 개체는 <ph id="ph2">`using`</ph> 블록 (또는 <ph id="ph3">`Using`</ph> Visual Basic의 차단) 스트림과 모든 리소스가 삭제 되도록 하거나 명시적으로 호출할 수는 <ph id="ph4">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call an implementation of <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">`Close`</ph>.</source>
          <target state="translated">구현에 명시적으로 호출 하지 않으면 스트림을 내부 인코더가 플러시되지 것입니다 <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> 또는 <ph id="ph2">`Close`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Setting <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> to <ph id="ph2">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.IO.StreamWriter.AutoFlush%2A&gt;</ph> 를 <ph id="ph2">`true`</ph> 스트림 버퍼에서 데이터를 플러시할 수는 있지만 인코더 상태 플러시되지 것입니다 있다는 것을 의미 합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</source>
          <target state="translated">따라서 올바르게 문자의 다음 블록을 인코딩할 수 있도록 (부분 문자)의 상태를 유지 하기 위해 인코더 수 있습니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.</source>
          <target state="translated">이 시나리오는 u t f 8와 UTF7 인코더는 인접 한 문자를 받은 후에 특정 문자를 인코딩할 수 있는 위치에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>Attempts to manipulate the stream after the stream has been closed might throw an <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>.</source>
          <target state="translated">스트림이 닫힌 후 스트림을 조작 하려는 시도 throw 할 수는 <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>In derived classes, do not override the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> method, instead, put all of the <ph id="ph2">&lt;see langword="Stream" /&gt;</ph> cleanup logic in the <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">파생된 클래스에서 재정의 하지 않는 <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> 메서드를 대신 모든 배치는 <ph id="ph2">&lt;see langword="Stream" /&gt;</ph> 정리 논리는 <ph id="ph3">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Close">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>Dispose 메서드를 구현<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">현재 스트림에서 바이트를 읽어서 다른 스트림에 해당 바이트를 씁니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">현재 스트림의 내용을 복사할 스트림입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>Reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">현재 스트림에서 바이트를 읽어서 다른 스트림에 해당 바이트를 씁니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</source>
          <target state="translated">복사 현재 스트림의 현재 위치에서 시작 되 고 복사 작업이 완료 된 후 대상 스트림의 위치를 설정 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>The following example copies the contents of a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> to a <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">콘텐츠를 복사 하는 다음 예제는 <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> 에 <ph id="ph2">&lt;xref:System.IO.MemoryStream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>The current stream does not support reading.</source>
          <target state="translated">현재 스트림이 읽기를 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> does not support writing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph>이 쓰기를 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>Either the current stream or <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> were closed before the <ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> method was called.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> 메서드가 호출되기 전에 현재 스트림 또는 <ph id="ph1">&lt;paramref name="destination" /&gt;</ph>이 닫힌 경우</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">현재 스트림의 내용을 복사할 스트림입니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The size of the buffer.</source>
          <target state="translated">버퍼의 크기입니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>This value must be greater than zero.</source>
          <target state="translated">이 값은 0보다 커야 합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The default size is 81920.</source>
          <target state="translated">기본 크기는 81920입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</source>
          <target state="translated">현재 스트림에서 바이트를 읽어서 지정된 버퍼 크기로 다른 스트림에 씁니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</source>
          <target state="translated">복사 현재 스트림의 현재 위치에서 시작 되 고 복사 작업이 완료 된 후 대상 스트림의 위치를 설정 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph>가 음수이거나 0인 경우</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>The current stream does not support reading.</source>
          <target state="translated">현재 스트림이 읽기를 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> does not support writing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph>이 쓰기를 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>Either the current stream or <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> were closed before the <ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> method was called.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /&gt;</ph> 메서드가 호출되기 전에 현재 스트림 또는 <ph id="ph1">&lt;paramref name="destination" /&gt;</ph>이 닫힌 경우</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
          <source>An I/O error occurred.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">현재 스트림에서 모든 바이트를 비동기적으로 읽어 다른 스트림에 씁니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">현재 스트림의 내용을 복사할 스트림입니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream.</source>
          <target state="translated">현재 스트림에서 모든 바이트를 비동기적으로 읽어 다른 스트림에 씁니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>A task that represents the asynchronous copy operation.</source>
          <target state="translated">비동기 복사 작업을 나타내는 작업입니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> 메서드를 사용 하면 주 스레드를 차단 하지 않고 리소스 집중형 I/O 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> 응용 프로그램 또는 <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> 응용 프로그램에서 중요합니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">비동기 메서드에와 함께 사용 되는 <ph id="ph1">`async`</ph> 및 <ph id="ph2">`await`</ph> Visual Basic 및 C# 키워드.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Copying begins at the current position in the current stream.</source>
          <target state="translated">현재 스트림의 현재 위치에서 복사 작업이 시작 됩니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The following example demonstrates how to use two <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> objects to asynchronously copy the files from one directory to another.</source>
          <target state="translated">다음 예제에서는 두 개를 사용 하는 방법을 <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> 개체를 비동기적으로 다른 디렉터리에서 파일을 복사 합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> 클래스는 <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> 클래스에서 파생됩니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> event handler for the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> control is marked with the <ph id="ph3">`async`</ph> modifier because it calls an asynchronous method</source>
          <target state="translated">다음에 유의 <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.Click&gt;</ph> 에 대 한 이벤트 처리기는 <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> 컨트롤으로 표시 되는 <ph id="ph3">`async`</ph> 한정자는 비동기 메서드를 호출 하기 때문에</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>Either the current stream or the destination stream is disposed.</source>
          <target state="translated">현재 스트림이나 대상 스트림이 삭제됩니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
          <source>The current stream does not support reading, or the destination stream does not support writing.</source>
          <target state="translated">현재 스트림이 읽기를 지원하지 않거나 대상 스트림이 쓰기를 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">현재 스트림의 내용을 복사할 스트림입니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The size, in bytes, of the buffer.</source>
          <target state="translated">버퍼의 크기(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>This value must be greater than zero.</source>
          <target state="translated">이 값은 0보다 커야 합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The default size is 81920.</source>
          <target state="translated">기본 크기는 81920입니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</source>
          <target state="translated">현재 스트림에서 바이트를 비동기적으로 읽어 지정된 버퍼 크기로 다른 스트림에 씁니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>A task that represents the asynchronous copy operation.</source>
          <target state="translated">비동기 복사 작업을 나타내는 작업입니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> 메서드를 사용 하면 주 스레드를 차단 하지 않고 리소스 집중형 I/O 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> 응용 프로그램 또는 <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> 응용 프로그램에서 중요합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">비동기 메서드에와 함께 사용 되는 <ph id="ph1">`async`</ph> 및 <ph id="ph2">`await`</ph> Visual Basic 및 C# 키워드.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>Copying begins at the current position in the current stream.</source>
          <target state="translated">현재 스트림의 현재 위치에서 복사 작업이 시작 됩니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>For an example of copying between two streams, see the <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> overload.</source>
          <target state="translated">두 스트림을 간에 복사의 예제를 참조 하십시오.는 <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph>가 음수이거나 0인 경우</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>Either the current stream or the destination stream is disposed.</source>
          <target state="translated">현재 스트림이나 대상 스트림이 삭제됩니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
          <source>The current stream does not support reading, or the destination stream does not support writing.</source>
          <target state="translated">현재 스트림이 읽기를 지원하지 않거나 대상 스트림이 쓰기를 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The stream to which the contents of the current stream will be copied.</source>
          <target state="translated">현재 스트림의 내용을 복사할 스트림입니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The size, in bytes, of the buffer.</source>
          <target state="translated">버퍼의 크기(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>This value must be greater than zero.</source>
          <target state="translated">이 값은 0보다 커야 합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The default size is 81920.</source>
          <target state="translated">기본 크기는 81920입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">취소 요청을 모니터링할 토큰입니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</source>
          <target state="translated">현재 스트림에서 바이트를 비동기적으로 읽어 지정된 버퍼 크기 및 취소 토큰을 사용하여 다른 스트림에 씁니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous copy operation.</source>
          <target state="translated">비동기 복사 작업을 나타내는 작업입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> 메서드를 사용 하면 주 스레드를 차단 하지 않고 리소스 집중형 I/O 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> 응용 프로그램 또는 <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> 응용 프로그램에서 중요합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">비동기 메서드에와 함께 사용 되는 <ph id="ph1">`async`</ph> 및 <ph id="ph2">`await`</ph> Visual Basic 및 C# 키워드.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">반환된 된 작업에 포함 된 완료 되기 전에 작업이 취소 되는 경우는 <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> 에 대 한 값은 <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Copying begins at the current position in the current stream.</source>
          <target state="translated">현재 스트림의 현재 위치에서 복사 작업이 시작 됩니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>For an example of copying between two streams, see the <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> overload.</source>
          <target state="translated">두 스트림을 간에 복사의 예제를 참조 하십시오.는 <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29&gt;</ph> 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph> is negative or zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffersize" /&gt;</ph>가 음수이거나 0인 경우</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>Either the current stream or the destination stream is disposed.</source>
          <target state="translated">현재 스트림이나 대상 스트림이 삭제됩니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
          <source>The current stream does not support reading, or the destination stream does not support writing.</source>
          <target state="translated">현재 스트림이 읽기를 지원하지 않거나 대상 스트림이 쓰기를 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>Allocates a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> 개체를 할당합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>A reference to the allocated <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph>.</source>
          <target state="translated">할당된 <ph id="ph1">&lt;see langword="WaitHandle" /&gt;</ph>에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>When called for the first time, the current method creates a <ph id="ph1">`WaitHandle`</ph> object and returns it.</source>
          <target state="translated">처음으로 호출 하는 경우 현재 메서드가 만듭니다는 <ph id="ph1">`WaitHandle`</ph> 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>On subsequent calls, <ph id="ph1">`CreateWaitHandle`</ph> returns a reference to a new wait handle.</source>
          <target state="translated">후속 호출에서 <ph id="ph1">`CreateWaitHandle`</ph> 새 대기 핸들에 대 한 참조를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.CreateWaitHandle">
          <source>Use this method if you implement the asynchronous methods and require a way of blocking in <ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> until the asynchronous operation is complete.</source>
          <target state="translated">비동기 메서드를 구현 하 고 차단 해야 하는 경우이 메서드를 사용 하 여 <ph id="ph1">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> 비동기 작업이 완료 될 때까지 합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated">해당 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 개체에서 사용하는 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>에서 사용하는 모든 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>This method disposes the stream, by writing any changes to the backing store and closing the stream to release resources.</source>
          <target state="translated">이 메서드는 백업 저장소에 변경 내용을 기록 하 고 리소스를 해제 하기 위한 스트림을 닫아, 스트림을 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Calling <ph id="ph1">`Dispose`</ph> allows the resources used by the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> to be reallocated for other purposes.</source>
          <target state="translated">호출 <ph id="ph1">`Dispose`</ph> 에서 사용 하는 리소스는 <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> 다른 용도에 다시 할당 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>For more information about <ph id="ph1">`Dispose`</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`Dispose`</ph>, 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Place all cleanup logic for your stream object in <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">스트림 개체에 대 한 모든 정리 논리 <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Do not override <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>.</source>
          <target state="translated">재정의 하지 않는 <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>Note that because of backward compatibility requirements, this method's implementation differs from the recommended guidance for the Dispose pattern.</source>
          <target state="translated">이전 버전과 호환성 요구 사항 때문에이 메서드의 구현은에서 다른 것 Dispose 패턴에 대 한 권장된 지침을 참고 합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose">
          <source>This method calls <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>, which then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">이 메서드를 호출 <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph>, 호출 <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph>에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>You should release all resources by specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`disposing`</ph>.</source>
          <target state="translated">지정 하 여 모든 리소스를 해제 해야 <ph id="ph1">`true`</ph> 에 대 한 <ph id="ph2">`disposing`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>When <ph id="ph1">`disposing`</ph> is <ph id="ph2">`true`</ph>, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects.</source>
          <target state="translated">때 <ph id="ph1">`disposing`</ph> 은 <ph id="ph2">`true`</ph>, 데이터가 다른 종료 가능 개체에 액세스 하는 내부 버퍼에 플러시되는 스트림이 되도록 할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>This may not be possible when called from a finalizer due a lack of ordering among finalizers.</source>
          <target state="translated">이 종료자 간의 순서 부족으로 인해 종료자에서 호출 될 때 발생할 수 없습니다 수 있습니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>If your stream is using an operating system handle to communicate with its source, consider using a subclass of <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> for this purpose.</source>
          <target state="translated">스트림을 사용 중인 경우 운영 체제 핸들의 소스와 통신 하는 것이 좋습니다의 서브 클래스를 사용 하 여 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> 이 목적을 위해 합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">이 메서드는 public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> 보호 된 호출 <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> 메서드는 <ph id="ph3">`disposing`</ph> 매개 변수 설정 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.IO.Stream.Dispose%2A&gt;</ph> 와 <ph id="ph3">`disposing`</ph> 로 설정 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>In derived classes, do not override the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> method, instead, put all of the Stream cleanup logic in the <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> method.</source>
          <target state="translated">파생된 클래스에서 재정의 하지 않는 <ph id="ph1">&lt;see cref="M:System.IO.Stream.Close" /&gt;</ph> 모든 스트림 정리 논리에 메서드를 대신 배치는 <ph id="ph2">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>는 다른 개체에서 여러 번 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>를 재정의할 때 이전 <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> 호출에서 삭제된 개체를 참조하지 않도록 주의하십시오.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">구현 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;see cref="M:System.IO.Stream.Dispose(System.Boolean)" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>Dispose 메서드를 구현<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The reference to the pending asynchronous request to finish.</source>
          <target state="translated">완료할 보류 중인 비동기 요청에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>Waits for the pending asynchronous read to complete.</source>
          <target state="translated">보류 중인 비동기 읽기가 완료되기를 기다립니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">대신 <ph id="ph1">&lt;see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>를 사용하세요.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The number of bytes read from the stream, between zero (0) and the number of bytes you requested.</source>
          <target state="translated">0과 요청한 바이트 수 사이의 스트림에서 읽은 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</source>
          <target state="translated">스트림은 스트림의 끝에서만 0을 반환하며, 그렇지 않으면 사용할 수 있는 바이트가 1바이트 이상이 될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">.NET Framework 4 및 이전 버전에서 비동기 I/O 작업을 구현하려면 <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> 와 같은 메서드를 사용해야 합니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">그러나 이러한 메서드는에서 계속 사용할 수는 <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> 레거시 코드를 지원 하기 위해 새로운 비동기 메서드 같은 <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, 도움말 비동기 I/O 작업을 보다 쉽게 구현 합니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>Call <ph id="ph1">`EndRead`</ph> to determine how many bytes were read from the stream.</source>
          <target state="translated">호출 <ph id="ph1">`EndRead`</ph> 를 스트림에서 읽을 바이트 수를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">`EndRead`</ph> can be called once on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id="ph3">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`EndRead`</ph> 한 번 호출 될 모든 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> 에서 <ph id="ph3">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>This method blocks until the I/O operation has completed.</source>
          <target state="translated">이 메서드는 I/O 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>A handle to the pending read operation is not available.</source>
          <target state="translated">보류 중인 읽기 작업에 대한 핸들을 사용할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The pending operation does not support reading.</source>
          <target state="translated">보류 중인 작업이 읽기를 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> did not originate from a <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> method on the current stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph>가 현재 스트림의 <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> 메서드에서 시작되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndRead(System.IAsyncResult)">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">스트림이 닫혔거나 내부 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>A reference to the outstanding asynchronous I/O request.</source>
          <target state="translated">처리 중인 비동기 I/O 요청에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>Ends an asynchronous write operation.</source>
          <target state="translated">비동기 쓰기 작업을 끝냅니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> instead.)</source>
          <target state="translated">대신 <ph id="ph1">&lt;see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>를 사용하세요.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to implement asynchronous I/O operations.</source>
          <target state="translated">.NET Framework 4 및 이전 버전에서 비동기 I/O 작업을 구현하려면 <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph>와 같은 메서드를 사용해야 합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, help you implement asynchronous I/O operations more easily.</source>
          <target state="translated">그러나 이러한 메서드는에서 계속 사용할 수는 <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> 레거시 코드를 지원 하기 위해 새로운 비동기 메서드 같은 <ph id="ph2">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>, 도움말 비동기 I/O 작업을 보다 쉽게 구현 합니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">`EndWrite`</ph> must be called exactly once on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`EndWrite`</ph> 정확히 한 번만 호출 해야 모든 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> 에서 <ph id="ph3">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>This method blocks until the I/O operation has completed.</source>
          <target state="translated">이 메서드는 I/O 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and become visible upon a call to <ph id="ph1">`EndWrite`</ph>.</source>
          <target state="translated">I/O 요청 중의 디스크 오류와 같은 비동기 쓰기 요청을 하는 동안 발생 하는 오류는 스레드 풀 스레드에서 발생 하 고 호출 시 표시 될 <ph id="ph1">`EndWrite`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>Exceptions thrown by the thread pool thread will not be visible when calling <ph id="ph1">`EndWrite`</ph>.</source>
          <target state="translated">호출할 때 스레드 풀 스레드에서 throw 된 예외 표시 되지 것입니다 <ph id="ph1">`EndWrite`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>A handle to the pending write operation is not available.</source>
          <target state="translated">보류 중인 쓰기 작업에 대한 핸들을 사용할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>The pending operation does not support writing.</source>
          <target state="translated">보류 중인 작업이 쓰기를 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> did not originate from a <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> method on the current stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph>가 현재 스트림의 <ph id="ph2">&lt;see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> 메서드에서 시작되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
          <source>The stream is closed or an internal error has occurred.</source>
          <target state="translated">스트림이 닫혔거나 내부 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Flush">
          <source>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">파생 클래스에서 재정의되면 이 스트림에 대해 모든 버퍼를 지우고 버퍼링된 데이터가 내부 장치에 쓰여지도록 합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Override <ph id="ph1">`Flush`</ph> on streams that implement a buffer.</source>
          <target state="translated">재정의 <ph id="ph1">`Flush`</ph> 버퍼를 구현 하는 스트림에 대해 합니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Use this method to move any information from an underlying buffer to its destination, clear the buffer, or both.</source>
          <target state="translated">이 메서드를 사용 하 여 내부 버퍼에서 정보를 대상으로 이동을 하거나, 버퍼의 선택을 취소 합니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Depending upon the state of the object, you might have to modify the current position within the stream (for example, if the underlying stream supports seeking).</source>
          <target state="translated">개체의 상태에 따라 (예를 들어 경우 내부 검색 지원 스트림) 스트림 내의 현재 위치를 수정 해야 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>For additional information see <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>를 참조하십시오.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>When using the <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> class, do not flush the base <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> object.</source>
          <target state="translated">사용 하는 경우는 <ph id="ph1">&lt;xref:System.IO.StreamWriter&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> 클래스, 기본을 플러시하지 않은 <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Flush">
          <source>Instead, use the class's <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method, which makes sure that the data is flushed to the underlying stream first and then written to the file.</source>
          <target state="translated">대신,는 클래스를 사용 하 여 <ph id="ph1">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> 메서드 데이터를 기본 스트림으로 먼저 플러시 및 다음 파일에 기록 되어 있는지를 합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Flush">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">이 스트림에 대한 모든 버퍼를 비동기적으로 지우고 버퍼링된 모든 데이터가 내부 장치에 비동기적으로 쓰여지도록 합니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync">
          <source>Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">이 스트림에 대한 모든 버퍼를 비동기적으로 지우고 버퍼링된 모든 데이터가 내부 장치에 비동기적으로 쓰여지도록 합니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">비동기 플러시 작업을 나타내는 작업입니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.FlushAsync">
          <source>If a derived class, such as <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, does not flush the buffer in its implementation of the <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method, the <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method will not flush the buffer.</source>
          <target state="translated">파생 클래스와 같은 <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, 구현에서 버퍼를 플러시하지 않습니다는 <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> 메서드를는 <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> 메서드 버퍼가 플러시되지 것입니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync">
          <source>The stream has been disposed.</source>
          <target state="translated">스트림이 삭제되었습니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">취소 요청을 모니터링할 토큰입니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</source>
          <target state="translated">이 스트림에 대해 모든 버퍼를 비동기적으로 지우고 버퍼링된 데이터가 내부 장치에 쓰여지도록 하고 취소 요청을 모니터링합니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">비동기 플러시 작업을 나타내는 작업입니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">반환된 된 작업에 포함 된 완료 되기 전에 작업이 취소 되는 경우는 <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> 에 대 한 값은 <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>If a derived class, such as <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, does not flush the buffer in its implementation of the <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> method, the <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> method will not flush the buffer.</source>
          <target state="translated">파생 클래스와 같은 <ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.IO.Compression.GZipStream&gt;</ph>, 구현에서 버퍼를 플러시하지 않습니다는 <ph id="ph3">&lt;xref:System.IO.Stream.Flush%2A&gt;</ph> 메서드를는 <ph id="ph4">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph> 메서드 버퍼가 플러시되지 것입니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">스트림이 삭제되었습니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Length">
          <source>When overridden in a derived class, gets the length in bytes of the stream.</source>
          <target state="translated">파생 클래스에서 재정의되면 스트림 바이트의 길이를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Length">
          <source>A long value representing the length of the stream in bytes.</source>
          <target state="translated">스트림 길이(바이트)를 나타내는 long 값입니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Length">
          <source>A class derived from <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> does not support seeking.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Stream" /&gt;</ph>에서 파생된 클래스가 검색을 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Length">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">스트림이 닫힌 후에 메서드가 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="F:System.IO.Stream.Null">
          <source>A <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> with no backing store.</source>
          <target state="translated">백업 저장소가 없는 <ph id="ph1">&lt;see langword="Stream" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.Stream.Null">
          <source>Use <ph id="ph1">`Null`</ph> to redirect output to a stream that will not consume any operating system resources.</source>
          <target state="translated">사용 하 여 <ph id="ph1">`Null`</ph> 스트림으로 운영 체제 리소스를 사용 하지 않을 출력을 리디렉션할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.Stream.Null">
          <source>When the methods of <ph id="ph1">`Stream`</ph> that provide writing are invoked on <ph id="ph2">`Null`</ph>, the call simply returns, and no data is written.</source>
          <target state="translated">때의 메서드 <ph id="ph1">`Stream`</ph> 으로 쓰기 호출을 제공 하는 <ph id="ph2">`Null`</ph>, 호출이 반환 되 고 데이터가 기록 되지 합니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IO.Stream.Null">
          <source><ph id="ph1">`Null`</ph> also implements a <ph id="ph2">`Read`</ph> method that returns zero without reading data.</source>
          <target state="translated"><ph id="ph1">`Null`</ph> 또한 구현 하는 <ph id="ph2">`Read`</ph> 데이터를 읽어 오지 않고 0을 반환 하는 메서드.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ObjectInvariant">
          <source>Provides support for a <ph id="ph1">&lt;see cref="T:System.Diagnostics.Contracts.Contract" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.Contracts.Contract" /&gt;</ph>에 대한 지원을 제공합니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>When overridden in a derived class, gets or sets the position within the current stream.</source>
          <target state="translated">파생 클래스에서 재정의되면 현재 스트림 내의 위치를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>The current position within the stream.</source>
          <target state="translated">스트림 내의 현재 위치입니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>The stream must support seeking to get or set the position.</source>
          <target state="translated">스트림이 가져오거나 위치를 설정 하려면 검색을 지원 해야 합니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether the stream supports seeking.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> 스트림이 검색을 지원 하는지 여부를 결정 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">스트림의 길이 초과 하는 위치에 검색을 지원 됩니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.Position">
          <source>The <ph id="ph1">`Position`</ph> property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.</source>
          <target state="translated"><ph id="ph1">`Position`</ph> 속성 않습니다를 추적 하지 소비 된 생략 되었거나 하는 스트림 또는 둘 다에서 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>The stream does not support seeking.</source>
          <target state="translated">스트림이 검색을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.Position">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">스트림이 닫힌 후에 메서드가 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When this method returns, the buffer contains the specified byte array with the values between <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the bytes read from the current source.</source>
          <target state="translated">이 메서드가 반환될 때 이 메서드가 반환될 때 현재 소스에서 읽은 바이트로 대체되는 (<bpt id="p2">&lt;c&gt;</bpt>오프셋<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>카운트<ept id="p3">&lt;/c&gt;</ept> - 1)과 <bpt id="p1">&lt;c&gt;</bpt>오프셋<ept id="p1">&lt;/c&gt;</ept> 사이의 값을 가진 지정된 바이트 배열을 포함합니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin storing the data read from the current stream.</source>
          <target state="translated">현재 스트림에서 읽은 데이터를 저장하기 시작하는 <bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept>의 바이트 오프셋(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to be read from the current stream.</source>
          <target state="translated">현재 스트림에서 읽을 최대 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</source>
          <target state="translated">파생 클래스에서 재정의되면 현재 스트림에서 바이트의 시퀀스를 읽고, 읽은 바이트 수만큼 스트림 내에서 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The total number of bytes read into the buffer.</source>
          <target state="translated">버퍼로 읽어온 총 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</source>
          <target state="translated">이 바이트 수는 현재 바이트가 충분하지 않은 경우 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달하면 0이 됩니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> 속성을 현재 인스턴스에 읽기를 지원 하는지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method to read asynchronously from the current stream.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> 현재 스트림을 비동기적으로 읽는 메서드.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Implementations of this method read a maximum of <ph id="ph1">`count`</ph> bytes from the current stream and store them in <ph id="ph2">`buffer`</ph> beginning at <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">이 메서드의 구현은 읽을 최대 <ph id="ph1">`count`</ph> 바이트 스트림 및에 보관해 두면 <ph id="ph2">`buffer`</ph> 부터 <ph id="ph3">`offset`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged.</source>
          <target state="translated">스트림 내의 현재 위치는; 읽은 바이트 수로 앞에 그러나 예외가 발생할 경우 스트림 내의 현재 위치 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Implementations return the number of bytes read.</source>
          <target state="translated">구현에서는 읽은 바이트 수를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The implementation will block until at least one byte of data can be read, in the event that no data is available.</source>
          <target state="translated">구현에 데이터가 없는 적어도 1 바이트의 데이터를 읽을 수 있고 때까지 차단 됩니다.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> returns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> 스트림에서 더 이상 데이터 (예: 닫힌된 소켓 또는 파일의 끝) 더 이상 필요 합니다. 경우에 0을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">구현을 스트림의 끝에 도달 하지 하는 경우에 요청 된 것 보다 적은 바이트를 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> for reading primitive data types.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> 기본 데이터 형식을 읽기 위한 합니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to use <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> to read a block of data.</source>
          <target state="translated">다음 예제에서는 사용 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> 데이터 블록을 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>의 합계가 버퍼 길이보다 큽니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 음수입니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support reading.</source>
          <target state="translated">스트림이 읽기를 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">스트림이 닫힌 후에 메서드가 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</source>
          <target state="translated">현재 스트림에서 바이트 시퀀스를 읽고 읽은 바이트 수만큼 스트림에서 위치를 비동기적으로 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to write the data into.</source>
          <target state="translated">데이터를 쓸 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">스트림의 데이터를 쓰기 시작할 <bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept>의 바이트 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">읽을 최대 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</source>
          <target state="translated">현재 스트림에서 바이트 시퀀스를 읽고 읽은 바이트 수만큼 스트림에서 위치를 비동기적으로 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">비동기 읽기 작업을 나타내는 작업입니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> 매개 변수의 값은 버퍼 안으로 읽어들인 총 바이트 수를 포함합니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">현재 사용할 수 있는 바이트 수가 요청된 수보다 작을 경우 결과 값이 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> 메서드를 사용 하면 주 스레드를 차단 하지 않고 리소스 집중형 I/O 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> 응용 프로그램 또는 <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> 응용 프로그램에서 중요합니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">비동기 메서드에와 함께 사용 되는 <ph id="ph1">`async`</ph> 및 <ph id="ph2">`await`</ph> Visual Basic 및 C# 키워드.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> 속성을 현재 인스턴스에 읽기를 지원 하는지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to read from a file asynchronously.</source>
          <target state="translated">다음 예제에서는 비동기적으로 파일을 읽는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class, which derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 사용 된 <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> 클래스에서 파생 되는 <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 음수입니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>의 합계가 버퍼 길이보다 큽니다.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support reading.</source>
          <target state="translated">스트림이 읽기를 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream has been disposed.</source>
          <target state="translated">스트림이 삭제되었습니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">스트림을 현재 이전 읽기 작업에서 사용 중입니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write the data into.</source>
          <target state="translated">데이터를 쓸 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">스트림의 데이터를 쓰기 시작할 <bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept>의 바이트 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">읽을 최대 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">취소 요청을 모니터링할 토큰입니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</source>
          <target state="translated">현재 스트림에서 바이트의 시퀀스를 비동기적으로 읽고 읽은 바이트 수만큼 스트림 내에서 앞으로 이동하며 취소 요청을 모니터링합니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">비동기 읽기 작업을 나타내는 작업입니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> 매개 변수의 값은 버퍼 안으로 읽어들인 총 바이트 수를 포함합니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">현재 사용할 수 있는 바이트 수가 요청된 수보다 작을 경우 결과 값이 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> 메서드를 사용 하면 주 스레드를 차단 하지 않고 리소스 집중형 I/O 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> 응용 프로그램 또는 <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> 응용 프로그램에서 중요합니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">비동기 메서드에와 함께 사용 되는 <ph id="ph1">`async`</ph> 및 <ph id="ph2">`await`</ph> Visual Basic 및 C# 키워드.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> 속성을 현재 인스턴스에 읽기를 지원 하는지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">반환된 된 작업에 포함 된 완료 되기 전에 작업이 취소 되는 경우는 <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> 에 대 한 값은 <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> overload.</source>
          <target state="translated">예를 들어 참조는 <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 음수입니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>의 합계가 버퍼 길이보다 큽니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support reading.</source>
          <target state="translated">스트림이 읽기를 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">스트림이 삭제되었습니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">스트림을 현재 이전 읽기 작업에서 사용 중입니다.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</source>
          <target state="translated">스트림에서 바이트를 읽고 스트림 내 위치를 한 바이트씩 앞으로 이동하거나 스트림 끝일 경우 -1을 반환합니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>The unsigned byte cast to an <ph id="ph1">&lt;see langword="Int32" /&gt;</ph>, or -1 if at the end of the stream.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Int32" /&gt;</ph>로 캐스팅된 부호 없는 바이트이거나 스트림의 끝에 있는 경우 -1입니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> 속성을 현재 인스턴스에 읽기를 지원 하는지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>Attempts to manipulate the stream after the stream has been closed could throw an <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>.</source>
          <target state="translated">스트림이 닫힌 후 스트림을 조작 하려는 시도 throw 할 수 있습니다는 <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>The stream does not support reading.</source>
          <target state="translated">스트림이 읽기를 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.ReadByte">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">스트림이 닫힌 후에 메서드가 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>The default implementation on <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> creates a new single-byte array and then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">기본 구현에서 <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> 새 단일 바이트 배열을 만들고 호출 합니다 <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>While this is formally correct, it is inefficient.</source>
          <target state="translated">공식적으로 올바른 이지만, 것은 비효율적입니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.ReadByte">
          <source>Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.</source>
          <target state="translated">내부 버퍼를 사용 하 여 모든 스트림을이 메서드를 재정의 하 고 버퍼 각 호출에서 추가 배열 할당 방지를 직접 읽는 훨씬 더 효율적으로 버전을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.ReadTimeout">
          <source>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.</source>
          <target state="translated">스트림이 시간 초과 전 읽기를 시도할 기간을 결정하는 값(밀리초)을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.ReadTimeout">
          <source>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</source>
          <target state="translated">스트림 읽기 시도가 만료되기 전까지 기다릴 시간을 결정하는 값(밀리초 단위)입니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.ReadTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> method always throws an <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> 메서드는 항상 <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>을 throw합니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.ReadTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> property should be overridden to provide the appropriate behavior for the stream.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.Stream.ReadTimeout" /&gt;</ph> 스트림에 대 한 적절 한 동작을 제공 하도록 속성을 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.ReadTimeout">
          <source>If the stream does not support timing out, this property should raise an <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">이 속성을 발생 시켜야 스트림이 시간 초과 지원 하지 않는 경우는 <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>A byte offset relative to the <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>원본<ept id="p1">&lt;/c&gt;</ept> 매개 변수에 상대적인 바이트 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>A value of type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> indicating the reference point used to obtain the new position.</source>
          <target state="translated">새 위치를 가져오는 데 사용되는 참조 위치를 나타내는 <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> 형식의 값입니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>When overridden in a derived class, sets the position within the current stream.</source>
          <target state="translated">파생 클래스를 재정의될 때 현재 스트림 내의 위치를 설정합니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The new position within the current stream.</source>
          <target state="translated">현재 스트림 내의 새 위치입니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether the current instance supports seeking.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> 속성을 현재 인스턴스 검색을 지원 하는지 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is negative, the new position is required to precede the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">경우 <ph id="ph1">`offset`</ph> 가 음수 이면 새 위치 하는 데 필요한 앞에 지정 된 위치 <ph id="ph2">`origin`</ph> 에 지정 된 바이트 수로 <ph id="ph3">`offset`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is zero (0), the new position is required to be the position specified by <ph id="ph2">`origin`</ph>.</source>
          <target state="translated">경우 <ph id="ph1">`offset`</ph> 은 영 (0), 새 위치는에 지정 된 위치 수 <ph id="ph2">`origin`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is positive, the new position is required to follow the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">경우 <ph id="ph1">`offset`</ph> 가 새 위치에 지정 된 위치 뒤에 양수 <ph id="ph2">`origin`</ph> 에 지정 된 바이트 수로 <ph id="ph3">`offset`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Classes derived from <ph id="ph1">`Stream`</ph> that support seeking must override this method to provide the functionality described above.</source>
          <target state="translated">클래스에서 파생 된 <ph id="ph1">`Stream`</ph> 검색을 지원 위에서 설명한 기능을 제공 하려면이 메서드 재정의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">스트림의 길이 초과 하는 위치에 검색을 지원 됩니다.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The stream does not support seeking, such as if the stream is constructed from a pipe or console output.</source>
          <target state="translated">예를 들어, 스트림이 파이프 또는 콘솔 출력에서 생성되는 경우 스트림은 검색을 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">스트림이 닫힌 후에 메서드가 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>The desired length of the current stream in bytes.</source>
          <target state="translated">원하는 현재 스트림의 길이(바이트)입니다.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>When overridden in a derived class, sets the length of the current stream.</source>
          <target state="translated">파생 클래스에 재정의될 때 현재 스트림의 길이를 설정합니다.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>If the specified value is less than the current length of the stream, the stream is truncated.</source>
          <target state="translated">지정된 된 값은 스트림의 현재 길이 보다 작은 경우는 스트림이 잘렸습니다.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>If the specified value is larger than the current length of the stream, the stream is expanded.</source>
          <target state="translated">지정된 된 값은 스트림의 현재 길이 보다 큰 경우 스트림을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>If the stream is expanded, the contents of the stream between the old and the new length are not defined.</source>
          <target state="translated">스트림을 확장 이전부터 새 길이 스트림의 내용은 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>A stream must support both writing and seeking for <ph id="ph1">`SetLength`</ph> to work.</source>
          <target state="translated">스트림이 쓰기와 검색을 모두 지원 해야 <ph id="ph1">`SetLength`</ph> 에서 실행 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing, and the <ph id="ph2">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property to determine whether seeking is supported.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> 현재 인스턴스가 쓰기를 지원 하는지 여부를 결정 하는 속성 및 <ph id="ph2">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> 검색을 지원 하는지 여부를 결정 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</source>
          <target state="translated">예를 들어, 스트림이 파이프 또는 콘솔 출력에서 생성되는 경우처럼 스트림이 쓰기와 검색을 모두 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.SetLength(System.Int64)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">스트림이 닫힌 후에 메서드가 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object to synchronize.</source>
          <target state="translated">동기화할 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>Creates a thread-safe (synchronized) wrapper around the specified <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 개체에 대해 동기화되어 스레드로부터 안전한 래퍼를 만듭니다.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>A thread-safe <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated">스레드로부터 안전한 <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>This method returns a class that wraps the specified <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object and restricts access to it from multiple threads.</source>
          <target state="translated">이 메서드는 지정 된 래핑하는 클래스를 반환 <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> 개체를 여러 스레드에서 액세스를 제한 합니다.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source>All access to the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object will be thread safe.</source>
          <target state="translated">에 대 한 모든 액세스는 <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> 개체는 스레드로부터 안전 하 게 보호 됩니다.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Synchronized(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>This method copies <bpt id="p1">&lt;c&gt;</bpt>count<ept id="p1">&lt;/c&gt;</ept> bytes from <bpt id="p2">&lt;c&gt;</bpt>buffer<ept id="p2">&lt;/c&gt;</ept> to the current stream.</source>
          <target state="translated">이 메서드는 <bpt id="p2">&lt;c&gt;</bpt>버퍼<ept id="p2">&lt;/c&gt;</ept>의 <bpt id="p1">&lt;c&gt;</bpt>카운트<ept id="p1">&lt;/c&gt;</ept> 바이트를 현재 스트림으로 복사합니다.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin copying bytes to the current stream.</source>
          <target state="translated">현재 스트림으로 바이트를 복사하기 시작할 <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>의 바이트 오프셋(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to be written to the current stream.</source>
          <target state="translated">현재 스트림에 쓸 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</source>
          <target state="translated">파생 클래스를 재정의될 때 현재 스트림에 바이트의 시퀀스를 쓰고 쓰여진 바이트 수만큼 이 스트림 내에서 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> 속성을 현재 인스턴스가 쓰기를 지원 하는지 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method to write asynchronously to the current stream.</source>
          <target state="translated">사용 된 <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> 메서드를 현재 스트림에 비동기적으로 씁니다.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If the write operation is successful, the position within the stream advances by the number of bytes written.</source>
          <target state="translated">쓰기 작업을 완료 하는 경우 쓴 바이트 수 만큼 스트림 내 위치 이동 합니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If an exception occurs, the position within the stream remains unchanged.</source>
          <target state="translated">예외가 발생 하면 스트림 내의 위치 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is greater than the buffer length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>의 합계가 버퍼 길이보다 큽니다.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 음수입니다.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occured, such as the specified file cannot be found.</source>
          <target state="translated">지정된 파일을 찾을 수 없음과 같은 I/O 오류가 발생합니다.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support writing.</source>
          <target state="translated">스트림이 쓰기를 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> was called after the stream was closed.</source>
          <target state="translated">스트림이 닫힌 후에 <ph id="ph1">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>가 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="T:System.IO.Stream">
          <source>Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</source>
          <target state="translated">현재 스트림에 바이트 시퀀스를 비동기적으로 쓰고 쓴 바이트 수만큼 이 스트림에서 현재 위치를 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to write data from.</source>
          <target state="translated">데이터를 쓸 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">스트림으로 바이트를 복사하기 시작할 <bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept>의 바이트 오프셋(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">쓸 최대 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</source>
          <target state="translated">현재 스트림에 바이트 시퀀스를 비동기적으로 쓰고 쓴 바이트 수만큼 이 스트림에서 현재 위치를 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">비동기 쓰기 작업을 나타내는 작업입니다.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> 메서드를 사용 하면 주 스레드를 차단 하지 않고 리소스 집중형 I/O 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> 응용 프로그램 또는 <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> 응용 프로그램에서 중요합니다.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">비동기 메서드에와 함께 사용 되는 <ph id="ph1">`async`</ph> 및 <ph id="ph2">`await`</ph> Visual Basic 및 C# 키워드.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> 속성을 현재 인스턴스가 쓰기를 지원 하는지 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The following example shows how to write asynchronously to a file.</source>
          <target state="translated">다음 예제에서는 파일에 비동기적으로 작성 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> class, which derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
          <target state="translated">이 예제에서는 사용 된 <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> 클래스에서 파생 되는 <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 음수입니다.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>의 합계가 버퍼 길이보다 큽니다.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support writing.</source>
          <target state="translated">스트림이 쓰기를 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream has been disposed.</source>
          <target state="translated">스트림이 삭제되었습니다.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">이전 쓰기 작업에서 현재 이 스트림을 사용하고 있습니다.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write data from.</source>
          <target state="translated">데이터를 쓸 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">스트림으로 바이트를 복사하기 시작할 <bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept>의 바이트 오프셋(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">쓸 최대 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">취소 요청을 모니터링할 토큰입니다.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">바이트의 시퀀스를 현재 스트림에 비동기적으로 쓰고 쓰여진 바이트 수만큼 이 스트림 내의 현재 위치를 앞으로 이동한 후 취소 요청을 모니터링합니다.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">비동기 쓰기 작업을 나타내는 작업입니다.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> method enables you to perform resource-intensive I/O operations without blocking the main thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> 메서드를 사용 하면 주 스레드를 차단 하지 않고 리소스 집중형 I/O 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>This performance consideration is particularly important in a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</source>
          <target state="translated">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> 응용 프로그램 또는 <ph id="ph2">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> 응용 프로그램에서 중요합니다.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The async methods are used in conjunction with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords in Visual Basic and C#.</source>
          <target state="translated">비동기 메서드에와 함께 사용 되는 <ph id="ph1">`async`</ph> 및 <ph id="ph2">`await`</ph> Visual Basic 및 C# 키워드.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> 속성을 현재 인스턴스가 쓰기를 지원 하는지 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If the operation is canceled before it completes, the returned task contains the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.</source>
          <target state="translated">반환된 된 작업에 포함 된 완료 되기 전에 작업이 취소 되는 경우는 <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> 에 대 한 값은 <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>For an example, see the <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> overload.</source>
          <target state="translated">예를 들어 참조는 <ph id="ph1">&lt;xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 음수입니다.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>의 합계가 버퍼 길이보다 큽니다.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support writing.</source>
          <target state="translated">스트림이 쓰기를 지원하지 않습니다.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">스트림이 삭제되었습니다.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">이전 쓰기 작업에서 현재 이 스트림을 사용하고 있습니다.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>The byte to write to the stream.</source>
          <target state="translated">스트림에 쓸 바이트입니다.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</source>
          <target state="translated">스트림의 현재 위치에 바이트를 쓰고 스트림 내 위치를 1바이트씩 앞으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> 속성을 현재 인스턴스가 쓰기를 지원 하는지 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>The stream does not support writing, or the stream is already closed.</source>
          <target state="translated">스트림이 쓰기를 지원하지 않거나 이미 닫힌 경우</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">스트림이 닫힌 후에 메서드가 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>The default implementation on <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> creates a new single-byte array and then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">기본 구현에서 <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> 새 단일 바이트 배열을 만들고 호출 합니다 <ph id="ph2">&lt;see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>While this is formally correct, it is inefficient.</source>
          <target state="translated">공식적으로 올바른 이지만, 것은 비효율적입니다.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.Stream.WriteByte(System.Byte)">
          <source>Any stream with an internal buffer should override this method and provide a much more efficient version that writes to the buffer directly, avoiding the extra array allocation on every call.</source>
          <target state="translated">내부 버퍼를 사용 하 여 모든 스트림을이 메서드를 재정의 하 고 각 호출에서 추가 배열 할당 방지를 직접 버퍼에 기록 하는 훨씬 더 효율적으로 버전을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.WriteTimeout">
          <source>Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.</source>
          <target state="translated">스트림이 시간 초과 전 쓰기를 시도할 기간을 결정하는 값(밀리초)을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.WriteTimeout">
          <source>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</source>
          <target state="translated">스트림 쓰기 시도가 만료되기 전까지 기다릴 시간을 결정하는 값(밀리초 단위)입니다.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="P:System.IO.Stream.WriteTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> method always throws an <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> 메서드는 항상 <ph id="ph2">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>을 throw합니다.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.WriteTimeout">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> property should be overridden to provide the appropriate behavior for the stream.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.Stream.WriteTimeout" /&gt;</ph> 스트림에 대 한 적절 한 동작을 제공 하도록 속성을 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.Stream.WriteTimeout">
          <source>If the stream does not support timing out, this property should raise an <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>.</source>
          <target state="translated">이 속성을 발생 시켜야 스트림이 시간 초과 지원 하지 않는 경우는 <ph id="ph1">&lt;see cref="T:System.InvalidOperationException" /&gt;</ph>합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>