<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UnmanagedMemoryStream.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5118ab17a373e7e3ec2e224596d6e7345bcbabc38.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">118ab17a373e7e3ec2e224596d6e7345bcbabc38</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.UnmanagedMemoryStream">
          <source>Provides access to unmanaged blocks of memory from managed code.</source>
          <target state="translated">관리 코드에서 관리되지 않는 메모리 블록에 액세스할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.UnmanagedMemoryStream">
          <source>This class supports access to unmanaged memory using the existing stream-based model and does not require that the contents in the unmanaged memory be copied to the heap.</source>
          <target state="translated">이 클래스는 기존 스트림 기반 모델을 사용 하 여 관리 되지 않는 메모리에 대 한 액세스를 지원 하며 힙과 관리 되지 않는 메모리의 내용을 복사 되어야 함이 필요 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.UnmanagedMemoryStream">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">읽기 / 쓰기 사용 하 여 관리 되지 않는 메모리를 하는 방법은 다음 코드 예제는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.UnmanagedMemoryStream">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">관리 되지 않는 메모리 블록 할당 되 고 사용 하 여 할당 취소는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="T:System.IO.UnmanagedMemoryStream">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor">
          <source>The user does not have the required permission.</source>
          <target state="translated">사용자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor">
          <source>for accessing unmanaged memory.</source>
          <target state="translated">관리 되지 않는 메모리에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>A pointer to an unmanaged memory location.</source>
          <target state="translated">관리되지 않는 메모리 위치에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The length of the memory to use.</source>
          <target state="translated">사용할 메모리의 길이입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class using the specified location and memory length.</source>
          <target state="translated">지정된 위치와 메모리 길이를 사용하여 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>This constructor creates a new instance of the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class, and by default sets the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> property to <ph id="ph3">`false`</ph> and the <ph id="ph4">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> property to <ph id="ph5">`true`</ph>.</source>
          <target state="translated">이 생성자의 새 인스턴스를 만듭니다.는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 기본적으로 설정 하는 클래스는 <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> 속성을 <ph id="ph3">`false`</ph> 및 <ph id="ph4">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> 속성을 <ph id="ph5">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Length%2A&gt;</ph> property is set to the value of the <ph id="ph2">`length`</ph> parameter and cannot be changed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Length%2A&gt;</ph> 속성의 값으로 설정 됩니다는 <ph id="ph2">`length`</ph> 매개 변수 이므로 변경할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">읽기 / 쓰기 사용 하 여 관리 되지 않는 메모리를 하는 방법은 다음 코드 예제는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">관리 되지 않는 메모리 블록 할당 되 고 사용 하 여 할당 취소는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The user does not have the required permission.</source>
          <target state="translated">사용자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The <ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> 값이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 값이 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> is large enough to cause an overflow.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph>가 오버플로를 발생시킬 만큼 큰 경우</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>for accessing unmanaged memory.</source>
          <target state="translated">관리 되지 않는 메모리에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
          <source>The buffer to contain the unmanaged memory stream.</source>
          <target state="translated">관리되지 않는 메모리 스트림이 포함될 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
          <source>The byte position in the buffer at which to start the unmanaged memory stream.</source>
          <target state="translated">관리되지 않는 메모리 스트림을 시작할 버퍼의 바이트 위치입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
          <source>The length of the unmanaged memory stream.</source>
          <target state="translated">관리되지 않는 메모리 스트림의 길이입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class in a safe buffer with a specified offset and length.</source>
          <target state="translated">지정된 오프셋과 길이를 사용하여 안전한 버퍼에서 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>A pointer to an unmanaged memory location.</source>
          <target state="translated">관리되지 않는 메모리 위치에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The length of the memory to use.</source>
          <target state="translated">사용할 메모리의 길이입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The total amount of memory assigned to the stream.</source>
          <target state="translated">시스템에 할당된 총 메모리 양입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class using the specified location, memory length, total amount of memory, and file access values.</source>
          <target state="translated">지정된 위치, 메모리 길이, 총 메모리 양 및 파일 액세스 값을 사용하여 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">`length`</ph> parameter defines the current amount of memory in use.</source>
          <target state="translated"><ph id="ph1">`length`</ph> 매개 변수는 사용 중인 메모리의 현재 크기를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>If reading or appending data to the stream, the <ph id="ph1">`length`</ph> value should be equal to the amount of valid data in the stream to be read from or preserved.</source>
          <target state="translated">읽거나 스트림에 데이터를 추가 하는 경우는 <ph id="ph1">`length`</ph> 값에서 읽을 스트림에 올바른 데이터의 양과 같아야 또는 보존 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>If writing to the stream, this value should be zero.</source>
          <target state="translated">스트림에 작성 하는 경우이 값은 0 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">`capacity`</ph> parameter indicates the amount of total memory available.</source>
          <target state="translated"><ph id="ph1">`capacity`</ph> 매개 변수는 사용 가능한 총 메모리 양을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>This value can describe a region that is longer than the length specified, or indicate a region that can be appended to.</source>
          <target state="translated">이 값 지정 된 길이 보다 긴 영역을 설명 하거나에 추가 될 수 있는 영역을 나타낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Any attempt to write beyond this value will fail.</source>
          <target state="translated">이 값을 넘어 쓰려고 작업에 실패 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">`access`</ph> parameter sets the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> properties.</source>
          <target state="translated"><ph id="ph1">`access`</ph> 매개 변수 집합은 <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Note that specifying <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph> does not guarantee that the stream will be writable.</source>
          <target state="translated">지정 <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph> 가 스트림이 쓰기 가능 하도록 보장 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The access parameters allow the implementer to create an object whose implementation can match the actual stream that is exposed.</source>
          <target state="translated">액세스 매개 변수에서 구현할 수 있는 노출 되는 실제 스트림 일치 시킬 수 있는 개체를 만들 구현자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">읽기 / 쓰기 사용 하 여 관리 되지 않는 메모리를 하는 방법은 다음 코드 예제는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">관리 되지 않는 메모리 블록 할당 되 고 사용 하 여 할당 취소는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The user does not have the required permission.</source>
          <target state="translated">사용자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> 값이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 값이 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> value is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> 값이 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is greater than the <ph id="ph2">&lt;paramref name="capacity" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 값이 <ph id="ph2">&lt;paramref name="capacity" /&gt;</ph> 값보다 큰 경우</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>for accessing unmanaged memory.</source>
          <target state="translated">관리 되지 않는 메모리에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The buffer to contain the unmanaged memory stream.</source>
          <target state="translated">관리되지 않는 메모리 스트림이 포함될 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The byte position in the buffer at which to start the unmanaged memory stream.</source>
          <target state="translated">관리되지 않는 메모리 스트림을 시작할 버퍼의 바이트 위치입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The length of the unmanaged memory stream.</source>
          <target state="translated">관리되지 않는 메모리 스트림의 길이입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The mode of file access to the unmanaged memory stream.</source>
          <target state="translated">관리되지 않는 메모리 스트림에 대한 파일 액세스 모드입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class in a safe buffer with a specified offset, length, and file access.</source>
          <target state="translated">지정된 오프셋, 길이 및 파일 액세스를 사용하여 안전한 버퍼에서 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>Gets a value indicating whether a stream supports reading.</source>
          <target state="translated">스트림이 읽기를 지원하는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if the object was created by a constructor with an <ph id="ph2">&lt;paramref name="access" /&gt;</ph> parameter that did not include reading the stream and if the stream is closed; otherwise, <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">생성자가 스트림 읽기를 포함하지 않는 <ph id="ph2">&lt;paramref name="access" /&gt;</ph> 매개 변수를 사용하여 개체를 만들었고 스트림이 닫혔으면 <ph id="ph1">&lt;see langword="false" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>This property indicates whether the current stream object supports reading.</source>
          <target state="translated">이 속성은 현재 스트림 개체가 읽기를 지원 하는지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">읽기 / 쓰기 사용 하 여 관리 되지 않는 메모리를 하는 방법은 다음 코드 예제는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">관리 되지 않는 메모리 블록 할당 되 고 사용 하 여 할당 취소는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object is passed to a method which checks the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> property before attempting to display the contents to the console.</source>
          <target state="translated">이 예제는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 개체를 검사 하는 메서드에 전달 되는 <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> 내용을 콘솔에 표시 하기 전에 속성입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.CanSeek">
          <source>Gets a value indicating whether a stream supports seeking.</source>
          <target state="translated">스트림이 검색을 지원하는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanSeek">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if the stream is closed; otherwise, <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">스트림이 닫혔으면 <ph id="ph1">&lt;see langword="false" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanSeek">
          <source>This property indicates whether the current stream object supports seeking.</source>
          <target state="translated">이 속성은 현재 스트림 개체가 검색을 지원 하는지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>Gets a value indicating whether a stream supports writing.</source>
          <target state="translated">스트림이 쓰기를 지원하는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if the object was created by a constructor with an <ph id="ph2">&lt;paramref name="access" /&gt;</ph> parameter value that supports writing or was created by a constructor that had no parameters, or if the stream is closed; otherwise, <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">생성자가 쓰기를 지원하는 <ph id="ph2">&lt;paramref name="access" /&gt;</ph> 매개 변수 값을 사용하여 개체를 만들었거나 매개 변수가 없는 생성자가 개체를 만들었거나 스트림이 닫혔으면 <ph id="ph1">&lt;see langword="false" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>This property indicates whether the current stream object supports writing.</source>
          <target state="translated">이 속성은 현재 스트림 개체가 쓰기를 지원 하는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">읽기 / 쓰기 사용 하 여 관리 되지 않는 메모리를 하는 방법은 다음 코드 예제는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">관리 되지 않는 메모리 블록 할당 되 고 사용 하 여 할당 취소는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object is passed to a method which checks the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> property before attempting to write the data to the stream.</source>
          <target state="translated">이 예제는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 개체를 검사 하는 메서드에 전달 되는 <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> 스트림에 데이터를 쓰기 전에 속성입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>Gets the stream length (size) or the total amount of memory assigned to a stream (capacity).</source>
          <target state="translated">스트림에 할당된 스트림 길이(크기) 또는 총 메모리 양(용량)을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>The size or capacity of the stream.</source>
          <target state="translated">스트림의 크기 또는 용량입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>This property returns the <ph id="ph1">`capacity`</ph> value provided to the constructor.</source>
          <target state="translated">이 속성은 반환 된 <ph id="ph1">`capacity`</ph> 생성자에 제공 된 값입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>If no <ph id="ph1">`capacity`</ph> value was specified when the stream was initialized, this property returns the stream length.</source>
          <target state="translated">되지 않은 경우 <ph id="ph1">`capacity`</ph> 스트림이 초기화 될 때 지정,이 속성은 스트림 길이 반환 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph>에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">이 메서드는 public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> 보호 된 호출 <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph> 메서드는 <ph id="ph3">`disposing`</ph> 매개 변수 설정 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 호출 <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph> 와 <ph id="ph3">`disposing`</ph> 로 설정 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> 매개 변수가 <ph id="ph2">`true`</ph>인 경우 이 메서드는 이 <ph id="ph3">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method of each referenced object.</source>
          <target state="translated">이 메서드는 참조되는 각 개체의 <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>는 다른 개체에서 여러 번 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)" /&gt;</ph> be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)" /&gt;</ph> 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">구현 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;see cref="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>Dispose 메서드를 구현<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Flush">
          <source>Overrides the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph> method so that no action is performed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph> 메서드를 재정의하여 아무런 작업도 수행되지 않도록 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Flush">
          <source>This method performs no action for this class but is included as part of the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> base class.</source>
          <target state="translated">이 메서드는이 클래스는의 일부로 포함에 대해 아무 작업도 수행 된 <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Flush">
          <source>Since any data is written to RAM, this method is redundant.</source>
          <target state="translated">데이터를 RAM에 쓰기,이 메서드는 중복 됩니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Flush">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">취소 요청을 모니터링할 토큰입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Overrides the <ph id="ph1">&lt;see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" /&gt;</ph> method so that the operation is cancelled if specified, but no other action is performed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" /&gt;</ph> 메서드를 재정의하여 지정된 경우 작업을 취소하지만 다른 작업이 수행되지 않도록 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Available starting in <ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph> 에서 시작 가능</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">비동기 플러시 작업을 나타내는 작업입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>If the operation isn’t cancelled, the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> calls the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Flush%2A&gt;</ph> method, which means that no action performed.</source>
          <target state="translated">작업이 취소 되지 않습니다는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 호출은 <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Flush%2A&gt;</ph> 메서드 이면 아무 작업도 수행 합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="T:System.IO.UnmanagedMemoryStream">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class in a safe buffer, or by using a pointer to an unmanaged memory location.</source>
          <target state="translated">안전한 버퍼에서 또는 관리되지 않는 메모리 위치에 대한 포인터를 사용하여 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>A pointer to an unmanaged memory location.</source>
          <target state="translated">관리되지 않는 메모리 위치에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The length of the memory to use.</source>
          <target state="translated">사용할 메모리의 길이입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The total amount of memory assigned to the stream.</source>
          <target state="translated">시스템에 할당된 총 메모리 양입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class by using a pointer to an unmanaged memory location.</source>
          <target state="translated">관리되지 않는 메모리 위치에 대한 포인터를 사용하여 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>This method is equivalent to the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">이 메서드는 해당 하는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor%2A&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>It supports methods that need to initialize the pointer before setting stream variables and, therefore, cannot call the parameterized constructor.</source>
          <target state="translated">스트림 변수를 설정 하기 전에 마우스 포인터를 초기화 해야 하 고 따라서 매개 변수가 있는 생성자를 호출할 수 없습니다는 메서드를 지원 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Such methods should use the default constructor, <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor&gt;</ph>, initialize the pointer, and then invoke the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Initialize%2A&gt;</ph> method.</source>
          <target state="translated">이러한 메서드는 기본 생성자를 사용 해야 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor&gt;</ph>, 고 포인터를 초기화 하 고 다음 호출에서 <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Initialize%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The user does not have the required permission.</source>
          <target state="translated">사용자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> 값이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 값이 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> value is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> 값이 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is large enough to cause an overflow.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> 값이 오버플로를 발생시킬 만큼 큰 경우</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>for accessing unmanaged memory.</source>
          <target state="translated">관리 되지 않는 메모리에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The buffer to contain the unmanaged memory stream.</source>
          <target state="translated">관리되지 않는 메모리 스트림이 포함될 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The byte position in the buffer at which to start the unmanaged memory stream.</source>
          <target state="translated">관리되지 않는 메모리 스트림을 시작할 버퍼의 바이트 위치입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The length of the unmanaged memory stream.</source>
          <target state="translated">관리되지 않는 메모리 스트림의 길이입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The mode of file access to the unmanaged memory stream.</source>
          <target state="translated">관리되지 않는 메모리 스트림에 대한 파일 액세스 모드입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class in a safe buffer with a specified offset, length, and file access.</source>
          <target state="translated">지정된 오프셋, 길이 및 파일 액세스를 사용하여 안전한 버퍼에서 <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>Gets the length of the data in a stream.</source>
          <target state="translated">스트림의 데이터 길이를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>The length of the data in the stream.</source>
          <target state="translated">스트림의 데이터 길이입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>If unchanged since the stream was initialized, this property returns the length value provided to the constructor.</source>
          <target state="translated">스트림이 초기화 이후 변경 되지 않았으면,이 속성이 생성자에 제공 되는 길이 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>If changes to the stream have occurred, this property reflects any changes to the length of the data.</source>
          <target state="translated">스트림에 대 한 변경 내용이 발생 한 경우이 속성은 데이터의 길이에 변경 내용을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">읽기 / 쓰기 사용 하 여 관리 되지 않는 메모리를 하는 방법은 다음 코드 예제는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">관리 되지 않는 메모리 블록 할당 되 고 사용 하 여 할당 취소는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>Gets or sets the current position in a stream.</source>
          <target state="translated">스트림 내의 현재 위치를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>The current position in the stream.</source>
          <target state="translated">스트림 내의 현재 위치입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>When a stream is initialized, this property is set to zero.</source>
          <target state="translated">스트림을 초기화 될 때이 속성을 0으로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>Although you can set the position of the stream beyond the stream's capacity, you will not be able to access that area using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph> methods.</source>
          <target state="translated">스트림 용량 이상 스트림 위치를 설정할 수 있지만 됩니다 사용 하 여 해당 영역에 액세스할 수는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source><ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> will return 0 and <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph> will throw a <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> 0을 반환 하 고 <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph> throw 됩니다는 <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>This support is primarily for design and code compatibility with basic stream operations.</source>
          <target state="translated">이 지원은 기본 스트림 작업의 디자인 및 코드 호환을 위해 합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>The position is set to a value that is less than zero, or the position is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> or results in overflow when added to the current pointer.</source>
          <target state="translated">위치가 0보다 작은 값으로 설정된 경우 또는 위치가 <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>보다 크거나 현재 포인터에 추가될 때 오버플로가 발생할 경우</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>Gets or sets a byte pointer to a stream based on the current position in the stream.</source>
          <target state="translated">스트림 내의 현재 위치를 기준으로 스트림에 대한 바이트 포인터를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>A byte pointer.</source>
          <target state="translated">바이트 포인터입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>To return a pointer to the entire stream, set the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Position%2A&gt;</ph> property to zero, and then call this property.</source>
          <target state="translated">전체 스트림을 대 한 포인터를 반환 하려면 설정는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Position%2A&gt;</ph> 속성을 0으로이 속성을 호출 합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The current position is larger than the capacity of the stream.</source>
          <target state="translated">현재 위치가 스트림의 용량보다 큰 경우</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The position is being set is not a valid position in the current stream.</source>
          <target state="translated">설정할 위치가 현재 스트림에서 올바르지 않은 경우</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The pointer is being set to a lower value than the starting position of the stream.</source>
          <target state="translated">포인터가 스트림의 시작 위치 값보다 낮은 값으로 설정되는 경우</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The stream was initialized for use with a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph>에 사용할 수 있도록 스트림이 초기화되었습니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /&gt;</ph> property is valid only for streams that are initialized with a <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> pointer.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /&gt;</ph> 속성은 <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> 포인터를 사용하여 초기화된 스트림에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>for calling unmanaged code, such as calling native code with platform invoke or COM integration.</source>
          <target state="translated">비관리 코드를 호출 하는 것에 대 한 호출에 플랫폼을 사용 하 여 네이티브 코드를 호출 하는 등 또는 COM 통합 합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">보안 동작: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When this method returns, contains the specified byte array with the values between <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the bytes read from the current source.</source>
          <target state="translated">이 메서드는 지정된 바이트 배열의 값이 <bpt id="p1">&lt;c&gt;</bpt>오프셋<ept id="p1">&lt;/c&gt;</ept>과 (<bpt id="p2">&lt;c&gt;</bpt>오프셋<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>카운트<ept id="p3">&lt;/c&gt;</ept> - 1) 사이에서 현재 소스로부터 읽어온 바이트로 교체된 상태로 반환됩니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin storing the data read from the current stream.</source>
          <target state="translated">현재 스트림에서 읽은 데이터를 저장하기 시작하는 <bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept>의 바이트 오프셋(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to read from the current stream.</source>
          <target state="translated">현재 스트림에서 읽을 최대 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Reads the specified number of bytes into the specified array.</source>
          <target state="translated">지정된 바이트 수를 지정된 배열로 읽어 들입니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The total number of bytes read into the buffer.</source>
          <target state="translated">버퍼로 읽어온 총 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</source>
          <target state="translated">이 바이트 수는 현재 바이트가 충분하지 않은 경우 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달하면 0이 됩니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`offset`</ph> parameter gives the offset of the byte in the <ph id="ph2">`array`</ph> parameter (the buffer index) at which to begin reading, and the <ph id="ph3">`count`</ph> parameter gives the maximum number of bytes to be read from this stream.</source>
          <target state="translated"><ph id="ph1">`offset`</ph> 의 바이트 오프셋을 제공 하는 매개 변수는 <ph id="ph2">`array`</ph> 읽기를 시작 하는 매개 변수 (버퍼 인덱스) 및 <ph id="ph3">`count`</ph> 매개 변수는이 스트림에서 읽을 바이트의 최대 수를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The returned value is the actual number of bytes read, or zero if the end of the stream is reached.</source>
          <target state="translated">반환 된 값은 스트림의 끝에 도달 하면 0 또는 읽은 바이트의 실제 수 합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If the read operation is successful, the current position of the stream is advanced by the number of bytes read.</source>
          <target state="translated">읽기 작업이 성공한 경우 스트림의 현재 위치는 읽은 바이트 수 만큼 앞 합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If an exception occurs, the current position of the stream is unchanged.</source>
          <target state="translated">예외가 발생 하면 스트림의 현재 위치는 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> method returns zero only after reaching the end of the stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> 메서드 스트림의 끝에 도달한 후에 0을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Otherwise, <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> always reads at least one byte from the stream before returning.</source>
          <target state="translated">그렇지 않으면 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> 항상 스트림에서 반환 하기 전에 적어도 1 바이트를 읽습니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If no data is available from the stream upon a call to <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph>, the method will block until at least one byte of data can be returned.</source>
          <target state="translated">에 대 한 호출 시 스트림에서 없는 데이터를 사용할 수 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph>, 메서드는 최소한 1 바이트의 데이터를 반환 될 때까지 차단 됩니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">구현을 스트림의 끝에 도달 하지 하는 경우에 요청 된 것 보다 적은 바이트를 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">읽기 / 쓰기 사용 하 여 관리 되지 않는 메모리를 하는 방법은 다음 코드 예제는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">관리 되지 않는 메모리 블록 할당 되 고 사용 하 여 할당 취소는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The underlying memory does not support reading.</source>
          <target state="translated">내부 메모리가 읽기를 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /&gt;</ph> property is set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /&gt;</ph> 속성은 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is set to <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>로 설정된 경우</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 매개 변수가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="count" /&gt;</ph> parameter is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 매개 변수가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The length of the buffer array minus the <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than the <ph id="ph2">&lt;paramref name="count" /&gt;</ph> parameter.</source>
          <target state="translated">버퍼 배열 길이에서 <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 매개 변수를 뺀 값이 <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 매개 변수보다 작은 경우</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write the data into.</source>
          <target state="translated">데이터를 쓸 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">스트림의 데이터를 쓰기 시작할 <bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept>의 바이트 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">읽을 최대 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">취소 요청을 모니터링할 토큰입니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads the specified number of bytes into the specified array.</source>
          <target state="translated">지정된 바이트 수를 지정된 배열로 비동기 방식으로 읽어 들입니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Available starting in <ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph> 에서 시작 가능</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">비동기 읽기 작업을 나타내는 작업입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> 매개 변수의 값은 버퍼 안으로 읽어들인 총 바이트 수를 포함합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">현재 사용할 수 있는 바이트 수가 요청된 수보다 작을 경우 결과 값이 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If an exception occurs during the read operation, it will be set as the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph> of the property of the returned task.</source>
          <target state="translated">로 설정할 수는 읽기 작업 중에 예외가 발생 하는 경우는 <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph> 반환된 된 작업의 속성입니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>Reads a byte from a stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</source>
          <target state="translated">스트림에서 바이트를 읽고 스트림 내 위치를 한 바이트씩 앞으로 이동하거나 스트림 끝일 경우 -1을 반환합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The unsigned byte cast to an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> object, or -1 if at the end of the stream.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 개체로 캐스팅된 부호 없는 바이트이거나, 스트림의 끝에 있는 경우 -1입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>Use this method to return integer values from the stream.</source>
          <target state="translated">이 메서드를 사용 하 여 스트림에서 정수 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">읽기 / 쓰기 사용 하 여 관리 되지 않는 메모리를 하는 방법은 다음 코드 예제는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">관리 되지 않는 메모리 블록 할당 되 고 사용 하 여 할당 취소는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object is passed to a method which checks the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> property before attempting to read and display the contents to the console.</source>
          <target state="translated">이 예제는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 개체를 검사 하는 메서드에 전달 되는 <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> 을 읽고 내용을 콘솔에 표시 하기 전에 속성입니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The underlying memory does not support reading.</source>
          <target state="translated">내부 메모리가 읽기를 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The current position is at the end of the stream.</source>
          <target state="translated">현재 위치가 스트림의 끝에 있는 경우</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The point relative to <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> to begin seeking from.</source>
          <target state="translated">검색을 시작할 <bpt id="p1">&lt;c&gt;</bpt>원점<ept id="p1">&lt;/c&gt;</ept>에 상대적인 위치입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Specifies the beginning, the end, or the current position as a reference point for <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept>, using a value of type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> 형식의 값을 사용하여 시작, 끝 또는 현재 위치를 <bpt id="p1">&lt;c&gt;</bpt>원점<ept id="p1">&lt;/c&gt;</ept>에 대한 참조 지점으로 지정합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Sets the current position of the current stream to the given value.</source>
          <target state="translated">현재 스트림의 현재 위치를 주어진 값으로 설정합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The new position in the stream.</source>
          <target state="translated">스트림 내의 새 위치입니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>For more information about seeking, see <ph id="ph1">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph>.</source>
          <target state="translated">검색 하는 방법에 대 한 자세한 내용은 참조 <ph id="ph1">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>An attempt was made to seek before the beginning of the stream.</source>
          <target state="translated">스트림의 시작 위치 앞에서 검색하려고 한 경우</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> value is larger than the maximum size of the stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 값이 스트림의 최대 크기보다 큰 경우</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source><ph id="ph1">&lt;paramref name="loc" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="loc" /&gt;</ph>이 잘못되었습니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The length of the stream.</source>
          <target state="translated">스트림의 길이입니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>Sets the length of a stream to a specified value.</source>
          <target state="translated">스트림의 길이를 지정된 값으로 설정합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>If the given value is less than the current length of the stream, the stream is truncated.</source>
          <target state="translated">지정된 된 값은 스트림의 현재 길이 보다 작은 경우는 스트림이 잘렸습니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>If the given value is larger than the current length of the stream, the stream is expanded.</source>
          <target state="translated">지정된 된 값은 스트림의 현재 길이 보다 큰 경우 스트림을 확장 합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>If the stream is expanded, the contents of the stream between the old and the new lengths are undefined.</source>
          <target state="translated">스트림을 확장 하는 경우 이전 클라이언트 암호 및 새 길이 간의 스트림의 내용을 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>A stream must support both writing and seeking for <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.SetLength%2A&gt;</ph> to work.</source>
          <target state="translated">스트림이 쓰기와 검색을 모두 지원 해야 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.SetLength%2A&gt;</ph> 에서 실행 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>An I/O error has occurred.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The underlying memory does not support writing.</source>
          <target state="translated">내부 메모리가 쓰기를 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>An attempt is made to write to the stream and the <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> property is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">스트림에 쓰려고 하는데 <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> 속성이 <ph id="ph2">&lt;see langword="false" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The specified <ph id="ph1">&lt;paramref name="value" /&gt;</ph> exceeds the capacity of the stream.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 스트림의 용량을 초과한 경우</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The specified <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is negative.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 음수인 경우</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The byte array from which to copy bytes to the current stream.</source>
          <target state="translated">현재 스트림으로 복사할 바이트가 들어 있는 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The offset in the buffer at which to begin copying bytes to the current stream.</source>
          <target state="translated">현재 스트림으로 바이트를 복사하기 시작할 버퍼의 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write to the current stream.</source>
          <target state="translated">현재 스트림에 쓸 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writes a block of bytes to the current stream using data from a buffer.</source>
          <target state="translated">버퍼의 데이터를 사용하여 현재 스트림에 바이트 블록을 씁니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writing occurs at the current position in the stream.</source>
          <target state="translated">쓰기 스트림의 현재 위치에서 발생합니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">읽기 / 쓰기 사용 하 여 관리 되지 않는 메모리를 하는 방법은 다음 코드 예제는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">관리 되지 않는 메모리 블록 할당 되 고 사용 하 여 할당 취소는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The underlying memory does not support writing.</source>
          <target state="translated">내부 메모리가 쓰기를 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An attempt is made to write to the stream and the <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> property is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">스트림에 쓰려고 하는데 <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> 속성이 <ph id="ph2">&lt;see langword="false" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="count" /&gt;</ph> value is greater than the capacity of the stream.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> 값이 스트림의 용량보다 큰 경우</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The position is at the end of the stream capacity.</source>
          <target state="translated">위치가 스트림 용량의 끝에 있는 경우</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">I/O 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>One of the specified parameters is less than zero.</source>
          <target state="translated">지정된 매개 변수 중 하나가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter minus the length of the <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> parameter is less than the <ph id="ph3">&lt;paramref name="count" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 매개 변수에서 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> 매개 변수의 길이를 뺀 값이 <ph id="ph3">&lt;paramref name="count" /&gt;</ph> 매개 변수보다 작은 경우</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write data from.</source>
          <target state="translated">데이터를 쓸 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">스트림으로 바이트를 복사하기 시작할 <bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept>의 바이트 오프셋(0부터 시작)입니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">쓸 최대 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">취소 요청을 모니터링할 토큰입니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">바이트의 시퀀스를 현재 스트림에 비동기적으로 쓰고 쓰여진 바이트 수만큼 이 스트림 내의 현재 위치를 앞으로 이동한 후 취소 요청을 모니터링합니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Available starting in <ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph></source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph> 에서 시작 가능</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">비동기 쓰기 작업을 나타내는 작업입니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If an exception occurs during the write operation, it will be set as the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph> of the property of the returned task.</source>
          <target state="translated">로 설정할 수는 쓰기 작업 중에 예외가 발생 하는 경우는 <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph> 반환된 된 작업의 속성입니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>A byte value written to the stream.</source>
          <target state="translated">스트림에 쓰여지는 바이트 값입니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>Writes a byte to the current position in the file stream.</source>
          <target state="translated">파일 스트림의 현재 위치에 바이트를 씁니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">읽기 / 쓰기 사용 하 여 관리 되지 않는 메모리를 하는 방법은 다음 코드 예제는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">관리 되지 않는 메모리 블록 할당 되 고 사용 하 여 할당 취소는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object is passed to a method which checks the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> property before attempting to write the data to the stream.</source>
          <target state="translated">이 예제는 <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> 개체를 검사 하는 메서드에 전달 되는 <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> 스트림에 데이터를 쓰기 전에 속성입니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The stream is closed.</source>
          <target state="translated">스트림이 닫혔습니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The underlying memory does not support writing.</source>
          <target state="translated">내부 메모리가 쓰기를 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>An attempt is made to write to the stream and the <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> property is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">스트림에 쓰려고 하는데 <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> 속성이 <ph id="ph2">&lt;see langword="false" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The current position is at the end of the capacity of the stream.</source>
          <target state="translated">현재 위치가 스트림 용량의 끝에 있는 경우</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The supplied <ph id="ph1">&lt;paramref name="value" /&gt;</ph> causes the stream exceed its maximum capacity.</source>
          <target state="translated">제공된 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>로 인해 스트림이 최대 용량을 초과하는 경우</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>