<Type Name="FileStream" FullName="System.IO.FileStream">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9f964f0f32602678adcd930dd6bbbd74bdd8e487" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37652869" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FileStream : System.IO.Stream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileStream extends System.IO.Stream" />
  <TypeSignature Language="DocId" Value="T:System.IO.FileStream" />
  <TypeSignature Language="VB.NET" Value="Public Class FileStream&#xA;Inherits Stream" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileStream : System::IO::Stream" />
  <TypeSignature Language="F#" Value="type FileStream = class&#xA;    inherit Stream" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="2b775-101">파일에 대해 <see cref="T:System.IO.Stream" />을 제공하여 동기 및 비동기 읽기/쓰기 작업을 모두 지원합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2b775-101">Provides a <see cref="T:System.IO.Stream" /> for a file, supporting both synchronous and asynchronous read and write operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-102">사용 된 <xref:System.IO.FileStream> 클래스의 읽기, 쓰기, 파일 시스템에는 파일, 열기 및 닫기에 파이프, 표준 입력 및 표준 출력을 포함 하 여 다른 파일 관련 운영 체제 핸들 조작 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-102">Use the <xref:System.IO.FileStream> class to read from, write to, open, and close files on a file system, and to manipulate other file-related operating system handles, including pipes, standard input, and standard output.</span></span> <span data-ttu-id="2b775-103">사용할 수는 <xref:System.IO.FileStream.Read%2A>, <xref:System.IO.FileStream.Write%2A>, <xref:System.IO.Stream.CopyTo%2A>, 및 <xref:System.IO.FileStream.Flush%2A> 동기 작업을 수행 하는 방법 또는 <xref:System.IO.FileStream.ReadAsync%2A>를 <xref:System.IO.FileStream.WriteAsync%2A>를 <xref:System.IO.Stream.CopyToAsync%2A>, 및 <xref:System.IO.FileStream.FlushAsync%2A> 비동기 수행 하는 메서드 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-103">You can use the <xref:System.IO.FileStream.Read%2A>, <xref:System.IO.FileStream.Write%2A>, <xref:System.IO.Stream.CopyTo%2A>, and <xref:System.IO.FileStream.Flush%2A> methods to perform synchronous operations, or the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A> methods to perform asynchronous operations.</span></span> <span data-ttu-id="2b775-104">비동기 메서드를 사용 하 여 주 스레드를 차단 하지 않고 리소스 집중형 파일 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-104">Use the asynchronous methods to perform resource-intensive file operations without blocking the main thread.</span></span> <span data-ttu-id="2b775-105">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 응용 프로그램 또는 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 응용 프로그램에서 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-105">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="2b775-106"><xref:System.IO.FileStream> 입력 버퍼와 성능 향상을 위해 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-106"><xref:System.IO.FileStream> buffers input and output for better performance.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="2b775-107">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-107">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="2b775-108">형식을 사용 하 여 마쳤으면 직접 또는 간접적으로의 삭제 해야 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-108">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="2b775-109">직접 형식의 dispose 호출 해당 <xref:System.IDisposable.Dispose%2A> 의 메서드를 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-109">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="2b775-110">삭제 하지 직접, 언어 구문 같은 사용 `using` (C#에서) 또는 `Using` (Visual Basic에서는).</span><span class="sxs-lookup"><span data-stu-id="2b775-110">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="2b775-111">자세한 내용은 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하세요.를 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-111">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="2b775-112"><xref:System.IO.FileStream.IsAsync%2A> 속성 파일 핸들을 비동기식으로 열렸을 여부를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-112">The <xref:System.IO.FileStream.IsAsync%2A> property detects whether the file handle was opened asynchronously.</span></span> <span data-ttu-id="2b775-113">인스턴스를 만들 때이 값을 지정 하는 <xref:System.IO.FileStream> 클래스에 생성자를 사용 하는 `isAsync`를 `useAsync`, 또는 `options` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-113">You specify this value when you create an instance of the <xref:System.IO.FileStream> class using a constructor that has an `isAsync`, `useAsync`, or `options` parameter.</span></span> <span data-ttu-id="2b775-114">속성이 `true`를 스트림에 비동기적으로 파일 작업을 수행 하려면의 겹쳐진된 I/O를 활용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-114">When the property is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously.</span></span> <span data-ttu-id="2b775-115">그러나를 <xref:System.IO.FileStream.IsAsync%2A> 속성에 수 없습니다 `true` 를 호출 하는 <xref:System.IO.FileStream.ReadAsync%2A>를 <xref:System.IO.FileStream.WriteAsync%2A>, 또는 <xref:System.IO.Stream.CopyToAsync%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2b775-115">However, the <xref:System.IO.FileStream.IsAsync%2A> property does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method.</span></span> <span data-ttu-id="2b775-116">경우는 <xref:System.IO.FileStream.IsAsync%2A> 속성은 `false` 및 비동기 읽기를 호출 하 고 쓰기 작업, 여전히 UI 스레드가 차단 되지 않지만 실제 I/O 작업이 동기적으로 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-116">When the <xref:System.IO.FileStream.IsAsync%2A> property is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.</span></span>  
  
 <span data-ttu-id="2b775-117"><xref:System.IO.FileStream.Seek%2A> 메서드는 임의 파일 액세스를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-117">The <xref:System.IO.FileStream.Seek%2A> method supports random access to files.</span></span> <span data-ttu-id="2b775-118"><xref:System.IO.FileStream.Seek%2A> 읽기/쓰기 위치를를 파일 내에서 임의 위치로 이동할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-118"><xref:System.IO.FileStream.Seek%2A> allows the read/write position to be moved to any position within the file.</span></span> <span data-ttu-id="2b775-119">바이트 오프셋된 참조 매개 변수를 사용 하 여 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-119">This is done with byte offset reference point parameters.</span></span> <span data-ttu-id="2b775-120">세 멤버에 의해 표시 된 대로 시작, 현재 위치 또는 기본 파일의 끝 일 수 있는 검색 참조 지점에 상대적인 바이트 오프셋은는 <xref:System.IO.SeekOrigin> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-120">The byte offset is relative to the seek reference point, which can be the beginning, the current position, or the end of the underlying file, as represented by the three members of the <xref:System.IO.SeekOrigin> enumeration.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b775-121">디스크 파일은 항상 임의 액세스를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-121">Disk files always support random access.</span></span> <span data-ttu-id="2b775-122">생성 시 합니다 <xref:System.IO.FileStream.CanSeek%2A> 속성 값으로 설정 됩니다 `true` 또는 `false` 내부 파일 형식에 따라 합니다. 기본 파일 형식이 면 FILE_TYPE_DISK, winbase.h에에 정의 된 대로 합니다 <xref:System.IO.FileStream.CanSeek%2A> 속성 값이 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-122">At the time of construction, the <xref:System.IO.FileStream.CanSeek%2A> property value is set to `true` or `false` depending on the underlying file type.If the underlying file type is FILE_TYPE_DISK, as defined in winbase.h, the <xref:System.IO.FileStream.CanSeek%2A> property value is `true`.</span></span> <span data-ttu-id="2b775-123">그렇지 않으면 합니다 <xref:System.IO.FileStream.CanSeek%2A> 속성 값이 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-123">Otherwise, the <xref:System.IO.FileStream.CanSeek%2A> property value is `false`.</span></span>  
  
 <span data-ttu-id="2b775-124">프로세스를 잠근 파일의 일부를 사용 하 여 종료 되거나 처리 되지 않은 잠금에 있는 파일을 닫습니다, 경우 동작이 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-124">If a process terminates with part of a file locked or closes a file that has outstanding locks, the behavior is undefined.</span></span>  
  
 <span data-ttu-id="2b775-125">디렉터리 작업 및 다른 파일 작업에 대 한 참조를 <xref:System.IO.File>, <xref:System.IO.Directory>, 및 <xref:System.IO.Path> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-125">For directory operations and other file operations, see the <xref:System.IO.File>, <xref:System.IO.Directory>, and <xref:System.IO.Path> classes.</span></span> <span data-ttu-id="2b775-126">합니다 <xref:System.IO.File> 클래스의 생성을 위해 정적 메서드를 사용 하는 유틸리티 클래스는 <xref:System.IO.FileStream> 파일 경로 기반으로 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-126">The <xref:System.IO.File> class is a utility class that has static methods primarily for the creation of <xref:System.IO.FileStream> objects based on file paths.</span></span> <span data-ttu-id="2b775-127"><xref:System.IO.MemoryStream> 클래스는 바이트 배열에서 스트림을 만듭니다와 유사 합니다 <xref:System.IO.FileStream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-127">The <xref:System.IO.MemoryStream> class creates a stream from a byte array and is similar to the <xref:System.IO.FileStream> class.</span></span>  
  
 <span data-ttu-id="2b775-128">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-128">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
## <a name="detection-of-stream-position-changes"></a><span data-ttu-id="2b775-129">Stream 위치 변경 내용 검색</span><span class="sxs-lookup"><span data-stu-id="2b775-129">Detection of Stream Position Changes</span></span>  
 <span data-ttu-id="2b775-130">경우는 <xref:System.IO.FileStream> 개체 핸들에는 배타적 보류 없는, 다른 스레드가 파일 핸들을 동시에 액세스 및 파일 핸들을 사용 하 여 연결 된 운영 체제의 파일 포인터의 위치를 변경할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-130">When a <xref:System.IO.FileStream> object does not have an exclusive hold on its handle, another thread could access the file handle concurrently and change the position of the operating system's file pointer that is associated with the file handle.</span></span> <span data-ttu-id="2b775-131">이 경우 캐시 위치는 <xref:System.IO.FileStream> 개체 및 버퍼에 캐시 된 데이터가 손상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-131">In this case, the cached position in the <xref:System.IO.FileStream> object and the cached data in the buffer could be compromised.</span></span> <span data-ttu-id="2b775-132">합니다 <xref:System.IO.FileStream> 되도록 운영 체제의 핸들 위치에서 사용 하는 캐시 된 위치와 동일한 캐시 된 버퍼에 액세스 하는 방법에 대 한 검사를 정기적으로 수행 하는 개체는 <xref:System.IO.FileStream> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-132">The <xref:System.IO.FileStream> object routinely performs checks on methods that access the cached buffer to ensure that the operating system's handle position is the same as the cached position used by the <xref:System.IO.FileStream> object.</span></span>  
  
 <span data-ttu-id="2b775-133">핸들 위치 예기치 않게 변경에 대 한 호출에서 검색 된 경우는 <xref:System.IO.FileStream.Read%2A> 메서드를.NET Framework는 버퍼의 내용을 삭제 및 다시 파일에서 스트림을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-133">If an unexpected change in the handle position is detected in a call to the <xref:System.IO.FileStream.Read%2A> method, the .NET Framework discards the contents of the buffer and reads the stream from the file again.</span></span> <span data-ttu-id="2b775-134">이 크기는 파일 및 파일 스트림 위치에 영향을 줄 수 있는 다른 프로세스에 따라 성능에 영향을 줄 수입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-134">This can affect performance, depending on the size of the file and any other processes that could affect the position of the file stream.</span></span>  
  
 <span data-ttu-id="2b775-135">에 대 한 호출에서 핸들 위치를 예기치 않은 변경이 감지 될 경우는 <xref:System.IO.FileStream.Write%2A> 메서드는 버퍼의 내용이 삭제 됩니다와 <xref:System.IO.IOException> 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-135">If an unexpected change in the handle position is detected in a call to the <xref:System.IO.FileStream.Write%2A> method, the contents of the buffer are discarded and an <xref:System.IO.IOException> exception is thrown.</span></span>  
  
 <span data-ttu-id="2b775-136"><xref:System.IO.FileStream> 개체는 없습니다 단독으로 보유 해당 핸들을 경우 중 하나는 <xref:System.IO.FileStream.SafeFileHandle%2A> 핸들을 노출 하려면 속성에 액세스 또는 <xref:System.IO.FileStream> 개체에 지정 됩니다는 <xref:System.IO.FileStream.SafeFileHandle%2A> 생성자에서 속성.</span><span class="sxs-lookup"><span data-stu-id="2b775-136">A <xref:System.IO.FileStream> object will not have an exclusive hold on its handle when either the <xref:System.IO.FileStream.SafeFileHandle%2A> property is accessed to expose the handle or the <xref:System.IO.FileStream> object is given the <xref:System.IO.FileStream.SafeFileHandle%2A> property in its constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-137">다음 예제에서는 몇 가지를 보여 줍니다는 <xref:System.IO.FileStream> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-137">The following example demonstrates some of the <xref:System.IO.FileStream> constructors.</span></span>  
  
 [!code-cpp[fstream class#1](~/samples/snippets/cpp/VS_Snippets_CLR/FStream Class/CPP/fstream class.cpp#1)]
 [!code-csharp[fstream class#1](~/samples/snippets/csharp/VS_Snippets_CLR/FStream Class/CS/fstream class.cs#1)]
 [!code-vb[fstream class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FStream Class/VB/fstream class.vb#1)]  
  
 <span data-ttu-id="2b775-138">다음 예제에서는 파일에 비동기적으로 작성 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-138">The following example shows how to write to a file asynchronously.</span></span> <span data-ttu-id="2b775-139">이 코드는 /userinput&gt 및 Button_Click 이라고 하는 Click 이벤트 처리기를 연결 하는 단추 라는 TextBlock에는 WPF 앱에서 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-139">This code runs in a WPF app that has a TextBlock named UserInput and a button hooked up to a Click event handler that is named Button_Click.</span></span> <span data-ttu-id="2b775-140">파일 경로 컴퓨터의 종료 보다 파일로 변경 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-140">The file path needs to be changed to a file than exits on the computer.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#3](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example3.cs#3)]
 [!code-vb[Asynchronous_File_IO_async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.File" />
    <altmember cref="T:System.IO.FileAccess" />
    <altmember cref="T:System.IO.FileMode" />
    <altmember cref="T:System.IO.FileShare" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2b775-141">
            <see cref="T:System.IO.FileStream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-141">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Win32.SafeHandles.SafeFileHandle handle, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As SafeFileHandle, access As FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(Microsoft::Win32::SafeHandles::SafeFileHandle ^ handle, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : Microsoft.Win32.SafeHandles.SafeFileHandle * System.IO.FileAccess -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (handle, access)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="Microsoft.Win32.SafeHandles.SafeFileHandle" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="2b775-142">현재 <see langword="FileStream" /> 개체가 캡슐화할 파일에 대한 파일 핸들입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-142">A file handle for the file that the current <see langword="FileStream" /> object will encapsulate.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="2b775-143">
            <see langword="FileStream" /> 개체의 <see cref="P:System.IO.FileStream.CanRead" /> 및 <see cref="P:System.IO.FileStream.CanWrite" /> 속성을 설정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-143">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-144">지정된 읽기/쓰기 권한을 사용하여 지정된 파일 핸들에 대한 <see cref="T:System.IO.FileStream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-144">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-145">때 <xref:System.IO.Stream.Close%2A> 가 호출 된 핸들을 닫을 수도 및 파일의 핸들 수가 감소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-145">When <xref:System.IO.Stream.Close%2A> is called, the handle is also closed and the file's handle count is decremented.</span></span>  
  
 <span data-ttu-id="2b775-146">`FileStream` 핸들에 대 한 독점적인 제어권을 가진다 고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-146">`FileStream` assumes that it has exclusive control over the handle.</span></span> <span data-ttu-id="2b775-147">읽기, 쓰기 또는 검색 하는 동안 작업을 `FileStream` 유지 되는 핸들을 데이터가 손상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-147">Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption.</span></span> <span data-ttu-id="2b775-148">데이터 보안을 위해 호출 <xref:System.IO.FileStream.Flush%2A> 핸들을 사용 하 여 전과 이외의 메서드를 호출 하지 마십시오. `Close` 수행한 후 핸들을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-148">For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-149">문자열에서 나머지 문자를 포함 하는 두 번째 줄 (문자 "및 두 번째 줄").</span><span class="sxs-lookup"><span data-stu-id="2b775-149">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2b775-150">`FileShare.Read` 해당 기본값인 <xref:System.IO.FileStream> 없이 생성자를 `FileShare` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-150">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
 <span data-ttu-id="2b775-151">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-151">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-152">
            <paramref name="access" />가 <see cref="T:System.IO.FileAccess" />의 필드가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-152">
              <paramref name="access" /> is not a field of <see cref="T:System.IO.FileAccess" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2b775-153">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-153">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-154">I/O 오류(예: 디스크 오류)가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-154">An I/O error, such as a disk error, occurred.</span>
          </span>
          <span data-ttu-id="2b775-155">-또는-  스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-155">-or-  The stream has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="2b775-156">
            <paramref name="access" />가 <see langword="Write" /> 또는 <see langword="ReadWrite" />이고 파일 핸들이 읽기 전용 액세스로 설정된 경우처럼, 지정된 파일 핸들에 대해 운영 체제에서 <paramref name="access" /> 요청을 허용하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-156">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="2b775-157">에 대해 읽기, 쓰기 및 파일에 추가 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-157">for reading, writing, and appending to files.</span>
          </span>
          <span data-ttu-id="2b775-158">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />하십시오 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, 및 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-158">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (IntPtr handle, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As IntPtr, access As FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(IntPtr handle, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : nativeint * System.IO.FileAccess -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (handle, access)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use FileStream(SafeFileHandle handle, FileAccess access) instead")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="2b775-159">현재 <see langword="FileStream" /> 개체가 캡슐화할 파일에 대한 파일 핸들입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-159">A file handle for the file that the current <see langword="FileStream" /> object will encapsulate.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="2b775-160">
            <see langword="FileStream" /> 개체의 <see cref="P:System.IO.FileStream.CanRead" /> 및 <see cref="P:System.IO.FileStream.CanWrite" /> 속성을 설정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-160">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-161">지정된 읽기/쓰기 권한을 사용하여 지정된 파일 핸들에 대한 <see cref="T:System.IO.FileStream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-161">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-162">때 <xref:System.IO.Stream.Close%2A> 가 호출 된 핸들을 닫을 수도 및 파일의 핸들 수가 감소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-162">When <xref:System.IO.Stream.Close%2A> is called, the handle is also closed and the file's handle count is decremented.</span></span>  
  
 <span data-ttu-id="2b775-163">`FileStream` 핸들에 대 한 독점적인 제어권을 가진다 고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-163">`FileStream` assumes that it has exclusive control over the handle.</span></span> <span data-ttu-id="2b775-164">읽기, 쓰기 또는 검색 하는 동안 작업을 `FileStream` 유지 되는 핸들을 데이터가 손상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-164">Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption.</span></span> <span data-ttu-id="2b775-165">데이터 보안을 위해 호출 <xref:System.IO.FileStream.Flush%2A> 핸들을 사용 하 여 전과 이외의 메서드를 호출 하지 마십시오. `Close` 수행한 후 핸들을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-165">For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-166">문자열에서 나머지 문자를 포함 하는 두 번째 줄 (문자 "및 두 번째 줄").</span><span class="sxs-lookup"><span data-stu-id="2b775-166">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2b775-167">`FileShare.Read` 해당 기본값인 <xref:System.IO.FileStream> 없이 생성자를 `FileShare` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-167">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
 <span data-ttu-id="2b775-168">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-168">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-169">
            <paramref name="access" />가 <see cref="T:System.IO.FileAccess" />의 필드가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-169">
              <paramref name="access" /> is not a field of <see cref="T:System.IO.FileAccess" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2b775-170">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-170">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-171">I/O 오류(예: 디스크 오류)가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-171">An I/O error, such as a disk error, occurred.</span>
          </span>
          <span data-ttu-id="2b775-172">-또는-  스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-172">-or-  The stream has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="2b775-173">
            <paramref name="access" />가 <see langword="Write" /> 또는 <see langword="ReadWrite" />이고 파일 핸들이 읽기 전용 액세스로 설정된 경우처럼, 지정된 파일 핸들에 대해 운영 체제에서 <paramref name="access" /> 요청을 허용하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-173">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="2b775-174">에 대해 읽기, 쓰기 및 파일에 추가 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-174">for reading, writing, and appending to files.</span>
          </span>
          <span data-ttu-id="2b775-175">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />하십시오 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, 및 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-175">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (string path, System.IO.FileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(System::String ^ path, System::IO::FileMode mode);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : string * System.IO.FileMode -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (path, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="2b775-176">현재 <see langword="FileStream" /> 개체가 캡슐화할 파일의 상대 또는 절대 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-176">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="2b775-177">파일을 열거나 만드는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-177">A constant that determines how to open or create the file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-178">지정된 경로 및 생성 모드들 사용하여 <see cref="T:System.IO.FileStream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-178">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path and creation mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-179">.NET Framework와 같은 장치 이름에는 경로 통해 실제 디스크에 직접 액세스를 지원 하지 않습니다 "\\\\. \PHYSICALDRIVE0"입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-179">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="2b775-180">`path` 매개 변수는 범용 명명 규칙 (UNC) 공유에 파일을 포함 하는 파일 이름 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-180">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
 <span data-ttu-id="2b775-181">생성자는 파일에 읽기/쓰기 액세스를 부여 하 고 읽기 권한을 공유 것이 열려 (또는 다른 프로세스에 의해 작성 될 때까지 실패에 대 한 파일을 열려는 요청,는 `FileStream` 개체가 닫혔는지를 하지만 읽기 시도 성공).</span><span class="sxs-lookup"><span data-stu-id="2b775-181">The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed).</span></span>  
  
 <span data-ttu-id="2b775-182">읽기 전용 파일을 열려면이 생성자를 사용할 수 없습니다. 허용 하는 생성자를 사용 해야 하는 대신 한 `FileAccess` 에 설정 된 값을 사용 하 여 매개 변수 `FileAccess.Read`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-182">You cannot use this constructor to open read-only files; instead, you must use a constructor that accepts a `FileAccess` parameter with the value set to `FileAccess.Read`.</span></span>  
  
 <span data-ttu-id="2b775-183">버퍼 크기는 4096 바이트 (4KB)의 기본 크기로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-183">The buffer size is set to the default size of 4096 bytes (4 KB).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b775-184">`path` 디스크에 저장 된 파일이 필요 하지 않습니다. 스트림을 통해 액세스를 지 원하는 시스템의 일부가 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-184">`path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</span></span> <span data-ttu-id="2b775-185">예를 들어 시스템에 따라이 클래스는 물리적 장치를 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-185">For example, depending on the system, this class can access a physical device.</span></span>  
  
 <span data-ttu-id="2b775-186"><xref:System.IO.Stream.CanSeek%2A> 됩니다 `true` 모든 <xref:System.IO.FileStream> 파일 캡슐화 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-186"><xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files.</span></span> <span data-ttu-id="2b775-187">경우 `path` 검색을 지원 하지 않는 장치를 나타냄 합니다 <xref:System.IO.FileStream.CanSeek%2A> 결과 속성 <xref:System.IO.FileStream> 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-187">If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`.</span></span> <span data-ttu-id="2b775-188">자세한 내용은 <xref:System.IO.Stream.CanSeek%2A>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="2b775-188">For additional information, see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
 <span data-ttu-id="2b775-189">`FileShare.Read` 해당 기본값인 <xref:System.IO.FileStream> 없이 생성자를 `FileShare` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-189">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
 <span data-ttu-id="2b775-190">없는 생성자는 <xref:System.IO.FileAccess> 매개 변수를 경우 합니다 `mode` 매개 변수는 설정 <xref:System.IO.FileMode.Append>, <xref:System.IO.FileAccess.Write> 기본 액세스는 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-190">For constructors without a <xref:System.IO.FileAccess> parameter, if the `mode` parameter is set to <xref:System.IO.FileMode.Append>, <xref:System.IO.FileAccess.Write> is the default access.</span></span> <span data-ttu-id="2b775-191">액세스로이 고, 그렇지 <xref:System.IO.FileAccess.ReadWrite>합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-191">Otherwise, the access is set to <xref:System.IO.FileAccess.ReadWrite>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-192">문자열에서 나머지 문자를 포함 하는 두 번째 줄 (문자 "및 두 번째 줄").</span><span class="sxs-lookup"><span data-stu-id="2b775-192">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2b775-193">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-193">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-194">다음 코드 예제에서는 바이트 단위로 파일에 데이터를 쓰고 다음 데이터 쓰여졌는지 확인 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-194">The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.</span></span>  
  
 [!code-cpp[System.IO.FileStream1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream1/CPP/source.cpp#1)]
 [!code-csharp[System.IO.FileStream1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream1/CS/source.cs#1)]
 [!code-vb[System.IO.FileStream1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-195">
            <paramref name="path" />가 빈 문자열("")이거나 공백만 포함하거나 하나 이상의 잘못된 문자를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-195">
              <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.</span>
          </span>
          <span data-ttu-id="2b775-196">-또는-  <paramref name="path" />가 NTFS 환경에서 "con:", "com1:", "lpt1:" 등 파일이 아닌 장치를 참조합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-196">-or-  <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-197">
            <paramref name="path" />가 NTFS 이외의 환경에서 파일이 아닌 장치(예: "con:", "com1:", "lpt1:" 등)를 참조하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-197">
              <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-198">
            <paramref name="path" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-198">
              <paramref name="path" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2b775-199">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-199">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="2b775-200">예를 들어, <paramref name="mode" />가 <see langword="FileMode.Truncate" /> 또는 <see langword="FileMode.Open" />인 경우 파일을 찾을 수 없으며 <paramref name="path" />로 지정된 파일이 없는 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-200">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist.</span>
          </span>
          <span data-ttu-id="2b775-201">이러한 모드에는 이 파일이 이미 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-201">The file must already exist in these modes.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-202">
            <paramref name="path" />로 지정한 파일이 이미 있는 경우에 <see langword="FileMode.CreateNew" />를 지정하는 등의 I/O 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-202">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.</span>
          </span>
          <span data-ttu-id="2b775-203">-또는-  스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-203">-or-  The stream has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <span data-ttu-id="2b775-204">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-204">The specified path is invalid, such as being on an unmapped drive.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="2b775-205">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-205">The specified path, file name, or both exceed the system-defined maximum length.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-206">
            <paramref name="mode" />에 잘못된 값이 포함된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-206">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="2b775-207">에 대해 읽기, 쓰기 및 파일에 추가 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-207">for reading, writing, and appending to files.</span>
          </span>
          <span data-ttu-id="2b775-208">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />하십시오 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, 및 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-208">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span>
          </span>
        </permission>
        <altmember cref="F:System.IO.Path.InvalidPathChars" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Win32.SafeHandles.SafeFileHandle handle, valuetype System.IO.FileAccess access, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As SafeFileHandle, access As FileAccess, bufferSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(Microsoft::Win32::SafeHandles::SafeFileHandle ^ handle, System::IO::FileAccess access, int bufferSize);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : Microsoft.Win32.SafeHandles.SafeFileHandle * System.IO.FileAccess * int -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (handle, access, bufferSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="Microsoft.Win32.SafeHandles.SafeFileHandle" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="2b775-209">현재 <see langword="FileStream" /> 개체가 캡슐화할 파일에 대한 파일 핸들입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-209">A file handle for the file that the current <see langword="FileStream" /> object will encapsulate.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="2b775-210">
            <see langword="FileStream" /> 개체의 <see cref="P:System.IO.FileStream.CanRead" /> 및 <see cref="P:System.IO.FileStream.CanWrite" /> 속성을 설정하는 <see cref="T:System.IO.FileAccess" /> 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-210">A <see cref="T:System.IO.FileAccess" /> constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span>
          </span>
        </param>
        <param name="bufferSize">
          <span data-ttu-id="2b775-211">버퍼 크기를 나타내는 0보다 큰 양의 <see cref="T:System.Int32" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-211">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span>
          </span>
          <span data-ttu-id="2b775-212">기본 버퍼 크기는 4,096입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-212">The default buffer size is 4096.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-213">지정된 읽기/쓰기 권한 및 버퍼 크기를 사용하여 지정된 파일 핸들에 대해 <see cref="T:System.IO.FileStream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-213">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission, and buffer size.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-214">`FileStream` 핸들에 대 한 독점적인 제어권을 가진다 고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-214">`FileStream` assumes that it has exclusive control over the handle.</span></span> <span data-ttu-id="2b775-215">읽기, 쓰기 또는 검색 하는 동안 작업을 `FileStream` 유지 되는 핸들을 데이터가 손상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-215">Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption.</span></span> <span data-ttu-id="2b775-216">데이터 보안을 위해 호출 <xref:System.IO.FileStream.Flush%2A> 핸들을 사용 하 여 전과 이외의 메서드를 호출 하지 마십시오. `Close` 수행한 후 핸들을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-216">For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.</span></span> <span data-ttu-id="2b775-217">또는 읽고 핸들에이 호출 하기 전에 `FileStream` 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-217">Alternately, read and write to the handle before calling this `FileStream` constructor.</span></span>  
  
 <span data-ttu-id="2b775-218">`FileShare.Read` 해당 기본값인 <xref:System.IO.FileStream> 없이 생성자를 `FileShare` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-218">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-219">문자열에서 나머지 문자를 포함 하는 두 번째 줄 (문자 "및 두 번째 줄").</span><span class="sxs-lookup"><span data-stu-id="2b775-219">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2b775-220">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-220">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-221">
            <paramref name="handle" /> 매개 변수가 잘못된 핸들인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-221">The <paramref name="handle" /> parameter is an invalid handle.</span>
          </span>
          <span data-ttu-id="2b775-222">-또는-  <paramref name="handle" /> 매개 변수는 동기 핸들인데 비동기적으로 사용되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-222">-or-  The <paramref name="handle" /> parameter is a synchronous handle and it was used asynchronously.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-223">
            <paramref name="bufferSize" /> 매개 변수가 음수인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-223">The <paramref name="bufferSize" /> parameter is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-224">I/O 오류(예: 디스크 오류)가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-224">An I/O error, such as a disk error, occurred.</span>
          </span>
          <span data-ttu-id="2b775-225">-또는-  스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-225">-or-  The stream has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2b775-226">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-226">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="2b775-227">
            <paramref name="access" />가 <see langword="Write" /> 또는 <see langword="ReadWrite" />이고 파일 핸들이 읽기 전용 액세스로 설정된 경우처럼, 지정된 파일 핸들에 대해 운영 체제에서 <paramref name="access" /> 요청을 허용하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-227">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="2b775-228">에 대해 읽기, 쓰기 및 파일에 추가 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-228">for reading, writing, and appending to files.</span>
          </span>
          <span data-ttu-id="2b775-229">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />하십시오 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, 및 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-229">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="2b775-230">관리 되지 않는 코드를 호출할 수 있는 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-230">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="2b775-231">연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-231">Associated enumerations: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (IntPtr handle, System.IO.FileAccess access, bool ownsHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle, valuetype System.IO.FileAccess access, bool ownsHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As IntPtr, access As FileAccess, ownsHandle As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(IntPtr handle, System::IO::FileAccess access, bool ownsHandle);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : nativeint * System.IO.FileAccess * bool -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (handle, access, ownsHandle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use FileStream(SafeFileHandle handle, FileAccess access) instead")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="ownsHandle" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="2b775-232">현재 <see langword="FileStream" /> 개체가 캡슐화할 파일에 대한 파일 핸들입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-232">A file handle for the file that the current <see langword="FileStream" /> object will encapsulate.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="2b775-233">
            <see langword="FileStream" /> 개체의 <see cref="P:System.IO.FileStream.CanRead" /> 및 <see cref="P:System.IO.FileStream.CanWrite" /> 속성을 설정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-233">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span>
          </span>
        </param>
        <param name="ownsHandle">
          <span data-ttu-id="2b775-234">이 <see langword="FileStream" />인스턴스가 파일 핸들을 소유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-234">
              <see langword="true" /> if the file handle will be owned by this <see langword="FileStream" /> instance; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-235">지정된 읽기/쓰기 권한 및 <see langword="FileStream" /> 인스턴스 소유권을 사용하여 지정된 파일 핸들에 대해 <see cref="T:System.IO.FileStream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-235">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission and <see langword="FileStream" /> instance ownership.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-236">`FileStream` 개체 파일에 지정된 된 액세스에 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-236">The `FileStream` object is given the specified access to the file.</span></span> <span data-ttu-id="2b775-237">소유권 핸들의 수로 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-237">The ownership of the handle will be as specified.</span></span> <span data-ttu-id="2b775-238">이 프로세스 핸들에 대 한 호출을 소유 하는 경우는 <xref:System.IO.Stream.Close%2A> 메서드 핸들을 닫습니다도 및 파일의 핸들 수가 감소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-238">If this process owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle and the file's handle count is decremented.</span></span> <span data-ttu-id="2b775-239">`FileStream` 개체 기본 버퍼 크기인 4096 바이트에 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-239">The `FileStream` object is given the default buffer size of 4096 bytes.</span></span>  
  
 <span data-ttu-id="2b775-240">`FileStream` 핸들에 대 한 독점적인 제어권을 가진다 고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-240">`FileStream` assumes that it has exclusive control over the handle.</span></span> <span data-ttu-id="2b775-241">읽기, 쓰기 또는 검색 하는 동안 작업을 `FileStream` 유지 되는 핸들을 데이터가 손상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-241">Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption.</span></span> <span data-ttu-id="2b775-242">데이터 보안을 위해 호출 <xref:System.IO.FileStream.Flush%2A> 핸들을 사용 하 여 전과 이외의 메서드를 호출 하지 마십시오. `Close` 수행한 후 핸들을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-242">For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling methods other than `Close` after you are done using the handle.</span></span>  
  
 <span data-ttu-id="2b775-243">`FileShare.Read` 해당 기본값인 <xref:System.IO.FileStream> 없이 생성자를 `FileShare` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-243">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-244">문자열에서 나머지 문자를 포함 하는 두 번째 줄 (문자 "및 두 번째 줄").</span><span class="sxs-lookup"><span data-stu-id="2b775-244">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2b775-245">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-245">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-246">
            <paramref name="access" />가 <see cref="T:System.IO.FileAccess" />의 필드가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-246">
              <paramref name="access" /> is not a field of <see cref="T:System.IO.FileAccess" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2b775-247">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-247">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-248">I/O 오류(예: 디스크 오류)가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-248">An I/O error, such as a disk error, occurred.</span>
          </span>
          <span data-ttu-id="2b775-249">-또는-  스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-249">-or-  The stream has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="2b775-250">
            <paramref name="access" />가 <see langword="Write" /> 또는 <see langword="ReadWrite" />이고 파일 핸들이 읽기 전용 액세스로 설정된 경우처럼, 지정된 파일 핸들에 대해 운영 체제에서 <paramref name="access" /> 요청을 허용하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-250">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="2b775-251">에 대해 읽기, 쓰기 및 파일에 추가 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-251">for reading, writing, and appending to files.</span>
          </span>
          <span data-ttu-id="2b775-252">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />하십시오 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, 및 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-252">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : string * System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (path, mode, access)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="2b775-253">현재 <see langword="FileStream" /> 개체가 캡슐화할 파일의 상대 또는 절대 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-253">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="2b775-254">파일을 열거나 만드는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-254">A constant that determines how to open or create the file.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="2b775-255">
            <see langword="FileStream" /> 개체에서 파일에 액세스할 수 있는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-255">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object.</span>
          </span>
          <span data-ttu-id="2b775-256">또한 <see langword="FileStream" /> 개체의 <see cref="P:System.IO.FileStream.CanRead" /> 및 <see cref="P:System.IO.FileStream.CanWrite" /> 속성에서 반환하는 값을 결정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-256">This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span>
          </span>
          <span data-ttu-id="2b775-257">
            <c>path</c>가 디스크 파일을 지정하면 <see cref="P:System.IO.FileStream.CanSeek" />는 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-257">
              <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <c>path</c> specifies a disk file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-258">지정된 경로, 생성 모드 및 읽기/쓰기 권한을 사용하여 <see cref="T:System.IO.FileStream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-258">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, and read/write permission.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-259">.NET Framework와 같은 장치 이름에는 경로 통해 실제 디스크에 직접 액세스를 지원 하지 않습니다 "\\\\. \PHYSICALDRIVE0"입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-259">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="2b775-260">`path` 매개 변수는 범용 명명 규칙 (UNC) 공유에 파일을 포함 하는 파일 이름 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-260">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
 <span data-ttu-id="2b775-261">생성자는 파일에 읽기/쓰기 액세스를 부여 하 고 읽기 권한을 공유 것이 열려 (또는 다른 프로세스에 의해 작성 될 때까지 실패에 대 한 파일을 열려는 요청,는 `FileStream` 개체가 닫혔는지를 하지만 읽기 시도 성공).</span><span class="sxs-lookup"><span data-stu-id="2b775-261">The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed).</span></span> <span data-ttu-id="2b775-262">버퍼 크기는 4096 바이트 (4KB)의 기본 크기로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-262">The buffer size is set to the default size of 4096 bytes (4 KB).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b775-263">`path` 디스크에 저장 된 파일이 필요 하지 않습니다. 스트림을 통해 액세스를 지 원하는 시스템의 일부가 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-263">`path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</span></span> <span data-ttu-id="2b775-264">예를 들어 시스템에 따라이 클래스는 물리적 장치를 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-264">For example, depending on the system, this class can access a physical device.</span></span>  
  
 <span data-ttu-id="2b775-265"><xref:System.IO.Stream.CanSeek%2A> 됩니다 `true` 모든 <xref:System.IO.FileStream> 파일 캡슐화 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-265"><xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files.</span></span> <span data-ttu-id="2b775-266">경우 `path` 검색을 지원 하지 않는 장치를 나타냄 합니다 <xref:System.IO.FileStream.CanSeek%2A> 결과 속성 <xref:System.IO.FileStream> 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-266">If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`.</span></span> <span data-ttu-id="2b775-267">자세한 내용은 <xref:System.IO.Stream.CanSeek%2A>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="2b775-267">For additional information, see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
 <span data-ttu-id="2b775-268">`FileShare.Read` 해당 기본값인 <xref:System.IO.FileStream> 없이 생성자를 `FileShare` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-268">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-269">문자열에서 나머지 문자를 포함 하는 두 번째 줄 (문자 "및 두 번째 줄").</span><span class="sxs-lookup"><span data-stu-id="2b775-269">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2b775-270">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-270">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-271">
            <paramref name="path" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-271">
              <paramref name="path" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-272">
            <paramref name="path" />가 빈 문자열("")이거나 공백만 포함하거나 하나 이상의 잘못된 문자를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-272">
              <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.</span>
          </span>
          <span data-ttu-id="2b775-273">-또는-  <paramref name="path" />가 NTFS 환경에서 "con:", "com1:", "lpt1:" 등 파일이 아닌 장치를 참조합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-273">-or-  <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-274">
            <paramref name="path" />가 NTFS 이외의 환경에서 파일이 아닌 장치(예: "con:", "com1:", "lpt1:" 등)를 참조하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-274">
              <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="2b775-275">예를 들어, <paramref name="mode" />가 <see langword="FileMode.Truncate" /> 또는 <see langword="FileMode.Open" />인 경우 파일을 찾을 수 없으며 <paramref name="path" />로 지정된 파일이 없는 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-275">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist.</span>
          </span>
          <span data-ttu-id="2b775-276">이러한 모드에는 이 파일이 이미 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-276">The file must already exist in these modes.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-277">
            <paramref name="path" />로 지정한 파일이 이미 있는 경우에 <see langword="FileMode.CreateNew" />를 지정하는 등의 I/O 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-277">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.</span>
          </span>
          <span data-ttu-id="2b775-278">-또는-  스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-278">-or-  The stream has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2b775-279">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-279">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <span data-ttu-id="2b775-280">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-280">The specified path is invalid, such as being on an unmapped drive.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="2b775-281">
            <paramref name="access" />가 <see langword="Write" /> 또는 <see langword="ReadWrite" />이고 파일 또는 디렉터리가 읽기 전용 액세스로 설정된 경우처럼, 지정된 <paramref name="path" />에 대해 운영 체제에서 <paramref name="access" /> 요청을 허용하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-281">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="2b775-282">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-282">The specified path, file name, or both exceed the system-defined maximum length.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-283">
            <paramref name="mode" />에 잘못된 값이 포함된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-283">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="2b775-284">에 대해 읽기, 쓰기 및 파일에 추가 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-284">for reading, writing, and appending to files.</span>
          </span>
          <span data-ttu-id="2b775-285">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />하십시오 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, 및 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-285">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize, bool isAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Win32.SafeHandles.SafeFileHandle handle, valuetype System.IO.FileAccess access, int32 bufferSize, bool isAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As SafeFileHandle, access As FileAccess, bufferSize As Integer, isAsync As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(Microsoft::Win32::SafeHandles::SafeFileHandle ^ handle, System::IO::FileAccess access, int bufferSize, bool isAsync);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : Microsoft.Win32.SafeHandles.SafeFileHandle * System.IO.FileAccess * int * bool -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (handle, access, bufferSize, isAsync)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="Microsoft.Win32.SafeHandles.SafeFileHandle" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="isAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="2b775-286">이 <see langword="FileStream" /> 개체가 캡슐화할 파일에 대한 파일 핸들입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-286">A file handle for the file that this <see langword="FileStream" /> object will encapsulate.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="2b775-287">
            <see langword="FileStream" /> 개체의 <see cref="P:System.IO.FileStream.CanRead" /> 및 <see cref="P:System.IO.FileStream.CanWrite" /> 속성을 설정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-287">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span>
          </span>
        </param>
        <param name="bufferSize">
          <span data-ttu-id="2b775-288">버퍼 크기를 나타내는 0보다 큰 양의 <see cref="T:System.Int32" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-288">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span>
          </span>
          <span data-ttu-id="2b775-289">기본 버퍼 크기는 4,096입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-289">The default buffer size is 4096.</span>
          </span>
        </param>
        <param name="isAsync">
          <span data-ttu-id="2b775-290">겹쳐진 I/O 모드에서 핸들이 비동기적으로 열렸으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-290">
              <see langword="true" /> if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-291">지정된 읽기/쓰기 권한, 버퍼 크기 및 동기/비동기 상태를 사용하여 지정된 파일 핸들에 대해 <see cref="T:System.IO.FileStream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-291">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission, buffer size, and synchronous or asynchronous state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-292">설정한 합니다 `isAsync` 매개 변수를 `true` 를 비동기적으로 파일 핸들을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-292">You set the `isAsync` parameter to `true` to open the file handle asynchronously.</span></span> <span data-ttu-id="2b775-293">매개 변수는 경우 `true`를 스트림에 비동기적으로 파일 작업을 수행 하려면의 겹쳐진된 I/O를 활용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-293">When the parameter is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously.</span></span> <span data-ttu-id="2b775-294">그러나 매개 변수 없는 되도록 `true` 를 호출 하는 <xref:System.IO.FileStream.ReadAsync%2A>를 <xref:System.IO.FileStream.WriteAsync%2A>, 또는 <xref:System.IO.Stream.CopyToAsync%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2b775-294">However, the parameter does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method.</span></span> <span data-ttu-id="2b775-295">경우는 `isAsync` 매개 변수는 `false` 및 비동기 읽기를 호출 하 고 쓰기 작업, 여전히 UI 스레드가 차단 되지 않지만 실제 I/O 작업이 동기적으로 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-295">When the `isAsync` parameter is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.</span></span>  
  
 <span data-ttu-id="2b775-296">`FileStream` 핸들에 대 한 독점적인 제어권을 가진다 고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-296">`FileStream` assumes that it has exclusive control over the handle.</span></span> <span data-ttu-id="2b775-297">읽기, 쓰기 또는 검색 하는 동안 작업을 `FileStream` 유지 되는 핸들을 데이터가 손상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-297">Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption.</span></span> <span data-ttu-id="2b775-298">데이터 보안을 위해 호출 <xref:System.IO.FileStream.Flush%2A> 핸들을 사용 하 여 전과 이외의 메서드를 호출 하지 마십시오. `Close` 수행한 후 핸들을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-298">For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.</span></span> <span data-ttu-id="2b775-299">또는 읽고 핸들에이 호출 하기 전에 `FileStream` 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-299">Alternately, read and write to the handle before calling this `FileStream` constructor.</span></span>  
  
 <span data-ttu-id="2b775-300">`FileShare.Read` 해당 기본값인 <xref:System.IO.FileStream> 없이 생성자를 `FileShare` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-300">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-301">문자열에서 나머지 문자를 포함 하는 두 번째 줄 (문자 "및 두 번째 줄").</span><span class="sxs-lookup"><span data-stu-id="2b775-301">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2b775-302">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-302">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-303">
            <paramref name="handle" /> 매개 변수가 잘못된 핸들인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-303">The <paramref name="handle" /> parameter is an invalid handle.</span>
          </span>
          <span data-ttu-id="2b775-304">-또는-  <paramref name="handle" /> 매개 변수는 동기 핸들인데 비동기적으로 사용되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-304">-or-  The <paramref name="handle" /> parameter is a synchronous handle and it was used asynchronously.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-305">
            <paramref name="bufferSize" /> 매개 변수가 음수인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-305">The <paramref name="bufferSize" /> parameter is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-306">I/O 오류(예: 디스크 오류)가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-306">An I/O error, such as a disk error, occurred.</span>
          </span>
          <span data-ttu-id="2b775-307">-또는-  스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-307">-or-  The stream has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2b775-308">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-308">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="2b775-309">
            <paramref name="access" />가 <see langword="Write" /> 또는 <see langword="ReadWrite" />이고 파일 핸들이 읽기 전용 액세스로 설정된 경우처럼, 지정된 파일 핸들에 대해 운영 체제에서 <paramref name="access" /> 요청을 허용하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-309">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="2b775-310">에 대해 읽기, 쓰기 및 파일에 추가 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-310">for reading, writing, and appending to files.</span>
          </span>
          <span data-ttu-id="2b775-311">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />하십시오 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, 및 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-311">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="2b775-312">관리 되지 않는 코드를 호출할 수 있는 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-312">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="2b775-313">연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-313">Associated enumerations: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (IntPtr handle, System.IO.FileAccess access, bool ownsHandle, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle, valuetype System.IO.FileAccess access, bool ownsHandle, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As IntPtr, access As FileAccess, ownsHandle As Boolean, bufferSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(IntPtr handle, System::IO::FileAccess access, bool ownsHandle, int bufferSize);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : nativeint * System.IO.FileAccess * bool * int -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (handle, access, ownsHandle, bufferSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use FileStream(SafeFileHandle handle, FileAccess access, int bufferSize) instead")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="ownsHandle" Type="System.Boolean" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="2b775-314">이 <see langword="FileStream" /> 개체가 캡슐화할 파일에 대한 파일 핸들입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-314">A file handle for the file that this <see langword="FileStream" /> object will encapsulate.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="2b775-315">
            <see langword="FileStream" /> 개체의 <see cref="P:System.IO.FileStream.CanRead" /> 및 <see cref="P:System.IO.FileStream.CanWrite" /> 속성을 설정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-315">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span>
          </span>
        </param>
        <param name="ownsHandle">
          <span data-ttu-id="2b775-316">이 <see langword="FileStream" />인스턴스가 파일 핸들을 소유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-316">
              <see langword="true" /> if the file handle will be owned by this <see langword="FileStream" /> instance; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="bufferSize">
          <span data-ttu-id="2b775-317">버퍼 크기를 나타내는 0보다 큰 양의 <see cref="T:System.Int32" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-317">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span>
          </span>
          <span data-ttu-id="2b775-318">기본 버퍼 크기는 4,096입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-318">The default buffer size is 4096.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-319">지정된 읽기/쓰기 권한, <see langword="FileStream" /> 인스턴스 소유권 및 버퍼 크기를 사용하여 지정된 파일 핸들에 대해 <see cref="T:System.IO.FileStream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-319">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission, <see langword="FileStream" /> instance ownership, and buffer size.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-320">`FileStream` 개체 파일에 지정된 된 액세스에 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-320">The `FileStream` object is given the specified access to the file.</span></span> <span data-ttu-id="2b775-321">소유권 핸들의 수로 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-321">The ownership of the handle will be as specified.</span></span> <span data-ttu-id="2b775-322">이 `FileStream` 소유 된 핸들에 대 한 호출을 <xref:System.IO.Stream.Close%2A> 메서드 핸들을 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-322">If this `FileStream` owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle.</span></span> <span data-ttu-id="2b775-323">특히, 파일의 핸들 수는 감소 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-323">In particular, the file's handle count is decremented.</span></span> <span data-ttu-id="2b775-324">`FileStream` 개체에는 지정 된 버퍼 크기를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-324">The `FileStream` object is given the specified buffer size.</span></span>  
  
 <span data-ttu-id="2b775-325">`FileStream` 핸들에 대 한 독점적인 제어권을 가진다 고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-325">`FileStream` assumes that it has exclusive control over the handle.</span></span> <span data-ttu-id="2b775-326">읽기, 쓰기 또는 검색 하는 동안 작업을 `FileStream` 유지 되는 핸들을 데이터가 손상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-326">Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption.</span></span> <span data-ttu-id="2b775-327">데이터 보안을 위해 호출 <xref:System.IO.FileStream.Flush%2A> 핸들을 사용 하 여 전과 이외의 메서드를 호출 하지 마십시오. `Close` 수행한 후 핸들을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-327">For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.</span></span> <span data-ttu-id="2b775-328">또는 읽고 핸들에이 호출 하기 전에 `FileStream` 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-328">Alternately, read and write to the handle before calling this `FileStream` constructor.</span></span>  
  
 <span data-ttu-id="2b775-329">`FileShare.Read` 해당 기본값인 <xref:System.IO.FileStream> 없이 생성자를 `FileShare` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-329">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-330">문자열에서 나머지 문자를 포함 하는 두 번째 줄 (문자 "및 두 번째 줄").</span><span class="sxs-lookup"><span data-stu-id="2b775-330">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2b775-331">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-331">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-332">
            <paramref name="bufferSize" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-332">
              <paramref name="bufferSize" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-333">I/O 오류(예: 디스크 오류)가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-333">An I/O error, such as a disk error, occurred.</span>
          </span>
          <span data-ttu-id="2b775-334">-또는-  스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-334">-or-  The stream has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2b775-335">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-335">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="2b775-336">
            <paramref name="access" />가 <see langword="Write" /> 또는 <see langword="ReadWrite" />이고 파일 핸들이 읽기 전용 액세스로 설정된 경우처럼, 지정된 파일 핸들에 대해 운영 체제에서 <paramref name="access" /> 요청을 허용하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-336">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="2b775-337">에 대해 읽기, 쓰기 및 파일에 추가 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-337">for reading, writing, and appending to files.</span>
          </span>
          <span data-ttu-id="2b775-338">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />하십시오 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, 및 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-338">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess, share As FileShare)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (path, mode, access, share)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="2b775-339">현재 <see langword="FileStream" /> 개체가 캡슐화할 파일의 상대 또는 절대 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-339">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="2b775-340">파일을 열거나 만드는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-340">A constant that determines how to open or create the file.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="2b775-341">
            <see langword="FileStream" /> 개체에서 파일에 액세스할 수 있는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-341">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object.</span>
          </span>
          <span data-ttu-id="2b775-342">또한 <see langword="FileStream" /> 개체의 <see cref="P:System.IO.FileStream.CanRead" /> 및 <see cref="P:System.IO.FileStream.CanWrite" /> 속성에서 반환하는 값을 결정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-342">This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span>
          </span>
          <span data-ttu-id="2b775-343">
            <c>path</c>가 디스크 파일을 지정하면 <see cref="P:System.IO.FileStream.CanSeek" />는 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-343">
              <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <c>path</c> specifies a disk file.</span>
          </span>
        </param>
        <param name="share">
          <span data-ttu-id="2b775-344">프로세스에서 파일을 공유하는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-344">A constant that determines how the file will be shared by processes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-345">지정된 경로, 생성 모드, 읽기/쓰기 권한 및 공유 권한을 사용하여 <see cref="T:System.IO.FileStream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-345">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write permission, and sharing permission.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-346">.NET Framework와 같은 장치 이름에는 경로 통해 실제 디스크에 직접 액세스를 지원 하지 않습니다 "\\\\. \PHYSICALDRIVE0"입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-346">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="2b775-347">`path` 매개 변수는 범용 명명 규칙 (UNC) 공유에 파일을 포함 하는 파일 이름 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-347">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
 <span data-ttu-id="2b775-348">생성자는 파일에 읽기/쓰기 액세스를 부여 하 고 읽기 권한을 공유 것이 열려 (또는 다른 프로세스에 의해 작성 될 때까지 실패에 대 한 파일을 열려는 요청,는 `FileStream` 개체가 닫혔는지를 하지만 읽기 시도 성공).</span><span class="sxs-lookup"><span data-stu-id="2b775-348">The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed).</span></span> <span data-ttu-id="2b775-349">버퍼 크기는 4096 바이트 (4KB)의 기본 크기로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-349">The buffer size is set to the default size of 4096 bytes (4 KB).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b775-350">`path` 디스크에 저장 된 파일이 필요 하지 않습니다. 스트림을 통해 액세스를 지 원하는 시스템의 일부가 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-350">`path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</span></span> <span data-ttu-id="2b775-351">예를 들어 시스템에 따라이 클래스는 물리적 장치를 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-351">For example, depending on the system, this class can access a physical device.</span></span>  
  
 <span data-ttu-id="2b775-352"><xref:System.IO.Stream.CanSeek%2A> 됩니다 `true` 모든 <xref:System.IO.FileStream> 파일 캡슐화 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-352"><xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files.</span></span> <span data-ttu-id="2b775-353">경우 `path` 검색을 지원 하지 않는 장치를 나타냄 합니다 <xref:System.IO.FileStream.CanSeek%2A> 결과 속성 <xref:System.IO.FileStream> 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-353">If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`.</span></span> <span data-ttu-id="2b775-354">자세한 내용은 <xref:System.IO.Stream.CanSeek%2A>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="2b775-354">For additional information, see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-355">문자열에서 나머지 문자를 포함 하는 두 번째 줄 (문자 "및 두 번째 줄").</span><span class="sxs-lookup"><span data-stu-id="2b775-355">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2b775-356">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-356">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-357">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.IO.FileStream.Lock%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2b775-357">This code example is part of a larger example provided for the <xref:System.IO.FileStream.Lock%2A> method.</span></span>  
  
 [!code-cpp[System.IO.FileStream3#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream3/CPP/fstreamlock.cpp#2)]
 [!code-csharp[System.IO.FileStream3#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream3/CS/fstreamlock.cs#2)]
 [!code-vb[System.IO.FileStream3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream3/VB/fstreamlock.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-358">
            <paramref name="path" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-358">
              <paramref name="path" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-359">
            <paramref name="path" />가 빈 문자열("")이거나 공백만 포함하거나 하나 이상의 잘못된 문자를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-359">
              <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.</span>
          </span>
          <span data-ttu-id="2b775-360">-또는-  <paramref name="path" />가 NTFS 환경에서 "con:", "com1:", "lpt1:" 등 파일이 아닌 장치를 참조합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-360">-or-  <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-361">
            <paramref name="path" />가 NTFS 이외의 환경에서 파일이 아닌 장치(예: "con:", "com1:", "lpt1:" 등)를 참조하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-361">
              <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="2b775-362">예를 들어, <paramref name="mode" />가 <see langword="FileMode.Truncate" /> 또는 <see langword="FileMode.Open" />인 경우 파일을 찾을 수 없으며 <paramref name="path" />로 지정된 파일이 없는 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-362">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist.</span>
          </span>
          <span data-ttu-id="2b775-363">이러한 모드에는 이 파일이 이미 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-363">The file must already exist in these modes.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-364">
            <paramref name="path" />로 지정한 파일이 이미 있는 경우에 <see langword="FileMode.CreateNew" />를 지정하는 등의 I/O 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-364">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.</span>
          </span>
          <span data-ttu-id="2b775-365">-또는-  시스템에서 Windows 98 또는 Windows 98 Second Edition이 실행되고 <paramref name="share" />가 <see langword="FileShare.Delete" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-365">-or-  The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> is set to <see langword="FileShare.Delete" />.</span>
          </span>
          <span data-ttu-id="2b775-366">-또는-  스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-366">-or-  The stream has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2b775-367">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-367">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <span data-ttu-id="2b775-368">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-368">The specified path is invalid, such as being on an unmapped drive.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="2b775-369">
            <paramref name="access" />가 <see langword="Write" /> 또는 <see langword="ReadWrite" />이고 파일 또는 디렉터리가 읽기 전용 액세스로 설정된 경우처럼, 지정된 <paramref name="path" />에 대해 운영 체제에서 <paramref name="access" /> 요청을 허용하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-369">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="2b775-370">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-370">The specified path, file name, or both exceed the system-defined maximum length.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-371">
            <paramref name="mode" />에 잘못된 값이 포함된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-371">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="2b775-372">에 대해 읽기, 쓰기 및 파일에 추가 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-372">for reading, writing, and appending to files.</span>
          </span>
          <span data-ttu-id="2b775-373">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />하십시오 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, 및 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-373">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (IntPtr handle, System.IO.FileAccess access, bool ownsHandle, int bufferSize, bool isAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle, valuetype System.IO.FileAccess access, bool ownsHandle, int32 bufferSize, bool isAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As IntPtr, access As FileAccess, ownsHandle As Boolean, bufferSize As Integer, isAsync As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(IntPtr handle, System::IO::FileAccess access, bool ownsHandle, int bufferSize, bool isAsync);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : nativeint * System.IO.FileAccess * bool * int * bool -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (handle, access, ownsHandle, bufferSize, isAsync)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use FileStream(SafeFileHandle handle, FileAccess access, int bufferSize, bool isAsync) instead")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="ownsHandle" Type="System.Boolean" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="isAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="2b775-374">이 <see langword="FileStream" /> 개체가 캡슐화할 파일에 대한 파일 핸들입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-374">A file handle for the file that this <see langword="FileStream" /> object will encapsulate.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="2b775-375">
            <see langword="FileStream" /> 개체의 <see cref="P:System.IO.FileStream.CanRead" /> 및 <see cref="P:System.IO.FileStream.CanWrite" /> 속성을 설정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-375">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span>
          </span>
        </param>
        <param name="ownsHandle">
          <span data-ttu-id="2b775-376">이 <see langword="FileStream" />인스턴스가 파일 핸들을 소유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-376">
              <see langword="true" /> if the file handle will be owned by this <see langword="FileStream" /> instance; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="bufferSize">
          <span data-ttu-id="2b775-377">버퍼 크기를 나타내는 0보다 큰 양의 <see cref="T:System.Int32" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-377">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span>
          </span>
          <span data-ttu-id="2b775-378">기본 버퍼 크기는 4,096입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-378">The default buffer size is 4096.</span>
          </span>
        </param>
        <param name="isAsync">
          <span data-ttu-id="2b775-379">겹쳐진 I/O 모드에서 핸들이 비동기적으로 열렸으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-379">
              <see langword="true" /> if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-380">지정된 읽기/쓰기 권한, <see langword="FileStream" /> 인스턴스 소유권, 버퍼 크기 및 동기/비동기 상태를 사용하여 지정된 파일 핸들에 대해 <see cref="T:System.IO.FileStream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-380">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission, <see langword="FileStream" /> instance ownership, buffer size, and synchronous or asynchronous state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-381">`FileStream` 개체 파일에 지정된 된 액세스에 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-381">The `FileStream` object is given the specified access to the file.</span></span> <span data-ttu-id="2b775-382">소유권 핸들의 수로 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-382">The ownership of the handle will be as specified.</span></span> <span data-ttu-id="2b775-383">이 `FileStream` 소유 된 핸들에 대 한 호출을 <xref:System.IO.Stream.Close%2A> 메서드 핸들을 닫힙니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-383">If this `FileStream` owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle.</span></span> <span data-ttu-id="2b775-384">특히, 파일의 핸들 수는 감소 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-384">In particular, the file's handle count is decremented.</span></span> <span data-ttu-id="2b775-385">`FileStream` 개체에는 지정 된 버퍼 크기를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-385">The `FileStream` object is given the specified buffer size.</span></span>  
  
 <span data-ttu-id="2b775-386">`FileStream` 핸들에 대 한 독점적인 제어권을 가진다 고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-386">`FileStream` assumes that it has exclusive control over the handle.</span></span> <span data-ttu-id="2b775-387">읽기, 쓰기 또는 검색 하는 동안 작업을 `FileStream` 유지 되는 핸들을 데이터가 손상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-387">Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption.</span></span> <span data-ttu-id="2b775-388">데이터 보안을 위해 호출 <xref:System.IO.FileStream.Flush%2A> 핸들을 사용 하 여 전과 이외의 메서드를 호출 하지 마십시오. `Close` 수행한 후 핸들을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-388">For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.</span></span> <span data-ttu-id="2b775-389">또는 읽고 핸들에이 호출 하기 전에 `FileStream` 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-389">Alternately, read and write to the handle before calling this `FileStream` constructor.</span></span>  
  
 <span data-ttu-id="2b775-390">`FileShare.Read` 해당 기본값인 <xref:System.IO.FileStream> 없이 생성자를 `FileShare` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-390">`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-391">문자열에서 나머지 문자를 포함 하는 두 번째 줄 (문자 "및 두 번째 줄").</span><span class="sxs-lookup"><span data-stu-id="2b775-391">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2b775-392">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-392">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-393">
            <paramref name="access" />가 <see langword="FileAccess.Read" />보다 작거나 <see langword="FileAccess.ReadWrite" />보다 큰 경우. 또는 <paramref name="bufferSize" />가 0보다 작거나 같은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-393">
              <paramref name="access" /> is less than <see langword="FileAccess.Read" /> or greater than <see langword="FileAccess.ReadWrite" /> or <paramref name="bufferSize" /> is less than or equal to 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-394">핸들이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-394">The handle is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-395">I/O 오류(예: 디스크 오류)가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-395">An I/O error, such as a disk error, occurred.</span>
          </span>
          <span data-ttu-id="2b775-396">-또는-  스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-396">-or-  The stream has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2b775-397">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-397">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="2b775-398">
            <paramref name="access" />가 <see langword="Write" /> 또는 <see langword="ReadWrite" />이고 파일 핸들이 읽기 전용 액세스로 설정된 경우처럼, 지정된 파일 핸들에 대해 운영 체제에서 <paramref name="access" /> 요청을 허용하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-398">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="2b775-399">비관리 코드에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-399">for access to unmanaged code.</span>
          </span>
          <span data-ttu-id="2b775-400">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-400">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess, share As FileShare, bufferSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, int bufferSize);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare * int -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (path, mode, access, share, bufferSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="2b775-401">현재 <see langword="FileStream" /> 개체가 캡슐화할 파일의 상대 또는 절대 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-401">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="2b775-402">파일을 열거나 만드는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-402">A constant that determines how to open or create the file.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="2b775-403">
            <see langword="FileStream" /> 개체에서 파일에 액세스할 수 있는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-403">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object.</span>
          </span>
          <span data-ttu-id="2b775-404">또한 <see langword="FileStream" /> 개체의 <see cref="P:System.IO.FileStream.CanRead" /> 및 <see cref="P:System.IO.FileStream.CanWrite" /> 속성에서 반환하는 값을 결정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-404">This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span>
          </span>
          <span data-ttu-id="2b775-405">
            <c>path</c>가 디스크 파일을 지정하면 <see cref="P:System.IO.FileStream.CanSeek" />는 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-405">
              <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <c>path</c> specifies a disk file.</span>
          </span>
        </param>
        <param name="share">
          <span data-ttu-id="2b775-406">프로세스에서 파일을 공유하는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-406">A constant that determines how the file will be shared by processes.</span>
          </span>
        </param>
        <param name="bufferSize">
          <span data-ttu-id="2b775-407">버퍼 크기를 나타내는 0보다 큰 양의 <see cref="T:System.Int32" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-407">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span>
          </span>
          <span data-ttu-id="2b775-408">기본 버퍼 크기는 4,096입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-408">The default buffer size is 4096.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-409">지정된 경로, 생성 모드, 읽기/쓰기 및 공유 권한, 버퍼 크기를 사용하여 <see cref="T:System.IO.FileStream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-409">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, and buffer size.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-410">.NET Framework와 같은 장치 이름에는 경로 통해 실제 디스크에 직접 액세스를 지원 하지 않습니다 "\\\\. \PHYSICALDRIVE0"입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-410">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="2b775-411">`path` 매개 변수는 범용 명명 규칙 (UNC) 공유에 파일을 포함 하는 파일 이름 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-411">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b775-412">`path` 디스크에 저장 된 파일이 필요 하지 않습니다. 스트림을 통해 액세스를 지 원하는 시스템의 일부가 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-412">`path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</span></span> <span data-ttu-id="2b775-413">예를 들어 시스템에 따라이 클래스는 물리적 장치를 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-413">For example, depending on the system, this class can access a physical device.</span></span>  
  
 <span data-ttu-id="2b775-414"><xref:System.IO.Stream.CanSeek%2A> 됩니다 `true` 모든 <xref:System.IO.FileStream> 파일 캡슐화 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-414"><xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files.</span></span> <span data-ttu-id="2b775-415">경우 `path` 검색을 지원 하지 않는 장치를 나타냄 합니다 <xref:System.IO.FileStream.CanSeek%2A> 결과 속성 <xref:System.IO.FileStream> 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-415">If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`.</span></span> <span data-ttu-id="2b775-416">자세한 내용은 <xref:System.IO.Stream.CanSeek%2A>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="2b775-416">For additional information, see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-417">문자열에서 나머지 문자를 포함 하는 두 번째 줄 (문자 "및 두 번째 줄").</span><span class="sxs-lookup"><span data-stu-id="2b775-417">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2b775-418">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-418">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-419">
            <paramref name="path" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-419">
              <paramref name="path" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-420">
            <paramref name="path" />가 빈 문자열("")이거나 공백만 포함하거나 하나 이상의 잘못된 문자를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-420">
              <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.</span>
          </span>
          <span data-ttu-id="2b775-421">-또는-  <paramref name="path" />가 NTFS 환경에서 "con:", "com1:", "lpt1:" 등 파일이 아닌 장치를 참조합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-421">-or-  <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-422">
            <paramref name="path" />가 NTFS 이외의 환경에서 파일이 아닌 장치(예: "con:", "com1:", "lpt1:" 등)를 참조하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-422">
              <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-423">
            <paramref name="bufferSize" />가 음수이거나 0인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-423">
              <paramref name="bufferSize" /> is negative or zero.</span>
          </span>
          <span data-ttu-id="2b775-424">-또는-  <paramref name="mode" />, <paramref name="access" /> 또는 <paramref name="share" />에 잘못된 값이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-424">-or-  <paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="2b775-425">예를 들어, <paramref name="mode" />가 <see langword="FileMode.Truncate" /> 또는 <see langword="FileMode.Open" />인 경우 파일을 찾을 수 없으며 <paramref name="path" />로 지정된 파일이 없는 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-425">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist.</span>
          </span>
          <span data-ttu-id="2b775-426">이러한 모드에는 이 파일이 이미 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-426">The file must already exist in these modes.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-427">
            <paramref name="path" />로 지정한 파일이 이미 있는 경우에 <see langword="FileMode.CreateNew" />를 지정하는 등의 I/O 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-427">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.</span>
          </span>
          <span data-ttu-id="2b775-428">-또는-  시스템에서 Windows 98 또는 Windows 98 Second Edition이 실행되고 <paramref name="share" />가 <see langword="FileShare.Delete" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-428">-or-  The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> is set to <see langword="FileShare.Delete" />.</span>
          </span>
          <span data-ttu-id="2b775-429">-또는-  스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-429">-or-  The stream has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2b775-430">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-430">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <span data-ttu-id="2b775-431">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-431">The specified path is invalid, such as being on an unmapped drive.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="2b775-432">
            <paramref name="access" />가 <see langword="Write" /> 또는 <see langword="ReadWrite" />이고 파일 또는 디렉터리가 읽기 전용 액세스로 설정된 경우처럼, 지정된 <paramref name="path" />에 대해 운영 체제에서 <paramref name="access" /> 요청을 허용하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-432">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="2b775-433">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-433">The specified path, file name, or both exceed the system-defined maximum length.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="2b775-434">에 대해 읽기, 쓰기 및 파일에 추가 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-434">for reading, writing, and appending to files.</span>
          </span>
          <span data-ttu-id="2b775-435">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />하십시오 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, 및 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-435">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share, int32 bufferSize, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess, share As FileShare, bufferSize As Integer, useAsync As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, int bufferSize, bool useAsync);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare * int * bool -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (path, mode, access, share, bufferSize, useAsync)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="2b775-436">현재 <see langword="FileStream" /> 개체가 캡슐화할 파일의 상대 또는 절대 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-436">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="2b775-437">파일을 열거나 만드는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-437">A constant that determines how to open or create the file.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="2b775-438">
            <see langword="FileStream" /> 개체에서 파일에 액세스할 수 있는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-438">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object.</span>
          </span>
          <span data-ttu-id="2b775-439">또한 <see langword="FileStream" /> 개체의 <see cref="P:System.IO.FileStream.CanRead" /> 및 <see cref="P:System.IO.FileStream.CanWrite" /> 속성에서 반환하는 값을 결정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-439">This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span>
          </span>
          <span data-ttu-id="2b775-440">
            <c>path</c>가 디스크 파일을 지정하면 <see cref="P:System.IO.FileStream.CanSeek" />는 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-440">
              <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <c>path</c> specifies a disk file.</span>
          </span>
        </param>
        <param name="share">
          <span data-ttu-id="2b775-441">프로세스에서 파일을 공유하는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-441">A constant that determines how the file will be shared by processes.</span>
          </span>
        </param>
        <param name="bufferSize">
          <span data-ttu-id="2b775-442">버퍼 크기를 나타내는 0보다 큰 양의 <see cref="T:System.Int32" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-442">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span>
          </span>
          <span data-ttu-id="2b775-443">기본 버퍼 크기는 4,096입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-443">The default buffer size is 4096..</span>
          </span>
        </param>
        <param name="useAsync">
          <span data-ttu-id="2b775-444">비동기 I/O 또는 동기 I/O를 사용할지를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-444">Specifies whether to use asynchronous I/O or synchronous I/O.</span>
          </span>
          <span data-ttu-id="2b775-445">그러나 내부 운영 체제에서 비동기 I/O가 지원되지 않을 수도 있으므로 <see langword="true" />를 지정해도 플랫폼에 따라 핸들이 동기적으로 열릴 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-445">However, note that the underlying operating system might not support asynchronous I/O, so when specifying <see langword="true" />, the handle might be opened synchronously depending on the platform.</span>
          </span>
          <span data-ttu-id="2b775-446">비동기적으로 열린 경우 <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 및 <see cref="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 메서드는 대량의 데이터를 읽거나 쓸 때는 보다 효과적이지만 소량의 데이터를 읽거나 쓸 경우 작업 속도가 훨씬 느려질 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-446">When opened asynchronously, the <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> and <see cref="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> methods perform better on large reads or writes, but they might be much slower for small reads or writes.</span>
          </span>
          <span data-ttu-id="2b775-447">응용 프로그램이 비동기 I/O를 사용하도록 디자인된 경우 <c>useAsync</c> 매개 변수를 <see langword="true" />로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-447">If the application is designed to take advantage of asynchronous I/O, set the <c>useAsync</c> parameter to <see langword="true" />.</span>
          </span>
          <span data-ttu-id="2b775-448">비동기 I/O를 올바르게 사용하면 응용 프로그램의 속도가 10배 정도 향상될 수 있지만 응용 프로그램을 비동기 I/O에 맞도록 다시 디자인하지 않고 사용하면 성능이 10배 정도 감소될 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-448">Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-449">지정된 경로, 생성 모드, 읽기/쓰기 및 공유 권한, 버퍼 크기 및 동기/비동기 상태를 사용하여 <see cref="T:System.IO.FileStream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-449">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-450">.NET Framework와 같은 장치 이름에는 경로 통해 실제 디스크에 직접 액세스를 지원 하지 않습니다 "\\\\. \PHYSICALDRIVE0"입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-450">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="2b775-451">`path` 매개 변수는 범용 명명 규칙 (UNC) 공유에 파일을 포함 하는 파일 이름 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-451">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b775-452">`path` 디스크에 저장 된 파일이 필요 하지 않습니다. 스트림을 통해 액세스를 지 원하는 시스템의 일부가 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-452">`path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</span></span> <span data-ttu-id="2b775-453">예를 들어 시스템에 따라이 클래스는 물리적 장치를 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-453">For example, depending on the system, this class can access a physical device.</span></span>  
  
 <span data-ttu-id="2b775-454"><xref:System.IO.Stream.CanSeek%2A> 됩니다 `true` 모든 <xref:System.IO.FileStream> 파일 캡슐화 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-454"><xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files.</span></span> <span data-ttu-id="2b775-455">경우 `path` 검색을 지원 하지 않는 장치를 나타냄 합니다 <xref:System.IO.FileStream.CanSeek%2A> 결과 속성 <xref:System.IO.FileStream> 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-455">If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`.</span></span> <span data-ttu-id="2b775-456">자세한 내용은 <xref:System.IO.Stream.CanSeek%2A>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="2b775-456">For additional information, see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-457">문자열에서 나머지 문자를 포함 하는 두 번째 줄 (문자 "및 두 번째 줄").</span><span class="sxs-lookup"><span data-stu-id="2b775-457">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2b775-458">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-458">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-459">다음 코드 예제에서는 비동기적으로 파일에 쓸 데이터는 데이터가 제대로 기록 되었는지 확인 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-459">The following code example shows how to asynchronously write data to a file and then verify that the data was written correctly.</span></span> <span data-ttu-id="2b775-460">A `State` 는 주 스레드가에서 정보를 전달 하기 개체를 만드는 합니다 `EndReadCallback` 및 `EndWriteCallback` 메서드.</span><span class="sxs-lookup"><span data-stu-id="2b775-460">A `State` object is created to pass information from the main thread to the `EndReadCallback` and `EndWriteCallback` methods.</span></span>  
  
 [!code-cpp[System.IO.FileStream2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#1)]
 [!code-csharp[System.IO.FileStream2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#1)]
 [!code-vb[System.IO.FileStream2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-461">
            <paramref name="path" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-461">
              <paramref name="path" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-462">
            <paramref name="path" />가 빈 문자열("")이거나 공백만 포함하거나 하나 이상의 잘못된 문자를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-462">
              <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.</span>
          </span>
          <span data-ttu-id="2b775-463">-또는-  <paramref name="path" />가 NTFS 환경에서 "con:", "com1:", "lpt1:" 등 파일이 아닌 장치를 참조합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-463">-or-  <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-464">
            <paramref name="path" />가 NTFS 이외의 환경에서 파일이 아닌 장치(예: "con:", "com1:", "lpt1:" 등)를 참조하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-464">
              <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-465">
            <paramref name="bufferSize" />가 음수이거나 0인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-465">
              <paramref name="bufferSize" /> is negative or zero.</span>
          </span>
          <span data-ttu-id="2b775-466">-또는-  <paramref name="mode" />, <paramref name="access" /> 또는 <paramref name="share" />에 잘못된 값이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-466">-or-  <paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="2b775-467">예를 들어, <paramref name="mode" />가 <see langword="FileMode.Truncate" /> 또는 <see langword="FileMode.Open" />인 경우 파일을 찾을 수 없으며 <paramref name="path" />로 지정된 파일이 없는 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-467">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist.</span>
          </span>
          <span data-ttu-id="2b775-468">이러한 모드에는 이 파일이 이미 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-468">The file must already exist in these modes.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-469">
            <paramref name="path" />로 지정한 파일이 이미 있는 경우에 <see langword="FileMode.CreateNew" />를 지정하는 등의 I/O 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-469">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.</span>
          </span>
          <span data-ttu-id="2b775-470">-또는-  시스템에서 Windows 98 또는 Windows 98 Second Edition이 실행되고 <paramref name="share" />가 <see langword="FileShare.Delete" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-470">-or-  The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> is set to <see langword="FileShare.Delete" />.</span>
          </span>
          <span data-ttu-id="2b775-471">-또는-  스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-471">-or-  The stream has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2b775-472">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-472">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <span data-ttu-id="2b775-473">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-473">The specified path is invalid, such as being on an unmapped drive.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="2b775-474">
            <paramref name="access" />가 <see langword="Write" /> 또는 <see langword="ReadWrite" />이고 파일 또는 디렉터리가 읽기 전용 액세스로 설정된 경우처럼, 지정된 <paramref name="path" />에 대해 운영 체제에서 <paramref name="access" /> 요청을 허용하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-474">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="2b775-475">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-475">The specified path, file name, or both exceed the system-defined maximum length.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="2b775-476">에 대해 읽기, 쓰기 및 파일에 추가 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-476">for reading, writing, and appending to files.</span>
          </span>
          <span data-ttu-id="2b775-477">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />하십시오 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, 및 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-477">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.IO.File" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share, int32 bufferSize, valuetype System.IO.FileOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, access As FileAccess, share As FileShare, bufferSize As Integer, options As FileOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(System::String ^ path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, int bufferSize, System::IO::FileOptions options);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare * int * System.IO.FileOptions -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (path, mode, access, share, bufferSize, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="options" Type="System.IO.FileOptions" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="2b775-478">현재 <see langword="FileStream" /> 개체가 캡슐화할 파일의 상대 또는 절대 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-478">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="2b775-479">파일을 열거나 만드는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-479">A constant that determines how to open or create the file.</span>
          </span>
        </param>
        <param name="access">
          <span data-ttu-id="2b775-480">
            <see langword="FileStream" /> 개체에서 파일에 액세스할 수 있는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-480">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object.</span>
          </span>
          <span data-ttu-id="2b775-481">또한 <see langword="FileStream" /> 개체의 <see cref="P:System.IO.FileStream.CanRead" /> 및 <see cref="P:System.IO.FileStream.CanWrite" /> 속성에서 반환하는 값을 결정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-481">This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</span>
          </span>
          <span data-ttu-id="2b775-482">
            <c>path</c>가 디스크 파일을 지정하면 <see cref="P:System.IO.FileStream.CanSeek" />는 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-482">
              <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <c>path</c> specifies a disk file.</span>
          </span>
        </param>
        <param name="share">
          <span data-ttu-id="2b775-483">프로세스에서 파일을 공유하는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-483">A constant that determines how the file will be shared by processes.</span>
          </span>
        </param>
        <param name="bufferSize">
          <span data-ttu-id="2b775-484">버퍼 크기를 나타내는 0보다 큰 양의 <see cref="T:System.Int32" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-484">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span>
          </span>
          <span data-ttu-id="2b775-485">기본 버퍼 크기는 4,096입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-485">The default buffer size is 4096.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="2b775-486">추가 파일 옵션을 지정하는 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-486">A value that specifies additional file options.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-487">지정된 경로, 생성 모드, 읽기/쓰기 및 공유 권한, 같은 파일에 대한 다른 FileStream의 액세스 권한, 버퍼 크기 및 추가 파일 옵션을 사용하여 <see cref="T:System.IO.FileStream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-487">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-488">.NET Framework와 같은 장치 이름에는 경로 통해 실제 디스크에 직접 액세스를 지원 하지 않습니다 "\\\\. \PHYSICALDRIVE0"입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-488">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="2b775-489">합니다 `fileOptions` 매개 변수를 만들 때 활용할 수 있는 고급 작업에 대 한 액세스를 제공 하는 한 <xref:System.IO.FileStream> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-489">The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object.</span></span>  
  
 <span data-ttu-id="2b775-490">`path` 매개 변수는 범용 명명 규칙 (UNC) 공유에 파일을 포함 하는 파일 이름 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-490">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b775-491">`path` 디스크에 저장 된 파일이 필요 하지 않습니다. 스트림을 통해 액세스를 지 원하는 시스템의 일부가 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-491">`path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</span></span> <span data-ttu-id="2b775-492">예를 들어 시스템에 따라이 클래스는 물리적 장치를 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-492">For example, depending on the system, this class can access a physical device.</span></span>  
  
 <span data-ttu-id="2b775-493"><xref:System.IO.Stream.CanSeek%2A> 됩니다 `true` 모든 <xref:System.IO.FileStream> 파일 캡슐화 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-493"><xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files.</span></span> <span data-ttu-id="2b775-494">경우 `path` 검색을 지원 하지 않는 장치를 나타냄 합니다 <xref:System.IO.FileStream.CanSeek%2A> 결과 속성 <xref:System.IO.FileStream> 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-494">If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`.</span></span> <span data-ttu-id="2b775-495">자세한 내용은 <xref:System.IO.Stream.CanSeek%2A>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="2b775-495">For additional information, see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-496">문자열에서 나머지 문자를 포함 하는 두 번째 줄 (문자 "및 두 번째 줄").</span><span class="sxs-lookup"><span data-stu-id="2b775-496">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2b775-497">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-497">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-498">다음 예제에서는 파일에 데이터를 쓰고 다음 사용 하 여 데이터를 읽습니다는 <xref:System.IO.FileStream> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-498">The following example writes data to a file and then reads the data using the <xref:System.IO.FileStream> object.</span></span>  
  
 [!code-cpp[IO.FileStream.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.FileStream.ctor1/cpp/example.cpp#1)]
 [!code-csharp[IO.FileStream.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.FileStream.ctor1/CS/example.cs#1)]
 [!code-vb[IO.FileStream.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.FileStream.ctor1/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-499">
            <paramref name="path" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-499">
              <paramref name="path" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-500">
            <paramref name="path" />가 빈 문자열("")이거나 공백만 포함하거나 하나 이상의 잘못된 문자를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-500">
              <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.</span>
          </span>
          <span data-ttu-id="2b775-501">-또는-  <paramref name="path" />가 NTFS 환경에서 "con:", "com1:", "lpt1:" 등 파일이 아닌 장치를 참조합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-501">-or-  <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-502">
            <paramref name="path" />가 NTFS 이외의 환경에서 파일이 아닌 장치(예: "con:", "com1:", "lpt1:" 등)를 참조하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-502">
              <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-503">
            <paramref name="bufferSize" />가 음수이거나 0인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-503">
              <paramref name="bufferSize" /> is negative or zero.</span>
          </span>
          <span data-ttu-id="2b775-504">-또는-  <paramref name="mode" />, <paramref name="access" /> 또는 <paramref name="share" />에 잘못된 값이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-504">-or-  <paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="2b775-505">예를 들어, <paramref name="mode" />가 <see langword="FileMode.Truncate" /> 또는 <see langword="FileMode.Open" />인 경우 파일을 찾을 수 없으며 <paramref name="path" />로 지정된 파일이 없는 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-505">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist.</span>
          </span>
          <span data-ttu-id="2b775-506">이러한 모드에는 이 파일이 이미 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-506">The file must already exist in these modes.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-507">
            <paramref name="path" />로 지정한 파일이 이미 있는 경우에 <see langword="FileMode.CreateNew" />를 지정하는 등의 I/O 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-507">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.</span>
          </span>
          <span data-ttu-id="2b775-508">-또는-  스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-508">-or-  The stream has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2b775-509">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-509">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <span data-ttu-id="2b775-510">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-510">The specified path is invalid, such as being on an unmapped drive.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="2b775-511">
            <paramref name="access" />가 <see langword="Write" /> 또는 <see langword="ReadWrite" />이고 파일 또는 디렉터리가 읽기 전용 액세스로 설정된 경우처럼, 지정된 <paramref name="path" />에 대해 운영 체제에서 <paramref name="access" /> 요청을 허용하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-511">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</span>
          </span>
          <span data-ttu-id="2b775-512">-또는-  <see cref="F:System.IO.FileOptions.Encrypted" />가 <paramref name="options" />에 지정되어 있지만, 파일 암호화가 현재 플랫폼에서 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-512">-or-  <see cref="F:System.IO.FileOptions.Encrypted" /> is specified for <paramref name="options" />, but file encryption is not supported on the current platform.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="2b775-513">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-513">The specified path, file name, or both exceed the system-defined maximum length.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="2b775-514">에 대해 읽기, 쓰기 및 파일에 추가 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-514">for reading, writing, and appending to files.</span>
          </span>
          <span data-ttu-id="2b775-515">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />하십시오 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, 및 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-515">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (string path, System.IO.FileMode mode, System.Security.AccessControl.FileSystemRights rights, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.Security.AccessControl.FileSystemRights rights, valuetype System.IO.FileShare share, int32 bufferSize, valuetype System.IO.FileOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, mode As FileMode, rights As FileSystemRights, share As FileShare, bufferSize As Integer, options As FileOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(System::String ^ path, System::IO::FileMode mode, System::Security::AccessControl::FileSystemRights rights, System::IO::FileShare share, int bufferSize, System::IO::FileOptions options);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : string * System.IO.FileMode * System.Security.AccessControl.FileSystemRights * System.IO.FileShare * int * System.IO.FileOptions -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (path, mode, rights, share, bufferSize, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="rights" Type="System.Security.AccessControl.FileSystemRights" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="options" Type="System.IO.FileOptions" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="2b775-516">현재 <see cref="T:System.IO.FileStream" /> 개체가 캡슐화할 파일의 상대 또는 절대 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-516">A relative or absolute path for the file that the current <see cref="T:System.IO.FileStream" /> object will encapsulate.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="2b775-517">파일을 열거나 만드는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-517">A constant that determines how to open or create the file.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="2b775-518">파일에 대한 액세스 및 감사 규칙을 만드는 데 사용할 액세스 권한을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-518">A constant that determines the access rights to use when creating access and audit rules for the file.</span>
          </span>
        </param>
        <param name="share">
          <span data-ttu-id="2b775-519">프로세스에서 파일을 공유하는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-519">A constant that determines how the file will be shared by processes.</span>
          </span>
        </param>
        <param name="bufferSize">
          <span data-ttu-id="2b775-520">버퍼 크기를 나타내는 0보다 큰 양의 <see cref="T:System.Int32" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-520">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span>
          </span>
          <span data-ttu-id="2b775-521">기본 버퍼 크기는 4,096입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-521">The default buffer size is 4096.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="2b775-522">추가 파일 옵션을 지정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-522">A constant that specifies additional file options.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-523">지정된 경로, 생성 모드, 액세스 및 공유 권한, 버퍼 크기 및 추가 파일 옵션을 사용하여 <see cref="T:System.IO.FileStream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-523">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, access rights and sharing permission, the buffer size, and additional file options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-524">.NET Framework와 같은 장치 이름에는 경로 통해 실제 디스크에 직접 액세스를 지원 하지 않습니다 "\\\\. \PHYSICALDRIVE0"입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-524">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="2b775-525">이 사용 하 여 <xref:System.IO.FileStream.%23ctor%2A> 파일을 만드는 권한 액세스를 적용 하는 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-525">Use this <xref:System.IO.FileStream.%23ctor%2A> constructor to apply access rights at the point of creation of a file.</span></span> <span data-ttu-id="2b775-526">를 액세스 하거나 기존 파일에 대 한 권한을 수정 하려면 사용을 고려 합니다 <xref:System.IO.File.GetAccessControl%2A> 고 <xref:System.IO.File.SetAccessControl%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2b775-526">To access or modify rights on an existing file, consider using the <xref:System.IO.File.GetAccessControl%2A> and <xref:System.IO.File.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="2b775-527">합니다 `fileOptions` 매개 변수를 만들 때 활용할 수 있는 고급 작업에 대 한 액세스를 제공 하는 한 <xref:System.IO.FileStream> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-527">The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object.</span></span>  
  
 <span data-ttu-id="2b775-528">`path` 매개 변수는 범용 명명 규칙 (UNC) 공유에 파일을 포함 하는 파일 이름 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-528">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b775-529">`path` 디스크에 저장 된 파일이 필요 하지 않습니다. 스트림을 통해 액세스를 지 원하는 시스템의 일부가 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-529">`path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</span></span> <span data-ttu-id="2b775-530">예를 들어 시스템에 따라이 클래스는 물리적 장치를 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-530">For example, depending on the system, this class can access a physical device.</span></span>  
  
 <span data-ttu-id="2b775-531"><xref:System.IO.Stream.CanSeek%2A> 됩니다 `true` 모든 <xref:System.IO.FileStream> 파일 캡슐화 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-531"><xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files.</span></span> <span data-ttu-id="2b775-532">경우 `path` 검색을 지원 하지 않는 장치를 나타냄 합니다 <xref:System.IO.FileStream.CanSeek%2A> 결과 속성 <xref:System.IO.FileStream> 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-532">If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`.</span></span> <span data-ttu-id="2b775-533">자세한 내용은 <xref:System.IO.Stream.CanSeek%2A>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="2b775-533">For additional information, see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-534">문자열에서 나머지 문자를 포함 하는 두 번째 줄 (문자 "및 두 번째 줄").</span><span class="sxs-lookup"><span data-stu-id="2b775-534">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2b775-535">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-535">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-536">
            <paramref name="path" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-536">
              <paramref name="path" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-537">
            <paramref name="path" />가 빈 문자열("")이거나 공백만 포함하거나 하나 이상의 잘못된 문자를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-537">
              <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.</span>
          </span>
          <span data-ttu-id="2b775-538">-또는-  <paramref name="path" />가 NTFS 환경에서 "con:", "com1:", "lpt1:" 등 파일이 아닌 장치를 참조합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-538">-or-  <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-539">
            <paramref name="path" />가 NTFS 이외의 환경에서 파일이 아닌 장치(예: "con:", "com1:", "lpt1:" 등)를 참조하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-539">
              <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-540">
            <paramref name="bufferSize" />가 음수이거나 0인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-540">
              <paramref name="bufferSize" /> is negative or zero.</span>
          </span>
          <span data-ttu-id="2b775-541">-또는-  <paramref name="mode" />, <paramref name="access" /> 또는 <paramref name="share" />에 잘못된 값이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-541">-or-  <paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="2b775-542">예를 들어, <paramref name="mode" />가 <see langword="FileMode.Truncate" /> 또는 <see langword="FileMode.Open" />인 경우 파일을 찾을 수 없으며 <paramref name="path" />로 지정된 파일이 없는 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-542">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist.</span>
          </span>
          <span data-ttu-id="2b775-543">이러한 모드에는 이 파일이 이미 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-543">The file must already exist in these modes.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="2b775-544">현재 운영 체제가 Windows NT 이상이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-544">The current operating system is not Windows NT or later.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-545">
            <paramref name="path" />로 지정한 파일이 이미 있는 경우에 <see langword="FileMode.CreateNew" />를 지정하는 등의 I/O 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-545">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.</span>
          </span>
          <span data-ttu-id="2b775-546">-또는-  스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-546">-or-  The stream has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2b775-547">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-547">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <span data-ttu-id="2b775-548">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-548">The specified path is invalid, such as being on an unmapped drive.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="2b775-549">
            <paramref name="access" />가 <see langword="Write" /> 또는 <see langword="ReadWrite" />이고 파일 또는 디렉터리가 읽기 전용 액세스로 설정된 경우처럼, 지정된 <paramref name="path" />에 대해 운영 체제에서 <paramref name="access" /> 요청을 허용하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-549">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</span>
          </span>
          <span data-ttu-id="2b775-550">-또는-  <see cref="F:System.IO.FileOptions.Encrypted" />가 <paramref name="options" />에 지정되어 있지만, 파일 암호화가 현재 플랫폼에서 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-550">-or-  <see cref="F:System.IO.FileOptions.Encrypted" /> is specified for <paramref name="options" />, but file encryption is not supported on the current platform.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="2b775-551">지정된 <paramref name="path" />나 파일 이름 또는 둘 모두가 시스템에 정의된 최대 길이를 초과하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-551">The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="2b775-552">에 대해 읽기, 쓰기 및 파일에 추가 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-552">for reading, writing, and appending to files.</span>
          </span>
          <span data-ttu-id="2b775-553">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />하십시오 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, 및 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-553">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileStream (string path, System.IO.FileMode mode, System.Security.AccessControl.FileSystemRights rights, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options, System.Security.AccessControl.FileSecurity fileSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.Security.AccessControl.FileSystemRights rights, valuetype System.IO.FileShare share, int32 bufferSize, valuetype System.IO.FileOptions options, class System.Security.AccessControl.FileSecurity fileSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileStream(System::String ^ path, System::IO::FileMode mode, System::Security::AccessControl::FileSystemRights rights, System::IO::FileShare share, int bufferSize, System::IO::FileOptions options, System::Security::AccessControl::FileSecurity ^ fileSecurity);" />
      <MemberSignature Language="F#" Value="new System.IO.FileStream : string * System.IO.FileMode * System.Security.AccessControl.FileSystemRights * System.IO.FileShare * int * System.IO.FileOptions * System.Security.AccessControl.FileSecurity -&gt; System.IO.FileStream" Usage="new System.IO.FileStream (path, mode, rights, share, bufferSize, options, fileSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="rights" Type="System.Security.AccessControl.FileSystemRights" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="options" Type="System.IO.FileOptions" />
        <Parameter Name="fileSecurity" Type="System.Security.AccessControl.FileSecurity" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="2b775-554">현재 <see cref="T:System.IO.FileStream" /> 개체가 캡슐화할 파일의 상대 또는 절대 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-554">A relative or absolute path for the file that the current <see cref="T:System.IO.FileStream" /> object will encapsulate.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="2b775-555">파일을 열거나 만드는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-555">A constant that determines how to open or create the file.</span>
          </span>
        </param>
        <param name="rights">
          <span data-ttu-id="2b775-556">파일에 대한 액세스 및 감사 규칙을 만드는 데 사용할 액세스 권한을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-556">A constant that determines the access rights to use when creating access and audit rules for the file.</span>
          </span>
        </param>
        <param name="share">
          <span data-ttu-id="2b775-557">프로세스에서 파일을 공유하는 방법을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-557">A constant that determines how the file will be shared by processes.</span>
          </span>
        </param>
        <param name="bufferSize">
          <span data-ttu-id="2b775-558">버퍼 크기를 나타내는 0보다 큰 양의 <see cref="T:System.Int32" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-558">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size.</span>
          </span>
          <span data-ttu-id="2b775-559">기본 버퍼 크기는 4,096입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-559">The default buffer size is 4096.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="2b775-560">추가 파일 옵션을 지정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-560">A constant that specifies additional file options.</span>
          </span>
        </param>
        <param name="fileSecurity">
          <span data-ttu-id="2b775-561">파일에 대한 액세스 제어 및 감사 보안을 결정하는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-561">A constant that determines the access control and audit security for the file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-562">지정된 경로, 생성 모드, 액세스 및 공유 권한, 버퍼 크기, 추가 파일 옵션, 액세스 제어 및 감사 보안을 사용하여 <see cref="T:System.IO.FileStream" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-562">Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-563">.NET Framework와 같은 장치 이름에는 경로 통해 실제 디스크에 직접 액세스를 지원 하지 않습니다 "\\\\. \PHYSICALDRIVE0"입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-563">The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".</span></span>  
  
 <span data-ttu-id="2b775-564">이 사용 하 여 <xref:System.IO.FileStream.%23ctor%2A> 파일을 만드는 권한 액세스를 적용 하는 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-564">Use this <xref:System.IO.FileStream.%23ctor%2A> constructor to apply access rights at the point of creation of a file.</span></span> <span data-ttu-id="2b775-565">를 액세스 하거나 기존 파일에 대 한 권한을 수정 하려면 사용을 고려 합니다 <xref:System.IO.File.GetAccessControl%2A> 고 <xref:System.IO.File.SetAccessControl%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2b775-565">To access or modify rights on an existing file, consider using the <xref:System.IO.File.GetAccessControl%2A> and <xref:System.IO.File.SetAccessControl%2A> methods.</span></span>  
  
 <span data-ttu-id="2b775-566">합니다 `fileOptions` 매개 변수를 만들 때 활용할 수 있는 고급 작업에 대 한 액세스를 제공 하는 한 <xref:System.IO.FileStream> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-566">The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object.</span></span>  
  
 <span data-ttu-id="2b775-567">`path` 매개 변수는 범용 명명 규칙 (UNC) 공유에 파일을 포함 하는 파일 이름 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-567">The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b775-568">`path` 디스크에 저장 된 파일이 필요 하지 않습니다. 스트림을 통해 액세스를 지 원하는 시스템의 일부가 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-568">`path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams.</span></span> <span data-ttu-id="2b775-569">예를 들어 시스템에 따라이 클래스는 물리적 장치를 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-569">For example, depending on the system, this class can access a physical device.</span></span>  
  
 <span data-ttu-id="2b775-570"><xref:System.IO.Stream.CanSeek%2A> 됩니다 `true` 모든 <xref:System.IO.FileStream> 파일 캡슐화 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-570"><xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files.</span></span> <span data-ttu-id="2b775-571">경우 `path` 검색을 지원 하지 않는 장치를 나타냄 합니다 <xref:System.IO.FileStream.CanSeek%2A> 결과 속성 <xref:System.IO.FileStream> 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-571">If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`.</span></span> <span data-ttu-id="2b775-572">자세한 내용은 <xref:System.IO.Stream.CanSeek%2A>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="2b775-572">For additional information, see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-573">문자열에서 나머지 문자를 포함 하는 두 번째 줄 (문자 "및 두 번째 줄").</span><span class="sxs-lookup"><span data-stu-id="2b775-573">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="2b775-574">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-574">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-575">다음 예제에서는 파일에 데이터를 쓰고 다음 사용 하 여 데이터를 읽습니다는 <xref:System.IO.FileStream> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-575">The following example writes data to a file and then reads the data using the <xref:System.IO.FileStream> object.</span></span>  
  
 [!code-cpp[IO.FileStream.ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.FileStream.ctor2/cpp/example.cpp#1)]
 [!code-csharp[IO.FileStream.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.FileStream.ctor2/CS/example.cs#1)]
 [!code-vb[IO.FileStream.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.FileStream.ctor2/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-576">
            <paramref name="path" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-576">
              <paramref name="path" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-577">
            <paramref name="path" />가 빈 문자열("")이거나 공백만 포함하거나 하나 이상의 잘못된 문자를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-577">
              <paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.</span>
          </span>
          <span data-ttu-id="2b775-578">-또는-  <paramref name="path" />가 NTFS 환경에서 "con:", "com1:", "lpt1:" 등 파일이 아닌 장치를 참조합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-578">-or-  <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-579">
            <paramref name="path" />가 NTFS 이외의 환경에서 파일이 아닌 장치(예: "con:", "com1:", "lpt1:" 등)를 참조하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-579">
              <paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-580">
            <paramref name="bufferSize" />가 음수이거나 0인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-580">
              <paramref name="bufferSize" /> is negative or zero.</span>
          </span>
          <span data-ttu-id="2b775-581">-또는-  <paramref name="mode" />, <paramref name="access" /> 또는 <paramref name="share" />에 잘못된 값이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-581">-or-  <paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="2b775-582">예를 들어, <paramref name="mode" />가 <see langword="FileMode.Truncate" /> 또는 <see langword="FileMode.Open" />인 경우 파일을 찾을 수 없으며 <paramref name="path" />로 지정된 파일이 없는 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-582">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist.</span>
          </span>
          <span data-ttu-id="2b775-583">이러한 모드에는 이 파일이 이미 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-583">The file must already exist in these modes.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-584">
            <paramref name="path" />로 지정한 파일이 이미 있는 경우에 <see langword="FileMode.CreateNew" />를 지정하는 등의 I/O 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-584">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.</span>
          </span>
          <span data-ttu-id="2b775-585">-또는-  스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-585">-or-  The stream has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2b775-586">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-586">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <span data-ttu-id="2b775-587">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-587">The specified path is invalid, such as being on an unmapped drive.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="2b775-588">
            <paramref name="access" />가 <see langword="Write" /> 또는 <see langword="ReadWrite" />이고 파일 또는 디렉터리가 읽기 전용 액세스로 설정된 경우처럼, 지정된 <paramref name="path" />에 대해 운영 체제에서 <paramref name="access" /> 요청을 허용하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-588">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</span>
          </span>
          <span data-ttu-id="2b775-589">-또는-  <see cref="F:System.IO.FileOptions.Encrypted" />가 <paramref name="options" />에 지정되어 있지만, 파일 암호화가 현재 플랫폼에서 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-589">-or-  <see cref="F:System.IO.FileOptions.Encrypted" /> is specified for <paramref name="options" />, but file encryption is not supported on the current platform.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="2b775-590">지정된 <paramref name="path" />나 파일 이름 또는 둘 모두가 시스템에 정의된 최대 길이를 초과하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-590">The specified <paramref name="path" />, file name, or both exceed the system-defined maximum length.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="2b775-591">현재 운영 체제가 Windows NT 이상이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-591">The current operating system is not Windows NT or later.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="2b775-592">에 대해 읽기, 쓰기 및 파일에 추가 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-592">for reading, writing, and appending to files.</span>
          </span>
          <span data-ttu-id="2b775-593">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />하십시오 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, 및 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-593">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />, and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject);" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] array, int32 offset, int32 numBytes, class System.AsyncCallback userCallback, object stateObject) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginRead (array As Byte(), offset As Integer, numBytes As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ array, int offset, int numBytes, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.BeginRead : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="fileStream.BeginRead (array, offset, numBytes, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="numBytes" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0" />
        <Parameter Name="userCallback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1" />
        <Parameter Name="stateObject" Type="System.Object" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="2b775-594">데이터를 읽어올 버퍼입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-594">The buffer to read data into.</span>
          </span>
        </param>
        <param name="buffer">To be added.</param>
        <param name="offset">
          <span data-ttu-id="2b775-595">읽기를 시작할 <c>배열</c>의 바이트 오프셋입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-595">The byte offset in <c>array</c> at which to begin reading.</span>
          </span>
        </param>
        <param name="numBytes">
          <span data-ttu-id="2b775-596">읽을 최대 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-596">The maximum number of bytes to read.</span>
          </span>
        </param>
        <param name="count">To be added.</param>
        <param name="userCallback">
          <span data-ttu-id="2b775-597">비동기 읽기 작업이 완료되면 호출될 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-597">The method to be called when the asynchronous read operation is completed.</span>
          </span>
        </param>
        <param name="callback">To be added.</param>
        <param name="stateObject">
          <span data-ttu-id="2b775-598">다른 요청에서 특정 비동기 읽기 요청을 구별하는 사용자 제공 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-598">A user-provided object that distinguishes this particular asynchronous read request from other requests.</span>
          </span>
        </param>
        <param name="state">To be added.</param>
        <summary>
          <span data-ttu-id="2b775-599">비동기 읽기 작업을 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-599">Begins an asynchronous read operation.</span>
          </span>
          <span data-ttu-id="2b775-600">대신 <see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />를 사용하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-600">(Consider using <see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> instead.)</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2b775-601">비동기 읽기를 참조하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-601">An object that references the asynchronous read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-602">.NET Framework 4 및 이전 버전에서와 같은 메서드를 사용 해야 <xref:System.IO.FileStream.BeginRead%2A> 고 <xref:System.IO.FileStream.EndRead%2A> 비동기 파일 작업을 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-602">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginRead%2A> and <xref:System.IO.FileStream.EndRead%2A> to implement asynchronous file operations.</span></span> <span data-ttu-id="2b775-603">그러나 이러한 메서드는에서 계속 제공 합니다 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 레거시 코드를 지원 하기 위해 새로운 비동기 메서드를 같은 <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, 및 <xref:System.IO.FileStream.FlushAsync%2A>, 비동기 파일 작업을 보다 쉽게 구현 하는 도움말.</span><span class="sxs-lookup"><span data-stu-id="2b775-603">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.</span></span>  
  
 <span data-ttu-id="2b775-604"><xref:System.IO.FileStream.EndRead%2A> 호출할 때마다 한 번씩 호출 해야 <xref:System.IO.FileStream.BeginRead%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-604"><xref:System.IO.FileStream.EndRead%2A> must be called exactly once for every call to <xref:System.IO.FileStream.BeginRead%2A>.</span></span> <span data-ttu-id="2b775-605">다른 읽기를 시작 하기 전에 읽기 프로세스를 종료 하지 못하면 교착 상태 같은 바람직하지 않은 동작이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-605">Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.</span></span>  
  
 <span data-ttu-id="2b775-606"><xref:System.IO.FileStream> 작업의 두 가지 모드를 제공 합니다: 동기 I/O와 비동기 I/O입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-606"><xref:System.IO.FileStream> provides two different modes of operation: synchronous I/O and asynchronous I/O.</span></span> <span data-ttu-id="2b775-607">하거나 사용할 수 있지만, 기본 운영 체제 리소스 이러한 모드 중 하나에 액세스할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-607">While either can be used, the underlying operating system resources might allow access in only one of these modes.</span></span> <span data-ttu-id="2b775-608">기본적으로 <xref:System.IO.FileStream> 동기적으로 운영 체제 핸들을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-608">By default, <xref:System.IO.FileStream> opens the operating system handle synchronously.</span></span> <span data-ttu-id="2b775-609">Windows, 비동기 메서드 느려집니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-609">In Windows, this slows down asynchronous methods.</span></span> <span data-ttu-id="2b775-610">비동기 메서드를 사용 하는 경우 사용 된 <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-610">If asynchronous methods are used, use the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b775-611">사용 된 <xref:System.IO.FileStream.CanRead%2A> 현재 인스턴스가 읽기를 지원 하는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-611">Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading.</span></span> <span data-ttu-id="2b775-612">자세한 내용은 <xref:System.IO.Stream.CanRead%2A>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="2b775-612">For additional information, see <xref:System.IO.Stream.CanRead%2A>.</span></span>  
  
 <span data-ttu-id="2b775-613">스트림이 닫혀 있거나를 잘못 된 인수를 전달 하는 경우 예외가 즉시에서 <xref:System.IO.FileStream.BeginRead%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-613">If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <xref:System.IO.FileStream.BeginRead%2A>.</span></span> <span data-ttu-id="2b775-614">IO 요청 중의 디스크 오류 등 비동기 읽기 요청을 하는 동안 발생 하는 오류는 스레드 풀 스레드에서 발생 하 고 호출 시 표시 될 <xref:System.IO.FileStream.EndRead%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-614">Errors that occur during an asynchronous read request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to <xref:System.IO.FileStream.EndRead%2A>.</span></span>  
  
 <span data-ttu-id="2b775-615"><xref:System.IO.Stream.EndRead%2A> 이 사용 하 여 호출 해야 <xref:System.IAsyncResult> 읽은 바이트 수는 방법을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-615"><xref:System.IO.Stream.EndRead%2A> must be called with this <xref:System.IAsyncResult> to find out how many bytes were read.</span></span>  
  
 <span data-ttu-id="2b775-616">여러 개의 비동기 요청 확실 하지 않은 요청 완료 순서를 렌더링합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-616">Multiple simultaneous asynchronous requests render the request completion order uncertain.</span></span>  
  
 <span data-ttu-id="2b775-617">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-617">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-618">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-618">This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.</span></span>  
  
 [!code-cpp[System.IO.FileStream2#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#3)]
 [!code-csharp[System.IO.FileStream2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#3)]
 [!code-vb[System.IO.FileStream2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-619">배열 길이에서 <paramref name="offset" />을 빼면 <paramref name="numBytes" />보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-619">The array length minus <paramref name="offset" /> is less than <paramref name="numBytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-620">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-620">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-621">
            <paramref name="offset" /> 또는 <paramref name="numBytes" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-621">
              <paramref name="offset" /> or <paramref name="numBytes" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-622">파일의 끝을 지나 비동기 읽기를 시도했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-622">An asynchronous read was attempted past the end of the file.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject);" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] array, int32 offset, int32 numBytes, class System.AsyncCallback userCallback, object stateObject) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginWrite (array As Byte(), offset As Integer, numBytes As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ array, int offset, int numBytes, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.BeginWrite : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="fileStream.BeginWrite (array, offset, numBytes, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="numBytes" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0" />
        <Parameter Name="userCallback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1" />
        <Parameter Name="stateObject" Type="System.Object" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="2b775-623">현재 스트림에 쓸 데이터를 포함하는 버퍼입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-623">The buffer containing data to write to the current stream.</span>
          </span>
        </param>
        <param name="buffer">To be added.</param>
        <param name="offset">
          <span data-ttu-id="2b775-624">현재 스트림으로 바이트를 복사하기 시작할 <c>배열</c>의 바이트 오프셋(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-624">The zero-based byte offset in <c>array</c> at which to begin copying bytes to the current stream.</span>
          </span>
        </param>
        <param name="numBytes">
          <span data-ttu-id="2b775-625">쓸 최대 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-625">The maximum number of bytes to write.</span>
          </span>
        </param>
        <param name="count">To be added.</param>
        <param name="userCallback">
          <span data-ttu-id="2b775-626">비동기 쓰기 작업이 완료되면 호출될 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-626">The method to be called when the asynchronous write operation is completed.</span>
          </span>
        </param>
        <param name="callback">To be added.</param>
        <param name="stateObject">
          <span data-ttu-id="2b775-627">다른 요청에서 특정 비동기 쓰기 요청을 구별하는 사용자 제공 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-627">A user-provided object that distinguishes this particular asynchronous write request from other requests.</span>
          </span>
        </param>
        <param name="state">To be added.</param>
        <summary>
          <span data-ttu-id="2b775-628">비동기 쓰기 작업을 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-628">Begins an asynchronous write operation.</span>
          </span>
          <span data-ttu-id="2b775-629">대신 <see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />를 사용하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-629">(Consider using <see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> instead.)</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2b775-630">비동기 쓰기를 참조하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-630">An object that references the asynchronous write.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-631">.NET Framework 4 및 이전 버전에서와 같은 메서드를 사용 해야 <xref:System.IO.FileStream.BeginWrite%2A> 고 <xref:System.IO.FileStream.EndWrite%2A> 비동기 파일 작업을 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-631">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginWrite%2A> and <xref:System.IO.FileStream.EndWrite%2A> to implement asynchronous file operations.</span></span> <span data-ttu-id="2b775-632">그러나 이러한 메서드는에서 계속 제공 합니다 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 레거시 코드를 지원 하기 위해 새로운 비동기 메서드를 같은 <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, 및 <xref:System.IO.FileStream.FlushAsync%2A>, 비동기 파일 작업을 보다 쉽게 구현 하는 도움말.</span><span class="sxs-lookup"><span data-stu-id="2b775-632">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.</span></span>  
  
 <span data-ttu-id="2b775-633"><xref:System.IO.FileStream.EndWrite%2A> 정확히 한 번만 호출 해야 모든 <xref:System.IAsyncResult> 에서 <xref:System.IO.FileStream.BeginWrite%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-633"><xref:System.IO.FileStream.EndWrite%2A> must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginWrite%2A>.</span></span> <span data-ttu-id="2b775-634"><xref:System.IO.FileStream.EndWrite%2A> I/O 작업이 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-634"><xref:System.IO.FileStream.EndWrite%2A> will block until the I/O operation has completed.</span></span>  
  
 <span data-ttu-id="2b775-635">이 메서드는 <xref:System.IO.Stream.BeginWrite%2A>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-635">This method overrides <xref:System.IO.Stream.BeginWrite%2A>.</span></span>  
  
 <span data-ttu-id="2b775-636"><xref:System.IO.FileStream> 작업의 두 가지 모드를 제공 합니다: 동기 I/O와 비동기 I/O입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-636"><xref:System.IO.FileStream> provides two different modes of operation: synchronous I/O and asynchronous I/O.</span></span> <span data-ttu-id="2b775-637">하거나 사용할 수 있지만, 기본 운영 체제 리소스 이러한 모드 중 하나에 액세스할을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-637">While either can be used, the underlying operating system resources might allow access in only one of these modes.</span></span> <span data-ttu-id="2b775-638">기본적으로 <xref:System.IO.FileStream> 동기적으로 운영 체제 핸들을 엽니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-638">By default, <xref:System.IO.FileStream> opens the operating system handle synchronously.</span></span> <span data-ttu-id="2b775-639">Windows, 비동기 메서드 느려집니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-639">In Windows, this slows down asynchronous methods.</span></span> <span data-ttu-id="2b775-640">비동기 메서드를 사용 하는 경우 사용 된 <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-640">If asynchronous methods are used, use the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.</span></span>  
  
 <span data-ttu-id="2b775-641">스트림이 닫혀 있거나를 잘못 된 인수를 전달 하는 경우 예외가 즉시에서 <xref:System.IO.FileStream.BeginWrite%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-641">If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <xref:System.IO.FileStream.BeginWrite%2A>.</span></span> <span data-ttu-id="2b775-642">IO 요청 중의 디스크 오류 등 비동기 쓰기 요청을 하는 동안 발생 하는 오류는 스레드 풀 스레드에서 발생 하 고 호출 시 표시 될 <xref:System.IO.FileStream.EndWrite%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-642">Errors that occur during an asynchronous write request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to <xref:System.IO.FileStream.EndWrite%2A>.</span></span>  
  
 <span data-ttu-id="2b775-643">여러 개의 비동기 요청 확실 하지 않은 요청 완료 순서를 렌더링합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-643">Multiple simultaneous asynchronous requests render the request completion order uncertain.</span></span>  
  
 <span data-ttu-id="2b775-644">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-644">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-645">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-645">This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.</span></span>  
  
 [!code-cpp[System.IO.FileStream2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#2)]
 [!code-csharp[System.IO.FileStream2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#2)]
 [!code-vb[System.IO.FileStream2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-646">
            <paramref name="array" /> 길이에서 <paramref name="offset" />을 뺀 값이 <paramref name="numBytes" />보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-646">
              <paramref name="array" /> length minus <paramref name="offset" /> is less than <paramref name="numBytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-647">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-647">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-648">
            <paramref name="offset" /> 또는 <paramref name="numBytes" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-648">
              <paramref name="offset" /> or <paramref name="numBytes" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-649">스트림이 쓰기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-649">The stream does not support writing.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2b775-650">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-650">The stream is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-651">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-651">An I/O error occurred.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.IO.FileStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2b775-652">현재 스트림이 읽기를 지원하는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-652">Gets a value indicating whether the current stream supports reading.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2b775-653">스트림이 읽기를 지원하면 <see langword="true" />이고, 스트림이 닫혀 있거나 쓰기 전용 권한으로 열렸으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-653">
              <see langword="true" /> if the stream supports reading; <see langword="false" /> if the stream is closed or was opened with write-only access.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-654">클래스에서 파생 하는 경우 <xref:System.IO.Stream> 읽기를 지원 하지 않습니다, 호출 하는 <xref:System.IO.FileStream.Read%2A>, <xref:System.IO.FileStream.ReadByte%2A>, 및 <xref:System.IO.FileStream.BeginRead%2A> 메서드는 throw를 <xref:System.NotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="2b775-654">If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.FileStream.Read%2A>, <xref:System.IO.FileStream.ReadByte%2A>, and <xref:System.IO.FileStream.BeginRead%2A> methods throw a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="2b775-655">이 속성을 반환 하는 경우 스트림이 닫혀, `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-655">If the stream is closed, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-656">다음 예제에서는 사용 하 여 `CanRead` 속성.</span><span class="sxs-lookup"><span data-stu-id="2b775-656">The following example demonstrates a use of the `CanRead` property.</span></span> <span data-ttu-id="2b775-657">이 코드의 출력은 "MyFile.txt 쓰기 가능한 아닙니다."</span><span class="sxs-lookup"><span data-stu-id="2b775-657">The output of this code is "MyFile.txt is not writable."</span></span> <span data-ttu-id="2b775-658">출력 메시지가 "MyFile.txt 수 모두 쓰고에서 읽을."를 변경 하는 `FileAccess` 매개 변수를 `ReadWrite` 에 `FileStream` 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-658">To get the output message "MyFile.txt can be both written to and read from.", change the `FileAccess` parameter to `ReadWrite` in the `FileStream` constructor.</span></span>  
  
 [!code-cpp[Classic FileStream.CanRead Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FileStream.CanRead Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/CS/source.cs#1)]
 [!code-vb[Classic FileStream.CanRead Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.IO.FileStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2b775-659">현재 스트림이 검색을 지원하는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-659">Gets a value indicating whether the current stream supports seeking.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2b775-660">스트림이 검색을 지원하면 <see langword="true" />이고, 스트림이 닫혔거나 <see langword="FileStream" />이 콘솔에 대한 출력 또는 파이프와 같은 운영 체제 핸들로부터 생성된 경우에는 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-660">
              <see langword="true" /> if the stream supports seeking; <see langword="false" /> if the stream is closed or if the <see langword="FileStream" /> was constructed from an operating-system handle such as a pipe or output to the console.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-661">파생 된 클래스가 <xref:System.IO.Stream> 검색을 지원 하지 않습니다, 호출 하는 <xref:System.IO.FileStream.Length%2A>, <xref:System.IO.FileStream.SetLength%2A>, <xref:System.IO.FileStream.Position%2A>, 및 <xref:System.IO.FileStream.Seek%2A> throw를 <xref:System.NotSupportedException>입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-661">If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.FileStream.Length%2A>, <xref:System.IO.FileStream.SetLength%2A>, <xref:System.IO.FileStream.Position%2A>, and <xref:System.IO.FileStream.Seek%2A> throw a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="2b775-662">이 속성을 반환 하는 경우 스트림이 닫혀, `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-662">If the stream is closed, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-663">다음 예제에서는 `CanSeek` 스트림이 검색을 지원 하는지 여부를 확인할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-663">The following example uses the `CanSeek` property to check whether a stream supports seeking.</span></span>  
  
 [!code-cpp[fstream canseek#1](~/samples/snippets/cpp/VS_Snippets_CLR/FStream CanSeek/CPP/fstream canseek.cpp#1)]
 [!code-csharp[fstream canseek#1](~/samples/snippets/csharp/VS_Snippets_CLR/FStream CanSeek/CS/fstream canseek.cs#1)]
 [!code-vb[fstream canseek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FStream CanSeek/VB/fstream canseek.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.IO.FileStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2b775-664">현재 스트림이 쓰기를 지원하는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-664">Gets a value indicating whether the current stream supports writing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2b775-665">스트림이 쓰기를 지원하면 <see langword="true" />이고, 스트림이 닫혀 있거나 읽기 전용 권한으로 열렸으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-665">
              <see langword="true" /> if the stream supports writing; <see langword="false" /> if the stream is closed or was opened with read-only access.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-666">파생 된 클래스가 <xref:System.IO.Stream> 에 대 한 호출을 작성 하는 것을 지원 하지 않습니다 <xref:System.IO.FileStream.SetLength%2A>, <xref:System.IO.FileStream.Write%2A>, <xref:System.IO.FileStream.BeginWrite%2A>, 또는 <xref:System.IO.FileStream.WriteByte%2A> throw를 <xref:System.NotSupportedException>입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-666">If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.FileStream.SetLength%2A>, <xref:System.IO.FileStream.Write%2A>, <xref:System.IO.FileStream.BeginWrite%2A>, or <xref:System.IO.FileStream.WriteByte%2A> throws a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="2b775-667">이 속성을 반환 하는 경우 스트림이 닫혀, `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-667">If the stream is closed, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-668">다음 예제에서는 `CanWrite` 스트림이 쓰기를 지원 하는지 여부를 확인할 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-668">The following example uses the `CanWrite` property to check whether a stream supports writing.</span></span>  
  
 [!code-cpp[fstream canwrite#1](~/samples/snippets/cpp/VS_Snippets_CLR/FStream CanWrite/CPP/fstream canwrite.cpp#1)]
 [!code-csharp[fstream canwrite#1](~/samples/snippets/csharp/VS_Snippets_CLR/FStream CanWrite/CS/fstream canwrite.cs#1)]
 [!code-vb[fstream canwrite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FStream CanWrite/VB/fstream canwrite.vb#1)]  
  
 <span data-ttu-id="2b775-669">다음은 예제를 사용 하는 `CanWrite` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-669">The following is an example using the `CanWrite` property.</span></span> <span data-ttu-id="2b775-670">이 코드의 출력은 "MyFile.txt 쓰기 가능 합니다."</span><span class="sxs-lookup"><span data-stu-id="2b775-670">The output of this code is "MyFile.txt is writable."</span></span> <span data-ttu-id="2b775-671">출력 메시지가 "MyFile.txt 수 모두 쓰고에서 읽을."를 변경 하는 `FileAccess` 매개 변수를 `ReadWrite` 에 `FileStream` 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-671">To get the output message "MyFile.txt can be both written to and read from.", change the `FileAccess` parameter to `ReadWrite` in the `FileStream` constructor.</span></span>  
  
 [!code-cpp[Classic FileStream.CanWrite Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.CanWrite Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FileStream.CanWrite Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.CanWrite Example/CS/source.cs#1)]
 [!code-vb[Classic FileStream.CanWrite Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.CanWrite Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="fileStream.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="fileStream.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="2b775-672">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-672">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-673">
            <see cref="T:System.IO.FileStream" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-673">Releases the unmanaged resources used by the <see cref="T:System.IO.FileStream" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-674">이 메서드는 공용 <xref:System.ComponentModel.Component.Dispose%2A> 메서드 및 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2b775-674">This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="2b775-675"><xref:System.ComponentModel.Component.Dispose%2A> 보호 된 호출 <xref:System.IO.FileStream.Dispose%2A> 메서드를 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-675"><xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.FileStream.Dispose%2A> method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="2b775-676"><xref:System.Object.Finalize%2A> 호출 <xref:System.IO.FileStream.Dispose%2A> 사용 하 여 `disposing` 로 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-676"><xref:System.Object.Finalize%2A> invokes <xref:System.IO.FileStream.Dispose%2A> with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="2b775-677">`disposing` 매개 변수가 `true`인 경우 이 메서드는 이 <xref:System.IO.FileStream>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-677">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.FileStream> references.</span></span> <span data-ttu-id="2b775-678">이 메서드는 참조되는 각 개체의 <xref:System.ComponentModel.Component.Dispose%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-678">This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="2b775-679">
            <para>
              <see cref="M:System.ComponentModel.Component.Dispose" /> 다른 개체에서 여러 번 호출할 수 있습니다. 재정의 하는 경우 <see cref="M:System.IO.FileStream.Dispose(System.Boolean)" /> 대 한 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 해야 <see cref="M:System.ComponentModel.Component.Dispose" />합니다. 구현 하는 방법에 대 한 자세한 내용은 <see cref="M:System.IO.FileStream.Dispose(System.Boolean)" />, 참조 [삭제 Method](~/docs/standard/garbage-collection/implementing-dispose.md) 구현 합니다.  에 대 한 자세한 내용은 <see cref="M:System.ComponentModel.Component.Dispose" /> 고 <see cref="M:System.Object.Finalize" />, [정리를 관리 되지 않는 Resources](~/docs/standard/garbage-collection/unmanaged.md)를 참조 하세요.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-679">
              <para>
                <see cref="M:System.ComponentModel.Component.Dispose" /> can be called multiple times by other objects. When overriding <see cref="M:System.IO.FileStream.Dispose(System.Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see cref="M:System.ComponentModel.Component.Dispose" />. For more information about how to implement <see cref="M:System.IO.FileStream.Dispose(System.Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  For more information about <see cref="M:System.ComponentModel.Component.Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndRead : IAsyncResult -&gt; int" Usage="fileStream.EndRead asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="2b775-680">대기할 보류 중인 비동기 요청에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-680">The reference to the pending asynchronous request to wait for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-681">보류 중인 비동기 읽기 작업이 완료되기를 기다립니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-681">Waits for the pending asynchronous read operation to complete.</span>
          </span>
          <span data-ttu-id="2b775-682">대신 <see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />를 사용하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-682">(Consider using <see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> instead.)</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2b775-683">0과 요청한 바이트 수 사이의 스트림에서 읽은 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-683">The number of bytes read from the stream, between 0 and the number of bytes you requested.</span>
          </span>
          <span data-ttu-id="2b775-684">스트림은 스트림의 끝에서 0만을 반환하며 그렇지 않으면 최소한 1바이트를 사용할 수 있을 때까지 차단됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-684">Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-685">.NET Framework 4 및 이전 버전에서와 같은 메서드를 사용 해야 <xref:System.IO.FileStream.BeginRead%2A> 고 <xref:System.IO.FileStream.EndRead%2A> 비동기 파일 작업을 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-685">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginRead%2A> and <xref:System.IO.FileStream.EndRead%2A> to implement asynchronous file operations.</span></span> <span data-ttu-id="2b775-686">그러나 이러한 메서드는에서 계속 제공 합니다 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 레거시 코드를 지원 하기 위해 새로운 비동기 메서드를 같은 <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, 및 <xref:System.IO.FileStream.FlushAsync%2A>, 비동기 파일 작업을 보다 쉽게 구현 하는 도움말.</span><span class="sxs-lookup"><span data-stu-id="2b775-686">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.</span></span>  
  
 <span data-ttu-id="2b775-687"><xref:System.IO.FileStream.EndRead%2A> 호출할 때마다 한 번씩 호출 해야 <xref:System.IO.FileStream.BeginRead%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-687"><xref:System.IO.FileStream.EndRead%2A> must be called exactly for every call to <xref:System.IO.FileStream.BeginRead%2A>.</span></span> <span data-ttu-id="2b775-688">다른 읽기를 시작 하기 전에 읽기 프로세스를 종료 하지 못하면 교착 상태 같은 바람직하지 않은 동작이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-688">Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.</span></span>  
  
 <span data-ttu-id="2b775-689">이 메서드는 <xref:System.IO.Stream.EndRead%2A>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-689">This method overrides <xref:System.IO.Stream.EndRead%2A>.</span></span>  
  
 <span data-ttu-id="2b775-690"><xref:System.IO.FileStream.EndRead%2A> 호출할 수 마다 <xref:System.IAsyncResult> 에서 <xref:System.IO.FileStream.BeginRead%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-690"><xref:System.IO.FileStream.EndRead%2A> can be called on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginRead%2A>.</span></span> <span data-ttu-id="2b775-691">호출 <xref:System.IO.FileStream.EndRead%2A> 스트림에서 읽은 바이트 수는 방법을 알려 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-691">Calling <xref:System.IO.FileStream.EndRead%2A> tells you how many bytes were read from the stream.</span></span> <span data-ttu-id="2b775-692"><xref:System.IO.FileStream.EndRead%2A> I/O 작업이 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-692"><xref:System.IO.FileStream.EndRead%2A> will block until the I/O operation has completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-693">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-693">This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.</span></span>  
  
 [!code-cpp[System.IO.FileStream2#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#4)]
 [!code-csharp[System.IO.FileStream2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#4)]
 [!code-vb[System.IO.FileStream2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-694">
            <paramref name="asyncResult" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-694">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-695">이 <see cref="T:System.IAsyncResult" /> 개체는 이 클래스에 대해 <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />를 호출하여 만들어진 개체가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-695">This <see cref="T:System.IAsyncResult" /> object was not created by calling <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> on this class.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2b775-696">
            <see cref="M:System.IO.FileStream.EndRead(System.IAsyncResult)" />가 여러 번 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-696">
              <see cref="M:System.IO.FileStream.EndRead(System.IAsyncResult)" /> is called multiple times.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-697">스트림이 닫혔거나 내부 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-697">The stream is closed or an internal error has occurred.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndWrite : IAsyncResult -&gt; unit" Usage="fileStream.EndWrite asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="2b775-698">보류 중인 비동기 I/O 요청입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-698">The pending asynchronous I/O request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-699">비동기 쓰기 작업을 종료하고 I/O 작업이 완료될 때까지 차단시킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-699">Ends an asynchronous write operation and blocks until the I/O operation is complete.</span>
          </span>
          <span data-ttu-id="2b775-700">대신 <see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />를 사용하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-700">(Consider using <see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> instead.)</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-701">.NET Framework 4 및 이전 버전에서와 같은 메서드를 사용 해야 <xref:System.IO.FileStream.BeginWrite%2A> 고 <xref:System.IO.FileStream.EndWrite%2A> 비동기 파일 작업을 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-701">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginWrite%2A> and <xref:System.IO.FileStream.EndWrite%2A> to implement asynchronous file operations.</span></span> <span data-ttu-id="2b775-702">그러나 이러한 메서드는에서 계속 제공 합니다 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 레거시 코드를 지원 하기 위해 새로운 비동기 메서드를 같은 <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, 및 <xref:System.IO.FileStream.FlushAsync%2A>, 비동기 파일 작업을 보다 쉽게 구현 하는 도움말.</span><span class="sxs-lookup"><span data-stu-id="2b775-702">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.</span></span>  
  
 <span data-ttu-id="2b775-703">이 메서드는 <xref:System.IO.Stream.EndWrite%2A>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-703">This method overrides <xref:System.IO.Stream.EndWrite%2A>.</span></span>  
  
 <span data-ttu-id="2b775-704"><xref:System.IO.FileStream.EndWrite%2A> 정확히 한 번만 호출 해야 모든 <xref:System.IAsyncResult> 에서 <xref:System.IO.FileStream.BeginWrite%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-704"><xref:System.IO.FileStream.EndWrite%2A> must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginWrite%2A>.</span></span> <span data-ttu-id="2b775-705"><xref:System.IO.FileStream.EndWrite%2A> I/O 작업이 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-705"><xref:System.IO.FileStream.EndWrite%2A> will block until the I/O operation has completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-706">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-706">This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.</span></span>  
  
 [!code-cpp[System.IO.FileStream2#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#3)]
 [!code-csharp[System.IO.FileStream2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#3)]
 [!code-vb[System.IO.FileStream2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-707">
            <paramref name="asyncResult" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-707">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-708">이 <see cref="T:System.IAsyncResult" /> 개체는 이 클래스에 대해 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />를 호출하여 만들어진 개체가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-708">This <see cref="T:System.IAsyncResult" /> object was not created by calling <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> on this class.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2b775-709">
            <see cref="M:System.IO.FileStream.EndWrite(System.IAsyncResult)" />가 여러 번 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-709">
              <see cref="M:System.IO.FileStream.EndWrite(System.IAsyncResult)" /> is called multiple times.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-710">스트림이 닫혔거나 내부 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-710">The stream is closed or an internal error has occurred.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~FileStream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!FileStream ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="fileStream.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2b775-711">가비지 수집기에서 <see langword="FileStream" />을 회수할 때 리소스가 해제되고 다른 정리 작업이 수행되도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-711">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see langword="FileStream" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-712">가비지 수집기를 호출 하 여 `Finalize` 종료 준비가 된 경우.</span><span class="sxs-lookup"><span data-stu-id="2b775-712">The garbage collector calls `Finalize` when the current object is ready to be finalized.</span></span> <span data-ttu-id="2b775-713">`Finalize` 닫습니다는 `FileStream`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-713">`Finalize` closes the `FileStream`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2b775-714">이 스트림의 버퍼를 지우고 버퍼링된 모든 데이터가 파일에 쓰여지도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-714">Clears buffers for this stream and causes any buffered data to be written to the file.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="fileStream.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2b775-715">이 스트림의 버퍼를 지우고 버퍼링된 모든 데이터가 파일에 쓰여지도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-715">Clears buffers for this stream and causes any buffered data to be written to the file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-716">이 메서드는 <xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-716">This method overrides <xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2b775-717">호출 하는 경우는 <xref:System.IO.FileStream.Flush%2A?displayProperty=nameWithType> 메서드, 운영 체제 I/O 버퍼는도 플러시됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-717">When you call the <xref:System.IO.FileStream.Flush%2A?displayProperty=nameWithType> method, the operating system I/O buffer is also flushed.</span></span>  
  
 <span data-ttu-id="2b775-718">스트림 인코더 명시적으로 호출 하지 않으면 플러시되지 않습니다 <xref:System.IO.FileStream.Flush%2A> 또는 개체를 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-718">A stream’s encoder is not flushed unless you explicitly call <xref:System.IO.FileStream.Flush%2A> or dispose of the object.</span></span> <span data-ttu-id="2b775-719">설정 <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> 에 `true` 스트림 버퍼에서 데이터를 플러시할 수는 있지만 인코더 상태는 플러시되지 있다는 것을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-719">Setting <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="2b775-720">이 수는 다음 문자 블록을 올바르게 인코딩할 수 있도록 상태로 (부분 자)를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-720">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="2b775-721">이 시나리오는 UTF8 및 UTF7 인코더는 인접 한 문자를 받은 후 특정 문자를 인코딩된만 수 있는 영향을 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-721">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
 <span data-ttu-id="2b775-722">읽기 또는 쓰기에 대 한 버퍼를 사용할 수 있으므로 <xref:System.IO.FileStream.Flush> 다음 두 가지 기능을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-722">Because a buffer can be used for either reading or writing, <xref:System.IO.FileStream.Flush> performs the following two functions:</span></span>  
  
-   <span data-ttu-id="2b775-723">이전에 버퍼에 기록 된 모든 데이터가 파일에 복사 됩니다 하 고 버퍼 인코더 상태로 제외 하 고 선택을 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-723">Any data previously written to the buffer is copied to the file and the buffer is cleared except for its encoder state.</span></span>  
  
-   <span data-ttu-id="2b775-724">하는 경우 <xref:System.IO.BufferedStream.CanSeek%2A?displayProperty=nameWithType> 는 `true` 및 데이터 읽기 위해 파일에서 이전에 복사 되었는지, 파일 내에서 현재 위치가 버퍼에 읽지 않은 바이트의 수로 감소 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-724">If <xref:System.IO.BufferedStream.CanSeek%2A?displayProperty=nameWithType> is `true` and data was previously copied from the file to the buffer for reading, the current position within the file is decremented by the number of unread bytes in the buffer.</span></span> <span data-ttu-id="2b775-725">버퍼는 지워집니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-725">The buffer is then cleared.</span></span>  
  
 <span data-ttu-id="2b775-726">사용 하 여는 <xref:System.IO.FileStream.Flush%28System.Boolean%29> 메서드 오버 로드는 중간 파일 버퍼에서 버퍼링 된 모든 데이터를 확인 하려고 할 때 작성 된 디스크.</span><span class="sxs-lookup"><span data-stu-id="2b775-726">Use the <xref:System.IO.FileStream.Flush%28System.Boolean%29> method overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-727">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.IO.FileStream.Lock%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2b775-727">This code example is part of a larger example provided for the <xref:System.IO.FileStream.Lock%2A> method.</span></span>  
  
 [!code-cpp[System.IO.FileStream3#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream3/CPP/fstreamlock.cpp#4)]
 [!code-csharp[System.IO.FileStream3#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream3/CS/fstreamlock.cs#4)]
 [!code-vb[System.IO.FileStream3#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream3/VB/fstreamlock.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-728">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-728">An I/O error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2b775-729">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-729">The stream is closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.IO.FileStream.Flush(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public virtual void Flush (bool flushToDisk);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush(bool flushToDisk) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Flush(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Flush (flushToDisk As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Flush(bool flushToDisk);" />
      <MemberSignature Language="F#" Value="override this.Flush : bool -&gt; unit" Usage="fileStream.Flush flushToDisk" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flushToDisk" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="flushToDisk">
          <span data-ttu-id="2b775-730">모든 중간 파일 버퍼를 플러시하려면 <see langword="true" />이고, 플러시하지 않으려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-730">
              <see langword="true" /> to flush all intermediate file buffers; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-731">이 스트림에 대한 버퍼를 지우고 버퍼링된 모든 데이터가 파일에 쓰여지도록 하며 모든 중간 파일 버퍼도 지웁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-731">Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-732">중간 파일 버퍼에서 버퍼링 된 모든 데이터를 확인 하려는 경우이 오버 로드에 씌 사용 하 여 디스크에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-732">Use this overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.</span></span>  
  
 <span data-ttu-id="2b775-733">호출 하는 경우는 <xref:System.IO.FileStream.Flush%2A> 메서드, 운영 체제 I/O 버퍼는도 플러시됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-733">When you call the <xref:System.IO.FileStream.Flush%2A> method, the operating system I/O buffer is also flushed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileStream.Flush" />
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="fileStream.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="2b775-734">취소 요청을 모니터링할 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-734">The token to monitor for cancellation requests.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-735">이 스트림에 대해 모든 버퍼를 비동기적으로 지우고 버퍼링된 데이터가 내부 장치에 쓰여지도록 하고 취소 요청을 모니터링합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-735">Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2b775-736">비동기 플러시 작업을 나타내는 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-736">A task that represents the asynchronous flush operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-737">호출 하는 경우는 <xref:System.IO.FileStream.FlushAsync%2A> 메서드, 운영 체제 I/O 버퍼는도 플러시됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-737">When you call the <xref:System.IO.FileStream.FlushAsync%2A> method, the operating system I/O buffer is also flushed.</span></span>  
  
 <span data-ttu-id="2b775-738">완료 되기 전에 작업이 취소 되 면 반환 된 작업이 포함 된 <xref:System.Threading.Tasks.TaskStatus.Canceled> 에 대 한 값는 <xref:System.Threading.Tasks.Task.Status%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="2b775-738">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span> <span data-ttu-id="2b775-739">파일 핸들을 삭제 하는 경우 반환 된 작업이 포함 된 <xref:System.ObjectDisposedException> 예외를 <xref:System.Threading.Tasks.Task.Exception%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="2b775-739">If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2b775-740">스트림이 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-740">The stream has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.FileSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.FileSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As FileSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::FileSecurity ^ GetAccessControl();" />
      <MemberSignature Language="F#" Value="member this.GetAccessControl : unit -&gt; System.Security.AccessControl.FileSecurity" Usage="fileStream.GetAccessControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.FileSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2b775-741">현재 <see cref="T:System.Security.AccessControl.FileSecurity" /> 개체에서 설명하는 파일의 ACL(액세스 제어 목록) 항목을 캡슐화하는 <see cref="T:System.IO.FileStream" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-741">Gets a <see cref="T:System.Security.AccessControl.FileSecurity" /> object that encapsulates the access control list (ACL) entries for the file described by the current <see cref="T:System.IO.FileStream" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2b775-742">현재 <see cref="T:System.IO.FileStream" /> 개체에서 설명하는 파일의 액세스 제어 설정을 캡슐화하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-742">An object that encapsulates the access control settings for the file described by the current <see cref="T:System.IO.FileStream" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-743">동안 합니다 <xref:System.IO.FileStream> 클래스 및 <xref:System.IO.FileStream.GetAccessControl%2A> 기존 파일의 액세스 제어 목록 (ACL) 항목을 검색을 사용 하 여 사용할 수 있습니다 <xref:System.IO.File.GetAccessControl%2A?displayProperty=nameWithType> 메서드를 사용 하기가 더 쉽습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-743">While the <xref:System.IO.FileStream> class and <xref:System.IO.FileStream.GetAccessControl%2A> can be used to retrieve the access control list (ACL) entries of an existing file, consider using <xref:System.IO.File.GetAccessControl%2A?displayProperty=nameWithType> method, as it is easier to use.</span></span>  
  
 <span data-ttu-id="2b775-744">사용 된 <xref:System.IO.FileStream.GetAccessControl%2A> 파일에 대 한 ACL 항목을 검색 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-744">Use the <xref:System.IO.FileStream.GetAccessControl%2A> method to retrieve the ACL entries for a file.</span></span>  
  
 <span data-ttu-id="2b775-745">ACL에는 개인 및/또는 그룹 했거나 권한이 없는, 지정된 된 파일에서 특정 작업을 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-745">An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file.</span></span> <span data-ttu-id="2b775-746">자세한 내용은 [방법: Access Control 목록 항목 추가 또는 제거](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="2b775-746">For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2b775-747">파일이 닫혀 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-747">The file is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-748">파일을 여는 동안 I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-748">An I/O error occurred while opening the file.</span>
          </span>
        </exception>
        <exception cref="T:System.SystemException">
          <span data-ttu-id="2b775-749">파일을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-749">The file could not be found.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="2b775-750">현재 플랫폼이 해당 작업을 지원하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-750">This operation is not supported on the current platform.</span>
          </span>
          <span data-ttu-id="2b775-751">-또는-  호출자에게 필요한 권한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-751">-or-  The caller does not have the required permission.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public virtual IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.Handle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.IO.FileStream.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use SafeFileHandle instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2b775-752">현재 <see langword="FileStream" /> 개체가 캡슐화할 파일에 대한 운영 체제 파일 핸들을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-752">Gets the operating system file handle for the file that the current <see langword="FileStream" /> object encapsulates.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2b775-753">이 <see langword="FileStream" /> 개체가 캡슐화할 파일에 대한 운영 체제 파일 핸들입니다. <see langword="FileStream" />이 닫혀 있는 경우에는 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-753">The operating system file handle for the file encapsulated by this <see langword="FileStream" /> object, or -1 if the <see langword="FileStream" /> has been closed.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-754">이 속성은 운영 체제에서 제공 하는 시스템 호출에 사용할 운영 체제 핸들 (같은 `ReadFile` Windows에서).</span><span class="sxs-lookup"><span data-stu-id="2b775-754">This property is an operating system handle for use with operating-system-provided system calls (such as `ReadFile` on Windows).</span></span> <span data-ttu-id="2b775-755">파일 설명자와 같은 예상 하는 C 라이브러리 함수를 사용 하 여 작동 하지 것입니다 `fread`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-755">It will not work with C library functions that expect a file descriptor, such as `fread`.</span></span>  
  
 <span data-ttu-id="2b775-756">운영 체제 핸들을 있습니다 열었던 동기적 또는 비동기적인지에 따라 `FileStream` 생성자를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-756">The operating system handle might have been opened synchronously or asynchronously, depending on which `FileStream` constructor was called.</span></span> <span data-ttu-id="2b775-757">사용 된 <xref:System.IO.FileStream.IsAsync%2A> 이 핸들 비동기식으로 열렸을 여부를 검색 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-757">Use the <xref:System.IO.FileStream.IsAsync%2A> property to discover whether this handle was opened asynchronously.</span></span> <span data-ttu-id="2b775-758">Win32, 즉, 겹친된 IO에 대 한 핸들이 열린 및 다른 매개 변수를 필요 `ReadFile` 고 `WriteFile`입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-758">In Win32, this means the handle was opened for overlapped IO, and it requires different parameters to `ReadFile` and `WriteFile`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-759">데이터 손상이 발생할 수 있습니다는 `FileStream` 는 해당 핸들을 전달, 일부 작업 핸들의 파일 포인터를 이동 생성 차례로 `FileStream` 다시 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-759">Data corruption might occur if a `FileStream` is created, its handle is passed, some operation moves the handle's file pointer, and then the `FileStream` is used again.</span></span> <span data-ttu-id="2b775-760">여러 스레드 수 없습니다. 동일한 파일에 동시에 쓸 안전 하 게 하 고 `FileStream` 핸들을 단독으로 제어 하는 것을 가정 코드를 버퍼링 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-760">Multiple threads cannot safely write to the same file simultaneously, and `FileStream` buffering code assumes that it exclusively controls the handle.</span></span> <span data-ttu-id="2b775-761">`FileStream` throw 할 수는 <xref:System.IO.IOException> 경우 `FileStream` 다른 프로세스는 파일 포인터를 옮겨 졌음을 감지 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-761">`FileStream` might throw an <xref:System.IO.IOException> if `FileStream` detects that some other process has moved the file pointer.</span></span> <span data-ttu-id="2b775-762">이 방지 하려면 쓰지 마십시오. 모든 데이터 파일의 부분에 있는 `FileStream` 수 버퍼링 했 고 파일 포인터 위치에 복원에 마지막으로 메서드 호출 되었을 때 `FileStream`합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-762">To avoid this, do not write any data into a portion of the file that `FileStream` might have buffered, and restore the file pointer to the location it had when methods were last called on `FileStream`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="2b775-763">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-763">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="2b775-764">비관리 코드에 액세스할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-764">for the ability to access unmanaged code.</span>
          </span>
          <span data-ttu-id="2b775-765">연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> 보안 작업: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-765">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> Security action: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="2b775-766">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-766">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2b775-767">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-767">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="IsAsync">
      <MemberSignature Language="C#" Value="public virtual bool IsAsync { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAsync" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.IsAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsAsync As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAsync { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAsync : bool" Usage="System.IO.FileStream.IsAsync" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2b775-768">
            <see langword="FileStream" />이 동기적으로 열렸는지 또는 비동기적으로 열렸는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-768">Gets a value indicating whether the <see langword="FileStream" /> was opened asynchronously or synchronously.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2b775-769">
            <see langword="FileStream" />이 비동기적으로 열렸으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-769">
              <see langword="true" /> if the <see langword="FileStream" /> was opened asynchronously; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-770">`IsAsync` 속성 검색 여부를 합니다 `FileStream` 사용 하도록 코드를 사용 하도록 설정 하면 핸들이 비동기적으로 열린를 <xref:System.IO.FileStream.Handle%2A> 속성 올바르게.</span><span class="sxs-lookup"><span data-stu-id="2b775-770">The `IsAsync` property detects whether the `FileStream` handle was opened asynchronously, enabling your code to use the <xref:System.IO.FileStream.Handle%2A> property correctly.</span></span> <span data-ttu-id="2b775-771">Win32에서는 `IsAsync` 핸들 겹쳐진된 I/O에 대 한 열린으로 필요한 다른 매개 변수를 true로 설정 되 `ReadFile` 고 `WriteFile`입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-771">In Win32, `IsAsync` being true means the handle was opened for overlapped I/O, and thus requires different parameters to `ReadFile` and `WriteFile`.</span></span>  
  
 <span data-ttu-id="2b775-772">인스턴스를 만들 때이 값을 지정 하는 <xref:System.IO.FileStream> 클래스에 생성자를 사용 하는 `isAsync`를 `useAsync`, 또는 `options` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-772">You specify this value when you create an instance of the <xref:System.IO.FileStream> class using a constructor that has an `isAsync`, `useAsync`, or `options` parameter.</span></span> <span data-ttu-id="2b775-773">속성이 `true`를 스트림에 비동기적으로 파일 작업을 수행 하려면의 겹쳐진된 I/O를 활용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-773">When the property is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously.</span></span> <span data-ttu-id="2b775-774">그러나를 <xref:System.IO.FileStream.IsAsync%2A> 속성에 수 없습니다 `true` 를 호출 하는 <xref:System.IO.FileStream.ReadAsync%2A>를 <xref:System.IO.FileStream.WriteAsync%2A>, 또는 <xref:System.IO.Stream.CopyToAsync%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2b775-774">However, the <xref:System.IO.FileStream.IsAsync%2A> property does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method.</span></span> <span data-ttu-id="2b775-775">경우는 <xref:System.IO.FileStream.IsAsync%2A> 속성은 `false` 및 비동기 읽기를 호출 하 고 쓰기 작업, 여전히 UI 스레드가 차단 되지 않지만 실제 I/O 작업이 동기적으로 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-775">When the <xref:System.IO.FileStream.IsAsync%2A> property is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-776">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-776">This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.</span></span>  
  
 [!code-cpp[System.IO.FileStream2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#2)]
 [!code-csharp[System.IO.FileStream2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#2)]
 [!code-vb[System.IO.FileStream2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.IO.FileStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2b775-777">스트림의 길이(바이트)를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-777">Gets the length in bytes of the stream.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2b775-778">스트림 길이(바이트)를 나타내는 long 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-778">A long value representing the length of the stream in bytes.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-779">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-779">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-780">다음 예제에서는 합니다 `Length` 고 `Position` 파일 끝 조건을 확인 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-780">The following example uses the `Length` and `Position` properties to check for an end-of-file condition.</span></span>  
  
 [!code-cpp[Classic FileStream.Length Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.Length Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FileStream.Length Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.Length Example/CS/source.cs#1)]
 [!code-vb[Classic FileStream.Length Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.Length Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-781">이 스트림에 대한 <see cref="P:System.IO.FileStream.CanSeek" />가 <see langword="false" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-781">
              <see cref="P:System.IO.FileStream.CanSeek" /> for this stream is <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-782">I/O 오류가(예: 파일 닫기 오류) 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-782">An I/O error, such as the file being closed, occurred.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public virtual void Lock (long position, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Lock(int64 position, int64 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Lock(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Lock (position As Long, length As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Lock(long position, long length);" />
      <MemberSignature Language="F#" Value="abstract member Lock : int64 * int64 -&gt; unit&#xA;override this.Lock : int64 * int64 -&gt; unit" Usage="fileStream.Lock (position, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="position">
          <span data-ttu-id="2b775-783">잠글 범위의 시작 부분입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-783">The beginning of the range to lock.</span>
          </span>
          <span data-ttu-id="2b775-784">이 매개 변수의 값은 0보다 크거나 같아야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-784">The value of this parameter must be equal to or greater than zero (0).</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="2b775-785">잠글 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-785">The range to be locked.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-786">다른 프로세스가 <see cref="T:System.IO.FileStream" />을 읽거나 쓰지 못하게 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-786">Prevents other processes from reading from or writing to the <see cref="T:System.IO.FileStream" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-787">파일 스트림의 범위를 잠그면 파일 스트림의 해당 범위에 스레드가 잠금 프로세스 단독 액세스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-787">Locking a range of a file stream gives the threads of the locking process exclusive access to that range of the file stream.</span></span>  
  
 <span data-ttu-id="2b775-788">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-788">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-789">다음 코드 예제에는 파일의 일부를 파일에 읽기/쓰기 액세스를 포함 하더라도 다른 프로세스에서 파일의 해당 파트를 액세스할 수 없도록 차단 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-789">The following code example demonstrates how to lock part of a file so another process cannot access that part of the file even though it has read/write access to the file.</span></span> <span data-ttu-id="2b775-790">다른 명령 창에서 프로그램을 동시에 실행 하 고 다른 콘솔 입력된 옵션을 사용 하 여 조사 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-790">Run the program simultaneously in different command windows and investigate using the different console input options.</span></span>  
  
 [!code-cpp[System.IO.FileStream3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream3/CPP/fstreamlock.cpp#1)]
 [!code-csharp[System.IO.FileStream3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream3/CS/fstreamlock.cs#1)]
 [!code-vb[System.IO.FileStream3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream3/VB/fstreamlock.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-791">
            <paramref name="position" /> 또는 <paramref name="length" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-791">
              <paramref name="position" /> or <paramref name="length" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2b775-792">파일이 닫혀 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-792">The file is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-793">다른 프로세스에서 파일의 부분을 잠갔으므로 이 프로세스에서 해당 파일에 액세스할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-793">The process cannot access the file because another process has locked a portion of the file.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.IO.FileStream.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2b775-794">생성자에 전달된 <see langword="FileStream" />의 이름을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-794">Gets the name of the <see langword="FileStream" /> that was passed to the constructor.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2b775-795">
            <see langword="FileStream" />의 이름인 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-795">A string that is the name of the <see langword="FileStream" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-796">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-796">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-797">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-797">This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.</span></span>  
  
 [!code-cpp[System.IO.FileStream2#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#4)]
 [!code-csharp[System.IO.FileStream2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#4)]
 [!code-vb[System.IO.FileStream2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="2b775-798">경로에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-798">for access to the path.</span>
          </span>
          <span data-ttu-id="2b775-799">연결 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-799">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.IO.FileStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2b775-800">이 스트림의 현재 위치를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-800">Gets or sets the current position of this stream.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2b775-801">이 스트림의 현재 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-801">The current position of this stream.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-802">스트림의 길이 초과 하는 위치 검색을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-802">Seeking to any location beyond the length of the stream is supported.</span></span>  <span data-ttu-id="2b775-803">파일의 길이 넘어서 검색 하면 파일 크기가 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-803">When you seek beyond the length of the file, the file size grows.</span></span>  <span data-ttu-id="2b775-804">Microsoft Windows NT에서 이상 버전에서는 파일의 끝에 추가 된 모든 데이터를 0으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-804">In Microsoft Windows NT and newer, any data added to the end of the file is set to zero.</span></span>  <span data-ttu-id="2b775-805">Microsoft Windows 98에서 또는 이전 버전에서는 파일의 끝에 추가 된 모든 데이터를 0으로 이전에 데이터를 삭제 하는 스트림에 표시 하지 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-805">In Microsoft Windows 98 or earlier, any data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream.</span></span> <span data-ttu-id="2b775-806">Windows 98 또는 이전 스트림의 끝을 큰 값으로 스트림의 위치를 설정 하면 예외가 발생할 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-806">Setting the position of the stream to a large value beyond the end of the stream in Windows 98 or earlier may result in an exception being raised.</span></span>  
  
 <span data-ttu-id="2b775-807">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-807">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-808">다음 예제에서는 합니다 `Length` 고 `Position` 파일 끝 조건을 확인 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-808">The following example uses the `Length` and `Position` properties to check for an end-of-file condition.</span></span>  
  
 [!code-cpp[Classic FileStream.Length Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.Length Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FileStream.Length Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.Length Example/CS/source.cs#1)]
 [!code-vb[Classic FileStream.Length Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.Length Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-809">스트림이 검색을 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-809">The stream does not support seeking.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-810">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-810">An I/O error occurred.</span>
          </span>
          <span data-ttu-id="2b775-811">\- 또는-  Windows 98 이전 버전에서 위치가 스트림 끝을 벗어나는 매우 큰 값으로 설정되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-811">\- or -  The position was set to a very large value beyond the end of the stream in Windows 98 or earlier.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-812">위치를 음수 값으로 설정하려고 했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-812">Attempted to set the position to a negative value.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="2b775-813">스트림의 끝을 벗어나는 검색을 시도했으며 이 작업은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-813">Attempted seeking past the end of a stream that does not support this.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] array, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read([out] unsigned int8[] array, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (array As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ array, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="fileStream.Read (array, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="2b775-814">이 메서드는 지정된 바이트 배열의 값이 <c>오프셋</c>과 (<c>오프셋</c> + <c>카운트</c> - 1<c>)</c> 사이에서 현재 소스로부터 읽어온 바이트로 교체된 상태로 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-814">When this method returns, contains the specified byte array with the values between <c>offset</c> and (<c>offset</c> + <c>count</c> - 1<c>)</c> replaced by the bytes read from the current source.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="2b775-815">읽기 바이트를 넣을 <c>배열</c>의 바이트 오프셋입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-815">The byte offset in <c>array</c> at which the read bytes will be placed.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2b775-816">읽을 최대 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-816">The maximum number of bytes to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-817">스트림에서 바이트 블록을 읽어서 해당 데이터를 제공된 버퍼에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-817">Reads a block of bytes from the stream and writes the data in a given buffer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2b775-818">버퍼로 읽어온 총 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-818">The total number of bytes read into the buffer.</span>
          </span>
          <span data-ttu-id="2b775-819">이 바이트 수는 사용 가능한 바이트 수가 부족한 경우 요청된 바이트 수보다 작을 수 있으며, 스트림의 끝에 도달하면 0이 됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-819">This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-820">이 메서드는 <xref:System.IO.Stream.Read%2A>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-820">This method overrides <xref:System.IO.Stream.Read%2A>.</span></span>  
  
 <span data-ttu-id="2b775-821">`offset` 의 바이트 오프셋을 제공 하는 매개 변수 `array` (버퍼 인덱스)를 읽기 시작할 위치의 및 `count` 매개 변수는이 스트림에서 읽을 바이트의 최대 수를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-821">The `offset` parameter gives the offset of the byte in `array` (the buffer index) at which to begin reading, and the `count` parameter gives the maximum number of bytes to be read from this stream.</span></span> <span data-ttu-id="2b775-822">반환된 된 값은 0 또는 읽은 바이트 수가 실제 스트림의 맨 끝에 도달한 경우</span><span class="sxs-lookup"><span data-stu-id="2b775-822">The returned value is the actual number of bytes read, or zero if the end of the stream is reached.</span></span> <span data-ttu-id="2b775-823">읽기 작업이 성공 하면 스트림의 현재 위치는 읽은 바이트 수 만큼 앞 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-823">If the read operation is successful, the current position of the stream is advanced by the number of bytes read.</span></span> <span data-ttu-id="2b775-824">예외가 발생 하는 경우 스트림의 현재 위치가 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-824">If an exception occurs, the current position of the stream is unchanged.</span></span>  
  
 <span data-ttu-id="2b775-825"><xref:System.IO.FileStream.Read%2A> 메서드가 스트림의 끝에 도달한 후에 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-825">The <xref:System.IO.FileStream.Read%2A> method returns zero only after reaching the end of the stream.</span></span> <span data-ttu-id="2b775-826">그렇지 않으면 <xref:System.IO.FileStream.Read%2A> 항상 스트림에서 반환 하기 전에 최소한 1 바이트를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-826">Otherwise, <xref:System.IO.FileStream.Read%2A> always reads at least one byte from the stream before returning.</span></span> <span data-ttu-id="2b775-827">호출 시 스트림에서 없는 데이터를 사용할 수 있으면 <xref:System.IO.FileStream.Read%2A>, 메서드는 최소한 1 바이트의 데이터를 반환할 수 있습니다 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-827">If no data is available from the stream upon a call to <xref:System.IO.FileStream.Read%2A>, the method will block until at least one byte of data can be returned.</span></span> <span data-ttu-id="2b775-828">구현을 스트림의 맨 끝에 도달 하지 않은 경우에 요청 된 것 보다 적은 바이트를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-828">An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</span></span>  
  
 <span data-ttu-id="2b775-829">사용 하 여 <xref:System.IO.BinaryReader> 읽기 기본 데이터 형식에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-829">Use <xref:System.IO.BinaryReader> for reading primitive data types.</span></span>  
  
 <span data-ttu-id="2b775-830">읽기 작업을 수행 하는 스레드를 중단 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="2b775-830">Do not interrupt a thread that is performing a read operation.</span></span> <span data-ttu-id="2b775-831">응용 프로그램 스레드가 차단 해제 되 면 성공적으로 실행 하려면 나타날 수 있습니다 하지만 응용 프로그램의 성능 및 안정성 중단 줄일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-831">Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.</span></span>  
  
 <span data-ttu-id="2b775-832">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-832">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-833">다음 예제에서는 콘텐츠를 <xref:System.IO.FileStream> 및 다른 쓰기 <xref:System.IO.FileStream>합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-833">The following example reads the contents from a <xref:System.IO.FileStream> and writes it into another <xref:System.IO.FileStream>.</span></span>  
  
 [!code-csharp[FSRead#1](~/samples/snippets/csharp/VS_Snippets_CLR/FSRead/CS/fsread.cs#1)]
 [!code-vb[FSRead#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FSRead/VB/fsread.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-834">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-834">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-835">
            <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-835">
              <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-836">스트림이 읽기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-836">The stream does not support reading.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-837">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-837">An I/O error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-838">
            <paramref name="offset" /> 및 <paramref name="count" />가 <paramref name="array" />에서 잘못된 범위를 설명하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-838">
              <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2b775-839">스트림이 닫힌 후에 메서드가 호출되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-839">Methods were called after the stream was closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ReadAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="fileStream.ReadAsync (buffer, offset, count, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="2b775-840">데이터를 쓸 버퍼입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-840">The buffer to write the data into.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="2b775-841">스트림의 데이터를 쓰기 시작할 <c>버퍼</c>의 바이트 오프셋입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-841">The byte offset in <c>buffer</c> at which to begin writing data from the stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2b775-842">읽을 최대 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-842">The maximum number of bytes to read.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="2b775-843">취소 요청을 모니터링할 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-843">The token to monitor for cancellation requests.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-844">현재 스트림에서 바이트의 시퀀스를 비동기적으로 읽고 읽은 바이트 수만큼 스트림 내에서 앞으로 이동하며 취소 요청을 모니터링합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-844">Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2b775-845">비동기 읽기 작업을 나타내는 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-845">A task that represents the asynchronous read operation.</span>
          </span>
          <span data-ttu-id="2b775-846">
            <paramref name="TResult" /> 매개 변수의 값은 버퍼 안으로 읽어들인 총 바이트 수를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-846">The value of the <paramref name="TResult" /> parameter contains the total number of bytes read into the buffer.</span>
          </span>
          <span data-ttu-id="2b775-847">현재 사용할 수 있는 바이트 수가 요청된 수보다 작을 경우 결과 값이 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-847">The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-848"><xref:System.IO.FileStream.ReadAsync%2A> 메서드를 사용 하면 주 스레드를 차단 하지 않고 리소스를 많이 사용 파일 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-848">The <xref:System.IO.FileStream.ReadAsync%2A> method enables you to perform resource-intensive file operations without blocking the main thread.</span></span> <span data-ttu-id="2b775-849">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 응용 프로그램 또는 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 응용 프로그램에서 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-849">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="2b775-850">비동기 메서드를 함께에서 사용 합니다 `async` 고 `await` Visual Basic 및 C# 키워드입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-850">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="2b775-851">사용 된 <xref:System.IO.FileStream.CanRead%2A> 현재 인스턴스가 읽기를 지원 하는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-851">Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
 <span data-ttu-id="2b775-852">완료 되기 전에 작업이 취소 되 면 반환 된 작업이 포함 된 <xref:System.Threading.Tasks.TaskStatus.Canceled> 에 대 한 값는 <xref:System.Threading.Tasks.Task.Status%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="2b775-852">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span> <span data-ttu-id="2b775-853">파일 핸들을 삭제 하는 경우 반환 된 작업이 포함 된 <xref:System.ObjectDisposedException> 예외를 <xref:System.Threading.Tasks.Task.Exception%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="2b775-853">If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-854">다음 예제에서는 비동기적으로 파일을 읽는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-854">The following example shows how to read from a file asynchronously.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#4](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example4.cs#4)]
 [!code-vb[Asynchronous_File_IO_async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-855">
            <paramref name="buffer" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-855">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-856">
            <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-856">
              <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-857">
            <paramref name="offset" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-857">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-858">스트림이 읽기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-858">The stream does not support reading.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2b775-859">스트림이 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-859">The stream has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2b775-860">스트림을 현재 이전 읽기 작업에서 사용 중입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-860">The stream is currently in use by a previous read operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public override int ReadByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.ReadByte" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadByte () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadByte();" />
      <MemberSignature Language="F#" Value="override this.ReadByte : unit -&gt; int" Usage="fileStream.ReadByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2b775-861">파일에서 1바이트를 읽고 읽기 위치를 1바이트만큼 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-861">Reads a byte from the file and advances the read position one byte.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2b775-862">
            <see cref="T:System.Int32" />로 캐스팅된 바이트이거나 스트림의 끝에 도달한 경우 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-862">The byte, cast to an <see cref="T:System.Int32" />, or -1 if the end of the stream has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-863">이 메서드는 <xref:System.IO.Stream.ReadByte%2A>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-863">This method overrides <xref:System.IO.Stream.ReadByte%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b775-864">사용 된 <xref:System.IO.FileStream.CanRead%2A> 현재 인스턴스가 읽기를 지원 하는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-864">Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading.</span></span> <span data-ttu-id="2b775-865">자세한 내용은 <xref:System.IO.Stream.CanRead%2A>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="2b775-865">For additional information, see <xref:System.IO.Stream.CanRead%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-866">다음 코드 예제에서는 바이트 단위로 파일에 데이터를 쓰고 다음 데이터 쓰여졌는지 확인 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-866">The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.</span></span>  
  
 [!code-cpp[System.IO.FileStream1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream1/CPP/source.cpp#1)]
 [!code-csharp[System.IO.FileStream1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream1/CS/source.cs#1)]
 [!code-vb[System.IO.FileStream1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-867">현재 스트림이 읽기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-867">The current stream does not support reading.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2b775-868">현재 스트림이 닫혀 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-868">The current stream is closed.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="2b775-869">
            <para>기본 구현을 <see langword="Stream" /> 새 싱글바이트 배열을 만들고 호출 <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />합니다. 공식적으로 올바른 중일 것은 비효율적입니다. 내부 버퍼를 사용 하 여 스트림을이 메서드를 재정의 하 고 버퍼에 대 한 모든 호출 추가 배열 할당 방지를 직접 읽는 훨씬 더 효율적으로 버전을 제공 해야 합니다.  일반적인 파일 및 디렉터리 작업의 목록을 [일반적인 I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)을 참조 하세요.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-869">
              <para>The default implementation on <see langword="Stream" /> creates a new single-byte array and then calls <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />. While this is formally correct, it is inefficient. Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.  For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SafeFileHandle">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileStream.SafeFileHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SafeFileHandle As SafeFileHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::Win32::SafeHandles::SafeFileHandle ^ SafeFileHandle { Microsoft::Win32::SafeHandles::SafeFileHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SafeFileHandle : Microsoft.Win32.SafeHandles.SafeFileHandle" Usage="System.IO.FileStream.SafeFileHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeFileHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2b775-870">현재 <see cref="T:System.IO.FileStream" /> 개체가 캡슐화하는 파일에 대한 운영 체제 파일 핸들을 나타내는 <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-870">Gets a <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" /> object that represents the operating system file handle for the file that the current <see cref="T:System.IO.FileStream" /> object encapsulates.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2b775-871">현재 <see cref="T:System.IO.FileStream" /> 개체가 캡슐화하는 파일에 대한 운영 체제 파일 핸들을 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-871">An object that represents the operating system file handle for the file that the current <see cref="T:System.IO.FileStream" /> object encapsulates.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-872"><xref:System.IO.FileStream.SafeFileHandle%2A> 자동으로 스트림을 플러시합니다 속성과 현재 스트림 위치를 0으로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-872">The <xref:System.IO.FileStream.SafeFileHandle%2A> property automatically flushes the stream and sets the current stream position to 0.</span></span>  <span data-ttu-id="2b775-873">이렇게 하면 이동할 파일 또는 스트림 위치를 사용 하 여 다른 stream으로 다시 설정할 수는 <xref:System.IO.FileStream.SafeFileHandle%2A> 이 속성에서 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-873">This allows the file to be moved or the stream position to be reset by another stream using the <xref:System.IO.FileStream.SafeFileHandle%2A> returned by this property.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="2b775-874">관리 되지 않는 코드를 호출할 수 있는 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-874">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="2b775-875">보안 동작: 열거형 링크 요청에 연결 합니다. <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-875">Security action: Link Demand  Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="2b775-876">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-876">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="2b775-877">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-877">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="fileStream.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">
          <span data-ttu-id="2b775-878">검색을 시작할 <c>원본</c>에 상대적인 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-878">The point relative to <c>origin</c> from which to begin seeking.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="2b775-879">
            <see cref="T:System.IO.SeekOrigin" /> 형식의 값을 사용하여 시작, 끝 또는 현재 위치를 <c>오프셋</c>에 대한 참조 지점으로 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-879">Specifies the beginning, the end, or the current position as a reference point for <c>offset</c>, using a value of type <see cref="T:System.IO.SeekOrigin" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-880">이 스트림의 현재 위치를 제공된 값으로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-880">Sets the current position of this stream to the given value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2b775-881">스트림 내의 새 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-881">The new position in the stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-882">이 메서드는 <xref:System.IO.Stream.Seek%2A?displayProperty=nameWithType>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-882">This method overrides <xref:System.IO.Stream.Seek%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b775-883">사용 된 <xref:System.IO.FileStream.CanSeek%2A?displayProperty=nameWithType> 현재 인스턴스 검색을 지원 하는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-883">Use the <xref:System.IO.FileStream.CanSeek%2A?displayProperty=nameWithType> property to determine whether the current instance supports seeking.</span></span> <span data-ttu-id="2b775-884">자세한 내용은 <xref:System.IO.Stream.CanSeek%2A?displayProperty=nameWithType>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="2b775-884">For additional information, see <xref:System.IO.Stream.CanSeek%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="2b775-885">스트림의 길이 초과 하는 위치를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-885">You can seek to any location beyond the length of the stream.</span></span> <span data-ttu-id="2b775-886">파일의 길이 넘어서 검색 하면 파일 크기가 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-886">When you seek beyond the length of the file, the file size grows.</span></span> <span data-ttu-id="2b775-887">Windows NT 및 이상 버전에서 파일의 끝에 추가 된 데이터를 0으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-887">In Windows NT and later versions, data added to the end of the file is set to zero.</span></span> <span data-ttu-id="2b775-888">Windows 98 또는 이전 버전에서 파일의 끝에 추가 된 데이터를 0으로 이전에 데이터를 삭제 하는 스트림에 표시 하지 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-888">In Windows 98 or earlier versions, data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream.</span></span>  
  
 <span data-ttu-id="2b775-889">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-889">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-890">다음 예제에서는 바이트 단위로 파일에 데이터를 쓰고 다음 데이터 쓰여졌는지 확인 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-890">The following example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.</span></span>  
  
 [!code-cpp[System.IO.FileStream1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream1/CPP/source.cpp#1)]
 [!code-csharp[System.IO.FileStream1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream1/CS/source.cs#1)]
 [!code-vb[System.IO.FileStream1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream1/VB/source.vb#1)]  
  
 <span data-ttu-id="2b775-891">다음 예제에서는 다양 한를 사용 하 여 파일의 시작 부분에 파일의 끝에서는 반대 방향으로 텍스트를 읽고 <xref:System.IO.SeekOrigin> 값을 <xref:System.IO.FileStream.Seek%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2b775-891">The following example reads text in the reverse direction, from the end of file to the beginning of the file, by using the various <xref:System.IO.SeekOrigin> values with the <xref:System.IO.FileStream.Seek%2A> method.</span></span>  
  
 [!code-csharp[System.IO.FileStream.Seek#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.filestream.seek/cs/source.cs#1)]
 [!code-vb[System.IO.FileStream.Seek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.filestream.seek/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-892">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-892">An I/O error occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-893">
            <see langword="FileStream" />이 파이프 또는 콘솔 출력에서 생성되는 경우와 같이 스트림이 검색을 지원하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-893">The stream does not support seeking, such as if the <see langword="FileStream" /> is constructed from a pipe or console output.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-894">스트림의 시작 이전부터 검색이 시도되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-894">Seeking is attempted before the beginning of the stream.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2b775-895">스트림이 닫힌 후에 메서드가 호출되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-895">Methods were called after the stream was closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.FileSecurity fileSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.FileSecurity fileSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::FileSecurity ^ fileSecurity);" />
      <MemberSignature Language="F#" Value="member this.SetAccessControl : System.Security.AccessControl.FileSecurity -&gt; unit" Usage="fileStream.SetAccessControl fileSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileSecurity" Type="System.Security.AccessControl.FileSecurity" />
      </Parameters>
      <Docs>
        <param name="fileSecurity">
          <span data-ttu-id="2b775-896">현재 파일에 적용할 ACL 항목을 설명하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-896">An object that describes an ACL entry to apply to the current file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-897">
            <see cref="T:System.Security.AccessControl.FileSecurity" /> 개체에서 설명하는 ACL(액세스 제어 목록) 항목을 현재 <see cref="T:System.IO.FileStream" /> 개체에서 설명하는 파일에 적용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-897">Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity" /> object to the file described by the current <see cref="T:System.IO.FileStream" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-898">하는 동안를 <xref:System.IO.FileStream> 클래스 및 <xref:System.IO.FileStream.SetAccessControl%2A> 기존 파일에서 사용할 수 있습니다를 사용 하는 것이 좋습니다는 <xref:System.IO.File.SetAccessControl%2A?displayProperty=nameWithType> 메서드를 사용 하기가 더 쉽습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-898">While the <xref:System.IO.FileStream> class and <xref:System.IO.FileStream.SetAccessControl%2A> can be used on an existing file, consider using the <xref:System.IO.File.SetAccessControl%2A?displayProperty=nameWithType> method as it is easier to use.</span></span>  
  
 <span data-ttu-id="2b775-899"><xref:System.IO.FileStream.SetAccessControl%2A> 메서드 상속 되지 않은 ACL 목록을 표시 하는 파일에 액세스 제어 목록 (ACL) 항목을 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-899">The <xref:System.IO.FileStream.SetAccessControl%2A> method applies access control list (ACL) entries to a file that represents the noninherited ACL list.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2b775-900">에 대해 지정 된 ACL을 `fileSecurity` 매개 변수 파일에 대 한 기존 ACL을 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-900">The ACL specified for the `fileSecurity` parameter replaces the existing ACL for the file.</span></span> <span data-ttu-id="2b775-901">에 새 사용자에 대 한 권한을 추가 하려면 사용 합니다 <xref:System.IO.FileStream.GetAccessControl%2A> 메서드를 추가 하려면, 수정 및 사용 하 여 <xref:System.IO.FileStream.SetAccessControl%2A> 파일에 다시 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-901">To add permissions for a new user, use the <xref:System.IO.FileStream.GetAccessControl%2A> method to obtain the existing ACL, modify it, and then use <xref:System.IO.FileStream.SetAccessControl%2A> to apply it back to the file.</span></span>  
  
 <span data-ttu-id="2b775-902">ACL에는 개인 및/또는 그룹 했거나 권한이 없는, 지정된 된 파일에서 특정 작업을 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-902">An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file.</span></span> <span data-ttu-id="2b775-903">자세한 내용은 [방법: Access Control 목록 항목 추가 또는 제거](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="2b775-903">For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2b775-904">파일이 닫혀 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-904">The file is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-905">
            <paramref name="fileSecurity" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-905">The <paramref name="fileSecurity" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.SystemException">
          <span data-ttu-id="2b775-906">파일을 찾을 수 없거나 수정할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-906">The file could not be found or modified.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="2b775-907">현재 프로세스에 파일을 열 수 있는 액세스 권한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-907">The current process does not have access to open the file.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="fileStream.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="2b775-908">스트림의 새 길이입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-908">The new length of the stream.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-909">이 스트림의 길이를 제공된 값으로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-909">Sets the length of this stream to the given value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-910">이 메서드는 <xref:System.IO.Stream.SetLength%2A>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-910">This method overrides <xref:System.IO.Stream.SetLength%2A>.</span></span>  
  
 <span data-ttu-id="2b775-911">지정된 된 값을 사용 하면 스트림의 현재 길이 보다 작으면, 스트림을 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-911">If the given value is less than the current length of the stream, the stream is truncated.</span></span> <span data-ttu-id="2b775-912">이 시나리오에서는 현재 위치에 새 길이 보다 크면 스트림의 마지막 바이트를 현재 위치 이동 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-912">In this scenario, if the current position is greater than the new length, the current position is moved to the last byte of the stream.</span></span> <span data-ttu-id="2b775-913">지정된 된 값이 스트림의 현재 길이 보다 크면 스트림의 확장 되 고 현재 위치는 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-913">If the given value is larger than the current length of the stream, the stream is expanded, and the current position remains the same.</span></span> <span data-ttu-id="2b775-914">스트림을 확장 하는 경우에 이전부터 새 길이 스트림의 내용을 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-914">If the stream is expanded, the contents of the stream between the old and the new length are undefined.</span></span>  
  
 <span data-ttu-id="2b775-915">스트림이 쓰기와 검색을 모두 지원 해야 `SetLength` 작동 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-915">A stream must support both writing and seeking for `SetLength` to work.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b775-916">사용 된 <xref:System.IO.FileStream.CanWrite%2A> 현재 인스턴스가 쓰기를 지원 하는지 여부를 결정 하는 속성 및 <xref:System.IO.FileStream.CanSeek%2A> 속성 검색을 지원 하는지 여부를 확인 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-916">Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing, and the <xref:System.IO.FileStream.CanSeek%2A> property to determine whether seeking is supported.</span></span> <span data-ttu-id="2b775-917">자세한 내용은 <xref:System.IO.Stream.CanWrite%2A> 및 <xref:System.IO.Stream.CanSeek%2A>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="2b775-917">For additional information, see <xref:System.IO.Stream.CanWrite%2A> and <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
 <span data-ttu-id="2b775-918">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-918">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-919">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-919">An I/O error has occurred.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-920">스트림이 쓰기 및 검색 둘 다를 지원하지는 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-920">The stream does not support both writing and seeking.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-921">
            <paramref name="value" /> 매개 변수를 0 미만으로 설정하려 한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-921">Attempted to set the <paramref name="value" /> parameter to less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public virtual void Unlock (long position, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unlock(int64 position, int64 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Unlock(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Unlock (position As Long, length As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Unlock(long position, long length);" />
      <MemberSignature Language="F#" Value="abstract member Unlock : int64 * int64 -&gt; unit&#xA;override this.Unlock : int64 * int64 -&gt; unit" Usage="fileStream.Unlock (position, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="position">
          <span data-ttu-id="2b775-922">잠금을 해제할 범위의 시작입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-922">The beginning of the range to unlock.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="2b775-923">잠금을 해제할 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-923">The range to be unlocked.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-924">다른 프로세스에서 이전에 잠근 파일의 일부 또는 전부에 액세스할 수 있도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-924">Allows access by other processes to all or part of a file that was previously locked.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-925">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-925">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-926">다음 코드 예제에는 다른 프로세스 수 없습니다. 파일에 읽기/쓰기 액세스를 포함 하더라도 파일의 해당 부분에 액세스 하 고 지정된 된 부분 파일 잠금을 해제 한 다음 파일의 일부를 차단 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-926">The following code example demonstrates how to lock part of a file so another process cannot access that part of the file even though it has read/write access to the file, and then unlock the specified part of the file .</span></span> <span data-ttu-id="2b775-927">다른 명령 창에서 프로그램을 동시에 실행 하 고 다른 콘솔 입력된 옵션을 사용 하 여 조사 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-927">Run the program simultaneously in different command windows and investigate using the different console input options.</span></span>  
  
 [!code-cpp[System.IO.FileStream3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream3/CPP/fstreamlock.cpp#1)]
 [!code-csharp[System.IO.FileStream3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream3/CS/fstreamlock.cs#1)]
 [!code-vb[System.IO.FileStream3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream3/VB/fstreamlock.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-928">
            <paramref name="position" /> 또는 <paramref name="length" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-928">
              <paramref name="position" /> or <paramref name="length" /> is negative.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] array, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] array, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (array As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ array, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="fileStream.Write (array, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="2b775-929">스트림에 쓸 데이터를 포함하는 버퍼입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-929">The buffer containing data to write to the stream.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="2b775-930">스트림으로 바이트를 복사하기 시작할 <c>배열</c>의 바이트 오프셋(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-930">The zero-based byte offset in <c>array</c> from which to begin copying bytes to the stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2b775-931">쓸 최대 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-931">The maximum number of bytes to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-932">바이트 블록을 파일 스트림에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-932">Writes a block of bytes to the file stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-933">이 메서드는 <xref:System.IO.Stream.Write%2A>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-933">This method overrides <xref:System.IO.Stream.Write%2A>.</span></span>  
  
 <span data-ttu-id="2b775-934">합니다 `offset` 의 바이트 오프셋을 제공 하는 매개 변수 `array` (버퍼 인덱스) 복사를 시작 하는 및 `count` 매개 변수는 스트림에 쓸 바이트 수를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-934">The `offset` parameter gives the offset of the byte in `array` (the buffer index) at which to begin copying, and the `count` parameter gives the number of bytes that will be written to the stream.</span></span> <span data-ttu-id="2b775-935">쓰기 작업이 성공한 경우 스트림의 현재 위치는 쓴 바이트 수 만큼 앞 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-935">If the write operation is successful, the current position of the stream is advanced by the number of bytes written.</span></span> <span data-ttu-id="2b775-936">예외가 발생 하는 경우 스트림의 현재 위치가 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-936">If an exception occurs, the current position of the stream is unchanged.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b775-937">사용 된 <xref:System.IO.FileStream.CanWrite%2A> 현재 인스턴스가 쓰기를 지원 하는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-937">Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span> <span data-ttu-id="2b775-938">자세한 내용은 <xref:System.IO.Stream.CanWrite%2A>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="2b775-938">For additional information, see <xref:System.IO.Stream.CanWrite%2A>.</span></span>  
  
 <span data-ttu-id="2b775-939">쓰기 작업을 수행 하는 스레드를 중단 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="2b775-939">Do not interrupt a thread that is performing a write operation.</span></span> <span data-ttu-id="2b775-940">응용 프로그램 스레드가 차단 해제 되 면 성공적으로 실행 하려면 나타날 수 있습니다 하지만 응용 프로그램의 성능 및 안정성 중단 줄일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-940">Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.</span></span>  
  
 <span data-ttu-id="2b775-941">일반적인 파일 및 디렉터리 작업의 목록을 참조 하세요 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-941">For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-942">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.IO.FileStream.Lock%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2b775-942">This code example is part of a larger example provided for the <xref:System.IO.FileStream.Lock%2A> method.</span></span>  
  
 [!code-cpp[System.IO.FileStream3#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream3/CPP/fstreamlock.cpp#3)]
 [!code-csharp[System.IO.FileStream3#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream3/CS/fstreamlock.cs#3)]
 [!code-vb[System.IO.FileStream3#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream3/VB/fstreamlock.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-943">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-943">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-944">
            <paramref name="offset" /> 및 <paramref name="count" />가 <paramref name="array" />에서 잘못된 범위를 설명하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-944">
              <paramref name="offset" /> and <paramref name="count" /> describe an invalid range in <paramref name="array" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-945">
            <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-945">
              <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2b775-946">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-946">An I/O error occurred.</span>
          </span>
          <span data-ttu-id="2b775-947">\- 또는 -  다른 스레드로 인해 운영 체제 파일 핸들의 위치가 예기치 않게 변경되었을 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-947">\- or -  Another thread may have caused an unexpected change in the position of the operating system's file handle.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2b775-948">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-948">The stream is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-949">현재 스트림 인스턴스가 쓰기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-949">The current stream instance does not support writing.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.WriteAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="fileStream.WriteAsync (buffer, offset, count, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="2b775-950">데이터를 쓸 버퍼입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-950">The buffer to write data from.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="2b775-951">스트림으로 바이트를 복사하기 시작할 <c>버퍼</c>의 바이트 오프셋(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-951">The zero-based byte offset in <c>buffer</c> from which to begin copying bytes to the stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2b775-952">쓸 최대 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-952">The maximum number of bytes to write.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="2b775-953">취소 요청을 모니터링할 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-953">The token to monitor for cancellation requests.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-954">바이트의 시퀀스를 현재 스트림에 비동기적으로 쓰고 쓰여진 바이트 수만큼 이 스트림 내의 현재 위치를 앞으로 이동한 후 취소 요청을 모니터링합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-954">Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2b775-955">비동기 쓰기 작업을 나타내는 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-955">A task that represents the asynchronous write operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-956"><xref:System.IO.FileStream.WriteAsync%2A> 메서드를 사용 하면 주 스레드를 차단 하지 않고 리소스를 많이 사용 파일 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-956">The <xref:System.IO.FileStream.WriteAsync%2A> method enables you to perform resource-intensive file operations without blocking the main thread.</span></span> <span data-ttu-id="2b775-957">이 성능 고려 사항은 특히 시간이 소비되는 스트림 작업이 UI 스레드를 차단하고 응용 프로그램이 작동하지 않는 것처럼 표시할 수 있는 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 응용 프로그램 또는 [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] 응용 프로그램에서 중요합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-957">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="2b775-958">비동기 메서드를 함께에서 사용 합니다 `async` 고 `await` Visual Basic 및 C# 키워드입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-958">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="2b775-959">사용 된 <xref:System.IO.FileStream.CanWrite%2A> 현재 인스턴스가 쓰기를 지원 하는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-959">Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
 <span data-ttu-id="2b775-960">완료 되기 전에 작업이 취소 되 면 반환 된 작업이 포함 된 <xref:System.Threading.Tasks.TaskStatus.Canceled> 에 대 한 값는 <xref:System.Threading.Tasks.Task.Status%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="2b775-960">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span> <span data-ttu-id="2b775-961">파일 핸들을 삭제 하는 경우 반환 된 작업이 포함 된 <xref:System.ObjectDisposedException> 예외를 <xref:System.Threading.Tasks.Task.Exception%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="2b775-961">If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-962">다음 예제에서는 파일에 비동기적으로 작성 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-962">The following example shows how to write asynchronously to a file.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#3](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example3.cs#3)]
 [!code-vb[Asynchronous_File_IO_async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2b775-963">
            <paramref name="buffer" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-963">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2b775-964">
            <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-964">
              <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2b775-965">
            <paramref name="offset" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-965">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-966">스트림이 쓰기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-966">The stream does not support writing.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2b775-967">스트림이 삭제되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-967">The stream has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2b775-968">이전 쓰기 작업에서 현재 이 스트림을 사용하고 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-968">The stream is currently in use by a previous write operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public override void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileStream.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="override this.WriteByte : byte -&gt; unit" Usage="fileStream.WriteByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="2b775-969">스트림에 쓸 바이트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-969">A byte to write to the stream.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2b775-970">파일 스트림의 현재 위치에 바이트를 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-970">Writes a byte to the current position in the file stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b775-971">이 메서드는 <xref:System.IO.Stream.WriteByte%2A>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-971">This method overrides <xref:System.IO.Stream.WriteByte%2A>.</span></span>  
  
 <span data-ttu-id="2b775-972">사용 하 여 `WriteByte` 바이트를 쓸 수는 `FileStream` 효율적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-972">Use `WriteByte` to write a byte to a `FileStream` efficiently.</span></span> <span data-ttu-id="2b775-973">스트림이 닫혔거나 쓸 수 없는 경우 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-973">If the stream is closed or not writable, an exception will be thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2b775-974">사용 된 <xref:System.IO.FileStream.CanWrite%2A> 현재 인스턴스가 쓰기를 지원 하는지 여부를 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-974">Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span> <span data-ttu-id="2b775-975">자세한 내용은 <xref:System.IO.Stream.CanWrite%2A>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="2b775-975">For additional information, see <xref:System.IO.Stream.CanWrite%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b775-976">다음 코드 예제에서는 바이트 단위로 파일에 데이터를 쓰고 다음 데이터 쓰여졌는지 확인 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2b775-976">The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.</span></span>  
  
 [!code-cpp[System.IO.FileStream1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream1/CPP/source.cpp#1)]
 [!code-csharp[System.IO.FileStream1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream1/CS/source.cs#1)]
 [!code-vb[System.IO.FileStream1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2b775-977">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-977">The stream is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2b775-978">스트림이 쓰기를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-978">The stream does not support writing.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="2b775-979">
            <para>기본 구현을 <see langword="Stream" /> 새 싱글바이트 배열을 만들고 호출 <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />합니다. 공식적으로 올바른 중일 것은 비효율적입니다. 내부 버퍼를 사용 하 여 스트림을이 메서드를 재정의 하 고 버퍼에 대 한 모든 호출 추가 배열 할당 방지를 직접 읽는 훨씬 더 효율적으로 버전을 제공 해야 합니다.  일반적인 파일 및 디렉터리 작업의 목록을 [일반적인 I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)을 참조 하세요.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2b775-979">
              <para>The default implementation on <see langword="Stream" /> creates a new single-byte array and then calls <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />. While this is formally correct, it is inefficient. Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.  For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>