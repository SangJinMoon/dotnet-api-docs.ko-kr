<Type Name="BinaryWriter" FullName="System.IO.BinaryWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7f198690ed9ffcd0f9f95dd953bbbd4d1b48a7c9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36485341" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BinaryWriter : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit BinaryWriter extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.BinaryWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class BinaryWriter&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BinaryWriter : IDisposable" />
  <TypeSignature Language="F#" Value="type BinaryWriter = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="77a40-101">이진의 기본 형식을 스트림에 쓰며, 특정 인코딩의 문자열 쓰기를 지원합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="77a40-101">Writes primitive types in binary to a stream and supports writing strings in a specific encoding.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-102"><xref:System.IO.BinaryWriter> 클래스는 기본 데이터 형식을 스트림으로 작성을 단순화 하는 메서드를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-102">The <xref:System.IO.BinaryWriter> class provides methods that simplify writing primitive data types to a stream.</span></span> <span data-ttu-id="77a40-103">예를 들어, 사용할 수는 <xref:System.IO.BinaryWriter.Write%2A> 1 바이트 값으로 스트림에 부울 값을 쓸 메서드.</span><span class="sxs-lookup"><span data-stu-id="77a40-103">For example, you can use the <xref:System.IO.BinaryWriter.Write%2A> method to write a Boolean value to the stream as a one-byte value.</span></span> <span data-ttu-id="77a40-104">클래스는 서로 다른 데이터 형식을 지 원하는 쓰기 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-104">The class includes write methods that support different data types.</span></span>  
  
 <span data-ttu-id="77a40-105">새 인스턴스를 만들 때는 <xref:System.IO.BinaryWriter> 클래스를 삭제 한 후 열어 스트림을 두려면 것인지 및 쓰기 위해 스트림을 제공 하 고 필요에 따라는 인코딩 유형을 지정는 <xref:System.IO.BinaryWriter> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-105">When you create a new instance of the <xref:System.IO.BinaryWriter> class, you provide the stream to write to, and optionally specify the type of encoding and whether to leave the stream open after disposing the <xref:System.IO.BinaryWriter> object.</span></span> <span data-ttu-id="77a40-106">인코딩 유형을 지정 하지 않으면 u t F-8이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-106">If you do not specify an encoding type, UTF-8 is used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="77a40-107">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-107">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="77a40-108">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-108">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="77a40-109">직접 형식의 dispose를 호출 해당 <xref:System.IDisposable.Dispose%2A> 에서 메서드는 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-109">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="77a40-110">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-110">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="77a40-111">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-111">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="77a40-112">파생된 클래스에 고유 문자 인코딩을 제공할이 클래스의 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-112">A derived class can override the methods of this class to give unique character encodings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77a40-113">다음 코드 예제에는 저장 하 고 파일에서 응용 프로그램 설정을 검색 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-113">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Encoding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="77a40-114">스트림에 쓰는 <see cref="T:System.IO.BinaryWriter" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-114">Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class that writes to a stream.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BinaryWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; BinaryWriter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="77a40-115">스트림에 쓰는 <see cref="T:System.IO.BinaryWriter" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-115">Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class that writes to a stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-116">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-116">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryWriter (System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BinaryWriter(System::IO::Stream ^ output);" />
      <MemberSignature Language="F#" Value="new System.IO.BinaryWriter : System.IO.Stream -&gt; System.IO.BinaryWriter" Usage="new System.IO.BinaryWriter output" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="output">
          <span data-ttu-id="77a40-117">출력 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-117">The output stream.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-118">지정된 스트림을 기반으로 UTF-8 인코딩을 사용하여 <see cref="T:System.IO.BinaryWriter" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-118">Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class based on the specified stream and using UTF-8 encoding.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-119">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-119">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77a40-120">다음 코드 예제에는 저장 하 고 파일에서 응용 프로그램 설정을 검색 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-120">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="77a40-121">스트림이 쓰기를 지원하지 않거나 이미 닫힌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-121">The stream does not support writing or is already closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="77a40-122">
            <paramref name="output" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-122">
              <paramref name="output" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Text.Encoding.UTF8" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryWriter (System.IO.Stream output, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream output, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BinaryWriter(System::IO::Stream ^ output, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="new System.IO.BinaryWriter : System.IO.Stream * System.Text.Encoding -&gt; System.IO.BinaryWriter" Usage="new System.IO.BinaryWriter (output, encoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="output">
          <span data-ttu-id="77a40-123">출력 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-123">The output stream.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="77a40-124">사용할 문자 인코딩입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-124">The character encoding to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-125">지정된 스트림과 문자 인코딩을 기반으로 <see cref="T:System.IO.BinaryWriter" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-125">Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class based on the specified stream and character encoding.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-126">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-126">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="77a40-127">스트림이 쓰기를 지원하지 않거나 이미 닫힌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-127">The stream does not support writing or is already closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="77a40-128">
            <paramref name="output" /> 또는 <paramref name="encoding" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-128">
              <paramref name="output" /> or <paramref name="encoding" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryWriter (System.IO.Stream output, System.Text.Encoding encoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream output, class System.Text.Encoding encoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BinaryWriter(System::IO::Stream ^ output, System::Text::Encoding ^ encoding, bool leaveOpen);" />
      <MemberSignature Language="F#" Value="new System.IO.BinaryWriter : System.IO.Stream * System.Text.Encoding * bool -&gt; System.IO.BinaryWriter" Usage="new System.IO.BinaryWriter (output, encoding, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="output">
          <span data-ttu-id="77a40-129">출력 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-129">The output stream.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="77a40-130">사용할 문자 인코딩입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-130">The character encoding to use.</span>
          </span>
        </param>
        <param name="leaveOpen">
          <span data-ttu-id="77a40-131">
            <see cref="T:System.IO.BinaryWriter" /> 개체를 삭제한 후 스트림을 열어 두려면 <see langword="true" />이고, 닫으려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-131">
              <see langword="true" /> to leave the stream open after the <see cref="T:System.IO.BinaryWriter" /> object is disposed; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-132">지정된 스트림과 문자 인코딩을 기반으로 하는 <see cref="T:System.IO.BinaryWriter" /> 클래스의 새 인스턴스를 초기화하고 스트림을 선택적으로 연 상태로 둡니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-132">Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class based on the specified stream and character encoding, and optionally leaves the stream open.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="77a40-133">스트림이 쓰기를 지원하지 않거나 이미 닫힌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-133">The stream does not support writing or is already closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="77a40-134">
            <paramref name="output" /> 또는 <paramref name="encoding" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-134">
              <paramref name="output" /> or <paramref name="encoding" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="BaseStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream BaseStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BaseStream" />
      <MemberSignature Language="DocId" Value="P:System.IO.BinaryWriter.BaseStream" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BaseStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::IO::Stream ^ BaseStream { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseStream : System.IO.Stream" Usage="System.IO.BinaryWriter.BaseStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="77a40-135">
            <see cref="T:System.IO.BinaryWriter" />의 내부 스트림을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-135">Gets the underlying stream of the <see cref="T:System.IO.BinaryWriter" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="77a40-136">
            <see langword="BinaryWriter" />와 관련된 내부 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-136">The underlying stream associated with the <see langword="BinaryWriter" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-137">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-137">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77a40-138">다음 코드 예제에서는 읽고 쓰는 방법을 보여 줍니다. `Double` 메모리를 사용 하 여 데이터를는 <xref:System.IO.BinaryReader> 및 `BinaryWriter` 클래스의 맨 위에 <xref:System.IO.MemoryStream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-138">The following code example shows how to read and write `Double` data to memory by using the <xref:System.IO.BinaryReader> and `BinaryWriter` classes on top of the <xref:System.IO.MemoryStream> class.</span></span> <span data-ttu-id="77a40-139">`MemoryStream` 읽기 및 쓰기만 `Byte` 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-139">`MemoryStream` only reads and writes `Byte` data.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/CPP/rwdouble.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/CS/rwdouble.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/VB/rwdouble.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="binaryWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="77a40-140">현재 <see cref="T:System.IO.BinaryWriter" /> 및 기본 스트림을 닫습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-140">Closes the current <see cref="T:System.IO.BinaryWriter" /> and the underlying stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-141">이 구현 `Close` 호출은 <xref:System.IO.BinaryWriter.Dispose%2A> 전달 메서드는 `true` 값입니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-141">This implementation of `Close` calls the <xref:System.IO.BinaryWriter.Dispose%2A> method passing a `true` value.</span></span>  
  
 <span data-ttu-id="77a40-142">명시적으로 호출 하지 않으면 스트림을 내부 인코더가 플러시되지 것입니다 <xref:System.IO.BinaryWriter.Flush%2A> 또는 `Close`합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-142">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.IO.BinaryWriter.Flush%2A> or `Close`.</span></span> <span data-ttu-id="77a40-143">설정 <xref:System.IO.StreamWriter.AutoFlush%2A> 를 `true` 스트림 버퍼에서 데이터를 플러시할 수는 있지만 인코더 상태 플러시되지 것입니다 있다는 것을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-143">Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="77a40-144">따라서 올바르게 문자의 다음 블록을 인코딩할 수 있도록 (부분 문자)의 상태를 유지 하기 위해 인코더 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-144">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="77a40-145">이 시나리오는 u t f 8와 UTF7 인코더는 인접 한 문자를 받은 후 특정 문자를 인코딩할만 수 있는 위치에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-145">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="77a40-146">
            <see cref="T:System.IO.BinaryWriter" />에서 사용하는 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-146">Releases the resources used by the <see cref="T:System.IO.BinaryWriter" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="binaryWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="77a40-147">
            <see cref="T:System.IO.BinaryWriter" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-147">Releases all resources used by the current instance of the <see cref="T:System.IO.BinaryWriter" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="binaryWriter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="77a40-148">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-148">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-149">
            <see cref="T:System.IO.BinaryWriter" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-149">Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryWriter" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public virtual void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit&#xA;override this.Flush : unit -&gt; unit" Usage="binaryWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="77a40-150">현재 작성기에 대한 모든 버퍼를 지우면 버퍼링된 모든 데이터를 내부 장치에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-150">Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-151">모든 파생된 클래스에서 재정의 해야 `Flush` 버퍼링 된 모든 데이터 스트림의 보내지도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-151">All derived classes should override `Flush` to ensure that all buffered data is sent to the stream.</span></span>  
  
 <span data-ttu-id="77a40-152">명시적으로 호출 하지 않으면 스트림을 내부 인코더가 플러시되지 것입니다 `Flush` 또는 <xref:System.IO.BinaryWriter.Close%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-152">Flushing the stream will not flush its underlying encoder unless you explicitly call `Flush` or <xref:System.IO.BinaryWriter.Close%2A>.</span></span> <span data-ttu-id="77a40-153">설정 <xref:System.IO.StreamWriter.AutoFlush%2A> 를 `true` 스트림 버퍼에서 데이터를 플러시할 수는 있지만 인코더 상태 플러시되지 것입니다 있다는 것을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-153">Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="77a40-154">따라서 올바르게 문자의 다음 블록을 인코딩할 수 있도록 (부분 문자)의 상태를 유지 하기 위해 인코더 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-154">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="77a40-155">이 시나리오는 u t f 8와 UTF7 인코더는 인접 한 문자를 받은 후 특정 문자를 인코딩할만 수 있는 위치에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-155">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
 <span data-ttu-id="77a40-156">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-156">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.IO.BinaryWriter Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.IO.BinaryWriter Null" />
      <MemberSignature Language="DocId" Value="F:System.IO.BinaryWriter.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As BinaryWriter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::IO::BinaryWriter ^ Null;" />
      <MemberSignature Language="F#" Value=" staticval mutable Null : System.IO.BinaryWriter" Usage="System.IO.BinaryWriter.Null" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.BinaryWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="77a40-157">백업 저장소가 없는 <see cref="T:System.IO.BinaryWriter" />를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-157">Specifies a <see cref="T:System.IO.BinaryWriter" /> with no backing store.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-158">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-158">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutStream">
      <MemberSignature Language="C#" Value="protected System.IO.Stream OutStream;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.IO.Stream OutStream" />
      <MemberSignature Language="DocId" Value="F:System.IO.BinaryWriter.OutStream" />
      <MemberSignature Language="VB.NET" Value="Protected OutStream As Stream " />
      <MemberSignature Language="C++ CLI" Value="protected: System::IO::Stream ^ OutStream;" />
      <MemberSignature Language="F#" Value="val mutable OutStream : System.IO.Stream" Usage="System.IO.BinaryWriter.OutStream" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="77a40-159">내부 스트림을 보유합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-159">Holds the underlying stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-160">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-160">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public virtual long Seek (int offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Seek(int32 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Seek (offset As Integer, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual long Seek(int offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="abstract member Seek : int * System.IO.SeekOrigin -&gt; int64&#xA;override this.Seek : int * System.IO.SeekOrigin -&gt; int64" Usage="binaryWriter.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">
          <span data-ttu-id="77a40-161">
            <c>원본</c>에 상대적인 바이트 오프셋입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-161">A byte offset relative to <c>origin</c>.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="77a40-162">새 위치를 가져올 참조 위치를 나타내는 <see cref="T:System.IO.SeekOrigin" />의 필드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-162">A field of <see cref="T:System.IO.SeekOrigin" /> indicating the reference point from which the new position is to be obtained.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-163">현재 스트림 내에서 위치를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-163">Sets the position within the current stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="77a40-164">현재 스트림에서의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-164">The position with the current stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-165">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-165">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77a40-166">다음 예제에서는 파일에는 일련의 바이트 값을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-166">The following example writes a series of byte values to a file.</span></span> <span data-ttu-id="77a40-167">이 예에서는 사용 <xref:System.IO.BinaryWriter.Seek%2A> 를 사용 하 여 표식 바이트를 기록 합니다 고 파일에서 다양 한 위치로 이동 하려면는 <xref:System.IO.BinaryWriter.Write%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="77a40-167">The example uses <xref:System.IO.BinaryWriter.Seek%2A> to move to various locations in the file, and then writes marker bytes by using the <xref:System.IO.BinaryWriter.Write%2A> method.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CPP/source3.cpp#5)]
 [!code-csharp[System.IO.BinaryReaderWriter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source3.cs#5)]
 [!code-vb[System.IO.BinaryReaderWriter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source3.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-168">파일 포인터가 잘못된 위치로 이동한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-168">The file pointer was moved to an invalid location.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="77a40-169">
            <see cref="T:System.IO.SeekOrigin" /> 값이 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-169">The <see cref="T:System.IO.SeekOrigin" /> value is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="77a40-170">현재 스트림에 값을 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-170">Writes a value to the current stream.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(bool value);" />
      <MemberSignature Language="F#" Value="abstract member Write : bool -&gt; unit&#xA;override this.Write : bool -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="77a40-171">쓸 <see langword="Boolean" /> 값(0 또는 1)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-171">The <see langword="Boolean" /> value to write (0 or 1).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-172">
            <see langword="Boolean" />를 나타내는 0과 <see langword="false" />를 나타내는 1을 사용하여 1바이트 <see langword="true" /> 값을 현재 스트림에 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-172">Writes a one-byte <see langword="Boolean" /> value to the current stream, with 0 representing <see langword="false" /> and 1 representing <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-173">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-173">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77a40-174">다음 코드 예제에는 저장 하 고 파일에서 응용 프로그램 설정을 검색 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-174">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-175">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-175">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-176">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-176">The stream is closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Byte value);" />
      <MemberSignature Language="F#" Value="abstract member Write : byte -&gt; unit&#xA;override this.Write : byte -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="77a40-177">쓸 부호 없는 바이트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-177">The unsigned byte to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-178">부호 없는 바이트를 현재 스트림에 쓰고 스트림 위치를 1바이트씩 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-178">Writes an unsigned byte to the current stream and advances the stream position by one byte.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-179">데이터 서식 충돌 때문에이 메서드를 사용 하 여 다음 인코딩을 사용 하 여 권장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-179">Because of data formatting conflicts, using this method with the following encodings is not recommended:</span></span>  
  
-   <span data-ttu-id="77a40-180">UTF-7</span><span class="sxs-lookup"><span data-stu-id="77a40-180">UTF-7</span></span>  
  
-   <span data-ttu-id="77a40-181">ISO-2022-JP</span><span class="sxs-lookup"><span data-stu-id="77a40-181">ISO-2022-JP</span></span>  
  
-   <span data-ttu-id="77a40-182">ISCII</span><span class="sxs-lookup"><span data-stu-id="77a40-182">ISCII</span></span>  
  
 <span data-ttu-id="77a40-183">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-183">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77a40-184">다음 코드 예제에서는 메모리를 사용 하 여 백업 저장소로 이진 데이터를 작성 한 다음 데이터 올바르게 작성 되었다는 확인 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-184">The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWByte#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWByte/CPP/rwbyte.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWByte#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWByte/CS/rwbyte.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWByte/VB/rwbyte.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-185">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-185">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-186">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-186">The stream is closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (buffer As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member Write : byte[] -&gt; unit&#xA;override this.Write : byte[] -&gt; unit" Usage="binaryWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="77a40-187">쓸 데이터를 포함하는 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-187">A byte array containing the data to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-188">내부 스트림에 바이트 배열을 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-188">Writes a byte array to the underlying stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-189">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-189">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77a40-190">다음 코드 예제에서는 메모리를 사용 하 여 백업 저장소로 이진 데이터를 작성 한 다음 데이터 올바르게 작성 되었다는 확인 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-190">The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWBytes1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes1/CPP/rwbytes.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWBytes1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes1/CS/rwbytes.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWBytes1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes1/VB/rwbytes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-191">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-191">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-192">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-192">The stream is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="77a40-193">
            <paramref name="buffer" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-193">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (ch As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(char ch);" />
      <MemberSignature Language="F#" Value="abstract member Write : char -&gt; unit&#xA;override this.Write : char -&gt; unit" Usage="binaryWriter.Write ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">
          <span data-ttu-id="77a40-194">쓰려고 하는 서로게이트가 아닌 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-194">The non-surrogate, Unicode character to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-195">유니코드 문자를 현재 스트림에 쓴 다음 사용된 <see langword="Encoding" />과 스트림에 쓰여지는 특정 문자의 길이만큼 스트림의 현재 위치를 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-195">Writes a Unicode character to the current stream and advances the current position of the stream in accordance with the <see langword="Encoding" /> used and the specific characters being written to the stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-196">데이터 서식 충돌 때문에이 메서드를 사용 하 여 다음 인코딩을 사용 하 여 권장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-196">Because of data formatting conflicts, using this method with the following encodings is not recommended:</span></span>  
  
-   <span data-ttu-id="77a40-197">UTF-7</span><span class="sxs-lookup"><span data-stu-id="77a40-197">UTF-7</span></span>  
  
-   <span data-ttu-id="77a40-198">ISO-2022-JP</span><span class="sxs-lookup"><span data-stu-id="77a40-198">ISO-2022-JP</span></span>  
  
-   <span data-ttu-id="77a40-199">ISCII</span><span class="sxs-lookup"><span data-stu-id="77a40-199">ISCII</span></span>  
  
 <span data-ttu-id="77a40-200">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-200">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 <span data-ttu-id="77a40-201">유니코드 서로게이트 문자 써야 쌍으로 동일한 호출에서 함께 개별적으로 쓰지 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-201">Unicode surrogate characters must be written out as pairs together in the same call, not individually.</span></span> <span data-ttu-id="77a40-202">문자 배열을 사용 하 여 응용 프로그램에서 서로게이트 쌍에 대 한 지원이 필요 하면, 고려 및 <xref:System.IO.BinaryWriter.Write%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-202">If you require support for surrogate pairs in your application, consider using a character array and the <xref:System.IO.BinaryWriter.Write%2A> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77a40-203">다음 코드 예제에서는 읽고 메모리를 사용 하 여 백업 저장소로 데이터를 쓰는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-203">The following code example shows how to read and write data using memory as a backing store.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWChar1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar1/CPP/rwchar.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWChar1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar1/CS/rwchar.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWChar1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChar1/VB/rwchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-204">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-204">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-205">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-205">The stream is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="77a40-206">
            <paramref name="ch" />가 단일 서로게이트 문자인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-206">
              <paramref name="ch" /> is a single surrogate character.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (char[] chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(char[] chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (chars As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(cli::array &lt;char&gt; ^ chars);" />
      <MemberSignature Language="F#" Value="abstract member Write : char[] -&gt; unit&#xA;override this.Write : char[] -&gt; unit" Usage="binaryWriter.Write chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="77a40-207">쓸 데이터를 포함하는 문자 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-207">A character array containing the data to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-208">문자 배열을 현재 스트림에 쓴 다음 사용된 <see langword="Encoding" />과 스트림에 쓰여지는 특정 문자의 길이만큼 스트림의 현재 위치를 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-208">Writes a character array to the current stream and advances the current position of the stream in accordance with the <see langword="Encoding" /> used and the specific characters being written to the stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-209">다음 표에서 일반적인 또는 관련 된 I/O 작업의 예제를 나열합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-209">The following table lists examples of other typical or related I/O tasks.</span></span>  
  
|<span data-ttu-id="77a40-210">수행 작업</span><span class="sxs-lookup"><span data-stu-id="77a40-210">To do this...</span></span>|<span data-ttu-id="77a40-211">참조 항목</span><span class="sxs-lookup"><span data-stu-id="77a40-211">See the example in this topic...</span></span>|  
|-------------------|--------------------------------------|  
|<span data-ttu-id="77a40-212">텍스트 파일을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-212">Create a text file.</span></span>|[<span data-ttu-id="77a40-213">방법: 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="77a40-213">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="77a40-214">텍스트 파일에 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-214">Write to a text file.</span></span>|[<span data-ttu-id="77a40-215">방법: 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="77a40-215">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="77a40-216">텍스트 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-216">Read from a text file.</span></span>|[<span data-ttu-id="77a40-217">방법: 파일의 텍스트 읽기</span><span class="sxs-lookup"><span data-stu-id="77a40-217">How to: Read Text from a File</span></span>](~/docs/standard/io/how-to-read-text-from-a-file.md)|  
|<span data-ttu-id="77a40-218">파일에 텍스트를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-218">Append text to a file.</span></span>|[<span data-ttu-id="77a40-219">방법: 로그 파일 열기 및 추가</span><span class="sxs-lookup"><span data-stu-id="77a40-219">How to: Open and Append to a Log File</span></span>](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=nameWithType><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="77a40-220">파일의 크기를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-220">Get the size of a file.</span></span>|<xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="77a40-221">파일의 특성을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-221">Get the attributes of a file.</span></span>|<xref:System.IO.File.GetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="77a40-222">파일의 특성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-222">Set the attributes of a file.</span></span>|<xref:System.IO.File.SetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="77a40-223">파일이 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-223">Determine if a file exists.</span></span>|<xref:System.IO.File.Exists%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="77a40-224">이진 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-224">Read from a binary file.</span></span>|[<span data-ttu-id="77a40-225">방법: 새로 만든 데이터 파일 읽기 및 쓰기</span><span class="sxs-lookup"><span data-stu-id="77a40-225">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
|<span data-ttu-id="77a40-226">이진 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-226">Write to a binary file.</span></span>|[<span data-ttu-id="77a40-227">방법: 새로 만든 데이터 파일 읽기 및 쓰기</span><span class="sxs-lookup"><span data-stu-id="77a40-227">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
  
   
  
## Examples  
 <span data-ttu-id="77a40-228">다음 코드 예제에서는 읽고 메모리를 사용 하 여 백업 저장소로 데이터를 쓰는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-228">The following code example shows how to read and write data using memory as a backing store.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWChars1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars1/CPP/rwchars.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWChars1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars1/CS/rwchars.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWChars1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars1/VB/rwchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="77a40-229">
            <paramref name="chars" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-229">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-230">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-230">The stream is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-231">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-231">An I/O error occurs.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Decimal value);" />
      <MemberSignature Language="F#" Value="abstract member Write : decimal -&gt; unit&#xA;override this.Write : decimal -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="77a40-232">쓸 10진수 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-232">The decimal value to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-233">10진 값을 현재 스트림에 쓰고 스트림 위치를 16바이트씩 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-233">Writes a decimal value to the current stream and advances the stream position by sixteen bytes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-234">다음 표에서 일반적인 또는 관련 된 I/O 작업의 예제를 나열합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-234">The following table lists examples of other typical or related I/O tasks.</span></span>  
  
|<span data-ttu-id="77a40-235">수행 작업</span><span class="sxs-lookup"><span data-stu-id="77a40-235">To do this...</span></span>|<span data-ttu-id="77a40-236">참조 항목</span><span class="sxs-lookup"><span data-stu-id="77a40-236">See the example in this topic...</span></span>|  
|-------------------|--------------------------------------|  
|<span data-ttu-id="77a40-237">텍스트 파일을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-237">Create a text file.</span></span>|[<span data-ttu-id="77a40-238">방법: 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="77a40-238">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="77a40-239">텍스트 파일에 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-239">Write to a text file.</span></span>|[<span data-ttu-id="77a40-240">방법: 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="77a40-240">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="77a40-241">텍스트 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-241">Read from a text file.</span></span>|[<span data-ttu-id="77a40-242">방법: 파일의 텍스트 읽기</span><span class="sxs-lookup"><span data-stu-id="77a40-242">How to: Read Text from a File</span></span>](~/docs/standard/io/how-to-read-text-from-a-file.md)|  
|<span data-ttu-id="77a40-243">파일에 텍스트를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-243">Append text to a file.</span></span>|[<span data-ttu-id="77a40-244">방법: 로그 파일 열기 및 추가</span><span class="sxs-lookup"><span data-stu-id="77a40-244">How to: Open and Append to a Log File</span></span>](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=nameWithType><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="77a40-245">파일의 크기를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-245">Get the size of a file.</span></span>|<xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="77a40-246">파일의 특성을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-246">Get the attributes of a file.</span></span>|<xref:System.IO.File.GetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="77a40-247">파일의 특성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-247">Set the attributes of a file.</span></span>|<xref:System.IO.File.SetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="77a40-248">파일이 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-248">Determine if a file exists.</span></span>|<xref:System.IO.File.Exists%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="77a40-249">이진 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-249">Read from a binary file.</span></span>|[<span data-ttu-id="77a40-250">방법: 새로 만든 데이터 파일 읽기 및 쓰기</span><span class="sxs-lookup"><span data-stu-id="77a40-250">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
|<span data-ttu-id="77a40-251">이진 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-251">Write to a binary file.</span></span>|[<span data-ttu-id="77a40-252">방법: 새로 만든 데이터 파일 읽기 및 쓰기</span><span class="sxs-lookup"><span data-stu-id="77a40-252">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-253">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-253">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-254">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-254">The stream is closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(double value);" />
      <MemberSignature Language="F#" Value="abstract member Write : double -&gt; unit&#xA;override this.Write : double -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="77a40-255">쓸 8바이트 부동 소수점 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-255">The eight-byte floating-point value to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-256">8바이트 부동 소수점 값을 현재 스트림에 쓰고 스트림 위치를 8바이트씩 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-256">Writes an eight-byte floating-point value to the current stream and advances the stream position by eight bytes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-257">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-257">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77a40-258">다음 코드 예제에서는 읽고 쓰는 방법을 보여 줍니다. `Double` 메모리를 사용 하 여 데이터를는 <xref:System.IO.BinaryReader> 및 `BinaryWriter` 클래스의 맨 위에 <xref:System.IO.MemoryStream> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-258">The following code example shows how to read and write `Double` data to memory by using the <xref:System.IO.BinaryReader> and `BinaryWriter` classes on top of the <xref:System.IO.MemoryStream> class.</span></span> <span data-ttu-id="77a40-259">`MemoryStream` 읽기 및 쓰기만 `Byte` 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-259">`MemoryStream` only reads and writes `Byte` data.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/CPP/rwdouble.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/CS/rwdouble.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWDouble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWDouble/VB/rwdouble.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-260">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-260">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-261">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-261">The stream is closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(short value);" />
      <MemberSignature Language="F#" Value="abstract member Write : int16 -&gt; unit&#xA;override this.Write : int16 -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="77a40-262">쓸 2바이트 부호 있는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-262">The two-byte signed integer to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-263">2바이트 부호 있는 정수를 현재 스트림에 쓰고 스트림 위치를 2바이트씩 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-263">Writes a two-byte signed integer to the current stream and advances the stream position by two bytes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-264">`BinaryWriter` little endian 형식만이 데이터 형식을 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-264">`BinaryWriter` stores this data type in little endian format.</span></span>  
  
 <span data-ttu-id="77a40-265">다음 표에서 일반적인 또는 관련 된 I/O 작업의 예제를 나열합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-265">The following table lists examples of other typical or related I/O tasks.</span></span>  
  
|<span data-ttu-id="77a40-266">수행 작업</span><span class="sxs-lookup"><span data-stu-id="77a40-266">To do this...</span></span>|<span data-ttu-id="77a40-267">참조 항목</span><span class="sxs-lookup"><span data-stu-id="77a40-267">See the example in this topic...</span></span>|  
|-------------------|--------------------------------------|  
|<span data-ttu-id="77a40-268">텍스트 파일을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-268">Create a text file.</span></span>|[<span data-ttu-id="77a40-269">방법: 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="77a40-269">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="77a40-270">텍스트 파일에 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-270">Write to a text file.</span></span>|[<span data-ttu-id="77a40-271">방법: 파일에 텍스트 쓰기</span><span class="sxs-lookup"><span data-stu-id="77a40-271">How to: Write Text to a File</span></span>](~/docs/standard/io/how-to-write-text-to-a-file.md)|  
|<span data-ttu-id="77a40-272">텍스트 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-272">Read from a text file.</span></span>|[<span data-ttu-id="77a40-273">방법: 파일의 텍스트 읽기</span><span class="sxs-lookup"><span data-stu-id="77a40-273">How to: Read Text from a File</span></span>](~/docs/standard/io/how-to-read-text-from-a-file.md)|  
|<span data-ttu-id="77a40-274">파일에 텍스트를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-274">Append text to a file.</span></span>|[<span data-ttu-id="77a40-275">방법: 로그 파일 열기 및 추가</span><span class="sxs-lookup"><span data-stu-id="77a40-275">How to: Open and Append to a Log File</span></span>](~/docs/standard/io/how-to-open-and-append-to-a-log-file.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=nameWithType><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="77a40-276">파일의 크기를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-276">Get the size of a file.</span></span>|<xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="77a40-277">파일의 특성을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-277">Get the attributes of a file.</span></span>|<xref:System.IO.File.GetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="77a40-278">파일의 특성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-278">Set the attributes of a file.</span></span>|<xref:System.IO.File.SetAttributes%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="77a40-279">파일이 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-279">Determine if a file exists.</span></span>|<xref:System.IO.File.Exists%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="77a40-280">이진 파일에서 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-280">Read from a binary file.</span></span>|[<span data-ttu-id="77a40-281">방법: 새로 만든 데이터 파일 읽기 및 쓰기</span><span class="sxs-lookup"><span data-stu-id="77a40-281">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
|<span data-ttu-id="77a40-282">이진 파일에 씁니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-282">Write to a binary file.</span></span>|[<span data-ttu-id="77a40-283">방법: 새로 만든 데이터 파일 읽기 및 쓰기</span><span class="sxs-lookup"><span data-stu-id="77a40-283">How to: Read and Write to a Newly Created Data File</span></span>](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-284">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-284">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-285">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-285">The stream is closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(int value);" />
      <MemberSignature Language="F#" Value="abstract member Write : int -&gt; unit&#xA;override this.Write : int -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="77a40-286">쓸 4바이트 부호 있는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-286">The four-byte signed integer to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-287">4바이트 부호 있는 정수를 현재 스트림에 쓰고 스트림 위치를 4바이트씩 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-287">Writes a four-byte signed integer to the current stream and advances the stream position by four bytes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-288">`BinaryWriter` little endian 형식만이 데이터 형식을 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-288">`BinaryWriter` stores this data type in little endian format.</span></span>  
  
 <span data-ttu-id="77a40-289">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-289">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77a40-290">다음 코드 예제에는 저장 하 고 파일에서 응용 프로그램 설정을 검색 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-290">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-291">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-291">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-292">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-292">The stream is closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(long value);" />
      <MemberSignature Language="F#" Value="abstract member Write : int64 -&gt; unit&#xA;override this.Write : int64 -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="77a40-293">쓸 8바이트 부호 있는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-293">The eight-byte signed integer to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-294">8바이트 부호 있는 정수를 현재 스트림에 쓰고 스트림 위치를 8바이트씩 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-294">Writes an eight-byte signed integer to the current stream and advances the stream position by eight bytes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-295">`BinaryWriter` little endian 형식만이 데이터 형식을 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-295">`BinaryWriter` stores this data type in little endian format.</span></span>  
  
 <span data-ttu-id="77a40-296">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-296">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-297">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-297">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-298">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-298">The stream is closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ReadOnlySpan&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (buffer As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(ReadOnlySpan&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="abstract member Write : ReadOnlySpan&lt;byte&gt; -&gt; unit&#xA;override this.Write : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="binaryWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ReadOnlySpan&lt;char&gt; chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(valuetype System.ReadOnlySpan`1&lt;char&gt; chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (chars As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(ReadOnlySpan&lt;char&gt; chars);" />
      <MemberSignature Language="F#" Value="abstract member Write : ReadOnlySpan&lt;char&gt; -&gt; unit&#xA;override this.Write : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="binaryWriter.Write chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As SByte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::SByte value);" />
      <MemberSignature Language="F#" Value="abstract member Write : sbyte -&gt; unit&#xA;override this.Write : sbyte -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="77a40-299">쓸 부호 있는 바이트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-299">The signed byte to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-300">부호 있는 바이트를 현재 스트림에 쓰고 스트림 위치를 1바이트씩 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-300">Writes a signed byte to the current stream and advances the stream position by one byte.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-301">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-301">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-302">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-302">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-303">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-303">The stream is closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(float value);" />
      <MemberSignature Language="F#" Value="abstract member Write : single -&gt; unit&#xA;override this.Write : single -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="77a40-304">쓸 4바이트 부동 소수점 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-304">The four-byte floating-point value to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-305">4바이트 부동 소수점 값을 현재 스트림에 쓰고 스트림 위치를 4바이트씩 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-305">Writes a four-byte floating-point value to the current stream and advances the stream position by four bytes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-306">`BinaryWriter` little endian 형식만이 데이터 형식을 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-306">`BinaryWriter` stores this data type in little endian format.</span></span>  
  
 <span data-ttu-id="77a40-307">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-307">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77a40-308">다음 코드 예제에는 저장 하 고 파일에서 응용 프로그램 설정을 검색 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-308">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-309">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-309">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-310">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-310">The stream is closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Write : string -&gt; unit&#xA;override this.Write : string -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="77a40-311">작성할 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-311">The value to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-312">
            <see cref="T:System.IO.BinaryWriter" />의 현재 인코딩으로 된 이 스트림에 문자열의 길이가 맨 앞에 나오는 문자열을 쓴 다음 사용된 인코딩과 스트림에 쓰여지는 특정 문자의 길이만큼 스트림의 현재 위치를 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-312">Writes a length-prefixed string to this stream in the current encoding of the <see cref="T:System.IO.BinaryWriter" />, and advances the current position of the stream in accordance with the encoding used and the specific characters being written to the stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-313">이 메서드를 처음으로 작성는 문자열의 길이 바이트 단위로 인코딩된 경우 길이 접두사가 의미는 <xref:System.IO.BinaryWriter> 스트림에 인스턴스의 현재 인코딩을 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-313">Length-prefixed means that this method first writes the length of the string, in bytes, when encoded with the <xref:System.IO.BinaryWriter> instance's current encoding to the stream.</span></span> <span data-ttu-id="77a40-314">이 값은 부호 없는 정수로로 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-314">This value is written as an unsigned integer.</span></span> <span data-ttu-id="77a40-315">그런 다음이 메서드는 스트림에 대부분의 바이트를 씁니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-315">This method then writes that many bytes to the stream.</span></span>  
  
 <span data-ttu-id="77a40-316">예를 들어 "A" 문자열 길이가 1 인 하지만 u t F-16으로 인코딩된 접두사의 기록 값은 2, 2 바이트 길이가 3 바이트 접두사를 포함 하 여 스트림을에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-316">For example, the string "A" has a length of 1, but when encoded with UTF-16; the length is 2 bytes, so the value written in the prefix is 2, and 3 bytes are written to the stream, including the prefix.</span></span>  
  
 <span data-ttu-id="77a40-317">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-317">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77a40-318">다음 코드 예제에는 저장 하 고 파일에서 응용 프로그램 설정을 검색 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-318">The following code example demonstrates how to store and retrieve application settings in a file.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-319">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-319">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="77a40-320">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-320">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-321">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-321">The stream is closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As UShort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="abstract member Write : uint16 -&gt; unit&#xA;override this.Write : uint16 -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="77a40-322">쓸 2바이트 부호 없는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-322">The two-byte unsigned integer to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-323">2바이트 부호 없는 정수를 현재 스트림에 쓰고 스트림 위치를 2바이트씩 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-323">Writes a two-byte unsigned integer to the current stream and advances the stream position by two bytes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-324">`BinaryWriter` little endian 형식만이 데이터 형식을 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-324">`BinaryWriter` stores this data type in little endian format.</span></span>  
  
 <span data-ttu-id="77a40-325">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-325">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-326">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-326">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-327">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-327">The stream is closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="abstract member Write : uint32 -&gt; unit&#xA;override this.Write : uint32 -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="77a40-328">쓸 4바이트 부호 없는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-328">The four-byte unsigned integer to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-329">4바이트 부호 없는 정수를 현재 스트림에 쓰고 스트림 위치를 4바이트씩 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-329">Writes a four-byte unsigned integer to the current stream and advances the stream position by four bytes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-330">`BinaryWriter` little endian 형식만이 데이터 형식을 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-330">`BinaryWriter` stores this data type in little endian format.</span></span>  
  
 <span data-ttu-id="77a40-331">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-331">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-332">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-332">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-333">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-333">The stream is closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="abstract member Write : uint64 -&gt; unit&#xA;override this.Write : uint64 -&gt; unit" Usage="binaryWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="77a40-334">쓸 8바이트 부호 없는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-334">The eight-byte unsigned integer to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-335">8바이트 부호 없는 정수를 현재 스트림에 쓰고 스트림 위치를 8바이트씩 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-335">Writes an eight-byte unsigned integer to the current stream and advances the stream position by eight bytes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-336">`BinaryWriter` little endian 형식만이 데이터 형식을 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-336">`BinaryWriter` stores this data type in little endian format.</span></span>  
  
 <span data-ttu-id="77a40-337">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-337">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-338">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-338">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-339">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-339">The stream is closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member Write : byte[] * int * int -&gt; unit&#xA;override this.Write : byte[] * int * int -&gt; unit" Usage="binaryWriter.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="77a40-340">쓸 데이터를 포함하는 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-340">A byte array containing the data to write.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="77a40-341">쓰기를 시작할 <c>버퍼</c>의 시작점입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-341">The starting point in <c>buffer</c> at which to begin writing.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="77a40-342">쓸 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-342">The number of bytes to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-343">현재 스트림에 바이트 배열 영역을 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-343">Writes a region of a byte array to the current stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-344">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-344">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77a40-345">다음 코드 예제에서는 메모리를 사용 하 여 백업 저장소로 이진 데이터를 작성 한 다음 데이터 올바르게 작성 되었다는 확인 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-345">The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.</span></span>  
  
 [!code-csharp[System.IO.BinaryReaderWriter.RWBytes2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes2/CS/rwreadbytes.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWBytes2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWBytes2/VB/rwreadbytes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="77a40-346">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-346">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="77a40-347">
            <paramref name="buffer" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-347">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="77a40-348">
            <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-348">
              <paramref name="index" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-349">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-349">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-350">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-350">The stream is closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (chars As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member Write : char[] * int * int -&gt; unit&#xA;override this.Write : char[] * int * int -&gt; unit" Usage="binaryWriter.Write (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="77a40-351">쓸 데이터를 포함하는 문자 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-351">A character array containing the data to write.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="77a40-352">쓰기를 시작할 <c>char</c>의 시작점입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-352">The starting point in <c>chars</c> from which to begin writing.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="77a40-353">쓸 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-353">The number of characters to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-354">문자 배열 섹션을 현재 스트림에 쓴 다음 사용된 <see langword="Encoding" />과 스트림에 쓰여지는 특정 문자의 길이만큼 스트림의 현재 위치를 앞으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-354">Writes a section of a character array to the current stream, and advances the current position of the stream in accordance with the <see langword="Encoding" /> used and perhaps the specific characters being written to the stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-355">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-355">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="77a40-356">다음 코드 예제에서는 읽고 메모리를 사용 하 여 백업 저장소로 데이터를 쓰는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-356">The following code example shows how to read and write data using memory as a backing store.</span></span>  
  
 [!code-cpp[System.IO.BinaryReaderWriter.RWChars2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars2/CPP/rwreadchars.cpp#1)]
 [!code-csharp[System.IO.BinaryReaderWriter.RWChars2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars2/CS/rwreadchars.cs#1)]
 [!code-vb[System.IO.BinaryReaderWriter.RWChars2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter.RWChars2/VB/rwreadchars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="77a40-357">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-357">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="77a40-358">
            <paramref name="chars" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-358">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="77a40-359">
            <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-359">
              <paramref name="index" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-360">I/O 오류가 발생했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-360">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-361">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-361">The stream is closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Write7BitEncodedInt">
      <MemberSignature Language="C#" Value="protected void Write7BitEncodedInt (int value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Write7BitEncodedInt(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Write7BitEncodedInt (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Write7BitEncodedInt(int value);" />
      <MemberSignature Language="F#" Value="member this.Write7BitEncodedInt : int -&gt; unit" Usage="binaryWriter.Write7BitEncodedInt value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="77a40-362">쓸 32비트 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-362">The 32-bit integer to be written.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77a40-363">압축 형식의 32비트 정수를 씁니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-363">Writes a 32-bit integer in a compressed format.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77a40-364">정수는 `value` 매개 변수는 기록 7 비트 한 번에 7 최하위 비트로 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-364">The integer of the `value` parameter is written out seven bits at a time, starting with the seven least-significant bits.</span></span> <span data-ttu-id="77a40-365">바이트의 높은 비트 더 많은 바이트를 다음에 쓸 수 있는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-365">The high bit of a byte indicates whether there are more bytes to be written after this one.</span></span>  
  
 <span data-ttu-id="77a40-366">경우 `value` 들어가는 7 비트를 1 바이트의이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-366">If `value` will fit in seven bits, it takes only one byte of space.</span></span> <span data-ttu-id="77a40-367">경우 `value` 맞지 않을 7 비트 높은 비트 첫 번째 바이트에서 설정 되 고 기록 합니다. `value` 그런 다음는 이동 바이트 7 비트와 다음으로 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-367">If `value` will not fit in seven bits, the high bit is set on the first byte and written out. `value` is then shifted by seven bits and the next byte is written.</span></span> <span data-ttu-id="77a40-368">정수 전체이 쓸 때까지이 프로세스가 반복 됩니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-368">This process is repeated until the entire integer has been written.</span></span>  
  
 <span data-ttu-id="77a40-369">공통적인 I/O 작업의 목록에 대 한 참조 [공통적인 I/O 작업](~/docs/standard/io/common-i-o-tasks.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="77a40-369">For a list of common I/O tasks, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="77a40-370">스트림의 끝에 도달한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-370">The end of the stream is reached.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="77a40-371">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-371">The stream is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="77a40-372">스트림이 닫혔습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="77a40-372">The stream is closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>