<Type Name="FileSystemWatcher" FullName="System.IO.FileSystemWatcher">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f524b1e2438cea1c3c824aa9514a36244ccff373" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30420557" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FileSystemWatcher : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileSystemWatcher extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.IO.FileSystemWatcher" />
  <TypeSignature Language="VB.NET" Value="Public Class FileSystemWatcher&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystemWatcher : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Changed")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.IO.IODescription("")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>파일 시스템 변경 알림을 수신하면서 디렉터리 또는 디렉터리의 파일이 변경되면 이벤트를 발생시킵니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 <xref:System.IO.FileSystemWatcher> 변경 내용이 지정된 된 디렉터리에 있습니다. 지정된 된 디렉터리의 파일과 하위 디렉터리의 변경 내용을 볼 수 있습니다. 로컬 컴퓨터, 네트워크 드라이브 또는 원격 컴퓨터에서 파일을 감시 하도록 구성 요소를 만들 수 있습니다.  
  
 모든 파일의 변경 내용을 시청 하려면 설정는 <xref:System.IO.FileSystemWatcher.Filter%2A> 속성을 빈 문자열 ("") 하거나 와일드 카드 ("*.\*"). 특정 파일을 감시 하도록 설정 된 <xref:System.IO.FileSystemWatcher.Filter%2A> 속성을 파일 이름입니다. 예를 들어 MyDoc.txt 파일에서 변경 내용을 시청 하려면 설정는 <xref:System.IO.FileSystemWatcher.Filter%2A> 속성을 "MyDoc.txt"입니다. 특정 유형의 파일에서 변경 내용을 볼 수 있습니다. 예를 들어 텍스트 파일의 변경 내용을 감시를 설정의 <xref:System.IO.FileSystemWatcher.Filter%2A> 속성을 "\*.txt"입니다.  
  
 여러 가지 방법으로 변경 내용을 디렉터리 또는 파일에서 확인할 수 있습니다. 예를 들어에서 변경 내용을 볼 수 있습니다 `Attributes`, `LastWrite` 날짜 및 시간, 또는 `Size` 파일 또는 디렉터리입니다. 설정 하 여 이렇게는 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> 속성 중 하나에 <xref:System.IO.NotifyFilters> 값입니다. 확인할 수 있습니다 유형의 변경 작업에 자세한 내용은 참조 <xref:System.IO.NotifyFilters>합니다.  
  
 이름 바꾸기, 삭제, 또는 파일 또는 디렉터리 만들기에 대 한 감시할 수 있습니다. 예를 들어 텍스트 파일의 감시를 설정의 <xref:System.IO.FileSystemWatcher.Filter%2A> 속성을 "*.txt"로 호출은 <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> 메서드를 한 <xref:System.IO.WatcherChangeTypes.Renamed> 해당 매개 변수에 대해 지정 합니다.  
  
 Windows 운영 체제에서 만든 버퍼에서 파일 변경 내용이 구성 요소를에 알립니다.는 <xref:System.IO.FileSystemWatcher>합니다. 짧은 시간 동안 많은 변경 된 버퍼 오버플로될 수 있습니다. 이 인해 디렉터리에 변경 내용 추적이 구성 요소 및 알림만 제공 합니다. 사용 하 여 버퍼의 크기 증가 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> 속성이 비용이 많이 드는 이면 있는 것과 동일 비페이징 메모리는 디스크에 버퍼를 아직 유지 하므로 스와핑할 수 없으므로 큰를 모든 파일 변경 이벤트. 버퍼 오버플로 방지 하려면 사용 된 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> 및 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> 변경 알림을 필터링 할 수 있습니다 원치 않는 속성입니다.  
  
 인스턴스에 대 한 초기 속성 값 목록은 <xref:System.IO.FileSystemWatcher>, 참조는 <xref:System.IO.FileSystemWatcher.%23ctor%2A> 생성자입니다.  
  
 사용 하는 경우 다음에 유의 하십시오는 <xref:System.IO.FileSystemWatcher> 클래스입니다.  
  
-   숨겨진된 파일 무시 되지 않습니다.  
  
-   일부 시스템에서 <xref:System.IO.FileSystemWatcher> 간단한 8.3 파일 이름 형식을 사용 하 여 파일에 변경 내용을 보고 합니다. "LongFileName.LongExtension"에 대 한 변경으로 보고 예를 들어 "LongFil ~ 합니다. Lon "입니다.  
  
-   이 클래스는 모든 멤버에 적용 되는 클래스 수준에 상속 요청과 링크 요청을 포함 합니다. A <xref:System.Security.SecurityException> 직접 실행 호출자 또는 파생된 클래스 중 하나에 완전 신뢰 권한이 없는 경우에 throw 됩니다. 보안 요청에 대 한 세부 정보를 참조 하십시오. [링크 요청](~/docs/framework/misc/link-demands.md)합니다.  
  
-   설정할 수 있는 최대 크기는 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> 네트워크를 통해 디렉터리를 모니터링 하기 위한 속성은 64KB입니다.  
  
> [!NOTE]
>  실행 <xref:System.IO.FileSystemWatcher> Windows 98에서 지원 되지 않습니다.  
  
## <a name="copying-and-moving-folders"></a>폴더 복사 및 이동  
 운영 체제 및 <xref:System.IO.FileSystemWatcher> 잘라내기 및 붙여넣기 작업이 나 폴더와 해당 내용에 대 한 이름 바꾸기 작업으로 이동 작업 개체를 해석 합니다. 조사 중인 폴더에 파일 폴더 붙여넣기를 잘라낸는 <xref:System.IO.FileSystemWatcher> 만 바뀌게 기본적으로 때문에 새 폴더에만 했지만 내용은 가져오지 않고 개체 보고 합니다.  
  
 폴더의 내용을 이동 되거나 감시 폴더에 복사는 알릴 제공 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 및 <xref:System.IO.FileSystemWatcher.OnRenamed%2A> 다음 표에서에 설명 된 대로 이벤트 처리기 메서드.  
  
|이벤트 처리기|처리 하는 이벤트|수행|  
|-------------------|--------------------|--------------|  
|<xref:System.IO.FileSystemWatcher.OnChanged%2A>|<xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>|파일 특성, 만든된 파일 및 삭제 된 파일 변경 내용을 보고 합니다.|  
|<xref:System.IO.FileSystemWatcher.OnRenamed%2A>|<xref:System.IO.FileSystemWatcher.Renamed>|이전 구문과 새의 경로 이름이 바뀐된 파일 및 폴더를 재귀적으로 필요한 경우 확장을 나열 합니다.|  
  
## <a name="events-and-buffer-sizes"></a>이벤트 및 버퍼 크기  
 참고 여러 가지 요소에 영향을 줄 수 있는 파일 시스템 변경 이벤트 발생 다음에 설명 된 대로 합니다.  
  
-   일반적인 파일 시스템 작업에는 하나 이상의 이벤트 발생 시킬 수 있습니다. 파일을 다른 디렉터리로, 여러 한 디렉터리에서 이동할 때에 예를 들어 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 및 일부 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 및 <xref:System.IO.FileSystemWatcher.OnDeleted%2A> 이벤트가 발생할 수 있습니다. 여러 이벤트를 발생 시키는 따라서 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다. 마찬가지로, 일부 응용 프로그램 (예: 바이러스 백신 소프트웨어)에서 검색 되는 추가 파일 시스템 이벤트 않을 <xref:System.IO.FileSystemWatcher>합니다.  
  
-   <xref:System.IO.FileSystemWatcher> 으로 전환 되거나 제거 되지 디스크를 볼 수 있습니다. <xref:System.IO.FileSystemWatcher> 타임 스탬프 및 속성이 변경 될 수 없으므로 Cd 및 Dvd에 대 한 이벤트를 발생 하지 않습니다. 원격 컴퓨터에 필요한 플랫폼 제대로 작동 하려면 해당 구성 요소 설치 중 하나가 있어야 합니다.  
  
-   여러 개인 경우 <xref:System.IO.FileSystemWatcher> Windows XP 서비스 팩 1 이전에서 동일한 UNC 경로 감시 하는 개체 또는 Windows 2000 SP2 또는 개체 중 하나에만 다음 이전 버전을 지정 하면 이벤트가 발생 합니다. Windows XP s p 1을 실행 중인 컴퓨터 이상 버전에서는 Windows 2000 SP3 이상 또는 Windows Server 2003, 모든 <xref:System.IO.FileSystemWatcher> 개체 적절 한 이벤트를 발생 합니다.  
  
 한 <xref:System.IO.FileSystemWatcher> 버퍼 크기를 초과 했을 때 이벤트를 놓칠 수 있습니다. 누락 된 이벤트를 방지 하려면 다음이 지침을 따르십시오.  
  
-   설정 하 여 버퍼 크기를 늘려야는 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> 속성입니다.  
  
-   긴 파일 이름이 버퍼가 가득 찰에 기여 하기 때문에 긴 파일 이름으로 파일을 조사 하지 마십시오. 더 짧은 이름을 사용 하 여 이러한 파일 이름을 바꾸는 것이 좋습니다.  
  
-   이벤트 처리 코드를 가능한 한 짧게 유지 합니다.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.IO.FileSystemWatcher> 런타임에 지정 된 디렉터리를 조사 하 합니다. 구성의 변경 내용을로 설정 되어 `LastWrite` 및 `LastAccess` 시간, 작성, 삭제 또는 디렉터리에 있는 텍스트 파일의 합니다. 파일 변경, 생성 또는 삭제 하는 경우에 파일의 경로를 콘솔에 인쇄 합니다. 파일의 이름이 변경 되는 이전 구문과 새 경로 콘솔에 인쇄 합니다.  
  
 사용 하 여는 <xref:System.Diagnostics> 및 <xref:System.IO> 이 예제에 대 한 네임 스페이스입니다.  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">파생 된 <see cref="T:System.Diagnostics.ProcessStartInfo" /> 클래스입니다. 요청 값: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />; 명명 된 권한 집합: <see langword="FullTrust" />합니다.</permission>
    <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
    <altmember cref="T:System.IO.NotifyFilters" />
    <altmember cref="T:System.IO.FileSystemEventArgs" />
    <altmember cref="T:System.IO.FileSystemEventHandler" />
    <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
    <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
    <altmember cref="T:System.IO.InternalBufferOverflowException" />
    <altmember cref="T:System.IO.RenamedEventArgs" />
    <altmember cref="T:System.IO.RenamedEventHandler" />
    <altmember cref="T:System.IO.WaitForChangedResult" />
    <altmember cref="T:System.IO.WatcherChangeTypes" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IO.FileSystemWatcher" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemWatcher ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystemWatcher();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.IO.FileSystemWatcher" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows NT 또는 Windows 2000 없는 원격 컴퓨터를 볼 수 없습니다. Windows NT 4.0 컴퓨터에서 원격 Windows NT 4.0 컴퓨터를 볼 수 없습니다.  
  
 다음 표에서의 인스턴스에 대 한 초기 속성 값을 보여 줍니다. <xref:System.IO.FileSystemWatcher>합니다.  
  
|속성|초기 값|  
|--------------|-------------------|  
|<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>|비트 OR 조합 `LastWrite`, `FileName`, 및 `DirectoryName`|  
|<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>|`false`|  
|<xref:System.IO.FileSystemWatcher.Filter%2A>|"*. \*"(모든 파일을 조사 합니다.)|  
|<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>|`false`|  
|<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>|8192|  
|<xref:System.IO.FileSystemWatcher.Path%2A>|빈 문자열 ("")|  
  
> [!NOTE]
>  구성 요소에 지정 된 디렉터리를 보지 것입니다는 <xref:System.IO.FileSystemWatcher.Path%2A> 설정 되어 및 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> 은 `true`합니다.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.IO.FileSystemWatcher> 런타임에 지정 된 디렉터리를 조사 하는 개체입니다. <xref:System.IO.FileSystemWatcher> 개체에서 변경 내용을 감시 `LastWrite` 및 `LastAccess` 삭제 또는 이름 텍스트의 디렉터리에 파일 시간, 및을 만들 수 있도록 합니다. 파일 변경, 생성 또는 삭제 하는 경우에 파일의 경로를 콘솔에 표시 합니다. 파일의 이름을 바꿀 때 이전 구문과 새 경로 콘솔에 표시 됩니다.  
  
 사용 하 여이 예제는 <xref:System.Diagnostics> 및 <xref:System.IO> 네임 스페이스입니다.  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
        <altmember cref="T:System.IO.WaitForChangedResult" />
        <altmember cref="T:System.IO.WatcherChangeTypes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemWatcher (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystemWatcher(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">모니터링할 디렉터리입니다. 표준 또는 UNC(Universal Naming Convention) 표기법으로 나타냅니다.</param>
        <summary>모니터링할 디렉터리가 지정된 경우 <see cref="T:System.IO.FileSystemWatcher" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  구성 요소에 지정 된 디렉터리를 보지 것입니다는 <xref:System.IO.FileSystemWatcher.Path%2A> 설정 되어 및 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> 은 `true`합니다.  
  
 구성 요소는 개인용 컴퓨터, 네트워크 드라이브 또는 원격 컴퓨터에서 파일을 볼 수 있습니다.  
  
 Windows NT 또는 Windows 2000 없는 원격 컴퓨터를 볼 수 없습니다. Windows NT 4.0 컴퓨터에서 원격 Windows NT 4.0 컴퓨터를 볼 수 없습니다. <xref:System.IO.FileSystemWatcher.Filter%2A> 속성이 기본적으로 모든 파일을 조사 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> 매개 변수가 빈 문자열("")입니다.  
  
 또는  
  
 <paramref name="path" /> 매개 변수로 지정된 경로가 없는 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="path" />가 너무 깁니다.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
        <altmember cref="T:System.IO.WaitForChangedResult" />
        <altmember cref="T:System.IO.WatcherChangeTypes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemWatcher (string path, string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, filter As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileSystemWatcher(System::String ^ path, System::String ^ filter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">모니터링할 디렉터리입니다. 표준 또는 UNC(Universal Naming Convention) 표기법으로 나타냅니다.</param>
        <param name="filter">조사할 파일 형식입니다. 예를 들어 "*.txt"를 지정하면 모든 텍스트 파일에 대한 변경 내용을 조사합니다.</param>
        <summary>모니터링할 디렉터리 및 파일 형식이 지정된 경우 <see cref="T:System.IO.FileSystemWatcher" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  구성 요소에 지정 된 디렉터리를 보지 것입니다는 <xref:System.IO.FileSystemWatcher.Path%2A> 설정 되어 및 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> 은 `true`합니다.  
  
 구성 요소는 개인용 컴퓨터, 네트워크 드라이브 또는 원격 컴퓨터에서 파일을 볼 수 있습니다.  
  
 Windows NT 또는 Windows 2000 없는 원격 컴퓨터를 볼 수 없습니다. Windows NT 4.0 컴퓨터에서 원격 Windows NT 4.0 컴퓨터를 볼 수 없습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 매개 변수가 <see langword="null" />인 경우  
  
 또는  
  
 <paramref name="filter" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> 매개 변수가 빈 문자열("")입니다.  
  
 또는  
  
 <paramref name="path" /> 매개 변수로 지정된 경로가 없는 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <paramref name="path" />가 너무 깁니다.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
        <altmember cref="T:System.IO.WaitForChangedResult" />
        <altmember cref="T:System.IO.WatcherChangeTypes" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>양식에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.IO.FileSystemWatcher" />의 초기화를 시작합니다. 초기화는 런타임에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] 디자인 환경에서이 메서드를 사용 하 여 구성 요소 초기화를 시작 폼에 사용 되거나 다른 구성 요소에서 사용 합니다. <xref:System.IO.FileSystemWatcher.EndInit%2A> 메서드 초기화를 끝냅니다. 사용 하는 <xref:System.IO.FileSystemWatcher.BeginInit%2A> 및 <xref:System.IO.FileSystemWatcher.EndInit%2A> 메서드는 컨트롤이 완전히 초기화 되기 전에 사용 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileSystemWatcher.EndInit" />
      </Docs>
    </Member>
    <Member MemberName="Changed">
      <MemberSignature Language="C#" Value="public event System.IO.FileSystemEventHandler Changed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.FileSystemEventHandler Changed" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Changed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Changed As FileSystemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::FileSystemEventHandler ^ Changed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.IO.IODescription("Occurs when a file/directory change matches the filter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>지정된 <see cref="P:System.IO.FileSystemWatcher.Path" />에서 파일이나 디렉터리가 변경될 경우에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.FileSystemWatcher.Changed> 크기 변경 될 때 이벤트가 발생 시스템 특성, 마지막 작성 시간, 마지막 액세스 시간 또는 파일 또는 디렉터리의 보안 권한을 모니터링 되 고 디렉터리에 있습니다.  
  
> [!NOTE]
>  일반적인 파일 시스템 작업에는 하나 이상의 이벤트 발생 시킬 수 있습니다. 파일을 다른 디렉터리로, 여러 한 디렉터리에서 이동할 때에 예를 들어 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 및 일부 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 및 <xref:System.IO.FileSystemWatcher.OnDeleted%2A> 이벤트가 발생할 수 있습니다. 여러 이벤트를 발생 시키는 따라서 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다. 마찬가지로, 일부 응용 프로그램 (예: 바이러스 백신 소프트웨어)에서 검색 되는 추가 파일 시스템 이벤트 않을 <xref:System.IO.FileSystemWatcher>합니다.  
  
 사용 하 여 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> 이 이벤트가 처리 될 때 발생 하는 알림 수를 제한할 수 있습니다.  
  
> [!NOTE]
>  <xref:System.IO.FileSystemWatcher.Changed> 이벤트는 예기치 않게 파일의 이름이 바뀌었지만 디렉터리 이름을 바꿀 때 발생 하지 않습니다. 조사 하려면 사용 된 <xref:System.IO.FileSystemWatcher.Renamed> 이벤트입니다.  
  
> [!NOTE]
>  되는 순서는 <xref:System.IO.FileSystemWatcher.Changed> 관련 이벤트는 <xref:System.IO.FileSystemWatcher> 이벤트 때 변경 될 수 있습니다는 <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> 속성은 `null`합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.IO.FileSystemWatcher.Changed> 이벤트를 감시 파일이 변경 될 때마다 파일 경로 콘솔에 표시 합니다.  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Created">
      <MemberSignature Language="C#" Value="public event System.IO.FileSystemEventHandler Created;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.FileSystemEventHandler Created" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Created" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Created As FileSystemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::FileSystemEventHandler ^ Created;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.IO.IODescription("Occurs when a file/directory creation matches the filter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>지정된 <see cref="P:System.IO.FileSystemWatcher.Path" />에서 파일이나 디렉터리가 만들어질 경우에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 복사 하거나 이동할 파일 또는 디렉터리와 같은 일반적으로 발생 하는 몇 가지 이벤트에 직접 대응 되지 않습니다 하지만 이러한 경우 발생할 이벤트를 발생 시 키지 않습니다. 발생 한 파일 또는 디렉터리를 복사 하면는 <xref:System.IO.FileSystemWatcher.Created> 디렉터리에 파일이 복사 된 위치로, 해당 디렉터리를 조사 하는 경우에 이벤트입니다. 다른 인스턴스에서 복사한 디렉터리 조사 하는 경우 <xref:System.IO.FileSystemWatcher>, 이벤트가 발생 합니다. 두 인스턴스를 만드는 예를 들어 <xref:System.IO.FileSystemWatcher>합니다. FileSystemWatcher1 시청 "C:\My 문서"로 설정 된 및 FileSystemWatcher2 시청 "C:\Your 문서"로 설정 됩니다. "Your Documents"에 "내 문서"에서 파일을 복사 하는 경우는 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher1에 대 한 이벤트는 있지만 FileSystemWatcher2에서 이벤트가 발생 합니다. 복사와 달리 파일이 나 디렉터리를 이동 하면 두 이벤트가 발생 합니다. 이전 예제의 "내 문서"에서 "Your Documents" 파일을 이동 하는 경우는 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2 여 발생할 때 이벤트 및 <xref:System.IO.FileSystemWatcher.Deleted> FileSystemWatcher1 하 여 이벤트를 발생 합니다.  
  
> [!NOTE]
>  일반적인 파일 시스템 작업에는 하나 이상의 이벤트 발생 시킬 수 있습니다. 파일을 다른 디렉터리로, 여러 한 디렉터리에서 이동할 때에 예를 들어 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 및 일부 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 및 <xref:System.IO.FileSystemWatcher.OnDeleted%2A> 이벤트가 발생할 수 있습니다. 여러 이벤트를 발생 시키는 따라서 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다. 마찬가지로, 일부 응용 프로그램 (예: 바이러스 백신 소프트웨어)에서 검색 되는 추가 파일 시스템 이벤트 않을 <xref:System.IO.FileSystemWatcher>합니다.  
  
> [!NOTE]
>  되는 순서는 <xref:System.IO.FileSystemWatcher.Created> 관련 이벤트는 <xref:System.IO.FileSystemWatcher> 이벤트 때 변경 될 수 있습니다는 <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> 속성은 `null`합니다.  
  
 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 파일을 작성 하는 즉시 발생 합니다. 파일 되 고 있으면 복사 하거나 전송 확인된 된 디렉터리는 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 이벤트가 발생 바로 뒤에 하나 이상의 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 이벤트입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.IO.FileSystemWatcher.Created> 이벤트를 감시 파일을 만들 때마다 콘솔에 파일 경로 표시 합니다.  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.IO.FileSystemWatcher.Deleted" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.IO.FileSystemEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.FileSystemEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As FileSystemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::FileSystemEventHandler ^ Deleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.IO.IODescription("Occurs when a file/directory deletion matches the filter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>지정된 <see cref="P:System.IO.FileSystemWatcher.Path" />에서 파일이나 디렉터리가 삭제될 경우에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 복사 하거나 이동할 파일 또는 디렉터리와 같은 일반적으로 발생 하는 몇 가지 이벤트에 직접 대응 되지 않습니다 하지만 이러한 경우 발생할 이벤트를 발생 시 키지 않습니다. 발생 한 파일 또는 디렉터리를 복사 하면는 <xref:System.IO.FileSystemWatcher.Created> 디렉터리에 파일이 복사 된 위치로, 해당 디렉터리를 조사 하는 경우에 이벤트입니다. 다른 인스턴스에서 복사한 디렉터리 조사 하는 경우 <xref:System.IO.FileSystemWatcher>, 이벤트가 발생 합니다. 두 인스턴스를 만드는 예를 들어 <xref:System.IO.FileSystemWatcher>합니다. FileSystemWatcher1 시청 "C:\My 문서"로 설정 된 및 FileSystemWatcher2 시청 "C:\Your 문서"로 설정 됩니다. "Your Documents"에 "내 문서"에서 파일을 복사 하는 경우는 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher1에 대 한 이벤트는 있지만 FileSystemWatcher2에서 이벤트가 발생 합니다. 복사와 달리 파일이 나 디렉터리를 이동 하면 두 이벤트가 발생 합니다. 이전 예제의 "내 문서"에서 "Your Documents" 파일을 이동 하는 경우는 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2 여 발생할 때 이벤트 및 <xref:System.IO.FileSystemWatcher.Deleted> FileSystemWatcher1 하 여 이벤트를 발생 합니다.  
  
> [!NOTE]
>  일반적인 파일 시스템 작업에는 하나 이상의 이벤트 발생 시킬 수 있습니다. 파일을 다른 디렉터리로, 여러 한 디렉터리에서 이동할 때에 예를 들어 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 및 일부 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 및 <xref:System.IO.FileSystemWatcher.OnDeleted%2A> 이벤트가 발생할 수 있습니다. 여러 이벤트를 발생 시키는 따라서 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다. 마찬가지로, 일부 응용 프로그램 (예: 바이러스 백신 소프트웨어)에서 검색 되는 추가 파일 시스템 이벤트 않을 <xref:System.IO.FileSystemWatcher>합니다.  
  
> [!NOTE]
>  되는 순서는 <xref:System.IO.FileSystemWatcher.Deleted> 관련 이벤트는 <xref:System.IO.FileSystemWatcher> 이벤트 때 변경 될 수 있습니다는 <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> 속성은 `null`합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.IO.FileSystemWatcher.Deleted> 이벤트를 감시 파일은 삭제 될 때마다 파일 경로 콘솔에 표시 합니다.  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.IO.FileSystemWatcher.Created" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
        <summary>
          <see cref="T:System.IO.FileSystemWatcher" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 public <xref:System.ComponentModel.Component.Dispose%2A> 메서드 및 <xref:System.Object.Finalize%2A> 메서드. <xref:System.ComponentModel.Component.Dispose%2A> 보호 된 호출 <xref:System.IO.FileSystemWatcher.Dispose%2A> 메서드는 `disposing` 매개 변수 설정 `true`합니다. <xref:System.Object.Finalize%2A> 호출 <xref:System.IO.FileSystemWatcher.Dispose%2A> 와 `disposing` 로 설정 `false`합니다.  
  
 `disposing` 매개 변수가 `true`인 경우 이 메서드는 이 <xref:System.IO.Compression.DeflateStream>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다. 이 메서드는 참조되는 각 개체의 <xref:System.ComponentModel.Component.Dispose%2A> 메서드를 호출합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.ComponentModel.Component.Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다. 재정의 하는 경우 <see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" /> 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 <see cref="M:System.ComponentModel.Component.Dispose" />합니다. 구현 하는 방법에 대 한 자세한 내용은 <see cref="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)" />, 참조 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.  
  
 에 대 한 자세한 내용은 <see cref="M:System.ComponentModel.Component.Dispose" /> 및 <see cref="M:System.Object.Finalize" />, 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EnableRaisingEvents">
      <MemberSignature Language="C#" Value="public bool EnableRaisingEvents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableRaisingEvents" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.EnableRaisingEvents" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableRaisingEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableRaisingEvents { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("Flag to indicate if this instance is active")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>구성 요소가 활성화되는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          구성 요소를 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다. [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]의 디자이너에서 구성 요소를 사용하고 있으면 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 하지 않으면 구성 요소 이벤트를 발생 하지 것입니다 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> 를 `true`합니다.  
  
> [!NOTE]
>  구성 요소에 지정 된 디렉터리를 보지 것입니다는 <xref:System.IO.FileSystemWatcher.Path%2A> 속성이 설정 되어 및 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> 은 `true`합니다.  
  
 <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> 이 속성을 설정 하는 경우에 파일 변경에 응답 하도록 호출 되어야 하는 이벤트 처리기 메서드를 사용 하면 `false`합니다.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.IO.FileSystemWatcher> 런타임에 지정 된 디렉터리를 조사 하 합니다. 구성의 변경 내용을로 설정 되어 `LastWrite` 및 `LastAccess` 시간, 작성, 삭제 또는 디렉터리에 있는 텍스트 파일의 합니다. 파일 변경, 생성 또는 삭제 하는 경우에 파일의 경로를 콘솔에 인쇄 합니다. 파일의 이름이 변경 되는 이전 구문과 새 경로 콘솔에 인쇄 합니다.  
  
 사용 하 여는 <xref:System.Diagnostics> 및 <xref:System.IO> 이 예제에 대 한 네임 스페이스입니다.  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.IO.FileSystemWatcher" /> 개체가 삭제되었습니다.</exception>
        <exception cref="T:System.PlatformNotSupportedException">현재 운영 체제가 Microsoft Windows NT 이상이 아닙니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <see cref="P:System.IO.FileSystemWatcher.Path" />에 지정된 디렉터리를 찾을 수 없는 경우</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.IO.FileSystemWatcher.Path" />가 설정되지 않았거나 잘못된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>양식에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.IO.FileSystemWatcher" />의 초기화를 끝냅니다. 초기화는 런타임에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] 디자인 환경에서이 메서드를 사용 하 여 구성 요소 초기화를 끝냅니다 폼에 사용 되거나 다른 구성 요소에서 사용 합니다. <xref:System.IO.FileSystemWatcher.BeginInit%2A> 메서드 초기화를 시작 합니다. 사용 하는 <xref:System.IO.FileSystemWatcher.BeginInit%2A> 및 <xref:System.IO.FileSystemWatcher.EndInit%2A> 메서드는 컨트롤이 완전히 초기화 되기 전에 사용 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileSystemWatcher.BeginInit" />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.IO.ErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.ErrorEventHandler Error" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Error" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As ErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::ErrorEventHandler ^ Error;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.ErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.IO.FileSystemWatcher" />의 인스턴스가 변경을 지속적으로 모니터링 할 수 없는 경우 또는 내부 버퍼가 오버플로되는 경우 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트는 것을 방지는 <xref:System.IO.FileSystemWatcher> 개체에서 변경 사항을 모니터링 합니다. 개체가 원격 디렉터리의 변경 내용을 모니터링 하 고 해당 디렉터리에 대 한 연결이 손실 된 경우 등에서 <xref:System.IO.FileSystemWatcher.Error> 이벤트가 발생 합니다.  
  
 구성 요소를 만들고 Api에 전달 하는 버퍼에 이러한 변경 내용을 저장 하 고 시스템 파일 변경 내용을 알려 줍니다. 짧은 시간 동안 많은 변경 된 버퍼 오버플로될 수 있습니다. 이 인해 디렉터리에 변경 내용 추적이 구성 요소 및 알림만 제공 합니다. 버퍼의 크기를 늘리면 비용이 많이 듭니다, 그리고 비에 있기 때문에 메모리를 디스크에 유지 하므로 스와핑할 수 없으므로 가능한 한 작게 버퍼를 호출 합니다. 버퍼 오버플로 방지 하려면 사용 하 여는 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.Filter%2A>, 및 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> 변경 알림을 원하지 않는 필터링 할 속성입니다.  
  
> [!NOTE]
>  일반적인 파일 시스템 작업에는 하나 이상의 이벤트 발생 시킬 수 있습니다. 파일을 다른 디렉터리로, 여러 한 디렉터리에서 이동할 때에 예를 들어 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 및 일부 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 및 <xref:System.IO.FileSystemWatcher.OnDeleted%2A> 이벤트가 발생할 수 있습니다. 여러 이벤트를 발생 시키는 따라서 파일은 여러 개의 간단한 작업으로 구성 된 복잡 한 작업으로 이동 합니다. 마찬가지로, 일부 응용 프로그램 (예: 바이러스 백신 소프트웨어)에서 검색 되는 추가 파일 시스템 이벤트 않을 <xref:System.IO.FileSystemWatcher>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="T:System.IO.ErrorEventArgs" />
        <altmember cref="T:System.IO.ErrorEventHandler" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public string Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Filter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("*.*")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("File name filter pattern")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>디렉터리에서 모니터링할 파일을 결정하는 데 사용되는 필터 문자열을 가져오거나 설정합니다.</summary>
        <value>필터 문자열입니다. 기본값은 "*. \*"(모든 파일이 조사 합니다.)</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 파일의 변경 내용을 시청 하려면 설정는 <xref:System.IO.FileSystemWatcher.Filter%2A> 속성을 빈 문자열 (""). 특정 파일을 감시 하도록 설정 된 <xref:System.IO.FileSystemWatcher.Filter%2A> 속성을 파일 이름입니다. 예를 들어 MyDoc.txt 파일에서 변경 내용을 시청 하려면 설정는 <xref:System.IO.FileSystemWatcher.Filter%2A> 속성을 "MyDoc.txt"입니다. 특정 유형의 파일에서 변경 내용을 볼 수 있습니다. 예를 들어 모든 텍스트 파일에 변경 내용을 감시를 설정 된 <xref:System.IO.FileSystemWatcher.Filter%2A> 속성을 "*.txt"입니다. 와 같은 여러 필터를 사용 하 여 "\*.txt&#124;\*.doc" 지원 되지 않습니다.  
  
 <xref:System.IO.FileSystemWatcher.Filter%2A> 이후에 속성을 변경할 수는 <xref:System.IO.FileSystemWatcher> 개체 이벤트 수신을 시작 했습니다.  
  
 원하지 않는 알림을 필터링 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, 및 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> 속성입니다.  
  
 <xref:System.IO.FileSystemWatcher.Filter%2A> 다음 예제에 나와 있는 것 처럼 일치 하는 파일에 대 한 와일드 카드를 허용 합니다.  
  
|필터 문자열|다음 파일을 감시|  
|-------------------|---------------------------------|  
|*.\*|모든 파일 (기본값)입니다. 빈 문자열 ("")도 모든 파일이 조사 합니다.|  
|*.txt|"Txt" 확장명을 가진 모든 파일입니다.|  
|*recipe.doc|"Doc" 확장명을 가진 "조리법"로 끝나는 모든 파일입니다.|  
|win*.xml|"Xml" 확장명을 가진 "win"로 시작 하는 모든 파일입니다.|  
|Sales*200?.xls|다음 문자를 찾습니다.<br /><br /> 판매 년 7 월 2001.xlsSales/8 / 2002.xlsSales 년 3 월 2004.xls<br /><br /> 일치 하지 않습니다.<br /><br /> 판매 년 11 월 1999.xls|  
|MyReport.Doc|만 MyReport.doc를 감시합니다.|  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.IO.FileSystemWatcher> 런타임에 지정 된 디렉터리를 조사 하 합니다. 구성의 변경 내용을로 설정 되어 `LastWrite` 및 `LastAccess` 시간, 작성, 삭제 또는 디렉터리에 있는 텍스트 파일의 합니다. 파일 변경, 생성 또는 삭제 하는 경우에 파일의 경로를 콘솔에 인쇄 합니다. 파일의 이름이 변경 되는 이전 구문과 새 경로 콘솔에 인쇄 합니다.  
  
 사용 하 여는 <xref:System.Diagnostics> 및 <xref:System.IO> 이 예제에 대 한 네임 스페이스입니다.  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~FileSystemWatcher ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!FileSystemWatcher ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeSubdirectories">
      <MemberSignature Language="C#" Value="public bool IncludeSubdirectories { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeSubdirectories" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeSubdirectories As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeSubdirectories { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("Flag to indicate we want to watch subdirectories")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>지정된 경로 내에 있는 하위 디렉터리를 모니터링해야 하는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          하위 디렉터리를 모니터링하려면 <see langword="true" />, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> 를 `true` 한 파일 및 지정 된 디렉터리 내에 포함 된 디렉터리에 대 한 변경 알림을 조사 하려는 경우는 <xref:System.IO.FileSystemWatcher.Path%2A> 속성 및 그 하위 디렉터리입니다. 설정의 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> 속성을 `false` 내부 버퍼에 보낸 알림 수를 줄일 수 있습니다. 원하지 않는 알림을 필터링에 대 한 자세한 내용은 참조는 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> 및 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> 속성입니다.  
  
 때 `true`, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> 직계 자식 디렉터리 뿐 아니라 전체 하위 트리를 통해 재귀적입니다. 상대 경로를 파일 또는 디렉터리 하위 트리 내에 반환는 <xref:System.IO.FileSystemEventArgs.Name%2A> 속성 <xref:System.IO.FileSystemEventArgs> 및 <xref:System.IO.RenamedEventArgs.OldName%2A> 속성 <xref:System.IO.RenamedEventArgs>에 대 한 감시 하는 변경 내용에 따라 합니다. 정규화 된 경로 가져올 수 있습니다는 <xref:System.IO.FileSystemEventArgs.FullPath%2A> 속성 <xref:System.IO.FileSystemEventArgs> 및 <xref:System.IO.RenamedEventArgs.OldFullPath%2A> 속성 <xref:System.IO.RenamedEventArgs>에 대 한 감시 하는 변경 내용에 따라 합니다.  
  
 디렉터리를 감시 하는 디렉터리의 하위 트리를 만든 경우 및 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> 은 `true`, 해당 디렉터리 자동으로 조사 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemEventArgs.FullPath" />
        <altmember cref="P:System.IO.RenamedEventArgs.OldFullPath" />
        <altmember cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
        <altmember cref="P:System.IO.FileSystemEventArgs.Name" />
        <altmember cref="P:System.IO.RenamedEventArgs.OldName" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="InternalBufferSize">
      <MemberSignature Language="C#" Value="public int InternalBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InternalBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.InternalBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property InternalBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int InternalBufferSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(8192)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>내부 버퍼의 크기(바이트)를 가져오거나 설정합니다.</summary>
        <value>내부 버퍼의 크기(바이트)입니다. 기본값은 8192(8KB)입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 4KB로 또는 그에 버퍼를 설정할 수 있지만 64 KB를 초과 해서는 안 됩니다. 설정 하려는 경우는 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> 속성에 보다 작은 4096 바이트를 사용자가 값은 무시 됩니다 및 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> 4096 바이트 속성입니다. 최상의 성능을 위해 Intel 기반 컴퓨터에서 4KB의 배수를 사용 합니다.  
  
 구성 요소를 만들고 Api에 전달 하는 버퍼에 이러한 변경 내용을 저장 하 고 시스템 파일 변경 내용이 구성 요소에 알립니다. 각 이벤트의 메모리를 파일 이름을 제외한 16 바이트까지 사용할 수 있습니다. 짧은 시간 동안 많은 변경 된 버퍼 오버플로될 수 있습니다. 이 인해 디렉터리에 변경 내용 추적이 구성 요소 및 알림만 제공 합니다. 버퍼의 크기 증가 방지할 수 없습니다. 파일 시스템 변경 이벤트. 그러나 버퍼 크기 증가 비용이 많이 들며, 비페이징 메모리는 디스크에 따라서 버퍼를 가능한 한 작게 유지 스와핑할 수 없으므로 사용 하므로. 버퍼 오버플로 방지 하려면 사용 하 여는 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> 및 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> 변경 알림을 원하지 않는 필터링 할 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
      </Docs>
    </Member>
    <Member MemberName="NotifyFilter">
      <MemberSignature Language="C#" Value="public System.IO.NotifyFilters NotifyFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.NotifyFilters NotifyFilter" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.NotifyFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyFilter As NotifyFilters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::NotifyFilters NotifyFilter { System::IO::NotifyFilters get(); void set(System::IO::NotifyFilters value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("Flag to indicate which change event we want to monitor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.NotifyFilters</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>조사할 변경 내용 형식을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.IO.NotifyFilters" /> 값 중 하나입니다. 기본값은 <see langword="LastWrite" />, <see langword="FileName" />, <see langword="DirectoryName" />의 비트 OR 조합입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 멤버를 결합할 수는 <xref:System.IO.NotifyFilters> 변경 한 번에 둘 이상의 유형을 조사 하는 열거형입니다. 예를 들어 파일의 크기 변경에 대 한과 변경에 대 한를 살펴볼 수 있습니다는 `LastWrite` 시간입니다. 이 이벤트를 발생 시키는 변경 되거나 파일 또는 폴더 크기가 변경 되는 `LastWrite` 파일 또는 폴더의 시간입니다.  
  
 이것이 필터링 원하지 않는 알림의 수입니다. 원하지 않는 알림을 필터링에 대 한 자세한 내용은 참조는 <xref:System.IO.FileSystemWatcher.Filter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, 및 <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.IO.FileSystemWatcher> 런타임에 지정 된 디렉터리를 조사 하 합니다. 구성의 변경 내용을로 설정 되어 `LastWrite` 및 `LastAccess` 시간, 작성, 삭제 또는 디렉터리에 있는 텍스트 파일의 합니다. 파일 변경, 생성 또는 삭제 하는 경우에 파일의 경로를 콘솔에 인쇄 합니다. 파일의 이름이 변경 되는 이전 구문과 새 경로 콘솔에 인쇄 합니다.  
  
 사용 하 여는 <xref:System.Diagnostics> 및 <xref:System.IO> 이 예제에 대 한 네임 스페이스입니다.  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">이 값이 <see cref="T:System.IO.NotifyFilters" /> 값의 유효한 비트 OR 조합이 아닌 경우</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">설정된 값이 유효하지 않은 경우</exception>
        <altmember cref="T:System.IO.NotifyFilters" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
        <altmember cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        <altmember cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (System.IO.FileSystemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(class System.IO.FileSystemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (e As FileSystemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::IO::FileSystemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.FileSystemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.IO.FileSystemEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.IO.FileSystemWatcher.Changed" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 크기, 시스템 속성, 마지막으로 쓴 시간, 마지막 액세스 시간 또는 파일이 나 디렉터리의에서 모니터링 되는 디렉터리의 보안 권한을에 변경 내용이 때 호출 됩니다.  
  
 사용 하 여는 <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> 될 때 발생 하는 이벤트 수를 제한 하는 속성은 <xref:System.IO.FileSystemWatcher.Changed> 이벤트를 처리 합니다.  
  
 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 파일을 작성 하는 즉시 발생 합니다. 파일 되 고 있으면 복사 하거나 전송 확인된 된 디렉터리는 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 이벤트가 발생 바로 뒤에 하나 이상의 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 이벤트입니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)" /> 메서드.</para>
        </block>
        <altmember cref="E:System.IO.FileSystemWatcher.Changed" />
        <altmember cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnCreated">
      <MemberSignature Language="C#" Value="protected void OnCreated (System.IO.FileSystemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnCreated(class System.IO.FileSystemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnCreated (e As FileSystemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnCreated(System::IO::FileSystemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.FileSystemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.IO.FileSystemEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.IO.FileSystemWatcher.Created" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 모니터링 되는 디렉터리에서 파일 또는 디렉터리를 만들 때 호출 됩니다.  
  
 복사 하거나 이동할 파일 또는 디렉터리와 같은 일반적으로 발생 하는 몇 가지 이벤트에 직접 대응 되지 않습니다 하지만 이러한 경우 발생할 이벤트를 발생 시 키지 않습니다. 발생 한 파일 또는 디렉터리를 복사 하면는 <xref:System.IO.FileSystemWatcher.Created> 디렉터리에 파일이 복사 된 위치로, 해당 디렉터리를 조사 하는 경우에 이벤트입니다. 다른 인스턴스에서 복사한 디렉터리 조사 하는 경우 <xref:System.IO.FileSystemWatcher>, 이벤트가 발생 합니다. 두 인스턴스를 만드는 예를 들어 <xref:System.IO.FileSystemWatcher>합니다. FileSystemWatcher1 시청 "C:\My 문서"로 설정 된 및 FileSystemWatcher2 시청 "C:\Your 문서"로 설정 됩니다. "내 문서"에서 파일을 복사 하 고 "Your Documents"에 붙여는 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher1에 대 한 이벤트는 있지만 FileSystemWatcher2에서 이벤트가 발생 합니다. 복사와 달리 두 개의 이벤트를 발생 파일이 나 디렉터리를 이동 합니다. 이전 예제의 "내 문서"에서 "Your Documents" 파일을 이동 하는 경우는 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2에서 이벤트가 발생할 때 및 <xref:System.IO.FileSystemWatcher.Deleted> FileSystemWatcher1에서 이벤트를 발생 합니다.  
  
 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 파일을 작성 하는 즉시 발생 합니다. 파일 되 고 있으면 복사 하거나 전송 확인된 된 디렉터리는 <xref:System.IO.FileSystemWatcher.OnCreated%2A> 이벤트가 발생 바로 뒤에 하나 이상의 <xref:System.IO.FileSystemWatcher.OnChanged%2A> 이벤트입니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)" /> 메서드.</para>
        </block>
        <altmember cref="E:System.IO.FileSystemWatcher.Created" />
        <altmember cref="E:System.IO.FileSystemWatcher.Deleted" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnDeleted">
      <MemberSignature Language="C#" Value="protected void OnDeleted (System.IO.FileSystemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnDeleted(class System.IO.FileSystemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnDeleted (e As FileSystemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnDeleted(System::IO::FileSystemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.FileSystemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.IO.FileSystemEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.IO.FileSystemWatcher.Deleted" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.FileSystemWatcher.OnDeleted%2A> 파일 또는 디렉터리를 모니터링 하는 디렉터리 내에서 삭제 될 때 호출 됩니다.  
  
 복사 하거나 이동할 파일 또는 디렉터리와 같은 일반적으로 발생 하는 몇 가지 이벤트에 직접 대응 되지 않습니다 하지만 이러한 경우 발생할 이벤트를 발생 시 키지 않습니다. 발생 한 파일 또는 디렉터리를 복사 하면는 <xref:System.IO.FileSystemWatcher.Created> 디렉터리에 파일이 복사 된 위치로, 해당 디렉터리를 조사 하는 경우에 이벤트입니다. 다른 인스턴스에서 복사한 디렉터리 조사 하는 경우 <xref:System.IO.FileSystemWatcher>, 이벤트가 발생 합니다. 두 인스턴스를 만드는 예를 들어 <xref:System.IO.FileSystemWatcher>합니다. FileSystemWatcher1 시청 "C:\My 문서"로 설정 된 및 FileSystemWatcher2 시청 "C:\Your 문서"로 설정 됩니다. "Your Documents"에 "내 문서"에서 파일을 복사 하는 경우는 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher1에 대 한 이벤트는 있지만 FileSystemWatcher2에서 이벤트가 발생 합니다. 복사와 달리 두 개의 이벤트를 발생 파일이 나 디렉터리를 이동 합니다. 이전 예제의 "내 문서"에서 "Your Documents" 파일을 이동 하는 경우는 <xref:System.IO.FileSystemWatcher.Created> FileSystemWatcher2 여 발생할 때 이벤트 및 <xref:System.IO.FileSystemWatcher.Deleted> FileSystemWatcher1 하 여 이벤트를 발생 합니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)" /> 메서드.</para>
        </block>
        <altmember cref="E:System.IO.FileSystemWatcher.Created" />
        <altmember cref="E:System.IO.FileSystemWatcher.Deleted" />
        <altmember cref="T:System.IO.FileSystemEventArgs" />
        <altmember cref="T:System.IO.FileSystemEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnError">
      <MemberSignature Language="C#" Value="protected void OnError (System.IO.ErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnError(class System.IO.ErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnError (e As ErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnError(System::IO::ErrorEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.ErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.IO.ErrorEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.IO.FileSystemWatcher.Error" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.FileSystemWatcher.OnError%2A> 오류가 발생할 때 호출 됩니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)" /> 메서드.</para>
        </block>
        <altmember cref="E:System.IO.FileSystemWatcher.Error" />
        <altmember cref="T:System.IO.ErrorEventArgs" />
        <altmember cref="T:System.IO.ErrorEventHandler" />
        <altmember cref="T:System.IO.InternalBufferOverflowException" />
      </Docs>
    </Member>
    <Member MemberName="OnRenamed">
      <MemberSignature Language="C#" Value="protected void OnRenamed (System.IO.RenamedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnRenamed(class System.IO.RenamedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnRenamed (e As RenamedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnRenamed(System::IO::RenamedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IO.RenamedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.IO.RenamedEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.IO.FileSystemWatcher.Renamed" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.FileSystemWatcher.OnRenamed%2A> 파일 또는 디렉터리는 모니터링 중인 디렉터리 내에서 이름을 바꿀 때 호출 됩니다. 해당 <xref:System.IO.RenamedEventArgs> 인수 변경, 이전 및 새 경로 및 이전 및 새 이름을 유형과 같은 이름 바꾸기 작업에 대 한 정보를 포함 합니다. 해당 <xref:System.IO.FileSystemEventArgs.Name> 속성에 대 한 일 수 있습니다 하는 경우 이벤트 이름을 바꿀는 <xref:System.IO.FileSystemWatcher> 않습니다 가져오기에 일치 하지 않는 운영 체제에서 이전 및 새 이름 이벤트입니다. 
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" /> 메서드.</para>
        </block>
        <altmember cref="E:System.IO.FileSystemWatcher.Renamed" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Diagnostics.Design.FSWPathEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("The directory to monitor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>조사할 디렉터리의 경로를 가져오거나 설정합니다.</summary>
        <value>모니터링할 경로입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 디렉터리에 정규화 된 경로입니다. 경우는 <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> 속성은 `true`,이 디렉터리는 시스템 변경 내용을 감시 하는 루트, 그렇지 않으면 조사 하는 유일한 디렉터리입니다. 특정 파일을 감시 하도록 설정 된 <xref:System.IO.FileSystemWatcher.Path%2A> 속성을 정규화 하 고 올바른 디렉터리 및 <xref:System.IO.FileSystemWatcher.Filter%2A> 속성을 파일 이름입니다.  
  
 <xref:System.IO.FileSystemWatcher.Path%2A> 속성 범용 명명 규칙 (UNC) 경로 지원 합니다.  
  
> [!NOTE]
>  이 속성은 변경 내용에 대 한 구성 요소를 조사할 수 전에 설정 되어야 합니다.  
  
 디렉터리의 이름이 변경 되는 <xref:System.IO.FileSystemWatcher> 자동으로 자체 이름을 새로 바꾼된 항목에 다시 연결 합니다. 예를 들어, 설정 하는 경우는 <xref:System.IO.FileSystemWatcher.Path%2A> 속성을 "C:\My Documents" 및 "C:\Your Documents" 디렉터리를 수동으로 바꿀, 구성 요소 이름을 새로 변경한 디렉터리 변경 알림을 수신 대기를 계속 합니다. 그러나 요청 하면는 <xref:System.IO.FileSystemWatcher.Path%2A> 속성을 이전 경로 포함 합니다. 조사할 디렉터리 구성 요소를 결정 하기 때문에 이런 디렉터리의 이름이 아니라 핸들에 기반 합니다. 이름 바꾸기 핸들 영향을 주지 않습니다. 따라서 구성 요소를 삭제 한 다음 업데이트 하지 않고 다시 작성 하는 경우는 <xref:System.IO.FileSystemWatcher.Path%2A> 속성을 응용 프로그램 디렉터리에서 더 이상 존재 하기 때문에 실패 합니다.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.IO.FileSystemWatcher> 런타임에 지정 된 디렉터리를 조사 하 합니다. 구성의 변경 내용을로 설정 되어 `LastWrite` 및 `LastAccess` 시간, 작성, 삭제 또는 디렉터리에 있는 텍스트 파일의 합니다. 파일 변경, 생성 또는 삭제 하는 경우에 파일의 경로를 콘솔에 인쇄 합니다. 파일의 이름이 변경 되는 이전 구문과 새 경로 콘솔에 인쇄 합니다.  
  
 사용 하 여는 <xref:System.Diagnostics> 및 <xref:System.IO> 이 예제에 대 한 네임 스페이스입니다.  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">지정된 경로가 없거나 찾지 못한 경우  
  
 또는  
  
 지정된 경로에 와일드카드 문자가 포함되어 있는 경우  
  
 또는  
  
 지정된 경로에 잘못된 경로 문자가 포함되어 있는 경우</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
        <altmember cref="P:System.IO.FileSystemWatcher.Filter" />
      </Docs>
    </Member>
    <Member MemberName="Renamed">
      <MemberSignature Language="C#" Value="public event System.IO.RenamedEventHandler Renamed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.RenamedEventHandler Renamed" />
      <MemberSignature Language="DocId" Value="E:System.IO.FileSystemWatcher.Renamed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Renamed As RenamedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::IO::RenamedEventHandler ^ Renamed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.IO.IODescription("Occurs when a file/directory rename matches the filter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.RenamedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>지정된 <see cref="P:System.IO.FileSystemWatcher.Path" />에서 파일이나 디렉터리의 이름이 바뀔 경우 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Renamed` 이벤트는는 <xref:System.IO.RenamedEventHandler> 대리자에는 다음 서명이입니다.

 ```csharp
public delegate void Renamed(object sender, RenamedEventArgs e);
 ```
 ```vb
Public Delegate Sub RenamedEventHandler(sender As Object, e As RenamedEventArgs)
 ```
 <xref:System.IO.RenamedEventArgs> 예: 이름 바꾸기의 형식 이름 바꾸기 작업에 대 한 정보를 제공 하는 개체 (의 <xref:System.IO.FileSystemEventArgs.ChangeType> 속성), 이전 및 새 이름 및 이전 구문과 새 경로입니다. <xref:System.IO.FileSystemEventArgs.Name> 속성에 대 한 일 수 있습니다 하는 경우 이벤트 이름을 바꿀는 <xref:System.IO.FileSystemWatcher> 않습니다 가져오기에 일치 하지 않는 운영 체제에서 이전 및 새 이름 이벤트입니다.

 감시 하는 디렉터리의 이름을 바꾸지 알림이 발생 하지 않습니다. 알림은 감시 하는 디렉터리 내의 항목에 대해서만 발생 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.IO.FileSystemWatcher.Renamed> 이벤트를 감시 파일 이름을 바꿀 때마다 콘솔에 파일 경로 표시 합니다.  
  
 [!code-cpp[Classic NotifyFilters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NotifyFilters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NotifyFilters Example/CS/source.cs#1)]
 [!code-vb[Classic NotifyFilters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NotifyFilters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)" />
        <altmember cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        <altmember cref="P:System.IO.FileSystemWatcher.Path" />
        <altmember cref="T:System.IO.RenamedEventArgs" />
        <altmember cref="T:System.IO.RenamedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.ISite" />에 대한 <see cref="T:System.IO.FileSystemWatcher" />를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.ComponentModel.ISite" />에 대한 <see cref="T:System.IO.FileSystemWatcher" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사이트 바인딩는 <xref:System.ComponentModel.Component> 에 <xref:System.ComponentModel.Design.IDesignerHost.Container%2A> 서로 통신할 수 있도록 할 뿐만 아니라 컨테이너에서 해당 구성 요소를 관리할 수 있는 방법을 제공 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.IO.FileSystemWatcher.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.IO.IODescription("The object used to marshal the event handler calls resulting from a directory change")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>디렉터리를 변경한 결과로 발생되는 이벤트 처리기 호출을 마샬링하는 데 사용되는 개체를 가져오거나 설정합니다.</summary>
        <value>디렉터리를 변경한 결과로 발생되는 이벤트 처리기 호출을 마샬링하는 데 사용되는 개체를 나타내는 <see cref="T:System.ComponentModel.ISynchronizeInvoke" />입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때 <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> 은 `null`를 처리 하는 메서드가 <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, 및 <xref:System.IO.FileSystemWatcher.Renamed> 시스템 스레드 풀의 스레드라도에서 이벤트를 호출 합니다. 시스템 스레드 풀에 대 한 자세한 내용은 참조 하십시오. <xref:System.Threading.ThreadPool>합니다.  
  
 경우는 <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, 및 <xref:System.IO.FileSystemWatcher.Renamed> 이벤트가 같은 visual Windows Forms 구성 요소에 의해 처리 되는 <xref:System.Windows.Forms.Button>, 작동 하지 않을 수 시스템 스레드 풀을 통해 구성 요소를 액세스 하거나 예외가 발생할 수 있습니다. 설정 하 여이 문제를 방지 <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> 처리 하는 메서드 때문에 Windows Forms 구성 요소에는 <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, 및 <xref:System.IO.FileSystemWatcher.Renamed> 구성 요소를 만든 동일한 스레드에서 호출 되는 이벤트입니다.  
  
 경우는 <xref:System.IO.FileSystemWatcher> 내에서 사용 되 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] Windows Forms 디자이너에서 <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> 포함 하는 컨트롤에 자동으로 설정 된 <xref:System.IO.FileSystemWatcher>합니다. 예를 들어, 배치 하는 경우는 <xref:System.IO.FileSystemWatcher> form1 디자이너에서 (에서 상속 되 <xref:System.Windows.Forms.Form>)는 <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> 속성 <xref:System.IO.FileSystemWatcher> Form1의 인스턴스로 설정 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForChanged">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>발생한 변경 내용에 대한 특정 정보를 포함하는 구조를 반환하는 동기 메서드입니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForChanged">
      <MemberSignature Language="C#" Value="public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.IO.WaitForChangedResult WaitForChanged(valuetype System.IO.WatcherChangeTypes changeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForChanged (changeType As WatcherChangeTypes) As WaitForChangedResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::WaitForChangedResult WaitForChanged(System::IO::WatcherChangeTypes changeType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.WaitForChangedResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeType" Type="System.IO.WatcherChangeTypes" />
      </Parameters>
      <Docs>
        <param name="changeType">조사할 <see cref="T:System.IO.WatcherChangeTypes" />입니다.</param>
        <summary>모니터링할 변경 내용 형식이 제공된 경우에, 발생한 변경 내용에 대한 특정 정보를 포함하는 구조를 반환하는 동기 메서드입니다.</summary>
        <returns>발생한 변경 내용에 대한 특정 정보를 포함하는 <see cref="T:System.IO.WaitForChangedResult" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 발생 하 고 다음을 반환 하는 첫 번째 변경 사항을 때까지 무기한 기다립니다. 이 사용 하 여 동일 <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> 와 `timeout` 매개 변수가-1로 설정 합니다.  
  
> [!NOTE]
>  이 메서드를 사용 하면 변경 되어도 파일에 응답 하도록 호출 되어야 하는 이벤트 처리기는 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> 속성이 `false`합니다.  
  
 일부 시스템에서 <xref:System.IO.FileSystemWatcher> 간단한 8.3 파일 이름 형식을 사용 하 여 파일에 변경 내용을 보고 합니다. "LongFileName.LongExtension"에 대 한 변경으로 보고 예를 들어 "LongFi ~ 합니다. Lon "입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.WaitForChangedResult" />
      </Docs>
    </Member>
    <Member MemberName="WaitForChanged">
      <MemberSignature Language="C#" Value="public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.IO.WaitForChangedResult WaitForChanged(valuetype System.IO.WatcherChangeTypes changeType, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForChanged (changeType As WatcherChangeTypes, timeout As Integer) As WaitForChangedResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::WaitForChangedResult WaitForChanged(System::IO::WatcherChangeTypes changeType, int timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.Watcher</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.WaitForChangedResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeType" Type="System.IO.WatcherChangeTypes" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="changeType">조사할 <see cref="T:System.IO.WatcherChangeTypes" />입니다.</param>
        <param name="timeout">시간 제한 범위 내에서 대기할 시간(밀리초)입니다.</param>
        <summary>모니터링할 변경 내용 형식과 제한 시간 범위 내에서 대기할 시간(밀리초)이 제공된 경우에, 발생한 변경 내용에 대한 특정 정보를 포함하는 구조를 반환하는 동기 메서드입니다.</summary>
        <returns>발생한 변경 내용에 대한 특정 정보를 포함하는 <see cref="T:System.IO.WaitForChangedResult" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 변경이 발생 하거나 시간이 초과 될 때까지 대기 합니다. 값이-1은 `timeout` 매개 변수는 무기한 대기를 의미 합니다.  
  
> [!NOTE]
>  이 메서드를 사용 하면 변경 되어도 파일에 응답 하도록 호출 되어야 하는 이벤트 처리기는 <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> 속성이 `false`합니다.  
  
 일부 시스템에서 <xref:System.IO.FileSystemWatcher> 간단한 8.3 파일 이름 형식을 사용 하 여 파일에 변경 내용을 보고 합니다. "LongFileName.LongExtension"에 대 한 변경으로 보고 예를 들어 "LongFi ~ 합니다. Lon "입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.WaitForChangedResult" />
      </Docs>
    </Member>
  </Members>
</Type>